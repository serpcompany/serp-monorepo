[
  {
    "owner": "jestjs",
    "repo": "jest",
    "content": "TITLE: Using beforeEach and afterEach in Jest - JavaScript\nDESCRIPTION: Demonstrates how to set up resources with beforeEach and tear them down with afterEach before and after every test in a test file. Requires Jest and a test environment providing initializeCityDatabase, clearCityDatabase, and isCity methods. Each test checks the presence of specific cities, and hooks ensure a clean database state; suitable for both synchronous and asynchronous setup/teardown.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing String Equality with toBe() in Jest\nDESCRIPTION: Demonstrates basic use of expect().toBe() to test that a function returns the expected string value. The test checks if the bestLaCroixFlavor() function returns 'grapefruit'.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Calls, Arguments, and Return Values in JavaScript\nDESCRIPTION: This snippet provides various Jest assertion examples using the `.mock` property. It demonstrates how to check the number of calls (`.mock.calls.length`), specific arguments passed (`.mock.calls[index][argIndex]`), return values (`.mock.results[index].value`), the `this` context (`.mock.contexts[index]`), the number of instantiations (`.mock.instances.length`), properties of instantiated objects (`.mock.instances[index].property`), and the arguments of the last call (`.mock.lastCall`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// The function was called exactly once\nexpect(someMockFunction.mock.calls).toHaveLength(1);\n\n// The first arg of the first call to the function was 'first arg'\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toBe('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Jest Test Case\nDESCRIPTION: This JavaScript code demonstrates a basic Jest test. It imports the `sum` function from `./sum.js` and defines a test case using the `test` function. Inside the test, `expect` and the `toBe` matcher are used to assert that calling `sum(1, 2)` results in `3`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Using mockResolvedValue for async mocks (TypeScript)\nDESCRIPTION: TypeScript implementation of mockResolvedValue showing how to create a properly typed mock function that returns a resolved Promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Jest-aware Babel Configuration\nDESCRIPTION: Creates a Babel configuration that checks if it's running in a test environment to conditionally apply different settings for Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  const isTest = api.env('test');\n  // You can use isTest to determine what presets and plugins to use.\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Primitive Equality with `expect().toBe()` in Jest (JavaScript)\nDESCRIPTION: Demonstrates a basic Jest test case using `expect()` with the `.toBe()` matcher to assert that the result of `bestLaCroixFlavor()` is strictly equal (using `Object.is`) to the string 'grapefruit'. Requires a Jest testing environment. Assumes `bestLaCroixFlavor()` is a function available in the test scope that returns a value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntest('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Promises in JavaScript with Jest\nDESCRIPTION: Example of testing asynchronous code that returns a promise. The test waits for the promise to resolve before completing and making assertions on the resolved value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntest('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Globally Registering a Custom Jest Matcher via Setup Files (JavaScript)\nDESCRIPTION: Illustrates how to make a custom matcher, like `toBeWithinRange`, available in all test files automatically without needing individual imports. This is achieved by calling `expect.extend` within a JavaScript file specified in Jest's `setupFilesAfterEnv` configuration array. The matcher function must be exported from its definition file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_64\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport {expect} from '@jest/globals';\n// remember to export `toBeWithinRange` as well\nimport {toBeWithinRange} from './toBeWithinRange';\n\nexpect.extend({\n  toBeWithinRange,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll for Global Setup in Jest\nDESCRIPTION: Example showing how to use beforeAll() to set up a global database before any tests run. It demonstrates asynchronous setup with promises that Jest will wait to resolve.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Nested describe and test Block Output Ordering in Jest (JavaScript)\nDESCRIPTION: Shows declaring nested describe and test blocks in Jest, interleaved with console.log statements to illustrate the order in which describe handlers and tests are executed. Useful for understanding how Jest collects and runs tests, particularly in complex test suite structures. All logging occurs according to declaration and execution phase separation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('describe outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n\n    test('test 1', () => console.log('test 1'));\n  });\n\n  console.log('describe outer-b');\n\n  test('test 2', () => console.log('test 2'));\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n\n    test('test 3', () => console.log('test 3'));\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test 1\n// test 2\n// test 3\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Jest mock functions\nDESCRIPTION: Shows how to use TypeScript with Jest mock functions, including type inference, generic type arguments, and utility types for better type safety in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    return value + fn(value - 1);\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking class constructor and replacing methods - Jest - TypeScript\nDESCRIPTION: Shows how to declare and mock a TypeScript class for testing. The first snippet defines a class with a method. The second uses Jest to mock the constructor, injects a mock method, and captures calls to the mock. Dependencies: TypeScript compiler, @jest/globals. This technique is core for isolating and unit-testing classes by swapping implementations of selected methods, with correct type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Using Jest `.resolves` Matcher for Promise Testing\nDESCRIPTION: This snippet shows a more concise way to test a fulfilled promise using Jest's `.resolves` matcher. It asserts that the promise returned by `user.getUserName(5)` resolves, and that the resolved value is 'Paul'. The `expect` statement must be returned from the test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nit('works with resolves', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Order of Execution for Multiple Jest Hooks of the Same Type (JavaScript)\nDESCRIPTION: Demonstrates the execution order when multiple `beforeEach` and `afterEach` hooks are declared, both at the top level and within nested `describe` blocks. `before*` hooks run in declaration order, while `after*` hooks run in reverse declaration order (LIFO - Last In, First Out) relative to their scope. The expected console output clarifies the sequence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => console.log('connection setup'));\nbeforeEach(() => console.log('database setup'));\n\nafterEach(() => console.log('database teardown'));\nafterEach(() => console.log('connection teardown'));\n\ntest('test 1', () => console.log('test 1'));\n\ndescribe('extra', () => {\n  beforeEach(() => console.log('extra database setup'));\n  afterEach(() => console.log('extra database teardown'));\n\n  test('test 2', () => console.log('test 2'));\n});\n\n// connection setup\n// database setup\n// test 1\n// database teardown\n// connection teardown\n\n// connection setup\n// database setup\n// extra database setup\n// test 2\n// extra database teardown\n// database teardown\n// connection teardown\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Explicit Generic Typing in Template Literal Tables in Jest (TypeScript)\nDESCRIPTION: Demonstrates best practices for type safety in parameterized Jest tests, using an explicit generic type argument with a template literal data table. Explicit typing ensures each field is strictly typed as defined, including optional properties. This is essential for robustly typed TypeScript test suites. Dependencies are Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // all arguments are typed as expected, e.g. `a: number`, `expected: string`, `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with .resolves/.rejects in Jest with JavaScript\nDESCRIPTION: These two snippets show how to use Jest's .resolves and .rejects matchers directly within an expect call returned from a test. Returning the expect ensures async resolution is awaited. The first test checks that fetchData resolves to 'peanut butter'; the second expects fetchData to reject with an error matching 'error'. Requires Jest and a promise-returning fetchData function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Test Timeout in Jest using JavaScript\nDESCRIPTION: This snippet illustrates changing the default timeout for all tests and hooks in the current test file with `jest.setTimeout`. By default, Jest uses a 5-second timeout; here, it is set to 1 second (1000 ms). Useful for enforcing shorter or longer test durations across an entire file, especially for performance-sensitive or slow environments. Parameter: timeout in milliseconds (here, `1000`). No dependencies besides Jest; this setting does not affect other files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\njest.setTimeout(1000); // 1 second\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeated Setup and Teardown Hooks in Jest (JavaScript)\nDESCRIPTION: Demonstrates the use of Jest\\'s beforeEach and afterEach hooks for repeated test initialization and cleanup, particularly with a hypothetical city database. Each test runs with the database freshly set up and then cleaned. Requires custom methods like initializeCityDatabase, clearCityDatabase, and isCity defined elsewhere. Each test verifies the existence of a specified city, expecting a truthy result.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Mock Function Call Count with expect.toHaveBeenCalledTimes\nDESCRIPTION: Demonstrates using the `toHaveBeenCalledTimes` matcher (alias `toBeCalledTimes`) in Jest to assert the exact number of times a mock function (`jest.fn()`) was called. This example tests a `drinkEach` function that should call the mock `drink` function twice.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Jest Mock Function Calls and Instances in JavaScript\nDESCRIPTION: This snippet showcases the use of Jest's .mock property to access advanced information about how mock functions have been called, their contexts ('this'), and instances created via new. The example includes creating a mock constructor, binding contexts, and inspecting calls, making it especially relevant when verifying instance creation or context propagation in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\n----------------------------------------\n\nTITLE: Mocking Axios Module Dependencies in Jest Tests (JavaScript)\nDESCRIPTION: This Jest test demonstrates how to mock the `axios` module to test the `Users.all` method without making actual HTTP requests. `jest.mock('axios')` replaces `axios` with a mock. Then, `axios.get.mockResolvedValue(resp)` configures the mocked `get` method to return a predefined successful promise. The test verifies that `Users.all()` returns the expected data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport axios from 'axios';\nimport Users from './users';\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  // or you could use the following depending on your use case:\n  // axios.get.mockImplementation(() => Promise.resolve(resp))\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing a Function with a Jest Mock Callback in JavaScript\nDESCRIPTION: Shows how to test the previously defined `forEach` function using Jest. It creates a mock callback using `jest.fn()`, calls `forEach` with it, and then uses `expect` assertions to verify the number of calls, arguments passed, and return values of the mock callback via its `.mock` property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst forEach = require('./forEach');\n\nconst mockCallback = jest.fn(x => 42 + x);\n\ntest('forEach mock function', () => {\n  forEach([0, 1], mockCallback);\n\n  // The mock function was called twice\n  expect(mockCallback.mock.calls).toHaveLength(2);\n\n  // The first argument of the first call to the function was 0\n  expect(mockCallback.mock.calls[0][0]).toBe(0);\n\n  // The first argument of the second call to the function was 1\n  expect(mockCallback.mock.calls[1][0]).toBe(1);\n\n  // The return value of the first call to the function was 42\n  expect(mockCallback.mock.results[0].value).toBe(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest test for the sum function\nDESCRIPTION: Example of a Jest test case for the previously defined sum function.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Repeating Setup/Teardown with beforeEach/afterEach in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `beforeEach` to run setup code (e.g., initializing a database) before every test in a file and `afterEach` to run teardown code (e.g., clearing the database) after every test. This ensures a clean state for each test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Scoped Setup/Teardown and Nested describe Hooks in Jest (JavaScript)\nDESCRIPTION: Illustrates using both top-level and describe-scoped beforeEach for test isolation when working with multiple resources, such as city and food databases. The top-level hooks apply to all tests, while hooks inside describe blocks only affect tests within that block. Shows dependency on initializeCityDatabase, initializeFoodDatabase, isCity, and isValidCityFoodPair functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Applies to all tests in this file\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering and Snapshot Testing a React Component with Jest (TypeScript)\nDESCRIPTION: This code illustrates creating a snapshot test for a React component using Jest and react-test-renderer in TypeScript. The test renders a Link component, creates a serialized tree, and then compares it with a stored snapshot using toMatchSnapshot. Prerequisites include installing jest, react, and react-test-renderer, and the Link component must be either mocked or imported from the appropriate path. The main parameter is the rendered JSX for Link, with page prop. On first run, Jest generates the snapshot; on subsequent runs, any mismatch flags a test failure. Outputs are pass/fail test results and possibly new snapshot artifact files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Negating Matchers in Jest Assertions (JavaScript)\nDESCRIPTION: Demonstrates how to assert the negation of conditions within Jest tests using the 'not' modifier. Nested loops sum pairs of positive integers between 1 and 9, asserting that their sum is never zero. Requires Jest. Inputs are the range bounds; output is passing tests unless logic fails.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Jest Test Case\nDESCRIPTION: Creates a test file that imports the sum function and tests if it correctly adds 1 + 2 to equal 3 using Jest's expect and toBe matchers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Resolved Promises with mockResolvedValue in JavaScript\nDESCRIPTION: Shows how to use mockResolvedValue to create a mock function that returns a resolved promise. Useful for testing async functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Jest Hook Execution Order with Nesting (JavaScript)\nDESCRIPTION: Provides an example demonstrating the precise order of execution for `beforeAll`, `afterAll`, `beforeEach`, `afterEach` hooks and tests, including how hooks within nested `describe` blocks interact with top-level hooks. The expected console output is included as comments to clarify the flow.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\n\ntest('', () => console.log('1 - test'));\n\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n----------------------------------------\n\nTITLE: Testing CheckboxWithLabel with React Testing Library (TSX)\nDESCRIPTION: A Jest test suite for the `CheckboxWithLabel` component using `@testing-library/react`. It renders the component, verifies the initial label text using `queryByLabelText`, simulates a click event on the label using `fireEvent.click` and `getByLabelText`, and then asserts that the label text has changed correctly. The `afterEach(cleanup)` call ensures the DOM is cleaned up after each test (automatic in newer versions).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\n// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher\n// unmount and cleanup DOM after the test is finished.\nafterEach(cleanup);\n\nit('CheckboxWithLabel changes the text after click', () => {\n  const {queryByLabelText, getByLabelText} = render(\n    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,\n  );\n\n  expect(queryByLabelText(/off/i)).toBeTruthy();\n\n  fireEvent.click(getByLabelText(/off/i));\n\n  expect(queryByLabelText(/on/i)).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Array of Objects Using Jest (JavaScript)\nDESCRIPTION: Showcases the use of `test.each` with an array of objects, supporting easier parameter mapping and test title injection using $variable syntax. Each object\\'s properties are destructured as function parameters, allowing descriptive and dynamic test titles. Prerequisites include Jest and data positioned as a list of objects with consistent keys.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Truthy with Jest in JavaScript\nDESCRIPTION: Illustrates the `.toBeTruthy()` matcher in Jest, used to check if a value is considered true in a boolean context. This is helpful when the specific truthy value (any value other than `false`, `0`, `''`, `null`, `undefined`, `NaN`) doesn't matter. The example checks if a hypothetical `thirstInfo()` function returns a truthy value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\ndrinkSomeLaCroix();\nif (thirstInfo()) {\n  drinkMoreLaCroix();\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ntest('drinking La Croix leads to having thirst info', () => {\n  drinkSomeLaCroix();\n  expect(thirstInfo()).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Range Matcher in JavaScript\nDESCRIPTION: Creates a custom Jest matcher called toBeWithinRange that checks if a number is within a specified range. Demonstrates the structure of a custom matcher including type checking and proper error messages.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect} from '@jest/globals';\n\nfunction toBeWithinRange(actual, floor, ceiling) {\n  if (\n    typeof actual !== 'number' ||\n    typeof floor !== 'number' ||\n    typeof ceiling !== 'number'\n  ) {\n    throw new TypeError('These must be of type number!');\n  }\n\n  const pass = actual >= floor && actual <= ceiling;\n  if (pass) {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} not to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: true,\n    };\n  } else {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: false,\n    };\n  }\n}\n\nexpect.extend({\n  toBeWithinRange,\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Calls with Jest Custom Matchers in JavaScript\nDESCRIPTION: Demonstrates the use of Jest's built-in custom matchers (`toHaveBeenCalled`, `toHaveBeenCalledWith`, `toHaveBeenLastCalledWith`, `toMatchSnapshot`) to assert how mock functions have been called. These matchers provide syntactic sugar for common assertions on mock behavior, simplifying test code. Requires a Jest environment and a mock function (`mockFunc`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// The mock function was called at least once\nexpect(mockFunc).toHaveBeenCalled();\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);\n\n// All calls and the name of the mock is written as a snapshot\nexpect(mockFunc).toMatchSnapshot();\n```\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing a React Component with Jest\nDESCRIPTION: Test file demonstrating how to create and use snapshots to test a React component's rendering behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('changes the class when hovered', () => {\n  const component = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>,\n  );\n  let tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseEnter();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseLeave();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking an ES6 Class with Module Factory Parameter - JavaScript\nDESCRIPTION: Illustrates using jest.mock with a factory function to customize the mock returned when the ES6 class module is imported. The provided factory returns a jest.fn() that mimics the class, supplying mock playSoundFile methods for detailed assertion. Variable naming is important: only names beginning with 'mock' may be safely referenced in the factory, due to Jest hoisting rules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Types with Mock Definitions using `jest.Mocked` (TypeScript)\nDESCRIPTION: Explains the `jest.Mocked<Source>` utility type, which wraps an existing type (like the imported `fetch` function) with Jest's mock function type definitions. This enhances type checking for mock interactions like `mockClear()` within tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\n// Assuming getMockedFetch returns the mocked fetch correctly typed\ndeclare function getMockedFetch(): jest.Mocked<typeof fetch>; \n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jest.useFakeTimers and Jest.useRealTimers in Tests - JavaScript\nDESCRIPTION: Presents test cases for controlling Jest's fake timer system using jest.useFakeTimers and jest.useRealTimers with and without configuration. Demonstrates setup for advancing timers, faking/exempting APIs, and tearing down fake timers. Requires Jest test environment. Inputs: timer configuration object; outputs: none directly, but sets up the timer environment for subsequent test logic. Highlights timer isolation best practices.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('advance the timers automatically', () => {\n  jest.useFakeTimers({advanceTimers: true});\n  // ...\n});\n\ntest('do not advance the timers and do not fake `performance`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n  // ...\n});\n\ntest('uninstall fake timers for the rest of tests in the file', () => {\n  jest.useRealTimers();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async with Jest using async/await - JavaScript\nDESCRIPTION: Shows two approaches for testing asynchronous code in Jest using ES2017 async/await syntax. The first test awaits the direct result and asserts the value, while the second combines await with '.resolves' for streamlined resolution checks. Requires Babel support for async/await and proper Jest configuration. Tests user.getUserName for valid user IDs, returning the expected name as a string.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// async/await can be used.\\nit('works with async/await', async () => {\\n  expect.assertions(1);\\n  const data = await user.getUserName(4);\\n  expect(data).toBe('Mark');\\n});\\n\\n// async/await can also be used with `.resolves`.\\nit('works with async/await and resolves', async () => {\\n  expect.assertions(1);\\n  await expect(user.getUserName(5)).resolves.toBe('Paul');\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promises in Jest with JavaScript\nDESCRIPTION: This snippet demonstrates how to test a function returning a promise in JavaScript using Jest. The test returns the promise so that Jest waits for it to resolve before finishing. It depends on Jest's testing functions and requires a function fetchData that returns a promise resolving to 'peanut butter'. The key parameter is the resolved value which should meet the expected value, causing the assertion to pass or fail.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using afterAll for Global Cleanup in Jest\nDESCRIPTION: Example showing how to use afterAll() to clean up a global database after all tests have completed. This pattern ensures resources are properly released after test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Date.now() Spy Utility\nDESCRIPTION: Implements a utility function that creates a typed spy for Date.now() using jest.Spied<Source> type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing forEach with Jest Mock Functions in JavaScript\nDESCRIPTION: Tests the forEach function using Jest's mock functions. The snippet demonstrates creating a mock callback, tracking how many times it was called, capturing arguments passed to each call, and verifying expected return values. Requires Jest as a dependency and expects the forEach implementation to be imported from a sibling file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst forEach = require('./forEach');\n\nconst mockCallback = jest.fn(x => 42 + x);\n\ntest('forEach mock function', () => {\n  forEach([0, 1], mockCallback);\n\n  // The mock function was called twice\n  expect(mockCallback.mock.calls).toHaveLength(2);\n\n  // The first argument of the first call to the function was 0\n  expect(mockCallback.mock.calls[0][0]).toBe(0);\n\n  // The first argument of the second call to the function was 1\n  expect(mockCallback.mock.calls[1][0]).toBe(1);\n\n  // The return value of the first call to the function was 42\n  expect(mockCallback.mock.results[0].value).toBe(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a TypeScript Jest Test with Explicit Type Imports - TypeScript\nDESCRIPTION: Imports 'describe', 'expect', and 'test' from '@jest/globals' and tests the 'sum' function in TypeScript. Shows how to structure a test in 'sum.test.ts', making use of the type-safe Jest API. Requires project set up for TypeScript and Jest, and '@jest/globals' installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, expect, test} from '@jest/globals';\nimport {sum} from './sum';\n\ndescribe('sum module', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Setup with Promises in Jest beforeEach (JavaScript)\nDESCRIPTION: This code snippet illustrates how to handle asynchronous setup operations within a `beforeEach` hook in Jest. If the setup function (`initializeCityDatabase` in this case) returns a promise, Jest will wait for that promise to resolve before executing the test. This ensures the setup is complete before the test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Callbacks in Jest with JavaScript\nDESCRIPTION: This snippet demonstrates how to test asynchronous callback-based functions using Jest by passing a done callback. It wraps the expect statement in a try/catch to pass any errors to done, allowing errors to be surfaced correctly in test results. It expects fetchData to invoke the provided callback with data 'peanut butter'. The test will fail if done is never called or the assertion fails, adhering to Jest's callback-based async test pattern.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', done => {\n  function callback(error, data) {\n    if (error) {\n      done(error);\n      return;\n    }\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with Catch\nDESCRIPTION: Shows how to test rejected promises using the .catch method and expect.assertions for verification.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(error => expect(error).toMatch('error'));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with async/await in Jest\nDESCRIPTION: This snippet demonstrates testing asynchronous code using the `async`/`await` syntax in Jest. The test function is marked `async`, allowing the use of `await` to wait for the promise from `user.getUserName(4)` to resolve before performing the assertion. Requires Babel setup for `async/await`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// async/await can be used.\nit('works with async/await', async () => {\n  expect.assertions(1);\n  const data = await user.getUserName(4);\n  expect(data).toBe('Mark');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing API Fetch with Jest Mocking on Axios in JavaScript\nDESCRIPTION: A test file that mocks the axios library and verifies that Users.all correctly fetches and returns user data. It uses jest.mock to replace axios, configures axios.get to resolve to custom data, and asserts the output with toEqual. Inputs are simulated users, dependencies are Users (class under test) and Jest. Useful for ensuring that code interacts correctly with a dependency without making actual network requests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport axios from 'axios';\nimport Users from './users';\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  // or you could use the following depending on your use case:\n  // axios.get.mockImplementation(() => Promise.resolve(resp))\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Test Handling Promises with test in Jest (JavaScript)\nDESCRIPTION: This example demonstrates how Jest can handle asynchronous promise-based logic in tests. It checks that fetchBeverageList returns a promise that resolves to an array containing 'lemon'. Jest handles the promise automatically, and the test does not complete until the promise resolves. The snippet assumes the existence of fetchBeverageList. This idiom is important when testing async code; input is a promise-returning function, expected output is a resolved promise with correct contents.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking with Factory Parameter in jest.mock - JavaScript\nDESCRIPTION: Shows how to use jest.mock with a module factory function to return a customized mock constructor for SoundPlayer. The mock implementation injects test logic for playSoundFile and enables tracking via named mockPlaySoundFile. Jest and module dependency structure are required for this to work.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Reporters with Options in JavaScript\nDESCRIPTION: Example of configuring coverage reporters with additional options in Jest using JavaScript. It demonstrates how to use the tuple form to pass options to a text reporter to skip fully-covered files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing Async Functionality with Jest Promises - JavaScript\nDESCRIPTION: Tests asynchronous code by mocking dependencies and asserting results via promise chains in Jest. The test imports the user module, mocks the request dependency, and expects one assertion: that user.getUserName resolves to 'Mark' for user ID 4. Requires Jest's mocking functionality and assumes user and mock files are set up correctly. The test case returns a Promise so Jest waits for completion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.mock('../request');\\n\\nimport * as user from '../user';\\n\\n// The assertion for a promise must be returned.\\nit('works with promises', () => {\\n  expect.assertions(1);\\n  return user.getUserName(4).then(data => expect(data).toBe('Mark'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Performing a Partial Mock of a Module with Jest in JavaScript\nDESCRIPTION: This test configures a custom partial mock on a module: the default export and named export 'foo' are replaced with mock implementations while 'bar' remains real. It uses jest.mock with a factory, merges the actual module with mock overrides, and asserts expected behavior and call counts. Inputs are the module's exports. Dependencies: Jest test environment. Enables selective mocking while keeping parts of the real implementation for hybrid test scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n//test.js\nimport defaultExport, {bar, foo} from '../foo-bar-baz';\n\njest.mock('../foo-bar-baz', () => {\n  const originalModule = jest.requireActual('../foo-bar-baz');\n\n  //Mock the default export and named export 'foo'\n  return {\n    __esModule: true,\n    ...originalModule,\n    default: jest.fn(() => 'mocked baz'),\n    foo: 'mocked foo',\n  };\n});\n\ntest('should do a partial mock', () => {\n  const defaultExportResult = defaultExport();\n  expect(defaultExportResult).toBe('mocked baz');\n  expect(defaultExport).toHaveBeenCalled();\n\n  expect(foo).toBe('mocked foo');\n  expect(bar()).toBe('bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll and afterAll for One-Time Setup in Jest\nDESCRIPTION: Illustrates the use of beforeAll and afterAll hooks for one-time setup and teardown of a reusable database across multiple tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Structure and Type with .toStrictEqual in Jest (JavaScript)\nDESCRIPTION: Illustrates `.toStrictEqual` for comparing objects, emphasizing its strictness compared to `.toEqual`. It checks for object type (class instance vs. literal), keys with `undefined` properties, `undefined` array items, and array sparseness. The example shows that a class instance is `.toEqual` to a literal object with the same properties but not `.toStrictEqual` because their types differ.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: js\nCODE:\n```\nclass LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('the La Croix cans on my desk', () => {\n  test('are not semantically the same', () => {\n    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});\n    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Native Intro Component - TypeScript (React)\nDESCRIPTION: This TypeScript snippet defines the 'Intro' React Native component, presenting a welcome message and instructions, and includes centralized style definitions. Dependent on React and react-native modules, it is intended to be tested with Jest using snapshot tests. The component receives no parameters and outputs a styled View with two Text elements. It should be exported and imported by test suites or other modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nclass Intro extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n        <Text style={styles.instructions}>\n          This is a React Native snapshot test.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  instructions: {\n    color: '#333333',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  welcome: {\n    fontSize: 20,\n    margin: 10,\n    textAlign: 'center',\n  },\n});\n\nexport default Intro;\n```\n\n----------------------------------------\n\nTITLE: Mocking Date.now with Jest for Deterministic Snapshots in JavaScript\nDESCRIPTION: Demonstrates how to mock the global `Date.now()` method using `jest.fn()` to return a fixed timestamp. This ensures that tests relying on the current time produce consistent, deterministic snapshot outputs across different test runs, preventing failures due to time differences. The example returns the specific timestamp `1482363367071`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\n----------------------------------------\n\nTITLE: Fallback Behavior for mockImplementationOnce and Defaults in Jest JavaScript\nDESCRIPTION: Demonstrates chaining mockImplementationOnce with a fallback default implementation in Jest. After the custom 'once' implementations are depleted, further calls revert to the provided default implementation. Useful for controlling test flow when specific responses are only needed for early calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Testing the Sum Function with Jest - JavaScript\nDESCRIPTION: Illustrates testing a function with Jest using CommonJS require syntax. The snippet imports the 'sum' function, then defines a Jest test case that asserts sum(1, 2) equals 3 using Jest's 'expect' and 'toBe' matchers. Inputs are fixed values; output will be a passing test if the function is correct. Requires Jest as a dev dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with a Manual ES6 Class Mock in Jest\nDESCRIPTION: Illustrates how to use the manual mock defined in `__mocks__/sound-player.js`. The test imports the mock `SoundPlayer` and the exported `mockPlaySoundFile` function to verify interactions within `SoundPlayerConsumer`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"sound-player-consumer.test.js\"\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring maxWorkers in Jest Config - TypeScript\nDESCRIPTION: Shows how to set Jest's 'maxWorkers' option as a percentage string using a TypeScript configuration export. Imports the 'Config' type from Jest and exports the configuration as default. Requires TypeScript and the Jest type definitions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  maxWorkers: '50%',\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Mock Function Calls with expect.toHaveBeenCalled\nDESCRIPTION: Illustrates how to use `jest.fn()` to create a mock function and the `toHaveBeenCalled` matcher (alias `toBeCalled`) in Jest to verify that the mock function was invoked. The example tests a `drinkAll` function, ensuring it calls the provided callback under certain conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('drinks something lemon-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('does not drink something octopus-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple Resolved Promises with mockResolvedValueOnce in JavaScript\nDESCRIPTION: Demonstrates using mockResolvedValueOnce to specify different resolved values for successive async calls to a mock function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await for Success in Jest (JavaScript)\nDESCRIPTION: Illustrates using `async` and `await` syntax for testing asynchronous code. The `async` keyword marks the test function, and `await` pauses execution until the `fetchData` promise resolves. The resolved value is then asserted.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using Jest CLI - Bash\nDESCRIPTION: These snippets show how to run various Jest commands from the terminal using bash. They demonstrate invoking Jest to execute all tests, target specific test files or patterns, enable test selection by pattern, watch mode, use CLI flags, and pass command line arguments via package managers. No dependencies except a working Jest installation are required. Inputs are CLI arguments which specify the test target, and outputs are test execution results in the terminal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njest\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest my-test #or\njest path/to/my-test.js\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -o\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -t name-of-spec\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --watch #runs jest -o by default\njest --watchAll #runs all tests\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -u -t=\"ColorPicker\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -u -t=\"ColorPicker\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --collect-coverage\njest --collectCoverage\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --update-snapshot --detectOpenHandles\n\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Equality Within Arrays Using Jest .toContainEqual - JavaScript\nDESCRIPTION: Shows how to verify the presence of an item with a specific structure and values in an array using .toContainEqual in Jest. Requires Jest environment. The test recursively compares object fields for equality, rather than identity. Expects myBeverages() to return an array of beverages containing the specified myBeverage object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with Jest Matchers in JavaScript\nDESCRIPTION: Uses Jest numeric matchers such as \".toBeGreaterThan\", \".toBeLessThanOrEqual\", and \".toEqual\" to perform a variety of number comparisons within a test case. Designed to show the flexibility of Jest matchers when working with numeric assertions. No special dependencies except Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Fulfilled Promises with `expect().resolves` in Jest (JavaScript)\nDESCRIPTION: Illustrates using the `.resolves` modifier in an asynchronous Jest test to unwrap the value of a fulfilled promise. It then chains the `.toBe()` matcher to assert that the resolved value matches the expected value ('lemon'). The `return` statement is crucial for Jest to correctly handle the asynchronous nature of the promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntest('resolves to lemon', () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n```\n\n----------------------------------------\n\nTITLE: Collecting Coverage from Selected Files in CommonJS JavaScript\nDESCRIPTION: The snippet configures Jest to collect coverage only from JavaScript and JSX files, excluding those in 'node_modules' and 'vendor' folders. This is useful for fine-tuned coverage collection and reporting. It must be used in combination with 'collectCoverage: true' or '--coverage'. Exports config as a CommonJS module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  collectCoverageFrom: [\\n    '**/*.{js,jsx}',\\n    '!**/node_modules/**',\\n    '!**/vendor/**',\\n  ],\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Manual Assertion Alternatives for Jest Mock Functions\nDESCRIPTION: These are manual equivalents to Jest's built-in mock matchers that directly inspect the `.mock` property. They provide more flexibility for specific assertions that aren't covered by the sugar matchers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n// The first arg of the last call to the mock function was `42`\n// (note that there is no sugar helper for this specific of an assertion)\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// A snapshot will check that a mock was invoked the same number of times,\n// in the same order, with the same arguments. It will also assert on the name.\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with Jest - JavaScript\nDESCRIPTION: This snippet demonstrates how to test a function returning a Promise using Jest. The test returns the promise from the test callback, allowing Jest to wait for it to resolve or reject before completing the test. The key parameter is the value returned by fetchData, expected to be 'peanut butter'. No additional dependencies are required beyond Jest itself.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Getter and Setter Accessors - Jest - JavaScript\nDESCRIPTION: Shows how to use jest.spyOn to spy specifically on getter and setter property access. Input: object with getter/setter; Outputs: assertions about spy call and property value. Requires Jest and properly defined property accessors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst audio = require('./audio');\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play', 'get'); // we pass 'get'\n  const isPlaying = video.play;\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n\ntest('plays audio', () => {\n  const spy = jest.spyOn(audio, 'volume', 'set'); // we pass 'set'\n  audio.volume = 100;\n\n  expect(spy).toHaveBeenCalled();\n  expect(audio.volume).toBe(100);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and Babel Dependencies Manually (Bash)\nDESCRIPTION: Command to install necessary development dependencies for setting up Jest testing in a React project without Create React App. This includes Jest itself, Babel core components (`babel-jest`, `@babel/preset-env`, `@babel/preset-react`), and `react-test-renderer` for snapshot testing. Use either npm or yarn.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Global Setup Script in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet provides an example of a `globalSetup` module (`setup.js`). This module exports an async function that runs once before all test suites. It receives Jest's global and project configurations, logs some config details, and sets a global reference (`globalThis.__MONGOD__`) intended for use in the teardown phase (e.g., storing a database server instance).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  // Set reference to mongod in order to close the server during teardown.\n  globalThis.__MONGOD__ = mongod;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with .rejects Matcher in Jest (JavaScript)\nDESCRIPTION: Illustrates using the `.rejects` matcher with `expect` for testing expected promise rejections. The test must return the `expect` statement to ensure Jest waits for the promise from `fetchData` to reject before validating the rejection reason.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test with test in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates the simplest form of a test in Jest using the test function. The test takes a descriptive name and a function with assertions. Jest is required; inputs are provided by any imported or defined functions under test, and output is pass/fail for the assertion. Optionally, a timeout parameter can be specified.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\ntest('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await in Jest with JavaScript\nDESCRIPTION: These snippets show how to write asynchronous tests using async/await with Jest in JavaScript. The first test ensures fetchData returns 'peanut butter'; the second expects fetchData to throw an error matching 'error'. Dependencies include Jest and a fetchData function capable of throwing errors or returning expected values. The tests assert the expected outcomes for both resolved and rejected promises.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (error) {\n    expect(error).toMatch('error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing CheckboxWithLabel Using React Testing Library - TypeScript/JSX\nDESCRIPTION: Implements a comprehensive test for CheckboxWithLabel using @testing-library/react. Renders the component, performs user interaction (fireEvent.click), and asserts the correct label displays before and after state change. Relies on getByLabelText/queryByLabelText queries and expects DOM to accurately update based on component state.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';\\nimport CheckboxWithLabel from '../CheckboxWithLabel';\\n\\n// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher\\n// unmount and cleanup DOM after the test is finished.\\nafterEach(cleanup);\\n\\nit('CheckboxWithLabel changes the text after click', () => {\\n  const {queryByLabelText, getByLabelText} = render(\\n    <CheckboxWithLabel labelOn=\\\"On\\\" labelOff=\\\"Off\\\" />,\\n  );\\n\\n  expect(queryByLabelText(/off/i)).toBeTruthy();\\n\\n  fireEvent.click(getByLabelText(/off/i));\\n\\n  expect(queryByLabelText(/on/i)).toBeTruthy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Calls with `expect().toHaveBeenCalled()` in Jest (JavaScript)\nDESCRIPTION: Illustrates how to use `jest.fn()` to create a mock function (`drink`) and then use the `.toHaveBeenCalled()` matcher (alias `.toBeCalled()`) to assert that the mock was invoked by the `drinkAll` function. It also demonstrates using `.not.toHaveBeenCalled()` to assert that the mock was *not* called under a different condition. Requires Jest environment and `jest.fn()`. Assumes `drinkAll` function exists.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('drinks something lemon-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('does not drink something octopus-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Truthiness and Falsiness with Jest in JavaScript\nDESCRIPTION: This pair of tests exemplifies how to use Jest's matchers like `toBeNull`, `toBeDefined`, `toBeUndefined`, `toBeTruthy`, and `toBeFalsy` for checking different types of primitive values. The first test checks various assertions on `null`, and the second checks similar matchers on `0`. Jest must be set up for these assertions. Inputs are hardcoded, and outputs are the test assertion results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Jest Test Example for Class Mocking\nDESCRIPTION: A complete test file example showing how to mock a class, track constructor calls, and verify method calls with correct parameters. Includes setup, teardown, and multiple test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Test for React Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a snapshot test for a Link component using react-test-renderer. It renders the component, creates a JSON representation, and compares it to a stored snapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Async/Await and .resolves Matcher in Jest (JavaScript)\nDESCRIPTION: Presents a concise way to test promise resolution using `async`/`await` combined with the `.resolves` matcher. The `await` keyword is used directly on the `expect` statement, which waits for the promise returned by `fetchData` to resolve and then asserts the resolved value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Functions with Jest\nDESCRIPTION: Shows various ways to implement mock functions using jest.fn(), mockImplementation, and mockImplementationOnce.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest.fn(cb => cb(null, true));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../foo'); // this happens automatically with automocking\nconst foo = require('../foo');\n\n// foo is a mock function\nfoo.mockImplementation(() => 42);\nfoo();\n// > 42\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());\n// > 'first call', 'second call', 'default', 'default'\n```\n\n----------------------------------------\n\nTITLE: Using jest.mocked for Type-Safe Mocking in TypeScript Tests\nDESCRIPTION: This TypeScript test file demonstrates the usage of `jest.mocked` to wrap an imported module (`song`) and a global function (`console.log`) with Jest mock types. It shows how to mock modules (`jest.mock`), spy on functions (`jest.spyOn`), apply `jest.mocked` for enhanced type safety, set mock return values (`mockReturnValue`), and assert expectations on mock calls using `expect`. Dependencies include `@jest/globals` and the local `./song` module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Conditional Returns for Array Filtering in Jest (JavaScript)\nDESCRIPTION: This example configures a Jest mock function to return true then false, allowing it to simulate predicates used in array methods like filter. Two calls are made, so that only the first array element passes the filter predicate. Afterwards, mock call arguments are examined. This is useful for testing continuation-passing and functional patterns or injecting test values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\n----------------------------------------\n\nTITLE: Setting and Overriding Mock Implementations with mockImplementation in Jest JavaScript\nDESCRIPTION: Demonstrates the use of mockImplementation to assign or override the function body of a mock in Jest. Shows default and replaced implementations, and how outputs change based on current configuration. Requires Jest, and the ability to pass a function as a new implementation. Inputs and outputs are scalars with arithmetic operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Values with mockReturnValue in Jest JavaScript\nDESCRIPTION: Shows practical usage of mockReturnValue for predefined return values in sequential calls using Jest. Output changes are demonstrated by updating the return value; helps verify flexible testing with simple stubbing. Suitable for situations where static return values are acceptable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example of Multiple transformIgnorePatterns in Jest (JSON)\nDESCRIPTION: Highlights a common mistake when defining `transformIgnorePatterns`. Providing multiple patterns where each excludes different modules using negative lookaheads (like `(?!foo/)` and `(?!bar/)`) can lead to unintended behavior because a file path matching *any* pattern will be excluded from transformation, potentially canceling out the intended inclusions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\"node_modules/(?!foo/)\", \"node_modules/(?!bar/)\"] // not what you want\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Cleanup Implementation\nDESCRIPTION: Shows how to implement cleanup between tests using beforeEach and mockClear to reset mock state.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing mockReturnValueOnce with Jest mock functions in TypeScript\nDESCRIPTION: TypeScript implementation of mockReturnValueOnce showing how to properly type a mock function while configuring it to return specific values for different calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents and Testing with MongoDB in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet exemplifies a Jest test suite that connects to a test MongoDB instance using the global variables provided by jest-mongodb. It performs asynchronous setup and teardown for database connections and includes a test that inserts a document into a collection and verifies the insertion. Dependencies include Jest, @shelf/jest-mongodb preset, and the mongodb Node.js driver. The test expects to use the global __MONGO_URI__ and __MONGO_DB_NAME__ variables for connection parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MongoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {MongoClient} = require('mongodb');\n\ndescribe('insert', () => {\n  let connection;\n  let db;\n\n  beforeAll(async () => {\n    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    db = await connection.db(globalThis.__MONGO_DB_NAME__);\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  it('should insert a doc into collection', async () => {\n    const users = db.collection('users');\n\n    const mockUser = {_id: 'some-user-id', name: 'John'};\n    await users.insertOne(mockUser);\n\n    const insertedUser = await users.findOne({_id: 'some-user-id'});\n    expect(insertedUser).toEqual(mockUser);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Mocking the fs Module for Tests - JavaScript\nDESCRIPTION: This Jest manual mock for the fs module provides a custom implementation by extending from Jest's automatic mock. It allows tests to set up a virtual file system using __setMockFiles and overrides readdirSync to read from the mock data. Dependencies include Node's path module, Jest's jest.createMockFromModule, and the internal structure for simulating file listings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ManualMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst path = require('path');\\n\\nconst fs = jest.createMockFromModule('fs');\\n\\n// This is a custom function that our tests can use during setup to specify\\n// what the files on the \\\"mock\\\" filesystem should look like when any of the\\n// `fs` APIs are used.\\nlet mockFiles = Object.create(null);\\nfunction __setMockFiles(newMockFiles) {\\n  mockFiles = Object.create(null);\\n  for (const file in newMockFiles) {\\n    const dir = path.dirname(file);\\n\\n    if (!mockFiles[dir]) {\\n      mockFiles[dir] = [];\\n    }\\n    mockFiles[dir].push(path.basename(file));\\n  }\\n}\\n\\n// A custom version of `readdirSync` that reads from the special mocked out\\n// file list set via __setMockFiles\\nfunction readdirSync(directoryPath) {\\n  return mockFiles[directoryPath] || [];\\n}\\n\\nfs.__setMockFiles = __setMockFiles;\\nfs.readdirSync = readdirSync;\\n\\nmodule.exports = fs;\\n\n```\n\n----------------------------------------\n\nTITLE: Structural and Type-Safe Comparison with Jest .toStrictEqual - JavaScript\nDESCRIPTION: Demonstrates how to use .toStrictEqual in Jest to verify that objects not only have the same properties but also the exact same types, including strict checking for undefined properties and sparse arrays. Requires Jest and a class definition. The test shows that class instances and plain objects may compare equal with .toEqual but not with .toStrictEqual.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('the La Croix cans on my desk', () => {\n  test('are not semantically the same', () => {\n    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});\n    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing `forEach` with Jest Mock Callbacks in JavaScript\nDESCRIPTION: This Jest test suite verifies the behavior of the `forEach` function using a mock callback created with `jest.fn()`. It asserts that the mock callback is called the correct number of times, receives the expected arguments for each call by inspecting `mockCallback.mock.calls`, and checks the return value using `mockCallback.mock.results`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst forEach = require('./forEach');\n\nconst mockCallback = jest.fn(x => 42 + x);\n\ntest('forEach mock function', () => {\n  forEach([0, 1], mockCallback);\n\n  // The mock function was called twice\n  expect(mockCallback.mock.calls).toHaveLength(2);\n\n  // The first argument of the first call to the function was 0\n  expect(mockCallback.mock.calls[0][0]).toBe(0);\n\n  // The first argument of the second call to the function was 1\n  expect(mockCallback.mock.calls[1][0]).toBe(1);\n\n  // The return value of the first call to the function was 42\n  expect(mockCallback.mock.results[0].value).toBe(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for React Jest Testing\nDESCRIPTION: Example `package.json` structure for a React project configured for Jest testing. It shows typical React dependencies and essential development dependencies like Babel presets, `babel-jest`, `jest`, and `react-test-renderer`. It also includes a script entry (`\"test\": \"jest\"`) to run Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"<current-version>\",\n    \"react-dom\": \"<current-version>\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"<current-version>\",\n    \"@babel/preset-react\": \"<current-version>\",\n    \"babel-jest\": \"<current-version>\",\n    \"jest\": \"<current-version>\",\n    \"react-test-renderer\": \"<current-version>\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Inspecting Jest Mock Function Properties - JavaScript\nDESCRIPTION: Shows how to manually check mock function call data by inspecting the .mock property of Jest mock functions. Enables custom checks such as call count, call arguments, call order, and mock naming. Requires Jest and utilizes mockFunc.mock.calls and mockFunc.getMockName(). Receives Jest mock functions and argument values as inputs, asserting on structure and data of the calls; results are assertion successes or failures.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n// The first arg of the last call to the mock function was `42`\n// (note that there is no sugar helper for this specific of an assertion)\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// A snapshot will check that a mock was invoked the same number of times,\n// in the same order, with the same arguments. It will also assert on the name.\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach and afterEach for Database Setup in Jest\nDESCRIPTION: Demonstrates how to use beforeEach and afterEach hooks to initialize and clear a city database before and after each test respectively.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Functions with .resolves and .rejects in Jest - JavaScript\nDESCRIPTION: This snippet uses the .resolves and .rejects matchers in Jest together with async/await for concise promise-based assertions. It awaits the result of expect(fetchData()) and uses the appropriate matcher to validate resolved or rejected cases. Requires Jest version supporting .resolves/.rejects and fetchData returning a promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jest Property Matchers for Dynamic Data in JavaScript Snapshots\nDESCRIPTION: This snippet demonstrates the solution to snapshotting dynamic data using Jest's property matchers. By providing an object to `toMatchSnapshot` where dynamic fields (`createdAt`, `id`) use matchers like `expect.any(Date)` and `expect.any(Number)`, Jest verifies the type instead of the exact value. The resulting snapshot stores these matchers, allowing the test to pass consistently even when the actual values change.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the matchers and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    id: expect.any(Number),\n  });\n});\n\n// Snapshot\nexports[`will check the matchers and pass 1`] = `\n{\n  \"createdAt\": Any<Date>,\n  \"id\": Any<Number>,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing with Async/Await in Jest\nDESCRIPTION: Shows how to use async/await syntax for testing asynchronous code, including error handling with try/catch blocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (error) {\n    expect(error).toMatch('error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Jest Mock Calls and Results in JavaScript\nDESCRIPTION: This snippet provides examples for asserting various mock properties after calls in Jest: call counts, argument matching, instance analysis, and verifying return values and contexts. It showcases granular matchers for mock calls, the use of .mock.instances, .mock.results, and .mock.lastCall. Meant for use inside a Jest test suite, it assumes a mock function under test (someMockFunction) and other relevant test objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The function was called exactly once\nexpect(someMockFunction.mock.calls).toHaveLength(1);\n\n// The first arg of the first call to the function was 'first arg'\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toBe('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n----------------------------------------\n\nTITLE: Creating Mocks with Sequential Implementations Using Jest in JavaScript\nDESCRIPTION: Utilizes mockImplementationOnce in combination with jest.fn to return different results on consecutive calls. Simulates multiple conditions within a single mock, providing flexibility in crafting test scenarios. No dependencies beyond Jest are needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Promises with `async/await` and `expect().rejects` in Jest (JavaScript)\nDESCRIPTION: Demonstrates testing rejected promises using `async/await` syntax in Jest. It uses `expect().rejects.toThrow()` to assert that the promise returned by `Promise.reject(new Error('octopus'))` rejects with an error whose message is 'octopus'. Requires a Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Partial Array Matching with expect.arrayContaining in JavaScript\nDESCRIPTION: Presents examples for using expect.arrayContaining to assert that an array contains at least the specified elements. Utilizes Jest's describe/it structure to test multiple scenarios where the expected array elements are subset (or not) of the received array. Requires Jest test runner; expected/actual arrays are main parameters. The matcher allows additional, unexpected elements in the tested array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('Beware of a misunderstanding! A sequence of dice rolls', () => {\n  const expected = [1, 2, 3, 4, 5, 6];\n  it('matches even with an unexpected number 7', () => {\n    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match without an expected number 2', () => {\n    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regex using .toMatch in Jest (JavaScript)\nDESCRIPTION: Demonstrates using the `.toMatch` matcher to check if the string returned by `essayOnTheBestFlavor()` contains the substring 'grapefruit'. It shows that `.toMatch` accepts both a regular expression literal (`/grapefruit/`) and a `RegExp` object (`new RegExp('grapefruit')`) for pattern matching.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\ndescribe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration in TypeScript\nDESCRIPTION: Shows how to import Jest's default configuration settings from `jest-config` using ES module `import` and extend them within a `jest.config.ts` file. This example adds 'mts' to the default list of `moduleFileExtensions`. Requires `ts-node`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\nimport {defaults} from 'jest-config';\n\nconst config: Config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Execution with jest.runAllTimers()\nDESCRIPTION: This Jest test uses `jest.useFakeTimers()` to control time. It checks that a callback passed to `timerGame` is not called immediately. Then, `jest.runAllTimers()` executes all pending timers instantly. Finally, it asserts that the callback has been called exactly once.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\ntest('calls the callback after 1 second', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers();\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Volume Equality with Custom Tester in Jest - TypeScript\nDESCRIPTION: This TypeScript Jest test imports expect, Volume, and the areVolumesEqual tester to validate that two differently unit-ed Volume objects are considered equal with the custom equality logic. Assumes Jest is configured for TypeScript and the relevant modules are present. Useful for verifying full integration of custom domain equality in a TypeScript project.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {expect, test} from '@jest/globals';\\nimport {Volume} from '../Volume.js';\\nimport '../areVolumesEqual.js';\\n\\ntest('are equal with different units', () => {\\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Object Methods with Jest in JavaScript\nDESCRIPTION: Demonstrates using `jest.spyOn` to create a mock function that tracks calls to the `video.play` method while still executing the original implementation. The test verifies that the spy was called and checks the return value. It also uses `jest.restoreAllMocks` in `afterEach` to restore the original method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n  const isPlaying = video.play();\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with Jest .rejects Matcher - JavaScript\nDESCRIPTION: Illustrates two Jest test patterns for checking that promises are rejected as expected. The '.rejects' matcher asserts that user.getUserName with an unknown ID fails with the prescribed error object. The same pattern is shown with await for async/await compatibility. Jest is required, and the user module should be set up as shown above. These tests help confirm robust error propagation in async code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Testing for async errors using `.rejects`.\\nit('tests error with rejects', () => {\\n  expect.assertions(1);\\n  return expect(user.getUserName(3)).rejects.toEqual({\\n    error: 'User with 3 not found.',\\n  });\\n});\\n\\n// Or using async/await with `.rejects`.\\nit('tests error with async/await and rejects', async () => {\\n  expect.assertions(1);\\n  await expect(user.getUserName(3)).rejects.toEqual({\\n    error: 'User with 3 not found.',\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Mixed Promise Resolutions with mockResolvedValueOnce and mockRejectedValueOnce in JavaScript\nDESCRIPTION: Demonstrates using a combination of mockResolvedValueOnce and mockRejectedValueOnce to create a mock function with varying async behavior across multiple calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Mocks with Custom Name, Implementation, and Return Value (JavaScript)\nDESCRIPTION: This code configures a Jest mock with a custom implementation, a default return value, and a human-readable mock name for improved debugging. It demonstrates chaining .mockReturnValue, .mockImplementation, and .mockName for enhanced test clarity. Designed for situations where descriptive test output is needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Test Suites with `describe.each` (Object) in Jest (JavaScript)\nDESCRIPTION: Shows how to use `describe.each(table)(name, fn, timeout)` with an array of objects (`table`) for data-driven testing in Jest. It demonstrates using template literal-like syntax (`$variable` or `$variable.path.to.value`) in the suite title to reference object properties and using object destructuring for arguments within the test function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ndescribe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies for Jest Integration\nDESCRIPTION: This command installs necessary Babel packages (`babel-jest`, `@babel/core`, `@babel/preset-env`) as development dependencies using npm. These packages allow Jest to transpile JavaScript code using Babel before running tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple Resolved Promises with `mockResolvedValueOnce` (TypeScript)\nDESCRIPTION: Demonstrates using `mockResolvedValueOnce` in TypeScript with generics (`fn<() => Promise<string>>`) to make a typed async mock function resolve to different string values on successive calls. It falls back to the `mockResolvedValue` after 'once' calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Truthy Values with toBeTruthy in Jest\nDESCRIPTION: This example demonstrates using .toBeTruthy() to check if a value is truthy in a boolean context. The test shows how to verify that thirstInfo() returns any truthy value (anything that's not false, 0, '', null, undefined, or NaN) after running application code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ndrinkSomeLaCroix();\nif (thirstInfo()) {\n  drinkMoreLaCroix();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinking La Croix leads to having thirst info', () => {\n  drinkSomeLaCroix();\n  expect(thirstInfo()).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Using mockImplementation to control function output - Jest - JavaScript\nDESCRIPTION: Demonstrates usage of mockFn.mockImplementation to dynamically change the implementation of a mock function at runtime. Shows an initial mock, changing its logic at runtime, and validating output. Jest must be present. Inputs are scalars; outputs are computation results. This can be used to simulate different behaviors in sequential test steps or for setup/teardown patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach for Test Setup in Jest (JavaScript)\nDESCRIPTION: Demonstrates how beforeEach can reset global state prior to each test, ensuring clean data and test repeatability. It uses asynchronous operations to clear and repopulate a shared database before every test execution. Dependencies include the mock database functions and Jest's beforeEach, test, and expect globals. Inputs include the pre-test setup logic with promise returns; outputs are fresh state for each test run. Designed for placement at file or describe block level.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving the last call arguments for a mock - Jest - JavaScript\nDESCRIPTION: Displays the structure for mockFn.mock.lastCall, which holds the arguments of the last invocation for a Jest mock function. This is useful for validating the final usage of a mock in a test scenario, ensuring that subsequent assertions refer to the most recent call.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n['arg3', 'arg4'];\n```\n\n----------------------------------------\n\nTITLE: Async Custom Matcher Implementation\nDESCRIPTION: Example of implementing an async custom matcher that checks if a number is divisible by an externally fetched value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue === 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects with .toEqual and .toBe in Jest (JavaScript)\nDESCRIPTION: Illustrates the use of `.toEqual` for deep equality checks between object instances (`can1` and `can2`), comparing all properties recursively. It contrasts this with `.toBe`, which checks for strict object identity (reference equality). The test expects `can1` to be deeply equal to `can2` but not the exact same object instance.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Equality with toBe in Jest\nDESCRIPTION: Demonstrates how to use the toBe matcher for testing exact equality in Jest. It compares the result of 2 + 2 with the expected value of 4.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in Async Jest Tests - JavaScript\nDESCRIPTION: Provides two test examples to validate error propagation from an async function using both promise.catch and async/await patterns. Both tests assert that the error object matches the expected value when the requested user is missing. Ensures only correct error scenarios are handled by calling expect.assertions(1). This code requires Jest and the user module, and demonstrates best practices for error assertion in async tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Testing for async errors using Promise.catch.\\nit('tests error with promises', () => {\\n  expect.assertions(1);\\n  return user.getUserName(2).catch(error =>\\n    expect(error).toEqual({\\n      error: 'User with 2 not found.',\\n    }),\\n  );\\n});\\n\\n// Or using async/await.\\nit('tests error with async/await', async () => {\\n  expect.assertions(1);\\n  try {\\n    await user.getUserName(1);\\n  } catch (error) {\\n    expect(error).toEqual({\\n      error: 'User with 1 not found.',\\n    });\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Equality with Jest Matchers in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Jest's `expect` and `toBe` matcher to assert strict equality between an operation result and an expected value. It is a basic unit test that checks if `2 + 2` equals `4`. Prerequisites include having Jest installed and configured for the project. The test takes no parameters and expects the assertion to pass with no return value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Resolved Promises in Async Tests with `mockResolvedValue` (TypeScript)\nDESCRIPTION: Illustrates how to use `mockResolvedValue` with TypeScript generics (`fn<() => Promise<number>>`) to mock a typed asynchronous function within an async test. The mock function `asyncMock` is configured to return a Promise resolving to the number `43`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Object Properties with toBe() in Jest\nDESCRIPTION: Demonstrates how to test object properties using expect().toBe(). The example validates specific properties of a 'can' object with primitive values.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('the can', () => {\n  test('has 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('has a sophisticated name', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using not with Matchers in Jest\nDESCRIPTION: Illustrates how to use the not modifier with matchers in Jest. It tests that the sum of two positive numbers is not zero for various combinations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using .not Modifier with Jest Matchers\nDESCRIPTION: Shows how to use the .not modifier to test the opposite condition. The example tests that bestLaCroixFlavor() does not return 'coconut'.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Number of Mock Function Calls with toHaveBeenCalledTimes()\nDESCRIPTION: Demonstrates how to test that a mock function was called an exact number of times using toHaveBeenCalledTimes(). The example verifies that the drink function is called twice.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Call Arguments with .toHaveBeenCalledWith in Jest JavaScript Tests\nDESCRIPTION: This snippet illustrates using `.toHaveBeenCalledWith` (or its alias `.toBeCalledWith`) to check if a Jest mock function (`jest.fn()`) was called with specific arguments. It verifies that the mock function `f` was called with the `beverage` object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ntest('registration applies correctly to orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing jQuery DOM Manipulation with Jest - JavaScript\nDESCRIPTION: This snippet sets up a Jest unit test for the jQuery DOM manipulation behavior defined in the application code. It mocks the asynchronous fetchCurrentUser function to return mock data, configures a simulated DOM environment, imports the target module, triggers a click event, and verifies both that the data-fetch function was called and that the DOM was updated with the expected text. Dependencies include Jest (with jsdom environment), jQuery, and the displayUser logic. The test expects a specific DOM structure and assumes the use of Jest's mocking APIs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialjQuery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\njest.mock('../fetchCurrentUser');\\n\\ntest('displays a user after a click', () => {\\n  // Set up our document body\\n  document.body.innerHTML =\\n    '<div>' +\\n    '  <span id=\"username\" />' +\\n    '  <button id=\"button\" />' +\\n    '</div>';\\n\\n  // This module has a side-effect\\n  require('../displayUser');\\n\\n  const $ = require('jquery');\\n  const fetchCurrentUser = require('../fetchCurrentUser');\\n\\n  // Tell the fetchCurrentUser mock function to automatically invoke\\n  // its callback with some data\\n  fetchCurrentUser.mockImplementation(cb => {\\n    cb({\\n      fullName: 'Johnny Cash',\\n      loggedIn: true,\\n    });\\n  });\\n\\n  // Use jquery to emulate a click on our button\\n  $('#button').click();\\n\\n  // Assert that the fetchCurrentUser function was called, and that the\\n  // #username span's inner text was updated as we'd expect it to.\\n  expect(fetchCurrentUser).toHaveBeenCalled();\\n  expect($('#username').text()).toBe('Johnny Cash - Logged In');\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for CSS Modules Mocking in JavaScript\nDESCRIPTION: Sets up Jest to use identity-obj-proxy for mocking CSS/LESS imports via moduleNameMapper. Prevents the need for styleMock and supports mapping many asset extensions to a file mock. Requires the identity-obj-proxy package installed in devDependencies. Suitable for projects using CSS Modules and Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Using npm - Bash\nDESCRIPTION: Demonstrates how to install Jest as a development dependency using npm. Requires Node.js and npm to be installed in the project environment. This command will update the project's package.json to include Jest under devDependencies. No parameters are required other than having a valid package.json file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest\n```\n\n----------------------------------------\n\nTITLE: Minimal Custom Matcher API Example - JavaScript\nDESCRIPTION: Shows a minimal implementation pattern for defining a custom Jest matcher, yourMatcher. Matcher returns an object with pass and message keys. The message function produces output for both positive and negative assertions. Input: any argument list. Output: matcher outcome.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_59\n\nLANGUAGE: js\nCODE:\n```\nexpect.extend({\n  yourMatcher(x, y, z) {\n    return {\n      pass: true,\n      message: () => '',\n    };\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using Mock Return Values for Functional Testing (e.g., `filter`) in JavaScript\nDESCRIPTION: This example shows how mock return values can be used effectively in functional programming styles, such as testing array filtering. A mock function `filterTestFn` is configured with `mockReturnValueOnce` to return `true` then `false`. This mock is used within an array's `filter` method to control which elements are included in the result, demonstrating value injection without complex stubs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Return Value with `expect().toHaveReturnedWith()` in Jest (JavaScript)\nDESCRIPTION: Illustrates using `jest.fn()` to create a mock function (`drink`) and the `.toHaveReturnedWith()` matcher (alias `.toReturnWith()`) to assert that the mock function returned a specific value ('La Croix') at least once. The return value is checked using deep equality. Requires Jest environment and `jest.fn()`. \nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns La Croix', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Mock Implementation Using jest.fn in JavaScript\nDESCRIPTION: Creates a mock function with jest.fn that immediately calls its argument (a callback) with (null, true), illustrating how to inject custom logic or side effects into a mock. Demonstrates control over execution flow within tests and has no dependencies beyond Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest.fn(cb => cb(null, true));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n```\n\n----------------------------------------\n\nTITLE: Testing with Async/Await\nDESCRIPTION: Demonstrates testing async code using modern async/await syntax with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// async/await can be used.\nit('works with async/await', async () => {\n  expect.assertions(1);\n  const data = await user.getUserName(4);\n  expect(data).toBe('Mark');\n});\n\n// async/await can also be used with `.resolves`.\nit('works with async/await and resolves', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Array and String Length with Jest Matcher - JavaScript\nDESCRIPTION: This snippet demonstrates how to use Jest's `.toHaveLength` matcher to check the `.length` property of arrays and strings. It's applicable to any object with a `.length` property. The assertions include positive and negative checks. Dependencies: Jest. Inputs are arrays or strings; expected output is assertion pass/fail based on matching length.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpect([1, 2, 3]).toHaveLength(3);\\nexpect('abc').toHaveLength(3);\\nexpect('').not.toHaveLength(5);\n```\n\n----------------------------------------\n\nTITLE: Mocking class constructor and replacing methods - Jest - JavaScript\nDESCRIPTION: Illustrates a minimal SomeClass exported as a CommonJS module, which is later mocked in a test using Jest. Demonstrates how to override a class method with a mocked implementation for controlled testing, tracking calls and usage. Dependencies: CommonJS module system and Jest. Inputs are method calls, while the output is the mock's call tracking. This enables class isolation and dependency injection in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Call Details Using `.mock` Properties in JavaScript\nDESCRIPTION: Lists common Jest `expect` assertions used to validate mock function behavior by checking properties of the `.mock` object. It shows how to verify call count, arguments, return values, `this` context, instantiation count, properties of instantiated objects, and last call arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// The function was called exactly once\nexpect(someMockFunction.mock.calls).toHaveLength(1);\n\n// The first arg of the first call to the function was 'first arg'\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toBe('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n----------------------------------------\n\nTITLE: Generated Inline Snapshot within a Test File in TypeScript\nDESCRIPTION: This snippet shows the result after Jest runs the test from the previous example. Jest has evaluated the `tree`, generated the snapshot, and automatically inserted it as a template literal argument into the `.toMatchInlineSnapshot()` call within the source code. If Prettier is configured, Jest uses it for formatting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot(`\n    <a\n      className=\"normal\"\n      href=\"https://example.com\"\n      onMouseEnter={[Function]}\n      onMouseLeave={[Function]}\n    >\n      Example Site\n    </a>\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Approximate Equality of Floating Point Numbers with Jest in JavaScript\nDESCRIPTION: Explains and demonstrates the `.toBeCloseTo()` matcher in Jest for comparing floating-point numbers where exact equality might fail due to precision issues. It shows a failing example using `.toBe()` and a passing example using `.toBeCloseTo()` with an optional precision argument (`numDigits`). The `numDigits` parameter controls the number of decimal places to consider for the comparison (default is 2).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBe(0.3); // Fails!\n});\n```\n\nLANGUAGE: js\nCODE:\n```\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with .resolves Matcher - Jest JavaScript\nDESCRIPTION: This snippet demonstrates asserting resolved promise values in Jest tests using the .resolves matcher. The test returns the expectation so Jest waits for fetchData() to resolve before reporting test result. Requires Jest and fetchData returning a promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Equality with toEqual in JavaScript\nDESCRIPTION: Shows a Jest test case (`Volume.test.js`) that utilizes the previously registered custom equality tester (`areVolumesEqual.js`). It uses the standard `toEqual` matcher to assert that two `Volume` instances with different units but equivalent amounts are considered equal. Requires the `Volume` class, the registered tester, and `@jest/globals`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_53\n\nLANGUAGE: js\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js';\nimport '../areVolumesEqual.js';\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Tests with describe in Jest (JavaScript)\nDESCRIPTION: Depicts organization of related tests using the describe block, allowing logical grouping and hierarchical structuring of test suites. Dependencies include test and expect (provided by Jest). Key parameters are the suite name and a function containing the grouped tests. Inputs and outputs follow Jest standards, with describe blocks and nested describe/test structures enhancing test clarity and maintainability.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Mock Function Return Value with expect.toHaveReturnedWith\nDESCRIPTION: Illustrates using the `toHaveReturnedWith` matcher (alias `toReturnWith`) in Jest to assert that a mock function (`jest.fn()`) returned a specific value on at least one occasion. The return values are compared using deep equality (`toEqual`). The example checks if the `drink` mock returned the string 'La Croix'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns La Croix', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Nth Mock Call Arguments with .toHaveBeenNthCalledWith in Jest JavaScript Tests\nDESCRIPTION: This snippet shows how to use `.toHaveBeenNthCalledWith` (or its alias `.nthCalledWith`) to check the arguments passed to a specific call (by index, starting from 1) of a Jest mock function (`jest.fn()`). It verifies the arguments for the first and second calls to the `drink` mock.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenNthCalledWith(1, 'lemon');\n  expect(drink).toHaveBeenNthCalledWith(2, 'octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jest Custom Matchers for Mock Functions in JavaScript\nDESCRIPTION: Demonstrates the usage of Jest's custom matchers for asserting mock function calls. These matchers provide a convenient way to check if a mock function was called, with what arguments, and in what order.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc).toHaveBeenCalled();\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);\n\n// All calls and the name of the mock is written as a snapshot\nexpect(mockFunc).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Values with mockReturnValue in Jest TypeScript\nDESCRIPTION: TypeScript version of mockReturnValue, with strong typing for the mock to ensure only numbers are returned. Ensures compatibility with type-aware build systems; recommended for TypeScript codebases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resolver in TypeScript\nDESCRIPTION: TypeScript configuration for setting up a custom resolver in Jest with type safety through the Config type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Tests with test.concurrent in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to run tests in parallel using test.concurrent in Jest. Each test runs as an asynchronous function, with independent assertion logic. Requires Jest; the input parameters are the test names and test functions, and the output is pass/fail for each concurrent operation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting and Validating MongoDB Documents in Jest Test - JavaScript\nDESCRIPTION: Demonstrates a complete sample Jest test suite that connects to a MongoDB instance using global preset variables, performs setup and teardown, inserts a document into a 'users' collection, and verifies successful insertion. Depends on the jest-mongodb preset and requires 'mongodb' library. Uses asynchronous operations, dynamic MongoDB connection URI and database name (from globalThis.__MONGO_URI__ and globalThis.__MONGO_DB_NAME__), and Jest lifecycle hooks (beforeAll, afterAll, it). Key parameters are database URI, database name, and the user document.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MongoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {MongoClient} = require('mongodb');\n\ndescribe('insert', () => {\n  let connection;\n  let db;\n\n  beforeAll(async () => {\n    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    db = await connection.db(globalThis.__MONGO_DB_NAME__);\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  it('should insert a doc into collection', async () => {\n    const users = db.collection('users');\n\n    const mockUser = {_id: 'some-user-id', name: 'John'};\n    await users.insertOne(mockUser);\n\n    const insertedUser = await users.findOne({_id: 'some-user-id'});\n    expect(insertedUser).toEqual(mockUser);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Representing mock function result tracking - Jest - JavaScript\nDESCRIPTION: Shows the format of the mockFn.mock.results array, detailing how Jest tracks returned values, thrown errors, and incomplete calls for each invocation of the mock. Each entry contains a type and a value, letting testers assert against expected outcomes. This structure helps verify side-effects and error handling of mocks in test scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Resolution with .resolves Matcher in Jest (JavaScript)\nDESCRIPTION: Shows using the `.resolves` matcher with `expect` for testing promise resolution. It's crucial to return the `expect` statement so Jest waits for the promise returned by `fetchData` to resolve before checking the assertion.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Data-Driven Test Suites with describe.each and Tagged Template Literals in Jest (JavaScript)\nDESCRIPTION: This snippet illustrates the use of describe.each with tagged template literals in Jest to define parameterized test suites. It allows for automatic generation of multiple tests by providing a table of input values and expected results. Dependencies include Jest; the key parameters are the column names and test data provided in the template, which are automatically injected into the test suite and test titles. Inputs are defined in the table; outputs are the result of each test assertion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ndescribe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Return Count with `expect().toHaveReturnedTimes()` in Jest (JavaScript)\nDESCRIPTION: Shows how to use `jest.fn()` for mocking and the `.toHaveReturnedTimes()` matcher (alias `.toReturnTimes()`) to assert that a mock function (`drink`) returned successfully (did not throw an error) an exact number of times (2 in this example). Requires Jest environment and `jest.fn()`. \nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns twice', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting describe Blocks and Error Assertions in Jest (JavaScript)\nDESCRIPTION: Showcases how to nest describe blocks for layered test organization and test error handling with custom exceptions. The binaryStringToNumber function is tested for both valid and invalid binary string inputs. Test cases utilize expect(...).toThrow and expect(...).toBe for different branches. Dependencies are Jest's describe, test, and expect. Parameters include diverse input strings; outputs are result assertions or error handling verification. This pattern aids in structuring test case hierarchies and edge cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Specific Class Method\nDESCRIPTION: Shows how to mock or spy on a specific method within a class using Jest's spyOn functionality and mockImplementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('mocked function');\n  }); // comment this line if just want to \"spy\"\n\nit('player consumer plays music', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting a Jest Configuration Object in TypeScript\nDESCRIPTION: This snippet shows how to define and export a Jest configuration object in a TypeScript file, importing the Config type from Jest for type safety. The config sets 'verbose' mode for detailed test output. Requires Jest, a TypeScript environment, and optionally ts-node if using TypeScript configs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  verbose: true,\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Functions with Jest fn\nDESCRIPTION: Shows how to create and use mock functions using jest.fn(), including implementation of mock behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled();\n\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Order of Multiple BeforeEach/AfterEach Hooks in Jest (JavaScript)\nDESCRIPTION: This code demonstrates the execution order when multiple `beforeEach` and `afterEach` hooks are defined within the same scope and in nested scopes. `beforeEach` hooks run in the order they are declared. `afterEach` hooks also run in the order they are declared (note: this differs from Jasmine2 runner behavior mentioned in the text). Nested hooks run after the outer scope's hooks. The comments show the precise sequence for setup, test execution, and teardown.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => console.log('connection setup'));\nbeforeEach(() => console.log('database setup'));\n\nafterEach(() => console.log('database teardown'));\nafterEach(() => console.log('connection teardown'));\n\ntest('test 1', () => console.log('test 1'));\n\ndescribe('extra', () => {\n  beforeEach(() => console.log('extra database setup'));\n  afterEach(() => console.log('extra database teardown'));\n\n  test('test 2', () => console.log('test 2'));\n});\n\n// connection setup\n// database setup\n// test 1\n// database teardown\n// connection teardown\n\n// connection setup\n// database setup\n// extra database setup\n// test 2\n// extra database teardown\n// database teardown\n// connection teardown\n```\n\n----------------------------------------\n\nTITLE: Asserting Thrown Errors Using Jest .toThrow and .toThrowError - JavaScript\nDESCRIPTION: Provides examples of using Jest's .toThrow matcher (including the .toThrowError alias) to check that a function throws an error under certain conditions. Requires Jest and a function that may throw. Demonstrates various ways to match the thrown error by message, object, or type. Inputs are functions, outputs are assertions about errors thrown during execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('throws on octopus', () => {\n  expect(() => {\n    drinkFlavor('octopus');\n  }).toThrow();\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrow(/yuck/);\n  expect(drinkOctopus).toThrow('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrow(DisgustingFlavorError);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Per-Call Implementations with mockImplementationOnce in Jest JavaScript\nDESCRIPTION: Shows how to use mockImplementationOnce to provide different behaviors for sequential calls to a mock function. Demonstrates chaining mocks to control outputs for the first two calls and fallback to default later. Useful for simulating varying responses in multi-call scenarios. Requires Jest and understanding of mock function chaining.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Setup with Promises in Jest beforeEach (JavaScript)\nDESCRIPTION: Illustrates how to handle asynchronous setup operations within a `beforeEach` hook by returning a Promise. Jest will wait for the promise returned by `initializeCityDatabase()` to resolve before executing the test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Resolved Promises with .resolves Modifier in Jest JavaScript Tests\nDESCRIPTION: This snippet illustrates testing resolved promises using the `.resolves` modifier. It expects a promise (`Promise.resolve('lemon')`) to resolve successfully and then chains the `.toBe` matcher to assert that the resolved value is 'lemon'. The test returns the assertion to handle the asynchronous nature.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntest('resolves to lemon', () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Undefined Values with toBeUndefined in Jest - JavaScript\nDESCRIPTION: This demonstrates using `.toBeUndefined` matcher to assert a function or variable is `undefined`. Particularly useful when a function should not return a value for specific inputs. Dependency: Jest. Inputs are expected to be either `undefined` or not; assertion passes only if the user value is `undefined`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the best drink for octopus flavor is undefined', () => {\\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Jest in ESM Mode - JavaScript\nDESCRIPTION: This example demonstrates how to access the Jest object in ECMAScript Module (ESM) context by importing jest from '@jest/globals' or using import.meta. It showcases using Jest's fake timers and confirms equivalence of jest and import.meta.jest. This pattern requires Jest v27+ and ESM setup, and some functionality may not be available prior to enabling experimental-vm-modules in Node.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ECMAScriptModules.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {jest} from '@jest/globals';\\n\\njest.useFakeTimers();\\n\\n// etc.\\n\\n// alternatively\\nimport.meta.jest.useFakeTimers();\\n\\n// jest === import.meta.jest => true\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Class Mocking with Jest\nDESCRIPTION: A complete test file demonstrating how to mock a class, track constructor calls, and verify method calls with arguments. The example includes setup, teardown, and multiple test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Custom Puppeteer Integration (JavaScript)\nDESCRIPTION: Exports and configures Jest to use user-defined globalSetup, globalTeardown, and testEnvironment files for Puppeteer support. This approach fully customizes how Jest manages browser instances and environments, making it suitable for complex end-to-end workflows without the jest-puppeteer preset. Parameters are file paths for each setup script; ensure all referenced files exist.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  globalSetup: './setup.js',\n  globalTeardown: './teardown.js',\n  testEnvironment: './puppeteer_environment.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing function call contexts (this) for mocks - Jest - JavaScript\nDESCRIPTION: Shows how Jest's mock.contexts array captures and allows assertion about the this context for each mock function invocation, using .bind, .call, and .apply. This is vital for testing scenarios requiring context-sensitive functions. The example requires Jest, and demonstrates using .bind, .call, and .apply, then verifying the captured contexts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n----------------------------------------\n\nTITLE: Using afterEach for Cleanup After Individual Tests in Jest\nDESCRIPTION: Example showing how to use afterEach() to clean up a database after each test runs. This ensures each test starts with a clean environment, providing test isolation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for TypeScript Support - JavaScript\nDESCRIPTION: Adds '@babel/preset-typescript' to the Babel configuration file. Allows both modern JavaScript and TypeScript code to be transpiled for use in Jest tests. This configuration must be saved in 'babel.config.js'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {targets: {node: 'current'}}],\n    // highlight-next-line\n    '@babel/preset-typescript',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with .catch in Jest (JavaScript)\nDESCRIPTION: Shows testing promise rejection by returning the promise and chaining a `.catch` method. `expect.assertions(1)` ensures that the assertion within the `.catch` block runs. This verifies that `fetchData` rejects with an error matching 'error'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(error => expect(error).toMatch('error'));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with toThrow in Jest\nDESCRIPTION: Demonstrates how to use toThrow to test whether a function throws an error when called. It shows various ways to match the error message.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Rejected Promises with .rejects Modifier in Jest JavaScript Tests\nDESCRIPTION: This snippet shows how to test rejected promises using the `.rejects` modifier. It expects a promise (`Promise.reject(new Error('octopus'))`) to be rejected and then chains the `.toThrow` matcher to assert that the rejection reason (error message) is 'octopus'. The test returns the assertion for asynchronous handling.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('rejects to octopus', () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom toBe Matcher in Jest\nDESCRIPTION: This snippet demonstrates how to create a custom 'toBe' matcher using Jest's extend API. It utilizes utility functions for formatting error messages and implements deep equality checking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Resolution with expect.resolves (async/await)\nDESCRIPTION: Demonstrates an alternative way to test promise resolution in Jest using `async/await` in combination with the `.resolves` modifier. This allows writing asynchronous tests in a more synchronous style. It checks if a promise resolves to 'lemon' and does not resolve to 'octopus'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Constructor Spying Implementation\nDESCRIPTION: Shows how to implement constructor spying using Jest's fn() and mockImplementation to track constructor calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Testing with Jest\nDESCRIPTION: Babel configuration file that sets up the necessary presets for testing React applications with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    '@babel/preset-env',\n    ['@babel/preset-react', {runtime: 'automatic'}],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Callbacks with Jest - JavaScript\nDESCRIPTION: This snippet shows the correct way to test asynchronous code that uses callbacks instead of promises. It demonstrates using the 'done' parameter in Jest, which the test must call to signal completion. Errors within the callback are caught and passed to done to ensure proper error logging in Jest. Dependencies are Jest and a callback-based fetchData.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', done => {\n  function callback(error, data) {\n    if (error) {\n      done(error);\n      return;\n    }\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Test Suites with `describe.each` (Array) in Jest (JavaScript)\nDESCRIPTION: Illustrates using `describe.each(table)(name, fn, timeout)` with an array of arrays (`table`) to run the same test suite logic with different sets of input data. It demonstrates printf-style formatting (`%i`) in the suite title to generate unique names and passing arguments positionally to the test function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ndescribe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Date.now for Deterministic Jest Snapshot Tests (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to mock the global Date.now method using jest.fn to ensure deterministic snapshot outputs in Jest tests. By returning a constant timestamp, snapshot tests that depend on Date.now will always produce stable, predictable values across test runs regardless of when they are executed. The approach requires Jest as a dependency and is particularly useful when your component or function includes non-deterministic data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\n----------------------------------------\n\nTITLE: Mocking a Class Constructor with mockImplementation in Jest JavaScript\nDESCRIPTION: Illustrates how to mock and override the implementation of a class constructor using mockImplementation with Jest. It relies on CommonJS exporting, and utilizes jest.mock to replace the class constructor, then assigns a new implementation that supplies customized method behavior. Requires Jest, proper class mocking setup, and use of module.exports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in Jest (TypeScript)\nDESCRIPTION: TypeScript version of setting up moduleNameMapper in Jest configuration. It shows how to define module mapping patterns for stubbing resources and handling different file types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Resolves/Rejects Matchers\nDESCRIPTION: Shows how to use .resolves and .rejects matchers directly with expect statements for testing promises.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Automatic Mocking of an ES6 Class with Jest - JavaScript\nDESCRIPTION: Demonstrates the use of jest.mock to automatically mock an imported ES6 class so all constructor and method calls can be spied upon. Shows tests for verifying constructor calls and method invocations using Jest's auto-mocking. Depends on Jest's mocking system and requires the tested modules to be present.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: One-Time Asynchronous Setup/Teardown with beforeAll/afterAll in Jest (JavaScript)\nDESCRIPTION: Shows how to perform setup once before any tests in the file run using `beforeAll` and teardown once after all tests have completed using `afterAll`. This is useful for expensive or reusable setup, especially when asynchronous operations (returning Promises) are involved.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Test Function Usage in JavaScript with Jest\nDESCRIPTION: Example of using the basic test function to create a simple test assertion. Shows a minimal test that verifies the inchesOfRain function returns zero.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntest('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Floating Point Approximation with toBeCloseTo in Jest - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `.toBeCloseTo` Jest matcher for testing approximate equality of floating point numbers, which is required due to binary floating point precision limitations. It shows a test failing with direct equality, and then succeeding when using `.toBeCloseTo` with an argument for significant digits. Parameters: received, expected, and optional numDigits (defaults to 2). Dependency: Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('adding works sanely with decimals', () => {\\n  expect(0.2 + 0.1).toBe(0.3); // Fails!\\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('adding works sanely with decimals', () => {\\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\\n});\n```\n\n----------------------------------------\n\nTITLE: Using Spy Functions in Jest\nDESCRIPTION: Demonstrates how to use jest.spyOn() to create spy functions that track method calls while maintaining original functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = {\n  play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n  const isPlaying = video.play();\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Driven Test Suites with describe.each in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to use describe.each with a tagged template literal to generate a test suite for multiple data sets. The table defines input variables and expected outputs, and the suite title uses parameter substitution. Three test cases per row verify addition, returning the expected sum and value boundaries. No external dependencies are needed beyond Jest, and expected parameters and outputs are described in column headers. Limitations include only supporting object own properties for nested value injection in suite titles.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Jest Using async/await\nDESCRIPTION: Jest tests written using async/await syntax instead of promise chains. This makes asynchronous tests more readable by allowing them to be written in a synchronous style.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// async/await can be used.\nit('works with async/await', async () => {\n  expect.assertions(1);\n  const data = await user.getUserName(4);\n  expect(data).toBe('Mark');\n});\n\n// async/await can also be used with `.resolves`.\nit('works with async/await and resolves', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Jest Script to package.json - JSON\nDESCRIPTION: Modifies the 'scripts' section in package.json to add a 'test' script that invokes Jest. This is essential for running tests using 'npm test' or 'yarn test'. Requires that Jest is installed; inputs are the command string, output is an updated package.json file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Jest Testing\nDESCRIPTION: Adds a test script to package.json that runs Jest when executing npm test or yarn test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Greater Than or Equal Comparison with toBeGreaterThanOrEqual in Jest\nDESCRIPTION: This example shows how to use .toBeGreaterThanOrEqual() to test that a number is greater than or equal to an expected value. The test verifies that ouncesPerCan() returns at least 12.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is at least 12', () => {\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Tests with describe() in Jest\nDESCRIPTION: This snippet shows how to use describe() to group related tests together. It demonstrates creating a test suite for a beverage object, with individual tests for different properties of the beverage.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing setTimeout with Jest Fake Timers in JavaScript\nDESCRIPTION: Uses Jest's fake timers functionality to test that timerGame calls setTimeout exactly once with a delay of 1000 milliseconds. The test spies on the global setTimeout function, executes the timerGame function, and verifies invocation count and parameters. Requires Jest and the timerGame module as dependencies. Inputs: none required; output: assertion results for correct timer behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ntest('waits 1 second before ending the game', () => {\n  const timerGame = require('../timerGame');\n  timerGame();\n\n  expect(setTimeout).toHaveBeenCalledTimes(1);\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Floating Point Precision Matching with expect.closeTo in JavaScript\nDESCRIPTION: Shows how to use the expect.closeTo matcher to compare nested floating point values in objects with precision control. In the test, an object sum is compared against an expected value within a specified number of decimal digits (5 in this case). Jest is required. Inputs are objects with number values; outputs assert pass/fail based on numeric closeness.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('compare float in object properties', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using rootDir in transformIgnorePatterns with TypeScript\nDESCRIPTION: TypeScript example of using the <rootDir> token in transformIgnorePatterns to create paths relative to the project root directory, helping to prevent accidental ignoring of files in different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Specific Concurrent Tests with test.concurrent.only.each in Jest\nDESCRIPTION: Shows how to use test.concurrent.only.each to run specific tests concurrently while skipping others. It includes examples for both array and template literal syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await with .resolves Matcher in Jest (JavaScript)\nDESCRIPTION: Provides a concise way to test promise resolution using `async`/`await` and the `.resolves` matcher. The `await expect(...)` syntax waits for the promise returned by `fetchData` to resolve and checks if the resolved value matches.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component Snapshot Test in Jest (TSX)\nDESCRIPTION: This snippet demonstrates a basic snapshot test for a React `Link` component using `react-test-renderer`. It renders the component, converts it to a serializable JSON object, and uses `expect(tree).toMatchSnapshot()` to compare it against a stored snapshot file. Jest creates the snapshot file on the first run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Thresholds in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set minimum code coverage enforcement in Jest's configuration object using JavaScript. It specifies global thresholds as well as individual file and directory thresholds using globs and path strings. The configuration is exported via CommonJS, and requires Jest as a dev dependency. Coverage settings accept both percentage and absolute uncovered counts; if thresholds are not met, tests will fail.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using .toHaveProperty Matcher in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 18.0.0, the `.toHaveProperty(keyPath, [value])` matcher asserts that an object has a property at the specified key path. Optionally, it can also assert that the property has a specific value.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n.toHaveProperty\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Instances with toBeInstanceOf in Jest - JavaScript\nDESCRIPTION: This snippet showcases the usage of `.toBeInstanceOf` matcher to assert that objects are instances of a particular class in Jest. Includes examples for both user-defined and built-in classes, as well as a test that throws when expectations are unmet. Dependency: Jest. Key input is the instance and a constructor/class reference.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {}\\n\\nexpect(new A()).toBeInstanceOf(A);\\nexpect(() => {}).toBeInstanceOf(Function);\\nexpect(new A()).toBeInstanceOf(Function); // throws\n```\n\n----------------------------------------\n\nTITLE: Using async/await with .resolves Modifier in Jest JavaScript Tests\nDESCRIPTION: This snippet demonstrates using `async/await` syntax with the `.resolves` modifier for testing promises. It awaits the result of `expect(...).resolves` before applying the `.toBe` or `.not.toBe` matchers, providing an alternative way to handle asynchronous tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Component as Text in Jest\nDESCRIPTION: An alternative mocking strategy using `jest.mock` where the component is replaced by a function that returns a string ('SomeComponent'). This avoids rendering potentially invalid elements directly and prevents certain React warnings, although snapshot output will not show component props.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\njest.mock('./SomeComponent', () => () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Verifying Mock Function Successful Return Count with expect.toHaveReturnedTimes\nDESCRIPTION: Demonstrates using the `toHaveReturnedTimes` matcher (alias `toReturnTimes`) in Jest to assert the exact number of times a mock function (`jest.fn()`) completed successfully (i.e., did not throw). Calls that throw are not counted. The example checks if the `drink` mock returned successfully twice.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns twice', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll and afterAll for One-Time Setup in Jest - JavaScript\nDESCRIPTION: Illustrates how to initialize and clean up resources only once per test file using beforeAll and afterAll. Both hooks return promises, making them suitable for asynchronous setup tasks. Requires Jest, initializeCityDatabase, and clearCityDatabase functions that return promises; ensures efficient resource usage across multiple tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Custom Equality Testers in JavaScript\nDESCRIPTION: Demonstrates how to write custom equality testers that handle nested objects recursively. It defines testers for `Author` and `Book` classes. The `areBooksEqual` tester uses `this.equals(a.authors, b.authors, customTesters)` to perform a deep equality check on the `authors` array, ensuring that the `areAuthorEqual` tester is applied during the nested comparison. Regular functions are required to access `this.equals`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_57\n\nLANGUAGE: js\nCODE:\n```\nfunction areAuthorEqual(a, b) {\n  const isAAuthor = a instanceof Author;\n  const isBAuthor = b instanceof Author;\n\n  if (isAAuthor && isBAuthor) {\n    // Authors are equal if they have the same name\n    return a.name === b.name;\n  } else if (isAAuthor === isBAuthor) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nfunction areBooksEqual(a, b, customTesters) {\n  const isABook = a instanceof Book;\n  const isBBook = b instanceof Book;\n\n  if (isABook && isBBook) {\n    // Books are the same if they have the same name and author array. We need\n    // to pass customTesters to equals here so the Author custom tester will be\n    // used when comparing Authors\n    return (\n      a.name === b.name && this.equals(a.authors, b.authors, customTesters)\n    );\n  } else if (isABook === isBBook) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areAuthorsEqual, areBooksEqual]);\n```\n\n----------------------------------------\n\nTITLE: Negating Jest Matchers with not in JavaScript Tests\nDESCRIPTION: This snippet illustrates using the `not` modifier in Jest, allowing tests to assert that a specific matcher should not pass. It demonstrates nested loops adding positive numbers and asserts using `.not.toBe(0)` that their sum is never zero. Jest is required as a dependency. The test validates various combinations and does not require parameters or return values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Async/Await and .rejects Matcher in Jest (JavaScript)\nDESCRIPTION: Demonstrates testing promise rejection concisely using `async`/`await` and the `.rejects` matcher. The `await` keyword is used on the `expect` statement, waiting for the `fetchData` promise to reject and then asserting the rejection reason.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with .catch in Jest with JavaScript\nDESCRIPTION: This code snippet tests that the fetchData promise is rejected and the error matches a specific value using .catch. Jest's expect.assertions is used to ensure that at least one assertion runs, preventing false positives in the event of promise fulfillment. Dependencies are Jest and a promise-returning fetchData function. The test returns the promise to signal completion after the asynchronous callback executes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(error => expect(error).toMatch('error'));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with .rejects Matcher in Jest (JavaScript)\nDESCRIPTION: Illustrates using the `.rejects` matcher to test if a promise is rejected. The test returns the `expect` statement. Jest waits for the `fetchData` promise to reject and then applies the `.toMatch` matcher to the rejection reason. If the promise resolves instead, the test fails.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Timeout using jest.setTimeout in JavaScript\nDESCRIPTION: Provides an example of using `jest.setTimeout(timeout)` to set the default timeout interval (in milliseconds) for all tests and before/after hooks within the current test file. In this case, the timeout is set to 1000 milliseconds (1 second). This overrides the global default (usually 5 seconds) or the configuration specified by `testTimeout` for the specific file it's called in.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: js\nCODE:\n```\njest.setTimeout(1000); // 1 second\n```\n\n----------------------------------------\n\nTITLE: Creating a File Mock Stub in JavaScript\nDESCRIPTION: This snippet shows the content of `__mocks__/fileMock.js`. It exports a simple string 'test-file-stub'. This file is used by Jest's `moduleNameMapper` to replace imports of static assets like images or fonts, providing a consistent placeholder during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = 'test-file-stub';\n```\n\n----------------------------------------\n\nTITLE: Example of Descriptive Snapshot Names in Jest Snapshots\nDESCRIPTION: Shows an example of well-named Jest snapshots in a `.snap` file. Descriptive names like `should render null` and `should render Alan Turing` clearly state the expected output, making the snapshots easier to review and maintain.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexports[`<UserName /> should render null`] = `null`;\n\nexports[`<UserName /> should render Alan Turing`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Treat Extensions as ESM (TypeScript)\nDESCRIPTION: Shows how to set the extensionsToTreatAsEsm option in a TypeScript Jest config, enabling the framework to handle specified extensions as native ES Modules. This snippet requires TypeScript and proper ESM support in Node and Jest. Config is exported as an ES module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Return Value with toHaveReturnedWith()\nDESCRIPTION: Demonstrates how to test that a mock function returned a specific value using toHaveReturnedWith(). The example checks that the function returns 'La Croix'.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drink returns La Croix', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Object Methods - Jest - JavaScript\nDESCRIPTION: Demonstrates the use of jest.spyOn to monitor and assert activity on an object's method, with cleanup using jest.restoreAllMocks. Inputs: call to object method inside a test; Outputs: assertions about spy call and method results. Requires Jest, afterEach hook, and test framework setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n  const isPlaying = video.play();\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating Modules Asynchronously with Jest - JavaScript\nDESCRIPTION: Demonstrates usage of jest.isolateModulesAsync to load modules in isolated async environments for testing. Requires Jest as a dependency. The async callback allows for use of await within the isolated context. Intended for cases where modules must be loaded in a clean environment and the operation is asynchronous, preventing module state leakage across tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet myModule;\nawait jest.isolateModulesAsync(async () => {\n  myModule = await import('myModule');\n  // do async stuff here\n});\n\nconst otherCopyOfMyModule = await import('myModule');\n```\n\n----------------------------------------\n\nTITLE: Testing an API Class with Axios Mocking in Jest and JavaScript\nDESCRIPTION: Demonstrates how to mock the axios library in a Jest test using jest.mock and provide a predefined resolved value. Tests that the Users.all method, which normally returns API data, instead returns the mocked data. Requires axios, the Users class, and Jest to be installed, and assumes jest.mock intercepts the import of axios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport axios from 'axios';\nimport Users from './users';\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  // or you could use the following depending on your use case:\n  // axios.get.mockImplementation(() => Promise.resolve(resp))\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test with test.only in Jest - JavaScript\nDESCRIPTION: Shows how to restrict Jest to run only one specific test by using test.only, which aids in debugging failing or flaky tests. Highlights comparing output when running a single test versus the full suite for diagnosing shared state issues. Requires Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n----------------------------------------\n\nTITLE: Explicit Factory Mocking Using jest.mock in JavaScript\nDESCRIPTION: Demonstrates how to provide a custom factory function to jest.mock, replacing the default automocking behavior. Uses jest.fn to create a mock function that always returns 42 when called. Dependencies: jest. Inputs: module path, factory function. Outputs: Module export replaced by the specified mock. Use when precise mock behavior is required.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Conditionally Mocking Modules in Tests Using jest.doMock in TypeScript\nDESCRIPTION: Similar to the JavaScript variant, this demonstrates dynamic mocking in TypeScript tests with jest.doMock and optional factory typing. Each test applies a different mock implementation by returning differently configured jest.fn instances. Jest module reset ensures isolation between tests. Suitable for typed environments requiring type preservation in mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  // The optional type argument provides typings for the module factory\n  jest.doMock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering and Snapshot Testing an Updated React Component - TypeScript/TSX\nDESCRIPTION: This snippet shows how to update a snapshot test when a React component's props have changed, specifically updating the link URL and visible text. It follows the same snapshot testing logic using react-test-renderer and Jest. Inputs, outputs, and dependencies are as above; purpose is to illustrate intentional snapshot changes and how Jest detects them.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Updated test case with a Link to a different address\\nit('renders correctly', () => {\\n  const tree = renderer\\n    .create(<Link page=\\\"http://www.instagram.com\\\">Instagram</Link>)\\n    .toJSON();\\n  expect(tree).toMatchSnapshot();\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Functions with Jest in JavaScript\nDESCRIPTION: Illustrates the creation of Jest mock functions using `jest.fn()`. The first example creates a basic mock, calls it, and asserts it was called. The second example creates a mock with a specific implementation that returns `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled();\n\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\n```\n\n----------------------------------------\n\nTITLE: Performing DOM Testing on a React Component using React Testing Library (TypeScript)\nDESCRIPTION: A Jest test suite (`CheckboxWithLabel-test.js` written in `tsx`) demonstrating DOM testing for the `CheckboxWithLabel` component using `@testing-library/react`. It renders the component, verifies the initial label text, simulates a click event on the label, and then asserts that the label text has updated correctly. `cleanup` is used to unmount the component after the test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\n// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher\n// unmount and cleanup DOM after the test is finished.\nafterEach(cleanup);\n\nit('CheckboxWithLabel changes the text after click', () => {\n  const {queryByLabelText, getByLabelText} = render(\n    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,\n  );\n\n  expect(queryByLabelText(/off/i)).toBeTruthy();\n\n  fireEvent.click(getByLabelText(/off/i));\n\n  expect(queryByLabelText(/on/i)).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with a Mocked Date.now using jest.Spied and Cleanup in TypeScript\nDESCRIPTION: This TypeScript test snippet demonstrates how to utilize the `setDateNow` utility function to control the value returned by `Date.now` within a test case. It shows storing the returned `jest.Spied` object, using an `afterEach` hook to reset the spy (`mockReset`), and asserting expectations on the spy's call count (`toHaveBeenCalledTimes`). Dependencies include `@jest/globals` and the local `./__utils__/setDateNow` utility.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: ts\nCODE:\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1_482_363_367_071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Mock Implementations with mockImplementationOnce in JavaScript\nDESCRIPTION: Illustrates using `mockFn.mockImplementationOnce()` to set specific implementations for the next individual calls to a Jest mock function (`jest.fn()`). This allows mocking different behaviors for consecutive calls, with each implementation being used only once.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Asserting Error Throwing with Jest - JavaScript\nDESCRIPTION: These snippets illustrate how to use .toThrow (or .toThrowError) matcher in Jest to verify a function throws an error under specific input. It covers anonymous/wrapped invocation, matching error messages via regex or string, and testing error object or class. Requires the function under test (drinkFlavor) and potentially an error class (DisgustingFlavorError). Inputs are functions expected to throw; outputs are test assertions on thrown errors and message matching.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: js\nCODE:\n```\ntest('throws on octopus', () => {\n  expect(() => {\n    drinkFlavor('octopus');\n  }).toThrow();\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrow(/yuck/);\n  expect(drinkOctopus).toThrow('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrow(DisgustingFlavorError);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing TypeScript Tests with Typed Jest APIs\nDESCRIPTION: Example of a TypeScript test file that imports typed Jest APIs from @jest/globals and tests a sum function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, expect, test} from '@jest/globals';\nimport {sum} from './sum';\n\ndescribe('sum module', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Getters and Setters with Jest in JavaScript\nDESCRIPTION: Illustrates using the optional `accessType` argument ('get' or 'set') with `jest.spyOn` to specifically spy on getter and setter properties of objects. The first test spies on the `video.play` getter, and the second test spies on the `audio.volume` setter. `jest.restoreAllMocks` is used for cleanup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst audio = require('./audio');\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play', 'get'); // we pass 'get'\n  const isPlaying = video.play;\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n\ntest('plays audio', () => {\n  const spy = jest.spyOn(audio, 'volume', 'set'); // we pass 'set'\n  audio.volume = 100;\n\n  expect(spy).toHaveBeenCalled();\n  expect(audio.volume).toBe(100);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Asynchronous Matchers in Jest (JavaScript)\nDESCRIPTION: Illustrates how to define and use custom asynchronous matchers using `expect.extend`. Async matchers must return a Promise, allowing tests to `await` the matcher's resolution. This example shows a matcher checking divisibility based on an external async value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of defining and using a custom async matcher\n\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValue(); // Assume this returns a Promise\n    const pass = received % externalValue === 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// Usage in a test\nit('should be divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Falsy Values with toBeFalsy in Jest\nDESCRIPTION: This example shows how to use .toBeFalsy() matcher to test that a value is false in a boolean context. The test demonstrates checking the return value of getErrors() after running application code, verifying it returns any falsy value (false, 0, '', null, undefined, or NaN).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndrinkSomeLaCroix();\nif (!getErrors()) {\n  drinkMoreLaCroix();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinking La Croix does not lead to errors', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Execution after Timers using Jest.runAllTimers in JavaScript\nDESCRIPTION: Demonstrates how to use Jest's runAllTimers API to verify that a callback is called after all timers complete. The test wraps timerGame with a mock callback, runs the game, asserts the callback has not been called prematurely, executes all pending timers instantly, and confirms the callback is called once. Dependencies: Jest, timerGame. Inputs: timerGame function and mock callback; outputs: assertion results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers();\ntest('calls the callback after 1 second', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers();\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Properties Deeply with toHaveProperty in Jest - JavaScript\nDESCRIPTION: This snippet demonstrates asserting the existence of object properties, including deep and nested keys, with Jest's `.toHaveProperty` matcher. It uses both dot notation and key path arrays to access deep properties, covers positive and negative cases, and covers checking for values as well as existence. Dependencies: Jest. Key parameters include the object to check, property path (string/array), and optional expected value. Inputs are objects with possibly nested properties; assertions pass if the property exists and, if provided, equals the expected value.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Object containing house features to be tested\\nconst houseForSale = {\\n  bath: true,\\n  bedrooms: 4,\\n  kitchen: {\\n    amenities: ['oven', 'stove', 'washer'],\\n    area: 20,\\n    wallColor: 'white',\\n    'nice.oven': true,\\n  },\\n  livingroom: {\\n    amenities: [\\n      {\\n        couch: [\\n          ['large', {dimensions: [20, 20]}],\\n          ['small', {dimensions: [10, 10]}],\\n        ],\\n      },\\n    ],\\n  },\\n  'ceiling.height': 2,\\n};\\n\\ntest('this house has my desired features', () => {\\n  // Example Referencing\\n  expect(houseForSale).toHaveProperty('bath');\\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\\n\\n  expect(houseForSale).not.toHaveProperty('pool');\\n\\n  // Deep referencing using dot notation\\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\\n    'oven',\\n    'stove',\\n    'washer',\\n  ]);\\n\\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\\n\\n  // Deep referencing using an array containing the keyPath\\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\\n  expect(houseForSale).toHaveProperty(\\n    ['kitchen', 'amenities'],\\n    ['oven', 'stove', 'washer'],\\n  );\\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\\n  expect(houseForSale).toHaveProperty(\\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\\n    20,\\n  );\\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\\n\\n  // Referencing keys with dot in the key itself\\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing CheckboxWithLabel with Enzyme (TSX)\nDESCRIPTION: A Jest test suite for the `CheckboxWithLabel` component using Enzyme's `shallow` rendering. It configures Enzyme with an adapter for React 16. The test shallow-renders the component, checks the initial text content, simulates a 'change' event on the input element, and asserts that the text content updates as expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport Enzyme, {shallow} from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\nEnzyme.configure({adapter: new Adapter()});\n\nit('CheckboxWithLabel changes the text after click', () => {\n  // Render a checkbox with label in the document\n  const checkbox = shallow(<CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />);\n\n  expect(checkbox.text()).toBe('Off');\n\n  checkbox.find('input').simulate('change');\n\n  expect(checkbox.text()).toBe('On');\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Class Mocking and Method Spying in Jest using JavaScript\nDESCRIPTION: Presents a complete Jest test file (`sound-player-consumer.test.js`) demonstrating the integration of various mocking techniques. It includes mocking the `SoundPlayer` class, setting up a mock for an instance method (`playSoundFile`), using `beforeEach` to clear mocks, and writing tests to verify constructor calls and method calls with specific arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Resolved Promises in Async Tests with `mockResolvedValue` (JavaScript)\nDESCRIPTION: Illustrates how to use `mockResolvedValue` to mock an asynchronous function within an async test. The mock function `asyncMock` is configured to return a Promise that resolves to the value `43`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Class Constructor with Jest Mock Functions\nDESCRIPTION: Example of using jest.fn() with mockImplementation to create a mock constructor that allows tracking of constructor calls. This approach makes the SoundPlayer constructor itself a mock function that can be inspected.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Animation Frames with Jest Timer Mocks\nDESCRIPTION: A test demonstrating how to use jest.advanceTimersToNextFrame() to execute callbacks scheduled with requestAnimationFrame. This is useful for testing animation-related code.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\nit('calls the animation frame callback after advanceTimersToNextFrame()', () => {\n  const callback = jest.fn();\n\n  requestAnimationFrame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  jest.advanceTimersToNextFrame();\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing moduleNameMapper in Jest Configuration - JSON\nDESCRIPTION: This snippet shows how to override the module locator for Jest using the 'moduleNameMapper' option in package.json. It remaps 'my-module.js' to a specific file path for accurate test module resolution. The key parameter is an object with module name keys and replacement paths as values. Used when modules cannot be found by default.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"moduleNameMapper\": {\n    \"my-module.js\": \"<rootDir>/path/to/my-module.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mockRejectedValue for failed async mocks (JavaScript)\nDESCRIPTION: Shows how to create a mock function that returns a rejected Promise with mockRejectedValue. This is a shorthand for mockImplementation with Promise.reject and is useful for testing error handling in async functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Mock Function Call Arguments with expect.toHaveBeenCalledWith\nDESCRIPTION: Shows how to use the `toHaveBeenCalledWith` matcher (alias `toBeCalledWith`) in Jest to check if a mock function (`jest.fn()`) was called with specific arguments. The arguments are compared using deep equality (`toEqual`). The example tests if a registration function correctly applies a callback with the registered object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ntest('registration applies correctly to orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Object Equality with Jest in JavaScript\nDESCRIPTION: Shows how to use Jest's \".toEqual\" matcher to deeply compare objects. The test creates an object with a dynamic property and asserts deep equality with the expected structure. Jest and JavaScript object manipulation knowledge are prerequisites.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Assertions on Mock Function Calls in JavaScript\nDESCRIPTION: Shows how to manually assert mock function calls using the .mock property. This approach offers more flexibility for specific assertions that aren't covered by the custom matchers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n// The first arg of the last call to the mock function was `42`\n// (note that there is no sugar helper for this specific of an assertion)\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// A snapshot will check that a mock was invoked the same number of times,\n// in the same order, with the same arguments. It will also assert on the name.\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Matcher for Trimmed Strings in Jest\nDESCRIPTION: This code snippet shows how to create a custom snapshot matcher that trims a string to a specified length before comparison. It uses the jest-snapshot library to handle snapshot creation and comparison.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.slice(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nStored snapshot will look like:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n```\n\n----------------------------------------\n\nTITLE: Testing Rejected Promises with .rejects in Jest\nDESCRIPTION: Shows how to test that a Promise rejects with a specific error using the .rejects modifier. Demonstrates both the return approach and the async/await approach.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('rejects to octopus', () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Temporarily Overriding Mock Implementation with `withImplementation` (JavaScript)\nDESCRIPTION: Shows how `withImplementation` temporarily replaces a mock function's implementation (`() => 'inside callback'`) only during the execution of the provided synchronous callback function. The original implementation (`() => 'outside callback'`) is restored afterwards.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\ntest('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Using mockResolvedValue for async mocks (JavaScript)\nDESCRIPTION: Shows how to create a mock function that returns a resolved Promise with mockResolvedValue. This is a shorthand for mockImplementation with Promise.resolve and is useful for testing async functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Date.now() for Deterministic Jest Snapshots in JavaScript\nDESCRIPTION: Demonstrates how to use `jest.fn()` to mock the global `Date.now()` function to ensure deterministic tests. By returning a constant value (1482363367071), snapshots involving time-sensitive components will remain consistent across test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Call Arguments with mock.lastCall in JavaScript\nDESCRIPTION: Shows how the `mock.lastCall` property provides direct access to the arguments of the most recent call to a Jest mock function. It returns an array of arguments for the last call, or `undefined` if the mock hasn't been invoked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n['arg3', 'arg4'];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Database Before All Tests in Jest\nDESCRIPTION: This snippet illustrates the use of beforeAll() to set up a global database before any tests run. It demonstrates handling asynchronous setup operations and shows how Jest waits for promises to resolve before running tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TransformIgnorePatterns with rootDir Token in Jest (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to use the <rootDir> token in transformIgnorePatterns to reference the project's root directory, ensuring patterns work correctly across different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_101\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test Using Property Matchers for Dynamic Fields - JavaScript\nDESCRIPTION: This snippet demonstrates using Jest's property matchers (expect.any(...)) in toMatchSnapshot to stabilize snapshots involving fields with unstable values. Here, Date and Number are matched using expect.any to avoid test failure due to generated values. The dependency is Jest; the test input is a user object with generated and static fields, and the output is compared to a template snapshot with matchers instead of literal values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the matchers and pass', () => {\\n  const user = {\\n    createdAt: new Date(),\\n    id: Math.floor(Math.random() * 20),\\n    name: 'LeBron James',\\n  };\\n\\n  expect(user).toMatchSnapshot({\\n    createdAt: expect.any(Date),\\n    id: expect.any(Number),\\n  });\\n});\\n\\n// Snapshot\\nexports[`will check the matchers and pass 1`] = `\\n{\\n  \\\"createdAt\\\": Any<Date>,\\n  \\\"id\\\": Any<Number>,\\n  \\\"name\\\": \\\"LeBron James\\\",\\n}\\n`;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Execution Order of Jest Hooks (JavaScript)\nDESCRIPTION: This code uses `console.log` statements within Jest's setup/teardown hooks (`beforeAll`, `afterAll`, `beforeEach`, `afterEach`) and tests, both at the top level and within a nested `describe` block, to demonstrate their execution order. The output comments show that `beforeAll` runs once before all tests in its scope, `afterAll` runs once after, `beforeEach` runs before each test in its scope, and `afterEach` runs after each test. It also shows that nested hooks execute in addition to outer hooks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\n\ntest('', () => console.log('1 - test'));\n\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n----------------------------------------\n\nTITLE: Spying on Class Method Calls in Jest\nDESCRIPTION: Example demonstrating how to create a separate mock function for a class method to track calls to that method across all instances created during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Now we can track calls to playSoundFile\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Containment in Arrays and Iterables with Jest in JavaScript\nDESCRIPTION: Illustrates the use of the \".toContain\" matcher in Jest to assert the presence of an item within arrays or sets. The code includes both an array and a set structure, emphasizing Jest's flexibility in validating collections. Prerequisite: basic understanding of JavaScript arrays and the Set object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test with test() in Jest (JavaScript)\nDESCRIPTION: Illustrates the fundamental use of the `test` function (aliased as `it`) to define an individual test case. It takes a name (string) and a function containing expectations. An optional third argument specifies a timeout in milliseconds (default is 5 seconds).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\ntest('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Setup in Jest beforeEach Hook\nDESCRIPTION: Shows how to handle asynchronous code in a beforeEach hook by returning a promise from the initialization function.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.each with array of objects in TypeScript\nDESCRIPTION: Shows how to use test.each with an array of objects in TypeScript, demonstrating type inference for test case arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Tests with describe in Jest (JavaScript)\nDESCRIPTION: Illustrates the basic use of `describe` to group related tests logically. This example groups two tests that verify properties of a `myBeverage` object under the suite name 'my beverage'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Async/Await for Success Cases in Jest (JavaScript)\nDESCRIPTION: Illustrates using `async` and `await` syntax for testing promise resolution. The test function is marked `async`, allowing the use of `await` to pause execution until the `fetchData` promise resolves. It then asserts the resolved data. This is syntactic sugar for the promise-based approach.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Code with Promises in Jest\nDESCRIPTION: This Jest test (`__tests__/user-test.js`) demonstrates testing the asynchronous `getUserName` function using standard promises. It first mocks the `../request` module using `jest.mock` to ensure the manual mock is used. The test case (`it`) calls `user.getUserName(4)`, expects it to return a promise, and uses `.then` to assert that the resolved data equals 'Mark'. Returning the promise chain is essential for Jest to wait for the asynchronous operation to complete. `expect.assertions(1)` verifies that the assertion inside `.then` is executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../request');\n\nimport * as user from '../user';\n\n// The assertion for a promise must be returned.\nit('works with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(4).then(data => expect(data).toBe('Mark'));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Jest .resolves Helper\nDESCRIPTION: Using Jest's .resolves helper to unwrap the value of a fulfilled promise along with matchers. This provides a more concise way to test promise resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('works with resolves', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Equality with Jest Matchers in JavaScript\nDESCRIPTION: Demonstrates basic assertion in Jest using the \".toBe\" matcher for checking exact equality between values. No external dependencies beyond Jest are required. The test expects the sum of two and two to strictly equal four, with input values hardcoded and the output being the result of the Jest test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Equality with toBe in Jest\nDESCRIPTION: Demonstrates using the toBe matcher to test for exact equality. This matcher uses Object.is for comparison.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests using jest.retryTimes in JavaScript\nDESCRIPTION: Demonstrates how to use `jest.retryTimes(numRetries)` to automatically retry a failing test up to the specified number of times until it passes or the limit is reached. The example sets the retry count to 3. This function must be declared at the top level of a test file or within a `describe` block and is only available when using the default `jest-circus` test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3);\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Automock with Jest Configuration - JavaScript\nDESCRIPTION: Sets up Jest configuration by specifying the automock property as true in a JavaScript module. This config enables automatic mocking of imports when running tests. The configuration must be present for automock to be active; otherwise, calls to jest.disableAutomock or jest.enableAutomock have no effect. Should be placed in the root Jest config file (e.g., jest.config.js).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  automock: true,\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing an HTTP Request Function in Node.js\nDESCRIPTION: This snippet shows a basic implementation of the `request` function in `request.js` using the Node.js `http` module. It makes an HTTP GET request to the provided `url` and returns a Promise that resolves with the response data. This module is intended to be mocked in tests to avoid actual network requests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst http = require('http');\n\nexport default function request(url) {\n  return new Promise(resolve => {\n    // This is an example of an http request, for example to fetch\n    // user data from an API.\n    // This module is being mocked in __mocks__/request.js\n    http.get({path: url}, response => {\n      let data = '';\n      response.on('data', _data => (data += _data));\n      response.on('end', () => resolve(data));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ts-jest for TypeScript Support - Bash\nDESCRIPTION: Installs 'ts-jest' as a dev dependency to preprocess TypeScript files via Jest. Enables full type-aware TypeScript transformations in tests, as opposed to Babel's transpile-only approach. Requires npm and an existing Node.js/TypeScript project.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev ts-jest\n```\n\n----------------------------------------\n\nTITLE: Applying Mock Return Values with Array `filter` in JavaScript\nDESCRIPTION: Shows a practical use case for mock return values by using a Jest mock function (`jest.fn()`) as the callback for `Array.prototype.filter`. `mockReturnValueOnce` is used to control the filter's behavior for specific elements during the test, demonstrating functional testing style.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\n----------------------------------------\n\nTITLE: Verifying Assertions with expect.hasAssertions\nDESCRIPTION: Shows how to ensure at least one assertion is called during an asynchronous test using expect.hasAssertions().\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ntest('prepareState prepares a valid state', () => {\n  expect.hasAssertions();\n  prepareState(state => {\n    expect(validateState(state)).toBeTruthy();\n  });\n  return waitOnState();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Dynamic Imports in Jest\nDESCRIPTION: Babel configuration to enable dynamic imports in Jest tests using the dynamic-import-node plugin.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"plugins\": [\"syntax-dynamic-import\"],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"dynamic-import-node\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Module Object in TypeScript\nDESCRIPTION: Defines a 'utils' object with methods for authorization in TypeScript, with explicit typing for the function parameter. Useful for strong typing in tests and enables compatibility with jest.createMockFromModule. Dependency: TypeScript. Inputs: none for 'authorize', string for 'isAuthorized'; Outputs: static token or boolean.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const utils = {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: (secret: string) => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Mock Implementations with `mockImplementationOnce` in JavaScript\nDESCRIPTION: This snippet illustrates using `.mockImplementationOnce()` to provide different implementations for sequential calls to a mock function. The first call executes the first implementation (logging `true`), and the second call executes the second implementation (logging `false`). Subsequent calls would use a default implementation if provided, or return `undefined`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\n----------------------------------------\n\nTITLE: Testing Async Errors with async/await and try/catch in Jest\nDESCRIPTION: This snippet demonstrates testing for errors in async functions using `async`/`await` within a `try/catch` block. It attempts to `await user.getUserName(1)`, expecting an error, and asserts the error object in the `catch` block. `expect.assertions(1)` confirms the catch block executed. Requires Babel setup for `async/await`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// Or using async/await.\nit('tests error with async/await', async () => {\n  expect.assertions(1);\n  try {\n    await user.getUserName(1);\n  } catch (error) {\n    expect(error).toEqual({\n      error: 'User with 1 not found.',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Extending Module Mocks with jest.createMockFromModule in JavaScript\nDESCRIPTION: Shows how to use jest.createMockFromModule to generate an automatic mock of a module. The resulting mock is extended: 'isAuthorized' is replaced with a custom jest.fn implementation. The test checks that 'authorize' is a mock function and tests the custom behavior. Dependency: Jest, targeted utility module. Input: mock module; Output: assertion results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst utils = jest.createMockFromModule('../utils');\\n\\nutils.isAuthorized = jest.fn(secret => secret === 'not wizard');\\n\\ntest('implementation created by jest.createMockFromModule', () => {\\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\\n  expect(utils.isAuthorized('not wizard')).toBe(true);\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Tests with Promises in Jest (JavaScript)\nDESCRIPTION: Shows how Jest handles asynchronous tests when the test function returns a Promise. Jest waits for the returned promise to resolve before considering the test complete. This example tests an asynchronous `fetchBeverageList` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ntest('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Arguments with mock.calls in JavaScript\nDESCRIPTION: Demonstrates the structure of the `mock.calls` array property on a Jest mock function. This array stores the arguments passed to each call of the mock function. Each element in the `mock.calls` array is another array containing the arguments for a single invocation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n----------------------------------------\n\nTITLE: Extracting Last Call Arguments with mock.lastCall in Jest JavaScript\nDESCRIPTION: Shows how to obtain the arguments passed on the last invocation of a mock function using mock.lastCall. If no calls have been made, returns undefined. Useful for validating the latest interaction with a mocked dependency. Requires Jest and prior function calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n['arg3', 'arg4'];\n```\n\n----------------------------------------\n\nTITLE: Running Data-Driven Tests Concurrently with test.concurrent.each (Array) in Jest (JavaScript)\nDESCRIPTION: Illustrates using `test.concurrent.each` with an array of arrays (`table`) to run parameterized tests concurrently. The test function (`fn`) must be asynchronous. The name string uses printf formatting (`%i`). Each row runs as a separate, potentially parallel, test case.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Manual Mocks Before Test Subject - ES6 JavaScript\nDESCRIPTION: Illustrates the correct usage of ES module import ordering for Jest manual mocks, ensuring the mock (e.g., for `matchMedia`) is imported prior to the file under test. This guarantees that the mocked implementation is in place before the module is loaded, preventing test failures due to premature evaluation. Requires ES module syntax and correct file structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport './matchMedia.mock'; // Must be imported before the tested file\\nimport {myMethod} from './file-to-test';\\n\\ndescribe('myMethod()', () => {\\n  // Test the method here...\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Spying on Static and Getter Methods - Jest - JavaScript\nDESCRIPTION: Shows how to use jest.spyOn to monitor or mock static and getter methods on a JavaScript class. Requires the target class and Jest. Input includes class and method references; outputs are mocked values or call verifications via assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Descriptive vs Non-Descriptive Snapshot Names in Jest\nDESCRIPTION: This example compares non-descriptive snapshot names with more descriptive ones, illustrating how descriptive names can make it easier to understand and verify snapshot content.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`<UserName /> should handle some test case`] = `null`;\n\nexports[`<UserName /> should handle some other test case`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`<UserName /> should render null`] = `null`;\n\nexports[`<UserName /> should render Alan Turing`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Chaining mockImplementationOnce for sequential mock behaviors - Jest - TypeScript\nDESCRIPTION: This example shows chaining .mockImplementationOnce in TypeScript using strong typing to control callback-based mocks for repeated calls with different behaviors. It requires @jest/globals. Each .mockImplementationOnce provides a different result, and callbacks log the outcomes. Essential for thorough testing of function call order and state changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns for pnpm in TypeScript\nDESCRIPTION: TypeScript version of special configuration for transformIgnorePatterns when using pnpm package manager, accounting for its unique symlinked structure in node_modules to properly include packages that need transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_84\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative path to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Overriding Mock Implementation with `mockImplementation` in JavaScript\nDESCRIPTION: This test file demonstrates replacing the implementation of a mocked function. First, `jest.mock('../foo')` mocks the `foo` module. Then, the imported `foo` (which is now a mock function) has its behavior redefined using `.mockImplementation(() => 42)`. Calling `foo()` afterwards executes this new implementation, returning 42.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../foo'); // this happens automatically with automocking\nconst foo = require('../foo');\n\n// foo is a mock function\nfoo.mockImplementation(() => 42);\nfoo();\n// > 42\n```\n\n----------------------------------------\n\nTITLE: Utilizing New Built-in Matchers in Jest 23 (JavaScript)\nDESCRIPTION: Showcases some of the new matchers introduced in Jest 23, providing enhanced assertion capabilities. Examples include checking specific call arguments (`nthCalledWith`), verifying return values (`toReturn`, `toReturnWith`, `lastReturnedWith`, `nthReturnedWith`), checking the number of returns (`toReturnTimes`), and performing strict equality checks (`toStrictEqual`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn(() => true).mockReturnValueOnce(false).mockReturnValueOnce('hello');\n\nmockFn('arg1', 'arg2');\nmockFn('arg3');\nmockFn();\n\n// New matcher examples\nexpect(mockFn).nthCalledWith(1, 'arg1', 'arg2');\nexpect(mockFn).toReturn(); // Checks if it returned (didn't throw) at least once\nexpect(mockFn).toReturnTimes(3);\nexpect(mockFn).toReturnWith(true); // Checks if it returned 'true' at least once\nexpect(mockFn).lastReturnedWith('hello');\nexpect(mockFn).nthReturnedWith(1, false); // Checks the return value of the 1st call\n\nconst obj1 = { a: 1, b: undefined };\nconst obj2 = { a: 1 };\nexpect(obj1).not.toEqual(obj2); // Standard equality considers undefined props\nexpect(obj1).toStrictEqual({ a: 1, b: undefined }); // Strict equality checks for undefined props\nexpect({ a: 1 }).toStrictEqual({ a: 1 });\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Module for jest-worker in JavaScript\nDESCRIPTION: This code defines a Node.js module (`heavy-task.js`) intended to be used with `jest-worker`. It exports an object containing a function `myHeavyTask`, which represents a potentially long-running or CPU-intensive operation to be executed in a separate process.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Return Value with mockReturnValueOnce in Jest (JS/TS)\nDESCRIPTION: Demonstrates using `mockReturnValueOnce` to specify a return value for a single call to a Jest mock function. Shows how it can be chained for successive calls and falls back to the value defined by `mockReturnValue` (or `undefined`) when all `mockReturnValueOnce` values are exhausted. Requires a Jest mock function created with `jest.fn()`. Both JavaScript and TypeScript examples are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Naming Mock Functions with .mockName in Jest for JavaScript\nDESCRIPTION: Shows how to assign a meaningful display name to a Jest mock using .mockName, making error messages clearer and easier to trace in test output. The mock also specifies both a default return value and a custom implementation for demonstration. Requires Jest and is typically used for debugging complex test suites.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n----------------------------------------\n\nTITLE: Mocking Static and Getter Methods with Jest.spyOn\nDESCRIPTION: Example showing how to mock static methods and getters in a class using Jest's spyOn with special configuration for getter methods. This allows testing that these methods are called correctly.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking and Spying on Instance Methods with Shared Mock Function - Jest - JavaScript\nDESCRIPTION: Uses jest.fn to create a shared mock implementation of an instance method and makes it accessible both in the mock factory and test file to track usage across multiple instances. Enhances testing by spying on all instance calls to playSoundFile. Inputs are class instantiation and method invocation during tests; outputs are verified via mock function call counts and arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Now we can track calls to playSoundFile\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Mocking Modules with jest.doMock in JavaScript\nDESCRIPTION: Demonstrates using `jest.doMock` to prevent automatic hoisting of mocks, allowing different mock implementations for the same module in different tests within the same file. Requires `jest.resetModules()` in `beforeEach` to ensure isolation between tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Jest Configuration with JSON\nDESCRIPTION: Example showing how to add comments to Jest configuration in package.json by using the special '//' property key. This allows documenting your configuration options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Object Equality with toEqual in Jest\nDESCRIPTION: Shows how to use the toEqual matcher to check the value of an object in Jest. It compares an object with dynamically added properties to an expected object structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.resetModules for Test Isolation in JavaScript\nDESCRIPTION: Shows a common pattern where `jest.resetModules()` is called in a `beforeEach` block. This ensures that each test gets a fresh, non-cached version of the required modules, preventing state leakage between tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('works', () => {\n  const sum = require('../sum');\n});\n\ntest('works too', () => {\n  const sum = require('../sum');\n  // sum is a different copy of the sum module from the previous test.\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.isolateModules() to Create Sandbox Module Registry in JavaScript\nDESCRIPTION: Demonstrates how to use jest.isolateModules() to create a sandbox registry for modules, isolating them for each test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet myModule;\njest.isolateModules(() => {\n  myModule = require('myModule');\n});\n\nconst otherCopyOfMyModule = require('myModule');\n```\n\n----------------------------------------\n\nTITLE: Combining `mockImplementationOnce` with a Default Mock Implementation in JavaScript\nDESCRIPTION: Illustrates the interaction between `.mockImplementationOnce()` and a default implementation set via `jest.fn(() => 'default')`. Calls first consume the `mockImplementationOnce` definitions ('first call', 'second call'), and subsequent calls use the default implementation ('default').\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());\n// > 'first call', 'second call', 'default', 'default'\n```\n\n----------------------------------------\n\nTITLE: Method Spying with Jest spyOn\nDESCRIPTION: Demonstrates using jest.spyOn to create spy functions for tracking method calls while preserving original implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = {\n  play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n  const isPlaying = video.play();\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.Mocked<Source> for Comprehensive Mocking in TypeScript\nDESCRIPTION: Demonstrates the usage of jest.Mocked<Source> utility type to create fully typed mock objects. This is particularly useful for mocking external modules or complex objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Number Comparisons in Jest\nDESCRIPTION: Demonstrates various matchers for comparing numbers, including toBeGreaterThan, toBeGreaterThanOrEqual, toBeLessThan, toBeLessThanOrEqual, toBe, and toEqual.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Calls with Jest Custom Matchers - JavaScript\nDESCRIPTION: This snippet demonstrates how to utilize Jest's built-in custom matcher functions, such as toHaveBeenCalled, toHaveBeenCalledWith, toHaveBeenLastCalledWith, and toMatchSnapshot, to assert that a mock function was called, called with specific arguments, or matches a snapshot. To use these matchers, Jest must be set up as a test runner, and 'mockFunc' should be a Jest mock function. Arguments like arg1 and arg2 represent input values. Outputs are handled by the matcher's pass/fail status. These assertions simplify common patterns in mock verification.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc).toHaveBeenCalled();\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);\n\n// All calls and the name of the mock is written as a snapshot\nexpect(mockFunc).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Scoping Jest Setup/Teardown Hooks within Describe Blocks (JavaScript)\nDESCRIPTION: Demonstrates how Jest hooks (`beforeEach` in this example) can be scoped. Hooks defined at the top level apply to all tests in the file, while hooks defined inside a `describe` block apply only to the tests within that specific block. This allows for different setup procedures for different groups of tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Applies to all tests in this file\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with .catch in Jest (JavaScript)\nDESCRIPTION: Explains testing expected promise rejections using the `.catch` method. The test returns the promise chain, and `expect.assertions(1)` verifies that the `catch` block runs. The assertion inside `catch` validates the error.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(error => expect(error).toMatch('error'));\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Sequentially\nDESCRIPTION: Shows how to run Jest tests sequentially in a single thread using the `--runInBand` CLI option. This can mitigate performance issues on systems with limited resources (like CI servers or Docker containers) or simplify debugging by avoiding process parallelization. The example includes usage with both the Jest CLI directly and via an npm script.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --runInBand\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --runInBand\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with describe.each Array Format\nDESCRIPTION: Demonstrates how to use describe.each with an array of test cases to run parameterized tests. Shows testing addition operations with different number combinations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promises in Jest (JavaScript)\nDESCRIPTION: Demonstrates testing a function (`fetchData`) that returns a Promise. The test function returns the promise chain, and Jest waits for it to resolve. The `then` block contains the assertion using `expect` to check the resolved data.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Methods of Mocked Class Instances in Jest\nDESCRIPTION: Example of creating a separate mock function for a class method to track calls to that method across all instances. The mockPlaySoundFile function is defined outside the mock to be accessible in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Now we can track calls to playSoundFile\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery Event Listener for User Display in JavaScript\nDESCRIPTION: This JavaScript module uses jQuery to attach a click event listener to an HTML button with the ID 'button'. When clicked, it calls `fetchCurrentUser` asynchronously. The callback updates the text content of an element with the ID 'username' to display the user's full name and login status.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialjQuery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst $ = require('jquery');\nconst fetchCurrentUser = require('./fetchCurrentUser.js');\n\n$('#button').click(() => {\n  fetchCurrentUser(user => {\n    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');\n    $('#username').text(user.fullName + ' - ' + loggedText);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure Jest reporters, including the default reporter and a custom XML reporter. It demonstrates the use of multiple reporters in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Spying on and Mocking a Class Method - Jest - JavaScript\nDESCRIPTION: Illustrates spying on (and optionally mocking) an instance method of a class using jest.spyOn, then replacing its implementation for test purposes. Requires jest, the module to import, and a test framework. Key inputs include the prototype and method name; outputs are mocked or spied method calls verified in test assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('mocked function');\n  }); // comment this line if just want to \"spy\"\n\nit('player consumer plays music', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting `describe` Blocks for Hierarchical Tests in Jest (JavaScript)\nDESCRIPTION: Explains how to nest `describe` blocks in Jest to create a hierarchical structure for organizing complex test suites. This example tests a `binaryStringToNumber` function with nested groups for valid and invalid input scenarios, improving test structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mock Functions with Jest.fn - JavaScript\nDESCRIPTION: Shows how to create bare and implemented mock functions with jest.fn and assert their invocation in tests. Dependencies: Jest testing framework. Parameters: optional mock implementation callback. Outputs: A Jest mock function object. Limitations: Behavior is defined by provided implementation, if any. Appropriate for verifying function calls or creating function stubs in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled();\n\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\n```\n\n----------------------------------------\n\nTITLE: Verifying Object Structure and Subset Matching in Jest - JavaScript\nDESCRIPTION: These snippets show use of .toMatchObject in Jest to check that an object or array of objects contains at least the properties and values specified by an expected object or array. It supports asymmetric matchers for properties. Used for verifying partial matches or array structure. Dependencies: Jest. Inputs are objects or arrays; outputs are assertion results on partial matches and property presence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: js\nCODE:\n```\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('the house has my desired features', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n```\n\nLANGUAGE: js\nCODE:\n```\ndescribe('toMatchObject applied to arrays', () => {\n  test('the number of elements must match exactly', () => {\n    expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);\n  });\n\n  test('.toMatchObject is called for each elements, so extra object properties are okay', () => {\n    expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([\n      {foo: 'bar'},\n      {baz: 1},\n    ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Array and Iterable Containment with Jest (JavaScript)\nDESCRIPTION: This snippet tests whether arrays and iterable structures contain specific elements using 'toContain'. It shows assertions for both native arrays and ES6 Sets in Jest tests. Requires Jest and ES6 support. Inputs are array or Set and item ('milk'); outputs are pass if 'milk' is found.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Rejected Promises in Async Tests with `mockRejectedValue` (JavaScript)\nDESCRIPTION: Shows how to use `mockRejectedValue` to create an async mock function that always rejects with a specified Error. This is useful for testing error handling in asynchronous code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Consumer Class Using SoundPlayer in JavaScript\nDESCRIPTION: This snippet defines the `SoundPlayerConsumer` class, which imports and instantiates the `SoundPlayer` class in its constructor. Its `playSomethingCool` method uses an instance of `SoundPlayer`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"sound-player-consumer.js\"\nimport SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Object Properties with toHaveProperty in Jest\nDESCRIPTION: This example demonstrates the usage of .toHaveProperty() matcher to check if properties exist in an object and have specific values. It shows various property referencing techniques including dot notation and array notation for accessing nested properties in a complex object structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Object containing house features to be tested\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n    'nice.oven': true,\n  },\n  livingroom: {\n    amenities: [\n      {\n        couch: [\n          ['large', {dimensions: [20, 20]}],\n          ['small', {dimensions: [10, 10]}],\n        ],\n      },\n    ],\n  },\n  'ceiling.height': 2,\n};\n\ntest('this house has my desired features', () => {\n  // Example Referencing\n  expect(houseForSale).toHaveProperty('bath');\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\n\n  expect(houseForSale).not.toHaveProperty('pool');\n\n  // Deep referencing using dot notation\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\n    'oven',\n    'stove',\n    'washer',\n  ]);\n\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\n\n  // Deep referencing using an array containing the keyPath\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\n  expect(houseForSale).toHaveProperty(\n    ['kitchen', 'amenities'],\n    ['oven', 'stove', 'washer'],\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\n  expect(houseForSale).toHaveProperty(\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\n    20,\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\n\n  // Referencing keys with dot in the key itself\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Snapshot Test with Changed Props in Jest (TypeScript)\nDESCRIPTION: This snippet demonstrates a scenario where the props to a React Link component are intentionally changed, and the corresponding Jest snapshot test fails until the stored snapshot is updated. The test otherwise follows the same steps as the initial snapshot test: renders the new JSX, creates a serialized representation, and validates it against the existing snapshot. Intended for situations where component props are altered deliberately; dependencies are unchanged from the previous example, with expected inputs being new Link props, and outcome is a prompted snapshot artifact update.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Updated test case with a Link to a different address\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions and Error Matching with toThrow in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates testing error throwing in Jest using the `toThrow` matcher. A function that throws a specific error is defined, and various tests confirm that it throws errors and that error messages match expectations, including strings and regular expressions. Requires Jest and a function that produces errors; tests are assertion-based without arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n```\n\n----------------------------------------\n\nTITLE: Adding comments in Jest configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to add comments to a Jest configuration in a package.json file using the '//' key. It includes a comment and sets the verbose option to true.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Only Specific Parameterized Tests - Jest Only Each - JavaScript\nDESCRIPTION: Uses test.only.each to run only the specified parameterized tests, available in both array and template literal syntax. Non-only tests are not run. Useful for focusing on specific data-driven cases during debug or development.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await with .resolves/.rejects in Jest with JavaScript\nDESCRIPTION: This snippet combines async/await with Jest's .resolves and .rejects matchers to test promise resolution and rejection. The first test checks that fetchData resolves to 'peanut butter'; the second verifies that fetchData rejects with an error containing 'error'. Prerequisites are Jest and a promise-returning fetchData function. The tests return (or await) the matcher to ensure they correctly await asynchronous execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Mock Implementation Using mockImplementation - JavaScript\nDESCRIPTION: Shows how to dynamically replace the mock implementation for an ES6 class in Jest during test setup. The SoundPlayer mock is changed in a beforeAll block so that its playSoundFile method throws an error. This enables fine-grained, per-suite control over mock behaviors. Jest and the tested classes must be available as dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('When SoundPlayer throws an error', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Test error');\n        },\n      };\n    });\n  });\n\n  it('Should throw an error when calling playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Jest Mocks Between Tests\nDESCRIPTION: Example showing how to clean up mocks between test runs using mockClear() in the beforeEach function to reset call history for both constructor and method mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Test Implementation Example\nDESCRIPTION: Comprehensive example showing a complete test file implementation with module factory mocking, setup, and various test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Object Equality with toEqual in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to use Jest's `toEqual` matcher to recursively test the equality of objects. The test assigns values to an object and verifies that the resulting structure matches the expected object. This comparison is deeper than strict equality and requires Jest as a dependency. Test is assertion-based and has no inputs or outputs besides the check itself.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejections with Jest `.rejects` Matcher\nDESCRIPTION: These Jest tests demonstrate the `.rejects` matcher for concisely testing expected promise rejections. The first test uses `return expect(user.getUserName(3)).rejects.toEqual(...)` to assert that the promise rejects with the specified error object. The second test uses `async`/`await` with the same `.rejects` matcher: `await expect(user.getUserName(3)).rejects.toEqual(...)`. If the promise were to resolve instead of reject, the test would fail. `expect.assertions(1)` is recommended to confirm the assertion runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Testing for async errors using `.rejects`.\nit('tests error with rejects', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n\n// Or using async/await with `.rejects`.\nit('tests error with async/await and rejects', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.mocked() to Create Type-Safe Mocks in TypeScript\nDESCRIPTION: Demonstrates how to use jest.mocked() to create a type-safe mock of an imported module. Shows mocking of deeply nested methods with type checking and also direct usage with console.log. Includes verification of mock calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Parameterized Tests with Each Modifier Using Tagged Template Table in Jest (JavaScript)\nDESCRIPTION: Applies test.each with a tagged template literal, specifying variable headings and rows as table data. Each case is automatically injected into the test function as an object. This format enhances readability and maintainability for a large set of test cases in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Resolved Promises with .resolves in Jest\nDESCRIPTION: Demonstrates how to test that a Promise resolves to a specific value using the .resolves modifier. The example shows both the return approach and the async/await approach.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('resolves to lemon', () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Undefined Values with toBeUndefined in Jest\nDESCRIPTION: Shows how to use the toBeUndefined matcher to check if a value is undefined. This is equivalent to toBe(undefined) but provides better practices.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the best drink for octopus flavor is undefined', () => {\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing setTimeout Calls with Jest Fake Timers\nDESCRIPTION: This Jest test suite demonstrates enabling fake timers using `jest.useFakeTimers()` and spying on the global `setTimeout` function. The test verifies that when `timerGame` (imported from '../timerGame') is called, `setTimeout` is invoked exactly once and with the expected arguments (a function and a delay of 1000ms).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ntest('waits 1 second before ending the game', () => {\n  const timerGame = require('../timerGame');\n  timerGame();\n\n  expect(setTimeout).toHaveBeenCalledTimes(1);\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Return Values with mockReturnValueOnce in JavaScript\nDESCRIPTION: Demonstrates how to use mockReturnValueOnce to specify return values for successive calls to a mock function. It shows chaining multiple mockReturnValueOnce calls and fallback to mockReturnValue.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Mocking a Specific Method in a Class with Jest.spyOn\nDESCRIPTION: Example demonstrating how to mock or spy on a specific method within a class using Jest's spyOn method, which allows tracking calls while providing a custom implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('mocked function');\n  }); // comment this line if just want to \"spy\"\n\nit('player consumer plays music', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with .rejects Matcher - Jest JavaScript\nDESCRIPTION: This snippet shows how to write a Jest test asserting promise rejection using the .rejects matcher. Returning the expectation ensures the test fails if fetchData unexpectedly fulfills. Requires Jest and fetchData returning a promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Errors with .toThrow in Jest (JavaScript)\nDESCRIPTION: Demonstrates various ways to use `.toThrow` to assert specific details about the thrown error. It shows how to check if the error message matches a regex, includes a substring, matches an exact string (via string or Error object), or if the error is an instance of a specific class.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: js\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrow(/yuck/);\n  expect(drinkOctopus).toThrow('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrow(DisgustingFlavorError);\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.only for Isolating Tests in Jest\nDESCRIPTION: Demonstrates how to use test.only to run a single test in isolation, which is useful for debugging failing tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `maxWorkers` with Percentage (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure the `maxWorkers` option in `jest.config.js` using a percentage string ('50%'). This allows Jest to dynamically calculate the number of worker threads based on the available CPU cores (50% in this case), which is useful for environments with variable resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  maxWorkers: '50%',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest moduleNameMapper in JavaScript\nDESCRIPTION: Defines the `moduleNameMapper` option within a Jest configuration object in JavaScript. This option maps module import paths matching regular expressions to specified module names or arrays of module names, often used for stubbing assets like images or styles. It demonstrates mapping to a global stub, a relative file using `<rootDir>`, substituting captured regex groups, and mapping to multiple potential paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_46\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test with jest-puppeteer Preset\nDESCRIPTION: Example Jest test suite using Puppeteer managed by the `jest-puppeteer` preset. It leverages the globally available `page` object (provided by the preset) to navigate to 'https://google.com' and assert the page title without needing manual setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndescribe('Google', () => {\n  beforeAll(async () => {\n    await page.goto('https://google.com');\n  });\n\n  it('should be titled \"Google\"', async () => {\n    await expect(page.title()).resolves.toMatch('Google');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Array and Iterable Containment with toContain in Jest (JavaScript)\nDESCRIPTION: This code shows how to use Jest's `toContain` matcher to check whether arrays or iterables contain a certain item. It tests the presence of `'milk'` in both an array and a Set. Requires Jest; the data is statically defined and no external parameters or return values are involved.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers and Floating Points in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates various matchers for number assertions in Jest, including relational matchers ('toBeGreaterThan', 'toBeGreaterThanOrEqual', etc.) and floating point checks with 'toBeCloseTo' to avoid precision errors. It emphasizes comparing computed values against expected ones in unit tests. Inputs are arithmetic expressions; outputs are pass/fail based on relations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Artifact Example for React Component (JavaScript)\nDESCRIPTION: This is an example of a Jest snapshot artifact automatically generated for a previously executed snapshot test on a React Link component. The export key labels the test scenario; the exported string is a formatted HTML output of the component, showing its structure and props. These artifact files require no manual editing and are produced/updated as part of Jest's test runner. They are essential dependencies for snapshot testing, ensuring future runs compare the actual against this stored value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Resolution with expect.resolves (Return)\nDESCRIPTION: Illustrates testing asynchronous code with promises in Jest using the `.resolves` modifier. It unwraps the resolved value of a promise and chains the `toBe` matcher to assert the value is 'lemon'. The test function must return the `expect` statement to signal Jest to wait for the promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntest('resolves to lemon', () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hook and Test Execution Order in Jest (JavaScript)\nDESCRIPTION: Uses nested describe blocks and various beforeAll, afterAll, beforeEach, and afterEach hooks to output logs showing the execution order. Useful for understanding the Jest lifecycle and how hooks are invoked at top and nested describe levels. Each test and hook logs a distinct message to the console for traceability.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\n\ntest('', () => console.log('1 - test'));\n\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n----------------------------------------\n\nTITLE: Testing Mock Function Arguments with toHaveBeenCalledWith()\nDESCRIPTION: Shows how to test that a mock function was called with specific arguments using toHaveBeenCalledWith(). The example verifies that a function is called with a specific beverage object.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('registration applies correctly to orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Mock Return Values with mockReturnValue in JavaScript\nDESCRIPTION: Demonstrates the `mockReturnValue(value)` method, a shorthand way to set a constant value that the mock function will return every time it's called. The return value can be updated by calling the method again.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Testing Object Equality with toEqual in Jest\nDESCRIPTION: Shows how to use the toEqual matcher to check the value of an object. This matcher recursively checks every field of an object or array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Mocks for Class Methods in Jest\nDESCRIPTION: Example of a manual mock implementation that exports both the mocked class and the mock method separately, allowing individual tracking of method calls in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Using test.each with Array of Objects in TypeScript (Jest)\nDESCRIPTION: Illustrates using `test.each` with an array of objects as the data table in TypeScript. This approach provides robust type inference for the test function arguments, correctly handling potentially undefined properties when objects have different shapes. Both inline tables and tables defined as variables work well.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with toThrow in Jest\nDESCRIPTION: Illustrates how to use the toThrow matcher to test if a function throws an exception in Jest. It includes examples of matching error types, error messages, and using regular expressions for more precise matching.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Consumer of Manual Jest Mock - JavaScript\nDESCRIPTION: Illustrates how to use a manual Jest mock within a test file, including importing mock methods and setting up mocks and clear logic before each test. Includes tests for constructor and method call assertions using the named export from the mock module. Dependencies include Jest, the manual mock, and relevant classes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing One-Time Asynchronous Setup/Teardown with beforeAll/afterAll in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates using `beforeAll` and `afterAll` in Jest for setup and teardown tasks that only need to run once per file or describe block, especially useful for asynchronous operations. It shows initializing a database asynchronously before any tests run and clearing it after all tests complete by returning promises from `initializeCityDatabase()` and `clearCityDatabase()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test with MongoDB Connection\nDESCRIPTION: Provides an example Jest test suite demonstrating integration with MongoDB using the `jest-mongodb` preset. It connects to the database in `beforeAll` using global variables (`__MONGO_URI__`, `__MONGO_DB_NAME__`) injected by the preset, performs database operations (insert, findOne) within a test case, and closes the connection in `afterAll`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MongoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {MongoClient} = require('mongodb');\n\ndescribe('insert', () => {\n  let connection;\n  let db;\n\n  beforeAll(async () => {\n    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    db = await connection.db(globalThis.__MONGO_DB_NAME__);\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  it('should insert a doc into collection', async () => {\n    const users = db.collection('users');\n\n    const mockUser = {_id: 'some-user-id', name: 'John'};\n    await users.insertOne(mockUser);\n\n    const insertedUser = await users.findOne({_id: 'some-user-id'});\n    expect(insertedUser).toEqual(mockUser);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Babel-jest and Custom CSS Transformer in Jest Config (JSON)\nDESCRIPTION: An example of a Jest configuration transform section in JSON, specifying babel-jest for JS/TS files and a custom transformer for CSS. Ensures source files are properly transpiled and CSS files are handled as specified. Input is file extension; output is processed code for Jest. Prerequisites: 'babel-jest' and custom CSS transformer installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"transform\": {\n    \"\\\\.[jt]sx?$\": \"babel-jest\",\n    \"\\\\.css$\": \"some-css-transformer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Custom Transformers and CSS Modules in JavaScript\nDESCRIPTION: Configures Jest to use identity-obj-proxy for CSS/LESS mocking and a custom fileTransformer.js for various asset files. The transform option maps file extensions to appropriate transformer modules, replacing static asset imports with simplified mocks. Requires identity-obj-proxy and fileTransformer.js in the project root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Factory Function for Mocking Classes in Jest\nDESCRIPTION: A basic example of using jest.mock() with a module factory function to mock a class constructor. The factory must return a function that can be called with 'new' to create object instances.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Automatic Mock of ES6 Class in Jest - JavaScript\nDESCRIPTION: Demonstrates usage of jest.mock to create an automatic mock for the SoundPlayer class, facilitating spying on constructor and method calls. Includes setup for clearing mock calls between tests and assertions verifying instantiation and method call details. Requires Jest as a test framework and the tested classes to be present as modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Object Subsets with .toMatchObject in Jest (JavaScript)\nDESCRIPTION: Explains how to use `.toMatchObject` to verify that a JavaScript object (`houseForSale`) matches a subset of properties defined in another object (`desiredHouse`). It recursively matches properties and allows using other matchers (like `expect.stringMatching`) within the expected object. Properties present in the received object but not in the expected object are ignored.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('the house has my desired features', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n```\n\n----------------------------------------\n\nTITLE: Explicit Factory Mocking with Typings Using jest.mock in TypeScript\nDESCRIPTION: Shows how to explicitly type the factory argument in jest.mock for TypeScript modules, using import type inference. Creates a mock function returning 42. Requires TypeScript and Jest, and provides improved type safety for the mock. Useful for strict type-checking in test mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// The optional type argument provides typings for the module factory\njest.mock<typeof import('../moduleName')>('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with test.each in Jest\nDESCRIPTION: Shows how to use test.each for running tests with different data sets. It demonstrates both array-based and template literal syntax, including object parameter passing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Using toBeInstanceOf Matcher in Jest (JavaScript)\nDESCRIPTION: Added in Jest 16.0.0, the `.toBeInstanceOf(Class)` matcher asserts that an object is an instance of a given constructor (class). This is useful for checking the type of an object.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntoBeInstanceOf\n```\n\n----------------------------------------\n\nTITLE: Testing Recursive Timers with jest.runOnlyPendingTimers in JavaScript\nDESCRIPTION: Shows how to use Jest's runOnlyPendingTimers to avoid infinite timer execution when testing recursive timer code. The test spies on global setTimeout, invokes infiniteTimerGame with a mock callback, verifies timer scheduling, fast-forwards only pending timers, and asserts expected callback behavior and timer creation. Requires Jest and infiniteTimerGame module. Prevents infinite loops by not running newly scheduled timers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ndescribe('infiniteTimerGame', () => {\n  test('schedules a 10-second timer after 1 second', () => {\n    const infiniteTimerGame = require('../infiniteTimerGame');\n    const callback = jest.fn();\n\n    infiniteTimerGame(callback);\n\n    // At this point in time, there should have been a single call to\n    // setTimeout to schedule the end of the game in 1 second.\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n\n    // Fast forward and exhaust only currently pending timers\n    // (but not any new timers that get created during that process)\n    jest.runOnlyPendingTimers();\n\n    // At this point, our 1-second timer should have fired its callback\n    expect(callback).toHaveBeenCalled();\n\n    // And it should have created a new timer to start the game over in\n    // 10 seconds\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Package Manager (Bash)\nDESCRIPTION: Examples of running Jest tests through a package manager (npm) while passing command line arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njest -u -t=\"ColorPicker\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Testing of Callback-based Async Function in Jest with JavaScript\nDESCRIPTION: This example, marked explicitly as incorrect, attempts to test a callback-based async function using Jest without signaling asynchronous completion. Since the test does not notify Jest when async work finishes, the test completes before the callback runs. It highlights the problem of missing async signaling, which leads to broken tests where assertions are not reliably executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TestingAsyncCode.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Don't do this!\ntest('the data is peanut butter', () => {\n  function callback(error, data) {\n    if (error) {\n      throw error;\n    }\n    expect(data).toBe('peanut butter');\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Data-Driven Tests with Array Table in Jest (JavaScript)\nDESCRIPTION: Uses `test.each` with an array of arrays to execute multiple test cases using shared logic. Each sub-array\\'s elements become function arguments, with the test name templated via printf formatting (e.g., %i for integer). Requires Jest; suitable for reducing duplication when testing similar scenarios. Each row triggers one test function call with matching arguments and assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Rejection with expect.rejects (Return)\nDESCRIPTION: Illustrates testing asynchronous code for promise rejection in Jest using the `.rejects` modifier. It unwraps the rejection reason of a promise and chains the `toThrow` matcher to assert the error message is 'octopus'. The test function must return the `expect` statement.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('rejects to octopus', () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Array and Iterable Content with toContain in Jest\nDESCRIPTION: Demonstrates how to use the toContain matcher to check if an array or iterable contains a specific item in Jest. It shows examples with both an array and a Set.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with Inline Snapshots in Jest - TypeScript/TSX\nDESCRIPTION: Shows how to use Jest's toMatchInlineSnapshot for automatic inline snapshot testing within the source test file. By initially providing no argument, Jest will insert the snapshot output after the next test run. Requires jest and react-test-renderer for proper usage. The function serializes the Link component with its props and expects Jest to insert the inline snapshot for future comparisons.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nit('renders correctly', () => {\\n  const tree = renderer\\n    .create(<Link page=\\\"https://example.com\\\">Example Site</Link>)\\n    .toJSON();\\n  expect(tree).toMatchInlineSnapshot();\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Find Project Files Analogous to Webpack in JavaScript\nDESCRIPTION: Shows how to align Jest's file extension and module directory resolution with a webpack setup. Sets moduleFileExtensions and moduleDirectories in CommonJS config, along with asset mocks via moduleNameMapper. Ensures Jest is aware of source file extensions and custom locations, paralleling webpack's resolve. No extra dependencies required.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Matching with Regular Expressions in Jest (JavaScript)\nDESCRIPTION: These test cases check string content using Jest's 'toMatch' matcher with regular expressions. They demonstrate both positive and negative string pattern assertions. Requires Jest environment. Inputs are test string literals; outputs are regular expression match results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Parameterized Tests with Each Modifier and Array of Objects in Jest (JavaScript)\nDESCRIPTION: Uses test.each with an array of objects for clearer parameter mapping. Objects provide named keys a, b, and expected, which are destructured in the test function. Useful for readability and when working with complex or nested test data structures. Expects Jest and synchronous assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Module Mock using jest.createMockFromModule - JavaScript\nDESCRIPTION: Illustrates creating a Jest-generated mock from a module, overriding one method's implementation, and asserting that the mocked behaviors are as expected. Requires Jest and the source module; showcases flexibility of manual vs. automatic mock composition.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst utils = jest.createMockFromModule('../utils');\\n\\nutils.isAuthorized = jest.fn(secret => secret === 'not wizard');\\n\\ntest('implementation created by jest.createMockFromModule', () => {\\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\\n  expect(utils.isAuthorized('not wizard')).toBe(true);\\n});\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Table Variable of Objects in Jest (TypeScript)\nDESCRIPTION: Shows how to use a variable to hold an array of objects as the data table for parameterized tests in Jest with TypeScript. This allows reuse and clarity for larger datasets. The test callback receives properly typed destructured arguments. Required dependencies are Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Jest Describe Block and Test Execution Order (JavaScript)\nDESCRIPTION: Shows that Jest executes all `describe` block handlers first to collect tests before running any actual tests. Tests are then run serially in the order they were defined. `console.log` statements trace the execution sequence, with the expected output provided in comments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndescribe('describe outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n\n    test('test 1', () => console.log('test 1'));\n  });\n\n  console.log('describe outer-b');\n\n  test('test 2', () => console.log('test 2'));\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n\n    test('test 3', () => console.log('test 3'));\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test 1\n// test 2\n// test 3\n```\n\n----------------------------------------\n\nTITLE: Configuring return values dynamically with mockReturnValue - Jest - JavaScript\nDESCRIPTION: Demonstrates setting and updating the returned value for a Jest mock function using mockReturnValue, and validating outputs. The code first sets the return to 42, then to 43, for separate calls. This approach allows for concise and readable set-up of fixed-return mocks for isolated test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Concurrent Testing with test.concurrent.each in Jest\nDESCRIPTION: Demonstrates how to use test.concurrent.each for running asynchronous tests with different data sets concurrently. It shows both array-based and template literal syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Partially Mocking a Module with jest.requireActual in JavaScript\nDESCRIPTION: Demonstrates using `jest.requireActual` inside a `jest.mock` factory to retain the original implementation of a module while mocking specific parts. This example keeps the original module but overrides the `getRandom` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule = jest.requireActual('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n----------------------------------------\n\nTITLE: Isolating a Single Test Run with test.only in Jest (JavaScript)\nDESCRIPTION: Demonstrates usage of test.only so only one specific test runs in Jest, which is essential for debugging. The first test (expected to fail) will run, while the second test (expected to pass) is skipped. Useful for troubleshooting test failures in large suites and ensuring accurate isolation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Original Module within a Mock Factory using jest.requireActual (JS/TS)\nDESCRIPTION: Demonstrates using `jest.requireActual` inside a `jest.mock` factory to obtain the original module's implementation. This allows selectively mocking parts of a module while retaining original behavior for others, often using the spread operator (`...originalModule`) combined with specific overrides. The TypeScript version adds type safety with a type argument.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule = jest.requireActual('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\nLANGUAGE: ts\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule =\n    jest.requireActual<typeof import('../myModule')>('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock for Request Module in Jest\nDESCRIPTION: This snippet defines a manual mock for the `request` module, placed in the `__mocks__/request.js` directory. It simulates the API behavior by returning a Promise that resolves with predefined user data based on the `userID` extracted from the URL, or rejects if the user ID is not found. `process.nextTick` is used to ensure the operation is asynchronous.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst users = {\n  4: {name: 'Mark'},\n  5: {name: 'Paul'},\n};\n\nexport default function request(url) {\n  return new Promise((resolve, reject) => {\n    const userID = parseInt(url.slice('/users/'.length), 10);\n    process.nextTick(() =>\n      users[userID]\n        ? resolve(users[userID])\n        : reject({\n            error: `User with ${userID} not found.`,\n          }),\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using not Matcher for Negative Assertions in Jest\nDESCRIPTION: Demonstrates how to use the not matcher to test for the opposite of a matcher. This example checks that the sum of positive numbers is not zero.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Getter/Setter Property Spies with Jest.spyOn AccessType - JavaScript\nDESCRIPTION: Demonstrates Jest test cases using jest.spyOn with the accessType argument ('get' or 'set') to monitor property access or mutation. Requires modules exporting getter/setter properties. Inputs: property accesses/assignments; outputs: assertions on spy function call and property state. afterEach ensures restoration of all mocks. Suitable for cases where function spying is insufficient and property access tracking is needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst audio = require('./audio');\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play', 'get'); // we pass 'get'\n  const isPlaying = video.play;\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n\ntest('plays audio', () => {\n  const spy = jest.spyOn(audio, 'volume', 'set'); // we pass 'set'\n  audio.volume = 100;\n\n  expect(spy).toHaveBeenCalled();\n  expect(audio.volume).toBe(100);\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting mock.calls for Function Arguments in Jest JavaScript\nDESCRIPTION: Demonstrates how to use the mock.calls property to inspect all arguments of calls made to a Jest mock function. The snippet showcases the resulting array structure after multiple calls with varying arguments. Requires Jest for mocking, expects that the mock function has been called, and returns an array of arrays with each call's arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of expect.arrayContaining() in Jest (Dice Rolls)\nDESCRIPTION: Provides further examples of `expect.arrayContaining(array)` in Jest, using a sequence of dice rolls analogy. It demonstrates that the matcher succeeds if all expected elements are present, even with duplicates or extra elements, and fails if any expected element is missing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_43\n\nLANGUAGE: js\nCODE:\n```\ndescribe('Beware of a misunderstanding! A sequence of dice rolls', () => {\n  const expected = [1, 2, 3, 4, 5, 6];\n  it('matches even with an unexpected number 7', () => {\n    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match without an expected number 2', () => {\n    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.skip in JavaScript\nDESCRIPTION: Shows how to use test.skip to skip running a specific test without deleting the code. This is useful for temporarily broken tests in large codebases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot File Content\nDESCRIPTION: Illustrates the content of a Jest snapshot file (`.snap`). It contains the serialized rendered output of the `Link` component at different points in the test (`changes the class when hovered 1`, `2`, and `3`), corresponding to initial render, hovered state, and normal state after mouse leave.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`changes the class when hovered 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 2`] = `\n<a\n  className=\"hovered\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 3`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Setting a Fixed Return Value with mockReturnValue in TypeScript\nDESCRIPTION: Demonstrates using `mockFn.mockReturnValue(value)` with TypeScript to make a typed Jest mock function consistently return a specific predefined value. The example also shows updating the return value. Requires Jest (`@jest/globals`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Mocking and Testing a Nested Object with Jest in TypeScript\nDESCRIPTION: Demonstrates how to use jest.mocked() to create a type-safe mock of the 'song' object. It shows mocking of nested methods and direct usage with console.log.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TransformIgnorePatterns for pnpm in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to configure transformIgnorePatterns when using pnpm package manager, accounting for its unique node_modules structure with symlinks to the .pnpm directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_104\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative path to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fake Timers with Legacy Implementation in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration for enabling Jest's legacy fake timers implementation globally. This setup enables fake timers for all tests and uses the older implementation instead of the newer @sinonjs/fake-timers based version.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring TransformIgnorePatterns with Complex Patterns in Jest (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to set up transformIgnorePatterns with multiple patterns, including a negative lookahead to exclude specific packages from being ignored during transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_99\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing Strict Structural Equality with Jest - JavaScript\nDESCRIPTION: This snippet shows how .toStrictEqual differs from .toEqual in Jest by strictly comparing object structure, types, and accounting for undefined properties and array sparseness. The example contrasts a class instance with an object literal and demonstrates that .toStrictEqual fails where .toEqual passes. Dependencies: Jest. Inputs are object/class instances; outputs are assertion results based on strictness of equality criteria.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nclass LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('the La Croix cans on my desk', () => {\n  test('are not semantically the same', () => {\n    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});\n    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Execution using jest.advanceTimersByTime()\nDESCRIPTION: This Jest test utilizes `jest.useFakeTimers()` and tests the `timerGame` function. It asserts that the callback is initially not called. Then, `jest.advanceTimersByTime(1000)` is used to advance the fake time by exactly 1000 milliseconds, triggering the `setTimeout`. Finally, it asserts that the callback has been called exactly once.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.advanceTimersByTime(1000);\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Value Truthiness and Falsiness in Jest (JavaScript)\nDESCRIPTION: These test cases use Jest truthiness/falsiness matchers: 'toBeNull', 'toBeDefined', 'toBeUndefined', 'toBeTruthy', and 'toBeFalsy'. The tests assert how 'null' and '0' are classified by JavaScript, improving clarity in test intent. Requires Jest; inputs are 'null' and '0'. Output is match success according to JavaScript coercion rules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Fallback to Default Mock Implementation After mockImplementationOnce in JavaScript\nDESCRIPTION: Shows that once all implementations provided via `mockImplementationOnce` are exhausted, the mock function reverts to its default implementation if one was defined using `jest.fn(implementation)` or `.mockImplementation(implementation)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Link Component for Snapshot Testing\nDESCRIPTION: Example React component (Link.js) that renders a hyperlink with hover state, used for demonstrating snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useState} from 'react';\n\nconst STATUS = {\n  HOVERED: 'hovered',\n  NORMAL: 'normal',\n};\n\nexport default function Link({page, children}) {\n  const [status, setStatus] = useState(STATUS.NORMAL);\n\n  const onMouseEnter = () => {\n    setStatus(STATUS.HOVERED);\n  };\n\n  const onMouseLeave = () => {\n    setStatus(STATUS.NORMAL);\n  };\n\n  return (\n    <a\n      className={status}\n      href={page || '#'}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using replaceValue for Dynamic Property Replacement in TypeScript\nDESCRIPTION: Shows how to use replaceValue to change the value of a replaced property dynamically in tests. This is useful for adjusting mocked values in specific test scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Mocking Class Constructors with mockImplementation in TypeScript\nDESCRIPTION: Shows how to use `jest.mock('./SomeClass')` to mock a module and then leverage `jest.mocked(SomeClass).mockImplementation()` to provide a typed factory function for the class constructor in TypeScript. This controls the behavior and types of instances created from the mocked class. Requires Jest (`@jest/globals`, `import`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Verifying Nth Mock Function Call Arguments with expect.toHaveBeenNthCalledWith\nDESCRIPTION: Demonstrates using the `toHaveBeenNthCalledWith` matcher (alias `nthCalledWith`) in Jest to assert the arguments passed during a *specific* (nth) invocation of a mock function (`jest.fn()`). The example checks the arguments for the first (lemon) and second (octopus) calls to the `drink` mock within `drinkEach`. Note that `nthCall` is 1-based.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenNthCalledWith(1, 'lemon');\n  expect(drink).toHaveBeenNthCalledWith(2, 'octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Configuration in TypeScript\nDESCRIPTION: Example of a basic Jest configuration file in TypeScript that exports a configuration object with the verbose option enabled. Uses TypeScript's type system for type checking.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing React Test Renderer with npm/yarn\nDESCRIPTION: Command to install react-test-renderer for snapshot testing in React applications.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Example Rendered Snapshot Using a Custom Serializer\nDESCRIPTION: Displays the resulting snapshot content generated by Jest when the custom serializer (defined in a previous example, identified by the 'Pretty foo:' prefix) is applied to the test object from the corresponding test case. The nested object under 'foo' is serialized using the default Jest serializers via the `printer` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_75\n\nLANGUAGE: json\nCODE:\n```\nPretty foo: Object {\n  \"x\": 1,\n  \"y\": 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing Execution on Data-Driven Tests with Array Syntax in Jest (JavaScript)\nDESCRIPTION: This snippet shows `test.only.each` using an array of arrays. It ensures that only this specific set of data-driven tests runs within the file, skipping all other tests (like `test('will not be run', ...)`). Useful for debugging parameterized tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\ntest.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Using .toContain Matcher in Jest (JavaScript)\nDESCRIPTION: Demonstrates checking if an array returned by `getAllFlavors()` includes the string 'lime' using the `.toContain` matcher in a Jest test. This matcher uses strict equality (`===`) for array items and can also check for substrings in strings or presence in other iterables.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\ntest('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Sequential Implementations for Complex Behavior with Jest in JavaScript\nDESCRIPTION: Demonstrates the use of .mockImplementationOnce to specify different function bodies for consecutive calls to the same mock function. Each call executes and logs the result of the callback. Useful for simulating variable behaviors in asynchronous/callback-heavy code during testing. Inputs are callbacks; outputs are results printed to console.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\n----------------------------------------\n\nTITLE: Asserting Primitive Values with expect.toBe in JavaScript\nDESCRIPTION: Demonstrates using the `toBe` matcher within a Jest `describe` block to check for strict equality (`Object.is`) of primitive values (number and string properties of an object). It highlights that `toBe` checks referential identity for objects but reports deep comparison on failure. It advises against using `toBe` for floating-point numbers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('the can', () => {\n  test('has 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('has a sophisticated name', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throwing with Jest in JavaScript\nDESCRIPTION: Demonstrates testing error-throwing functions using Jest's 'toThrow' matcher. It verifies that a function throws any error, a specific error type, error message strings, and regex matches. Requires Jest. The critical parameter is an error-throwing function; outputs indicate expected and unexpected exceptions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n```\n\n----------------------------------------\n\nTITLE: Running Parameterized Tests with Only Modifier Using Each and Array Table in Jest (JavaScript)\nDESCRIPTION: Shows usage of test.only.each with an array to execute only a subset of parameterized tests for different addition scenarios. Unmarked tests are ignored. Useful when isolating specific test data cases for debugging. Parameters are provided positionally.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Implementation in JavaScript\nDESCRIPTION: Demonstrates how to provide implementations to a mock function using mockImplementation(), both as an initial value and as a replacement during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Assert Less Than Comparison with toBeLessThan in Jest - JavaScript\nDESCRIPTION: This snippet uses the `.toBeLessThan` Jest matcher to assert that a numeric or bigint value is less than a specified threshold. Demonstrates use with a function under test. Dependency: Jest. Parameters: received and expected numbers.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('ounces per can is less than 20', () => {\\n  expect(ouncesPerCan()).toBeLessThan(20);\\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Call Results with mock.results in JavaScript\nDESCRIPTION: Shows the structure of the `mock.results` array property on a Jest mock function. This array holds objects describing the outcome (return or throw) of each call to the mock. Each object has a `type` ('return', 'throw', or 'incomplete') and a `value` (the returned or thrown value, or undefined if incomplete).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach for Per-Test Setup in Jest (JavaScript)\nDESCRIPTION: Demonstrates the `beforeEach` hook in Jest. It runs an asynchronous setup function (clearing and inserting data into a database) before each test in the file. Jest waits for the promise to resolve before starting the test, ensuring a clean state for every test case.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock for a Class in Jest\nDESCRIPTION: Creating a manual mock in __mocks__ directory that exports both the mock constructor function and the mock method. This approach allows for reuse of mocks across multiple test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Mocks Between Tests with beforeEach in Jest\nDESCRIPTION: Using the beforeEach function to reset mock state between test runs with mockClear(). This ensures that each test starts with a clean slate and isn't affected by previous test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Callbacks with `done` in Jest (JavaScript)\nDESCRIPTION: Demonstrates the correct way to test asynchronous functions using callbacks. The test function accepts a `done` argument. Jest waits until `done()` is called before finishing the test. Error handling within a `try...catch` block passes errors to `done(error)` for proper reporting.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', done => {\n  function callback(error, data) {\n    if (error) {\n      done(error);\n      return;\n    }\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for Jest Haste Configuration\nDESCRIPTION: Provides the TypeScript type definition (`HasteConfig`) for configuring `jest-haste-map`, Jest's internal file crawler and module mapping system. It outlines various options such as `computeSha1`, `defaultPlatform`, `forceNodeFilesystemAPI`, `enableSymlinks`, `hasteImplModulePath`, `platforms`, `throwOnModuleCollision`, `hasteMapModulePath`, and `retainAllFiles` which control how Jest discovers and caches project files.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ntype HasteConfig = {\n  /** Whether to hash files using SHA-1. */\n  computeSha1?: boolean;\n  /** The platform to use as the default, e.g. 'ios'. */\n  defaultPlatform?: string | null;\n  /** Force use of Node's `fs` APIs rather than shelling out to `find` */\n  forceNodeFilesystemAPI?: boolean;\n  /**\n   * Whether to follow symlinks when crawling for files.\n   *   This options cannot be used in projects which use watchman.\n   *   Projects with `watchman` set to true will error if this option is set to true.\n   */\n  enableSymlinks?: boolean;\n  /** Path to a custom implementation of Haste. */\n  hasteImplModulePath?: string;\n  /** All platforms to target, e.g ['ios', 'android']. */\n  platforms?: Array<string>;\n  /** Whether to throw an error on module collision. */\n  throwOnModuleCollision?: boolean;\n  /** Custom HasteMap module */\n  hasteMapModulePath?: string;\n  /** Whether to retain all files, allowing e.g. search for tests in `node_modules`. */\n  retainAllFiles?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects with Jest - TypeScript\nDESCRIPTION: Defines a Jest configuration in TypeScript to run tests across multiple specified projects or folders using the 'projects' array within a strongly-typed Config object. This is exported as a module-default for TypeScript users. Requires both Jest and the appropriate TypeScript definitions. Each entry in the 'projects' array is a path or glob pattern string passed as the test root.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Testing Less Than Comparison with toBeLessThan in Jest\nDESCRIPTION: This example demonstrates using .toBeLessThan() to compare numeric values. The test verifies that the ouncesPerCan() function returns a value strictly less than 20.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is less than 20', () => {\n  expect(ouncesPerCan()).toBeLessThan(20);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jest, Babel, and React Test Renderer - Bash\nDESCRIPTION: Installs Jest, Babel/Jest integrations, Babel environment and React presets, and the react-test-renderer as development dependencies. This command prepares an existing (non-CRA) React application for Jest-based testing with Babel transpilation and snapshot rendering. Ensure these dependencies are reflected in your package.json to allow correct transformation and test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Test Suites with describe.skip.each (Array Table) in Jest (JavaScript)\nDESCRIPTION: This code demonstrates how to use describe.skip.each with an array of input arrays to skip data-driven test suites in Jest. Structures provided in the skip block are ignored during execution. Dependencies include Jest; the input is a table array and only tests outside the skipped suites are run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ndescribe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `collectCoverageFrom` in JavaScript\nDESCRIPTION: Demonstrates configuring the `collectCoverageFrom` option in a `jest.config.js` file. It uses an array of glob patterns to specify that coverage should be collected for all `.js` and `.jsx` files, while explicitly excluding files within `node_modules` and `vendor` directories. This option requires `collectCoverage` to be set to `true` or Jest to be invoked with the `--coverage` flag.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Execution with jest.advanceTimersByTime()\nDESCRIPTION: This Jest test utilizes `jest.advanceTimersByTime()` to control time progression. After enabling fake timers and calling `timerGame`, it verifies the callback hasn't run. Then, `jest.advanceTimersByTime(1000)` moves time forward by 1000 milliseconds, triggering the `setTimeout`. Finally, it asserts the callback was executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.advanceTimersByTime(1000);\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckboxWithLabel Component (TSX)\nDESCRIPTION: A React functional component `CheckboxWithLabel`. It renders a checkbox input within a label. The label text changes between `labelOn` and `labelOff` props based on the checkbox's checked state, managed using the `useState` hook.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\n\nexport default function CheckboxWithLabel({labelOn, labelOff}) {\n  const [isChecked, setIsChecked] = useState(false);\n\n  const onChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  return (\n    <label>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />\n      {isChecked ? labelOn : labelOff}\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Custom Puppeteer Setup/Teardown/Environment\nDESCRIPTION: Jest configuration (`jest.config.js`) example showing how to specify the paths to the custom scripts created for the manual Puppeteer integration. It sets `globalSetup` to './setup.js', `globalTeardown` to './teardown.js', and `testEnvironment` to './puppeteer_environment.js', effectively wiring up the custom lifecycle management with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  globalSetup: './setup.js',\n  globalTeardown: './teardown.js',\n  testEnvironment: './puppeteer_environment.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Using rootDir with transformIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: Example showing how to use the <rootDir> token with transformIgnorePatterns to ensure paths are properly resolved regardless of environment. This prevents accidental ignoring of files in different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Handling Fulfilled Promises with `async/await` and `expect().resolves` in Jest (JavaScript)\nDESCRIPTION: Demonstrates an alternative approach to testing resolved promises using `async/await` syntax within a Jest test. It uses `expect().resolves.toBe()` to check if a promise resolves to the expected value ('lemon') and `expect().resolves.not.toBe()` to assert it doesn't resolve to another value ('octopus'). Requires a Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntest('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset for React Native in package.json\nDESCRIPTION: Defines the Jest test script under `scripts` and sets the `preset` to `react-native` within the `jest` configuration block in `package.json`. This setup is automatically included when initializing React Native projects (version 0.38+) and configures Jest for React Native testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Resolver in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Jest to use a custom resolver in JavaScript. It sets the resolver option to point to a local resolver.js file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Automock in JavaScript\nDESCRIPTION: This snippet shows a Jest configuration object in JavaScript that enables the 'automock' feature, ensuring imported modules are automatically mocked. The config is exported using CommonJS syntax. Key parameter: 'automock' (boolean), controls whether Jest automatically mocks modules. Input: Jest test environment; Output: config object used by Jest runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  automock: true,\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Combining async/await with Jest `.rejects` Matcher\nDESCRIPTION: This snippet demonstrates combining `async`/`await` with the `.rejects` matcher for testing promise rejections. The `await` keyword is used before the `expect` statement to wait for the rejection assertion. Requires Babel setup for `async/await`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// Or using async/await with `.rejects`.\nit('tests error with async/await and rejects', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Setup in Jest using beforeEach (JavaScript)\nDESCRIPTION: Shows how to return a Promise from beforeEach in Jest for handling asynchronous setup logic. Here, initializeCityDatabase is assumed to return a Promise. Jest will wait for the Promise to resolve before running tests, ensuring the async setup completes. No teardown logic is included in this minimal example.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.objectContaining() in Jest Assertions (JavaScript)\nDESCRIPTION: Shows how to use expect.objectContaining() to match objects that contain specific properties. It includes an example of checking if a function is called with an object containing certain properties of specific types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\ntest('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toHaveBeenCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Name in Test Output with mockName in Jest JavaScript\nDESCRIPTION: Demonstrates how to assign a label to a mock function using mockName for improved test output readability. The snippet also shows the Jest error message that references the custom name when a call expectation is unmet. Useful for large test suites with several mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\nLANGUAGE: bash\nCODE:\n```\nexpect(mockedFunction).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n```\n\n----------------------------------------\n\nTITLE: Mocking Async Function Resolution with mockResolvedValue in Jest (JS/TS)\nDESCRIPTION: Explains how to use `mockResolvedValue` as a shorthand to make a Jest mock function return a resolved Promise with the specified value. Useful for mocking asynchronous operations within async tests. Requires a Jest mock function and is typically used within an `async` test function with `await`. Both JavaScript and TypeScript examples are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Trimmed Snapshot Matcher in JavaScript\nDESCRIPTION: Implementation of a custom snapshot matcher that trims a string to a specified length before storing it. This example shows how to leverage the existing jest-snapshot functionality in a custom matcher.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.slice(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nStored snapshot will look like:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n```\n\n----------------------------------------\n\nTITLE: Using mockRejectedValueOnce for sequential failed async mocks (TypeScript)\nDESCRIPTION: TypeScript implementation showing how to create a properly typed mock function that returns both resolved and rejected Promise values for different sequential calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Floating Point Equality with toBeCloseTo in Jest\nDESCRIPTION: Shows how to use toBeCloseTo for comparing floating point numbers to avoid issues with rounding errors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async User Data Fetching Module\nDESCRIPTION: Defines a function that fetches user data from an API endpoint and returns the user's name using promises.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport request from './request';\n\nexport function getUserName(userID) {\n  return request(`/users/${userID}`).then(user => user.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TransformIgnorePatterns with Complex Patterns in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to set up transformIgnorePatterns with multiple patterns, including a negative lookahead to exclude specific packages from being ignored during transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_100\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring displayName with Custom Color in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to configure Jest's displayName with a custom color. This example sets the name to 'CLIENT' with a blue background color using the chalk library support in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Jest Setup File with Extended Matchers\nDESCRIPTION: Example of a setup file that adds custom matchers from jest-extended library and configures afterEach hook to reset timers. This file is used with setupFilesAfterEnv configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchers = require('jest-extended');\nexpect.extend(matchers);\n\nafterEach(() => {\n  jest.useRealTimers();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async with Jest .resolves Matcher - JavaScript\nDESCRIPTION: Demonstrates concise async testing in Jest using the '.resolves' matcher, which asserts the resolution value of a Promise. The test expects user.getUserName(5) to resolve with 'Paul', verifying asynchronous outcomes cleanly. Requires Jest and access to the user module. No explicit Promise chain is needed as '.resolves' handles resolution within expect.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('works with resolves', () => {\\n  expect.assertions(1);\\n  return expect(user.getUserName(5)).resolves.toBe('Paul');\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Last Call Arguments with toHaveBeenLastCalledWith()\nDESCRIPTION: Demonstrates how to test the arguments of the last call to a mock function using toHaveBeenLastCalledWith(). The example verifies that 'mango' is the last flavor processed.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('applying to all flavors does mango last', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Exceptions with Jest's toThrow Matcher in JavaScript\nDESCRIPTION: Shows how to use Jest's \".toThrow\" matcher to test for exceptions within functions. The test covers several assertion styles, checking for any error, specific error types, string contents, and exact regular expression matches against error messages. The function under test is wrapped in another function as required by Jest for error assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Mocking Modules with jest.doMock in TypeScript\nDESCRIPTION: Shows the TypeScript equivalent of using `jest.doMock` to avoid hoisting and provide test-specific mocks. It includes the optional type argument for the module factory and uses `jest.resetModules()` for test isolation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  // The optional type argument provides typings for the module factory\n  jest.doMock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Error Handling in Jest\nDESCRIPTION: These snippets show two ways to test expected errors (promise rejections) in asynchronous Jest tests. The first test uses the promise `.catch` method to handle the rejection from `user.getUserName(2)` and asserts the error object. The second test uses `async`/`await` with a `try...catch` block; it awaits `user.getUserName(1)` inside `try`, expecting it to throw, and asserts the caught error object in the `catch` block. Both methods use `expect.assertions(1)` to ensure that the assertion within the error handling logic is reached.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Testing for async errors using Promise.catch.\nit('tests error with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(2).catch(error =>\n    expect(error).toEqual({\n      error: 'User with 2 not found.',\n    }),\n  );\n});\n\n// Or using async/await.\nit('tests error with async/await', async () => {\n  expect.assertions(1);\n  try {\n    await user.getUserName(1);\n  } catch (error) {\n    expect(error).toEqual({\n      error: 'User with 1 not found.',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Core Jest APIs in TypeScript\nDESCRIPTION: Demonstrates how to import the essential Jest APIs (`expect`, `jest`, `test`) from the `@jest/globals` package in a TypeScript file. This explicit import is necessary for Jest's TypeScript examples to work correctly, ensuring type safety and proper functionality within the testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/_TypeScriptExamplesNote.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {expect, jest, test} from '@jest/globals';\n```\n```\n\n----------------------------------------\n\nTITLE: Using Jest `.rejects` Matcher for Promise Rejection Testing\nDESCRIPTION: This test case shows the use of Jest's `.rejects` matcher for concisely testing promise rejections. It asserts that the promise returned by `user.getUserName(3)` rejects with a specific error object. The `expect` statement must be returned.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// Testing for async errors using `.rejects`.\nit('tests error with rejects', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Jest's Automatic Mock for ES6 Classes\nDESCRIPTION: This test demonstrates using jest.mock() to automatically mock the SoundPlayer class, then verifying constructor calls and method invocations on the mock instances.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Mock Function Names in Test Output with mockName in JavaScript\nDESCRIPTION: Demonstrates using `mockName(string)` to assign a descriptive name to a mock function. This name replaces the default 'jest.fn()' in test output, making failure messages easier to understand.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\n----------------------------------------\n\nTITLE: Isolating Modules Asynchronously with Jest in JavaScript\nDESCRIPTION: Demonstrates using `jest.isolateModulesAsync` to ensure fresh copies of modules are loaded for async operations within a specific scope. This is useful for testing module initialization or side effects in isolation, especially when dealing with async imports or setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nlet myModule;\nawait jest.isolateModulesAsync(async () => {\n  myModule = await import('myModule');\n  // do async stuff here\n});\n\nconst otherCopyOfMyModule = await import('myModule');\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Return Value with .toHaveReturnedWith in Jest JavaScript Tests\nDESCRIPTION: This snippet shows how to use `.toHaveReturnedWith` (or its alias `.toReturnWith`) to verify that a Jest mock function (`jest.fn()`) returned a specific value on at least one successful execution. It checks that the `drink` mock returned the value 'La Croix'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns La Croix', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Rejected Promises with mockRejectedValue in TypeScript\nDESCRIPTION: TypeScript version of mockRejectedValue usage, demonstrating type-safe mocking of async functions that always reject with a specific error.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple Resolved Promises with mockResolvedValueOnce in TypeScript\nDESCRIPTION: TypeScript version of mockResolvedValueOnce usage, showing type-safe mocking of multiple async function calls with different resolved values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Mixing Per-Call and Default Implementation with Jest Mock Functions in JavaScript\nDESCRIPTION: This snippet shows how to use both .mockImplementationOnce and .fn's default implementation in Jest. The first two calls use implementations provided by .mockImplementationOnce; subsequent ones fall back to the default implementation. Inputs are none; outputs are strings logged in call order, demonstrating mock behavior fallback patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());\n// > 'first call', 'second call', 'default', 'default'\n```\n\n----------------------------------------\n\nTITLE: Understanding mockReturnValue Shorthand in JavaScript\nDESCRIPTION: Explains that `mockFn.mockReturnValue(value)` is a Jest shorthand method. It is equivalent to setting a mock implementation that always returns the specified `value` using `jest.fn().mockImplementation(() => value)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementation(() => value);\n```\n\n----------------------------------------\n\nTITLE: Checking Class Instances with toBeInstanceOf in Jest\nDESCRIPTION: Demonstrates using the toBeInstanceOf matcher to check if an object is an instance of a specific class. Uses the JavaScript instanceof operator under the hood.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {}\n\nexpect(new A()).toBeInstanceOf(A);\nexpect(() => {}).toBeInstanceOf(Function);\nexpect(new A()).toBeInstanceOf(Function); // throws\n```\n\n----------------------------------------\n\nTITLE: Using expect.anything() in Jest Tests\nDESCRIPTION: Illustrates the use of `expect.anything()` within a Jest test. This asymmetric matcher verifies that a mock function (`mock`) was called with any single argument that is not `null` or `undefined`, useful when the exact argument value is irrelevant.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: js\nCODE:\n```\ntest('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toHaveBeenCalledWith(expect.anything());\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Greater Than Expected with Jest in JavaScript\nDESCRIPTION: Illustrates the `.toBeGreaterThan()` matcher in Jest for verifying that a received number or bigint value is strictly greater than an expected value (`received > expected`). The example tests if `ouncesPerCan()` returns a value greater than 10.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\ntest('ounces per can is more than 10', () => {\n  expect(ouncesPerCan()).toBeGreaterThan(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Ensuring Callback Assertion Execution with Jest hasAssertions - JavaScript\nDESCRIPTION: This JavaScript snippet shows the use of expect.hasAssertions() in a Jest test to verify that at least one assertion is called, often in asynchronous scenarios. It tests that prepareState invokes the callback and that validateState returns a truthy value for the given state, waiting until waitOnState resolves. Dependencies include prepareState, validateState, and waitOnState, which should be defined in the test environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('prepareState prepares a valid state', () => {\\n  expect.hasAssertions();\\n  prepareState(state => {\\n    expect(validateState(state)).toBeTruthy();\\n  });\\n  return waitOnState();\\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Mixed Promise Resolutions with mockResolvedValueOnce and mockRejectedValueOnce in TypeScript\nDESCRIPTION: TypeScript version showing how to create a type-safe mock function with varying async behavior, combining mockResolvedValueOnce and mockRejectedValueOnce.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Test Execution with Skip/Only in Jest (JavaScript)\nDESCRIPTION: Jest 16.0.0 introduced aliases for selectively running or skipping tests: `it.only`, `it.skip`, `test.only`, `test.skip`, and `xtest` (alias for `test.skip`). These allow focusing on specific tests during development or temporarily disabling broken tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nit.only\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit.skip\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.skip\n```\n\nLANGUAGE: javascript\nCODE:\n```\nxtest\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Export Conditions for Test Environment\nDESCRIPTION: Demonstrates setting the `customExportConditions` option within `testEnvironmentOptions` in `jest.config.js` and `jest.config.ts` files. This allows controlling which conditions are used when resolving package exports (e.g., setting it to `['react-native']` for a React Native environment).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_89\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    customExportConditions: ['react-native'],\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    customExportConditions: ['react-native'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Mocks Returning This Instance in Jest (JavaScript)\nDESCRIPTION: Demonstrates two equivalent ways to create a Jest mock method that always returns its own this context: via .mockReturnThis or by manual function definition. This pattern is useful for testing chainable APIs in classes or objects where method chaining is expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myObj = {\n  myMethod: jest.fn().mockReturnThis(),\n};\n\n// is the same as\n\nconst otherObj = {\n  myMethod: jest.fn(function () {\n    return this;\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Timers with jest.advanceTimersByTime in JavaScript\nDESCRIPTION: Illustrates controlling timer progress by advancing all timers by a specified duration using Jest's advanceTimersByTime. The test ensures that a callback is only called after the artificial time jump, maintaining strict control over asynchronous behavior. Requires Jest and timerGame module. Inputs: function and callback; outputs: assertion results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.advanceTimersByTime(1000);\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Call Count with `expect().toHaveBeenCalledTimes()` in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `jest.fn()` to create a mock function (`drink`) and the `.toHaveBeenCalledTimes()` matcher (alias `.toBeCalledTimes()`) to assert that the mock was called exactly a specific number of times (2 in this case) by the `drinkEach` function. Requires Jest environment and `jest.fn()`. Assumes `drinkEach` function exists.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with a Manual Mock for SoundPlayer\nDESCRIPTION: This test uses the manual mock for SoundPlayer, importing both the default export (mock constructor) and the named export (mock method) to verify interactions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping and Running Tests with Jest - JavaScript\nDESCRIPTION: Demonstrates how to use Jest's `test.skip` alongside regular tests. Shows how skipping a test preserves the code for future reference while keeping only specified tests active. No imports or dependencies are required beyond Jest. The first test will run, the second will be skipped; both take no parameters but make internal assertions about the environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Fallback Behavior with mockImplementationOnce in JavaScript\nDESCRIPTION: Demonstrates how a Jest mock function falls back to its default implementation (set via `jest.fn(implementation)` or `mockImplementation()`) after all implementations provided by chained `mockImplementationOnce()` calls have been consumed. Requires Jest (`jest.fn()`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Temporarily Changing Mock Implementation Asynchronously with withImplementation in Jest (JS)\nDESCRIPTION: Demonstrates using `withImplementation` with an asynchronous callback (a function returning a promise or `thenable`). The temporary implementation is active while the callback executes and until the returned promise resolves. The original implementation is restored afterwards. Requires a Jest mock function and `await` if the callback is async.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Floating Point Numbers with toBeCloseTo in Jest\nDESCRIPTION: Shows how to use toBeCloseTo to compare floating point numbers for approximate equality. This helps avoid precision errors common in decimal arithmetic when using exact equality comparisons.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBe(0.3); // Fails!\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Assertion Count with expect.assertions in JavaScript\nDESCRIPTION: Demonstrates using `expect.assertions(number)` in a Jest test to verify that exactly two assertions are executed within asynchronous callbacks. This ensures both callbacks (`callback1` and `callback2`) are invoked by the `doAsync` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_49\n\nLANGUAGE: js\nCODE:\n```\ntest('doAsync calls both callbacks', () => {\n  expect.assertions(2);\n  function callback1(data) {\n    expect(data).toBeTruthy();\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy();\n  }\n\n  doAsync(callback1, callback2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in Jest (JavaScript)\nDESCRIPTION: Example of setting up moduleNameMapper in Jest configuration to stub out resources like images or styles with specific modules. It demonstrates various mapping patterns including regex and file paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using withImplementation for temporary mock implementations in JavaScript\nDESCRIPTION: Demonstrates how to temporarily override a mock function's implementation during the execution of a callback, then revert to the original implementation after the callback completes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntest('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Mocks for Non-existent Modules using jest.mock (JS)\nDESCRIPTION: Illustrates how to use the `options` argument of `jest.mock` with `{ virtual: true }` to mock modules that don't actually exist in the filesystem or project structure. This is useful for mocking generated modules or native modules in environments like React Native.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\njest.mock(\n  '../moduleName',\n  () => {\n    /*\n     * Custom implementation of a module that doesn't exist in JS,\n     * like a generated module or a native module in react-native.\n     */\n  },\n  {virtual: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Fake Timers Globally in Jest (JavaScript)\nDESCRIPTION: Shows how to enable fake timers globally for all Jest tests without needing to call jest.useFakeTimers() in each test file. This configuration applies fake timers automatically to all test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Rejection with expect.rejects (async/await)\nDESCRIPTION: Shows using `async/await` with the `.rejects` modifier in Jest to test promise rejection. This approach provides a synchronous-like style for asserting that a promise rejects with a specific error message ('octopus').\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Undefined Values with toBeUndefined in Jest\nDESCRIPTION: This example shows how to use .toBeUndefined() to check that a variable or function return is specifically undefined. The test verifies that bestDrinkForFlavor('octopus') returns undefined, using a matcher that's preferred over direct comparison to undefined.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the best drink for octopus flavor is undefined', () => {\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Client for Testing\nDESCRIPTION: JavaScript code to configure the DynamoDB DocumentClient differently for test environments. When running in Jest, it connects to a local DynamoDB instance on port 8000.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/DynamoDB.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');\n\nconst isTest = process.env.JEST_WORKER_ID;\nconst config = {\n  convertEmptyValues: true,\n  ...(isTest && {\n    endpoint: 'localhost:8000',\n    sslEnabled: false,\n    region: 'local-env',\n  }),\n};\n\nconst ddb = new DocumentClient(config);\n```\n\n----------------------------------------\n\nTITLE: Using mockReturnValueOnce with Jest mocks (JavaScript)\nDESCRIPTION: Demonstrates how to use mockReturnValueOnce to specify return values for specific calls to a mock function. Successive calls can return different values based on the chain of mockReturnValueOnce calls, with mockReturnValue providing the default return value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Exporting Async Jest Configuration Function in TypeScript\nDESCRIPTION: Illustrates exporting an asynchronous function from a `jest.config.ts` file using TypeScript. The function returns a Promise resolving to a Jest configuration object, typed with `Promise<Config>`. This pattern supports dynamic configurations and requires `ts-node` to be installed. Sets `verbose` to `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nexport default async (): Promise<Config> => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Name via API Module - JavaScript\nDESCRIPTION: Implements a function that fetches a user's name from an API, relying on a 'request' module that must return a Promise resolving with a user object. The key parameter is userID, interpolated into the API endpoint. The output is a Promise resolving to the user's name as a string. This code requires the './request' dependency and expects it to return user objects with a 'name' property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport request from './request';\\n\\nexport function getUserName(userID) {\\n  return request(\\`/users/\\${userID}\\`).then(user => user.name);\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Jest Automocking in a Test (JavaScript)\nDESCRIPTION: Illustrates calling `jest.enableAutomock()` at the top of a Jest test file (`__tests__/enableAutomocking.js`). This explicitly turns on automatic mocking for the test file, causing imported modules like `../utils` to be replaced with mock implementations. The test confirms this by checking the `_isMockFunction` property on the imported methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\njest.enableAutomock();\n\nimport utils from '../utils';\n\ntest('original implementation', () => {\n  // now we have the mocked implementation,\n  expect(utils.authorize._isMockFunction).toBeTruthy();\n  expect(utils.isAuthorized._isMockFunction).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Truthiness with Various Matchers in Jest\nDESCRIPTION: Demonstrates the use of different truthiness matchers in Jest, including toBeNull, toBeDefined, toBeUndefined, toBeTruthy, and toBeFalsy. It shows examples with null and zero values.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Asserting Mock Calls via .mock Property in Jest (JavaScript)\nDESCRIPTION: Shows how to manually inspect the `.mock` property of a Jest mock function to perform assertions equivalent or more specific than the built-in custom matchers. Examples include checking call count (`mockFunc.mock.calls.length`), checking call arguments (`mockFunc.mock.calls`), accessing specific calls and arguments, and comparing calls for snapshot-like behavior. Requires a Jest environment and a mock function (`mockFunc`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// The mock function was called at least once\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n// The first arg of the last call to the mock function was `42`\n// (note that there is no sugar helper for this specific of an assertion)\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// A snapshot will check that a mock was invoked the same number of times,\n// in the same order, with the same arguments. It will also assert on the name.\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting Database Before Each Test in Jest\nDESCRIPTION: This example demonstrates using beforeEach() to reset a database before each test runs. It ensures that each test starts with a clean, consistent database state, promoting test isolation and reliability.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Module Mocking in Jest\nDESCRIPTION: Demonstrates basic module mocking using jest.mock() with an example banana module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => 'banana';\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../banana');\n\nconst banana = require('../banana'); // banana will be explicitly mocked.\n\nbanana(); // will return 'undefined' because the function is auto-mocked.\n```\n\n----------------------------------------\n\nTITLE: Using describe to Group Related Tests in Jest\nDESCRIPTION: Example showing how to use describe() to group related tests together. This helps organize tests for better readability and maintenance.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Calls and Returns\nDESCRIPTION: Demonstrates various assertions that can be made on mock functions using the .mock property.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// The function was called exactly once\nexpect(someMockFunction.mock.calls).toHaveLength(1);\n\n// The first arg of the first call to the function was 'first arg'\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toBe('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Successful Return with .toHaveReturned in Jest JavaScript Tests\nDESCRIPTION: This snippet demonstrates using `.toHaveReturned` (or its alias `.toReturn`) to verify that a Jest mock function (`jest.fn()`) returned successfully (i.e., did not throw an error) at least once. It checks that the `drink` mock, defined to return `true`, completed execution without throwing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ntest('drinks returns', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Default and Per-Call Mock Implementations in Jest with JavaScript\nDESCRIPTION: Demonstrates using jest.fn with a default implementation and chaining mockImplementationOnce to handle initial calls specially. Once the chain is exhausted, the mock falls back to the default implementation, allowing for realistic, staged mock behaviors. Requires only Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());\n// > 'first call', 'second call', 'default', 'default'\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Return Values in Jest\nDESCRIPTION: Shows how to set return values for mock functions using mockReturnValueOnce and mockReturnValue.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\n----------------------------------------\n\nTITLE: Using mockResolvedValueOnce for sequential async mocks (TypeScript)\nDESCRIPTION: TypeScript implementation of mockResolvedValueOnce showing how to create a properly typed mock function that returns different resolved Promise values for sequential calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test for DynamoDB Operations\nDESCRIPTION: JavaScript test case that demonstrates inserting an item into a DynamoDB table and then retrieving it to verify the operation was successful.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/DynamoDB.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nit('should insert item into table', async () => {\n  await ddb\n    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})\n    .promise();\n\n  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();\n\n  expect(Item).toEqual({\n    id: '1',\n    hello: 'world',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using `afterEach` for Per-Test Cleanup in Jest (JavaScript)\nDESCRIPTION: Shows the usage of the `afterEach` hook in Jest for cleaning up temporary state after each individual test finishes. This example features a global database that is cleaned after every test execution, ensuring test isolation. The hook waits for promises returned by the function to resolve.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing mockReturnValueOnce with Jest mock functions in JavaScript\nDESCRIPTION: Demonstrates how to use mockReturnValueOnce to return specific values for subsequent calls to a mock function. When no more mockReturnValueOnce values are available, the function returns to the default mockReturnValue.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock for the Request Module in JavaScript\nDESCRIPTION: This snippet (`__mocks__/request.js`) provides a manual mock for the `request.js` module. It simulates fetching user data by returning a Promise that resolves or rejects asynchronously using `process.nextTick`. It checks a predefined `users` object based on the extracted `userID` and resolves with the user data if found, otherwise rejects with an error object. This avoids network calls during testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst users = {\n  4: {name: 'Mark'},\n  5: {name: 'Paul'},\n};\n\nexport default function request(url) {\n  return new Promise((resolve, reject) => {\n    const userID = parseInt(url.slice('/users/'.length), 10);\n    process.nextTick(() =>\n      users[userID]\n        ? resolve(users[userID])\n        : reject({\n            error: `User with ${userID} not found.`,\n          }),\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline TestEnvironmentOptions in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use file-level JSDoc comments in a test file to set the test environment and supply specific test environment options, such as setting the URL in a jsdom test. It requires a Jest environment (like 'jsdom') that supports customizable options via 'testEnvironmentOptions', and assumes the file is run using Jest 28 or later. The snippet expects no input other than being placed at the top of a test file, and its output is the correct configuration of the test environment during execution. Limitations: Only applies per-file and requires compatible Jest and environment versions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2022-04-25-jest-28.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Mock Hoisting with jest.doMock (JS/TS)\nDESCRIPTION: Shows how `jest.doMock` prevents the automatic hoisting behavior associated with `jest.mock` when using `babel-jest`. This allows mocking a module differently in separate tests within the same file. It typically requires using `jest.resetModules()` in a `beforeEach` block to ensure mock isolation between tests. The TypeScript version includes an optional type argument for type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  // The optional type argument provides typings for the module factory\n  jest.doMock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Resolved Promises with Jest `.resolves` Matcher\nDESCRIPTION: This Jest test shows a more concise way to test successfully resolved promises using the `.resolves` matcher. Instead of chaining `.then`, the test uses `expect(user.getUserName(5)).resolves.toBe('Paul')`. This asserts that the promise returned by `getUserName(5)` resolves, and its resolved value is 'Paul'. The promise returned by the `expect` statement must be returned from the test. `expect.assertions(1)` ensures the assertion runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nit('works with resolves', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing 'toBeWithinRange' Matcher in Jest - TypeScript\nDESCRIPTION: Example Jest test file using the toBeWithinRange custom matcher in TypeScript. Relies on type declarations and matcher registration. Tests both numbers and asymmetric cases using expect and test from @jest/globals. Inputs are numbers and objects. Outputs: test pass or failure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_56\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Request Module in JavaScript\nDESCRIPTION: Implementation of a request module that makes HTTP requests to fetch user data. It returns a promise that resolves with the response data.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\n\nexport default function request(url) {\n  return new Promise(resolve => {\n    // This is an example of an http request, for example to fetch\n    // user data from an API.\n    // This module is being mocked in __mocks__/request.js\n    http.get({path: url}, response => {\n      let data = '';\n      response.on('data', _data => (data += _data));\n      response.on('end', () => resolve(data));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Inline Snapshot Example - TypeScript/TSX\nDESCRIPTION: Demonstrates the final form of a test with an inline snapshot. After running Jest, the snapshot value is injected directly into the source code as the first argument to toMatchInlineSnapshot. This approach keeps snapshots alongside tests for easier review and maintenance. Usage requires Jest and source code editing permissions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nit('renders correctly', () => {\\n  const tree = renderer\\n    .create(<Link page=\\\"https://example.com\\\">Example Site</Link>)\\n    .toJSON();\\n  expect(tree).toMatchInlineSnapshot(`\\n    <a\\n      className=\\\"normal\\\"\\n      href=\\\"https://example.com\\\"\\n      onMouseEnter={[Function]}\\n      onMouseLeave={[Function]}\\n    >\\n      Example Site\\n    </a>\\n  `);\\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Mock Creation Using jest.createMockFromModule - TypeScript\nDESCRIPTION: Shows how to use Jest's createMockFromModule with full TypeScript type inference for module imports. After creating the mock, the test overrides a method, verifies the correct use of mock functions, and checks expected output. Requires Jest and TypeScript for type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst {utils} =\\n  jest.createMockFromModule<typeof import('../utils')>('../utils');\\n\\nutils.isAuthorized = jest.fn((secret: string) => secret === 'not wizard');\\n\\ntest('implementation created by jest.createMockFromModule', () => {\\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\\n  expect(utils.isAuthorized('not wizard')).toBe(true);\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Implementation in TypeScript\nDESCRIPTION: Shows how to provide implementations to a mock function in TypeScript using mockImplementation(), with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Last Call Arguments with `expect().toHaveBeenLastCalledWith()` in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `jest.fn()` to create a mock function (`drink`) and the `.toHaveBeenLastCalledWith()` matcher (alias `.lastCalledWith()`) to assert that the *last* invocation of the mock function was made with a specific argument ('mango'). Requires Jest environment and `jest.fn()`. Assumes `applyToAllFlavors` function exists.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ntest('applying to all flavors does mango last', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with toBeLessThan in Jest\nDESCRIPTION: Demonstrates using the toBeLessThan matcher to check if a value is less than an expected number. Works with both regular numbers and big integers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is less than 20', () => {\n  expect(ouncesPerCan()).toBeLessThan(20);\n});\n```\n\n----------------------------------------\n\nTITLE: Combining async/await with Jest `.resolves` Matcher\nDESCRIPTION: This snippet shows how to use `async`/`await` together with the `.resolves` matcher for a concise assertion on a resolved promise. The `await` keyword is used before the `expect` statement. Requires Babel setup for `async/await`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// async/await can also be used with `.resolves`.\nit('works with async/await and resolves', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Modules in ESM with jest.unstable_mockModule\nDESCRIPTION: Demonstrates using jest.unstable_mockModule for mocking modules in ESM. This API is a work in progress but follows similar patterns to jest.mock with the requirement that the factory function must be provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ECMAScriptModules.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.unstable_mockModule('node:child_process', () => ({\n  execSync: jest.fn(),\n  // etc.\n}));\n\nconst {execSync} = await import('node:child_process');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Configuration in JSON\nDESCRIPTION: Shows how to define Jest configuration options directly within a `jest.config.json` file using standard JSON format. This example sets the `bail` option to `1` (stop after first failure) and `verbose` to `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bail\": 1,\n  \"verbose\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Partial Jest Module Mocks in JavaScript\nDESCRIPTION: Tests partial mocking of a module by creating manual overrides for the default and 'foo' exports, while keeping 'bar' as its real implementation. Illustrates how a Jest mock factory can blend original and mocked module members. It depends on a module at '../foo-bar-baz' and setup for Jest module mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n//test.js\nimport defaultExport, {bar, foo} from '../foo-bar-baz';\n\njest.mock('../foo-bar-baz', () => {\n  const originalModule = jest.requireActual('../foo-bar-baz');\n\n  //Mock the default export and named export 'foo'\n  return {\n    __esModule: true,\n    ...originalModule,\n    default: jest.fn(() => 'mocked baz'),\n    foo: 'mocked foo',\n  };\n});\n\ntest('should do a partial mock', () => {\n  const defaultExportResult = defaultExport();\n  expect(defaultExportResult).toBe('mocked baz');\n  expect(defaultExport).toHaveBeenCalled();\n\n  expect(foo).toBe('mocked foo');\n  expect(bar()).toBe('bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.objectContaining() for Partial Object Matching in Jest\nDESCRIPTION: Illustrates Jest's `expect.objectContaining(object)` matcher used with `toHaveBeenCalledWith`. It asserts that the mock function `onPress` was called with an object that contains at least the properties `x` and `y`, where `x` and `y` must be numbers (checked using `expect.any(Number)`). The received object can have additional properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_46\n\nLANGUAGE: js\nCODE:\n```\ntest('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toHaveBeenCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced coverageThreshold in Jest with Path-Specific Settings (TypeScript)\nDESCRIPTION: TypeScript implementation for configuring path-specific coverage thresholds in Jest. Specifies different coverage requirements for components (40%), reducers (90%), critical modules (100%), and a global baseline (50%) for all other files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing the `apply` Method in a Jest Watch Plugin (JavaScript)\nDESCRIPTION: This snippet illustrates the `apply` method signature within a Jest watch plugin class. This method receives `jestHooks` as an argument, allowing the plugin to attach callbacks to various Jest lifecycle events.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest from Command Line with Options\nDESCRIPTION: Example of running Jest directly from the command line with options for specific test patterns, notifications, and custom configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest my-test --notify --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for CSS Modules Mocking in JavaScript\nDESCRIPTION: This `jest.config.js` snippet updates the `moduleNameMapper` to handle CSS Modules. It maps CSS/LESS file extensions to `identity-obj-proxy`, which returns the className itself (e.g., `styles.foobar` becomes `'foobar'`). Mocking for other static assets remains the same, pointing to `fileMock.js`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing `moduleDirectories` in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to override the default module search directories in `jest.config.js` using the `moduleDirectories` option. It configures Jest to look for modules in both `node_modules` and `bower_components` when resolving imports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest File Transformer (JavaScript)\nDESCRIPTION: A custom Jest transformer implemented in JavaScript (`fileTransformer.js`). It processes any input file by implementing the synchronous `process` method, returning JavaScript code that exports the base name of the source file path as a string. This is useful for handling non-JavaScript asset imports like images, replacing the import with the filename. Requires the Node.js `path` module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CodeTransformation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// fileTransformer.js\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Spying on a Class Constructor with jest.fn and mockImplementation - Jest - JavaScript\nDESCRIPTION: Shows the use of jest.fn along with mockImplementation inside a Jest module mock factory to intercept and verify constructor calls. This approach allows checking instantiations via SoundPlayer.mock.calls. Requires importing the mocked module. Key usage: tracking constructor invocations and customizing returned instance methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Only Selected Data-Driven Tests Using Array Table in Jest (JavaScript)\nDESCRIPTION: Presents the `test.only.each` API for restricting test execution to a subset of parameterized tests defined in an array. All other tests are skipped. Useful for focused debugging of certain input combinations while leaving unrelated tests inactive. Inputs are specified as arrays and parameters correspond to function arguments. Requires Jest; works well for narrowing the execution scope.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing TypeScript Test with Jest Globals - TypeScript\nDESCRIPTION: Demonstrates writing a test in TypeScript using imported Jest globals from '@jest/globals'. The test checks if the 'sum' function correctly adds two numbers. This pattern ensures proper TypeScript typing and requires '@jest/globals' dependency and TypeScript configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport {describe, expect, test} from '@jest/globals';\nimport {sum} from './sum';\n\ndescribe('sum module', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using rootDir in transformIgnorePatterns with JavaScript\nDESCRIPTION: Example of using the <rootDir> token in transformIgnorePatterns to create paths relative to the project root directory, helping to prevent accidental ignoring of files in different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Setting workerIdleMemoryLimit in Jest (JavaScript)\nDESCRIPTION: Example of configuring workerIdleMemoryLimit in Jest to set a memory limit for worker processes. This option helps manage memory usage and can prevent issues related to worker memory consumption.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest moduleNameMapper in package.json\nDESCRIPTION: This JSON configuration shows how to use the `moduleNameMapper` option in Jest. It allows mapping module paths to different files, which is useful for stubbing modules (like images, which are mapped by default in the `react-native` preset) or resolving modules that Jest cannot find automatically. Here, `my-module.js` is mapped to a specific path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"moduleNameMapper\": {\n    \"my-module.js\": \"<rootDir>/path/to/my-module.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use jest-puppeteer Preset (JSON)\nDESCRIPTION: Configures Jest by setting the `preset` option to `\"jest-puppeteer\"` in the Jest configuration file (e.g., `jest.config.js` or `package.json`). This automatically applies the necessary setup for using Puppeteer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"jest-puppeteer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mock Naming and Snapshotting Mocks in Jest JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates improvements to Jest's mock functions. It shows how to assign a name to a mock function using `.mockName('myMock')` for better identification in test failures. It also illustrates that mock functions are now serializable, allowing them to be snapshot tested using `toMatchSnapshot()`. The snippet includes the test code and the resulting serialized snapshot output, which includes the mock's name and calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-12-18-jest-22.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('my mocking test', () => {\n  const mock = jest.fn().mockName('myMock');\n\n  mock('hello', {foo: 'bar'});\n\n  expect(mock).toMatchSnapshot();\n});\n\n// Serializes to:\n\nexports[`my mocking test 1`] = `\n[MockFunction myMock] {\n  \"calls\": Array [\n    Array [\n      \"hello\",\n      Object {\n        \"foo\": \"bar\",\n      },\n    ],\n  ],\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Promises in Jest\nDESCRIPTION: Demonstrates how to test a Promise-based async function using Jest's promise handling. The example tests if fetchData resolves to 'peanut butter'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Mock Function Last Call Example in JavaScript\nDESCRIPTION: Shows how to access the arguments of the most recent call to a mock function using the mock.lastCall property.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n['arg3', 'arg4'];\n```\n\n----------------------------------------\n\nTITLE: Testing a forEach Function with Jest Mock Functions in JavaScript\nDESCRIPTION: This test file demonstrates how to use jest's mock functions to verify the invocation behavior of a custom forEach function. It imports the forEach helper, sets up a mock callback (returns 42 + input), and asserts call counts, call parameters, and return values using Jest's expect and mock property APIs. Dependencies are the tested forEach module and Jest. The mock function tracks invocation data, enabling precise behavioral assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst forEach = require('./forEach');\n\nconst mockCallback = jest.fn(x => 42 + x);\n\ntest('forEach mock function', () => {\n  forEach([0, 1], mockCallback);\n\n  // The mock function was called twice\n  expect(mockCallback.mock.calls).toHaveLength(2);\n\n  // The first argument of the first call to the function was 0\n  expect(mockCallback.mock.calls[0][0]).toBe(0);\n\n  // The first argument of the second call to the function was 1\n  expect(mockCallback.mock.calls[1][0]).toBe(1);\n\n  // The return value of the first call to the function was 42\n  expect(mockCallback.mock.results[0].value).toBe(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mock Functions - Jest - JavaScript\nDESCRIPTION: Shows how to create mock functions with and without implementations using jest.fn(). It demonstrates asserting call history and customizing behavior of mocks. Requires Jest environment. Input: optional implementation function; Output: mock function object. Useful for simulating dependencies in unit tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled();\n\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\n```\n\n----------------------------------------\n\nTITLE: Testing DOM Manipulation with Jest and jQuery\nDESCRIPTION: A Jest test that mocks the fetchCurrentUser module and simulates a DOM environment to test jQuery-based DOM manipulation code. The test verifies that the function is called and the DOM is updated correctly after a click event.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialjQuery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\njest.mock('../fetchCurrentUser');\n\ntest('displays a user after a click', () => {\n  // Set up our document body\n  document.body.innerHTML =\n    '<div>' +\n    '  <span id=\"username\" />' +\n    '  <button id=\"button\" />' +\n    '</div>';\n\n  // This module has a side-effect\n  require('../displayUser');\n\n  const $ = require('jquery');\n  const fetchCurrentUser = require('../fetchCurrentUser');\n\n  // Tell the fetchCurrentUser mock function to automatically invoke\n  // its callback with some data\n  fetchCurrentUser.mockImplementation(cb => {\n    cb({\n      fullName: 'Johnny Cash',\n      loggedIn: true,\n    });\n  });\n\n  // Use jquery to emulate a click on our button\n  $('#button').click();\n\n  // Assert that the fetchCurrentUser function was called, and that the\n  // #username span's inner text was updated as we'd expect it to.\n  expect(fetchCurrentUser).toHaveBeenCalled();\n  expect($('#username').text()).toBe('Johnny Cash - Logged In');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Only Specific Concurrent Data-Driven Tests with Array Syntax in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates using `test.concurrent.only.each` with an array of arrays as input data. It allows running only these specific parameterized tests concurrently, while other tests in the file (like the simple `test('will not be run', ...)` example) are skipped. Each inner array provides arguments to the async test function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Timers by Advancing Time in Jest\nDESCRIPTION: A test using jest.advanceTimersByTime() to move time forward by a specific number of milliseconds. This allows precise control over the passage of time in tests and execution of pending timers.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.advanceTimersByTime(1000);\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Mock using __mocks__ Folder - JavaScript\nDESCRIPTION: Implements a manual mock for an ES6 class using jest.fn() and places it in the __mocks__ directory. Exposes both a mock method and a default mock constructor, allowing fine-grained control over behavior and inspection during tests. The exported mockPlaySoundFile enables assertion in tests against calls and parameters. Requires Jest and a standardized __mocks__ project structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import this named export into your test file:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Implementing forEach Function in JavaScript\nDESCRIPTION: Defines a forEach function that iterates over an array and calls a callback for each item.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function forEach(items, callback) {\n  for (const item of items) {\n    callback(item);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Sequencing Jest Mock Return Values in JavaScript\nDESCRIPTION: This code shows how to use .mockReturnValueOnce and .mockReturnValue for setting up a Jest mock's return sequence. It demonstrates how consecutive mock invocations yield different values (first 10, then 'x', then true) and how subsequent calls continue to return the last .mockReturnValue. Inputs/outputs are calls to myMock (no dependencies except Jest), ideal for cases where different responses are required per call during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\n----------------------------------------\n\nTITLE: Asserting Array Contents Using Jest .toContain - JavaScript\nDESCRIPTION: Demonstrates how to use Jest's .toContain matcher to assert that a given item exists in an array returned by a function. Requires Jest test runner. The test checks for strict equality of array elements (===), ensuring that 'lime' is present in the flavors array. Input is the result of getAllFlavors(), and the output is a boolean assertion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Constructor Instances with Jest expect.any in JavaScript\nDESCRIPTION: Shows how to use expect.any(Constructor) in both class instance and primitive type contexts within Jest assertions. The code defines a Cat class and demonstrates validating that functions were called with either a new instance of Cat or a number. Dependencies include Jest's fn mocking and any matcher. Inputs vary based on the function; outputs confirm expected calls with the appropriate type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Cat));\n});\n\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Number));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Truthiness with Various Matchers in Jest\nDESCRIPTION: Shows how to use different matchers for testing truthiness, including toBeNull, toBeDefined, toBeUndefined, toBeTruthy, and toBeFalsy.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Implementation with mockImplementation in TypeScript\nDESCRIPTION: TypeScript example showing the use of `mockImplementation(fn)` to set a custom, typed function body for a Jest mock function. Calls are still tracked, and the implementation can be dynamically changed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock using jest.createMockFromModule - JavaScript\nDESCRIPTION: Shows how to use jest.createMockFromModule to generate a mock module, then extends one mock function's implementation. It tests that authorize becomes a Jest mock function and that the redefined isAuthorized behaves as provided. Requires Jest and path to the real module being mocked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst utils = jest.createMockFromModule('../utils');\\n\\nutils.isAuthorized = jest.fn(secret => secret === 'not wizard');\\n\\ntest('implementation created by jest.createMockFromModule', () => {\\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\\n  expect(utils.isAuthorized('not wizard')).toBe(true);\\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering and Snapshot Testing a React Component with Jest - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates a basic snapshot test for a React Link component using Jest and react-test-renderer. It uses the test renderer to serialize the component tree and expects it to match a stored snapshot. Requires react, react-test-renderer, and Jest, and assumes Link is defined in a relative path. The key input is a React element with specific props and children; output is pass/fail depending on whether the rendered output matches the snapshot file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport renderer from 'react-test-renderer';\\nimport Link from '../Link';\\n\\nit('renders correctly', () => {\\n  const tree = renderer\\n    .create(<Link page=\\\"http://www.facebook.com\\\">Facebook</Link>)\\n    .toJSON();\\n  expect(tree).toMatchSnapshot();\\n});\n```\n\n----------------------------------------\n\nTITLE: Sharding Jest Test Suites Across Multiple Runs\nDESCRIPTION: Provides examples of using the `--shard` CLI option to divide a Jest test suite into multiple shards for parallel execution. The commands show how to run the first, second, and third shard respectively when splitting the suite into three parts (`1/3`, `2/3`, `3/3`). This requires a test sequencer that implements a `shard` method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=1/3\njest --shard=2/3\njest --shard=3/3\n```\n\n----------------------------------------\n\nTITLE: Using and Configuring Fake Timers with Jest in JavaScript\nDESCRIPTION: Shows how to enable and configure Jest's fake timers within tests using `jest.useFakeTimers`. Examples include automatically advancing timers, excluding specific APIs (`performance`) from being faked, and switching back to real timers using `jest.useRealTimers`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\ntest('advance the timers automatically', () => {\n  jest.useFakeTimers({advanceTimers: true});\n  // ...\n});\n\ntest('do not advance the timers and do not fake `performance`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n  // ...\n});\n\ntest('uninstall fake timers for the rest of tests in the file', () => {\n  jest.useRealTimers();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using .mock Property in Jest Mocks\nDESCRIPTION: Shows how to use the .mock property to track function calls, instances, and contexts in Jest mock functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\n----------------------------------------\n\nTITLE: Using and Overriding Jest Fake Timers in a Test File (JavaScript)\nDESCRIPTION: Demonstrates enabling fake timers for a specific test file using `jest.useFakeTimers()`. The first call installs fake timers using the options defined in the Jest configuration. The second call within the test overrides the configuration for that specific test and subsequent tests in the file, setting a different `timerLimit`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// install fake timers for this file using the options from Jest configuration\njest.useFakeTimers();\n\ntest('increase the limit of recursive timers for this and following tests', () => {\n  jest.useFakeTimers({timerLimit: 5000});\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Module with jest.mock() in JavaScript\nDESCRIPTION: Demonstrates how to mock a module using jest.mock() and shows the behavior of the mocked function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => 'banana';\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../banana');\n\nconst banana = require('../banana'); // banana will be explicitly mocked.\n\nbanana(); // will return 'undefined' because the function is auto-mocked.\n```\n\n----------------------------------------\n\nTITLE: Temporarily Changing Mock Implementation with withImplementation\nDESCRIPTION: Demonstrates how to use withImplementation to temporarily change the implementation of a mock function within a specific callback or async function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntest('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Tests with Template Literals and Type Inference - Jest.each TypeScript\nDESCRIPTION: Uses template literal syntax in TypeScript for defining parameterized tests via `test.each`. If all columns are of the same type, TypeScript infers argument types automatically. Requires Jest and TypeScript. Each row in the table provides the test parameters, which are destructured in the callback.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with .catch and Assertions - Jest JavaScript\nDESCRIPTION: This snippet tests promise rejection by attaching a .catch handler to fetchData(). It uses expect.assertions(1) to ensure the error handling assertion is executed, which can prevent false positives if the promise unexpectedly resolves. Jest and fetchData returning a promise are required.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(error => expect(error).toMatch('error'));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Jest Test Environment for Puppeteer\nDESCRIPTION: Custom Jest test environment (`PuppeteerEnvironment`) extending `NodeEnvironment`. During its `setup` phase, it reads the Puppeteer WebSocket endpoint from the temporary file created by the global setup script (`setup.js`), connects to the existing browser instance using `puppeteer.connect`, and makes the browser connection available globally within the test environment as `this.global.__BROWSER_GLOBAL__`. The `teardown` method ensures disconnection. Requires `puppeteer`, `fs.promises`, `os`, `path`, and `jest-environment-node`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// puppeteer_environment.js\nconst {readFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nclass PuppeteerEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config);\n  }\n\n  async setup() {\n    await super.setup();\n    // get the wsEndpoint\n    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');\n    if (!wsEndpoint) {\n      throw new Error('wsEndpoint not found');\n    }\n\n    // connect to puppeteer\n    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({\n      browserWSEndpoint: wsEndpoint,\n    });\n  }\n\n  async teardown() {\n    if (this.global.__BROWSER_GLOBAL__) {\n      this.global.__BROWSER_GLOBAL__.disconnect();\n    }\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n}\n\nmodule.exports = PuppeteerEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals for Clean Data-Driven Tests in Jest (JavaScript)\nDESCRIPTION: Illustrates parameterized tests in Jest using a tagged template literal syntax for defining structured test tables. Each table row corresponds to a test case, with variables injected in both the function arguments and test title. Requires Jest and is preferred for readable, concise test data declaration. Useful for tabular scenarios where each test requires distinct data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Object Properties with toHaveProperty in Jest\nDESCRIPTION: Demonstrates using the toHaveProperty matcher to check if properties exist at specified paths within an object. Shows both dot notation and array notation for accessing nested properties, and optionally comparing property values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Object containing house features to be tested\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n    'nice.oven': true,\n  },\n  livingroom: {\n    amenities: [\n      {\n        couch: [\n          ['large', {dimensions: [20, 20]}],\n          ['small', {dimensions: [10, 10]}],\n        ],\n      },\n    ],\n  },\n  'ceiling.height': 2,\n};\n\ntest('this house has my desired features', () => {\n  // Example Referencing\n  expect(houseForSale).toHaveProperty('bath');\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\n\n  expect(houseForSale).not.toHaveProperty('pool');\n\n  // Deep referencing using dot notation\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\n    'oven',\n    'stove',\n    'washer',\n  ]);\n\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\n\n  // Deep referencing using an array containing the keyPath\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\n  expect(houseForSale).toHaveProperty(\n    ['kitchen', 'amenities'],\n    ['oven', 'stove', 'washer'],\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\n  expect(houseForSale).toHaveProperty(\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\n    20,\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\n\n  // Referencing keys with dot in the key itself\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.anything() in Jest Assertions (JavaScript)\nDESCRIPTION: Shows how to use expect.anything() to match any non-null or non-undefined value in Jest assertions. This example demonstrates its usage within toHaveBeenCalledWith() to check if a mock function is called with a non-null argument.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\ntest('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toHaveBeenCalledWith(expect.anything());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot Test for the Link Component (TSX)\nDESCRIPTION: A Jest test suite for the `Link` component using `react-test-renderer`. It creates snapshots of the component in its initial state, after a simulated `onMouseEnter` event, and after a simulated `onMouseLeave` event. `renderer.act` is used to wrap state updates triggered by event simulation. The `toMatchSnapshot` matcher compares the rendered output against stored snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('changes the class when hovered', () => {\n  const component = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>,\n  );\n  let tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseEnter();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseLeave();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration with TypeScript\nDESCRIPTION: Example of extending Jest's default configuration values using TypeScript. It imports both the Config type and defaults from jest-config to extend the moduleFileExtensions array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\nimport {defaults} from 'jest-config';\n\nconst config: Config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Module for Mocking Examples (JS)\nDESCRIPTION: Defines a basic JavaScript module named `banana.js` that exports a function returning the string 'banana'. This module serves as the target for mocking examples in subsequent snippets.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// banana.js\nmodule.exports = () => 'banana';\n```\n\n----------------------------------------\n\nTITLE: Using Resolves/Rejects with Async/Await\nDESCRIPTION: Demonstrates using .resolves and .rejects matchers with async/await for cleaner asynchronous test syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Reporter for Jest\nDESCRIPTION: Example of creating a custom reporter for Jest. This reporter logs global config, reporter options, and context, and can force Jest to exit with a non-zero code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomReporter {\n  constructor(globalConfig, reporterOptions, reporterContext) {\n    this._globalConfig = globalConfig;\n    this._options = reporterOptions;\n    this._context = reporterContext;\n  }\n\n  onRunComplete(testContexts, results) {\n    console.log('Custom reporter output:');\n    console.log('global config:', this._globalConfig);\n    console.log('options for this reporter from Jest config:', this._options);\n    console.log('reporter context passed from test scheduler:', this._context);\n  }\n\n  // Optionally, reporters can force Jest to exit with non zero code by returning\n  // an `Error` from `getLastError()` method.\n  getLastError() {\n    if (this._shouldFail) {\n      return new Error('Custom error reported!');\n    }\n  }\n}\n\nmodule.exports = CustomReporter;\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await for Errors in Jest (JavaScript)\nDESCRIPTION: Shows how to test for expected promise rejections using `async`/`await` combined with a `try...catch` block. `expect.assertions(1)` ensures that the assertion within the `catch` block is executed, verifying that the error occurred as expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (error) {\n    expect(error).toMatch('error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Haste Configuration Type in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the `HasteConfig` type, outlining the structure and available options for configuring `jest-haste-map`, Jest's internal file crawler and cache system. Options include controlling SHA-1 hashing, setting default platforms, forcing Node.js filesystem APIs, handling symlinks, specifying custom implementations, managing module collisions, and retaining files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\ntype HasteConfig = {\n  /** Whether to hash files using SHA-1. */\n  computeSha1?: boolean;\n  /** The platform to use as the default, e.g. 'ios'. */\n  defaultPlatform?: string | null;\n  /** Force use of Node's `fs` APIs rather than shelling out to `find` */\n  forceNodeFilesystemAPI?: boolean;\n  /**\n   * Whether to follow symlinks when crawling for files.\n   *   This options cannot be used in projects which use watchman.\n   *   Projects with `watchman` set to true will error if this option is set to true.\n   */\n  enableSymlinks?: boolean;\n  /** Path to a custom implementation of Haste. */\n  hasteImplModulePath?: string;\n  /** All platforms to target, e.g ['ios', 'android']. */\n  platforms?: Array<string>;\n  /** Whether to throw an error on module collision. */\n  throwOnModuleCollision?: boolean;\n  /** Custom HasteMap module */\n  hasteMapModulePath?: string;\n  /** Whether to retain all files, allowing e.g. search for tests in `node_modules`. */\n  retainAllFiles?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Inspecting Jest Mock Function Properties for Assertions - JavaScript\nDESCRIPTION: This snippet shows how to directly inspect properties of Jest mock functions, such as .mock.calls and .getMockName, to perform detailed assertions on mock call counts, argument values, call order, and naming. These expressions are alternatives to built-in matchers and are useful for more granular or custom assertions. Prerequisites include Jest testing environment and a mock function instance. Inputs include mock arguments; outputs are assertion pass/fail. This technique is constrained to Jest's testing scope.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n// The first arg of the last call to the mock function was `42`\n// (note that there is no sugar helper for this specific of an assertion)\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// A snapshot will check that a mock was invoked the same number of times,\n// in the same order, with the same arguments. It will also assert on the name.\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Key to the Watch Menu with getUsageInfo() (JavaScript)\nDESCRIPTION: This snippet implements the `getUsageInfo` method in a Jest watch plugin, enabling the plugin to add a custom key and prompt to the Jest watch mode menu. It returns an object with a single-character `key` and a descriptive `prompt`, defining how the new command will appear. The method enables interactive user actions and informs users of available custom shortcuts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  getUsageInfo(globalConfig) {\n    return {\n      key: 's',\n      prompt: 'do something',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exclusive Test Suite with describe.only\nDESCRIPTION: Shows how to use describe.only to run only specific test suites while skipping others. Useful for debugging specific test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Constructor Instances with mock.instances in Jest JavaScript\nDESCRIPTION: Demonstrates how mock.instances can be used to capture and compare the different instances constructed via a Jest mock function. This enables tests to validate if objects returned from 'new' calls correspond to expected references. Requires Jest and an understanding of how JavaScript handles constructor instances in mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n----------------------------------------\n\nTITLE: Testing Length Property with toHaveLength in Jest\nDESCRIPTION: This example demonstrates how to use the .toHaveLength() matcher to check that an object has a .length property set to a specific numeric value. The examples test the length of arrays and strings, showing both positive matches and negative assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing mockResolvedValueOnce for sequential async responses in JavaScript\nDESCRIPTION: Demonstrates how to configure an async mock to return different Promise values for sequential calls, before falling back to a default value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Tests with Tagged Template Literals - Jest - JavaScript\nDESCRIPTION: Shows how to define parameterized tests using test.each with tagged template literal syntax for structured tabular data. Requires Jest. Each row is mapped to test data, and $variable placeholders in the description are replaced with test data properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Using async/await with .rejects Modifier in Jest JavaScript Tests\nDESCRIPTION: This snippet demonstrates using `async/await` syntax with the `.rejects` modifier for testing rejected promises. It awaits the result of `expect(...).rejects` before applying the `.toThrow` matcher, offering an alternative way to handle asynchronous rejection tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Partially Mocking a JavaScript Module in Jest\nDESCRIPTION: This Jest test demonstrates partial mocking of the `foo-bar-baz` module. It uses `jest.mock` with a factory function that first requires the actual module using `jest.requireActual`. It then returns a new object spreading the original module but overriding the `default` export and the named export `foo` with mocks (`jest.fn()` and a string, respectively). The test verifies that the mocked exports return the mocked values while the unmocked export `bar` retains its original functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n//test.js\nimport defaultExport, {bar, foo} from '../foo-bar-baz';\n\njest.mock('../foo-bar-baz', () => {\n  const originalModule = jest.requireActual('../foo-bar-baz');\n\n  //Mock the default export and named export 'foo'\n  return {\n    __esModule: true,\n    ...originalModule,\n    default: jest.fn(() => 'mocked baz'),\n    foo: 'mocked foo',\n  };\n});\n\ntest('should do a partial mock', () => {\n  const defaultExportResult = defaultExport();\n  expect(defaultExportResult).toBe('mocked baz');\n  expect(defaultExport).toHaveBeenCalled();\n\n  expect(foo).toBe('mocked foo');\n  expect(bar()).toBe('bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Property Existence and Value with Jest in JavaScript\nDESCRIPTION: Demonstrates the `.toHaveProperty()` matcher in Jest to check for the existence of a property at a given `keyPath` within an object. It supports checking deeply nested properties using dot notation or an array of keys. An optional `value` argument allows for deep equality comparison of the property's value. The example tests various properties, including nested ones and those with dots in their keys, within a `houseForSale` object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// Object containing house features to be tested\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n    'nice.oven': true,\n  },\n  livingroom: {\n    amenities: [\n      {\n        couch: [\n          ['large', {dimensions: [20, 20]}],\n          ['small', {dimensions: [10, 10]}],\n        ],\n      },\n    ],\n  },\n  'ceiling.height': 2,\n};\n\ntest('this house has my desired features', () => {\n  // Example Referencing\n  expect(houseForSale).toHaveProperty('bath');\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\n\n  expect(houseForSale).not.toHaveProperty('pool');\n\n  // Deep referencing using dot notation\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\n    'oven',\n    'stove',\n    'washer',\n  ]);\n\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\n\n  // Deep referencing using an array containing the keyPath\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\n  expect(houseForSale).toHaveProperty(\n    ['kitchen', 'amenities'],\n    ['oven', 'stove', 'washer'],\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\n  expect(houseForSale).toHaveProperty(\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\n    20,\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\n\n  // Referencing keys with dot in the key itself\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.only to Run a Single Test Block in JavaScript\nDESCRIPTION: Example of using describe.only to run only a specific describe block while skipping others. This is useful for focusing on a particular test suite during development or debugging.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Matchers with expect.stringMatching in arrayContaining in JavaScript\nDESCRIPTION: Demonstrates advanced matcher composition by combining expect.stringMatching with arrayContaining. The test describes how to assert that elements in an array match specified string patterns or regular expressions, allowing for flexible and partial matching strategies. Jest is required; inputs are arrays and expressions; outputs confirm patterns exist within the array values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Module with a Factory Function using jest.mock in JavaScript\nDESCRIPTION: Illustrates using the second argument (`factory`) of `jest.mock` to provide a custom implementation for the mocked module. Here, the factory returns a `jest.fn()` that returns the value `42`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for React Link Component - TypeScript/JSX\nDESCRIPTION: Defines a Jest test that mounts the Link component, simulates mouse enter/leave events, and asserts that the snapshot output matches the expected rendering at each state. Uses react-test-renderer for rendering and simulating user interactions. This test checks both styling and event handler binding through snapshot outputs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport renderer from 'react-test-renderer';\\nimport Link from '../Link';\\n\\nit('changes the class when hovered', () => {\\n  const component = renderer.create(\\n    <Link page=\\\"http://www.facebook.com\\\">Facebook</Link>,\\n  );\\n  let tree = component.toJSON();\\n  expect(tree).toMatchSnapshot();\\n\\n  // manually trigger the callback\\n  renderer.act(() => {\\n    tree.props.onMouseEnter();\\n  });\\n  // re-rendering\\n  tree = component.toJSON();\\n  expect(tree).toMatchSnapshot();\\n\\n  // manually trigger the callback\\n  renderer.act(() => {\\n    tree.props.onMouseLeave();\\n  });\\n  // re-rendering\\n  tree = component.toJSON();\\n  expect(tree).toMatchSnapshot();\\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Parameterized Tests with Each Modifier and Array Table in Jest (JavaScript)\nDESCRIPTION: Explains usage of test.each with an array table to run the same test logic for multiple inputs. Each inner array supplies parameters a, b, and expected for addition tests. Enables DRY test code and provides dynamically generated test titles. No asynchronous code by default; expects synchronous expect assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting describe() Blocks for Hierarchical Test Organization in Jest\nDESCRIPTION: This example illustrates how to nest describe() blocks to create a hierarchy of tests. It shows a test suite for a binary string to number conversion function, with separate describe blocks for valid and invalid inputs.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: ESLint Config for Jest Globals in Test Files - JSON\nDESCRIPTION: Provides an ESLint override configuration instructing ESLint to recognize Jest's globals in files matching 'tests/**/*'. Prevents no-undef errors when using Jest in test files. Intended for inclusion within a larger ESLint config.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"env\": {\n        \"jest\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test with Manual Puppeteer Setup (JavaScript)\nDESCRIPTION: Shows an example Jest test (`test.js`) using the manual Puppeteer setup. It accesses the browser instance via `globalThis.__BROWSER_GLOBAL__` (made available by the custom environment), creates a new page (`newPage()`) in `beforeAll`, navigates to Google, and uses `page.evaluate` to run code in the browser context for an assertion. A timeout is specified for the test suite.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// test.js\nconst timeout = 5000;\n\ndescribe(\n  '/ (Home Page)',\n  () => {\n    let page;\n    beforeAll(async () => {\n      page = await globalThis.__BROWSER_GLOBAL__.newPage();\n      await page.goto('https://google.com');\n    }, timeout);\n\n    it('should load without error', async () => {\n      const text = await page.evaluate(() => document.body.textContent);\n      expect(text).toContain('google');\n    });\n  },\n  timeout,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Class for Mocking in TypeScript\nDESCRIPTION: Provides the definition of a simple TypeScript class `SomeClass` with a typed `method`. This class serves as the target for mocking in the subsequent example demonstrating how to mock a class constructor using `mockImplementation` in a TypeScript context.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Less Than Expected with Jest in JavaScript\nDESCRIPTION: Demonstrates the `.toBeLessThan()` matcher in Jest for checking if a received number or bigint value is strictly less than an expected value (`received < expected`). The example tests if `ouncesPerCan()` returns a value less than 20.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\ntest('ounces per can is less than 20', () => {\n  expect(ouncesPerCan()).toBeLessThan(20);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Volume Equality with Custom Tester in Jest - JavaScript\nDESCRIPTION: This test code demonstrates using the registered areVolumesEqual custom tester in Jest to check that two Volume instances with different units are considered equal. It uses the expect and test APIs from @jest/globals, and requires that the Volume class and areVolumesEqual tester be correctly imported. The test expects new Volume(1, 'L') and new Volume(1000, 'mL') to be regarded as equal.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {expect, test} from '@jest/globals';\\nimport {Volume} from '../Volume.js';\\nimport '../areVolumesEqual.js';\\n\\ntest('are equal with different units', () => {\\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Properties with `expect().toBe()` in Jest (JavaScript)\nDESCRIPTION: Demonstrates using the `.toBe()` matcher within a Jest `describe` block to test primitive properties (`ounces`, `name`) of an object (`can`). `.toBe` uses `Object.is` for comparison, checking for strict equality for primitives and referential identity for objects. Requires a Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('the can', () => {\n  test('has 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('has a sophisticated name', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing File Summarizer with Manual fs Mock - Jest JavaScript\nDESCRIPTION: Shows a Jest test suite for a module that summarizes files in a directory, utilizing a manual mock for the `fs` module. The test explicitly requires the mock, configures the mock file system before each run using `__setMockFiles`, and asserts the result of the directory summarizer. Dependencies include both the manual mock (`fs`) and the target module (`FileSummarizer`). Inputs are directory paths; output is validated via Jest's assertion helpers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\njest.mock('fs');\\n\\ndescribe('listFilesInDirectorySync', () => {\\n  const MOCK_FILE_INFO = {\\n    '/path/to/file1.js': 'console.log(\"file1 contents\");',\\n    '/path/to/file2.txt': 'file2 contents',\\n  };\\n\\n  beforeEach(() => {\\n    // Set up some mocked out file info before each test\\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\\n  });\\n\\n  test('includes all files in the directory in the summary', () => {\\n    const FileSummarizer = require('../FileSummarizer');\\n    const fileSummary =\\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\\n\\n    expect(fileSummary.length).toBe(2);\\n  });\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Using withImplementation for temporary mock implementations\nDESCRIPTION: Demonstrates how to use withImplementation to temporarily change the implementation of a mock function during the execution of a callback, after which the original implementation is restored.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntest('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TransformIgnorePatterns for pnpm in Jest (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to configure transformIgnorePatterns when using pnpm package manager, accounting for its unique node_modules structure with symlinks to the .pnpm directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_103\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative pattern to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Automock with Jest Configuration - TypeScript\nDESCRIPTION: Defines the Jest configuration in TypeScript, setting automock to true. This enables Jest's automatic mocking for imports. The example uses type import for Config from 'jest' and exports the configuration as the default export, suitable for use in jest.config.ts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  automock: true,\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Basic Test Case Example\nDESCRIPTION: Shows a simple test case using the test function. Demonstrates basic assertion using expect.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntest('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Variable is Defined with Jest in JavaScript\nDESCRIPTION: Shows the use of the `.toBeDefined()` matcher in Jest to assert that a variable or function return value is not `undefined`. It provides an example checking the result of a hypothetical `fetchNewFlavorIdea()` function. Using `.toBeDefined()` is preferred over `expect(...).not.toBe(undefined)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\ntest('there is a new flavor idea', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking as React Function Component (No Warnings) - JavaScript\nDESCRIPTION: Mocks a module by returning a simple function component that renders a string. This avoids React's warnings about uppercase HTML-like tags. Use this pattern if you do not need to inspect passed props closely, and want to suppress React element type warnings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\njest.mock('./SomeComponent', () => () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Fallback to default implementation after mockImplementationOnce - Jest - JavaScript\nDESCRIPTION: Shows how .mockImplementationOnce can be used in conjunction with a default implementation, allowing a Jest mock to have a series of unique behaviors before falling back to a reusable default. This technique supports tests where the first few calls should behave specially. Inputs are function calls; the outputs demonstrate first-call and subsequent-call values. Requires Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Mocking ES6 Modules with Default Exports using jest.mock (JS)\nDESCRIPTION: Explains how to mock ES6 modules that use `export default`. The factory function must return an object with `__esModule: true` and a `default` property representing the default export, along with any named exports (like `foo`). This allows correct mocking of both default and named imports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport moduleName, {foo} from '../moduleName';\n\njest.mock('../moduleName', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => 42),\n    foo: jest.fn(() => 43),\n  };\n});\n\nmoduleName(); // Will return 42\nfoo(); // Will return 43\n```\n\n----------------------------------------\n\nTITLE: Naming mock functions for diagnostics - Jest - JavaScript\nDESCRIPTION: Shows the use of mockFn.mockName to assign a custom name to a Jest mock function, which improves test output and diagnostics. The code demonstrates naming the mock, invoking it, and using Jest's expect assertions. This is particularly useful in complex test suites with many mocks to distinguish functions in error messages.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Promises in Jest\nDESCRIPTION: This Jest test case demonstrates testing the `getUserName` function using standard Promise chaining (`.then`). It mocks the `../request` module, calls `getUserName(4)`, and asserts that the promise resolves to 'Mark'. The test function must return the promise chain, and `expect.assertions(1)` ensures the assertion inside `.then` is executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../request');\n\nimport * as user from '../user';\n\n// The assertion for a promise must be returned.\nit('works with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(4).then(data => expect(data).toBe('Mark'));\n});\n```\n\n----------------------------------------\n\nTITLE: Negating Assertions with `expect().not.toBe()` in Jest (JavaScript)\nDESCRIPTION: Shows how to use the `.not` modifier chainable with `expect()` to invert the subsequent matcher. This example uses `.not.toBe()` in a Jest test to assert that the result of `bestLaCroixFlavor()` is *not* strictly equal to the string 'coconut'. Requires a Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntest('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n```\n\n----------------------------------------\n\nTITLE: Validating configurations with jest-validate\nDESCRIPTION: This example demonstrates using the validate function from jest-validate to check user-provided configurations against expected formats, returning validation results and deprecation warnings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Dynamic Imports in Jest and Webpack (.babelrc JSON)\nDESCRIPTION: This .babelrc JSON example shows how to add 'syntax-dynamic-import' and 'dynamic-import-node' plugins to allow Babel and Jest to handle ES2020 dynamic import syntax. Under the 'test' environment, 'dynamic-import-node' transforms dynamic imports for use in Node.js. Requires the related Babel plugins as dev dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"plugins\": [\"syntax-dynamic-import\"],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"dynamic-import-node\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Last Mock Call Arguments with .toHaveBeenLastCalledWith in Jest JavaScript Tests\nDESCRIPTION: This snippet demonstrates using `.toHaveBeenLastCalledWith` (or its alias `.lastCalledWith`) to assert the arguments passed during the most recent call to a Jest mock function (`jest.fn()`). It tests that the last flavor processed by `applyToAllFlavors` was 'mango'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ntest('applying to all flavors does mango last', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger Launch for Create React App\nDESCRIPTION: Provides a VS Code `launch.json` configuration specifically for debugging Jest tests within a Create React App (CRA) project. It uses `react-scripts test` as the runtime executable and passes appropriate arguments like `--runInBand` and `--no-cache` for debugging purposes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",\n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\",\n        \"--watchAll=false\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Mock Return Values with mockReturnValue in TypeScript\nDESCRIPTION: TypeScript example showing the use of `mockReturnValue(value)` to specify a fixed return value for a typed mock function. Each invocation of the mock will yield the last set value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Testing Truthiness and Falsiness with Jest in JavaScript\nDESCRIPTION: Demonstrates various Jest matchers for evaluating null, undefined, defined, truthy, and falsy values. Two separate tests illustrate the behavior for both null and zero, showing precise ways to assert value states using Jest's built-in helpers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers Using Jest Matchers in JavaScript Tests\nDESCRIPTION: This snippet demonstrates various numerical comparisons in Jest tests using matchers such as `toBeGreaterThan`, `toBeGreaterThanOrEqual`, `toBeLessThan`, `toBeLessThanOrEqual`, `toBe`, and `toEqual`. It asserts that `2 + 2` meets the expected numerical constraints. Jest is needed for running the tests; the test is parameterless with no return values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Unmocked Response Constructor (JavaScript)\nDESCRIPTION: Demonstrates how to use Jest's 'jest.requireActual' helper to import the unmocked 'Response' class from 'node-fetch', avoiding problems caused by mocking. This change enables tests that rely on instance methods (like 'text()') of the real Response class. Should be used in contexts where both a mocked and non-mocked portion of a module are required. Requires Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/BypassingModuleMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// BEFORE\\njest.mock('node-fetch');\\nimport fetch, {Response} from 'node-fetch';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AFTER\\njest.mock('node-fetch');\\nimport fetch from 'node-fetch';\\nconst {Response} = jest.requireActual('node-fetch');\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Ignore Patterns (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to set transformIgnorePatterns to exclude specific node_modules paths from transformation. This demonstrates a pattern that can cause conflicts by overlapping exclusions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_80\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component Snapshot Test in TypeScript\nDESCRIPTION: This snippet demonstrates a basic snapshot test for a React 'Link' component using Jest and 'react-test-renderer'. It renders the component, generates a serializable JSON representation using `.toJSON()`, and then uses `expect(tree).toMatchSnapshot()` to compare this output against a stored snapshot file. If no snapshot exists, one is created; otherwise, the new output is compared to the existing one.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Component Resulting in Warnings (JavaScript)\nDESCRIPTION: Demonstrates a common way to mock a React component using `jest.mock`. This specific approach, which mocks the component module to a simple string, can cause warnings in React 16+ when used with Enzyme snapshot testing because the string ('SomeComponent') is not a valid HTML tag or React component type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Chaining Methods with `.mockReturnThis()` Sugar in JavaScript\nDESCRIPTION: This snippet shows the use of `.mockReturnThis()` as a shorthand for creating mock methods designed for chaining. Calling `.mockReturnThis()` on a mock function makes it return its `this` context upon invocation, facilitating tests involving fluent interfaces or method chaining.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObj = {\n  myMethod: jest.fn().mockReturnThis(),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Async Jest Configuration in JavaScript\nDESCRIPTION: Example of a Jest configuration file in JavaScript that exports an async function returning a configuration object. This is useful when configuration needs to be generated asynchronously.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @returns {Promise<import('jest').Config>} */\nmodule.exports = async () => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring extensionsToTreatAsEsm in Jest (JavaScript)\nDESCRIPTION: Shows how to configure Jest to treat additional file extensions as ECMAScript Modules. This example specifies that TypeScript files (.ts) should be processed as ESM.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Fallback to Default Implementation in JavaScript\nDESCRIPTION: Shows how a mock function falls back to the default implementation after executing all implementations set with mockImplementationOnce().\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Using mockImplementation to Replace Mock Behavior in Tests\nDESCRIPTION: This test demonstrates how to replace a mock implementation for specific test scenarios by using mockImplementation() instead of defining the mock behavior in jest.mock().\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('When SoundPlayer throws an error', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Test error');\n        },\n      };\n    });\n  });\n\n  it('Should throw an error when calling playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Inequality with expect.not.toBe in JavaScript\nDESCRIPTION: Shows how to use the `.not` modifier with the `toBe` matcher in Jest to assert that a value is *not* equal to a specific value. This example checks that the result of `bestLaCroixFlavor()` is not 'coconut'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntest('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals for Custom Test Environments - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import Jest's global helpers (`expect`, `jest`, `test`) manually from '@jest/globals' when the `--injectGlobals` flag is disabled. It is intended for custom setups or non-default test runners. The main dependency is the '@jest/globals' package. Expected input is a test case, output is test result with mocked timers. This illustration is required for projects not relying on auto-injection of global symbols.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Testing Class Instances with toBeInstanceOf in Jest\nDESCRIPTION: This example demonstrates using .toBeInstanceOf() to check if an object is an instance of a specific class. The matcher uses JavaScript's instanceof operator under the hood to perform the type checking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {}\n\nexpect(new A()).toBeInstanceOf(A);\nexpect(() => {}).toBeInstanceOf(Function);\nexpect(new A()).toBeInstanceOf(Function); // throws\n```\n\n----------------------------------------\n\nTITLE: Using a Manual Mock in Jest Tests - JavaScript\nDESCRIPTION: Shows how to import and use manual mocks in Jest test files. It demonstrates clearing mock state before each test and verifying constructor and method invocations using Jest's matcher functions. Assumes the mock is exported from __mocks__/sound-player.js and that Jest's automocking is in place for ./sound-player.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Assert Greater Than Comparison with toBeGreaterThan in Jest - JavaScript\nDESCRIPTION: This snippet shows the use of `.toBeGreaterThan` matcher to assert that a numeric or bigint value is greater than a specified threshold. It can be applied to numbers returned by functions or variables. Dependency: Jest. Parameters: received (number or bigint) and expected (number or bigint), returns assertion result.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('ounces per can is more than 10', () => {\\n  expect(ouncesPerCan()).toBeGreaterThan(10);\\n});\n```\n\n----------------------------------------\n\nTITLE: Negated String Containment with expect.not.stringContaining in JavaScript\nDESCRIPTION: Shows how to use expect.not.stringContaining to verify that a string does not contain a specific substring (or is not a string at all). The code uses Jest's describe/it blocks for organization and exemplifies inverse assertions on string data. Main input is the string to check; output is test pass/fail based on the absence of the substring.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('not.stringContaining', () => {\n  const expected = 'Hello world!';\n\n  it('matches if the received value does not contain the expected substring', () => {\n    expect('How are you?').toEqual(expect.not.stringContaining(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Equality Tester in JavaScript\nDESCRIPTION: Defines a function `areVolumesEqual` that acts as a custom equality tester for `Volume` instances (defined in `Volume.js`). It checks if both arguments are `Volume` instances and uses their `equals` method. If types don't match as expected, it returns `undefined` to delegate to other testers or `false`. It registers this tester using `expect.addEqualityTesters`. Requires the `Volume` class and `@jest/globals`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_52\n\nLANGUAGE: js\nCODE:\n```\nimport {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a, b) {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume === isBVolume) {\n    // Let Jest's default equality testers handle comparison of non-Volumes or two Volumes\n    return undefined;\n  } else {\n    // If one is a Volume and the other isn't, they're not equal\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Containment in Arrays with Jest - JavaScript\nDESCRIPTION: This snippet shows how to use the .toContainEqual matcher in Jest to check for the existence of an object with a certain structure and values in an array. Unlike .toContain, it performs a recursive deep comparison of fields. myBeverages() should return an array of objects. Dependencies include Jest. Key parameters are the object to search for. Inputs are the array from myBeverages(); the output is a test pass if a deeply equal item is found.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mock Function Implementation with `jest.fn` in JavaScript\nDESCRIPTION: This snippet shows how to create a Jest mock function with a specific implementation provided directly to `jest.fn`. The implementation takes a callback `cb` and immediately calls it with `null` and `true`. The subsequent line demonstrates calling this mock function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest.fn(cb => cb(null, true));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Functions with Jest\nDESCRIPTION: Shows how to create and use mock functions using jest.fn(). Includes examples of basic mocking and implementing mock return values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled();\n\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Test Timeout\nDESCRIPTION: Demonstrates how to increase the default timeout for Jest tests using `jest.setTimeout()`. This is useful for tests that perform long-running operations. The example sets the timeout to 10,000 milliseconds (10 seconds). This function should be called within the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.setTimeout(10_000); // 10 second timeout\n```\n\n----------------------------------------\n\nTITLE: Asserting Falsy Values with toBeFalsy in Jest - JavaScript\nDESCRIPTION: This snippet demonstrates using `.toBeFalsy` matcher in Jest to assert that a value evaluates to false in a boolean context. The example includes application code with a function which may produce a range of falsy values. Dependency: Jest. Useful for checking return values that could be `false`, `0`, `null`, or similar.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('drinking La Croix does not lead to errors', () => {\\n  drinkSomeLaCroix();\\n  expect(getErrors()).toBeFalsy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a Jest Custom Matcher\nDESCRIPTION: Shows the minimal structure required for implementing a custom Jest matcher with expect.extend(). The matcher should return an object with pass and message properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.extend({\n  yourMatcher(x, y, z) {\n    return {\n      pass: true,\n      message: () => '',\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.resetModules() to Isolate Module State in JavaScript\nDESCRIPTION: Shows how to use jest.resetModules() to reset the module registry and isolate module state between tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('works', () => {\n  const sum = require('../sum');\n});\n\ntest('works too', () => {\n  const sum = require('../sum');\n  // sum is a different copy of the sum module from the previous test.\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.each with Tagged Template Literals in Jest (JavaScript)\nDESCRIPTION: Demonstrates parameterizing a Jest test suite using `describe.each` with a tagged template literal. The first row defines variable names (`a`, `b`, `expected`), and subsequent rows provide data using `${value}` syntax. Values like `$a` and `$b` are injected into the suite title, and the data object (`{a, b, expected}`) is passed to the test function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ndescribe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.doMock() for Different Mocks in the Same File\nDESCRIPTION: Demonstrates how to use jest.doMock() to mock a module differently within the same file, avoiding automatic hoisting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using toStrictEqual Matcher in Jest\nDESCRIPTION: Shows how toStrictEqual performs strict type and structure checking between objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nclass LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('the La Croix cans on my desk', () => {\n  test('are not semantically the same', () => {\n    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});\n    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Infinite Recursive Timer-based Game Module in JavaScript\nDESCRIPTION: Implements a function that prints a start message, sets a 1-second timeout after which it prints another message, invokes a callback, and then recursively schedules another game after 10 seconds. The recursion supports infinite games via timers. No external dependencies required except for Node.js. It is suitable for demonstrating complex timer scenarios and recursive timing logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction infiniteTimerGame(callback) {\n  console.log('Ready....go!');\n\n  setTimeout(() => {\n    console.log(\"Time's up! 10 seconds before the next game starts...\");\n    callback && callback();\n\n    // Schedule the next game in 10 seconds\n    setTimeout(() => {\n      infiniteTimerGame(callback);\n    }, 10000);\n  }, 1000);\n}\n\nmodule.exports = infiniteTimerGame;\n```\n\n----------------------------------------\n\nTITLE: Testing Method Calls with Jest.spyOn - JavaScript\nDESCRIPTION: A test suite for verifying function call tracking with jest.spyOn. Demonstrates spying on a module's method, asserting call count, and restoring mocks after tests with jest.restoreAllMocks. Dependencies: Jest, a module exporting a play() method. Inputs: None (uses direct method call). Outputs: Boolean assertions on spy and return value. Highlights standard afterEach usage for mock cleanup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n  const isPlaying = video.play();\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Exploring describe Block and Test Execution Order in Jest - JavaScript\nDESCRIPTION: Demonstrates the execution sequence of describe and test blocks with console.log to reveal how describe handlers run before tests and the serial order of test execution. Useful for understanding when to place side-effect code versus setup logic in test suites. Intended for Jest and Node.js.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('describe outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n\n    test('test 1', () => console.log('test 1'));\n  });\n\n  console.log('describe outer-b');\n\n  test('test 2', () => console.log('test 2'));\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n\n    test('test 3', () => console.log('test 3'));\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test 1\n// test 2\n// test 3\n```\n\n----------------------------------------\n\nTITLE: Assert Greater Than or Equal Comparison with toBeGreaterThanOrEqual in Jest - JavaScript\nDESCRIPTION: This code demonstrates the use of Jest's `.toBeGreaterThanOrEqual` matcher to check that a numeric or bigint value is at least a certain value. The test calls a function and asserts the result meets the minimum requirement. Dependencies: Jest. Inputs are numbers or bigints; output is assertion pass/fail.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('ounces per can is at least 12', () => {\\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\\n});\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Inline Table of Arrays in Jest (TypeScript)\nDESCRIPTION: Demonstrates parameterized tests in Jest using an inline array of arrays, suitable for concise test data. TypeScript infers argument types automatically when the table is inlined. The test receives plain arguments, each correctly inferred. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing mockResolvedValue for async functions in JavaScript\nDESCRIPTION: Shows how to create a mock that returns a resolved Promise with a specified value, useful for testing async functions that return Promises.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring Actual Module Implementation While Mocking with jest.requireActual in JavaScript\nDESCRIPTION: Illustrates how to access the real (unmocked) implementation of a module inside a jest.mock factory using jest.requireActual. This approach allows selectively overriding some exports (such as getRandom) with mock functions while preserving the original module for others. Requires Jest; supports CommonJS modules and ES Modules (if __esModule property is set).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule = jest.requireActual('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Mocks with jest.mock() in JavaScript\nDESCRIPTION: Shows how to create virtual mocks for modules that don't exist in the system using jest.mock() with the virtual option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\n  '../moduleName',\n  () => {\n    /*\n     * Custom implementation of a module that doesn't exist in JS,\n     * like a generated module or a native module in react-native.\n     */\n  },\n  {virtual: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Objects with Getters and Setters for Spying - Jest - JavaScript\nDESCRIPTION: Creates two modules: one with a property getter (video) and another with both getter and setter (audio), to demonstrate spying on accessors. The exported symbols are objects with either getter-only or getter/setter properties. Used as test targets for spying in Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst video = {\n  // it's a getter!\n  get play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n\nconst audio = {\n  _volume: false,\n  // it's a setter!\n  set volume(value) {\n    this._volume = value;\n  },\n  get volume() {\n    return this._volume;\n  },\n};\n\nmodule.exports = audio;\n```\n\n----------------------------------------\n\nTITLE: Initializing an Inline Snapshot Test in TypeScript\nDESCRIPTION: This example shows how to initiate an inline snapshot test. Instead of creating a separate '.snap' file, calling `.toMatchInlineSnapshot()` without arguments signals Jest to evaluate the received value (`tree`) and write the snapshot directly back into the test file as an argument to this function on the next run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Negating Assertions with .not Modifier in Jest JavaScript Tests\nDESCRIPTION: This snippet shows how to use the `.not` modifier in Jest to assert the opposite condition. It tests that the value returned by `bestLaCroixFlavor()` is *not* equal to 'coconut' using `expect(...).not.toBe(...)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntest('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring custom snapshot serializers in Jest (JavaScript)\nDESCRIPTION: Example of adding a custom snapshot serializer to Jest configuration using the snapshotSerializers option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Exporting a Simple Module in JavaScript\nDESCRIPTION: Defines a simple Node.js module that exports a function returning the string 'banana'. This module serves as a target for mocking in subsequent examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = () => 'banana';\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Reporters in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet sets up the 'coverageReporters' property in a Jest configuration using types for type-safety. It illustrates specifying multiple reporting formats, using tuples for options, and exporting the config for Jest to consume. Requires a TypeScript environment with Jest type definitions. Inputs are the config properties; output is the reporting formats written during coverage collection.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions to Treat as ESM in Jest (JavaScript)\nDESCRIPTION: Configures Jest to treat files with the `.ts` extension as ECMAScript Modules using the `extensionsToTreatAsEsm` array in a Jest configuration file (CommonJS). This is necessary when using native ESM for file types other than the defaults (`.mjs`, `.js` with `type: \"module\"`). Note that Jest's ESM support is experimental.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Driven Tests with Array of Arrays in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates the basic usage of `test.each` with an array of arrays (`table`). Each inner array represents a test case, passing its elements as arguments to the test function (`fn`). The test title uses printf-style formatting (`%i`) to include the input values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll for Global Setup in Jest (JavaScript)\nDESCRIPTION: Shows the `beforeAll` hook in Jest for setting up shared state before any tests run. This example performs asynchronous database initialization (clearing and inserting data), and Jest waits for the returned promise to resolve before executing tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Last Return Value of Mock Functions with toHaveLastReturnedWith in Jest\nDESCRIPTION: Demonstrates how to use the toHaveLastReturnedWith matcher to test the specific value that a mock function last returned. The example creates a mock function that returns beverage names and verifies the last returned value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drink returns La Croix (Orange) last', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Test Suites with `each`.describe in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates using Jest's `each` with a tagged template literal to define a parameterized test suite using `.describe`. The template literal defines column headings (`a`, `b`, `expected`) and rows of data. The `describe` function receives the interpolated test name ('$a + $b') and a suite function. The suite function receives an object with properties corresponding to the column headings for each data row and contains individual `test` cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Automatic ES6 Class Mocking in Jest\nDESCRIPTION: Demonstrates how to use Jest's automatic mocking feature by calling `jest.mock('./sound-player')`. The test verifies that the `SoundPlayer` constructor and its `playSoundFile` method are called correctly by the `SoundPlayerConsumer`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Driven Tests with Array of Objects in Jest (JavaScript)\nDESCRIPTION: This snippet shows `test.each` used with an array of objects. Each object represents a test case, and its properties are passed to the test function (`fn`) via object destructuring. The test title uses dollar-prefixed variable names (`$a`, `$b`) to inject object property values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\ntest.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Database After Each Test in Jest\nDESCRIPTION: This example shows how to use afterEach() to clean up a database after each individual test. It ensures that the database is reset to a clean state before each test runs, maintaining test isolation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Variable is Undefined with Jest in JavaScript\nDESCRIPTION: Shows the use of the `.toBeUndefined()` matcher in Jest to assert that a variable or function return value is strictly `undefined`. It provides an example checking the result of `bestDrinkForFlavor('octopus')`. Using `.toBeUndefined()` is preferred over `expect(...).toBe(undefined)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\ntest('the best drink for octopus flavor is undefined', () => {\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized Tests with `each`.test in Jest (JavaScript)\nDESCRIPTION: This snippet illustrates how to use Jest's `each` with a tagged template literal to create multiple parameterized tests using `.test`. A data table with columns `a`, `b`, and `expected` is defined within the template literal. The `.test` function takes a title string where `$variable` syntax injects data values, and a test function that receives an object containing the data for each row (`{a, b, expected}`). Each row generates a separate test case.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Jest Object in ESM using JavaScript\nDESCRIPTION: Shows two methods for accessing the Jest global object within an ECMAScript Module context. The first method imports `jest` directly from the `@jest/globals` package. The second, alternative method accesses it via `import.meta.jest`. Both methods allow interaction with Jest's API, such as `useFakeTimers`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ECMAScriptModules.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.useFakeTimers();\n\n// etc.\n\n// alternatively\nimport.meta.jest.useFakeTimers();\n\n// jest === import.meta.jest => true\n```\n\n----------------------------------------\n\nTITLE: Mocking a Class Constructor with mockImplementation in TypeScript\nDESCRIPTION: Shows how to mock a TypeScript class using `jest.mock` and `jest.mocked(...).mockImplementation`. This allows defining the behavior of the constructor and returning an object with mocked methods for instances created via `new SomeClass()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Testing Expected Failures with test.failing in Jest\nDESCRIPTION: Demonstrates the use of test.failing for writing tests that are expected to fail. This method is useful for BDD approaches and contributing failing tests to projects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntest.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Preset-env Using .babelrc in JSON\nDESCRIPTION: Specifies Babel configuration in .babelrc using the @babel/preset-env preset to transpile code for Jest-compatible syntax. Input is source JavaScript; output is transformed code. @babel/preset-env must be installed as a dev dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Mock Implementations with mockImplementationOnce in TypeScript\nDESCRIPTION: TypeScript example demonstrating `mockImplementationOnce(fn)` to set temporary, typed implementations for a mock function. Each call consumes one `mockImplementationOnce`, allowing different results for sequential invocations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Accessing Mock Function Call Arguments Example in JavaScript\nDESCRIPTION: Demonstrates how to access the call arguments of a mock function using the mock.calls property, which stores all arguments from each invocation in a nested array.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n----------------------------------------\n\nTITLE: Using afterEach for Test Teardown in Jest (JavaScript)\nDESCRIPTION: Shows the afterEach hook to perform cleanup logic after each test's execution, helping prevent cross-test contamination. Requires an initialized global database and uses Jest's standard test structure. After every test, cleanUpDatabase is called, ensuring consistent state for subsequent tests. Inputs and outputs align with Jest's async or callback test conventions, and it should be placed at the file or describe block level to control scope.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with Various Matchers in Jest\nDESCRIPTION: Shows how to use different number comparison matchers in Jest, including toBeGreaterThan, toBeGreaterThanOrEqual, toBeLessThan, toBeLessThanOrEqual, toBe, and toEqual for numbers.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with a Manual Jest ES6 Class Mock in JavaScript\nDESCRIPTION: Shows how to use the previously defined manual mock (`__mocks__/sound-player.js`) in a test file. It imports the default export (the mock constructor) as `SoundPlayer` and the named export `mockPlaySoundFile`. `jest.mock('./sound-player')` ensures the manual mock is used. Tests verify constructor calls on `SoundPlayer` and method calls using the imported `mockPlaySoundFile` mock function. Mocks are cleared in `beforeEach`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"sound-player-consumer.test.js\"\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Restoring Real Timers in afterEach - Jest - JavaScript\nDESCRIPTION: Demonstrates best practice for always restoring real timer APIs after tests when using jest.useFakeTimers. Input: afterEach cleanup block and various test uses. Output: Ensures test isolation and prevents timer leaks across tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nafterEach(() => {\n  jest.useRealTimers();\n});\n\ntest('do something with fake timers', () => {\n  jest.useFakeTimers();\n  // ...\n});\n\ntest('do something with real timers', () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Object and Array Structure with Jest .toMatchObject - JavaScript\nDESCRIPTION: Shows how to check that an object or an array of objects matches a subset of expected properties using Jest's .toMatchObject. Requires Jest and demonstrates flexible matching with asymmetric matchers for properties and array-level structural assertions. Inputs are objects or arrays, outputs are validations on subset matching and element correspondence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('the house has my desired features', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('toMatchObject applied to arrays', () => {\n  test('the number of elements must match exactly', () => {\n    expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);\n  });\n\n  test('.toMatchObject is called for each elements, so extra object properties are okay', () => {\n    expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([\n      {foo: 'bar'},\n      {baz: 1},\n    ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating Async Modules - Jest - JavaScript\nDESCRIPTION: Demonstrates using Jest's isolateModulesAsync to dynamically import and test modules in isolation, supporting asynchronous operations within the provided callback. Requires Jest as a test environment, and the code must run inside an async test or setup. The snippet imports 'myModule' inside isolation and shows how a separately imported 'myModule' will yield a different module instance. Inputs: an async callback; Outputs: isolated module context. Ensure you 'await' the operation because it returns a Promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nlet myModule;\nawait jest.isolateModulesAsync(async () => {\n  myModule = await import('myModule');\n  // do async stuff here\n});\n\nconst otherCopyOfMyModule = await import('myModule');\n```\n\n----------------------------------------\n\nTITLE: Using Snapshot Property Matchers in Jest (JavaScript)\nDESCRIPTION: Demonstrates using property matchers within `toMatchSnapshot` to verify the structure of generated values like Dates and IDs, rather than matching the exact values. This leads to more consistent snapshot testing across different test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage of snapshot property matchers\n\nexpect(myObject).toMatchSnapshot({\n  createdAt: expect.any(Date),\n  id: expect.any(Number),\n});\n\n// Snapshot will serialize the matcher type, e.g.:\n// exports[`Thing snapshot 1`] = `\n// Object {\n//   \"createdAt\": Any<Date>,\n//   \"id\": Any<Number>,\n//   \"name\": \"Thing\",\n// }\n// `; \n```\n\n----------------------------------------\n\nTITLE: Testing with Rejects Matcher\nDESCRIPTION: Demonstrates using Jest's .rejects matcher for testing rejected promises and error conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Testing for async errors using `.rejects`.\nit('tests error with rejects', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n\n// Or using async/await with `.rejects`.\nit('tests error with async/await and rejects', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Timer-Based Function in JavaScript\nDESCRIPTION: This snippet defines a JavaScript function `timerGame` that takes an optional callback. It logs a start message and uses `setTimeout` to delay the execution of another log message and the callback invocation by 1000 milliseconds (1 second). The function is then exported using `module.exports`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\n----------------------------------------\n\nTITLE: Checking Object Length with toHaveLength in Jest\nDESCRIPTION: Demonstrates using the toHaveLength matcher to check that an object has a .length property set to a specific value. Works with arrays and strings to verify their size.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Fake Timers with Specific Options (JavaScript/TypeScript)\nDESCRIPTION: Sets default fake timer options in the Jest configuration file. This example specifies that `process.nextTick()` should not be faked and sets a limit of 1000 for recursive timers. This configuration will be used by default when `jest.useFakeTimers()` is called without arguments in a test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Transformer by Extending babel-jest\nDESCRIPTION: This example demonstrates how to create a custom transformer by extending babel-jest with custom configuration options. It uses babel-jest's createTransformer method to apply a custom preset.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst babelJest = require('babel-jest');\n\nmodule.exports = babelJest.createTransformer({\n  presets: ['my-custom-preset'],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting forceCoverageMatch in Jest Config - JavaScript\nDESCRIPTION: Shows how to configure Jest's 'forceCoverageMatch' option to include files matching a specific pattern (here, '*.t.js') in code coverage collection. The configuration is exported as a CommonJS module. Requires the 'jest' package and is suitable for Node.js environments; the key parameter is 'forceCoverageMatch', which determines file globbing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Object is Instance of Class with Jest in JavaScript\nDESCRIPTION: Shows how to use the `.toBeInstanceOf()` matcher in Jest to check if an object is an instance of a given class. This matcher internally uses the `instanceof` operator. The example demonstrates checking instances of a custom class `A` and the built-in `Function` class.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nclass A {}\n\nexpect(new A()).toBeInstanceOf(A);\nexpect(() => {}).toBeInstanceOf(Function);\nexpect(new A()).toBeInstanceOf(Function); // throws\n```\n\n----------------------------------------\n\nTITLE: Testing Negated Matchers with Jest in JavaScript\nDESCRIPTION: Illustrates use of the \".not\" modifier in Jest assertions to verify the opposite of default matcher behavior. This snippet asserts that adding two positive numbers will never result in zero within the tested range using nested loops.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions using Jest in JavaScript\nDESCRIPTION: Demonstrates Jest's \".toMatch\" matcher for string comparisons against regular expressions within tests. The snippets check for missing and present substrings or patterns in string values, providing examples of both negative and positive matches.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Null with Jest in JavaScript\nDESCRIPTION: Demonstrates the `.toBeNull()` matcher in Jest, which is a more readable equivalent of `.toBe(null)`. It's used specifically to check if a value is strictly `null`. The example shows testing a function `bloop` that returns `null`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nfunction bloop() {\n  return null;\n}\n\ntest('bloop returns null', () => {\n  expect(bloop()).toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Snapshot Tests with React Test Renderer in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to write a snapshot test in Jest using the react-test-renderer package. It creates a React element with specified props, renders it, and then asserts that the rendered output matches the saved snapshot. Dependencies include jest, react, and react-test-renderer. The key parameter is the React element being tested, and the output is whether or not the rendered tree matches the previous snapshot. Requires codebase setup for Jest and React; does not handle non-serializable output or asynchronous rendering.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-07-27-jest-14.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport renderer from 'react-test-renderer';\ntest('Link renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Jest Mock for an ES6 Class in JavaScript\nDESCRIPTION: Defines a manual mock for the `SoundPlayer` class, intended to be saved as `__mocks__/sound-player.js`. It exports a Jest mock function (`jest.fn()`) as the default export, simulating the class constructor. This mock constructor returns an object containing a mock implementation for the `playSoundFile` method (`mockPlaySoundFile`), which is also exported as a named constant for assertion purposes in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"__mocks__/sound-player.js\"\n// Import this named export into your test file:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module (JavaScript)\nDESCRIPTION: Exports a simple JavaScript object (`utils.js`) with an `authorize` method that returns a static token. This module serves as a basic dependency used in subsequent examples to demonstrate Jest's mocking capabilities, specifically how `jest.disableAutomock()` affects its import.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example Error Message for Reserved Key Conflict\nDESCRIPTION: Displays a sample error message shown by Jest when a custom watch plugin attempts to register a key (e.g., 'q') that is reserved for internal Jest functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\nWatch plugin YourFaultyPlugin attempted to register key `q`, that is reserved internally for quitting watch mode. Please change the configuration key for this plugin.\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing Jest DOM Environment\nDESCRIPTION: Command to install the jest-environment-jsdom package, which provides a simulated DOM environment for testing jQuery and other DOM manipulation code without a browser.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialjQuery.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Serializing Object with Custom Indentation using prettyFormat (JavaScript)\nDESCRIPTION: Runs prettyFormat on the sample object with the custom plugin and specifies a 4-space indentation for improved readability. Shows how the 'indent' option affects output, increasing indentation for each level, as seen in the comment. Dependencies include prettyFormat, val, the plugin, and 'indent' config. Output is a deeply formatted string reflecting the specified indentation, enabling readable serialization for nested data.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using New Hoisted `jest.unmock` with ES2015 `import` in JavaScript\nDESCRIPTION: This snippet demonstrates the new `jest.unmock` API introduced in Jest 11. When used with `babel-jest`, calls to `jest.unmock` are automatically hoisted above ES2015 `import` statements, correctly unmocking the module before it's imported.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-04-12-jest-11.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\njest.unmock('LikeButton');\nimport LikeButton from 'LikeButton'; // LikeButton is properly unmocked!\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration in the Constructor\nDESCRIPTION: Shows how a Jest watch plugin class constructor receives the custom configuration object (provided in `jest.config.js`) as an argument within an object, typically destructured as `{ config }`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  constructor({config}) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using expect.any() in Jest Assertions (JavaScript)\nDESCRIPTION: Demonstrates the usage of expect.any() to match values created with a specific constructor or of a specific primitive type. It includes examples of checking for class instances and primitive number types in function calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nclass Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Cat));\n});\n\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Number));\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test for sum.js - JavaScript\nDESCRIPTION: Imports the 'sum' function and verifies its output using Jest's 'test' and 'expect' APIs. Relies on Jest being installed and the sum.js file being present. The test checks that sum(1, 2) returns 3. It is to be placed in a file named 'sum.test.js' and will be automatically detected and run by Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Structures with jest-diff in JavaScript\nDESCRIPTION: This example illustrates using the `diff` function from the `jest-diff` package to compare two JavaScript objects (`a` and `b`). It requires the `jest-diff` package and prints a human-readable string highlighting the differences between the two objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Using jest.Replaced<Source> utility type for property replacement in TypeScript\nDESCRIPTION: Demonstrates how to use the jest.Replaced utility type to ensure proper typing when replacing and restoring object properties in tests, maintaining type safety throughout the test lifecycle.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isLocalhost(): boolean {\n  return process.env['HOSTNAME'] === 'localhost';\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Selective Faking of Timer Functions in Jest\nDESCRIPTION: Demonstrates how to selectively exclude certain APIs from being faked by Jest. This example shows how to provide a custom mock for performance.mark() while using fake timers for other functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nconst mockPerformanceMark = jest.fn();\nwindow.performance.mark = mockPerformanceMark;\n\ntest('allows mocking `performance.mark()`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n\n  expect(window.performance.mark).toBe(mockPerformanceMark);\n});\n```\n\n----------------------------------------\n\nTITLE: Using mockRejectedValueOnce for sequential failed async mocks (JavaScript)\nDESCRIPTION: Shows how to create a mock function that returns both resolved and rejected Promise values for different sequential calls using mockResolvedValueOnce and mockRejectedValueOnce.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Using rootDir in transformIgnorePatterns in JavaScript\nDESCRIPTION: Example of using the <rootDir> token in transformIgnorePatterns to ensure paths are resolved relative to the project root directory, preventing accidental ignoring of files in different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_81\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using Inline Snapshots in Jest React Tests (TypeScript)\nDESCRIPTION: This code illustrates how to use Jest's .toMatchInlineSnapshot() to store the snapshot value within the test source. It renders a React Link component to JSON and expects it to match an inline snapshot, which Jest auto-generates and injects as a string argument on first run. Requires react-test-renderer, Jest, and the tested component. Key parameter is the JSX tree. Input is a React element structure; output is pass/fail based on snapshot string in test source.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot();\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot(`\n    <a\n      className=\"normal\"\n      href=\"https://example.com\"\n      onMouseEnter={[Function]}\n      onMouseLeave={[Function]}\n    >\n      Example Site\n    </a>\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Jest Snapshot Path Resolver - JavaScript\nDESCRIPTION: This JavaScript CommonJS module exports a custom resolver object for Jest to map between test file paths and snapshot file paths. It provides resolveSnapshotPath and resolveTestPath functions, as well as a test path consistency check. This allows tests and snapshots to reside in parallel directory structures as required by project conventions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // resolves from test to snapshot path\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('__tests__', '__snapshots__') + snapshotExtension,\n\n  // resolves from snapshot to test path\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    snapshotFilePath\n      .replace('__snapshots__', '__tests__')\n      .slice(0, -snapshotExtension.length),\n\n  // Example test path, used for preflight consistency check of the implementation above\n  testPathForConsistencyCheck: 'some/__tests__/example.test.js',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Style Mock File in JavaScript\nDESCRIPTION: This snippet shows the content of `__mocks__/styleMock.js`. It exports an empty object, serving as a basic mock for CSS or LESS modules when imported in Jest tests. This prevents errors and allows components rendering styles to be tested without processing actual CSS.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {};\n```\n\n----------------------------------------\n\nTITLE: Testing Last Return Value with toHaveLastReturnedWith in Jest\nDESCRIPTION: This example demonstrates how to use the .toHaveLastReturnedWith() matcher to verify that a mock function's last call returned a specific value. The test creates a mock drink function that returns the name of a beverage and verifies its last return value matches the expected string.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drink returns La Croix (Orange) last', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Non-Default Class Exports in Jest\nDESCRIPTION: Example showing how to mock a class that is exported as a named export rather than a default export. The mock factory must return an object with the same named export.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Reporter in Jest (TypeScript)\nDESCRIPTION: Example of configuring the GitHub Actions Reporter in Jest using TypeScript. This reporter annotates changed files with test failure messages and prints logs with GitHub group features.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing node-notifier for Jest Notifications via npm/yarn\nDESCRIPTION: Shows the command to install the `node-notifier` package as a development dependency using npm. This package is required by Jest to display native OS notifications for test results when the `notify` configuration option is set to `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev node-notifier\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots via Command Line (Bash)\nDESCRIPTION: This snippet provides the command-line instruction to tell Jest to regenerate snapshot files for any tests where the snapshot assertion failed. Running `jest --updateSnapshot` or the shorthand `jest -u` will update the corresponding `.snap` files with the latest rendered output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --updateSnapshot\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Transformer using @babel/core\nDESCRIPTION: Defines a custom Jest transformer (`custom-transformer.js`) using `@babel/core` directly. It exports a `process` function that takes source code (`src`) and filename, transforms it using `@babel/core` with the `babel-preset-jest` preset, and returns the transformed code. Requires installing `@babel/core` and `babel-preset-jest`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst {transform} = require('@babel/core');\nconst jestPreset = require('babel-preset-jest');\n\nmodule.exports = {\n  process(src, filename) {\n    const result = transform(src, {\n      filename,\n      presets: [jestPreset],\n    });\n\n    return result || src;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Watch Plugin Interface in JavaScript\nDESCRIPTION: The basic structure of a Jest watch plugin with the three main methods: apply (for hooks), getUsageInfo (for menu prompts), and run (for execution).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  // Add hooks to Jest lifecycle events\n  apply(jestHooks) {}\n\n  // Get the prompt information for interactive plugins\n  getUsageInfo(globalConfig) {}\n\n  // Executed when the key from `getUsageInfo` is input\n  run(globalConfig, updateConfigAndRun) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Snapshot Test for a React Native Component (TSX)\nDESCRIPTION: Demonstrates a Jest snapshot test for the `Intro` React Native component using `react-test-renderer`. The test imports the component, renders it using `renderer.create()`, converts the output to a JSON representation with `.toJSON()`, and then uses `expect(tree).toMatchSnapshot()` to compare it against a stored snapshot file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Intro from '../Intro';\n\ntest('renders correctly', () => {\n  const tree = renderer.create(<Intro />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Property Matchers and Exact Values in Jest Snapshots (JavaScript)\nDESCRIPTION: This snippet demonstrates that property matchers can be combined with exact value checks within the object passed to `toMatchSnapshot`. Here, `createdAt` uses a matcher (`expect.any(Date)`) while `name` is checked for an exact string value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the values and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    name: 'Bond... James Bond',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    name: 'Bond... James Bond',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mock Return Value using mockImplementation in JavaScript\nDESCRIPTION: Illustrates the explicit `mockImplementation` code equivalent to the `mockReturnValue(value)` shorthand. It creates a mock function that consistently returns the specified `value`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementation(() => value);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Native Component in TypeScript (TSX)\nDESCRIPTION: This TSX code defines a simple functional React Native component named `Intro`. It renders a `View` containing two `Text` components with basic styling applied using `StyleSheet.create`. This component is used as an example for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nclass Intro extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n        <Text style={styles.instructions}>\n          This is a React Native snapshot test.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  instructions: {\n    color: '#333333',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  welcome: {\n    fontSize: 20,\n    margin: 10,\n    textAlign: 'center',\n  },\n});\n\nexport default Intro;\n```\n\n----------------------------------------\n\nTITLE: Chaining Single-Call Return Values with `mockReturnValueOnce` (JavaScript)\nDESCRIPTION: Demonstrates chaining `mockReturnValueOnce` to specify different return values for successive calls to a Jest mock function. Once the `mockReturnValueOnce` values are exhausted, subsequent calls return the value set by `mockReturnValue`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Testing Mock Function Calls with toHaveBeenCalled()\nDESCRIPTION: Shows how to test if a mock function was called or not called using toHaveBeenCalled(). The example uses jest.fn() to create a mock function and tests its invocation based on different conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('drinks something lemon-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('does not drink something octopus-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Mocking API Calls with Axios and Jest in JavaScript\nDESCRIPTION: Defines a Users class with a static method 'all' that fetches user data from an API using axios and returns the resolved data. The code snippet requires axios as a dependency and demonstrates a pattern where real HTTP requests are abstracted for easier mocking in tests. Exports the Users class as the default.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\nexport default Users;\n```\n\n----------------------------------------\n\nTITLE: Running Tests Concurrently with test.concurrent in Jest (JavaScript)\nDESCRIPTION: Demonstrates the experimental `test.concurrent` feature (aliased as `it.concurrent`) for running tests in parallel. It takes a test name, an async function containing expectations, and an optional timeout. This can speed up test execution for I/O-bound or independent tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Order of beforeEach and afterEach Hooks in Jest - JavaScript\nDESCRIPTION: Shows how hooking multiple beforeEach and afterEach handlers enables dependency-aware setup and teardown. Demonstrates that outer afterEach hooks are called before inner afterEach hooks. Useful for managing order-sensitive resource allocation and disposal in complex test suites. Requires Jest, Node.js, and console access for logging.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => console.log('connection setup'));\nbeforeEach(() => console.log('database setup'));\n\nafterEach(() => console.log('database teardown'));\nafterEach(() => console.log('connection teardown'));\n\ntest('test 1', () => console.log('test 1'));\n\ndescribe('extra', () => {\n  beforeEach(() => console.log('extra database setup'));\n  afterEach(() => console.log('extra database teardown'));\n\n  test('test 2', () => console.log('test 2'));\n});\n\n// connection setup\n// database setup\n// test 1\n// database teardown\n// connection teardown\n\n// connection setup\n// database setup\n// extra database setup\n// test 2\n// extra database teardown\n// database teardown\n// connection teardown\n```\n\n----------------------------------------\n\nTITLE: Asserting Last Return Value of Mock Function with Jest - JavaScript\nDESCRIPTION: This snippet illustrates using Jest's `.toHaveLastReturnedWith` matcher to assert that a mock function's last return value matches an expected value. It demonstrates creating a mock function with `jest.fn`, invoking it with different arguments, and checking the output of the final call. Required dependency: Jest. Key parameters include the mock function being checked and the value expected from the last call; test will fail if the last call throws.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('drink returns La Croix (Orange) last', () => {\\n  const beverage1 = {name: 'La Croix (Lemon)'};\\n  const beverage2 = {name: 'La Croix (Orange)'};\\n  const drink = jest.fn(beverage => beverage.name);\\n\\n  drink(beverage1);\\n  drink(beverage2);\\n\\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a React Component for Jest Testing\nDESCRIPTION: Example of how to mock a React component in Jest tests, with various approaches to handle React 16+ warnings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Jest after* Hook Order for Jasmine2 Runner Compatibility (Diff)\nDESCRIPTION: Highlights a difference in behavior with the `jasmine2` test runner, where `after*` hooks are called in the reverse order of declaration. This diff shows how to modify the `afterEach` hook definitions to achieve the same teardown sequence as the default Jest runner when using `jasmine2`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  beforeEach(() => console.log('connection setup'));\n+ afterEach(() => console.log('connection teardown'));\n\n  beforeEach(() => console.log('database setup'));\n+ afterEach(() => console.log('database teardown'));\n\n- afterEach(() => console.log('database teardown'));\n- afterEach(() => console.log('connection teardown'));\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Running Only Specific Concurrent Data-Driven Tests with Template Literal Syntax in Jest (JavaScript)\nDESCRIPTION: This snippet showcases `test.concurrent.only.each` using a tagged template literal for defining test data. It focuses execution on these specific concurrent tests, defined with named parameters (`a`, `b`, `expected`). Other tests in the file are ignored. The test function receives an object with these parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Async Module Isolation in Jest\nDESCRIPTION: Example of using jest.isolateModulesAsync for scoped initialization of async modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait jest.isolateModulesAsync(async () => {\n  const module = await import('./asyncModule');\n  // Test with isolated module scope\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing mockRejectedValue for simulating Promise rejections in JavaScript\nDESCRIPTION: Shows how to create an async mock function that always rejects with a specified error, useful for testing error handling in async code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Tests with Arrays and Objects - Jest - JavaScript\nDESCRIPTION: Illustrates how to create parameterized tests using test.each with both arrays and object patterns. Requires Jest and basic understanding of test.each. Allows injecting data directly into the test title and function parameters, making repeated test logic concise and readable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating Module State Between Tests using jest.resetModules (JS)\nDESCRIPTION: Shows a common pattern of calling `jest.resetModules()` within a `beforeEach` block in a test suite. This ensures that each test (`test`) runs with a fresh instance of any required modules (like `../sum`), preventing state pollution or interference between tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('works', () => {\n  const sum = require('../sum');\n});\n\ntest('works too', () => {\n  const sum = require('../sum');\n  // sum is a different copy of the sum module from the previous test.\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach for Setup Before Each Test in Jest\nDESCRIPTION: Example showing how to use beforeEach() to reset a database before each test runs. This ensures each test has a fresh environment with the same initial conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.requireActual to Bypass Mock for Specific Exports in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates the corrected 'after' state for imports when dealing with module mocks in Jest. While `node-fetch` is still mocked globally, `fetch` (the default export) is imported normally, receiving the mock. However, the `Response` class is obtained by calling `jest.requireActual('node-fetch')` and destructuring the result. This ensures the test uses the actual, non-mocked `Response` class, resolving the TypeError from the previous example.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/BypassingModuleMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// AFTER\njest.mock('node-fetch');\nimport fetch from 'node-fetch';\nconst {Response} = jest.requireActual('node-fetch');\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting NaN Values with toBeNaN in Jest - JavaScript\nDESCRIPTION: This snippet shows how to use `.toBeNaN` matcher in Jest to check that a value is precisely `NaN` (Not-a-Number). It demonstrates both positive and negative use cases to assert correct handling. Dependency: Jest. Inputs can be any JavaScript value; assertion only passes if value is strictly `NaN`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('passes when value is NaN', () => {\\n  expect(NaN).toBeNaN();\\n  expect(1).not.toBeNaN();\\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Date.now() for Deterministic Snapshot Testing in JavaScript\nDESCRIPTION: This snippet demonstrates how to mock the Date.now() method to return a consistent value, ensuring that snapshots generated from components using this method are deterministic across test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Jest Matcher `toBeWithinRange` (TypeScript)\nDESCRIPTION: Implements the `toBeWithinRange` custom Jest matcher using TypeScript, ensuring type safety. It uses the `MatcherFunction` type from `expect` for the function signature, performs runtime type validation, and returns the standard matcher result object. This example also demonstrates embedding the TypeScript declaration augmentation directly within the implementation file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_62\n\nLANGUAGE: ts\nCODE:\n```\n```ts tab={\\\"span\\\":2} title=\\\"toBeWithinRange.ts\\\"\nimport {expect} from '@jest/globals';\nimport type {MatcherFunction} from 'expect';\n\nconst toBeWithinRange: MatcherFunction<[floor: unknown, ceiling: unknown]> =\n  // `floor` and `ceiling` get types from the line above\n  // it is recommended to type them as `unknown` and to validate the values\n  function (actual, floor, ceiling) {\n    if (\n      typeof actual !== 'number' ||\n      typeof floor !== 'number' ||\n      typeof ceiling !== 'number'\n    ) {\n      throw new TypeError('These must be of type number!');\n    }\n\n    const pass = actual >= floor && actual <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          // `this` context will have correct typings\n          `expected ${this.utils.printReceived(\n            actual,\n          )} not to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${this.utils.printReceived(\n            actual,\n          )} to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: false,\n      };\n    }\n  };\n\nexpect.extend({\n  toBeWithinRange,\n});\n\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Async Resolution with mockImplementation in Jest (JS)\nDESCRIPTION: Shows the underlying implementation shorthand for `mockResolvedValue(value)`. It uses `mockImplementation` with a function that returns a `Promise.resolve(value)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Tests with test.skip in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to use `test.skip` to temporarily disable a specific test case without deleting the code. This is useful for temporarily broken tests. The skipped test will not be executed by the test runner but maintains syntax highlighting and indentation. Aliases `it.skip`, `xit`, and `xtest` provide the same functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\ntest('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Hoverable Link Component - React (TypeScript/JSX)\nDESCRIPTION: Implements a functional React Link component that switches its class upon mouse enter/leave events. Uses the useState hook to track hover state and renders an anchor element with controllable CSS class and href. Expects props: page (destination URL) and children (anchor contents). Designed for snapshot testing of UI interactions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\\n\\nconst STATUS = {\\n  HOVERED: 'hovered',\\n  NORMAL: 'normal',\\n};\\n\\nexport default function Link({page, children}) {\\n  const [status, setStatus] = useState(STATUS.NORMAL);\\n\\n  const onMouseEnter = () => {\\n    setStatus(STATUS.HOVERED);\\n  };\\n\\n  const onMouseLeave = () => {\\n    setStatus(STATUS.NORMAL);\\n  };\\n\\n  return (\\n    <a\\n      className={status}\\n      href={page || '#'}\\n      onMouseEnter={onMouseEnter}\\n      onMouseLeave={onMouseLeave}\\n    >\\n      {children}\\n    </a>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Jest\nDESCRIPTION: Creates a basic Babel configuration file that targets the current Node environment for Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Object Properties for Testing - Jest - JavaScript\nDESCRIPTION: Illustrates defining a utility module with a method depending on process environment variables. This code provides the target for subsequent property replacement in tests. Requires Node.js and CommonJS modules. Output: An exported object with isLocalhost() method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst utils = {\n  isLocalhost() {\n    return process.env.HOSTNAME === 'localhost';\n  },\n};\n\nmodule.exports = utils;\n```\n\n----------------------------------------\n\nTITLE: Testing Floating-Point Approximate Equality with toBeCloseTo in Jest\nDESCRIPTION: These examples show how to use .toBeCloseTo() to compare floating point numbers for approximate equality. The first example demonstrates a common floating-point precision issue, while the second shows how to use toBeCloseTo with numDigits parameter to handle decimal comparisons correctly.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBe(0.3); // Fails!\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a Custom Jest Matcher Function (JavaScript)\nDESCRIPTION: Outlines the fundamental structure of a custom matcher function intended for use with `expect.extend` in JavaScript. It shows the function signature, receiving the actual value (`x`) followed by any arguments passed to the matcher (`y`, `z`), and the required return object structure containing a boolean `pass` property and a `message` function that returns the failure message string.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_66\n\nLANGUAGE: js\nCODE:\n```\n```js\nexpect.extend({\n  yourMatcher(x, y, z) {\n    return {\n      pass: true,\n      message: () => '',\n    };\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting Modules with Jest resetModules\nDESCRIPTION: Examples of using jest.resetModules() to reset the module registry between tests, ensuring module isolation and preventing state conflicts.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum1 = require('../sum');\njest.resetModules();\nconst sum2 = require('../sum');\nsum1 === sum2;\n// > false (Both sum modules are separate \"instances\" of the sum module.)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('works', () => {\n  const sum = require('../sum');\n});\n\ntest('works too', () => {\n  const sum = require('../sum');\n  // sum is a different copy of the sum module from the previous test.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fake Timer Options in Jest (JavaScript)\nDESCRIPTION: Sets default options for Jest's fake timers via the `fakeTimers` object in a Jest configuration (CommonJS). This example configures `doNotFake` to prevent mocking of `process.nextTick` and sets the `timerLimit` for recursive timers to 1000. These defaults apply unless overridden by `jest.useFakeTimers()` in a test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library - Bash\nDESCRIPTION: Installs @testing-library/react, a utility library for rendering and querying React components in tests. Enables writing DOM-centric tests that simulate user interaction in Jest. Run this command in your project root to start using the Testing Library API in your test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Mocking fbjs Warning Utility in Jest - JavaScript\nDESCRIPTION: Suppresses React warnings globally by mocking 'fbjs/lib/warning' with an empty function. Place this in your Jest setup file to silence all warnings; suitable for test environments where irrelevant or excessive warnings (e.g., when testing react-native) clutter output. Use with caution as it may hide helpful development warnings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\njest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n```\n\n----------------------------------------\n\nTITLE: Updating jest.mocked() Usage for Shallow Mocking in Jest v29 (diff)\nDESCRIPTION: This code diff illustrates how to achieve the old default shallow mocking behavior with `jest.mocked()` in Jest v29. Pass an options object `{shallow: true}` as the second argument instead of omitting the second argument as was done previously for shallow mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UpgradingToJest29.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- const mockedObject = jest.mocked(someObject);\n+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of Jest Transformer Interface\nDESCRIPTION: The TypeScript interface definition for Jest transformers, showing the required methods and types for implementing custom code transformers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CodeTransformation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransformOptions<TransformerConfig = unknown> {\n  supportsDynamicImport: boolean;\n  supportsExportNamespaceFrom: boolean;\n  /**\n   * The value is:\n   * - `false` if Jest runs without Node ESM flag `--experimental-vm-modules`\n   * - `true` if the file extension is defined in [extensionsToTreatAsEsm](Configuration.md#extensionstotreatasesm-arraystring)\n   * and Jest runs with Node ESM flag `--experimental-vm-modules`\n   *\n   * See more at https://jestjs.io/docs/next/ecmascript-modules\n   */\n  supportsStaticESM: boolean;\n  supportsTopLevelAwait: boolean;\n  instrument: boolean;\n  /** Cached file system which is used by `jest-runtime` to improve performance. */\n  cacheFS: Map<string, string>;\n  /** Jest configuration of currently running project. */\n  config: ProjectConfig;\n  /** Stringified version of the `config` - useful in cache busting. */\n  configString: string;\n  /** Transformer configuration passed through `transform` option by the user. */\n  transformerConfig: TransformerConfig;\n}\n\ntype TransformedSource = {\n  code: string;\n  map?: RawSourceMap | string | null;\n};\n\ninterface SyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ninterface AsyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ntype Transformer<TransformerConfig = unknown> =\n  | SyncTransformer<TransformerConfig>\n  | AsyncTransformer<TransformerConfig>;\n\ntype TransformerCreator<\n  X extends Transformer<TransformerConfig>,\n  TransformerConfig = unknown,\n> = (transformerConfig?: TransformerConfig) => X;\n\ntype TransformerFactory<X extends Transformer> = {\n  createTransformer: TransformerCreator<X>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Paths (Webpack resolve.roots) in JavaScript\nDESCRIPTION: Extends Jest config to support the modulePaths option, which parallels webpack's resolve.roots for locating shared code. Combines modulePaths, moduleFileExtensions, and moduleDirectories, in conjunction with asset mocking patterns. Appropriate for monorepos or projects with deep folder structures. No special dependencies required.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Random Data in String Snapshots in JavaScript\nDESCRIPTION: This snippet demonstrates how to handle random data in string snapshots by replacing the random part with a constant value before creating the snapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomNumber = Math.round(Math.random() * 100);\nconst stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;\nconst stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);\nexpect(stringWithConstantData).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Testing with Jest Automatic ES6 Class Mocking in JavaScript\nDESCRIPTION: Demonstrates how to test `SoundPlayerConsumer` using Jest's automatic mocking feature. Calling `jest.mock('./sound-player')` replaces the `SoundPlayer` class with a mock constructor and its methods with mock functions. The test checks if the constructor and the `playSoundFile` method were called correctly using Jest's `expect` and matcher functions like `toHaveBeenCalledTimes` and `toHaveBeenCalledWith`. It utilizes `mockClear()` in `beforeEach` to reset mock state between tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Corrected Test Implementation Using requireActual\nDESCRIPTION: Shows how to properly import the actual Response class while keeping fetch mocked, using jest.requireActual to access the original Response implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/BypassingModuleMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('node-fetch');\nimport fetch from 'node-fetch';\nconst {Response} = jest.requireActual('node-fetch');\n```\n\n----------------------------------------\n\nTITLE: Mocking an ES6 Class using jest.mock() Module Factory in JavaScript\nDESCRIPTION: Illustrates mocking the `SoundPlayer` class using the module factory parameter of `jest.mock`. The factory is a higher-order function that returns `jest.fn().mockImplementation(...)`. This inner function acts as the mock constructor, returning an object with the `playSoundFile` method mocked by `mockPlaySoundFile`, a separately defined Jest mock function. This technique provides fine-grained control over the mock's implementation directly within the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using and Overriding Fake Timers within a Jest Test (JavaScript)\nDESCRIPTION: Shows how to enable fake timers for a specific test file using `jest.useFakeTimers()`, which initially applies the options defined in the Jest configuration. It also demonstrates how to override specific options, like the `timerLimit`, for subsequent tests within the same file by passing a configuration object to `jest.useFakeTimers()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\n// install fake timers for this file using the options from Jest configuration\njest.useFakeTimers();\n\ntest('increase the limit of recursive timers for this and following tests', () => {\n  jest.useFakeTimers({timerLimit: 5000});\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Tests with `describe` in Jest (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of `describe(name, fn)` in Jest to group related test cases together for better organization and readability. It shows testing properties of a simple `myBeverage` object within a `describe` block using `test` and `expect`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Constructors with mockImplementation in JavaScript\nDESCRIPTION: Shows how to use `jest.mock('./SomeClass')` to mock a module and then use `SomeClass.mockImplementation()` to supply a factory function that returns a custom object structure when the class constructor is called. This controls the behavior of instances created from the mocked class, including mocking specific methods. Requires Jest (`jest`, `require`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inline Snapshot Test for React Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an inline snapshot test for a Link component. The snapshot is written directly into the test file as an argument to toMatchInlineSnapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Setup with beforeEach Returning a Promise - Jest - JavaScript\nDESCRIPTION: Shows how to handle asynchronous initialization in beforeEach by returning a promise from initializeCityDatabase. This ensures the test does not start until the asynchronous setup completes. Requires Jest and a promise-returning initializeCityDatabase; use when setup tasks need to finish before all tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n```\n\n----------------------------------------\n\nTITLE: Running All Timers in Jest Tests\nDESCRIPTION: A Jest test that demonstrates how to run all scheduled timers to completion using jest.runAllTimers(). This is useful for testing callback execution after a timer completes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\ntest('calls the callback after 1 second', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers();\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Mock of ES6 Class in __mocks__ as a Class - JavaScript\nDESCRIPTION: Defines a manual mock by replacing the real ES6 class with a mock class in the __mocks__ directory. The mock class logs to the console when constructed or when its playSoundFile method is invoked. This approach does not provide spying capabilities but allows providing test-specific implementations of the class. Intended for use with Jest's automocking feature.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer: constructor was called');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer: playSoundFile was called');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Jest Fake Timers and Spying on setTimeout\nDESCRIPTION: This Jest test file demonstrates how to enable fake timers using `jest.useFakeTimers()` and spy on the global `setTimeout` function using `jest.spyOn()`. The test verifies that when the `timerGame` function (imported from '../timerGame') is called, `setTimeout` is invoked exactly once with the expected delay (1000ms) and a function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ntest('waits 1 second before ending the game', () => {\n  const timerGame = require('../timerGame');\n  timerGame();\n\n  expect(setTimeout).toHaveBeenCalledTimes(1);\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Class Constructor with mockImplementation in Jest TypeScript\nDESCRIPTION: Provides a TypeScript example for mocking a class and overriding its methods for testing. Uses ES6 export syntax with class and includes strong typing, then demonstrates how to import, mock, and override the implementation using jest.mocked and jest.fn. Facilitates type safety in Jest unit tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Comparing Primitive Values and Object Identity with .toBe in Jest JavaScript Tests\nDESCRIPTION: This snippet demonstrates using the `.toBe` matcher in Jest. It checks if primitive values (`can.ounces`) are strictly equal to expected values (12) and if string values (`can.name`) are strictly equal ('pamplemousse'). `.toBe` uses `Object.is` for comparison and checks referential identity for objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('the can', () => {\n  test('has 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('has a sophisticated name', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Initialization Wizard - Bash\nDESCRIPTION: Runs 'jest --init' from the command line to generate a basic configuration file interactively. This will ask several questions to tailor a Jest configuration file for your project. Requires Jest to be installed and in the system PATH.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njest --init\n```\n\n----------------------------------------\n\nTITLE: Request Module Performing HTTP GET - JavaScript\nDESCRIPTION: Defines a function that initiates a network request using Node's 'http' module to fetch data by URL. Returns a Promise that resolves with the raw data received when the HTTP response ends. The 'url' parameter specifies the path to be fetched. This implementation depends on the built-in 'http' library. This module is designed to be mocked during testing for isolation from real network calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst http = require('http');\\n\\nexport default function request(url) {\\n  return new Promise(resolve => {\\n    // This is an example of an http request, for example to fetch\\n    // user data from an API.\\n    // This module is being mocked in __mocks__/request.js\\n    http.get({path: url}, response => {\\n      let data = '';\\n      response.on('data', _data => (data += _data));\\n      response.on('end', () => resolve(data));\\n    });\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Jest-Aware Babel Configuration\nDESCRIPTION: Advanced Babel configuration that's aware of Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  const isTest = api.env('test');\n  // You can use isTest to determine what presets and plugins to use.\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring setupFilesAfterEnv in Jest - TypeScript\nDESCRIPTION: This TypeScript Jest configuration sets up setupFilesAfterEnv to reference a custom setup script. Exported using ES module syntax, it is intended for TypeScript projects, ensuring specified setup scripts run after the Jest environment is initialized and before test cases, allowing for richer test customization.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Testing Original Implementation with jest.disableAutomock - JavaScript\nDESCRIPTION: Demonstrates how to disable Jest's automocking so real implementations are used in tests. Imports a utils module, disables automocking, and asserts that utils.authorize() returns the original value. Requires Jest, a utils module, and automocking enabled by config for effect. Input: none; Output: test pass/fail.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport utils from '../utils';\\n\\njest.disableAutomock();\\n\\ntest('original implementation', () => {\\n  // now we have the original implementation,\\n  // even if we set the automocking in a jest configuration\\n  expect(utils.authorize()).toBe('token');\\n});\n```\n\n----------------------------------------\n\nTITLE: Using mockResolvedValueOnce for sequential async mocks (JavaScript)\nDESCRIPTION: Shows how to create a mock function that returns different resolved Promise values for sequential calls using mockResolvedValueOnce, with mockResolvedValue providing the default.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Node.js with Jest - JavaScript\nDESCRIPTION: Exports a JavaScript object configuring Babel to use the @babel/preset-env preset targeting the current version of Node.js. Saved in 'babel.config.js', this config makes Jest transpile ES6+ code appropriately with babel-jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Object Matching Examples\nDESCRIPTION: Shows how to use objectContaining() to match partial objects and properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\ntest('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toHaveBeenCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Timeout per File with jest.setTimeout in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the default timeout interval for all tests and hooks within the current test file using `jest.setTimeout()`. The timeout value is provided in milliseconds (1000ms or 1 second in this example). This overrides the default 5-second timeout for the specific file it's called in.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: js\nCODE:\n```\njest.setTimeout(1000); // 1 second\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Transformation Exclusions in Jest (JSON)\nDESCRIPTION: Illustrates how to modify the `transformIgnorePatterns` array in Jest configuration (`package.json` or `jest.config.js`). This example uses a regular expression with a negative lookahead `(?!)` to prevent transformation of most `node_modules` except for `react-native`, `my-project`, and `react-native-button`, ensuring their code is processed by Babel.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(react-native|my-project|react-native-button)/)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing Objects with Random Values and Property Matchers in Jest (JavaScript)\nDESCRIPTION: These JavaScript examples exhibit how Jest snapshot testing functions with objects containing random or time-based properties, and how property matchers can make these tests less brittle. The first test fails on every run due to variable fields; the second shows usage of expect.any() to match types and stabilize snapshots. Both require Jest as test framework. Inputs are dynamic user objects, and outputs are either failing or stable snapshots depending on matcher usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('will fail every time', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot();\n});\n\n// Snapshot\nexports[`will fail every time 1`] = `\n{\n  \"createdAt\": 2018-05-19T23:36:09.816Z,\n  \"id\": 3,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the matchers and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    id: expect.any(Number),\n  });\n});\n\n// Snapshot\nexports[`will check the matchers and pass 1`] = `\n{\n  \"createdAt\": Any<Date>,\n  \"id\": Any<Number>,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Descriptive Names for Clearer Jest Snapshots\nDESCRIPTION: Provides improved examples of Jest snapshot file content where the test descriptions clearly state the expected output (e.g., 'should render null', 'should render Alan Turing'). This practice significantly enhances the readability and maintainability of snapshots, making reviews easier and clearer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexports[`<UserName /> should render null`] = `null`;\n\nexports[`<UserName /> should render Alan Turing`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Writing DOM Tests for React Components with @testing-library/react\nDESCRIPTION: Example test file (__tests__/CheckboxWithLabel-test.js) demonstrating how to write DOM tests for React components using @testing-library/react.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\n// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher\n// unmount and cleanup DOM after the test is finished.\nafterEach(cleanup);\n\nit('CheckboxWithLabel changes the text after click', () => {\n  const {queryByLabelText, getByLabelText} = render(\n    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,\n  );\n\n  expect(queryByLabelText(/off/i)).toBeTruthy();\n\n  fireEvent.click(getByLabelText(/off/i));\n\n  expect(queryByLabelText(/on/i)).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock for SoundPlayer Class\nDESCRIPTION: This code creates a manual mock implementation for the SoundPlayer class in a __mocks__ folder, exporting both a mock constructor and a shared mock method.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Mocking Rejected Promises with `mockRejectedValue` Shorthand (JavaScript)\nDESCRIPTION: Provides the shorthand equivalent for `mockFn.mockRejectedValue(value)`. This method configures a mock function to always return a Promise that rejects with the specified value (error). It uses `jest.fn().mockImplementation()` internally.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\n----------------------------------------\n\nTITLE: Using .toMatchObject with Arrays in Jest (JavaScript)\nDESCRIPTION: Demonstrates applying `.toMatchObject` to arrays. It checks if the received array has the exact same number of elements as the expected array and if each corresponding element in the received array matches (using `.toMatchObject` logic) the respective element in the expected array. This allows extra properties in objects within the received array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: js\nCODE:\n```\ndescribe('toMatchObject applied to arrays', () => {\n  test('the number of elements must match exactly', () => {\n    expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);\n  });\n\n  test('.toMatchObject is called for each elements, so extra object properties are okay', () => {\n    expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([\n      {foo: 'bar'},\n      {baz: 1},\n    ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Function Return Values in JavaScript\nDESCRIPTION: Illustrates how to stub return values for Jest mock functions created with `jest.fn()`. `mockReturnValueOnce()` sets the return value for the next single call, while `mockReturnValue()` sets a default return value for all subsequent calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\n----------------------------------------\n\nTITLE: Using expect.any() with Primitive Types in Jest\nDESCRIPTION: Shows how to use `expect.any(constructor)` in Jest to assert that a mock function was called with a specific primitive type (Number). The `randocall` function calls the mock with a random number, and the test verifies the argument type.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: js\nCODE:\n```\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Number));\n});\n```\n\n----------------------------------------\n\nTITLE: Installing ts-jest for TypeScript Testing\nDESCRIPTION: This command installs the `ts-jest` package as a development dependency using npm. `ts-jest` acts as a TypeScript preprocessor for Jest, enabling direct execution and type-checking of TypeScript test files within the Jest environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev ts-jest\n```\n\n----------------------------------------\n\nTITLE: Updating a React Component Test Causing Snapshot Failure (TSX)\nDESCRIPTION: This snippet shows an updated version of the previous test case where the `page` prop of the `Link` component has been changed. When this test runs against the existing snapshot (created for the Facebook link), Jest will report a mismatch, indicating either a bug or an intentional change requiring a snapshot update.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Updated test case with a Link to a different address\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Custom Matcher - 'toBeDivisibleByExternalValue' - JavaScript\nDESCRIPTION: Implements an asynchronous custom matcher toBeDivisibleByExternalValue that awaits an external value before checking divisibility. Useful for scenarios where match conditions depend on async resources. Requires that getExternalValueFromRemoteSource is defined and accessible. Returns a Promise that resolves to the matcher result. Inputs: received value. Outputs: pass/fail and informative message.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_58\n\nLANGUAGE: js\nCODE:\n```\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue === 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeating Setup/Teardown with beforeEach/afterEach in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Jest's `beforeEach` and `afterEach` hooks for tasks that need to run before and after every test within a file or describe block. It shows initializing a city database before each test using `initializeCityDatabase()` and clearing it afterwards with `clearCityDatabase()`. This pattern ensures a clean state for each independent test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Native Module with jest.mock in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a simple way to mock a native React Native module (e.g., `react-native-video`) using `jest.mock`. It replaces the actual module implementation with a simple string 'Video', effectively stubbing the component in tests to avoid errors related to missing native code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('react-native-video', () => 'Video');\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Multiple Reporters\nDESCRIPTION: Shows how to run Jest with multiple reporters, specifically the default reporter and jest-junit. This is useful for generating different types of test reports simultaneously.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest --reporters=\"default\" --reporters=\"jest-junit\"\n```\n\n----------------------------------------\n\nTITLE: Mocking window.matchMedia in Jest Tests - JavaScript\nDESCRIPTION: This snippet demonstrates a manual mock for the window.matchMedia method in Jest environments where JSDOM does not implement it. It defines the mock implementation globally on window to allow code that expects matchMedia to function, returning an object with stubbed event listeners. This enables testing of code paths that require matchMedia, but requires Jest and the test runner to use or import this snippet before the tested code executes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ManualMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nObject.defineProperty(window, 'matchMedia', {\\n  writable: true,\\n  value: jest.fn().mockImplementation(query => ({\\n    matches: false,\\n    media: query,\\n    onchange: null,\\n    addListener: jest.fn(), // deprecated\\n    removeListener: jest.fn(), // deprecated\\n    addEventListener: jest.fn(),\\n    removeEventListener: jest.fn(),\\n    dispatchEvent: jest.fn(),\\n  })),\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel to Support TypeScript for Jest - JavaScript\nDESCRIPTION: Configures Babel to use both '@babel/preset-env' and '@babel/preset-typescript', enabling ES and TypeScript transpilation when tests are run with Jest. The config is exported from 'babel.config.js' as a CommonJS module. Requires Babel packages and the TypeScript preset to be installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {targets: {node: 'current'}}],\n    // highlight-next-line\n    '@babel/preset-typescript',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Parameterized Test Suites with jest-each describe\nDESCRIPTION: Demonstrates how to create parameterized test suites using the describe method with jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).describe('.add(%d, %d)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Strings with Regular Expressions in Jest\nDESCRIPTION: Demonstrates how to use toMatch for checking strings against regular expressions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Async Jest Configuration Function (JS/TS)\nDESCRIPTION: Shows how to define Jest configuration using an asynchronous function that returns the configuration object. This allows for dynamic configuration based on async operations. The JavaScript version uses `module.exports` with a JSDoc return type hint, while the TypeScript version uses `export default` with explicit Promise and Config types. Both examples configure the `verbose` option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\n/** @returns {Promise<import('jest').Config>} */\nmodule.exports = async () => {\n  return {\n    verbose: true,\n  };\n};\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\n\nexport default async (): Promise<Config> => {\n  return {\n    verbose: true,\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Filtering Using Jest Mocks with Return Values in JavaScript\nDESCRIPTION: Demonstrates using Jest's mockReturnValueOnce API to simulate conditional logic within functions that use continuation-passing style, such as JavaScript's Array.prototype.filter. Returns dynamic mock results to control behavior under test precisely. It requires Jest and shows how test code can capture arguments passed into the mock.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\n----------------------------------------\n\nTITLE: Using Jest --runTestsByPath with an Exact File Path\nDESCRIPTION: Demonstrates running a specific Jest test file by providing its exact path (`__tests__/t1.test.js`) to the `--runTestsByPath` option. This method bypasses regular expression matching against all files, potentially speeding up test filtering.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njest --runTestsByPath __tests__/t1.test.js\n```\n\n----------------------------------------\n\nTITLE: Using mockReturnValueOnce with Jest mocks (TypeScript)\nDESCRIPTION: TypeScript implementation of mockReturnValueOnce showing how to chain return values for successive calls to a mock function with proper type definitions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Writing Expected-Failure Tests - Jest Failing Modifier - JavaScript\nDESCRIPTION: Demonstrates the use of test.failing (available with jest-circus) to define tests that are expected to fail. The test will pass if it throws, and fail if it does not throw. Useful for TDD or contributing reproducing bugs. No extra dependencies except jest-circus runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n```\n\n----------------------------------------\n\nTITLE: Partially Mocking a Module with jest.requireActual in TypeScript\nDESCRIPTION: Shows the TypeScript equivalent of partially mocking a module using `jest.requireActual`. It includes the type argument for `jest.requireActual` to maintain type safety while overriding the `getRandom` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule =\n    jest.requireActual<typeof import('../myModule')>('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Return Values in TypeScript\nDESCRIPTION: Shows how to set and change the return value of a mock function in TypeScript using mockReturnValue(), with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Calls Using Jest Custom Matchers - JavaScript\nDESCRIPTION: Demonstrates use of Jest's custom matcher functions to assert various behaviors of mock functions such as call count, call arguments, last call arguments, and snapshot comparison. Requires Jest as a dependency and applicable for JavaScript test files using Jest. Inputs are Jest mock functions (mockFunc) and possibly arguments for calls; outputs are assertions that throw on failure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc).toHaveBeenCalled();\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);\n\n// All calls and the name of the mock is written as a snapshot\nexpect(mockFunc).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic String Content Before Snapshotting in JavaScript\nDESCRIPTION: This snippet presents a strategy for snapshotting strings that contain dynamic parts. It first generates a string with a random number (`stringWithRandomData`). Then, it uses `String.prototype.replace()` with a regular expression (`/id=\"\\d+\"/`) to substitute the dynamic ID attribute with a constant value (`123`), creating `stringWithConstantData`. This modified, deterministic string is then snapshotted, ensuring test consistency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomNumber = Math.round(Math.random() * 100);\nconst stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;\nconst stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);\nexpect(stringWithConstantData).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Replacing Mock Function Behavior with `mockImplementation` in JavaScript\nDESCRIPTION: Demonstrates using the `.mockImplementation()` method on a mock function obtained by mocking a module (`jest.mock('../foo')` and `require('../foo')`). This replaces the original or default mock implementation with a custom function, shown here returning `42`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../foo'); // this happens automatically with automocking\nconst foo = require('../foo');\n\n// foo is a mock function\nfoo.mockImplementation(() => 42);\nfoo();\n// > 42\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Manual Mock for a Component in JavaScript\nDESCRIPTION: This JavaScript example illustrates how to create a custom manual mock for a React component (like `Text`) using `jest.mock`. It defines a custom class component that mimics the basic rendering behavior of the original component and copies its `propTypes`, useful when a simple stub or the `mockComponent` helper is insufficient.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('Text', () => {\n  const RealComponent = jest.requireActual('Text');\n  const React = require('react');\n  class Text extends React.Component {\n    render() {\n      return React.createElement('Text', this.props, this.props.children);\n    }\n  }\n  Text.propTypes = RealComponent.propTypes;\n  return Text;\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Tests with test.skip.each (Template Literal Syntax) in Jest (JavaScript)\nDESCRIPTION: Illustrates skipping data-driven tests using `test.skip.each` with the template literal syntax. This allows defining the test data table directly within backticks. All test cases derived from this table will be skipped. Aliases include ``it.skip.each`table`(name, fn)``, ``xit.each`table`(name, fn)`` and ``xtest.each`table`(name, fn)``.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\ntest.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Mocked node-fetch Leading to TypeError in Jest (JavaScript)\nDESCRIPTION: This Jest test attempts to verify the `createUser` function. It mocks the entire `node-fetch` module using `jest.mock`. While `fetch` is successfully mocked and its return value controlled, importing `Response` from the same mocked module leads to a `TypeError: response.text is not a function` because the imported `Response` object is also a mock and lacks the original methods. This highlights a common issue when needing original module components alongside mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/BypassingModuleMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\njest.mock('node-fetch');\n\nimport fetch, {Response} from 'node-fetch';\nimport {createUser} from './createUser';\n\ntest('createUser calls fetch with the right args and returns the user id', async () => {\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\n\n  const userId = await createUser();\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {\n    method: 'POST',\n  });\n  expect(userId).toBe('4');\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using test.each with template literals in TypeScript\nDESCRIPTION: Shows how to use test.each with template literals in TypeScript, demonstrating type inference and the need for generic type arguments for mixed types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Return Values with mockReturnValueOnce in TypeScript\nDESCRIPTION: TypeScript version of mockReturnValueOnce usage, demonstrating type-safe mocking of function return values for successive calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Using test.only.each with template literals in JavaScript\nDESCRIPTION: Demonstrates how to use test.only.each with template literals for creating a table of test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Automatic Mocking with jest.enableAutomock - JavaScript\nDESCRIPTION: Enables Jest's automatic mocking before importing a utility module, then tests that its exported methods are replaced with mock functions. Requires Jest and a configurable automock option. Validates that both methods report as mock functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.enableAutomock();\\n\\nimport utils from '../utils';\\n\\ntest('original implementation', () => {\\n  // now we have the mocked implementation,\\n  expect(utils.authorize._isMockFunction).toBeTruthy();\\n  expect(utils.isAuthorized._isMockFunction).toBeTruthy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Array Containment with Jest - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the .toContain matcher in Jest to verify that a specific item exists within an array. The test covers scenarios where getAllFlavors() returns a list and ensures strict equality comparison using ===. It requires Jest to be installed and set up in the test environment. The key parameter is the item being searched for (e.g., 'lime'). The input is the return value of getAllFlavors(); the output is a pass/fail test based on the presence of 'lime' in the array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\ntest('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Song Object in TypeScript\nDESCRIPTION: Defines a 'song' object with nested properties and a function. This object will be used to demonstrate Jest's mocking capabilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying Changed Files with jest-changed-files in JavaScript\nDESCRIPTION: Demonstrates using the `getChangedFilesForRoots` function from the `jest-changed-files` package to identify files modified since the last commit within specified roots (in this case, the current directory './'). It requires the `jest-changed-files` package. The function returns a promise resolving to an object containing changed files; the example logs the `changedFiles` property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// print the set of modified files since last commit in the current repo\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n----------------------------------------\n\nTITLE: Configuring fakeTimers in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to configure Jest's fake timers feature. This example preserves the original implementation of process.nextTick() and sets a limit of 1000 recursive timers that can be run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Global Setup Module - JavaScript\nDESCRIPTION: Provides an example of a custom global setup module used by Jest to initialize resources before any tests run. The exported asynchronous function receives 'globalConfig' and 'projectConfig', logs details, and sets a reference to an external server (e.g., MongoDB) onto globalThis. This module must be referenced via the 'globalSetup' Jest option and assumes the existence of a 'mongod' object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  // Set reference to mongod in order to close the server during teardown.\n  globalThis.__MONGOD__ = mongod;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Mock Implementation with mockImplementation() in Jest\nDESCRIPTION: Demonstrates dynamically replacing a mock's implementation using `mockImplementation()` within a `beforeAll` block. This allows changing the mock behavior for specific test suites or cases, such as testing error handling.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('When SoundPlayer throws an error', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Test error');\n        },\n      };\n    });\n  });\n\n  it('Should throw an error when calling playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Isolating Modules Asynchronously in Jest\nDESCRIPTION: Demonstrates how to use jest.isolateModulesAsync() to isolate module imports in async tests. This allows testing modules in isolation without affecting other tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nlet myModule;\nawait jest.isolateModulesAsync(async () => {\n  myModule = await import('myModule');\n  // do async stuff here\n});\n\nconst otherCopyOfMyModule = await import('myModule');\n```\n\n----------------------------------------\n\nTITLE: Module Factory Function Mock Implementation\nDESCRIPTION: Example of correctly implementing a module factory function to mock a constructor function in Jest. Shows how to return a function that creates an object with the required methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Global Setup Script for Puppeteer\nDESCRIPTION: Node.js script intended for Jest's `globalSetup`. It launches a Puppeteer browser instance, stores a reference to it in `globalThis.__BROWSER_GLOBAL__` (primarily for teardown), creates a temporary directory, and saves the browser's WebSocket endpoint to a file (`wsEndpoint`). This allows test environments to connect to the same browser instance. Requires `puppeteer`, `fs.promises`, `os`, and `path` modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// setup.js\nconst {mkdir, writeFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nmodule.exports = async function () {\n  const browser = await puppeteer.launch();\n  // store the browser instance so we can teardown it later\n  // this global is only available in the teardown but not in TestEnvironments\n  globalThis.__BROWSER_GLOBAL__ = browser;\n\n  // use the file system to expose the wsEndpoint for TestEnvironments\n  await mkdir(DIR, {recursive: true});\n  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Resolved Promises with `mockResolvedValue` Shorthand (JavaScript)\nDESCRIPTION: Provides the shorthand equivalent for `mockFn.mockResolvedValue(value)`. This method configures a mock function to return a Promise that resolves with the specified value. It uses `jest.fn().mockImplementation()` internally.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\n----------------------------------------\n\nTITLE: Example Function That Throws an Error for Testing (JavaScript)\nDESCRIPTION: Defines a sample function `drinkFlavor` that throws a custom `DisgustingFlavorError` when passed the string 'octopus'. This function serves as the subject under test for subsequent `.toThrow` examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests from Command Line\nDESCRIPTION: Examples of running Jest tests using different command line options, including running all tests, specific tests, tests related to changed files, and watch mode.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njest\n```\n\nLANGUAGE: bash\nCODE:\n```\njest my-test #or\njest path/to/my-test.js\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -o\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -t name-of-spec\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --watch #runs jest -o by default\njest --watchAll #runs all tests\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Seed for Jest Test Runs (Bash)\nDESCRIPTION: This command demonstrates how to set a specific seed value (1324) for a Jest test run using the `--seed` flag. This seed affects the order in which test suites are run and, if `--randomize` is used, the order of tests within suites. The seed must be an integer between -2147483648 and 2147483647.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\njest --seed=1324\n```\n\n----------------------------------------\n\nTITLE: Example Multi-Type Validation Error Output from jest-validate\nDESCRIPTION: Displays the error output when a configuration option (`foo`), configured to accept multiple types (string or number using `multipleValidOptions`), receives a value of an incorrect type (array). The message lists the acceptable types and shows examples for each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n● Validation Error:\n\n  Option foo must be of type:\n    string or number\n  but instead received:\n    array\n\n  Example:\n  {\n    \"bar\": \"string is ok\"\n  }\n\n  or\n\n  {\n    \"bar\": 2\n  }\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Using afterEach for Per-Test Cleanup in Jest (JavaScript)\nDESCRIPTION: Illustrates the `afterEach` hook in Jest. It executes a cleanup function (`cleanUpDatabase`) after each individual test in the file completes. This is suitable for cleaning up temporary state created during a single test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Timeout Error for Unresolved Promises in Jest\nDESCRIPTION: Displays a typical timeout error message thrown by Jest (often originating from Jasmine, its underlying runner) when an asynchronous operation, such as a Promise, does not complete within the configured timeout period (`jasmine.DEFAULT_TIMEOUT_INTERVAL`). This commonly occurs due to unhandled promise rejections or conflicting Promise library implementations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n- Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n```\n\n----------------------------------------\n\nTITLE: Running Tests Concurrently with test.concurrent in Jest (JavaScript)\nDESCRIPTION: This snippet shows two examples of using test.concurrent to run asynchronous tests in parallel. Each test is an async function asserting simple arithmetic, and Jest schedules both to run concurrently. These are functionally identical to normal async tests but may be interleaved by the runner for time performance. No extra dependencies are required beyond Jest; just provide the asynchronous callback. Limitation: test.concurrent is currently experimental and may lack features or stability.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Modules and Aliases in JavaScript\nDESCRIPTION: This snippet defines a standard webpack configuration in JavaScript, specifying how modules and file types such as JavaScript, CSS, GIFs, and font assets are handled, with loader chains and aliases for project paths. It demonstrates the use of loader rules for file transformations, sets up custom module/chunk resolution, and illustrates module aliasing for local dependencies. No external dependencies beyond webpack's loaders are assumed. The config object is exported for use by webpack’s CLI or API.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: ['node_modules'],\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.gif$/,\n        type: 'asset/inline',\n      },\n      {\n        test: /\\.(ttf|eot|svg)$/,\n        type: 'asset/resource',\n      },\n    ],\n  },\n  resolve: {\n    alias: {\n      config$: './configs/app-config.js',\n      react: './vendor/react-master',\n    },\n    extensions: ['.js', '.jsx'],\n    modules: [\n      'node_modules',\n      'bower_components',\n      'shared',\n      '/shared/vendor/modules',\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests with Jest in JavaScript\nDESCRIPTION: Demonstrates how to use jest.retryTimes() to retry failed tests a specified number of times. It also shows how to enable logging of errors before retrying.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\njest.retryTimes(3);\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.retryTimes(3, {logErrorsBeforeRetry: true});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Example Jest Watch Mode Menu with a Custom Plugin\nDESCRIPTION: Shows the text output of the Jest watch mode usage menu, highlighting how a custom plugin prompt (added via `getUsageInfo`) appears alongside default options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nWatch Usage\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a test name regex pattern.\n › Press q to quit watch mode.\n › Press s to do something. // <-- This is our plugin\n › Press Enter to trigger a test run.\n```\n\n----------------------------------------\n\nTITLE: Testing Arrays and Iterables with toContain in Jest\nDESCRIPTION: Shows how to use toContain to check if an array or iterable contains a particular item.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UsingMatchers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n```\n\n----------------------------------------\n\nTITLE: Partially Mocking a Module in Jest Tests (JavaScript)\nDESCRIPTION: Demonstrates how to mock specific exports of a module (`default` and `foo`) while retaining the original implementation for others (`bar`). It uses `jest.mock()` with a factory function, imports the original module via `jest.requireActual()`, and spreads the original module properties while overriding the desired exports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n//test.js\nimport defaultExport, {bar, foo} from '../foo-bar-baz';\n\njest.mock('../foo-bar-baz', () => {\n  const originalModule = jest.requireActual('../foo-bar-baz');\n\n  //Mock the default export and named export 'foo'\n  return {\n    __esModule: true,\n    ...originalModule,\n    default: jest.fn(() => 'mocked baz'),\n    foo: 'mocked foo',\n  };\n});\n\ntest('should do a partial mock', () => {\n  const defaultExportResult = defaultExport();\n  expect(defaultExportResult).toBe('mocked baz');\n  expect(defaultExport).toHaveBeenCalled();\n\n  expect(foo).toBe('mocked foo');\n  expect(bar()).toBe('bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Last Mock Function Call Arguments with expect.toHaveBeenLastCalledWith\nDESCRIPTION: Illustrates using the `toHaveBeenLastCalledWith` matcher (alias `lastCalledWith`) in Jest to assert the arguments passed during the *last* invocation of a mock function (`jest.fn()`). This example checks if the last flavor processed by `applyToAllFlavors` was 'mango'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ntest('applying to all flavors does mango last', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Global Database After All Tests in Jest\nDESCRIPTION: This snippet demonstrates the use of afterAll() to clean up a global database after all tests in a file have completed. It shows how to handle asynchronous cleanup operations and provides examples of database operations in individual tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Null Values with toBeNull in Jest\nDESCRIPTION: Shows how to use the toBeNull matcher to check if a value is null. This is equivalent to toBe(null) but provides better error messages.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction bloop() {\n  return null;\n}\n\ntest('bloop returns null', () => {\n  expect(bloop()).toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Jest Configuration with Aliases\nDESCRIPTION: A comprehensive Jest configuration that handles module paths, file extensions, directories, and webpack aliases. This setup provides full compatibility with a standard webpack configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n\n    '^react(.*)$': '<rootDir>/vendor/react-master$1',\n    '^config$': '<rootDir>/configs/app-config.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Data-Driven Tests with test.concurrent.each Template Table in Jest (JavaScript)\nDESCRIPTION: Using a tagged template, this code runs asynchronous tests in parallel for every row of a table, each verifying a sum operation. The test title is parameterized for readability. All inputs (a, b, expected) are mapped from the table, and outputs are checked concurrently for each row. This pattern is especially useful for large, repetitive input sets and only requires Jest and properly defined async test functions. Only own properties can be injected in test titles.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Mapper for Static Assets in JavaScript\nDESCRIPTION: This `jest.config.js` snippet demonstrates using the `moduleNameMapper` option to mock static assets. It configures Jest to replace imports of files matching specific extensions (images, fonts, media files, CSS/LESS) with paths to mock files (`fileMock.js` and `styleMock.js`), preventing errors during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing an Inline Snapshot Test in Jest (TSX)\nDESCRIPTION: This snippet demonstrates how to initiate an inline snapshot test. Instead of generating a separate `.snap` file, `toMatchInlineSnapshot()` is called without arguments. On the first run, Jest will evaluate the `tree` object and insert the generated snapshot directly into the test file as an argument to `toMatchInlineSnapshot`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with jest.Spied Utility in TypeScript\nDESCRIPTION: Example test file showing how to use the jest.Spied typed utility function, including proper cleanup in afterEach hooks and spy verification.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1_482_363_367_071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions to Treat as ESM in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet customizes the 'extensionsToTreatAsEsm' option in Jest's config, specifying that '.ts' files should be interpreted as ECMAScript modules. It is relevant when running in projects using native ESM features with TypeScript. Insert in a Jest config to control module parsing in tests. Dependencies: Node.js, Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  extensionsToTreatAsEsm: ['.ts'],\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring collectCoverageFrom in Jest with TypeScript\nDESCRIPTION: Example of configuring the collectCoverageFrom option in Jest with TypeScript. It specifies glob patterns to include JavaScript and JSX files while excluding node_modules and vendor directories.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Only Specific Test Suites with describe.only in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of describe.only (or its alias fdescribe) to exclusively run a particular test suite, skipping other describe blocks. Two tests are included, asserting properties on myBeverage. All other describe blocks are ignored during the run. Only Jest is required, and the main input is the describe/title plus the suite callback. The limitation is that only one describe.only suite will run, making it ideal for focused testing or debugging.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Scoping Setup Hooks within Describe Blocks in Jest (JavaScript)\nDESCRIPTION: This example illustrates how Jest setup hooks (`beforeEach` in this case) can be scoped. A top-level `beforeEach` applies to all tests in the file, initializing the city database. Another `beforeEach` inside a `describe` block applies only to tests within that block, initializing a food database. This allows for modular and specific setup logic based on test groupings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Applies to all tests in this file\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Implementation in TypeScript\nDESCRIPTION: Shows how to mock a class implementation in TypeScript by providing a mock implementation that returns an object with mocked methods, with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Asserting Truthy Values with toBeTruthy in Jest - JavaScript\nDESCRIPTION: This code demonstrates the use of `.toBeTruthy` matcher in Jest for asserting that a value is considered true in a boolean context, regardless of the actual type. Example includes a call to a function after which the test expects a truthy value. Dependency: Jest. All values except `false`, `0`, `''`, `null`, `undefined`, or `NaN` are considered truthy.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('drinking La Croix leads to having thirst info', () => {\\n  drinkSomeLaCroix();\\n  expect(thirstInfo()).toBeTruthy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: Example of configuring watchPathIgnorePatterns in Jest to ignore specific directories during watch mode. This prevents Jest from re-running tests when files in these directories change.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Tagged Template Literals\nDESCRIPTION: Demonstrates using describe.each with tagged template literals for a table-like format of test cases. Provides a more readable way to define test data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing createMockFromModule Behavior Across Data Types - JavaScript\nDESCRIPTION: Tests how Jest mocks functions, async functions, classes, objects, arrays, primitives, and symbols using createMockFromModule. Asserts correct function names, lengths, class properties, cloning, array handling, and primitive preservation. Requires Jest and a sufficiently complex module like the provided example.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst example = jest.createMockFromModule('../example');\\n\\ntest('should run example code', () => {\\n  // creates a new mocked function with no formal arguments.\\n  expect(example.function.name).toBe('square');\\n  expect(example.function).toHaveLength(0);\\n\\n  // async functions get the same treatment as standard synchronous functions.\\n  expect(example.asyncFunction.name).toBe('asyncSquare');\\n  expect(example.asyncFunction).toHaveLength(0);\\n\\n  // creates a new class with the same interface, member functions and properties are mocked.\\n  expect(example.class.constructor.name).toBe('Bar');\\n  expect(example.class.foo.name).toBe('foo');\\n  expect(example.class.array).toHaveLength(0);\\n\\n  // creates a deeply cloned version of the original object.\\n  expect(example.object).toEqual({\\n    baz: 'foo',\\n    bar: {\\n      fiz: 1,\\n      buzz: [],\\n    },\\n  });\\n\\n  // creates a new empty array, ignoring the original array.\\n  expect(example.array).toHaveLength(0);\\n\\n  // creates a new property with the same primitive value as the original property.\\n  expect(example.number).toBe(123);\\n  expect(example.string).toBe('baz');\\n  expect(example.boolean).toBe(true);\\n  expect(example.symbol).toEqual(Symbol.for('a.b.c'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using JestWorker in a Parent Process (JavaScript)\nDESCRIPTION: This JavaScript example shows how to import and instantiate `JestWorker` in a parent script (`parent.js`). It requires the worker module using `require.resolve`, creates a worker instance, and then calls the `hello` method defined in the worker, awaiting its result. This illustrates the fundamental Promise-based interaction between the parent and worker processes.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {Worker as JestWorker} from 'jest-worker';\n\nasync function main() {\n  const worker = new JestWorker(require.resolve('./worker'));\n  const result = await worker.hello('Alice'); // \"Hello, Alice\"\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with Yarn (Bash)\nDESCRIPTION: Starts the Docusaurus development server using the `start` script defined via Yarn. This allows for local development and testing of the Jest website. An alternative command `yarn workspace jest-website start` can be run from the root of the Jest monorepo.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using rootDir Token in Transform Ignore Patterns (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to use the <rootDir> token in transformIgnorePatterns to ensure proper path resolution across different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_82\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing Recursive Timers with jest.runOnlyPendingTimers()\nDESCRIPTION: This Jest test demonstrates handling recursive timers using `jest.runOnlyPendingTimers()`. It enables fake timers, spies on `setTimeout`, and calls `infiniteTimerGame`. It verifies the initial 1-second timer setup. Then, `jest.runOnlyPendingTimers()` executes only the currently scheduled timer (the 1-second one), preventing an infinite loop. Finally, it asserts the callback was called and checks that the next 10-second timer was correctly scheduled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ndescribe('infiniteTimerGame', () => {\n  test('schedules a 10-second timer after 1 second', () => {\n    const infiniteTimerGame = require('../infiniteTimerGame');\n    const callback = jest.fn();\n\n    infiniteTimerGame(callback);\n\n    // At this point in time, there should have been a single call to\n    // setTimeout to schedule the end of the game in 1 second.\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n\n    // Fast forward and exhaust only currently pending timers\n    // (but not any new timers that get created during that process)\n    jest.runOnlyPendingTimers();\n\n    // At this point, our 1-second timer should have fired its callback\n    expect(callback).toHaveBeenCalled();\n\n    // And it should have created a new timer to start the game over in\n    // 10 seconds\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Reporters with Options (JS/TS)\nDESCRIPTION: Demonstrates how to configure the `coverageReporters` option in Jest. This option accepts an array of reporter names (e.g., 'clover', 'json', 'lcov', 'text'). It also shows how to pass specific options to a reporter using a tuple format `[reporterName, optionsObject]`. The example configures the 'text' reporter to skip displaying files that have 100% coverage (`{skipFull: true}`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\n/** @type {import('jest').Config} */\nconst config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nmodule.exports = config;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a SoundPlayerConsumer Class that Uses SoundPlayer\nDESCRIPTION: This code defines a consumer class that imports and instantiates the SoundPlayer class, then uses it to play a predefined sound file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Mixed Resolved/Rejected Promises with `mockRejectedValueOnce` (TypeScript)\nDESCRIPTION: Demonstrates using `mockRejectedValueOnce` in TypeScript, combined with `mockResolvedValueOnce`, to simulate different typed outcomes over multiple calls to an async mock function. Type safety is maintained with generics.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Methods of Mocked Class Instances in Jest using JavaScript\nDESCRIPTION: Demonstrates how to spy on methods called on instances of a mocked class. A separate mock function (`mockPlaySoundFile = jest.fn()`) is created and assigned to the relevant method within the `mockImplementation` of the class mock. This allows tracking calls to `playSoundFile` across all instances created by the mocked constructor.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Now we can track calls to playSoundFile\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.each with Object Data in Jest (JavaScript)\nDESCRIPTION: Illustrates `describe.each` using an array of objects (`table`) for parameterized testing. It injects object properties into the describe block's title using the `$variable` syntax (`$a`, `$b`) for dynamic naming.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ndescribe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Docblocks with jest-docblock in JavaScript\nDESCRIPTION: This snippet demonstrates parsing the header comment block (docblock) from a JavaScript code string using the `parseWithComments` function from the `jest-docblock` package. It requires `jest-docblock` and outputs an object containing the extracted comments and pragmas (like `@flow`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n----------------------------------------\n\nTITLE: Configuring coverageThreshold in Jest with Basic Settings (TypeScript)\nDESCRIPTION: TypeScript implementation of Jest configuration for coverage thresholds. Sets global minimum coverage requirements of 80% for branches, functions, and lines, with a maximum of 10 uncovered statements allowed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Specifying Mock Function Return Values in Jest with JavaScript\nDESCRIPTION: Illustrates the use of Jest mockReturnValueOnce and mockReturnValue to control a mock's return values in sequence. Shows the ability to set up a chain of specific and default return values for a mock, useful in simulating stateful or conditional logic in tested code paths. There are no external dependencies beyond Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\n----------------------------------------\n\nTITLE: Configuring `maxWorkers` with Percentage (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates setting the `maxWorkers` option in `jest.config.ts` using a percentage string ('50%') with type safety. Jest will use 50% of the available CPU cores for its worker pool, adapting to different machine capabilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  maxWorkers: '50%',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Error Message for Third-Party Key Conflict\nDESCRIPTION: Displays a sample error message shown by Jest when two different third-party watch plugins attempt to register the same key (e.g., 'x'), indicating a conflict that needs resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\nWatch plugins YourFaultyPlugin and TheirFaultyPlugin both attempted to register key `x`. Please change the key configuration for one of the conflicting plugins to avoid overlap.\n\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Transformer in Jest\nDESCRIPTION: Example implementation of a custom transformer that converts image imports to their filenames, allowing Jest to handle non-JavaScript assets.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CodeTransformation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Docblock Example in JavaScript\nDESCRIPTION: A simple example of a docblock comment in JavaScript. Docblocks are specially formatted comments at the top of a file.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Stuff goes here!\n */\n```\n\n----------------------------------------\n\nTITLE: Using describe.each with Object Parameters in Jest\nDESCRIPTION: Example showing how to use describe.each() with objects to run the same test suite with different data sets. This approach provides more readable test data by using named properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `sandboxInjectedGlobals` in Jest (JavaScript)\nDESCRIPTION: Demonstrates configuring the `sandboxInjectedGlobals` option in a JavaScript Jest config file (`.js` or `.cjs`). This option lists global properties (like 'Math') to be explicitly defined within the test VM sandbox, potentially improving lookup performance for frequently accessed globals. This configuration is added to the exported config object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions using Jest in JavaScript\nDESCRIPTION: This snippet presents two Jest tests using the `toMatch` matcher to assert string content via regular expressions. It checks for absence or presence of certain substrings in sample texts. Jest is required. Parameters are hardcoded strings, and results are boolean assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n----------------------------------------\n\nTITLE: Diff Output with Line Change Counts (Diff)\nDESCRIPTION: Illustrates the diff output format when the `includeChangeCounts` option is enabled. The annotation lines now include the count of changes (`- 1` for expected, `+ 2` for received).\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n- Expected  - 1\n+ Received  + 2\n\n  Array [\n    \"common\",\n-   \"changed from\",\n+   \"changed to\",\n+   \"insert\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Properties and Identity Using Jest .toEqual and .toBe - JavaScript\nDESCRIPTION: Illustrates the difference between deep equality (.toEqual) and identity (.toBe) in Jest tests. Requires Jest and two separate objects with the same properties. Tests that two objects with identical properties are considered equal but not strictly the same instance. Inputs are two can objects, outputs are pass/fail results for both equality checks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Timers Using Jest Fake Timers\nDESCRIPTION: A Jest test that uses fake timers to verify that setTimeout is called with the correct parameters. This test demonstrates how to enable fake timers and spy on the setTimeout function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ntest('waits 1 second before ending the game', () => {\n  const timerGame = require('../timerGame');\n  timerGame();\n\n  expect(setTimeout).toHaveBeenCalledTimes(1);\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Exports and Default Exports for Partial Mocking in JavaScript\nDESCRIPTION: This code exports a named constant, a named function, and a default function to illustrate partial mocking scenarios with Jest. No external dependencies. The exports can be individually mocked or left intact depending on the mock configuration in tests. Inputs/outputs not specified; focus is on module structure and demonstration of partial mocking interface.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const foo = 'foo';\nexport const bar = () => 'bar';\nexport default () => 'baz';\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Jest Configuration (JavaScript/TypeScript)\nDESCRIPTION: Shows how to use the `globals` configuration option in Jest to define variables that will be available in the global scope of all test environments. This example defines a global variable `__DEV__` and sets it to `true`. Note that the values must be JSON-serializable; functions cannot be defined here.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Selective Faking of Timer Functions in Jest\nDESCRIPTION: An example showing how to use the doNotFake option to exclude specific functions from being mocked by Jest's fake timers. This allows custom mocking of specific timer functions while using Jest's fakes for others.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nconst mockPerformanceMark = jest.fn();\nwindow.performance.mark = mockPerformanceMark;\n\ntest('allows mocking `performance.mark()`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n\n  expect(window.performance.mark).toBe(mockPerformanceMark);\n});\n```\n\n----------------------------------------\n\nTITLE: Focusing Execution on a Single Test in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates `test.only`. When used, only tests marked with `.only` within that specific file will be executed; all other tests in the same file are skipped. This is primarily used for debugging purposes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\ntest.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Test Sequencer in JavaScript\nDESCRIPTION: Example of a custom test sequencer that extends Jest's default sequencer to sort tests alphabetically by path. It includes methods for sharding test suites and sorting test execution order.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_75\n\nLANGUAGE: js\nCODE:\n```\nconst Sequencer = require('@jest/test-sequencer').default;\n\nclass CustomSequencer extends Sequencer {\n  /**\n   * Select tests for shard requested via --shard=shardIndex/shardCount\n   * Sharding is applied before sorting\n   */\n  shard(tests, {shardIndex, shardCount}) {\n    const shardSize = Math.ceil(tests.length / shardCount);\n    const shardStart = shardSize * (shardIndex - 1);\n    const shardEnd = shardSize * shardIndex;\n\n    return [...tests]\n      .sort((a, b) => (a.path > b.path ? 1 : -1))\n      .slice(shardStart, shardEnd);\n  }\n\n  /**\n   * Sort test to determine order of execution\n   * Sorting is applied after sharding\n   */\n  sort(tests) {\n    // Test structure information\n    // https://github.com/jestjs/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21\n    const copyTests = [...tests];\n    return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));\n  }\n}\n\nmodule.exports = CustomSequencer;\n```\n\n----------------------------------------\n\nTITLE: Manual Mock Implementation\nDESCRIPTION: Shows how to create a manual mock file with exported mock functions for testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with JavaScript\nDESCRIPTION: Example of a basic Jest configuration file using JavaScript. It demonstrates how to export a configuration object with TypeScript type annotations for better IDE support.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  verbose: true,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing DynamoDB Put and Get Operations with Jest (JavaScript)\nDESCRIPTION: Defines a Jest test that inserts an item into the DynamoDB table and verifies retrieval. Uses async/await to handle promises returned by DocumentClient's put and get operations. Expects the stored item to exactly match the inserted object. Assumes that ddb (DocumentClient instance) and Jest testing environment are correctly configured.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/DynamoDB.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('should insert item into table', async () => {\n  await ddb\n    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})\n    .promise();\n\n  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();\n\n  expect(Item).toEqual({\n    id: '1',\n    hello: 'world',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using .toContainEqual Matcher in Jest (JavaScript)\nDESCRIPTION: Shows how to use `.toContainEqual` to check if an array returned by `myBeverages()` contains an object with a specific structure and values ({delicious: true, sour: false}). Unlike `.toContain`, this matcher performs a recursive check on all fields for equality.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Timer Limit in JavaScript Tests\nDESCRIPTION: Demonstrates setting a custom timer limit in Jest using the useFakeTimers API. By specifying {timerLimit: 100}, this code configures Jest to abort timer execution after 100 runs to avoid infinite loops. Requires Jest as the test runner. No inputs or outputs except the timer limit enforcement.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers({timerLimit: 100});\n```\n\n----------------------------------------\n\nTITLE: Using expect.arrayContaining() in Jest Assertions (JavaScript)\nDESCRIPTION: Shows how to use expect.arrayContaining() to check if an array contains all elements of another array. It includes examples of matching arrays with additional elements and handling cases where expected elements are missing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n\ndescribe('Beware of a misunderstanding! A sequence of dice rolls', () => {\n  const expected = [1, 2, 3, 4, 5, 6];\n  it('matches even with an unexpected number 7', () => {\n    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match without an expected number 2', () => {\n    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Mock Implementation with mockImplementation in Jest - JavaScript\nDESCRIPTION: Demonstrates how to use mockImplementation in Jest to override the behavior of a class mock for test setup. The SoundPlayer mock's playSoundFile method is customized to throw an error for the duration of the described test group. This approach is useful when customizing mock behavior on a per-test or per-suite basis, and requires Jest and the relevant modules mocked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('When SoundPlayer throws an error', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Test error');\n        },\n      };\n    });\n  });\n\n  it('Should throw an error when calling playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Return Values with `mockReturnValue` and `mockReturnValueOnce` in JavaScript\nDESCRIPTION: This snippet demonstrates how to control the return values of a Jest mock function. It uses `mockReturnValueOnce()` to specify return values for the first two calls and `mockReturnValue()` to set a default return value for all subsequent calls. The example logs the output of four consecutive calls to show the sequence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\n----------------------------------------\n\nTITLE: Selective Fake Timer Mocking with Jest in JavaScript (jsdom Environment Override)\nDESCRIPTION: Demonstrates how to use the doNotFake option in Jest's useFakeTimers to exclude specific APIs (in this case, the performance API) from being mocked. Sets up a custom mock for window.performance.mark in a jsdom environment and asserts that the custom mock is preserved. Requires Jest, jsdom test environment, and window/performance access. Useful for situations where only selective timer mocking is desired.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nconst mockPerformanceMark = jest.fn();\nwindow.performance.mark = mockPerformanceMark;\n\ntest('allows mocking `performance.mark()`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n\n  expect(window.performance.mark).toBe(mockPerformanceMark);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Mock Implementations in JavaScript\nDESCRIPTION: Demonstrates how to set different implementations for consecutive calls to a mock function using mockImplementationOnce().\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Spying on a Class Prototype Method in Jest using JavaScript\nDESCRIPTION: Illustrates using `jest.spyOn` to monitor calls to a specific method (`playSoundFile`) on a class prototype (`SoundPlayer.prototype`). The `.mockImplementation` part replaces the original method's behavior, while omitting it would only spy. The example shows how to assert that the spied-upon method was called.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('mocked function');\n  }); // comment this line if just want to \"spy\"\n\nit('player consumer plays music', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use a Custom File Transformer (JavaScript)\nDESCRIPTION: Example `jest.config.js` configuration showing how to integrate the custom `fileTransformer.js`. It uses the `transform` option to map a regular expression matching various asset file extensions (images, fonts, media) to the path of the custom transformer (`<rootDir>/fileTransformer.js`), instructing Jest to process these files using it. Requires the `fileTransformer.js` to exist at the specified path relative to the project root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CodeTransformation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Coverage Thresholds in Jest (TypeScript)\nDESCRIPTION: Shows how to define global coverage thresholds (80% for branches, functions, lines; max 10 uncovered statements) within a typed Jest configuration object (`Config`) using TypeScript (ES Module syntax). Jest will fail if these thresholds are not met.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Custom Inline Snapshot Matcher for Trimmed Strings in Jest\nDESCRIPTION: This snippet demonstrates creating a custom inline snapshot matcher that trims the input string to 10 characters. It uses the toMatchInlineSnapshot function from jest-snapshot to handle inline snapshot creation and comparison.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.slice(0, 10), ...rest);\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejection with `.catch` in Jest\nDESCRIPTION: This test case illustrates handling expected promise rejections using the `.catch` method. It calls `user.getUserName(2)`, expecting it to fail, and asserts the error object within the `.catch` block. `expect.assertions(1)` is crucial to verify the catch block was reached, and the promise must be returned.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Testing for async errors using Promise.catch.\nit('tests error with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(2).catch(error =>\n    expect(error).toEqual({\n      error: 'User with 2 not found.',\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing mockResolvedValueOnce for sequential async responses in TypeScript\nDESCRIPTION: TypeScript implementation showing how to type and configure an async mock function to return different Promise values for sequential calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with describe.each Object Format\nDESCRIPTION: Shows how to use describe.each with an array of objects for more readable test parameters. Each object contains named parameters for the test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Puppeteer Test with Jest\nDESCRIPTION: A simple test that uses Puppeteer to navigate to Google.com and verify the page title. Uses the jest-puppeteer preset which automatically exposes the page and browser objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google', () => {\n  beforeAll(async () => {\n    await page.goto('https://google.com');\n  });\n\n  it('should be titled \"Google\"', async () => {\n    await expect(page.title()).resolves.toMatch('Google');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll for Global Test Setup in Jest (JavaScript)\nDESCRIPTION: Illustrates the beforeAll hook to prepare and seed a global resource (such as a database) asynchronously before any tests execute. The snippet leverages promise chaining to ensure setup completeness, with dependencies including asynchronous database functions and Jest global methods. Key parameters involve async setup logic and test callbacks; outputs are side effects establishing initial state for all tests. The setup is performed only once per file or describe block.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Example ES6 Class (SoundPlayer) in JavaScript\nDESCRIPTION: This snippet defines a simple ES6 class named `SoundPlayer`. It has a constructor that initializes a property `foo` and a method `playSoundFile` that logs a message to the console. This class serves as the dependency to be mocked in subsequent examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"sound-player.js\"\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Seed for Jest Test Execution\nDESCRIPTION: Illustrates the usage of the `--seed` CLI option to set a specific seed value (1324) for a Jest test run. Setting a seed ensures reproducible test ordering when tests are shuffled (e.g., with `--randomize`) and can help in debugging flaky tests. The seed value must be within a specific integer range.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njest --seed=1324\n```\n\n----------------------------------------\n\nTITLE: Configuring `forceCoverageMatch` in Jest (JavaScript/TypeScript)\nDESCRIPTION: Demonstrates how to configure the `forceCoverageMatch` option in Jest. This option accepts an array of glob patterns. Files matching these patterns will be included in the code coverage report, even if they are test files that would normally be ignored. The example specifically includes files ending with `.t.js`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using `beforeAll` for Global Setup in Jest (JavaScript)\nDESCRIPTION: Provides an example of the `beforeAll` hook in Jest, used for setting up global state (like initializing a database and seeding test data) before any tests in the file or `describe` block are executed. It demonstrates handling asynchronous setup by returning a promise that Jest waits for.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming an ES6 Class - JavaScript\nDESCRIPTION: Defines a consumer ES6 class, SoundPlayerConsumer, which creates an instance of SoundPlayer and exposes a method playSomethingCool that plays a specific sound file. This code demonstrates how another class might depend on SoundPlayer and is commonly targeted for mocking in tests. It requires SoundPlayer as a dependency and expects sound-player.js to be present.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Less Than or Equal Comparison with toBeLessThanOrEqual in Jest\nDESCRIPTION: This example shows how to use .toBeLessThanOrEqual() to test that a number is less than or equal to an expected value. The test verifies that ouncesPerCan() returns at most 12.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is at most 12', () => {\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Jest Automocking in a Test (JavaScript)\nDESCRIPTION: Demonstrates calling `jest.disableAutomock()` within a Jest test file (`__tests__/disableAutomocking.js`). This ensures that importing `../utils` provides the original module implementation rather than an automatic mock, even if `automock` is globally enabled in the Jest configuration. The test verifies this by asserting the output of the original `authorize` method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport utils from '../utils';\n\njest.disableAutomock();\n\ntest('original implementation', () => {\n  // now we have the original implementation,\n  // even if we set the automocking in a jest configuration\n  expect(utils.authorize()).toBe('token');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Class Constructor with mockImplementation in JavaScript\nDESCRIPTION: Demonstrates how to mock a JavaScript class using `jest.mock` and `mockImplementation`. The `mockImplementation` is applied to the mocked class itself to control what happens when `new SomeClass()` is called, typically returning an object with mock methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code to Launch and Debug Jest (Unix)\nDESCRIPTION: A VS Code `launch.json` configuration to automatically launch Jest tests in debug mode on Unix-like systems. It uses `request: \"launch\"` and specifies `runtimeArgs` to include `--inspect-brk` (start paused for debugger) and `--runInBand` (run tests sequentially). Runs Jest via the `node_modules/.bin/jest` script.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Snapshot Matcher with Bail Out Option\nDESCRIPTION: Presents a custom inline snapshot matcher (`toMatchStateInlineSnapshot`) that prevents Jest from throwing immediately on mismatch by setting `this.dontThrow`. This allows subsequent snapshot checks within the same test to run, but the test will still fail if any mismatch occurs. It's useful for state machine testing where continuing after one failed state might still be desired.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Typo in the implementation should cause the test to fail\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions as expected', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Already produces a mismatch. No point in continuing the test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Execution with Jest Assertions - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates using expect.assertions(number) within a Jest test to ensure that a specific number of assertions are called, which is especially helpful in asynchronous code. The test verifies that both callbacks passed to doAsync are invoked and make assertions. Requires Jest as the testing framework, with doAsync and the callback functions provided or mocked.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('doAsync calls both callbacks', () => {\\n  expect.assertions(2);\\n  function callback1(data) {\\n    expect(data).toBeTruthy();\\n  }\\n  function callback2(data) {\\n    expect(data).toBeTruthy();\\n  }\\n\\n  doAsync(callback1, callback2);\\n});\n```\n\n----------------------------------------\n\nTITLE: Ensuring At Least One Assertion with expect.hasAssertions in JavaScript\nDESCRIPTION: Illustrates using `expect.hasAssertions()` in a Jest test involving asynchronous operations (`prepareState`, `waitOnState`). This verifies that at least one assertion (inside the `prepareState` callback) is executed, confirming the callback ran.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_50\n\nLANGUAGE: js\nCODE:\n```\ntest('prepareState prepares a valid state', () => {\n  expect.hasAssertions();\n  prepareState(state => {\n    expect(validateState(state)).toBeTruthy();\n  });\n  return waitOnState();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Resolution (Extensions & Directories) in JavaScript\nDESCRIPTION: This `jest.config.js` snippet configures Jest's module resolution to align with Webpack settings. `moduleFileExtensions` mirrors Webpack's `resolve.extensions`, and `moduleDirectories` mirrors Webpack's `resolve.modules`. It also includes the `moduleNameMapper` configuration for handling static assets from previous examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Resolver in Jest (JavaScript)\nDESCRIPTION: Example of configuring a custom resolver in Jest using JavaScript. This setup points to a custom resolver file in the project root directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using Environment Options in Test File\nDESCRIPTION: Example of specifying environment options directly in a test file using docblock configuration\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Successful Return Count with .toHaveReturnedTimes in Jest JavaScript Tests\nDESCRIPTION: This snippet illustrates using `.toHaveReturnedTimes` (or its alias `.toReturnTimes`) to assert that a Jest mock function (`jest.fn()`) returned successfully a specific number of times. It verifies that the `drink` mock returned successfully exactly twice.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns twice', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Heavy Tasks in Parallel with Jest Worker in JavaScript\nDESCRIPTION: This sample shows how to set up a JestWorker instance to execute exported methods from a heavy task module in parallel. The code creates a worker from a module path, then dispatches two asynchronous tasks with different arguments using Promise.all. Requires 'jest-worker'; inputs are arguments specific to each task; output is an array of results. Useful for computationally intensive operations needing parallelization.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Test Environment in Test Suite\nDESCRIPTION: Example of implementing a test suite that uses a custom environment through docblock configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment ./my-custom-environment\n */\nlet someGlobalObject;\n\nbeforeAll(() => {\n  someGlobalObject = globalThis.someGlobalObject;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Serializer Implementation\nDESCRIPTION: Example of a custom snapshot serializer that transforms objects with a 'foo' property into a specialized string representation for better readability in snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  serialize(val, config, indentation, depth, refs, printer) {\n    return `Pretty foo: ${printer(val.foo)}`;\n  },\n\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using `mockImplementationOnce` with a Default Mock Implementation in JavaScript\nDESCRIPTION: This example demonstrates the fallback behavior when using `mockImplementationOnce`. A default implementation (`() => 'default'`) is provided via `jest.fn()`. The first two calls use the implementations specified by `.mockImplementationOnce()`. Subsequent calls (the third and fourth) fall back to executing the default implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());\n// > 'first call', 'second call', 'default', 'default'\n```\n\n----------------------------------------\n\nTITLE: Using Inline Object Tables with Jest.each - TypeScript\nDESCRIPTION: Shows TypeScript usage of inlined tables for data-driven tests. The inline object array ensures correct type inference for test parameters, allowing for optional and required properties. Requires Jest and TypeScript support. Inputs and their types are deduced from objects; output is handled by assertions in the callback.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Truthy Values with toBeTruthy in Jest\nDESCRIPTION: Demonstrates using the toBeTruthy matcher to verify a value is true in a boolean context. This is useful when testing code that depends on truthiness rather than specific values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ndrinkSomeLaCroix();\nif (thirstInfo()) {\n  drinkMoreLaCroix();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinking La Croix leads to having thirst info', () => {\n  drinkSomeLaCroix();\n  expect(thirstInfo()).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets in Jest\nDESCRIPTION: Examples of configuring Jest presets, including both npm module presets and filesystem paths to preset files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: 'foo-bar',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: 'foo-bar',\n};\n\nexport default config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: String Pattern and Substring Matching with Jest .toMatch - JavaScript\nDESCRIPTION: Demonstrates how to use .toMatch to check if a string matches a regular expression or contains a substring. Requires a Jest environment; one test uses a function returning a string and checks for the presence of 'grapefruit' with both a regex and a RegExp object, while another checks for a substring using a plain string.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('grapefruits are healthy', () => {\n  test('grapefruits are a fruit', () => {\n    expect('grapefruits').toMatch('fruit');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.each with array of arrays in TypeScript\nDESCRIPTION: Demonstrates how to use test.each with an array of arrays in TypeScript, showing type inference for inline tables and the need for type annotations for separate variables.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.only in jest-each\nDESCRIPTION: Demonstrates how to run only specific parameterized tests using the .only modifier in jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).test.only('returns the result of adding %d to %d', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Timer Functions with Jest's Fake Timers\nDESCRIPTION: A test that uses Jest's fake timers to verify that setTimeout is called with the correct parameters. It demonstrates how to spy on the setTimeout function and make assertions about its usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ntest('waits 1 second before ending the game', () => {\n  const timerGame = require('../timerGame');\n  timerGame();\n\n  expect(setTimeout).toHaveBeenCalledTimes(1);\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Sandboxing Module Loading with jest.isolateModules (JS)\nDESCRIPTION: Demonstrates `jest.isolateModules(fn)`, which executes the provided function `fn` within a sandboxed module registry. Modules required inside the callback (`myModule`) are isolated from modules required outside or in other `isolateModules` blocks (`otherCopyOfMyModule`). This provides stronger module isolation than `jest.resetModules()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nlet myModule;\njest.isolateModules(() => {\n  myModule = require('myModule');\n});\n\nconst otherCopyOfMyModule = require('myModule');\n```\n\n----------------------------------------\n\nTITLE: Using jest-diff to visualize data changes\nDESCRIPTION: This example shows how to use the diff function from jest-diff to compare two objects and generate a formatted visual representation of their differences.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Built-in Plugins with ES2015 Modules - JavaScript\nDESCRIPTION: This example demonstrates using ES2015 (ES6) syntax to import React, react-test-renderer, and both the plugins and format function from pretty-format. The ReactElement and ReactTestComponent plugins are extracted via destructuring. Requires compatible module system and dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n----------------------------------------\n\nTITLE: Manual Jest Mock Implementation for ES6 Class - JavaScript\nDESCRIPTION: Provides a manual Jest mock for the SoundPlayer class using jest.fn and jest.mockImplementation inside __mocks__ directory. Exports a named mockPlaySoundFile for assertion in tests and a default mock constructor. Intended to be imported in test files for fine-grained mocking control. Requires Jest and assumes sound-player.js exists.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Format in Jest - diff\nDESCRIPTION: Demonstrates how to configure Jest's snapshotFormat property to maintain the previous snapshot behavior in Jest 29. Adding escapeString and printBasicPrototype options allows compatibility with snapshots generated in Jest 28. These configuration changes should be placed within the Jest configuration file (e.g., jest.config.js). No dependencies are required beyond Jest itself. Inputs and outputs: key-value pairs under snapshotFormat. Use this to prevent unintentional snapshot updates when upgrading.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UpgradingToJest29.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n+ snapshotFormat: {\n+   escapeString: true,\n+   printBasicPrototype: true\n+ }\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript Volume Class Implementation\nDESCRIPTION: Defines a Volume class with custom equality logic for comparing volumes in different units (L and mL).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Volume {\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString() {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other) {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.unit;\n    } else {\n      return this.amount === other.unit * 1000;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Test Sequencer in Jest\nDESCRIPTION: Example of a custom test sequencer that extends Jest's default sequencer to sort test paths alphabetically and implement custom sharding logic for parallel test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sequencer = require('@jest/test-sequencer').default;\n\nclass CustomSequencer extends Sequencer {\n  /**\n   * Select tests for shard requested via --shard=shardIndex/shardCount\n   * Sharding is applied before sorting\n   */\n  shard(tests, {shardIndex, shardCount}) {\n    const shardSize = Math.ceil(tests.length / shardCount);\n    const shardStart = shardSize * (shardIndex - 1);\n    const shardEnd = shardSize * shardIndex;\n\n    return [...tests]\n      .sort((a, b) => (a.path > b.path ? 1 : -1))\n      .slice(shardStart, shardEnd);\n  }\n\n  /**\n   * Sort test to determine order of execution\n   * Sorting is applied after sharding\n   */\n  sort(tests) {\n    // Test structure information\n    // https://github.com/jestjs/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21\n    const copyTests = [...tests];\n    return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));\n  }\n}\n\nmodule.exports = CustomSequencer;\n```\n\n----------------------------------------\n\nTITLE: Configuring `snapshotSerializers` in Jest (TypeScript)\nDESCRIPTION: Demonstrates configuring the `snapshotSerializers` option in a TypeScript Jest config file (`.ts`) using the `Config` type. It specifies an array of paths to custom snapshot serializer modules that Jest should load and use for snapshot generation and comparison.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Reporter in JavaScript\nDESCRIPTION: This snippet shows how to create a custom reporter for Jest. It demonstrates implementing the necessary methods and handling reporter options and context.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomReporter {\n  constructor(globalConfig, reporterOptions, reporterContext) {\n    this._globalConfig = globalConfig;\n    this._options = reporterOptions;\n    this._context = reporterContext;\n  }\n\n  onRunComplete(testContexts, results) {\n    console.log('Custom reporter output:');\n    console.log('global config:', this._globalConfig);\n    console.log('options for this reporter from Jest config:', this._options);\n    console.log('reporter context passed from test scheduler:', this._context);\n  }\n\n  // Optionally, reporters can force Jest to exit with non zero code by returning\n  // an `Error` from `getLastError()` method.\n  getLastError() {\n    if (this._shouldFail) {\n      return new Error('Custom error reported!');\n    }\n  }\n}\n\nmodule.exports = CustomReporter;\n```\n\n----------------------------------------\n\nTITLE: Custom Jest Snapshot Serializer Module - JavaScript\nDESCRIPTION: This JavaScript file is a custom Jest snapshot serializer, exporting serialize and test functions. The serialize function prettifies the foo property of an object, while test determines applicability by checking for the foo property. This module is intended to be referenced in Jest's snapshotSerializers configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  serialize(val, config, indentation, depth, refs, printer) {\n    return `Pretty foo: ${printer(val.foo)}`;\n  },\n\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo');\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual ES6 Class Mock for SoundPlayer\nDESCRIPTION: This example shows creating a manual mock by defining an ES6 class with the same name in the __mocks__ folder, which will be used instead of the actual class during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer: constructor was called');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer: playSoundFile was called');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getChangedFilesForRoots with changedSince option\nDESCRIPTION: Example of using the getChangedFilesForRoots function with the changedSince option set to 'main'. It returns a Promise that resolves to an object containing repos and changedFiles.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {getChangedFilesForRoots} from 'jest-changed-files';\n\ngetChangedFilesForRoots(['/path/to/test'], {\n  changedSince: 'main',\n}).then(files => {\n  /*\n  {\n    repos: [],\n    changedFiles: []\n  }\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Object with prettyFormat and Custom Plugin (JavaScript)\nDESCRIPTION: Demonstrates invoking prettyFormat with a sample object and the custom array serialization plugin. The result is a formatted string representation with the plugin applied to the 'items' array. Input expects prettyFormat, the val object, and the plugin. The output is a string with custom-formatted arrays as shown in the comment. The pattern illustrates how serialization alters the output format based on plugin logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Testing Value Equality with Jest Matchers in JavaScript\nDESCRIPTION: This snippet shows a straightforward Jest test case verifying the result of an arithmetic operation. It uses Jest's 'expect' API to assert strict value equality with 'toBe'. Jest must be installed and configured. The test receives no parameters and expects '2 + 2' to equal 4.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: This snippet shows how to configure watchPathIgnorePatterns in a Jest configuration file using TypeScript. It ignores changes in the .tmp and bar directories under the root directory when watching for file changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests with Error Logging using jest.retryTimes in JavaScript\nDESCRIPTION: Shows how to use `jest.retryTimes(numRetries, options?)` with the `logErrorsBeforeRetry` option set to `true`. This configuration instructs Jest to log the error(s) that caused the test failure to the console before each retry attempt. Like the basic usage, this must be declared at the top level or within a `describe` block and requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3, {logErrorsBeforeRetry: true});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function-Based Jest Configuration Asynchronously in TypeScript\nDESCRIPTION: This snippet exports an asynchronous function that returns a Jest configuration object in TypeScript, providing type safety via the Jest Config type. The config enables verbose test output. Requires Jest, TypeScript, and ts-node for executing TypeScript config files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nexport default async (): Promise<Config> => {\\n  return {\\n    verbose: true,\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Coverage Thresholds in Jest (JavaScript)\nDESCRIPTION: This JavaScript example demonstrates specifying minimum required coverage thresholds globally in Jest, enforcing branch, function, line, and statement coverage. Negative values (e.g., -10) allow a maximum number of uncovered statements. Place this in your Jest config to fail tests if the coverage is insufficient. Requires Node.js and Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  coverageThreshold: {\\n    global: {\\n      branches: 80,\\n      functions: 80,\\n      lines: 80,\\n      statements: -10,\\n    },\\n  },\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Serializing Complex Objects with pretty-format - JavaScript\nDESCRIPTION: This snippet demonstrates the creation of an object containing circular references, symbol properties, a Map, and special number values. It calls prettyFormat to serialize the object and logs the formatted output. Key input is a complex JavaScript object; output is a string representation with handling of circular references and special types.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Testing with Promises\nDESCRIPTION: Demonstrates testing asynchronous code using promises. Shows how Jest handles promise resolution in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntest('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset in package.json for React Native\nDESCRIPTION: This JSON snippet shows the default Jest configuration added to `package.json` when initializing a React Native project (version 0.38+). It defines a test script using `jest` and sets the `preset` to `react-native`, which provides necessary Jest configurations for testing React Native apps.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Jest APIs in TypeScript\nDESCRIPTION: This TypeScript snippet shows the required import statement to bring Jest's global functions (`expect`, `jest`, `test`) into the scope of a TypeScript file. This is necessary for TypeScript projects to recognize and correctly type these Jest APIs, ensuring the examples work as documented. Refer to the Jest Getting Started guide for full TypeScript setup details.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/_TypeScriptExamplesNote.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Callbacks with expect.assertions\nDESCRIPTION: Demonstrates how to verify that a specific number of assertions are called in asynchronous tests using expect.assertions(number).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ntest('doAsync calls both callbacks', () => {\n  expect.assertions(2);\n  function callback1(data) {\n    expect(data).toBeTruthy();\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy();\n  }\n\n  doAsync(callback1, callback2);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing enableAutomock with Jest - JavaScript\nDESCRIPTION: Shows a test file where jest.enableAutomock is called to enable automocking before importing a utility module. It tests that the imported functions become mock functions as indicated by the _isMockFunction property. Requires Jest and the respective utility module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.enableAutomock();\\n\\nimport utils from '../utils';\\n\\ntest('original implementation', () => {\\n  // now we have the mocked implementation,\\n  expect(utils.authorize._isMockFunction).toBeTruthy();\\n  expect(utils.isAuthorized._isMockFunction).toBeTruthy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Validating User Configurations with jest-validate in JavaScript\nDESCRIPTION: Shows how to use the `validate` function from the `jest-validate` package to compare a user-provided configuration object (`configByUser`) against a reference configuration (`exampleConfig`) and options. It requires the `jest-validate` package. The function returns an object indicating if the configuration is valid (`isValid`) and if it contains any deprecation warnings (`hasDeprecationWarnings`), which is then logged.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter with Silent Reporter in Jest (JavaScript)\nDESCRIPTION: Example of using the Summary Reporter alongside the Silent Reporter in Jest configuration using JavaScript. This setup prints out a summary of all tests without detailed output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resolver for Jest\nDESCRIPTION: Example of creating a custom resolver for Jest that respects Browserify's 'browser' field. This resolver uses the browser-resolve package to handle module resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\n----------------------------------------\n\nTITLE: Mocking Option 2: Render Mock as Custom Element (TSX)\nDESCRIPTION: Another workaround for the mocking warning: mock the component to a function returning a custom element (lowercase name with a dash). React doesn't validate custom elements strictly, thus preventing the warning while still allowing props to potentially be inspected in the snapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\njest.mock('./Widget', () => () => <mock-widget />);\n```\n\n----------------------------------------\n\nTITLE: Defining an ES6 Class - JavaScript\nDESCRIPTION: Defines an ES6 class named SoundPlayer with a constructor and playSoundFile method. The class initializes a property and logs to the console when playSoundFile is called. This module is intended to be imported by other modules for sound file operations. It has no external dependencies and expects a single fileName parameter (string) for the playSoundFile method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Coverage Thresholds in Jest (JavaScript)\nDESCRIPTION: Demonstrates setting global minimum percentage thresholds for branches, functions, and lines (80%) and a maximum allowed number of uncovered statements (-10) using the `coverageThreshold.global` object in a Jest configuration file (CommonJS module). Jest will fail if these thresholds are not met.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing the `run` Method for Watch Plugin Actions in JavaScript\nDESCRIPTION: This snippet illustrates the `run` method signature in a Jest watch plugin. This method is executed when the user presses the key defined in `getUsageInfo`, receiving the `globalConfig` and an `updateConfigAndRun` function to potentially trigger new test runs with updated configurations. It should return a Promise resolving to a boolean indicating if Jest should rerun tests upon completion (return false if `updateConfigAndRun` is called).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  run(globalConfig, updateConfigAndRun) {\n    // do something.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Volume Equality Tester with Jest - TypeScript\nDESCRIPTION: This TypeScript code defines a function areVolumesEqual for deep equality checking of Volume objects and registers it with expect.addEqualityTesters. The function handles objects of type Volume, delegating when not relevant, and ensures cross-unit equivalence. Dependencies include @jest/globals and the Volume class, assumed available in the test project.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {expect} from '@jest/globals';\\nimport {Volume} from './Volume.js';\\n\\nfunction areVolumesEqual(a: unknown, b: unknown): boolean | undefined {\\n  const isAVolume = a instanceof Volume;\\n  const isBVolume = b instanceof Volume;\\n\\n  if (isAVolume && isBVolume) {\\n    return a.equals(b);\\n  } else if (isAVolume === isBVolume) {\\n    return undefined;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nexpect.addEqualityTesters([areVolumesEqual]);\n```\n\n----------------------------------------\n\nTITLE: Testing Floating Point Equality with toBeCloseTo in Jest\nDESCRIPTION: Demonstrates the use of toBeCloseTo matcher for comparing floating point numbers in Jest, avoiding issues with rounding errors.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Recursive Timer Function in JavaScript\nDESCRIPTION: This snippet defines a JavaScript function `infiniteTimerGame` that uses nested `setTimeout` calls to create a recursive timer. After an initial 1-second delay, it calls the provided callback and then schedules itself to run again after a 10-second delay. The function is exported using `module.exports`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction infiniteTimerGame(callback) {\n  console.log('Ready....go!');\n\n  setTimeout(() => {\n    console.log(\"Time's up! 10 seconds before the next game starts...\");\n    callback && callback();\n\n    // Schedule the next game in 10 seconds\n    setTimeout(() => {\n      infiniteTimerGame(callback);\n    }, 10000);\n  }, 1000);\n}\n\nmodule.exports = infiniteTimerGame;\n```\n\n----------------------------------------\n\nTITLE: Mocking a Specific Method of a Class with Jest.spyOn\nDESCRIPTION: Example of using jest.spyOn to mock a specific method of a class while leaving the rest of the class implementation intact. The example mocks the playSoundFile method of the SoundPlayer class.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('mocked function');\n  }); // comment this line if just want to \"spy\"\n\nit('player consumer plays music', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Script in package.json\nDESCRIPTION: This JSON snippet shows how to add a `test` script to the `scripts` section of a `package.json` file. This allows running Jest tests using package managers like npm (`npm test`) or yarn (`yarn test`) by simply executing `jest`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing and Testing Errors using Jest Snapshots in JavaScript\nDESCRIPTION: Illustrates how to define a function that throws a custom error and test that it throws an error which matches a stored Jest snapshot. Requires Jest and a custom error constructor (DisgustingFlavorError). The test verifies that invoking drinkFlavor with 'octopus' results in an error that matches the saved snapshot. Inputs include a flavor string; the output is assertion validation against the snapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports[`drinking flavors throws on octopus 1`] = `\"yuck, octopus flavor\"`;\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Tables Configuration (JavaScript)\nDESCRIPTION: Exports a configuration object for the jest-dynamodb preset to define test DynamoDB tables and their schema. This should be placed in a file, e.g., jest-dynamodb-config.js, referenced by the preset. Key parameters include table names, key schema, attribute definitions, and provisioned throughput. These settings determine how test tables will be created at environment startup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/DynamoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tables: [\n    {\n      TableName: `files`,\n      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],\n      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n    },\n    // etc\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Projects using Configuration Objects in TypeScript\nDESCRIPTION: Demonstrates using the `projects` option in Jest TypeScript configuration (with `Config` type) with an array of project configuration objects. This facilitates running multiple distinct test setups, like standard tests and linting using `jest-runner-eslint`, in one command. Project-specific options such as `displayName` and `runner` can be defined.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_60\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Exporting Async Jest Configuration Function in JavaScript\nDESCRIPTION: Illustrates exporting an asynchronous function from a `jest.config.js` file that returns a Promise resolving to a Jest configuration object. This allows for dynamic or computed configurations. Sets `verbose` to `true`. Uses JSDoc for type hinting the return type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @returns {Promise<import('jest').Config>} */\nmodule.exports = async () => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Puppeteer Test with Jest (JavaScript)\nDESCRIPTION: Defines an end-to-end test using Jest and Puppeteer with globally exposed browser instances. No imports are required as configuration ensures Puppeteer's page and browser are available. The test navigates to Google and asserts the page title. 'describe', 'beforeAll', and 'it' are Jest hooks; 'page' is a Puppeteer Page instance. Ensure preset configuration is active before running this test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google', () => {\n  beforeAll(async () => {\n    await page.goto('https://google.com');\n  });\n\n  it('should be titled \"Google\"', async () => {\n    await expect(page.title()).resolves.toMatch('Google');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock Method That Returns This in Jest (Chaining Support) in JavaScript\nDESCRIPTION: Explains creating a mock method that always returns its context (this), either with jest's mockReturnThis or by explicit function definition. Enables fluent/chaining API style testing. Requires only Jest for mockReturnThis usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myObj = {\n  myMethod: jest.fn().mockReturnThis(),\n};\n\n// is the same as\n\nconst otherObj = {\n  myMethod: jest.fn(function () {\n    return this;\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Advancing Timers by Specific Time in Jest\nDESCRIPTION: A Jest test demonstrating how to advance timers by a specific amount of time using jest.advanceTimersByTime(). This allows for more granular control over time progression in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.advanceTimersByTime(1000);\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic HTTP Request Function in JavaScript\nDESCRIPTION: This snippet shows the implementation of `request.js`. It exports a default function that takes a URL, performs an HTTP GET request using Node.js's built-in `http` module, and returns a Promise. The promise resolves with the aggregated response data when the request ends. This module is intended to be mocked in tests to avoid actual network requests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst http = require('http');\n\nexport default function request(url) {\n  return new Promise(resolve => {\n    // This is an example of an http request, for example to fetch\n    // user data from an API.\n    // This module is being mocked in __mocks__/request.js\n    http.get({path: url}, response => {\n      let data = '';\n      response.on('data', _data => (data += _data));\n      response.on('end', () => resolve(data));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Test Implementation\nDESCRIPTION: Test file showing how to create snapshot tests for React Native components using Jest\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReactNative.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Intro from '../Intro';\n\ntest('renders correctly', () => {\n  const tree = renderer.create(<Intro />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `preset` using a relative path in Jest (TypeScript)\nDESCRIPTION: Sets the `preset` option in `jest.config.ts` using TypeScript, specifying a relative filesystem path to a preset file. The path resolution considers the project's `rootDir` if set.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Options in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to configure test environment options in Jest, specifically for the 'jsdom' environment. This example sets custom HTML, URL, and user agent.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Contexts with mock.contexts in JavaScript\nDESCRIPTION: Demonstrates how `mock.contexts` array stores the `this` context for each call to a Jest mock function (`jest.fn()`). It shows examples using `Function.prototype.bind`, `Function.prototype.call`, and `Function.prototype.apply` to set the context and verifies the stored contexts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n----------------------------------------\n\nTITLE: Grouping Parameterized Tests with `each`.describe in Jest (JavaScript)\nDESCRIPTION: This snippet reiterates the usage of Jest's `each` with a tagged template literal for defining parameterized test suites via `.describe`. It defines data (`a`, `b`, `expected`) in a table format. The `describe` function's title uses variable injection (`$a + $b`), and its suite function receives data for each row as an object (`{a, b, expected}`). Multiple `test` cases related to the same data row can be grouped within this suite function.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import and Mocking of ES6 Modules Using jest.doMock in JavaScript\nDESCRIPTION: This example demonstrates using jest.doMock in conjunction with ES6 dynamic imports to mock modules with default and named exports. The __esModule property is set to true to ensure compatibility with dynamic imports; requires an environment with dynamic import support (such as Babel with babel-plugin-dynamic-import-node). Each test dynamically imports the mocked module and verifies returned values.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default1',\n      foo: 'foo1',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default1');\n    expect(moduleName.foo).toBe('foo1');\n  });\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default2',\n      foo: 'foo2',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default2');\n    expect(moduleName.foo).toBe('foo2');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Range Matcher in JavaScript\nDESCRIPTION: Test cases demonstrating the usage of the custom toBeWithinRange matcher, including regular and asymmetric matching scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Static and Getter Methods of a Class in Jest using JavaScript\nDESCRIPTION: Demonstrates how to use `jest.spyOn` to spy on or mock static methods (by targeting the class itself, e.g., `SoundPlayer`) and getter methods (by targeting the prototype and providing 'get' as the third argument, e.g., `SoundPlayer.prototype, 'foo', 'get'`). The example includes assertions to verify these methods were called.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Object Equality Testing with Jest in JavaScript\nDESCRIPTION: This snippet tests deep equality of objects using Jest's 'toEqual' matcher in a unit test. The test builds a JavaScript object, mutates it, then asserts that its structure matches the expected object. Requires Jest setup. The key parameters are the object structures; it compares actual and expected for recursive key equivalence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UsingMatchers.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/preset-env Using npm for Babel Setup\nDESCRIPTION: Installs the @babel/preset-env package as a development dependency with npm, required for Babel to target modern JavaScript versions during Jest processing. Use prior to configuring Babel with jest and babel-jest. Requires Node.js and npm.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: ESLint Config Using eslint-plugin-jest - JSON\nDESCRIPTION: Illustrates an ESLint override that enables the 'jest' plugin and the 'jest/globals' environment for test files. Useful for teams wishing to leverage plugin-provided lint rules and suggestions specific to Jest. Must be placed within an ESLint configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"plugins\": [\"jest\"],\n      \"env\": {\n        \"jest/globals\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotSerializers in JavaScript\nDESCRIPTION: Example of configuring custom snapshot serializers in Jest configuration to use custom serialization logic for specific object types when creating snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Mocking Various Data Types with createMockFromModule\nDESCRIPTION: Comprehensive example demonstrating how jest.createMockFromModule() mocks different data types including functions, classes, objects, arrays, and primitives.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  function: function square(a, b) {\n    return a * b;\n  },\n  asyncFunction: async function asyncSquare(a, b) {\n    const result = (await a) * b;\n    return result;\n  },\n  class: new (class Bar {\n    constructor() {\n      this.array = [1, 2, 3];\n    }\n    foo() {}\n  })(),\n  object: {\n    baz: 'foo',\n    bar: {\n      fiz: 1,\n      buzz: [1, 2, 3],\n    },\n  },\n  array: [1, 2, 3],\n  number: 123,\n  string: 'baz',\n  boolean: true,\n  symbol: Symbol.for('a.b.c'),\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst example = jest.createMockFromModule('../example');\n\ntest('should run example code', () => {\n  // creates a new mocked function with no formal arguments.\n  expect(example.function.name).toBe('square');\n  expect(example.function).toHaveLength(0);\n\n  // async functions get the same treatment as standard synchronous functions.\n  expect(example.asyncFunction.name).toBe('asyncSquare');\n  expect(example.asyncFunction).toHaveLength(0);\n\n  // creates a new class with the same interface, member functions and properties are mocked.\n  expect(example.class.constructor.name).toBe('Bar');\n  expect(example.class.foo.name).toBe('foo');\n  expect(example.class.array).toHaveLength(0);\n\n  // creates a deeply cloned version of the original object.\n  expect(example.object).toEqual({\n    baz: 'foo',\n    bar: {\n      fiz: 1,\n      buzz: [],\n    },\n  });\n\n  // creates a new empty array, ignoring the original array.\n  expect(example.array).toHaveLength(0);\n\n  // creates a new property with the same primitive value as the original property.\n  expect(example.number).toBe(123);\n  expect(example.string).toBe('baz');\n  expect(example.boolean).toBe(true);\n  expect(example.symbol).toEqual(Symbol.for('a.b.c'));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Floating Point Equality with Jest in JavaScript\nDESCRIPTION: Highlights the importance of using \".toBeCloseTo\" for comparing floating point numbers in Jest. The test demonstrates that direct equality fails due to rounding errors, while \".toBeCloseTo\" correctly asserts near-equality. Intended for situations involving floating-point arithmetic where exact matches are unreliable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UsingMatchers.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n----------------------------------------\n\nTITLE: Launching and Debugging Jest Tests in VS Code (JSON)\nDESCRIPTION: Provides a `launch.json` configuration for Visual Studio Code that automatically starts Jest tests with debugging enabled. It uses `runtimeArgs` to pass `--inspect-brk` (start paused) and `--runInBand` (run sequentially) to the Node.js process executing the Jest binary. Console output is shown in the integrated terminal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Preset (TypeScript)\nDESCRIPTION: TypeScript version of configuring a preset in Jest. It demonstrates how to specify a preset from an npm module or a local file path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: 'foo-bar',\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Mocking Request Module\nDESCRIPTION: Manual mock implementation of the request module that returns predefined user data instead of making network requests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = {\n  4: {name: 'Mark'},\n  5: {name: 'Paul'},\n};\n\nexport default function request(url) {\n  return new Promise((resolve, reject) => {\n    const userID = parseInt(url.slice('/users/'.length), 10);\n    process.nextTick(() =>\n      users[userID]\n        ? resolve(users[userID])\n        : reject({\n            error: `User with ${userID} not found.`,\n          }),\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Node.js with Jest - JavaScript\nDESCRIPTION: Provides a Babel configuration file that configures the '@babel/preset-env' preset to target the current Node.js version. Suitable for projects using Jest with Babel. Inputs are preset configuration options; output is a CommonJS exported config object in 'babel.config.js'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],\n};\n```\n\n----------------------------------------\n\nTITLE: Debugging Jest Tests with Node.js Inspect\nDESCRIPTION: Run Jest tests with Node.js debugging enabled, allowing external debuggers to connect. This method pauses execution until a debugger is attached.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Returning a Value with mockReturnValue in Jest JavaScript\nDESCRIPTION: Demonstrates that mockReturnValue is a shorthand over mockImplementation returning a fixed value. Shows code equivalent for invoking mockReturnValue.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.fn().mockImplementation(() => value);\n```\n\n----------------------------------------\n\nTITLE: Using Mock Functions with Array Filter\nDESCRIPTION: Demonstrates how to use mock functions with array filtering to test functional continuation-passing style code.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\n----------------------------------------\n\nTITLE: Focusing Parameterized Test Suites with `each`.describe.only in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to use `.describe.only` (or alias `.fdescribe`) with Jest's `each` and tagged template literals. This focuses the test runner exclusively on the parameterized test suite generated by this `each` block, skipping all other `describe` blocks and top-level tests. The data definition and suite function structure remain the same.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.only('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Module Factory with jest.mock() in JavaScript\nDESCRIPTION: Shows how to use jest.mock() with a custom module factory function to return a specific value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Mocking Per-Call Implementations with mockImplementationOnce in Jest TypeScript\nDESCRIPTION: TypeScript variant of assigning sequential implementations to a mock using mockImplementationOnce. Utilizes function typing for clarity and safety. Suitable for controlled simulation of different responses in a test series.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Focusing Data-Driven Tests with describe.only.each (Template Literal) in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `describe.only.each` with a tagged template literal (`table`) to focus execution on a specific suite of data-driven tests. Variables like `$a`, `$b`, `$expected` are interpolated into the title, and the data object is passed to the test function. Other tests or suites are skipped.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ndescribe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Jest Fake Timer Configuration\nDESCRIPTION: Provides the TypeScript type definitions related to Jest's fake timer configuration. `FakeableAPI` lists the timer and asynchronous function APIs that can be faked. `ModernFakeTimersConfig` details the configuration options available for the modern fake timers implementation, including `advanceTimers`, `doNotFake`, `enableGlobally`, `legacyFakeTimers`, `now`, and `timerLimit`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype ModernFakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /** Whether fake timers should be enabled for all test files. The default is `false`. */\n  enableGlobally?: boolean;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number;\n  /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Using diffStringsUnified for Character-by-Character Comparison\nDESCRIPTION: Example demonstrating how to use diffStringsUnified() to compare two strings character-by-character. This function compares strings, cleans up small common substrings, and formats the changes with appropriate color highlighting.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 'common\\nchanged from';\nconst b = 'common\\nchanged to';\n\nconst difference = diffStringsUnified(a, b);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Reporter in JavaScript\nDESCRIPTION: Custom reporter implementation that shows how to create a reporter class with onRunComplete and getLastError methods. This example logs configuration details and can optionally force Jest to exit with an error code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomReporter {\n  constructor(globalConfig, reporterOptions, reporterContext) {\n    this._globalConfig = globalConfig;\n    this._options = reporterOptions;\n    this._context = reporterContext;\n  }\n\n  onRunComplete(testContexts, results) {\n    console.log('Custom reporter output:');\n    console.log('global config:', this._globalConfig);\n    console.log('options for this reporter from Jest config:', this._options);\n    console.log('reporter context passed from test scheduler:', this._context);\n  }\n\n  // Optionally, reporters can force Jest to exit with non zero code by returning\n  // an `Error` from `getLastError()` method.\n  getLastError() {\n    if (this._shouldFail) {\n      return new Error('Custom error reported!');\n    }\n  }\n}\n\nmodule.exports = CustomReporter;\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Babel Transformation in Jest\nDESCRIPTION: Jest configuration that explicitly resets the transform option to prevent automatic transformation of files by babel-jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Reporter in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the GitHub Actions reporter in Jest, with options to control output and include a summary reporter. It shows the use of reporter options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Verifying Mock Function Successful Return with expect.toHaveReturned\nDESCRIPTION: Shows how to use the `toHaveReturned` matcher (alias `toReturn`) in Jest to assert that a mock function (`jest.fn()`) completed execution without throwing an error at least once. The example checks if a simple mock `drink` function returned successfully.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ntest('drinks returns', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.Mock<T> for recursive mock functions in TypeScript\nDESCRIPTION: Demonstrates how to define the type of a recursive mock function using jest.Mock<T>, ensuring proper type checking for recursive function calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    return value + fn(value - 1);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Heavy Task Worker Module with Jest Worker in JavaScript\nDESCRIPTION: This code defines a Node.js module exporting a CPU-intensive task method for offloading to worker processes using 'jest-worker'. The method (myHeavyTask) simulates a long-running asynchronous job accessible via JestWorker. Input is an arguments object; intended for use with the 'jest-worker' manager. There are no outputs in this stub, but real implementations should process inputs and return results.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Timer Game Function in JavaScript\nDESCRIPTION: A function that uses recursive setTimeout calls to create a repeating timer. This is a common pattern for implementing game loops or periodic background tasks that need to be tested.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction infiniteTimerGame(callback) {\n  console.log('Ready....go!');\n\n  setTimeout(() => {\n    console.log(\"Time's up! 10 seconds before the next game starts...\");\n    callback && callback();\n\n    // Schedule the next game in 10 seconds\n    setTimeout(() => {\n      infiniteTimerGame(callback);\n    }, 10000);\n  }, 1000);\n}\n\nmodule.exports = infiniteTimerGame;\n```\n\n----------------------------------------\n\nTITLE: Resetting Module Cache with jest.resetModules in JavaScript\nDESCRIPTION: Illustrates the use of `jest.resetModules()` to clear Node's `require` cache within a Jest test environment. By requiring the 'react' module before and after the reset, the example shows that two distinct instances of the React module are created (`React1 !== React2`). This is useful for testing modules with side effects or internal state that needs to be isolated between tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-09-01-jest-15.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst React1 = require('react');\njest.resetModules();\nconst React2 = require('react');\n\nReact1 !== React2; // These two are separate copies of React.\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Static and Getter Methods - JavaScript Class Example\nDESCRIPTION: Defines a JavaScript class SoundPlayer with a constructor, standard method, getter, and static method to demonstrate targets for mocking and spying in tests. No external dependencies needed. Inputs are instance method calls or static method calls; outputs are string results or side effects (e.g., console logs).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock from a Module in TypeScript\nDESCRIPTION: Example of using jest.createMockFromModule() to create a mock version of a module in TypeScript. This snippet demonstrates how to extend the automatic mock's behavior with a custom implementation in a typed environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const utils = {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: (secret: string) => secret === 'wizard',\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst {utils} =\n  jest.createMockFromModule<typeof import('../utils')>('../utils');\n\nutils.isAuthorized = jest.fn((secret: string) => secret === 'not wizard');\n\ntest('implementation created by jest.createMockFromModule', () => {\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\n  expect(utils.isAuthorized('not wizard')).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Snapshot Serializer in JavaScript for Jest\nDESCRIPTION: Demonstrates a JavaScript module (`custom-serializer.js`) implementing a custom snapshot serializer for Jest. It exports a `test` function to determine if the serializer applies to a given value (checking for a 'foo' property) and a `serialize` function to define the custom string representation for the snapshot, utilizing the provided `printer` function for nested serialization.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  serialize(val, config, indentation, depth, refs, printer) {\n    return `Pretty foo: ${printer(val.foo)}`;\n  },\n\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Testing Callbacks in Jest (JavaScript)\nDESCRIPTION: Illustrates a common mistake when testing asynchronous code using callbacks. The test completes execution as soon as `fetchData` returns, before the callback is invoked, potentially leading to false positives. This pattern should be avoided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Don't do this!\ntest('the data is peanut butter', () => {\n  function callback(error, data) {\n    if (error) {\n      throw error;\n    }\n    expect(data).toBe('peanut butter');\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Object and Primitive Equality with Jest - JavaScript\nDESCRIPTION: This snippet illustrates the difference between .toEqual and .toBe in Jest. .toEqual checks for deep equality, comparing properties recursively, while .toBe checks for object identity. The example uses two objects with the same properties and verifies they are deeply equal but not the same object. Dependencies: Jest. Inputs are defined objects; outputs are assertion results on equality and identity.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with jest.mocked() Helper in TypeScript\nDESCRIPTION: Demonstrates usage of jest.mocked() for type-safe mocking, including deep method mocking and direct console.log mocking. Shows both explicit mocked type casting and helper function usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking ESM Modules Using jest.unstable_mockModule - JavaScript\nDESCRIPTION: This snippet shows how to mock ECMAScript modules using the experimental jest.unstable_mockModule API. The factory function provided is required and can be asynchronous. Here, the Node 'child_process' module is mocked, and its execSync method is replaced with a Jest mock function. The test then dynamically imports the module to use the mocked version. Requires Jest v28+ and that the test environment supports ESM and uses '--experimental-vm-modules'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ECMAScriptModules.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {jest} from '@jest/globals';\\n\\njest.unstable_mockModule('node:child_process', () => ({\\n  execSync: jest.fn(),\\n  // etc.\\n}));\\n\\nconst {execSync} = await import('node:child_process');\\n\\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for File Extensions and Directories\nDESCRIPTION: Configuration that sets moduleFileExtensions and moduleDirectories to match webpack's modules and extensions settings. This helps Jest find the right files for testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Jest Preset\nDESCRIPTION: Shows how to configure Jest to use a preset as a base configuration. A preset points to an npm module with a jest-preset file at the root, and can be specified either by module name or file path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: 'foo-bar',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: 'foo-bar',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Out-of-Scope Error with jest.mock() Factory\nDESCRIPTION: This snippet demonstrates a potential error when using `jest.mock()` with a module factory. Accessing an external variable (`fakePlaySoundFile`) not prefixed with `mock` inside the factory leads to an out-of-scope error because `jest.mock` calls are hoisted.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// Note: this will fail\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring `forceCoverageMatch` in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `forceCoverageMatch` option in a Jest configuration file (`jest.config.js`). It uses a glob pattern ('**/*.t.js') to ensure that files ending with `.t.js`, which might otherwise be ignored, are included in the code coverage report.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Asserting String Equality with expect.toBe in JavaScript\nDESCRIPTION: Demonstrates a basic Jest test using `expect` and the `toBe` matcher to assert that the value returned by `bestLaCroixFlavor()` is exactly equal to the string 'grapefruit'. The `expect` function takes the value to be tested, and `toBe` takes the expected value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntest('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating a Single Jest Test for Debugging using test.only (JavaScript)\nDESCRIPTION: Provides a common debugging technique for Jest tests. By temporarily changing `test` to `test.only`, you can instruct Jest to run only that specific test and skip all others in the file, helping to isolate failures caused by interactions between tests or shared state issues.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SetupAndTeardown.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers in Jest - JavaScript\nDESCRIPTION: Shows how to enable the old Jest fake timers implementation using legacyFakeTimers: true, necessary for compatibility with tests that require legacy behavior. Requires Jest. Inputs: config object with legacyFakeTimers true. Outputs: none directly; modifies global timer environment for subsequent tests. Cannot be combined with other fake timer configuration options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers({\n  legacyFakeTimers: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with eslint-plugin-jest\nDESCRIPTION: This JSON snippet demonstrates configuring ESLint using the `eslint-plugin-jest` plugin. By adding `\"plugins\": [\"jest\"]` and setting `\"env\": { \"jest/globals\": true }` in an override for test files, it enables Jest-specific linting rules and recognizes Jest global variables, preventing `no-undef` errors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"plugins\": [\"jest\"],\n      \"env\": {\n        \"jest/globals\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Jest Mocks with mockImplementation in JavaScript Tests\nDESCRIPTION: Demonstrates how to change the behavior of an existing Jest mock dynamically within a test suite. After initially mocking `SoundPlayer` with `jest.mock`, `SoundPlayer.mockImplementation()` is called inside a `beforeAll` block to provide a specific implementation for the tests within that `describe` block. In this case, the `playSoundFile` method is reimplemented to throw an error, allowing testing of error handling in `SoundPlayerConsumer`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('When SoundPlayer throws an error', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Test error');\n        },\n      };\n    });\n  });\n\n  it('Should throw an error when calling playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Volume Equality Tester with Jest - JavaScript\nDESCRIPTION: This JavaScript snippet defines the areVolumesEqual function for comparing Volume objects, and registers it as a Jest custom equality tester using expect.addEqualityTesters. The function handles comparisons between Volume instances and returns either the result, undefined (to delegate), or false. It requires @jest/globals and the Volume class for proper operation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {expect} from '@jest/globals';\\nimport {Volume} from './Volume.js';\\n\\nfunction areVolumesEqual(a, b) {\\n  const isAVolume = a instanceof Volume;\\n  const isBVolume = b instanceof Volume;\\n\\n  if (isAVolume && isBVolume) {\\n    return a.equals(b);\\n  } else if (isAVolume === isBVolume) {\\n    return undefined;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nexpect.addEqualityTesters([areVolumesEqual]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Recursive Timer Function in JavaScript\nDESCRIPTION: A sample function with recursive timers that schedules itself to run again after completion. This pattern requires special handling in Jest tests to prevent infinite timer execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction infiniteTimerGame(callback) {\n  console.log('Ready....go!');\n\n  setTimeout(() => {\n    console.log(\"Time's up! 10 seconds before the next game starts...\");\n    callback && callback();\n\n    // Schedule the next game in 10 seconds\n    setTimeout(() => {\n      infiniteTimerGame(callback);\n    }, 10000);\n  }, 1000);\n}\n\nmodule.exports = infiniteTimerGame;\n```\n\n----------------------------------------\n\nTITLE: Installing node-notifier for Jest Notifications\nDESCRIPTION: Command to install the node-notifier package, which is required for Jest's native OS notifications feature. This package must be installed separately when the notify option is enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev node-notifier\n```\n\n----------------------------------------\n\nTITLE: Attaching Lifecycle Hooks to Jest with the apply() Method (JavaScript)\nDESCRIPTION: This snippet highlights the minimal implementation of an `apply` method for a Jest watch plugin. The function receives the `jestHooks` interface, which is used to bind to Jest events. A plugin must implement this method to subscribe to hooks such as `shouldRunTestSuite`, `onTestRunComplete`, and `onFileChange`. The code provides a template for developers, requiring further expansion for operational features.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Mock Implementation using an ES6 Class in JavaScript\nDESCRIPTION: Provides an alternative manual mock strategy where a complete ES6 class is defined in `__mocks__/sound-player.js`. This class (`SoundPlayer`) replaces the original when imported in tests. It includes `console.log` statements in its constructor and `playSoundFile` method to indicate usage during tests. While allowing for custom behavior injection, this approach doesn't offer the built-in call tracking features of Jest's mock functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"__mocks__/sound-player.js\"\nexport default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer: constructor was called');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer: playSoundFile was called');\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the `shouldRunTestSuite` Hook in a Jest Watch Plugin (JavaScript)\nDESCRIPTION: This example shows how to implement the `jestHooks.shouldRunTestSuite` hook within the `apply` method. It demonstrates returning a boolean or a Promise<boolean> to control whether a specific test suite should be executed based on its `testPath`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return testSuiteInfo.testPath.includes('my-keyword');\n    });\n\n    // or a promise\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Default Class Export Mocking\nDESCRIPTION: Example of mocking a class that is not the default export, requiring proper object structure with matching export names.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Mock Function Instantiation and `this` Context in JavaScript\nDESCRIPTION: Demonstrates accessing the `.mock.instances` property to check objects created when a mock function is used as a constructor (`new myMock1()`) and the `.mock.contexts` property to inspect the `this` value the mock function was called with (e.g., after using `.bind()`). This relies on Jest's `jest.fn()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Thresholds in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up coverage thresholds in Jest configuration. It includes global thresholds and specific thresholds for different file paths and globs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jest Tests with Error Logging in JavaScript\nDESCRIPTION: This snippet shows how to use `jest.retryTimes()` with an options object. By setting `logErrorsBeforeRetry: true`, the error that caused the test failure will be logged to the console before each retry attempt. The test itself is designed to fail, demonstrating the retry and logging behavior. This function must be called at the top level or within a `describe` block and requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n```js\njest.retryTimes(3, {logErrorsBeforeRetry: true});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Jest Constructor Type Matching\nDESCRIPTION: Examples of using expect.any() to match instances of specific classes or primitive types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nclass Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Cat));\n});\n\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Number));\n});\n```\n\n----------------------------------------\n\nTITLE: Negated Partial Object Matching with expect.not.objectContaining in JavaScript\nDESCRIPTION: Provides an example for using expect.not.objectContaining to ensure an object does not have certain properties. The supplied Jest describe/it block confirms the actual object is lacking a specified key-value pair. Useful for asserting absence and exclusion criteria. No additional setup is needed apart from Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('not.objectContaining', () => {\n  const expected = {foo: 'bar'};\n\n  it('matches if the actual object does not contain expected key: value pairs', () => {\n    expect({bar: 'baz'}).toEqual(expect.not.objectContaining(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Temporarily Changing Mock Implementation Synchronously with withImplementation in Jest (JS)\nDESCRIPTION: Shows how to use `withImplementation` to temporarily replace the mock function's implementation only for the duration of the provided synchronous callback function. The original implementation is restored immediately after the callback finishes execution. Requires a Jest mock function.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\ntest('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Object-Based Parameterized Testing with jest-each\nDESCRIPTION: Shows how to use jest-each with named parameters in object format, allowing more readable test titles with variable substitution.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n]).test('returns the result of adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tests Expected to Fail in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates `test.failing`. These tests pass only if they throw an error and fail if they complete without throwing. This is useful for testing error conditions or for Behavior-Driven Development (BDD) where tests are written before the implementation. Requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\ntest.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest.mock() with a Module Factory for SoundPlayer\nDESCRIPTION: This example shows how to use jest.mock() with a module factory function that returns a mock constructor, allowing direct access to the mock method.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Last Mock Return Value with Jest in JavaScript\nDESCRIPTION: Demonstrates using the `.toHaveLastReturnedWith()` matcher in Jest to verify the value returned by the most recent call to a mock function. It sets up a mock function `drink`, calls it twice, and then asserts that the last call returned the expected string 'La Croix (Orange)'. This matcher fails if the last call threw an error.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns La Croix (Orange) last', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Puppeteer Global Teardown for Jest\nDESCRIPTION: A global teardown script for Jest that closes the Puppeteer browser instance and cleans up temporary files after tests complete.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\nmodule.exports = async function () {\n  // close the browser instance\n  await globalThis.__BROWSER_GLOBAL__.close();\n\n  // clean-up the wsEndpoint file\n  await fs.rm(DIR, {recursive: true, force: true});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Runners in Jest Projects\nDESCRIPTION: Demonstrates how to use the projects feature to run multiple configurations or runners in a single Jest invocation. This example runs both tests and ESLint in the same Jest run with different display names.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in package.json\nDESCRIPTION: Example of configuring Jest within a project's package.json file. The configuration is placed under the \"jest\" key within the package.json structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Return Values in JavaScript\nDESCRIPTION: Demonstrates how to set and change the return value of a mock function using mockReturnValue(), which is a shorthand for implementing a function that returns a fixed value.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Using jest.doMock() with ES6 Imports in JavaScript\nDESCRIPTION: Shows how to use jest.doMock() with ES6 imports, including dynamic importing and setting the __esModule property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default1',\n      foo: 'foo1',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default1');\n    expect(moduleName.foo).toBe('foo1');\n  });\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default2',\n      foo: 'foo2',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default2');\n    expect(moduleName.foo).toBe('foo2');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Define DynamoDB Tables for jest-dynamodb (JavaScript)\nDESCRIPTION: Creates a `jest-dynamodb-config.js` file to define the schema for DynamoDB tables needed during testing. This configuration is used by the `jest-dynamodb` preset to set up the local DynamoDB instance. It expects an array of table definitions conforming to the AWS SDK's `createTable` parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/DynamoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tables: [\n    {\n      TableName: `files`,\n      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],\n      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n    },\n    // etc\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Describing NODE_ENV Environment Variable in Jest\nDESCRIPTION: Explains how Jest sets the NODE_ENV environment variable to 'test' if it's not already set to something else.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/EnvironmentVariables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `NODE_ENV`\n\nSet to `'test'` if it's not already set to something else.\n```\n\n----------------------------------------\n\nTITLE: Handling Test Run Completion with onTestRunComplete Hook (JavaScript)\nDESCRIPTION: This code demonstrates how to use the `onTestRunComplete` hook in a Jest watch plugin. The method receives the test results object and can perform post-run logic, such as tracking if snapshot failures occurred. Access to result attributes (like `snapshot.failure`) is shown. This method helps with end-of-run reporting or state handling inside the plugin.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onTestRunComplete(results => {\n      this._hasSnapshotFailure = results.snapshot.failure;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Type-Safe Date.now() Spy\nDESCRIPTION: Shows how to use the typed Date.now() spy in tests with proper cleanup and assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1_482_363_367_071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing `getUsageInfo` for Watch Menu Integration in JavaScript\nDESCRIPTION: This snippet demonstrates the `getUsageInfo` method within a Jest watch plugin. It returns an object containing a `key` and `prompt` string, which Jest uses to add an interactive option to the watch mode menu.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  getUsageInfo(globalConfig) {\n    return {\n      key: 's',\n      prompt: 'do something',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Watch Plugin Interface in Jest (JavaScript)\nDESCRIPTION: This snippet shows the basic structure of a custom Jest watch plugin via a JavaScript class. It demonstrates where to implement hook attachment (`apply`), menu prompt definition (`getUsageInfo`), and logic handling for a specific key (`run`). No external dependencies are needed beyond Jest. The hooks and methods rely on Jest providing the appropriate arguments during execution, and boilerplate implementations are present for extension.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  // Add hooks to Jest lifecycle events\n  apply(jestHooks) {}\n\n  // Get the prompt information for interactive plugins\n  getUsageInfo(globalConfig) {}\n\n  // Executed when the key from `getUsageInfo` is input\n  run(globalConfig, updateConfigAndRun) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock using jest.createMockFromModule - TypeScript\nDESCRIPTION: Uses jest.createMockFromModule with a generic type to mock a TypeScript module. The mock implementation for isAuthorized is redefined, and the test checks that authorize is mocked and isAuthorized returns the expected result. Designed for use in a TypeScript Jest environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst {utils} =\\n  jest.createMockFromModule<typeof import('../utils')>('../utils');\\n\\nutils.isAuthorized = jest.fn((secret: string) => secret === 'not wizard');\\n\\ntest('implementation created by jest.createMockFromModule', () => {\\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\\n  expect(utils.isAuthorized('not wizard')).toBe(true);\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest moduleNameMapper in TypeScript\nDESCRIPTION: Defines the `moduleNameMapper` option within a Jest configuration object in TypeScript, using the `Config` type from 'jest'. This option maps module import paths matching regular expressions to specified module names or arrays of module names, useful for stubbing assets. It shows mapping to a global stub, a relative file using `<rootDir>`, substituting regex groups, and mapping to multiple potential paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_47\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe 'toBeWithinRange' Matcher - TypeScript\nDESCRIPTION: Implements and registers toBeWithinRange as a type-safe matcher in TypeScript for Jest. Uses MatcherFunction type to provide safer typings and input validation. Requires imports from @jest/globals and expect. Also includes an inline module augmentation for types. Inputs: actual value, floor, ceiling (all checked for number type). Output: matcher pass/fail and error message.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_55\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect} from '@jest/globals';\nimport type {MatcherFunction} from 'expect';\n\nconst toBeWithinRange: MatcherFunction<[floor: unknown, ceiling: unknown]> =\n  // `floor` and `ceiling` get types from the line above\n  // it is recommended to type them as `unknown` and to validate the values\n  function (actual, floor, ceiling) {\n    if (\n      typeof actual !== 'number' ||\n      typeof floor !== 'number' ||\n      typeof ceiling !== 'number'\n    ) {\n      throw new TypeError('These must be of type number!');\n    }\n\n    const pass = actual >= floor && actual <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          // `this` context will have correct typings\n          `expected ${this.utils.printReceived(\n            actual,\n          )} not to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${this.utils.printReceived(\n            actual,\n          )} to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: false,\n      };\n    }\n  };\n\nexpect.extend({\n  toBeWithinRange,\n});\n\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Promises with `expect().rejects` in Jest (JavaScript)\nDESCRIPTION: Shows how to use the `.rejects` modifier in an asynchronous Jest test to unwrap the reason (error) of a rejected promise. It chains the `.toThrow()` matcher to assert that the promise rejects with a specific error message ('octopus'). The `return` statement is necessary for Jest to wait for the promise rejection.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('rejects to octopus', () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await with .rejects Matcher in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `async`/`await` with the `.rejects` matcher to concisely test expected promise rejections. The `await expect(...)` syntax waits for the promise returned by `fetchData` to reject and checks if the rejection reason matches.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TestingAsyncCode.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Equality with toEqual in TypeScript\nDESCRIPTION: Shows a Jest test case (`Volume.test.ts`) written in TypeScript that uses the custom equality tester registered in `areVolumesEqual.ts`. It employs the `toEqual` matcher to verify equality between two `Volume` instances with different units. Requires the `Volume` class, the registered tester, and `@jest/globals`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_56\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js'; // Assuming Volume.ts is compiled to Volume.js\nimport '../areVolumesEqual.js'; // Assuming areVolumesEqual.ts is compiled to areVolumesEqual.js\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Length Property with Jest in JavaScript\nDESCRIPTION: Shows how to use the `.toHaveLength()` matcher in Jest to verify that an object possesses a `.length` property and that its value matches the expected number. This is commonly used for checking the size of arrays or the length of strings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nexpect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n```\n\n----------------------------------------\n\nTITLE: Debugging Jest Tests with Node Inspector (Linux/macOS)\nDESCRIPTION: Starts Jest using Node.js with the inspector agent enabled, allowing a debugger to attach. The `--inspect-brk` flag pauses execution until a debugger connects, and `--runInBand` ensures tests run serially in the same process, simplifying debugging. Replace `[any other arguments here]` with additional Jest CLI options if needed. Requires Node.js and Jest installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Sample Jest Test Output - Bash\nDESCRIPTION: Displays Jest output that confirms a successful test run. No code to execute; the output assumes previous setup and a passing test. Used for illustrative purposes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPASS  ./sum.test.js\n✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Function Constructor Mock in Jest\nDESCRIPTION: Example showing an incorrect way to mock a constructor using an arrow function, which will cause a TypeError since arrow functions can't be called with 'new' in JavaScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return () => {\n    // Does not work; arrow functions can't be called with new\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Resolver in TypeScript\nDESCRIPTION: This snippet shows how to configure Jest to use a custom resolver in TypeScript. It sets the resolver option to point to a local resolver.js file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting NODE_ENV in Jest\nDESCRIPTION: Jest sets the NODE_ENV environment variable to 'test' if it's not already set to something else. This helps in configuring the application for the testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/EnvironmentVariables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `NODE_ENV`\n\nSet to `'test'` if it's not already set to something else.\n```\n\n----------------------------------------\n\nTITLE: Configuring `maxWorkers` as Percentage in Jest (JavaScript)\nDESCRIPTION: Sets the `maxWorkers` configuration option in a Jest configuration file (`jest.config.js`) to use 50% of available CPU cores. This allows dynamic adjustment based on the environment's resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  maxWorkers: '50%',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing @types/jest for Typing Jest Globals - Bash\nDESCRIPTION: Installs the '@types/jest' package, allowing TypeScript projects to recognize Jest globals without explicit imports. This package is maintained separately and should be matched in version with Jest itself for best compatibility.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/jest\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic `forEach` Helper Function in JavaScript\nDESCRIPTION: This snippet defines a simple `forEach` function in JavaScript. It iterates over an array (`items`) and executes a provided `callback` function for each element in the array, passing the element as an argument to the callback.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport function forEach(items, callback) {\n  for (const item of items) {\n    callback(item);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jest-puppeteer Package\nDESCRIPTION: Command to install the jest-puppeteer package which provides all required configuration to run tests using Puppeteer.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Negated Regex String Match with expect.not.stringMatching in JavaScript\nDESCRIPTION: Shows how to employ expect.not.stringMatching to verify that a string does not match a provided regular expression. Jest's describe/it structure is used to organize the test. Input is the target string and regex; output is verification of mismatch. Supports negative testing for pattern exclusion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('not.stringMatching', () => {\n  const expected = /Hello world!/;\n\n  it('matches if the received value does not match the expected regex', () => {\n    expect('How are you?').toEqual(expect.not.stringMatching(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying jest.createMockFromModule Behavior on Data Types (JavaScript)\nDESCRIPTION: Uses `jest.createMockFromModule('../example')` to create a mock of the module defined in `example.js`. The test (`__tests__/example.test.js`) includes specific assertions to verify the behavior of `createMockFromModule` for each data type: functions and async functions become standard mock functions, class interfaces are preserved but methods/properties are mocked, objects are deeply cloned (nested arrays become empty), arrays become empty, and primitive values are retained.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst example = jest.createMockFromModule('../example');\n\ntest('should run example code', () => {\n  // creates a new mocked function with no formal arguments.\n  expect(example.function.name).toBe('square');\n  expect(example.function).toHaveLength(0);\n\n  // async functions get the same treatment as standard synchronous functions.\n  expect(example.asyncFunction.name).toBe('asyncSquare');\n  expect(example.asyncFunction).toHaveLength(0);\n\n  // creates a new class with the same interface, member functions and properties are mocked.\n  expect(example.class.constructor.name).toBe('Bar');\n  expect(example.class.foo.name).toBe('foo');\n  expect(example.class.array).toHaveLength(0);\n\n  // creates a deeply cloned version of the original object.\n  expect(example.object).toEqual({\n    baz: 'foo',\n    bar: {\n      fiz: 1,\n      buzz: [],\n    },\n  });\n\n  // creates a new empty array, ignoring the original array.\n  expect(example.array).toHaveLength(0);\n\n  // creates a new property with the same primitive value as the original property.\n  expect(example.number).toBe(123);\n  expect(example.string).toBe('baz');\n  expect(example.boolean).toBe(true);\n  expect(example.symbol).toEqual(Symbol.for('a.b.c'));\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Factory Module Mocking\nDESCRIPTION: Shows how to use a custom factory function with jest.mock() in both JavaScript and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// The optional type argument provides typings for the module factory\njest.mock<typeof import('../moduleName')>('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Callbacks with expect.assertions()\nDESCRIPTION: Demonstrates how to verify that a specific number of assertions are called in asynchronous code using expect.assertions(number).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\ntest('doAsync calls both callbacks', () => {\n  expect.assertions(2);\n  function callback1(data) {\n    expect(data).toBeTruthy();\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy();\n  }\n\n  doAsync(callback1, callback2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.each with Array Data in Jest (JavaScript)\nDESCRIPTION: Demonstrates `describe.each` with an array of arrays (`table`) to run the same test suite multiple times with different data. It uses `printf` formatting (`%i`) in the describe block's name to create unique titles based on input parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ndescribe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring setupFilesAfterEnv in Jest - JavaScript\nDESCRIPTION: This configuration snippet specifies setupFilesAfterEnv in a CommonJS Jest config to include a custom setup file. This file will be loaded by Jest after the framework initializes but before each test file, allowing for custom global setup such as adding custom matchers or hooks. It is useful for settings that need access to Jest globals during test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual ES6 Class Mock in Jest\nDESCRIPTION: Defines a manual mock for the `SoundPlayer` class within the `__mocks__` directory. It uses `jest.fn()` to create mock implementations for the constructor and the `playSoundFile` method, allowing for spying on calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"__mocks__/sound-player.js\"\n// Import this named export into your test file:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n```\n\n----------------------------------------\n\nTITLE: Restoring Replaced Properties with restore Method\nDESCRIPTION: Demonstrates the usage of the restore method to revert a replaced property to its original value. This is important for cleaning up after tests that modify object properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Configuring transform with Multiple Transformers in TypeScript\nDESCRIPTION: TypeScript example of configuring Jest's transform option to use babel-jest for JavaScript/TypeScript files and a custom transformer for CSS files, showing how to use multiple transformers together.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Reacting to File System Changes with onFileChange Hook (JavaScript)\nDESCRIPTION: This snippet shows how a Jest watch plugin can detect file changes using the `onFileChange` hook. The hook receives an object with a `projects` array containing detailed info on changed test paths. The plugin can synchronize its state (e.g., cache file lists or update context) based on the current watched projects. None-to-minimal dependencies are required beyond the Jest environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onFileChange(({projects}) => {\n      this._projects = projects;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Configuration Loading in Jest\nDESCRIPTION: Examples of specifying a TypeScript configuration loader through docblocks. Supports ts-node and esbuild-register with optional loader configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** @jest-config-loader ts-node */\n// or\n/** @jest-config-loader esbuild-register */\n\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module with Multiple Methods (JavaScript)\nDESCRIPTION: Exports a JavaScript object (`utils.js`) with two methods: `authorize` and `isAuthorized`. This module is used in the `jest.enableAutomock()` example to show how enabling automocking results in both methods being replaced with mock functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Snapshot Matcher to Control Throw Behavior (JavaScript)\nDESCRIPTION: This example demonstrates creating a custom inline snapshot matcher, `toMatchStateInlineSnapshot`, which utilizes `this.dontThrow = () => {};`. This specific assignment prevents Jest from throwing an error immediately upon the first snapshot mismatch within a single test, allowing subsequent snapshot assertions in the same test to be evaluated even if an earlier one fails. It uses `toMatchInlineSnapshot` internally and includes a test case simulating state transitions where this behavior might be relevant.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Typo in the implementation should cause the test to fail\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions as expected', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Already produces a mismatch. No point in continuing the test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing Object with Maximum Depth using prettyFormat (JavaScript)\nDESCRIPTION: Shows prettyFormat's handling of the 'maxDepth' option by limiting the object graph depth to 1 with the custom plugin. Nested arrays are summarized as '[Array]', simplifying deep structures and illustrating depth-limiting. Requires prettyFormat, val, the plugin, and 'maxDepth'. Output demonstrates depth truncation as used for debug/tracing or to avoid verbose prints of large structures.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Testing forEach Function with Jest Mock\nDESCRIPTION: Demonstrates how to test the forEach function using a Jest mock function and assertions on mock calls and results.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst forEach = require('./forEach');\n\nconst mockCallback = jest.fn(x => 42 + x);\n\ntest('forEach mock function', () => {\n  forEach([0, 1], mockCallback);\n\n  // The mock function was called twice\n  expect(mockCallback.mock.calls).toHaveLength(2);\n\n  // The first argument of the first call to the function was 0\n  expect(mockCallback.mock.calls[0][0]).toBe(0);\n\n  // The first argument of the second call to the function was 1\n  expect(mockCallback.mock.calls[1][0]).toBe(1);\n\n  // The return value of the first call to the function was 42\n  expect(mockCallback.mock.results[0].value).toBe(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Using jest-changed-files to identify modified files in a git repository\nDESCRIPTION: This example demonstrates how to use the getChangedFilesForRoots function from jest-changed-files to identify files that have changed since the last commit in the current repository.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// print the set of modified files since last commit in the current repo\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: Example of configuring transformIgnorePatterns in Jest to exclude specific modules from transformation. This allows you to specify which files should not be processed by Jest's transform system.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring `forceCoverageMatch` in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the `forceCoverageMatch` option in a Jest configuration file (`jest.config.ts`). It uses a glob pattern ('**/*.t.js') and leverages the `Config` type from 'jest' to ensure type safety while specifying files to be included in the code coverage report.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDOM Environment Options in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration example for setting JSDOM-specific environment options in Jest config file\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Matching Any Non-null Argument using Jest Asymmetric Matcher in JavaScript\nDESCRIPTION: Demonstrates the use of expect.anything() in assertions to ensure a mock function is called with any non-null, non-undefined value. Depends on Jest's mocking utilities. Key parameter is the argument to the mocked function; the test output is whether the function has been called with a non-null argument. Particularly useful for cases where argument type or value is not fixed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toHaveBeenCalledWith(expect.anything());\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Environment in Jest (JavaScript)\nDESCRIPTION: Shows how to specify a custom test environment using a docblock at the top of a test file. This example sets the environment to 'jsdom' for browser-like testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div');\n  expect(element).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Using afterAll for Global Teardown in Jest (JavaScript)\nDESCRIPTION: Demonstrates the afterAll hook to execute cleanup or teardown logic once after all tests in a file complete. Dependencies include a global database instance and typical Jest global methods (test, expect, afterAll). The example shows asynchronous test handling and post-test resource cleanup by invoking cleanUpDatabase with the shared database. Inputs are the global test context and custom database functions; outputs are managed via Jest's test runner lifecycle. Constraints include the function's placement at the file or describe block level.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot File Content in JavaScript\nDESCRIPTION: This shows the content of a typical Jest snapshot file (`.snap`), automatically generated during the first run of a snapshot test. It exports the serialized representation of the rendered component (in this case, an HTML 'a' tag) associated with the specific test ('renders correctly 1'). This file is committed alongside the code and used by Jest for comparisons in subsequent test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Inserting and Retrieving Items from DynamoDB in Jest Test - JavaScript\nDESCRIPTION: Implements a Jest test case that inserts an item into the 'files' table using ddb.put and verifies insertion with ddb.get. The test is asynchronous, awaiting both write and read operations, and asserts the retrieved item's structure with expect().toEqual(). Place this snippet in your test suite to validate end-to-end DynamoDB interactions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/DynamoDB.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('should insert item into table', async () => {\n  await ddb\n    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})\n    .promise();\n\n  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();\n\n  expect(Item).toEqual({\n    id: '1',\n    hello: 'world',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Projects using Configuration Objects in JavaScript\nDESCRIPTION: Demonstrates using the `projects` option in Jest JavaScript configuration with an array of configuration objects. This allows running different configurations or runners (e.g., standard tests and ESLint via `jest-runner-eslint`) in the same Jest execution. Each project object can specify properties like `displayName` and `runner`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_59\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Jest testRegex Matches in Bash\nDESCRIPTION: Shows a directory structure example using Bash-like syntax with comments indicating which files would be identified as tests by Jest's default `testRegex` pattern. This helps visualize how the default regex (`(/__tests__/.*|(\\.|/)(test|spec))\\.[mc]?[jt]sx?$`) matches files within `__tests__` folders or files ending with `.test` or `.spec` extensions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n├── __tests__\n│   └── component.spec.js # test\n│   └── anything # test\n├── package.json # not test\n├── foo.test.js # test\n├── bar.spec.jsx # test\n└── component.js # not test\n```\n```\n\n----------------------------------------\n\nTITLE: Writing First Jest Test\nDESCRIPTION: Basic Jest test implementation showing how to test the sum function using expect and toBe matchers.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Custom Transformer and CSS Modules Mocking in JavaScript\nDESCRIPTION: This `jest.config.js` demonstrates using both `moduleNameMapper` (for CSS Modules via `identity-obj-proxy`) and the `transform` option. The `transform` option is configured to use the custom `fileTransformer.js` for various static asset file extensions, processing them to return their basenames.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Diff Line Indicators (JS)\nDESCRIPTION: Shows how to replace the default indicators ('-', '+', ' ') used to prefix diff lines. This example sets `aIndicator` to '<' and `bIndicator` to '>' for consistency with the standard `diff` command output, using the options object.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n  aIndicator: '<',\n  bIndicator: '>',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for TypeScript with Jest\nDESCRIPTION: Updated Babel configuration to include TypeScript preset for use with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {targets: {node: 'current'}}],\n    '@babel/preset-typescript',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Reporter with jest-junit in TypeScript\nDESCRIPTION: TypeScript version of the configuration for keeping the default Jest reporter while adding jest-junit reporter, with type safety through Jest's Config type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using test.each with Template Literal (Mixed Types) and Generics in TypeScript (Jest)\nDESCRIPTION: Demonstrates using `test.each` with the template literal syntax in TypeScript when the table contains values of mixed types or optional values. To ensure correct type inference, a generic type argument specifying the shape of the row object (`<{prop1: type1, prop2: type2, ...}>`) must be provided to `test.each`. Without the generic, arguments may default to `unknown`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring transform with Multiple Transformers in JavaScript\nDESCRIPTION: Example of configuring Jest's transform option to use babel-jest for JavaScript/TypeScript files and a custom transformer for CSS files, showing how to use multiple transformers together.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Mock Call Count with .toHaveBeenCalledTimes in Jest JavaScript Tests\nDESCRIPTION: This snippet demonstrates using `.toHaveBeenCalledTimes` (or its alias `.toBeCalledTimes`) to assert that a Jest mock function (`jest.fn()`) was called a specific number of times. It tests a `drinkEach` function, verifying the `drink` mock is called exactly twice.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Jest Transformer with Cache Key Function\nDESCRIPTION: Example code showing how to create a Jest transformer that uses the createCacheKeyFunction to generate cache keys based on specified files and values.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-create-cache-key-function/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst createCacheKeyFunction =\n  require('@jest/create-cache-key-function').default;\n\nconst filesToAccountFor = [\n  __filename,\n  require.resolve('some-package-name/package.json'),\n];\n\nconst valuesToAccountFor = [process.env.SOME_LOCAL_ENV, 'Some_Other_Value'];\n\nmodule.exports = {\n  process(src, filename, config, options) {},\n  getCacheKey: createCacheKeyFunction(filesToAccountFor, valuesToAccountFor),\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Falsy Values with toBeFalsy in Jest\nDESCRIPTION: Shows how to use the toBeFalsy matcher to verify a value is false in a boolean context. This is useful when testing code that depends on truthiness rather than specific values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndrinkSomeLaCroix();\nif (!getErrors()) {\n  drinkMoreLaCroix();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinking La Croix does not lead to errors', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jest JSDOM Environment using Bash\nDESCRIPTION: This bash command uses npm (node package manager) to install the `jest-environment-jsdom` package as a development dependency. This package provides the necessary JSDOM environment for Jest to simulate a browser's DOM, enabling testing of DOM manipulation code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialjQuery.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Using mockImplementation to control function output - Jest - TypeScript\nDESCRIPTION: Shows how to use mockImplementation in TypeScript with type-safe definitions for a mock function, changing its logic and verifying output. Depends on @jest/globals for imports. Input parameter typing ensures safe and predictable test behaviors. This is essential for TypeScript projects needing accurate function mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Return Value with mockImplementationOnce in Jest (JS)\nDESCRIPTION: Shows the underlying implementation shorthand for `mockReturnValueOnce(value)`. It uses `mockImplementationOnce` with a function that returns the specified value.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\n----------------------------------------\n\nTITLE: Example of Variable Naming Limitations with jest.mock()\nDESCRIPTION: This code demonstrates an error case where using a variable name that doesn't start with 'mock' will cause an out-of-scope error with jest.mock().\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: this will fail\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests with Jest and Logging Errors in JavaScript\nDESCRIPTION: This example shows how to use `jest.retryTimes` with the option `{logErrorsBeforeRetry: true}` to print errors that caused tests to fail before each retry. It is intended for debugging intermittent test failures. The option enables better diagnosis by logging failure errors. Requires Jest v24.5.0+ and the default jest-circus runner. The input is always-failing test logic; the output is multiple retries with error logs before each attempt.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3, {logErrorsBeforeRetry: true});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Configuration for Handling Static Assets\nDESCRIPTION: Jest configuration that mocks static assets like stylesheets and images using moduleNameMapper. This approach prevents assets from causing errors during testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Requiring Actual Module Implementation While Mocking with jest.requireActual in TypeScript\nDESCRIPTION: Same as the JavaScript example, but illustrates type inference when using jest.requireActual inside a jest.mock factory in TypeScript. Type information maintains correctness and type safety of the actual implementation. Supports selectively overriding specific exports while retaining original module structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule =\n    jest.requireActual<typeof import('../myModule')>('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n----------------------------------------\n\nTITLE: Testing with Replaced Properties using `jest.Replaced` (TypeScript)\nDESCRIPTION: Demonstrates testing the `isLocalhost` function by replacing `process.env` using `jest.replaceProperty`. The `jest.Replaced<typeof process.env>` type provides type safety for the replaced property object, and `restore()` is called in `afterEach` to clean up.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\n// title=\"src/__tests__/utils.test.ts\"\nimport {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Single-Call Return Values with `mockReturnValueOnce` (TypeScript)\nDESCRIPTION: Demonstrates chaining `mockReturnValueOnce` in TypeScript to specify different return values for successive calls to a typed Jest mock function. Type safety is maintained using generics. Once `mockReturnValueOnce` values are used, calls default to the `mockReturnValue`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n----------------------------------------\n\nTITLE: Mocking Mixed Resolved/Rejected Promises with `mockRejectedValueOnce` (JavaScript)\nDESCRIPTION: Demonstrates using `mockRejectedValueOnce` in combination with `mockResolvedValueOnce` to simulate different outcomes (one resolution, one rejection) over multiple calls to an async mock function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Focusing Only on Certain Data-Driven Tests with Template Literals (Jest, JavaScript)\nDESCRIPTION: Uses the `test.only.each` tagged template literal syntax to execute only specific, table-driven test cases, skipping others in the file. Each row maps keys to values for named argument injection and test title composition. Requires Jest; allows targeted execution when debugging particular combinations. Other tests in the suite are ignored during this run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timer Limit for Fake Timers in Jest\nDESCRIPTION: This snippet shows how to configure the maximum number of timers Jest will execute before assuming an infinite loop when using fake timers. The `timerLimit` option is passed to `jest.useFakeTimers()` to set a custom threshold (100 in this example).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers({timerLimit: 100});\n```\n\n----------------------------------------\n\nTITLE: Using jest.requireActual() to Partially Mock a Module in JavaScript\nDESCRIPTION: Demonstrates how to use jest.requireActual() to partially mock a module, keeping some original functionality while mocking specific parts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule = jest.requireActual('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn(() => 10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n----------------------------------------\n\nTITLE: Mocking a Native Component using jest-react-native Helper - JavaScript\nDESCRIPTION: This snippet shows how to use Jest's manual mocking API and the react-native/jest/mockComponent helper to mock a native component. It returns an automatically generated mock version of a specified component, forwarding reference and prop types. Dependencies: jest, react-native/jest/mockComponent. The key parameter is the component path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\njest.mock('path/to/MyNativeComponent', () => {\n  const mockComponent = require('react-native/jest/mockComponent');\n  return mockComponent('path/to/MyNativeComponent');\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Module Factory Usage Causing Out-of-Scope Error - JavaScript\nDESCRIPTION: This snippet demonstrates an anti-pattern: referencing a variable that does not start with 'mock' in a jest.mock factory function. This will throw a hoisting error in Jest, leading to out-of-scope or ReferenceErrors. The snippet illustrates a subtle caveat for Jest module mocking with factory functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note: this will fail\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Test Environment\nDESCRIPTION: Example of creating a custom test environment class with setup, teardown, and event handling capabilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nclass CustomEnvironment extends NodeEnvironment {\n  constructor(config, context) {\n    super(config, context);\n    console.log(config.globalConfig);\n    console.log(config.projectConfig);\n    this.testPath = context.testPath;\n    this.docblockPragmas = context.docblockPragmas;\n  }\n\n  async setup() {\n    await super.setup();\n    await someSetupTasks(this.testPath);\n    this.global.someGlobalObject = createGlobalObject();\n\n    if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {\n      // ...\n    }\n  }\n\n  async teardown() {\n    this.global.someGlobalObject = destroyGlobalObject();\n    await someTeardownTasks();\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n\n  async handleTestEvent(event, state) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n\nmodule.exports = CustomEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Example Test Failure Output with Custom Mock Name\nDESCRIPTION: Shows the Jest test failure output when an expectation (like `toHaveBeenCalled`) fails for a mock function that has been given a custom name using `mockName()`. The custom name ('mockedFunction') appears in the error message.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexpect(mockedFunction).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n```\n\n----------------------------------------\n\nTITLE: Configuring coverageThreshold in Jest with Basic Settings (JavaScript)\nDESCRIPTION: This snippet shows how to configure minimum threshold enforcement for coverage results in Jest. It sets global thresholds requiring 80% coverage for branches, functions, and lines, while allowing a maximum of 10 uncovered statements.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest MongoDB Preset (Bash)\nDESCRIPTION: This snippet provides the bash command to install the @shelf/jest-mongodb package, which simplifies running MongoDB-backed Jest tests. The command should be run in the project root and requires Node.js and npm. It adds @shelf/jest-mongodb as a dev dependency to your package.json.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MongoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-mongodb\n```\n\n----------------------------------------\n\nTITLE: Combining Property Matchers and Exact Values in JavaScript Snapshots\nDESCRIPTION: This example shows that property matchers can be used alongside specific value checks within the same snapshot assertion. The `createdAt` field uses `expect.any(Date)` to match any Date object, while the `name` field is checked for the exact string 'Bond... James Bond'. The resulting snapshot reflects this combination, storing the matcher for the date and the literal string for the name.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the values and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    name: 'Bond... James Bond',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    name: 'Bond... James Bond',\n  });\n});\n\n// Snapshot\nexports[`will check the values and pass 1`] = `\n{\n  \"createdAt\": Any<Date>,\n  \"name\": 'Bond... James Bond',\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing getUsageInfo Method for Watch Menu Integration\nDESCRIPTION: Example of implementing the getUsageInfo method to add a custom key and prompt to the Jest watch mode menu.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  getUsageInfo(globalConfig) {\n    return {\n      key: 's',\n      prompt: 'do something',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing moduleDirectories in Jest Config - TypeScript\nDESCRIPTION: Provides a TypeScript example of customizing module directories in Jest's configuration by setting 'moduleDirectories' to include additional directories. Imports the Jest Config type and exports as default. Requires TypeScript, Jest, and any referenced directories.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Tests in jest-each\nDESCRIPTION: Shows how to skip parameterized tests using the .skip modifier in jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).test.skip('returns the result of adding %d to %d', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Finding All .js Files with jest-haste-map (JavaScript)\nDESCRIPTION: This example showcases how to use `jest-haste-map` to scan a project directory (`root`) for all files with the `.js` extension using ES Modules. It imports necessary modules (`HasteMap`, `os`, `path`, `url`), determines the root directory, configures `HasteMap` options (like `id` for caching, `extensions` to filter files, `maxWorkers` for parallelism, `roots` and `rootDir` for search scope), builds the map asynchronously using `map.build()`, and retrieves the list of matching files with `hasteFS.getAllFiles()`. Dependencies include `jest-haste-map` and Node.js built-in modules (`os`, `path`, `url`).\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-haste-map/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport HasteMap from 'jest-haste-map';\nimport os from 'os';\nimport {dirname} from 'path';\nimport {fileURLToPath} from 'url';\n\nconst root = dirname(fileURLToPath(import.meta.url));\n\nconst map = new HasteMap.default({\n  id: 'myproject', //Used for caching.\n  extensions: ['js'], // Tells jest-haste-map to only crawl .js files.\n  maxWorkers: os.availableParallelism(), //Parallelizes across all available CPUs.\n  platforms: [], // This is only used for React Native, you can leave it empty.\n  roots: [root], // Can be used to only search a subset of files within `rootDir`\n  retainAllFiles: true,\n  rootDir: root, //The project root.\n});\n\nconst {hasteFS} = await map.build();\n\nconst files = hasteFS.getAllFiles();\n\nconsole.log(files);\n```\n\n----------------------------------------\n\nTITLE: Mocking Axios Module in Jest Test\nDESCRIPTION: Shows how to mock the axios module in a Jest test to avoid hitting the actual API during testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\nimport Users from './users';\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  // or you could use the following depending on your use case:\n  // axios.get.mockImplementation(() => Promise.resolve(resp))\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Mock Testing with jest.createMockFromModule - JavaScript\nDESCRIPTION: Demonstrates in a test file how jest.createMockFromModule mocks various data types -- including functions, classes, objects, arrays, and primitives. Verifies that function lengths and names are maintained, object and array mocks behave as described, and primitives are preserved. Requires Jest, the example module, and is intended to show Jest's auto-mocking capabilities in a full-featured scenario.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst example = jest.createMockFromModule('../example');\\n\\ntest('should run example code', () => {\\n  // creates a new mocked function with no formal arguments.\\n  expect(example.function.name).toBe('square');\\n  expect(example.function).toHaveLength(0);\\n\\n  // async functions get the same treatment as standard synchronous functions.\\n  expect(example.asyncFunction.name).toBe('asyncSquare');\\n  expect(example.asyncFunction).toHaveLength(0);\\n\\n  // creates a new class with the same interface, member functions and properties are mocked.\\n  expect(example.class.constructor.name).toBe('Bar');\\n  expect(example.class.foo.name).toBe('foo');\\n  expect(example.class.array).toHaveLength(0);\\n\\n  // creates a deeply cloned version of the original object.\\n  expect(example.object).toEqual({\\n    baz: 'foo',\\n    bar: {\\n      fiz: 1,\\n      buzz: [],\\n    },\\n  });\\n\\n  // creates a new empty array, ignoring the original array.\\n  expect(example.array).toHaveLength(0);\\n\\n  // creates a new property with the same primitive value as the original property.\\n  expect(example.number).toBe(123);\\n  expect(example.string).toBe('baz');\\n  expect(example.boolean).toBe(true);\\n  expect(example.symbol).toEqual(Symbol.for('a.b.c'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Test Timeout in Jest\nDESCRIPTION: Demonstrates how to increase the timeout for Jest tests using the `jest.setTimeout()` function within a test file. This is useful for tests involving long-running asynchronous operations to prevent premature timeouts. The example sets the timeout to 10 seconds (10,000 milliseconds).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\njest.setTimeout(10_000); // 10 second timeout\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Fake/Real Timers - Jest - JavaScript\nDESCRIPTION: Depicts practical usage of jest.useFakeTimers and jest.useRealTimers in test cases, including customizing timer behavior and restoring real timers. Inputs: Various timer configs; Outputs: all Jest timers replaced as configured, until restored. Requires Jest and a testing framework supporting describe/test blocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\ntest('advance the timers automatically', () => {\n  jest.useFakeTimers({advanceTimers: true});\n  // ...\n});\n\ntest('do not advance the timers and do not fake `performance`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n  // ...\n});\n\ntest('uninstall fake timers for the rest of tests in the file', () => {\n  jest.useRealTimers();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Property Replacement - Jest - JavaScript\nDESCRIPTION: Shows how to use jest.replaceProperty and jest.restoreAllMocks to manipulate Node.js process.env for testing, and assert outcomes based on replaced properties. Requires CommonJS modules and Jest. Inputs: test cases; Outputs: assertions based on modified property values. This pattern allows testing logic dependent on environment or global state.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst utils = require('./utils');\n\nafterEach(() => {\n  // restore replaced property\n  jest.restoreAllMocks();\n});\n\ntest('isLocalhost returns true when HOSTNAME is localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n  expect(utils.isLocalhost()).toBe(true);\n});\n\ntest('isLocalhost returns false when HOSTNAME is not localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'not-localhost'});\n  expect(utils.isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Snapshot Testing on a React Component (TypeScript)\nDESCRIPTION: A Jest test suite (`Link.test.js` written in `tsx`) demonstrating snapshot testing for the `Link` component using `react-test-renderer`. It creates the component, generates an initial snapshot, simulates `onMouseEnter` and `onMouseLeave` events within `renderer.act`, and creates snapshots after each state change to verify the rendered output against stored snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('changes the class when hovered', () => {\n  const component = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>,\n  );\n  let tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseEnter();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseLeave();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `snapshotFormat` in Jest (TypeScript)\nDESCRIPTION: Demonstrates configuring the `snapshotFormat` option in a TypeScript Jest config file (`.ts`) using the `Config` type. It overrides default snapshot formatting behavior from `pretty-format`. This example configures `printBasicPrototype` to `false`, altering the snapshot output for objects and arrays.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Identifying Types with Jest Get Type in JavaScript\nDESCRIPTION: This snippet uses the 'jest-get-type' package to determine the primitive type of different JavaScript values. 'getType' returns strings such as 'array', 'null', or 'undefined' based on the provided input. Install 'jest-get-type' to use; the function expects a value to test, and outputs a type string. Useful for robust type checks and validation logic, especially in dynamic scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {getType} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset using Relative Path in TypeScript\nDESCRIPTION: Shows how to configure the Jest `preset` option in TypeScript using a relative file system path and the `Config` type. This directly specifies the location of a preset file to be used as the base configuration. Path resolution depends on `rootDir`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_56\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Support for Babel\nDESCRIPTION: Command to install the Babel preset for TypeScript, enabling Jest to work with TypeScript files through Babel.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Mocking Option 4: Suppressing Warnings (JavaScript)\nDESCRIPTION: A less recommended workaround: completely disable warnings by mocking the `warning` module from `fbjs`. This should typically be done in a Jest setup file and might hide other useful warnings. It can be useful in specific scenarios like testing React Native components where DOM-related warnings are irrelevant.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module with Multiple Methods\nDESCRIPTION: Example of a utility module in JavaScript that exports an object with multiple authorization methods. This module will be used in the following test example.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Validating User Configurations with jest-validate in JavaScript\nDESCRIPTION: Demonstrates using the `validate` function from `jest-validate` to check a user-provided configuration object (`configByUser`) against a reference object containing an `exampleConfig` and other options. The function returns an object indicating validity (`isValid`) and whether there are deprecation warnings (`hasDeprecationWarnings`), which is logged. Depends on the `jest-validate` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Understanding mockReturnThis Shorthand in JavaScript\nDESCRIPTION: Explains that `mockFn.mockReturnThis()` is a Jest shorthand method. It's equivalent to defining a mock implementation explicitly that returns the context (`this`) using `jest.fn(function () { return this; })`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\njest.fn(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code to Attach Debugger to Jest\nDESCRIPTION: A VS Code `launch.json` configuration for attaching the debugger to an existing Node.js process. Set `type` to `node`, `request` to `attach`, and specify the `port` (defaulting to 9229) used by the Node process started with `--inspect` or `--inspect-brk`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach\",\n      \"port\": 9229\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Object Tables with Jest.each - TypeScript\nDESCRIPTION: Exhibits TypeScript data-driven tests with a separately declared table of objects. Jest's type inference supports optional properties when object literals are distributed. Dependencies: Jest and TypeScript only. The test table is assigned to a variable, passed to `test.each`, parameters are destructured from each row.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test with Custom Puppeteer Environment\nDESCRIPTION: Example Jest test suite using the custom Puppeteer setup. It accesses the browser instance via `globalThis.__BROWSER_GLOBAL__` (made available by the custom `puppeteer_environment.js`), creates a new page using `browser.newPage()`, navigates to 'https://google.com', and uses `page.evaluate` to execute code in the browser context and assert the presence of 'google' in the body text. Includes timeout configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// test.js\nconst timeout = 5000;\n\ndescribe(\n  '/ (Home Page)',\n  () => {\n    let page;\n    beforeAll(async () => {\n      page = await globalThis.__BROWSER_GLOBAL__.newPage();\n      await page.goto('https://google.com');\n    }, timeout);\n\n    it('should load without error', async () => {\n      const text = await page.evaluate(() => document.body.textContent);\n      expect(text).toContain('google');\n    });\n  },\n  timeout,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest environment with setupFilesAfterEnv (JavaScript)\nDESCRIPTION: Example of using setupFilesAfterEnv to configure the Jest testing environment, including adding custom matchers and setting up global teardown.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchers = require('jest-extended');\nexpect.extend(matchers);\n\nafterEach(() => {\n  jest.useRealTimers();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Jest in React Projects\nDESCRIPTION: Example package.json configuration for React projects using Jest, including necessary dependencies and test script.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"<current-version>\",\n    \"react-dom\": \"<current-version>\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"<current-version>\",\n    \"@babel/preset-react\": \"<current-version>\",\n    \"babel-jest\": \"<current-version>\",\n    \"jest\": \"<current-version>\",\n    \"react-test-renderer\": \"<current-version>\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Property Replacement in Jest Tests\nDESCRIPTION: Examples of using jest.replaceProperty() to mock object properties in tests, particularly useful for environment variables and configuration testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst utils = {\n  isLocalhost() {\n    return process.env.HOSTNAME === 'localhost';\n  },\n};\n\nmodule.exports = utils;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst utils = require('./utils');\n\nafterEach(() => {\n  // restore replaced property\n  jest.restoreAllMocks();\n});\n\ntest('isLocalhost returns true when HOSTNAME is localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n  expect(utils.isLocalhost()).toBe(true);\n});\n\ntest('isLocalhost returns false when HOSTNAME is not localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'not-localhost'});\n  expect(utils.isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock for fs Module in Jest\nDESCRIPTION: This code creates a manual mock for the fs module by extending an automatic mock. It implements custom versions of fs APIs for testing purposes, allowing the tests to avoid actually hitting the disk.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ManualMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst path = require('path');\n\nconst fs = jest.createMockFromModule('fs');\n\n// This is a custom function that our tests can use during setup to specify\n// what the files on the \"mock\" filesystem should look like when any of the\n// `fs` APIs are used.\nlet mockFiles = Object.create(null);\nfunction __setMockFiles(newMockFiles) {\n  mockFiles = Object.create(null);\n  for (const file in newMockFiles) {\n    const dir = path.dirname(file);\n\n    if (!mockFiles[dir]) {\n      mockFiles[dir] = [];\n    }\n    mockFiles[dir].push(path.basename(file));\n  }\n}\n\n// A custom version of `readdirSync` that reads from the special mocked out\n// file list set via __setMockFiles\nfunction readdirSync(directoryPath) {\n  return mockFiles[directoryPath] || [];\n}\n\nfs.__setMockFiles = __setMockFiles;\nfs.readdirSync = readdirSync;\n\nmodule.exports = fs;\n```\n\n----------------------------------------\n\nTITLE: Manual ES6 Class Mock in __mocks__ Directory - JavaScript\nDESCRIPTION: Implements a full ES6 class as a manual Jest mock in the __mocks__ directory, mimicking the real class's structure but with mocked side-effectful behavior. This allows seamless replacement of the real class in tests without spying on calls. No external mocking is required, but `console.log` statements are used instead of real actions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer: constructor was called');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer: playSoundFile was called');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Mocking a Module with jest.mock in JavaScript\nDESCRIPTION: Demonstrates how to use `jest.mock` to automatically mock a required module (`../banana`). When the mocked function is called, it returns `undefined` because Jest replaces all module exports with mock functions by default.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../banana');\n\nconst banana = require('../banana'); // banana will be explicitly mocked.\n\nbanana(); // will return 'undefined' because the function is auto-mocked.\n```\n\n----------------------------------------\n\nTITLE: Testing Defined Values with toBeDefined in Jest\nDESCRIPTION: This example demonstrates how to use .toBeDefined() to check that a variable or function return is not undefined. The test verifies that fetchNewFlavorIdea() returns some defined value rather than being undefined.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntest('there is a new flavor idea', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Constructor Function in Jest using JavaScript\nDESCRIPTION: Demonstrates how to mock a module containing a class using `jest.mock`. The module factory must be a higher-order function (HOF) that returns the actual mock constructor function. This allows the mocked class to be instantiated with `new`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Advancing Fake Timers by Time in Jest (JavaScript)\nDESCRIPTION: Added in Jest 16.0.0, `jest.runTimersToTime(msToRun)` advances all fake timers by a specified number of milliseconds. This is useful for testing code that relies on `setTimeout` or `setInterval` when fake timers (`jest.useFakeTimers()`) are enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\njest.runTimersToTime\n```\n\n----------------------------------------\n\nTITLE: Partial Object Matching with expect.objectContaining in JavaScript\nDESCRIPTION: Illustrates the use of expect.objectContaining to verify that a received object includes at least the specified properties and optionally uses other matchers for nested properties. The provided test simulates a press handler and checks that the function was called with an object having numeric x and y properties. Jest is required; inputs/output are object instances passed to the handler.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toHaveBeenCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-jest-hoist in babel.config.js\nDESCRIPTION: Example configuration for babel.config.js file to include the jest-hoist plugin in your Babel setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-plugin-jest-hoist/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: ['jest-hoist'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring workerIdleMemoryLimit in Jest with JavaScript\nDESCRIPTION: Example of setting workerIdleMemoryLimit in Jest to recycle workers that exceed memory limits. This configuration uses 20% of system memory as the threshold.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing jest-puppeteer Preset via npm\nDESCRIPTION: Command to install the `jest-puppeteer` package as a development dependency using npm. This preset simplifies the integration of Puppeteer with Jest by handling configuration automatically.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Test Location in Jest Results\nDESCRIPTION: Displays the JSON structure of the `location` object that is added to Jest test results when the `--testLocationInResults` CLI option is used. This object contains the `column` (0-indexed) and `line` (1-based) number indicating the source code location of the test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"column\": 4,\n  \"line\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Example webpack Configuration for JavaScript Projects\nDESCRIPTION: A typical webpack configuration file that sets up rules for JavaScript, CSS, and asset files, along with path resolution settings that Jest will need to accommodate.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: ['node_modules'],\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.gif$/,\n        type: 'asset/inline',\n      },\n      {\n        test: /\\.(ttf|eot|svg)$/,\n        type: 'asset/resource',\n      },\n    ],\n  },\n  resolve: {\n    alias: {\n      config$: './configs/app-config.js',\n      react: './vendor/react-master',\n    },\n    extensions: ['.js', '.jsx'],\n    modules: [\n      'node_modules',\n      'bower_components',\n      'shared',\n      '/shared/vendor/modules',\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Jest Matcher `toBeWithinRange` in Tests (JavaScript)\nDESCRIPTION: Illustrates the usage of the previously defined `toBeWithinRange` custom matcher within Jest tests written in JavaScript. It shows basic usage (`expect(100).toBeWithinRange(90, 110)`), negation with `.not` (`expect(101).not.toBeWithinRange(0, 100)`), and its application within asymmetric matchers for object property validation. Requires the `toBeWithinRange` module to be imported or globally set up.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_60\n\nLANGUAGE: js\nCODE:\n```\n```js title=\\\"__tests__/ranges.test.js\\\"\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using test.each with Array of Arrays Variable and Type Annotation in TypeScript (Jest)\nDESCRIPTION: Illustrates a potential type inference issue when using `test.each` with a variable containing an array of arrays in TypeScript, especially with mixed types or optional values. To ensure correct type inference for test arguments, the variable holding the table must be explicitly typed as an array of tuples (`Array<[type1, type2, ...]>`). Without the annotation, arguments might be inferred as union types of all possible types in the table.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Plugins in Jest Configuration\nDESCRIPTION: How to add a watch plugin to your Jest configuration by specifying its path in the watchPlugins array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: ['path/to/yourWatchPlugin'],\n};\n```\n\n----------------------------------------\n\nTITLE: Virtual Module Mocking\nDESCRIPTION: Shows how to create virtual mocks for modules that don't exist in the system.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\n  '../moduleName',\n  () => {\n    /*\n     * Custom implementation of a module that doesn't exist in JS,\n     * like a generated module or a native module in react-native.\n     */\n  },\n  {virtual: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fake Timers in Jest Configuration (TypeScript)\nDESCRIPTION: This example demonstrates how to configure fake timers in Jest, including options for enabling them globally, setting timer limits, and specifying APIs not to fake.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using --workerThreads option in Jest\nDESCRIPTION: An experimental option that controls whether to use worker threads for parallelization instead of the default child processes. Additional details can be found in the workerThreads configuration documentation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n--workerThreads\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Reporter in JavaScript\nDESCRIPTION: This snippet shows how to configure the GitHub Actions reporter in Jest, with options to control output and include a summary reporter. It demonstrates the use of reporter options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Sample package.json for Jest and React Testing - JSON\nDESCRIPTION: Demonstrates a minimal package.json configuration for a project using Jest with Babel to test React components. Details required dependencies (with placeholder version numbers), development dependencies for Babel and Jest, and a script entry to run tests via Jest. Update <current-version> with the latest compatible versions for your stack.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"<current-version>\\\",\\n    \\\"react-dom\\\": \\\"<current-version>\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@babel/preset-env\\\": \\\"<current-version>\\\",\\n    \\\"@babel/preset-react\\\": \\\"<current-version>\\\",\\n    \\\"babel-jest\\\": \\\"<current-version>\\\",\\n    \\\"jest\\\": \\\"<current-version>\\\",\\n    \\\"react-test-renderer\\\": \\\"<current-version>\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"jest\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Configuration in JavaScript\nDESCRIPTION: Example of a basic Jest configuration file in JavaScript that exports a configuration object with the verbose option enabled. Uses JSDoc for TypeScript type checking.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  verbose: true,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test Example with Custom Format\nDESCRIPTION: Example test case showing the effect of customized snapshot formatting that doesn't include basic prototypes in the output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\ntest('does not show prototypes for object and array inline', () => {\n  const object = {\n    array: [{hello: 'Danger'}],\n  };\n  expect(object).toMatchInlineSnapshot(`\n    {\n      \"array\": [\n        {\n          \"hello\": \"Danger\",\n        },\n      ],\n    }\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Providing an Empty Style Mock for Jest in JavaScript\nDESCRIPTION: Implements an empty CommonJS module for mocking CSS and stylesheet files in Jest. Used by moduleNameMapper for all stylesheet file extensions to prevent loading actual styles. No dependencies beyond Node. Input is any stylesheet import; output is an empty object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code to Launch and Debug Jest (Windows)\nDESCRIPTION: A VS Code `launch.json` configuration tailored for Windows to automatically launch Jest tests in debug mode. It specifies the path to the Jest executable via `node_modules/jest/bin/jest.js` in `runtimeArgs`, along with `--inspect-brk` and `--runInBand`. Uses the integrated terminal for output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Template Literal Table (Same Type) in Jest (TypeScript)\nDESCRIPTION: Demonstrates using a tagged template literal as a data table for parameterized tests in Jest with TypeScript, where all data fields share the same type. TypeScript correctly infers all argument types as the common type. The snippet uses destructuring for access to named data fields. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example same type', ({a, b, expected}) => {\n  // all arguments are of type `number` because all inputs (a, b, expected) are of type `number`\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Names to Jest Mock Functions with `.mockName()` in JavaScript\nDESCRIPTION: This snippet demonstrates how to assign a custom name to a Jest mock function using the `.mockName()` method. Naming mocks (e.g., 'add42') improves the readability of test error messages, making it easier to identify which mock function failed during test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox React Component for Testing\nDESCRIPTION: A React functional component that implements a checkbox with dynamic labels based on its checked state.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useState} from 'react';\n\nexport default function CheckboxWithLabel({labelOn, labelOff}) {\n  const [isChecked, setIsChecked] = useState(false);\n\n  const onChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  return (\n    <label>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />\n      {isChecked ? labelOn : labelOff}\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration in JavaScript\nDESCRIPTION: Example of retrieving and extending Jest's default configuration using the jest-config package in JavaScript. This allows adding to existing defaults rather than replacing them.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst {defaults} = require('jest-config');\n\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: [...defaults.moduleDirectories, 'bower_components'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest JSDOM Test Environment - Bash\nDESCRIPTION: Provides a command to install the jest-environment-jsdom package as a development dependency using npm. This environment is required to simulate browser-like DOM APIs while running Jest tests on code that manipulates the DOM. Must be run from the project root where package.json is located, and npm must be available.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialjQuery.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Coverage Collection Patterns\nDESCRIPTION: Example of configuring collectCoverageFrom in Jest to collect coverage information from specific files using glob patterns. This example includes files and excludes node_modules and vendor directories.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Disabling watchAll mode in Jest\nDESCRIPTION: Options to explicitly disable watchAll mode if it was enabled using --watchAll. This is typically handled automatically in CI environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n--no-watchAll\n```\n\nLANGUAGE: bash\nCODE:\n```\n--watchAll=false\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Utility Functions - JavaScript Module\nDESCRIPTION: Exports an object containing authorize and isAuthorized functions. The authorize function returns 'token', while isAuthorized checks if the input equals 'wizard'. Useful for demonstrating Jest's automocking capabilities. No dependencies other than module import conventions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Global Teardown Module - JavaScript\nDESCRIPTION: Details the structure of a global teardown script for Jest, which is used to clean up resources after all tests have run. The exported asynchronous function receives Jest's 'globalConfig' and 'projectConfig', logs information, and stops an external server by invoking 'stop()' on a reference set during setup. It is paired with the global setup module and must be referenced in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  await globalThis.__MONGOD__.stop();\n};\n\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Jest Promises\nDESCRIPTION: Jest test for asynchronous functionality using promises. The test mocks the request module and verifies that the getUserName function returns the expected user name.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../request');\n\nimport * as user from '../user';\n\n// The assertion for a promise must be returned.\nit('works with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(4).then(data => expect(data).toBe('Mark'));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic Jest Watch Plugin Class Structure in JavaScript\nDESCRIPTION: This snippet outlines the fundamental class structure for a Jest watch plugin. It includes placeholders for the `apply` method (to hook into Jest lifecycle events), `getUsageInfo` (to define interactive prompts), and `run` (to execute code on key press).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  // Add hooks to Jest lifecycle events\n  apply(jestHooks) {}\n\n  // Get the prompt information for interactive plugins\n  getUsageInfo(globalConfig) {}\n\n  // Executed when the key from `getUsageInfo` is input\n  run(globalConfig, updateConfigAndRun) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Fake and Real Timers in JavaScript Tests\nDESCRIPTION: Demonstrates switching between fake and real timer implementations in Jest test blocks using jest.useFakeTimers() and jest.useRealTimers(). Shows how to pass configuration to useFakeTimers for controlling timer advancement or excluding specific APIs, and how to revert to real timers for subsequent tests. Inputs may include configuration objects. Outputs are altered timer environments affecting subsequent code execution within the tests. Prerequisites: Jest environment with timer mocks enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('advance the timers automatically', () => {\n  jest.useFakeTimers({advanceTimers: true});\n  // ...\n});\n\ntest('do not advance the timers and do not fake `performance`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n  // ...\n});\n\ntest('uninstall fake timers for the rest of tests in the file', () => {\n  jest.useRealTimers();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Jest for Asynchronous Tests\nDESCRIPTION: Testing error cases in asynchronous code using Promise.catch and try/catch with async/await. These tests verify that the correct error objects are returned for invalid user IDs.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Testing for async errors using Promise.catch.\nit('tests error with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(2).catch(error =>\n    expect(error).toEqual({\n      error: 'User with 2 not found.',\n    }),\n  );\n});\n\n// Or using async/await.\nit('tests error with async/await', async () => {\n  expect.assertions(1);\n  try {\n    await user.getUserName(1);\n  } catch (error) {\n    expect(error).toEqual({\n      error: 'User with 1 not found.',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Jest Import Before Using jest.requireActual – JavaScript\nDESCRIPTION: Shows the typical import statement that results in a fully mocked module after a jest.mock call. Demonstrates how direct importing after jest.mock leads to response.text being undefined because both fetch and Response are mocked. This pattern commonly creates problems when needing original class behaviors within tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/BypassingModuleMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// BEFORE\\njest.mock('node-fetch');\\nimport fetch, {Response} from 'node-fetch';\n```\n\n----------------------------------------\n\nTITLE: Implementing mockRejectedValueOnce for one-time Promise rejections in JavaScript\nDESCRIPTION: Demonstrates how to create an async mock that rejects with a specified error for a single call, useful for testing specific error handling scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting describe Blocks for Hierarchical Tests in Jest (JavaScript)\nDESCRIPTION: Shows how `describe` blocks can be nested to create a hierarchy for organizing tests. This example tests a `binaryStringToNumber` function, grouping tests for invalid inputs and valid inputs separately.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Extending Manual Mocks with jest.createMockFromModule (JavaScript)\nDESCRIPTION: Demonstrates using `jest.createMockFromModule('../utils')` to generate a mock based on the `utils.js` module. It then shows how to override a specific property (`isAuthorized`) of the generated mock with a custom mock function (`jest.fn()`). The test verifies that other properties (`authorize`) remain mocked and that the custom override behaves as expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst utils = jest.createMockFromModule('../utils');\n\nutils.isAuthorized = jest.fn(secret => secret === 'not wizard');\n\ntest('implementation created by jest.createMockFromModule', () => {\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\n  expect(utils.isAuthorized('not wizard')).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Matcher via Jest Environment Setup - JavaScript\nDESCRIPTION: Demonstrates adding the toBeWithinRange matcher globally by registering it in a Jest setupFilesAfterEnv script. Requires the matcher to be exported and imported into the setup file. Ensures the matcher is available in all Jest tests without per-file import. Input: matcher function. Output: matcher available globally.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_57\n\nLANGUAGE: js\nCODE:\n```\nimport {expect} from '@jest/globals';\n// remember to export `toBeWithinRange` as well\nimport {toBeWithinRange} from './toBeWithinRange';\n\nexpect.extend({\n  toBeWithinRange,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining a React Link Component for Snapshot Testing (TypeScript)\nDESCRIPTION: A functional React component named `Link` written in TypeScript (`tsx`). It renders an anchor (`<a>`) tag and uses the `useState` hook to manage its CSS class based on hover state (`'normal'` or `'hovered'`), changing the class on `onMouseEnter` and `onMouseLeave` events. This component is used as an example for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\n\nconst STATUS = {\n  HOVERED: 'hovered',\n  NORMAL: 'normal',\n};\n\nexport default function Link({page, children}) {\n  const [status, setStatus] = useState(STATUS.NORMAL);\n\n  const onMouseEnter = () => {\n    setStatus(STATUS.HOVERED);\n  };\n\n  const onMouseLeave = () => {\n    setStatus(STATUS.NORMAL);\n  };\n\n  return (\n    <a\n      className={status}\n      href={page || '#'}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using test.concurrent.each with Array Parameter in JavaScript\nDESCRIPTION: Example of using test.concurrent.each with an array of test case parameters to run data-driven tests concurrently. Each test uses the array parameters as function arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Modern Fake Timers Configuration in Jest\nDESCRIPTION: Defines the TypeScript interface `ModernFakeTimersConfig` outlining the structure and available options for configuring Jest's modern fake timers (backed by `@sinonjs/fake-timers`). It includes properties like `advanceTimers`, `doNotFake`, `enableGlobally`, `legacyFakeTimers`, `now`, and `timerLimit`, along with JSDoc-style comments explaining each option's purpose and default value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\ntype ModernFakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /** Whether fake timers should be enabled for all test files. The default is `false`. */\n  enableGlobally?: boolean;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number;\n  /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Jest Configuration using @jest/types in TypeScript\nDESCRIPTION: This snippet shows how to create a type-safe Jest configuration file (`jest.config.ts`) using TypeScript. It imports the `Config` type namespace from `@jest/types` and uses `Config.InitialOptions` to type the configuration object, enabling static analysis and autocompletion for Jest configuration options.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-types/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// jest.config.ts\nimport type {Config} from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  // some typed config\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Transformer Interfaces in TypeScript\nDESCRIPTION: Illustrates the TypeScript interfaces defining the API contracts for Jest transformers. These include synchronous and asynchronous transformer variants, along with configuration options, caching mechanisms, and factory patterns. Implementers can use these interfaces as guidance for building custom transformation modules compatible with Jest’s code loading mechanisms. This design enables implementation of both synchronous and asynchronous code transformation, with optional instrumentation and cache key calculation for testing code preprocessing workflows in both CommonJS and ECMAScript Module environments. The snippet assumes a TypeScript environment with access to RawSourceMap and ProjectConfig types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CodeTransformation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransformOptions<TransformerConfig = unknown> {\\n  supportsDynamicImport: boolean;\\n  supportsExportNamespaceFrom: boolean;\\n  /**\\n   * The value is:\\n   * - `false` if Jest runs without Node ESM flag `--experimental-vm-modules`\\n   * - `true` if the file extension is defined in [extensionsToTreatAsEsm](Configuration.md#extensionstotreatasesm-arraystring)\\n   * and Jest runs with Node ESM flag `--experimental-vm-modules`\\n   *\\n   * See more at https://jestjs.io/docs/next/ecmascript-modules\\n   */\\n  supportsStaticESM: boolean;\\n  supportsTopLevelAwait: boolean;\\n  instrument: boolean;\\n  /** Cached file system which is used by `jest-runtime` to improve performance. */\\n  cacheFS: Map<string, string>;\\n  /** Jest configuration of currently running project. */\\n  config: ProjectConfig;\\n  /** Stringified version of the `config` - useful in cache busting. */\\n  configString: string;\\n  /** Transformer configuration passed through `transform` option by the user. */\\n  transformerConfig: TransformerConfig;\\n}\\n\\ntype TransformedSource = {\\n  code: string;\\n  map?: RawSourceMap | string | null;\\n};\\n\\ninterface SyncTransformer<TransformerConfig = unknown> {\\n  canInstrument?: boolean;\\n\\n  getCacheKey?: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => string;\\n\\n  getCacheKeyAsync?: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => Promise<string>;\\n\\n  process: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => TransformedSource;\\n\\n  processAsync?: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => Promise<TransformedSource>;\\n}\\n\\ninterface AsyncTransformer<TransformerConfig = unknown> {\\n  canInstrument?: boolean;\\n\\n  getCacheKey?: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => string;\\n\\n  getCacheKeyAsync?: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => Promise<string>;\\n\\n  process?: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => TransformedSource;\\n\\n  processAsync: (\\n    sourceText: string,\\n    sourcePath: string,\\n    options: TransformOptions<TransformerConfig>,\\n  ) => Promise<TransformedSource>;\\n}\\n\\ntype Transformer<TransformerConfig = unknown> =\\n  | SyncTransformer<TransformerConfig>\\n  | AsyncTransformer<TransformerConfig>;\\n\\ntype TransformerCreator<\\n  X extends Transformer<TransformerConfig>,\\n  TransformerConfig = unknown,\\n> = (transformerConfig?: TransformerConfig) => X;\\n\\ntype TransformerFactory<X extends Transformer> = {\\n  createTransformer: TransformerCreator<X>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring the DynamoDB Client for Local Testing - JavaScript\nDESCRIPTION: Initializes an AWS DynamoDB DocumentClient with conditional endpoint and region configuration for local testing environments. When Jest is detected (via JEST_WORKER_ID), it connects to a local DynamoDB instance without SSL and uses a mock region. This snippet should be placed in your test setup files and ensures code uses the appropriate database endpoint based on the environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/DynamoDB.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');\n\nconst isTest = process.env.JEST_WORKER_ID;\nconst config = {\n  convertEmptyValues: true,\n  ...(isTest && {\n    endpoint: 'localhost:8000',\n    sslEnabled: false,\n    region: 'local-env',\n  }),\n};\n\nconst ddb = new DocumentClient(config);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage of test.each with Array of Objects\nDESCRIPTION: Shows how to use test.each with an array of objects in TypeScript, demonstrating type inference for test arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Jest Tests with Node Inspector (Windows)\nDESCRIPTION: Starts Jest using Node.js with the inspector agent enabled on Windows, allowing a debugger to attach. The `--inspect-brk` flag pauses execution until a debugger connects, and `--runInBand` ensures tests run serially in the same process, simplifying debugging. Replace `[any other arguments here]` with additional Jest CLI options if needed. Requires Node.js and Jest installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Storing Jest Configuration in JSON File\nDESCRIPTION: This snippet defines Jest configuration in a JSON file, suitable for 'jest.config.json'. It sets 'bail' (stop after first failure) and enables verbose output. JSON config files must be fully JSON-serializable and contain only static configuration, without comments or functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"bail\": 1,\\n  \"verbose\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Null Values with toBeNull in Jest\nDESCRIPTION: This example shows how to use .toBeNull() to specifically test for null values. The test verifies that the bloop() function returns null, using a matcher that provides more descriptive error messages than .toBe(null).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction bloop() {\n  return null;\n}\n\ntest('bloop returns null', () => {\n  expect(bloop()).toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Spying on Constructor Calls with Jest Mock Function\nDESCRIPTION: Technique for tracking constructor calls by replacing the constructor with a Jest mock function. This allows verification of how many times the constructor was called in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Rejections with Jest .rejects Helper\nDESCRIPTION: Using Jest's .rejects helper to test for promise rejections. This provides a more concise way to verify that promises reject with the expected error values.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Testing for async errors using `.rejects`.\nit('tests error with rejects', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n\n// Or using async/await with `.rejects`.\nit('tests error with async/await and rejects', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Utility Module for Testing in JavaScript\nDESCRIPTION: Provides a simple JavaScript utility module (`utils.js`) exporting an object with `authorize` and `isAuthorized` functions. This module is intended for use in test examples, particularly for demonstrating Jest's mocking capabilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  authorize: () => 'token',\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: Example of setting up watchPathIgnorePatterns in Jest configuration to ignore specific directories during watch mode. This helps optimize test re-runs by excluding irrelevant file changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Setting a Colored Test Display Name in Jest (JavaScript)\nDESCRIPTION: Demonstrates configuring `displayName` as an object with `name` ('CLIENT') and `color` ('blue') properties in a Jest configuration (CommonJS). This allows customizing the background color of the label printed alongside tests, using valid color names supported by the `chalk` library.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Formatting in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override specific snapshot formatting options in Jest configuration. It disables printing of basic prototypes for objects and arrays.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Restoring Real Timers After Each Test in Jest (JavaScript)\nDESCRIPTION: Illustrates restoring the original timer implementations in Jest after test execution to avoid cross-test interference. This is achieved by calling jest.useRealTimers() in an afterEach hook, ensuring fake timers do not affect subsequent tests. The snippet demonstrates typical usage alongside tests using both fake and real timers, requiring the Jest runtime.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nafterEach(() => {\n  jest.useRealTimers();\n});\n\ntest('do something with fake timers', () => {\n  jest.useFakeTimers();\n  // ...\n});\n\ntest('do something with real timers', () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Consumer Class Using SoundPlayer in JavaScript\nDESCRIPTION: This snippet defines the `SoundPlayerConsumer` class, which imports and utilizes the `SoundPlayer` class. Its constructor creates an instance of `SoundPlayer`, and the `playSomethingCool` method calls the `playSoundFile` method on this instance. This class is the subject under test in the mocking examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"sound-player-consumer.js\"\nimport SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Delay Between Jest Test Retries in JavaScript\nDESCRIPTION: Shows how to introduce a waiting period before retrying a failed test using the `waitBeforeRetry` option in `jest.retryTimes`. The value is specified in milliseconds (1000ms in this example). The test will be retried up to 3 times with a 1-second delay between attempts. Requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3, {waitBeforeRetry: 1000});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Jest Array Subset Matching\nDESCRIPTION: Examples showing how to use arrayContaining() to test array subsets.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating Module Loading with jest.isolateModules in JavaScript\nDESCRIPTION: Demonstrates `jest.isolateModules(fn)`, which executes the provided function `fn` with a sandboxed module registry. Modules required inside the callback are isolated from modules required outside or in other `isolateModules` calls, providing stronger isolation than `jest.resetModules()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nlet myModule;\njest.isolateModules(() => {\n  myModule = require('myModule');\n});\n\nconst otherCopyOfMyModule = require('myModule');\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Testing Callbacks in Jest (JavaScript)\nDESCRIPTION: Highlights a common mistake when testing callback-based asynchronous functions. Without using the `done` callback mechanism, the Jest test finishes execution as soon as `fetchData` is called, before the asynchronous callback has a chance to run, potentially leading to false positives.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Don't do this!\ntest('the data is peanut butter', () => {\n  function callback(error, data) {\n    if (error) {\n      throw error;\n    }\n    expect(data).toBe('peanut butter');\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring modulePathIgnorePatterns in Jest\nDESCRIPTION: Shows how to set up modulePathIgnorePatterns to exclude certain paths from being require()-able in the test environment. The example excludes the build directory from module resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Timer Limits in Jest\nDESCRIPTION: A configuration example showing how to set a custom limit for the number of timers Jest will run before throwing an error. This is useful for debugging or for tests with a high number of timer operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers({timerLimit: 100});\n```\n\n----------------------------------------\n\nTITLE: Installing Identity Object Proxy for CSS Modules Mocking using Bash\nDESCRIPTION: This command installs the `identity-obj-proxy` package as a development dependency using npm (or yarn via npm2yarn conversion). This package is used to mock CSS Modules in Jest, allowing className lookups to work correctly in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev identity-obj-proxy\n```\n\n----------------------------------------\n\nTITLE: Installing react-test-renderer for Create React App (Bash)\nDESCRIPTION: Command to install `react-test-renderer` as a development dependency using npm or yarn. This package is needed for snapshot testing in React projects, particularly those bootstrapped with Create React App which already includes Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Installing Jest using npm - Bash\nDESCRIPTION: Demonstrates how to install Jest as a development dependency using npm. This snippet assumes npm is installed and will add Jest to your project's dev dependencies with the --save-dev flag. No parameters are necessary and the output will be an updated package.json file reflecting Jest as a devDependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest\n```\n\n----------------------------------------\n\nTITLE: Using Asymmetric Matchers in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 18.0.0, these asymmetric matchers (`expect.any`, `expect.anything`, `expect.objectContaining`, `expect.arrayContaining`, `expect.stringMatching`) allow for flexible comparisons within assertions like `toEqual` or `toHaveBeenCalledWith`. They enable matching based on type or partial structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.any\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.anything\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.objectContaining\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.arrayContaining\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.stringMatching\n```\n\n----------------------------------------\n\nTITLE: Testing Mocked Properties of Different Types with jest.createMockFromModule in JavaScript\nDESCRIPTION: Tests the mocking behavior of jest.createMockFromModule applied to various data types from an example module. Each property is checked to ensure it behaves as expected (e.g., functions are mock functions, objects deeply cloned, arrays are empty, primitives unchanged). Dependency: Jest, the complex example module. Inputs: none; Outputs: expectations on types and values of module properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst example = jest.createMockFromModule('../example');\\n\\ntest('should run example code', () => {\\n  // creates a new mocked function with no formal arguments.\\n  expect(example.function.name).toBe('square');\\n  expect(example.function).toHaveLength(0);\\n\\n  // async functions get the same treatment as standard synchronous functions.\\n  expect(example.asyncFunction.name).toBe('asyncSquare');\\n  expect(example.asyncFunction).toHaveLength(0);\\n\\n  // creates a new class with the same interface, member functions and properties are mocked.\\n  expect(example.class.constructor.name).toBe('Bar');\\n  expect(example.class.foo.name).toBe('foo');\\n  expect(example.class.array).toHaveLength(0);\\n\\n  // creates a deeply cloned version of the original object.\\n  expect(example.object).toEqual({\\n    baz: 'foo',\\n    bar: {\\n      fiz: 1,\\n      buzz: [],\\n    },\\n  });\\n\\n  // creates a new empty array, ignoring the original array.\\n  expect(example.array).toHaveLength(0);\\n\\n  // creates a new property with the same primitive value as the original property.\\n  expect(example.number).toBe(123);\\n  expect(example.string).toBe('baz');\\n  expect(example.boolean).toBe(true);\\n  expect(example.symbol).toEqual(Symbol.for('a.b.c'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Tasks with jest-worker in JavaScript\nDESCRIPTION: Demonstrates using `jest-worker` for task parallelization. It defines a worker module (`heavy-task.js`) exporting a potentially long-running function. The main script (`main.js`) imports the `Worker` class from `jest-worker`, creates a worker instance pointing to the task module, and then invokes the exported function (`myHeavyTask`) concurrently with different arguments using `Promise.all`. This allows CPU-intensive tasks to run in separate processes, improving performance. Requires the `jest-worker` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Implementation with mockImplementation in TypeScript\nDESCRIPTION: Demonstrates using `mockFn.mockImplementation()` with TypeScript to provide a typed custom function implementation for a Jest mock. The example shows defining an initial typed implementation via `jest.fn()` and then replacing it. Requires Jest (`@jest/globals`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Mocking Static and Getter Methods\nDESCRIPTION: Demonstrates how to mock static methods and getter methods using Jest's spyOn functionality with appropriate configurations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Template Literal Table (Different Types) in Jest (TypeScript)\nDESCRIPTION: Shows parameterized tests in Jest using a template literal data table with fields of different types. TypeScript infers arguments as a union of all field types. This pattern is handy for heterogeneous data-driven tests. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${'three'}\n  ${3} | ${4} | ${'seven'}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example different types', ({a, b, expected}) => {\n  // all arguments are of type `number | string` because some inputs (a, b) are of type `number` and some others (expected) are of type `string`\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timer Limit for Jest Fake Timers\nDESCRIPTION: This snippet demonstrates how to configure the maximum number of timers Jest will execute before assuming an infinite loop when using fake timers. The `timerLimit` option is passed to `jest.useFakeTimers` to set a custom limit (100 in this example), overriding the default.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\njest.useFakeTimers({timerLimit: 100});\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Implementation in JavaScript\nDESCRIPTION: Shows how to mock a class implementation in JavaScript by providing a mock implementation that returns an object with mocked methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method:', mockMethod.mock.calls);\n```\n\n----------------------------------------\n\nTITLE: Using Jest Property Matchers for Dynamic Fields in Snapshots (JavaScript)\nDESCRIPTION: This snippet demonstrates the solution for handling dynamic data in snapshots using Jest's property matchers. By passing an object to `toMatchSnapshot` with `expect.any(Date)` and `expect.any(Number)` for the dynamic fields, Jest checks the type instead of the exact value, allowing the test to pass consistently.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the matchers and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    id: expect.any(Number),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing 'toBeWithinRange' Custom Matcher in Jest - JavaScript\nDESCRIPTION: Shows usage of the toBeWithinRange matcher in a Jest test file. Requires importing expect and test from @jest/globals and registering the matcher module. Includes tests for both positive, negative, and asymmetric object value cases. Inputs: numbers or objects to test, expected ranges. Outputs: test pass or failure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_53\n\nLANGUAGE: js\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using the `onTestRunComplete` Hook in a Jest Watch Plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates using the `jestHooks.onTestRunComplete` hook inside the `apply` method. This hook receives the test `results` object, allowing the plugin to perform actions based on the outcome of the test run, such as checking for snapshot failures.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onTestRunComplete(results => {\n      this._hasSnapshotFailure = results.snapshot.failure;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using test.only.each with array in JavaScript\nDESCRIPTION: Shows how to use test.only.each with an array of test cases. This allows running specific tests with different test data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the onTestRunComplete Hook in a Jest Watch Plugin\nDESCRIPTION: Illustrates how to use the `jestHooks.onTestRunComplete` hook within the `apply` method. This hook is called after each test run completes and receives the test `results` object as an argument, allowing the plugin to access information like snapshot failures.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onTestRunComplete(results => {\n      this._hasSnapshotFailure = results.snapshot.failure;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots using Jest CLI in Bash\nDESCRIPTION: This command shows how to update snapshots using the Jest CLI. It runs Jest with the --updateSnapshot flag to regenerate snapshots for failing tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --updateSnapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Testing (JavaScript)\nDESCRIPTION: Example `babel.config.js` file configuration. It specifies the necessary Babel presets (`@babel/preset-env` and `@babel/preset-react`) to transpile modern JavaScript and JSX syntax used in React components for the Jest test environment. The `runtime: 'automatic'` option for the React preset enables the modern JSX transform.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    '@babel/preset-env',\n    ['@babel/preset-react', {runtime: 'automatic'}],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Mock Function Instantiation with mock.instances in JavaScript\nDESCRIPTION: Shows how the `mock.instances` array tracks object instances created from a mock function using the `new` keyword. Each element in the array corresponds to an instance created.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock (`__mocks__`) for Method Spying in Jest using JavaScript\nDESCRIPTION: Provides the code for a manual mock file located at `__mocks__/sound-player.js`. This alternative to inline `jest.mock` achieves the same goal of spying on instance methods. It exports the mock method (`mockPlaySoundFile`) and the mock constructor itself (as default). The mock method needs to be imported into the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Custom Matcher 'toBeWithinRange' - JavaScript\nDESCRIPTION: Implements a custom matcher toBeWithinRange, validating that a number is within specified bounds. The matcher checks input types and provides clear failure messages using Jest utilities on the 'this' context. Requires importing expect from @jest/globals. Register the matcher with expect.extend so it is available in tests. Inputs: actual value, floor, ceiling. Outputs: matcher pass/fail and error message.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_52\n\nLANGUAGE: js\nCODE:\n```\nimport {expect} from '@jest/globals';\n\nfunction toBeWithinRange(actual, floor, ceiling) {\n  if (\n    typeof actual !== 'number' ||\n    typeof floor !== 'number' ||\n    typeof ceiling !== 'number'\n  ) {\n    throw new TypeError('These must be of type number!');\n  }\n\n  const pass = actual >= floor && actual <= ceiling;\n  if (pass) {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} not to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: true,\n    };\n  } else {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: false,\n    };\n  }\n}\n\nexpect.extend({\n  toBeWithinRange,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Manual Mock for React Native Text Component - JavaScript\nDESCRIPTION: This snippet demonstrates creating a custom manual mock for the 'Text' component in React Native using Jest. It re-creates the component to forward its props and children, and preserves 'propTypes' to mimic the original's API. Dependencies: Jest, React, real Text implementation. Used to mock non-native modules with full prop compatibility in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\njest.mock('Text', () => {\n  const RealComponent = jest.requireActual('Text');\n  const React = require('react');\n  class Text extends React.Component {\n    render() {\n      return React.createElement('Text', this.props, this.props.children);\n    }\n  }\n  Text.propTypes = RealComponent.propTypes;\n  return Text;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing moduleDirectories in Jest Config - JavaScript\nDESCRIPTION: Demonstrates how to override module resolution directories by specifying 'moduleDirectories' in a Jest configuration object. The example includes both 'node_modules' and 'bower_components', and is exported using CommonJS. Requires Jest and the specified directories must be present in the project structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Checking if a Mock Function Returned with `expect().toHaveReturned()` in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `jest.fn()` to create a mock function (`drink`) that returns a value. The `.toHaveReturned()` matcher (alias `.toReturn()`) asserts that the mock function completed execution successfully (i.e., did not throw an error) at least one time. Requires Jest environment and `jest.fn()`. \nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ntest('drinks returns', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring extensionsToTreatAsEsm in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration for specifying which file extensions Jest should treat as ECMAScript Modules. This example configures TypeScript files (.ts) to be processed as ESM.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Reporters in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to customize Jest's 'coverageReporters' option, which specifies the formats for coverage output. The example shows using Istanbul reporters with an option tuple to skip lines for fully-covered files. Dependencies include Node.js with Jest installed, and the configuration should be placed in a Jest config file. Inputs and outputs are the configuration object and generated coverage reports, respectively.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using --watchman option in Jest\nDESCRIPTION: The --watchman option controls whether to use watchman for file crawling. It defaults to true and can be disabled using --no-watchman.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n--watchman\n```\n\nLANGUAGE: bash\nCODE:\n```\n--no-watchman\n```\n\n----------------------------------------\n\nTITLE: Package.json Test Script Configuration\nDESCRIPTION: JSON configuration to add Jest test script to package.json.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing matchMedia Mock in Jest Test\nDESCRIPTION: This example shows how to import a separate matchMedia mock file before the tested file when window.matchMedia is executed directly in the tested file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ManualMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport './matchMedia.mock'; // Must be imported before the tested file\nimport {myMethod} from './file-to-test';\n\ndescribe('myMethod()', () => {\n  // Test the method here...\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking CommonJS Modules from ESM Tests in JavaScript\nDESCRIPTION: Provides an example test file demonstrating how to mock a CommonJS module (`electron`) when testing another CJS module (`main.cjs`) from an ESM environment. It uses the standard `jest.mock` for the CJS dependency and shows two ways to import the mocked CJS module and the module under test: using `createRequire` or dynamic `import()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ECMAScriptModules.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {createRequire} from 'node:module';\nimport {jest} from '@jest/globals';\n\nconst require = createRequire(import.meta.url);\n\njest.mock('electron', () => ({\n  app: {\n    on: jest.fn(),\n    whenReady: jest.fn(() => Promise.resolve()),\n  },\n  BrowserWindow: jest.fn().mockImplementation(() => ({\n    // partial mocks.\n  })),\n}));\n\nconst {BrowserWindow} = require('electron');\nconst exported = require('./main.cjs');\n\n// alternatively\nconst {BrowserWindow} = (await import('electron')).default;\nconst exported = await import('./main.cjs');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Using the `onFileChange` Hook in a Jest Watch Plugin (JavaScript)\nDESCRIPTION: This code shows the implementation of the `jestHooks.onFileChange` hook within the `apply` method. This hook is triggered when watched files change, providing information about the affected projects (`projects` array containing `config` and `testPaths`) and their test paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onFileChange(({projects}) => {\n      this._projects = projects;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Jest and Webpack\nDESCRIPTION: Babel configuration file to use @babel/preset-env for Jest and webpack compatibility.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Snapshot Matcher 'toMatchTrimmedSnapshot' (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a custom Jest snapshot matcher, `toMatchTrimmedSnapshot`. It uses `expect.extend` and imports `toMatchSnapshot` from `jest-snapshot`. The custom matcher takes a received value and a length, slices the received string to the specified length, and then calls the standard `toMatchSnapshot` logic with the trimmed string. An example test case using this custom matcher is included.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.slice(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nStored snapshot will look like:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n```\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Multiple Custom Reporters (Bash)\nDESCRIPTION: This example shows how to specify multiple reporters for a Jest test run using the `--reporters` flag multiple times. It configures Jest to use both the 'default' reporter and the 'jest-junit' reporter. Note that specific options for reporters cannot be configured via the CLI.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest --reporters=\"default\" --reporters=\"jest-junit\"\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Mocks for Nonexistent Modules with jest.mock in JavaScript\nDESCRIPTION: This snippet shows how to use the third argument of jest.mock to define a virtual mock for modules that do not physically exist in the codebase. Useful for simulating native or generated modules such as those used in react-native. Requires specifying {virtual: true} and providing a factory function for the module implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\n  '../moduleName',\n  () => {\n    /*\n     * Custom implementation of a module that doesn't exist in JS,\n     * like a generated module or a native module in react-native.\n     */\n  },\n  {virtual: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Using diff() to Compare JavaScript Arrays\nDESCRIPTION: Example of using the diff() function to compare two arrays and generate a formatted difference output. The function serializes values, compares them line-by-line, and returns a string with comparison lines showing deletions, additions, and common elements.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = ['delete', 'common', 'changed from'];\nconst b = ['common', 'changed to', 'insert'];\n\nconst difference = diff(a, b);\n```\n\n----------------------------------------\n\nTITLE: Running Data-Driven Tests Exclusively with describe.only.each (Array Table) in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to execute only a specific set of data-driven test suites using describe.only.each with an array of input arrays. Each sub-array represents parameters for one run of the contained tests. Jest is required; the input is a data table array, and outputs depend on test assertions. Additional tests outside the only block are skipped.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ndescribe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Volume Class with Custom Equality - JavaScript\nDESCRIPTION: This module provides a JavaScript class Volume that represents a measurement of volume in liters ('L') or milliliters ('mL'), equipped with a custom equals method for comparing values across units. This is designed for use with custom equality testers in Jest so that toEqual can determine equivalence regardless of unit, facilitating domain-specific comparisons in tests. No external dependencies are required beyond standard ES module support.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class Volume {\\n  constructor(amount, unit) {\\n    this.amount = amount;\\n    this.unit = unit;\\n  }\\n\\n  toString() {\\n    return `[Volume ${this.amount}${this.unit}]`;\\n  }\\n\\n  equals(other) {\\n    if (this.unit === other.unit) {\\n      return this.amount === other.amount;\\n    } else if (this.unit === 'L' && other.unit === 'mL') {\\n      return this.amount * 1000 === other.unit;\\n    } else {\\n      return this.amount === other.unit * 1000;\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using jsdom Test Environment in Jest\nDESCRIPTION: Example of using the jsdom environment for testing DOM operations in Jest through @jest-environment docblock.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div');\n  expect(element).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter Options in TypeScript\nDESCRIPTION: TypeScript configuration for customizing the Summary reporter through the default reporter, setting summaryThreshold to control when detailed test failure summaries are shown.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Test Sequencer in JavaScript\nDESCRIPTION: An example implementation of a custom test sequencer that sorts tests alphabetically by path. This class extends Jest's default sequencer and implements both shard and sort methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_74\n\nLANGUAGE: js\nCODE:\n```\nconst Sequencer = require('@jest/test-sequencer').default;\n\nclass CustomSequencer extends Sequencer {\n  /**\n   * Select tests for shard requested via --shard=shardIndex/shardCount\n   * Sharding is applied before sorting\n   */\n  shard(tests, {shardIndex, shardCount}) {\n    const shardSize = Math.ceil(tests.length / shardCount);\n    const shardStart = shardSize * (shardIndex - 1);\n    const shardEnd = shardSize * shardIndex;\n\n    return [...tests]\n      .sort((a, b) => (a.path > b.path ? 1 : -1))\n      .slice(shardStart, shardEnd);\n  }\n\n  /**\n   * Sort test to determine order of execution\n   * Sorting is applied after sharding\n   */\n  sort(tests) {\n    // Test structure information\n    // https://github.com/jestjs/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21\n    const copyTests = [...tests];\n    return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));\n  }\n}\n\nmodule.exports = CustomSequencer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Transformers in Jest\nDESCRIPTION: Example configuration that combines babel-jest with a custom CSS transformer in Jest's transform configuration option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CodeTransformation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Mock Name with mockName in JavaScript\nDESCRIPTION: Shows how to use `mockFn.mockName()` to assign a descriptive string name to a Jest mock function (`jest.fn()`). This name replaces the default 'jest.fn()' in test failure messages, improving readability. Requires Jest (`jest.fn()`, `expect`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resolver with Package Filter in JavaScript\nDESCRIPTION: This snippet shows how to implement a custom resolver for Jest that modifies the package.json resolution process. It demonstrates using the defaultResolver and packageFilter options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (path, options) => {\n  // Call the defaultResolver, so we leverage its cache, error handling, etc.\n  return options.defaultResolver(path, {\n    ...options,\n    // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)\n    packageFilter: pkg => {\n      return {\n        ...pkg,\n        // Alter the value of `main` before resolving the package\n        main: pkg.module || pkg.main,\n      };\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Types with Mock Definitions using jest.Mocked in TypeScript\nDESCRIPTION: Explains the `jest.Mocked<Source>` utility type in TypeScript. It wraps an existing type (`Source`, which can be a class, function, or object type) with Jest's specific mock type definitions, providing access to mock methods like `.mockClear()` while maintaining the underlying type structure. This improves type safety when working with mocked modules or objects imported via `jest.mock()`. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  // Error: 'getMockedFetch' is not defined. Assuming it assigns the mocked fetch.\n  // mockedFetch = require('node-fetch'); // Example assignment\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  // Error: 'getMockedFetch' is not defined. Assuming it assigns the mocked fetch.\n  // mockedFetch = require('node-fetch'); // Example assignment\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers in Jest (TypeScript)\nDESCRIPTION: This snippet configures Jest to use its legacy fake timers globally by setting both enableGlobally and legacyFakeTimers to true in a TypeScript config file. Exported with ESModule syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Writing a Snapshot Test for a React Native Component\nDESCRIPTION: This snippet demonstrates how to create a snapshot test for the 'Intro' component using React's test renderer and Jest's snapshot feature.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Intro from '../Intro';\n\ntest('renders correctly', () => {\n  const tree = renderer.create(<Intro />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fake Timer Options in Jest (TypeScript)\nDESCRIPTION: Demonstrates setting default fake timer options (`doNotFake: ['nextTick']`, `timerLimit: 1000`) within a typed Jest configuration (`Config`) using TypeScript (ES Module syntax). These global settings will be used by `jest.useFakeTimers()` unless specific options are provided in the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use DynamoDB Preset\nDESCRIPTION: JSON configuration for Jest to use the jest-dynamodb preset. This enables Jest to work with DynamoDB for testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/DynamoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-dynamodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Rejected Promises in Async Tests with `mockRejectedValue` (TypeScript)\nDESCRIPTION: Shows how to use `mockRejectedValue` in TypeScript with generics (`fn<() => Promise<never>>`) to create a typed async mock function that always rejects. The `never` type indicates the promise never resolves successfully.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Jest Runner `runTests` Method Signature in TypeScript\nDESCRIPTION: Specifies the asynchronous `runTests` method signature required for a custom Jest test runner class. It accepts test details, watchers, callbacks for test lifecycle events (onStart, onResult, onFailure), and runner options. The runner class must export this method and accept `globalConfig` in its constructor.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nasync function runTests(\n  tests: Array<Test>,\n  watcher: TestWatcher,\n  onStart: OnTestStart,\n  onResult: OnTestSuccess,\n  onFailure: OnTestFailure,\n  options: TestRunnerOptions,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using diffLinesUnified2 with Serialized Objects\nDESCRIPTION: Advanced example using diffLinesUnified2() to compare two pairs of string arrays. This is useful for ignoring differences like indentation when comparing serialized objects by using separate arrays for display and comparison.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {format} from 'pretty-format';\n\nconst a = {\n  text: 'Ignore indentation in serialized object',\n  time: '2019-09-19T12:34:56.000Z',\n  type: 'CREATE_ITEM',\n};\nconst b = {\n  payload: {\n    text: 'Ignore indentation in serialized object',\n    time: '2019-09-19T12:34:56.000Z',\n  },\n  type: 'CREATE_ITEM',\n};\n\nconst difference = diffLinesUnified2(\n  // serialize with indentation to display lines\n  format(a).split('\\n'),\n  format(b).split('\\n'),\n  // serialize without indentation to compare lines\n  format(a, {indent: 0}).split('\\n'),\n  format(b, {indent: 0}).split('\\n'),\n);\n```\n\n----------------------------------------\n\nTITLE: Using describe.each with Array Parameters in Jest\nDESCRIPTION: Example showing how to use describe.each() with arrays to run the same test suite with different data sets. This approach reduces test code duplication when testing with multiple inputs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic ES6 SoundPlayer Class in JavaScript\nDESCRIPTION: This code defines a simple ES6 class named SoundPlayer with a constructor that initializes a property and a method to play sound files.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Puppeteer Test Environment for Jest (JavaScript)\nDESCRIPTION: Creates a Jest TestEnvironment class that reads a Puppeteer WebSocket endpoint from disk, connects a browser instance, and exposes it globally for tests. Requires Node.js modules for filesystem and paths, 'puppeteer', and 'jest-environment-node'. Ensures browser isolation and teardown by handling setup/teardown hooks. Name the file (e.g., puppeteer_environment.js) and specify under testEnvironment in Jest's config.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {readFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nclass PuppeteerEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config);\n  }\n\n  async setup() {\n    await super.setup();\n    // get the wsEndpoint\n    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');\n    if (!wsEndpoint) {\n      throw new Error('wsEndpoint not found');\n    }\n\n    // connect to puppeteer\n    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({\n      browserWSEndpoint: wsEndpoint,\n    });\n  }\n\n  async teardown() {\n    if (this.global.__BROWSER_GLOBAL__) {\n      this.global.__BROWSER_GLOBAL__.disconnect();\n    }\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n}\n\nmodule.exports = PuppeteerEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Installing jest-puppeteer using npm\nDESCRIPTION: Installs the `jest-puppeteer` preset package as a development dependency using npm. This package simplifies the integration of Puppeteer with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Mock Implementations with mockImplementationOnce in JavaScript\nDESCRIPTION: Illustrates the use of `mockImplementationOnce(fn)` to provide a specific implementation for the *next* call to the mock function. This method can be chained to define different behaviors for successive calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom File Transformer for Jest in JavaScript\nDESCRIPTION: Defines a file transformer module for Jest to return the base filename (without path) for asset module imports. Useful for mocking file imports where the test only needs the filename string. Requires the 'path' Node module. This object exports a process() function that Jest will invoke for matching file extensions as configured.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Data-Driven Tests Expected to Fail in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to combine `test.failing` with `each` using an array of objects. Each test case defined in the array is expected to fail; it will pass if the test function throws an error for that data set and fail otherwise. Requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\ntest.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Manual Mock Factory with `jest.mock` in JavaScript\nDESCRIPTION: This snippet introduces the `jest.mock` API, allowing developers to provide a manual mock implementation for a specific module within a test. It shows defining a mock factory function for a 'sum' module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-04-12-jest-11.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Implement a mock for a hypothetical \"sum\" module.\njest.mock('sum', () => {\n  return (a, b) => a + b;\n});\n\nconst sum = require('sum');\nsum(1, 4); // 5\n```\n```\n\n----------------------------------------\n\nTITLE: Mock Function Returning This Context in JavaScript\nDESCRIPTION: Demonstrates how to set the mock implementation of a mock function to always return its 'this' context, leveraging .mockImplementation(). In jest-mock, this is syntactic sugar for .mockReturnThis(), simplifying test code when mocking class instance methods or constructors. The key input is the mock function; the output is a consistent return of the current 'this' context.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-mock/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmockFn.mockImplementation(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Jest Test with Manual Mock for fs Module\nDESCRIPTION: This test demonstrates how to use the manual mock for the fs module. It sets up mock file info, calls the summarizeFilesInDirectorySync function, and asserts the expected behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ManualMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\njest.mock('fs');\n\ndescribe('listFilesInDirectorySync', () => {\n  const MOCK_FILE_INFO = {\n    '/path/to/file1.js': 'console.log(\"file1 contents\");',\n    '/path/to/file2.txt': 'file2 contents',\n  };\n\n  beforeEach(() => {\n    // Set up some mocked out file info before each test\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\n  });\n\n  test('includes all files in the directory in the summary', () => {\n    const FileSummarizer = require('../FileSummarizer');\n    const fileSummary =\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\n\n    expect(fileSummary.length).toBe(2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `modulePaths` in Jest (TypeScript)\nDESCRIPTION: Configures the `modulePaths` option in `jest.config.ts` using TypeScript. It specifies additional absolute paths for module resolution, similar to `NODE_PATH`. The example adds the project's `app/` directory relative to `<rootDir>`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jest Argument Format Support\nDESCRIPTION: Illustrates that Jest accepts command-line arguments in both dashed (`--collect-coverage`) and camelCase (`--collectCoverage`) formats. Both commands achieve the same result.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njest --collect-coverage\njest --collectCoverage\n```\n\n----------------------------------------\n\nTITLE: Running Parameterized Tests with Only Modifier Using Each and Tagged Template in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to run specific parameterized tests using test.only.each with a tagged template literal. Only supplied cases for addition are executed; other tests are skipped. Test titles use dynamic interpolation via template row values.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code Returning a Promise with test in Jest (JavaScript)\nDESCRIPTION: This example shows how to write a Jest test that returns a promise, pausing test completion until the promise resolves. Useful for testing asynchronous code such as API calls. The dependency is Jest; input is any function returning a promise, and the expected output is checked upon promise resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ntest('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cached Task in a JestWorker Child Process using Babel in JavaScript\nDESCRIPTION: This worker module (`worker.js`) defines an asynchronous `transform` function using Babel to transform files. It maintains an in-memory `cache` specific to this worker instance. When called via a `jest-worker` configured with `computeWorkerKey` (using filename), subsequent calls for the same file are routed to this worker and served from the cache, demonstrating stateful behavior. Requires the `@babel/core` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport babel from '@babel/core';\n\nconst cache = Object.create(null);\n\nexport function transform(filename) {\n  if (cache[filename]) {\n    return cache[filename];\n  }\n\n  // jest-worker can handle both immediate results and thenables. If a\n  // thenable is returned, it will be await'ed until it resolves.\n  return babel.transformFileAsync(filename).then(result => {\n    cache[filename] = result;\n\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing jQuery DOM Update with Jest and JSDOM - JavaScript\nDESCRIPTION: Defines a Jest test case that mocks asynchronous data fetching and verifies DOM updates after a simulated button click. Uses Jest\\'s mocking abilities to replace the \\'fetchCurrentUser\\' module, configures a fake DOM using jsdom, and checks that the #username span is properly updated after the click event. This snippet requires jest, jest-environment-jsdom (for DOM simulation), jQuery, and that test files are located in the __tests__/ directory. The test expects predefined HTML structure and proper module resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialjQuery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\njest.mock('../fetchCurrentUser');\\n\\ntest('displays a user after a click', () => {\\n  // Set up our document body\\n  document.body.innerHTML =\\n    '<div>' +\\n    '  <span id=\"username\" />' +\\n    '  <button id=\"button\" />' +\\n    '</div>';\\n\\n  // This module has a side-effect\\n  require('../displayUser');\\n\\n  const $ = require('jquery');\\n  const fetchCurrentUser = require('../fetchCurrentUser');\\n\\n  // Tell the fetchCurrentUser mock function to automatically invoke\\n  // its callback with some data\\n  fetchCurrentUser.mockImplementation(cb => {\\n    cb({\\n      fullName: 'Johnny Cash',\\n      loggedIn: true,\\n    });\\n  });\\n\\n  // Use jquery to emulate a click on our button\\n  $('#button').click();\\n\\n  // Assert that the fetchCurrentUser function was called, and that the\\n  // #username span's inner text was updated as we'd expect it to.\\n  expect(fetchCurrentUser).toHaveBeenCalled();\\n  expect($('#username').text()).toBe('Johnny Cash - Logged In');\\n});\n```\n\n----------------------------------------\n\nTITLE: Determining JavaScript Value Types with jest-get-type\nDESCRIPTION: Provides examples of using the `getType` function from `jest-get-type` to identify the types of various JavaScript values: an array, a null value, and an undefined value. The resulting type strings ('array', 'null', 'undefined') are logged. Depends on the `jest-get-type` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getType} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n----------------------------------------\n\nTITLE: Testing Directory Summary Code with Mocked fs - JavaScript\nDESCRIPTION: This Jest test file demonstrates testing a module that reads directory contents by using an explicit Jest manual mock for the Node fs module. Before each test, the mocked fs is configured with sample file data, and the tested function's output is asserted. It relies on Jest's mocking API and the custom __setMockFiles method implemented in the manual mock.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ManualMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\njest.mock('fs');\\n\\ndescribe('listFilesInDirectorySync', () => {\\n  const MOCK_FILE_INFO = {\\n    '/path/to/file1.js': 'console.log(\\\"file1 contents\\\");',\\n    '/path/to/file2.txt': 'file2 contents',\\n  };\\n\\n  beforeEach(() => {\\n    // Set up some mocked out file info before each test\\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\\n  });\\n\\n  test('includes all files in the directory in the summary', () => {\\n    const FileSummarizer = require('../FileSummarizer');\\n    const fileSummary =\\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\\n\\n    expect(fileSummary.length).toBe(2);\\n  });\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Testing disableAutomock with Jest - JavaScript\nDESCRIPTION: Demonstrates a test file importing a utility module and calling jest.disableAutomock to disable automatic mocking. It verifies that the original implementation of the authorize function is used during the test. Requires Jest as the test runner and expects the utility module to be present at the referenced path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport utils from '../utils';\\n\\njest.disableAutomock();\\n\\ntest('original implementation', () => {\\n  // now we have the original implementation,\\n  // even if we set the automocking in a jest configuration\\n  expect(utils.authorize()).toBe('token');\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with Async/Await for Failure Cases in Jest (JavaScript)\nDESCRIPTION: Shows how to test for promise rejection using `async`/`await` and a `try...catch` block. `expect.assertions(1)` ensures that the assertion inside the `catch` block is executed. The test awaits `fetchData` and expects it to throw an error, which is then caught and matched against 'error'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (error) {\n    expect(error).toMatch('error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Representing mock function call arguments arrays - Jest - JavaScript\nDESCRIPTION: Demonstrates the contents of the mockFn.mock.calls array for a mock function, showing how each element is an array representing the arguments passed to the function for each call. No dependencies are required other than Jest. Inputs are arrays of arguments; the output is the structure of call arguments tracked by Jest mocks. This is useful for verifying function call history during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring `setupFilesAfterEnv` in Jest (TypeScript)\nDESCRIPTION: Demonstrates configuring the `setupFilesAfterEnv` option in a TypeScript Jest config file (`.ts`) using the `Config` type from Jest. This option specifies an array of module paths to run setup code after the testing framework is installed. This example points to a `setup-jest.js` file relative to the project root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Exporting Jest Configuration Object in TypeScript\nDESCRIPTION: Demonstrates exporting a simple configuration object from a `jest.config.ts` file using TypeScript syntax. It sets the `verbose` option to `true` and explicitly types the configuration object using `Config` imported from the 'jest' package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Asserting Assertion Counts in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 18.0.0, `expect.assertions(number)` verifies that a specific number of assertions are called during a test. This is particularly useful for ensuring that assertions in asynchronous code paths (like callbacks or promises) are actually executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.assertions(number)\n```\n\n----------------------------------------\n\nTITLE: Testing NaN Values with toBeNaN in Jest\nDESCRIPTION: This example demonstrates how to use .toBeNaN() to specifically check if a value is NaN. The test shows both a positive case where NaN is correctly identified and a negative case where a number is correctly identified as not being NaN.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntest('passes when value is NaN', () => {\n  expect(NaN).toBeNaN();\n  expect(1).not.toBeNaN();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React and Jest - JavaScript\nDESCRIPTION: Exports a Babel configuration using both the env preset and the React preset (automatic runtime). This file (babel.config.js) is necessary to ensure Jest can properly transpile React JSX and modern JavaScript syntax during test runs. Place this configuration at the root of your project for automatic detection.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\\n  presets: [\\n    '@babel/preset-env',\\n    ['@babel/preset-react', {runtime: 'automatic'}],\\n  ],\\n};\n```\n\n----------------------------------------\n\nTITLE: Using afterAll for Global Cleanup in Jest (JavaScript)\nDESCRIPTION: Demonstrates the `afterAll` hook in Jest. It runs a cleanup function (`cleanUpDatabase`) once after all tests in the file have completed, useful for tearing down shared global state like a database connection established for the test suite.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.todo in JavaScript\nDESCRIPTION: Demonstrates how to use test.todo for planning future tests. These tests are highlighted in the summary output to show how many tests still need to be implemented.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n```\n\n----------------------------------------\n\nTITLE: Running All Timers in Jest Tests\nDESCRIPTION: A test that uses jest.runAllTimers() to fast-forward through all scheduled timers. This allows testing of callbacks that should be executed after a specific time without waiting for real time to elapse.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\ntest('calls the callback after 1 second', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers();\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Jest for VS Code Debugger Attachment\nDESCRIPTION: Executes Jest via Node.js with debugging enabled (`--inspect-brk`) and forces sequential execution (`--runInBand`). This prepares the Jest process for a debugger like VS Code to attach to it using an 'attach' configuration. Requires Node.js.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\nor on Windows\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Running Jest in Debug Mode from Command Line\nDESCRIPTION: Commands to run Jest with Node's built-in debugging support. This allows attaching an external debugger by pausing execution until a debugger connects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\nor on Windows\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Jest Matcher `toBeWithinRange` (JavaScript)\nDESCRIPTION: Implements a custom Jest matcher function `toBeWithinRange` in JavaScript that checks if a number falls within a specified floor and ceiling (inclusive). It performs type checking on the input arguments and returns the standard matcher object containing a boolean `pass` status and a `message` function for generating failure messages. The matcher is registered using `expect.extend`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_59\n\nLANGUAGE: js\nCODE:\n```\n```js tab={\\\"span\\\":3} title=\\\"toBeWithinRange.js\\\"\nimport {expect} from '@jest/globals';\n\nfunction toBeWithinRange(actual, floor, ceiling) {\n  if (\n    typeof actual !== 'number' ||\n    typeof floor !== 'number' ||\n    typeof ceiling !== 'number'\n  ) {\n    throw new TypeError('These must be of type number!');\n  }\n\n  const pass = actual >= floor && actual <= ceiling;\n  if (pass) {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} not to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: true,\n    };\n  } else {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: false,\n    };\n  }\n}\n\nexpect.extend({\n  toBeWithinRange,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: SoundPlayer Class Definition with Static and Getter Methods\nDESCRIPTION: A class definition for SoundPlayer that includes a regular instance method, a getter method, and a static method, which will be used in subsequent examples to demonstrate mocking techniques.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Asynchronous Test Definition Example (JavaScript)\nDESCRIPTION: Highlights an antipattern where a Jest test (`it` block) is defined inside an asynchronous callback (`setTimeout`). Jest requires tests to be defined synchronously during the initial file execution phase so its test collector can discover them. Asynchronously defined tests will be missed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this it will not work\nsetTimeout(() => {\n  it('passes', () => expect(1).toBe(1));\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Concurrent Data-Driven Tests with test.concurrent.each (Array Table) in Jest (JavaScript)\nDESCRIPTION: This snippet uses test.concurrent.each with an array of parameter tuples to perform parallel parameterized testing in Jest. Each set of parameters is passed asynchronously to the test function. Dependencies include Jest; each row in the table represents arguments for one concurrent test. Useful for scaling up test coverage with varying async data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Parameterized Concurrent Tests with Only Modifier in Jest (JavaScript)\nDESCRIPTION: Demonstrates running a subset of tests concurrently using test.concurrent.only.each with an array of test cases. Only specified parameterized tests (addition cases) are executed; other tests are ignored. Requires Jest, supports asynchronous test functions, and uses expect for assertions. Parameters a and b are summed and compared against expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking CommonJS Modules in ESM Tests\nDESCRIPTION: Shows how to mock CommonJS modules within ESM tests by using jest.mock, createRequire, and dynamic imports. This example mocks Electron's modules and imports the tested code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ECMAScriptModules.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createRequire} from 'node:module';\nimport {jest} from '@jest/globals';\n\nconst require = createRequire(import.meta.url);\n\njest.mock('electron', () => ({\n  app: {\n    on: jest.fn(),\n    whenReady: jest.fn(() => Promise.resolve()),\n  },\n  BrowserWindow: jest.fn().mockImplementation(() => ({\n    // partial mocks.\n  })),\n}));\n\nconst {BrowserWindow} = require('electron');\nconst exported = require('./main.cjs');\n\n// alternatively\nconst {BrowserWindow} = (await import('electron')).default;\nconst exported = await import('./main.cjs');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Spying on Getters and Setters in Jest\nDESCRIPTION: Shows how to use jest.spyOn() with accessType parameter to spy on getter and setter methods of objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst video = {\n  // it's a getter!\n  get play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n\nconst audio = {\n  _volume: false,\n  // it's a setter!\n  set volume(value) {\n    this._volume = value;\n  },\n  get volume() {\n    return this._volume;\n  },\n};\n\nmodule.exports = audio;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst audio = require('./audio');\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play', 'get'); // we pass 'get'\n  const isPlaying = video.play;\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n\ntest('plays audio', () => {\n  const spy = jest.spyOn(audio, 'volume', 'set'); // we pass 'set'\n  audio.volume = 100;\n\n  expect(spy).toHaveBeenCalled();\n  expect(audio.volume).toBe(100);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with TypeScript\nDESCRIPTION: Example of a basic Jest configuration file using TypeScript. It shows how to import the Config type and export a properly typed configuration object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Less Descriptive Snapshot Names in Jest Snapshots\nDESCRIPTION: Shows examples of generated Jest snapshot file content where the test descriptions (e.g., 'should handle some test case') are vague. This lack of descriptiveness makes it harder for reviewers to understand the intended output and verify the snapshot's correctness during code review.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexports[`<UserName /> should handle some test case`] = `null`;\n\nexports[`<UserName /> should handle some other test case`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using toContain Matcher in Jest\nDESCRIPTION: Demonstrates how to use the toContain matcher to check if an array contains a specific item using strict equality (===).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Dependencies Installation\nDESCRIPTION: Command to install Babel dependencies for Jest integration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Configuring `collectCoverageFrom` in TypeScript\nDESCRIPTION: Demonstrates configuring the `collectCoverageFrom` option in a `jest.config.ts` file using TypeScript. It uses an array of glob patterns to include all `.js` and `.jsx` files in coverage collection, while excluding `node_modules` and `vendor` directories. This option requires `collectCoverage` to be `true` or Jest to be invoked with the `--coverage` flag. Requires `ts-node`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Jest via Package Manager\nDESCRIPTION: Shows how to pass Jest CLI arguments when running tests through a package manager script (like npm or yarn). The `--` separator is used to distinguish package manager options from the arguments intended for the underlying Jest command.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_7\n\nLANGUAGE: npm2yarn\nCODE:\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Failing Tests with Each Modifier in Jest (JavaScript)\nDESCRIPTION: Utilizes test.failing.each with an array of objects to execute multiple tests expected to fail. Each test checks the sum of a and b against expected, passing only if an error occurs. Relies on jest-circus runner for support. Useful for cataloging multiple known failing scenarios in a standardized way.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Mock Implementation with mockImplementation in JavaScript\nDESCRIPTION: Demonstrates using `mockFn.mockImplementation()` to provide a custom function implementation for a Jest mock (`jest.fn()`). The example shows defining an initial implementation via `jest.fn()` and then replacing it later using `mockImplementation()`. The mock continues to track calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Skipping Multiple Data-Driven Tests with test.skip.each in Jest (JavaScript)\nDESCRIPTION: Shows how to use Jest's \"test.skip.each\" with an array of arrays to skip multiple parameterized test cases at once. This is ideal for temporarily disabling a series of similar tests without deleting them. It also demonstrates that other standard tests will still run as normal. The snippet requires only Jest, and main parameters include the data table, test case name pattern, and test callback function.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\ntest.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Diffing Index Intervals Using diff-sequences in JavaScript\nDESCRIPTION: This snippet showcases diffIndexIntervals, a function diffing specified index intervals (half-open: [start, end)) from two arrays using diff-sequences. Rather than slicing arrays, it offsets the indices within the callbacks, demonstrating flexibility for partial sequence comparisons. Requires diff-sequences, expects a, b as arrays and proper input validation for interval bounds; outputs or side-effects are defined inside the callbacks.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Diff index intervals that are half open [start, end) like array slice method.\nconst diffIndexIntervals = (a, aStart, aEnd, b, bStart, bEnd) => {\n  // Validate: 0 <= aStart and aStart <= aEnd and aEnd <= a.length\n  // Validate: 0 <= bStart and bStart <= bEnd and bEnd <= b.length\n\n  diff(\n    aEnd - aStart,\n    bEnd - bStart,\n    (aIndex, bIndex) => Object.is(a[aStart + aIndex], b[bStart + bIndex]),\n    (nCommon, aCommon, bCommon) => {\n      // aStart + aCommon, bStart + bCommon\n    },\n  );\n\n  // After the last common subsequence, do any remaining work.\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Test Suites with describe.skip.each and Data Array in Jest (JavaScript)\nDESCRIPTION: This snippet utilizes describe.skip.each with an array to avoid running a test suite for specific data-driven cases. Each test block within the skipped describe will be ignored by Jest. A single test outside the skipped suite is still run. No dependencies are required other than Jest, and all data is passed as nested arrays. Use this approach to quickly exclude an entire parametric testing block while keeping all code present in the file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Path and Global Coverage Thresholds in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enforce code coverage criteria both globally and for specific files, directories, and globs using Jest in JavaScript. Config allows separate minimums for directories, globs, and individual files, applying coverage thresholds independently. Used in large projects to guarantee coverage consistency. Dependencies are Jest and Node.js.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  coverageThreshold: {\\n    global: {\\n      branches: 50,\\n      functions: 50,\\n      lines: 50,\\n      statements: 50,\\n    },\\n    './src/components/': {\\n      branches: 40,\\n      statements: 40,\\n    },\\n    './src/reducers/**/*.js': {\\n      statements: 90,\\n    },\\n    './src/api/very-important-module.js': {\\n      branches: 100,\\n      functions: 100,\\n      lines: 100,\\n      statements: 100,\\n    },\\n  },\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Executing Jest with Multiple Custom Reporters (Bash)\nDESCRIPTION: Runs Jest tests specifying multiple reporters using the `--reporters` flag twice. This example configures Jest to use both the `default` reporter and the `jest-junit` reporter simultaneously, allowing for console output and JUnit XML file generation. Note that reporter-specific options cannot be configured via the CLI.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njest --reporters=\"default\" --reporters=\"jest-junit\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module in JavaScript\nDESCRIPTION: Defines a simple JavaScript module named `utils` with an `isLocalhost` method. This module is used in subsequent examples demonstrating `jest.replaceProperty`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst utils = {\n  isLocalhost() {\n    return process.env.HOSTNAME === 'localhost';\n  },\n};\n\nmodule.exports = utils;\n```\n\n----------------------------------------\n\nTITLE: jQuery DOM Manipulation with Asynchronous Data Fetching\nDESCRIPTION: A jQuery implementation that listens for a button click, fetches user data asynchronously, and updates a username span with formatted text based on the user's login status.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialjQuery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst $ = require('jquery');\nconst fetchCurrentUser = require('./fetchCurrentUser.js');\n\n$('#button').click(() => {\n  fetchCurrentUser(user => {\n    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');\n    $('#username').text(user.fullName + ' - ' + loggedText);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.not.objectContaining() in Jest\nDESCRIPTION: Demonstrates the inverse matcher `expect.not.objectContaining(object)` in Jest. It asserts that the received object does *not* recursively match all the key-value pairs specified in the expected object. In this example, it checks that `{bar: 'baz'}` does not contain `{foo: 'bar'}`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_47\n\nLANGUAGE: js\nCODE:\n```\ndescribe('not.objectContaining', () => {\n  const expected = {foo: 'bar'};\n\n  it('matches if the actual object does not contain expected key: value pairs', () => {\n    expect({bar: 'baz'}).toEqual(expect.not.objectContaining(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Mock Call Arguments with mock.calls in JavaScript\nDESCRIPTION: Demonstrates the structure of the `mock.calls` array property on a Jest mock function. This array stores the arguments passed to the mock function for each invocation, with each call represented as an inner array of arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n----------------------------------------\n\nTITLE: ES6 Module Mocking with Default Export\nDESCRIPTION: Example of mocking ES6 modules with default exports and named exports using __esModule flag.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport moduleName, {foo} from '../moduleName';\n\njest.mock('../moduleName', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => 42),\n    foo: jest.fn(() => 43),\n  };\n});\n\nmoduleName(); // Will return 42\nfoo(); // Will return 43\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Test Runner in TypeScript\nDESCRIPTION: Code signature for creating a custom test runner for Jest. The runner must export a class with a runTests method and can optionally set isSerial property to true for serial execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nasync function runTests(\n  tests: Array<Test>,\n  watcher: TestWatcher,\n  onStart: OnTestStart,\n  onResult: OnTestSuccess,\n  onFailure: OnTestFailure,\n  options: TestRunnerOptions,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Determining Value Types with jest-get-type in JavaScript\nDESCRIPTION: Demonstrates the `getType` function from the `jest-get-type` package to determine the precise primitive type of various JavaScript values (array, null, undefined). It requires the `jest-get-type` package. The function returns a string representing the type, which is logged for each example value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getType} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual ES6 Class Mock using an Actual Class\nDESCRIPTION: Shows an alternative way to create a manual mock by defining an actual ES6 class with the same name (`SoundPlayer`) inside the `__mocks__` directory. This class replaces the original but doesn't provide built-in spying capabilities like `jest.fn()` mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"__mocks__/sound-player.js\"\nexport default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer: constructor was called');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer: playSoundFile was called');\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest via package.json\nDESCRIPTION: Shows how to embed Jest configuration directly within the project's `package.json` file using a top-level `\"jest\"` key. The value of this key is the configuration object. This example sets the `verbose` option to `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"package.json\"\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"verbose\": true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot File for a React Native Component\nDESCRIPTION: This JavaScript code shows the contents of a Jest snapshot file (`.snap`) generated for the `Intro` component test. It captures the serialized component tree, including components, props, and styles, serving as the baseline for future test runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`Intro renders correctly 1`] = `\n<View\n  style={\n    Object {\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#F5FCFF\",\n      \"flex\": 1,\n      \"justifyContent\": \"center\",\n    }\n  }>\n  <Text\n    style={\n      Object {\n        \"fontSize\": 20,\n        \"margin\": 10,\n        \"textAlign\": \"center\",\n      }\n    }>\n    Welcome to React Native!\n  </Text>\n  <Text\n    style={\n      Object {\n        \"color\": \"#333333\",\n        \"marginBottom\": 5,\n        \"textAlign\": \"center\",\n      }\n    }>\n    This is a React Native snapshot test.\n  </Text>\n</View>\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom File Transformer for Asset Mocks in Jest (JavaScript)\nDESCRIPTION: fileTransformer.js provides a custom Jest transformer that exports the basename of a required file (such as an image or other asset) rather than the full path or object. This is useful when needing the asset file's name as a string in tests. Requires 'path' from Node.js, and should be registered in jest.config.js’s transform field.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Reporters Configuration in Jest - JavaScript\nDESCRIPTION: Configures custom reporters for Jest using JavaScript. The 'reporters' array can include built-in reporters (e.g., 'default') and custom reporters specified by the path to a module and options object. The provided options object passes configuration into the reporter's constructor. This enhances test output and integrates additional features, requiring any custom reporters to be implemented according to Jest's interface.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Using expect.not.stringMatching() in Jest\nDESCRIPTION: Illustrates using `expect.not.stringMatching(regexp)` in Jest. This assertion verifies that the received string ('How are you?') does *not* match the provided regular expression (`/Hello world!/`).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_50\n\nLANGUAGE: js\nCODE:\n```\ndescribe('not.stringMatching', () => {\n  const expected = /Hello world!/;\n\n  it('matches if the received value does not match the expected regex', () => {\n    expect('How are you?').toEqual(expect.not.stringMatching(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot File with Mixed Matchers and Values (JavaScript)\nDESCRIPTION: This shows the `.snap` file corresponding to the previous test. The `createdAt` field uses the `Any<Date>` placeholder due to the matcher, while the `name` field stores the exact string value that was checked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Snapshot\nexports[`will check the values and pass 1`] = `\n{\n  \"createdAt\": Any<Date>,\n  \"name\": 'Bond... James Bond',\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Mocking Rejected Promises with mockRejectedValue in JavaScript\nDESCRIPTION: Shows how to use mockRejectedValue to create a mock function that always returns a rejected promise. Useful for testing error handling in async functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Mock Implementations in TypeScript\nDESCRIPTION: Shows how to set different implementations for consecutive calls to a mock function in TypeScript using mockImplementationOnce(), with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Preset (JavaScript)\nDESCRIPTION: Example of configuring a preset in Jest. This snippet shows how to use a preset from an npm module or a filesystem path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: 'foo-bar',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Class Definition with Static and Getter Methods\nDESCRIPTION: Example class definition showing implementation of regular methods, getter methods, and static methods that will be mocked in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Manual Jest Setup (JSON)\nDESCRIPTION: Example structure for `package.json` when manually setting up Jest for a React project. It shows required dependencies (`react`, `react-dom`), development dependencies (Babel presets, Jest, `react-test-renderer`), and a basic `scripts` entry to run Jest tests. Replace `<current-version>` with actual package versions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"<current-version>\",\n    \"react-dom\": \"<current-version>\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"<current-version>\",\n    \"@babel/preset-react\": \"<current-version>\",\n    \"babel-jest\": \"<current-version>\",\n    \"jest\": \"<current-version>\",\n    \"react-test-renderer\": \"<current-version>\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple Resolved Promises with `mockResolvedValueOnce` (JavaScript)\nDESCRIPTION: Demonstrates using `mockResolvedValueOnce` multiple times to make an async mock function resolve to different values on successive calls. After exhausting the 'once' values, it falls back to the value specified by `mockResolvedValue`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Restoring Real Timers in Jest after Tests - JavaScript\nDESCRIPTION: Exemplifies restoring real timers after running tests with fake timers by placing jest.useRealTimers in afterEach and using both fake and real timer environments in separate tests. Depends on Jest and proper use of lifecycle hooks. Inputs: test actions; outputs: environment reset to real timers after each test. Ensures isolation and prevents cross-test contamination of timer mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nafterEach(() => {\n  jest.useRealTimers();\n});\n\ntest('do something with fake timers', () => {\n  jest.useFakeTimers();\n  // ...\n});\n\ntest('do something with real timers', () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Manual Mock for a React Component (JS)\nDESCRIPTION: Illustrates creating a detailed manual mock for the React Native `Text` component. It uses `jest.requireActual('Text')` to access the real component's properties, defines a custom class component wrapper using `React.createElement`, and explicitly copies the `propTypes` from the real component to the mock, ensuring type compatibility in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('Text', () => {\n  const RealComponent = jest.requireActual('Text');\n  const React = require('react');\n  class Text extends React.Component {\n    render() {\n      return React.createElement('Text', this.props, this.props.children);\n    }\n  }\n  Text.propTypes = RealComponent.propTypes;\n  return Text;\n});\n```\n\n----------------------------------------\n\nTITLE: Checkbox With Label Component - React (TypeScript/JSX)\nDESCRIPTION: Defines a CheckboxWithLabel functional React component that toggles between 'labelOn' and 'labelOff' props based on checked state. Uses useState for local state management, and updates its label upon change. Expects labelOn and labelOff props, outputs an input/label pair reflecting checked state.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\\n\\nexport default function CheckboxWithLabel({labelOn, labelOff}) {\\n  const [isChecked, setIsChecked] = useState(false);\\n\\n  const onChange = () => {\\n    setIsChecked(!isChecked);\\n  };\\n\\n  return (\\n    <label>\\n      <input type=\\\"checkbox\\\" checked={isChecked} onChange={onChange} />\\n      {isChecked ? labelOn : labelOff}\\n    </label>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Using toThrow Matcher in Jest\nDESCRIPTION: Demonstrates how to test for thrown errors with various matching criteria including regex, strings, and error objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrow(/yuck/);\n  expect(drinkOctopus).toThrow('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrow(DisgustingFlavorError);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jest's Sugar Matchers for Mock Functions\nDESCRIPTION: These are Jest's built-in matcher functions that provide a cleaner syntax for common assertions on mock functions. They check if a mock was called, what arguments it was called with, and can create snapshots of mock calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// The mock function was called at least once\nexpect(mockFunc).toHaveBeenCalled();\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);\n\n// All calls and the name of the mock is written as a snapshot\nexpect(mockFunc).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with test.skip in JavaScript\nDESCRIPTION: Demonstrates how to use test.skip to skip a specific test while running others. This is useful for temporarily disabling a test without deleting it.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntest('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Jest Environment Options via Docblock (JavaScript)\nDESCRIPTION: Illustrates using the `@jest-environment-options` docblock pragma to pass configuration options directly to the test environment for a specific file. The options are provided as a JSON string. This example sets the `url` option for the `jsdom` environment, verified within the test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_90\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions to Treat as ESM in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet sets up Jest to treat files with a '.ts' extension as ESM modules, useful in environments leveraging TypeScript and ESM imports. Place in a Jest config file using type imports for validation. Output is that Jest parses .ts files as ESM during runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  extensionsToTreatAsEsm: ['.ts'],\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Files for Jest Static Asset Handling\nDESCRIPTION: Example mock files for handling stylesheets and other static assets in Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = 'test-file-stub';\n```\n\n----------------------------------------\n\nTITLE: Writing a Simple Assertion Test with test in Jest (JavaScript)\nDESCRIPTION: This basic snippet illustrates a standard Jest test that expects the return value of inchesOfRain() to be zero. It uses the test function (aliased as it) with a description and a callback. Any function, dependency, or import used (like inchesOfRain) must be defined elsewhere. The inputs are the named test and expectation function, and output is a pass or fail in the test runner based on the assertion. Supports an optional timeout as a third argument.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring TODO Tests with Jest - JavaScript\nDESCRIPTION: Illustrates the use of `test.todo` to declare a test that should be implemented in the future. The test name describes intended behavior. This is useful for tracking planned but unimplemented tests, which will appear in Jest's summary. The actual test content is omitted; Jest is the only dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n```\n\n----------------------------------------\n\nTITLE: Defining Getter and Setter Modules for Jest.spyOn with Access Types - JavaScript\nDESCRIPTION: Illustrates definition of modules with getter and setter properties, set up for access-based spying using jest.spyOn. One object provides a getter, the other includes both getter and setter for volume. Dependencies: Node.js module system. Exports: Objects with get/set methods for use in accessType-based spying. Relevant where property observing is required rather than function calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst video = {\n  // it's a getter!\n  get play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n\nconst audio = {\n  _volume: false,\n  // it's a setter!\n  set volume(value) {\n    this._volume = value;\n  },\n  get volume() {\n    return this._volume;\n  },\n};\n\nmodule.exports = audio;\n```\n\n----------------------------------------\n\nTITLE: Running Tests Concurrently using test.concurrent in JavaScript with Jest\nDESCRIPTION: Example of using test.concurrent to run tests concurrently rather than sequentially. This can improve test execution speed for independent tests that don't affect each other.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Property Replacement with Jest.replaceProperty - JavaScript\nDESCRIPTION: Example test suite showing how to use jest.replaceProperty to swap object properties for mocking purposes, and restore them using jest.restoreAllMocks in afterEach. Dependencies: Jest, and a testable utils module with isLocalhost(). Inputs: manipulated process.env object, expected string values. Outputs: Boolean test assertions. Ensures mocked objects/properties can be reliably reset after tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst utils = require('./utils');\n\nafterEach(() => {\n  // restore replaced property\n  jest.restoreAllMocks();\n});\n\ntest('isLocalhost returns true when HOSTNAME is localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n  expect(utils.isLocalhost()).toBe(true);\n});\n\ntest('isLocalhost returns false when HOSTNAME is not localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'not-localhost'});\n  expect(utils.isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with toBeGreaterThanOrEqual in Jest\nDESCRIPTION: Shows how to use the toBeGreaterThanOrEqual matcher to check if a value is greater than or equal to an expected number. Works with both regular numbers and big integers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is at least 12', () => {\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Jasmine-style Test Structure in JavaScript\nDESCRIPTION: Illustrates a standard test structure using Jasmine syntax, commonly used with Jest. It shows requiring a module (`sum`) at the top level and then using it within a test case defined by `describe` and `it` blocks, asserting its output with `expect`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-03-11-javascript-unit-testing-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst sum = require('sum');\ndescribe('sum', () => {\n  it('works', () => {\n    expect(sum(5, 4)).toBe(9);\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Tests with Jest in JavaScript\nDESCRIPTION: Demonstrates how to use Jest's \"test.skip\" to prevent a specific test from running while maintaining the code for future reference. Useful for temporarily broken or incomplete tests. No external dependencies are required beyond Jest, and the snippet shows standard usage with related aliases and normal tests. Key parameters are the test name and a callback function for the test body.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\ntest('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Fixes for jest.mock with Three Arguments in Jest (JavaScript)\nDESCRIPTION: Jest 18.0.0 included fixes for `babel-plugin-jest-hoist` when using `jest.mock` with three arguments (module path, factory function, and options like `{virtual: true}`). This ensures more reliable mocking behavior, especially with virtual modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock\n```\n\n----------------------------------------\n\nTITLE: Running the First Shard of a Jest Test Suite (Bash)\nDESCRIPTION: Executes the first shard (index 1) of a Jest test suite that has been divided into 3 shards total, using the `--shard=1/3` option. This is commonly used in CI/CD pipelines to distribute the test load across multiple parallel jobs, running approximately one-third of the tests in this specific job. Requires a test sequencer configured with a `shard` method.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=1/3\n```\n\n----------------------------------------\n\nTITLE: Writing Failing Tests in Jest (JavaScript)\nDESCRIPTION: Introduces test.failing for tests that are expected to fail under certain circumstances. The test passes only if it throws an error, suitable for documenting known issues or BDD workflows. Requires Jest's jest-circus test runner. Test handlers demonstrate both a failing and a non-failing case.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.each with Tagged Template Literals in JavaScript\nDESCRIPTION: Example of using describe.each with tagged template literals to run the same test suite with different sets of data. It creates a parameterized test suite that tests addition operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.skip.each with template literals in JavaScript\nDESCRIPTION: Shows how to use test.skip.each with template literals to skip running a collection of data-driven tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntest.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Functions using CommonJS - JavaScript\nDESCRIPTION: Demonstrates exporting an object with utility functions (authorize, isAuthorized) using CommonJS syntax. This is often used for compatibility with environments not supporting ES Modules. The code is set up to work with Jest's module system.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Using `afterAll` for Global Cleanup in Jest (JavaScript)\nDESCRIPTION: Illustrates how to use the `afterAll` hook in Jest to perform cleanup tasks, such as cleaning a database connection, once all tests within the file or `describe` block have completed. It shows a scenario with a global database object and a cleanup function. The hook waits for promises returned by the function to resolve.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Output When No Tests Found with --runTestsByPath (Bash)\nDESCRIPTION: This shows the console output resulting from the previous `jest --runTestsByPath __tests__/t` command. Since the provided path was not an exact match for any test file, Jest reports that no tests were found.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nNo tests found\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Reporter in TypeScript\nDESCRIPTION: TypeScript configuration for using the GitHub Actions reporter with summary reporter, with silent mode disabled for full log output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Module Isolation with Jest isolateModules\nDESCRIPTION: Shows how to use jest.isolateModules to create sandboxed module registries for complete module isolation in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nlet myModule;\njest.isolateModules(() => {\n  myModule = require('myModule');\n});\n\nconst otherCopyOfMyModule = require('myModule');\n```\n\n----------------------------------------\n\nTITLE: Adding Planned Tests with test.todo in Jest (JavaScript)\nDESCRIPTION: Shows how to use \"test.todo\" to mark a test as planned but not yet implemented in Jest. This is useful for test-driven development or when outlining future test coverage. Only the test name is required. The snippet also highlights that passing a function will throw an error, distinguishing this from skipped or implemented tests. Jest is the only dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nconst add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Teardown for Puppeteer in Jest (JavaScript)\nDESCRIPTION: Provides a global teardown script to close the Puppeteer browser instance and remove the temporary wsEndpoint file after all Jest tests. Utilizes 'fs', 'os', and 'path' modules alongside the global browser stored in setup. Should be referenced in Jest config with the globalTeardown property. Designed to avoid resource leaks by ensuring browser shutdown and directory cleanup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\nmodule.exports = async function () {\n  // close the browser instance\n  await globalThis.__BROWSER_GLOBAL__.close();\n\n  // clean-up the wsEndpoint file\n  await fs.rm(DIR, {recursive: true, force: true});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger Attachment\nDESCRIPTION: Provides a VS Code `launch.json` configuration to attach the built-in debugger to a running Node.js process. This is used in conjunction with running Jest via `node --inspect-brk`. The configuration specifies the request type as `attach` and the default Node.js debug port `9229`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach\",\n      \"port\": 9229\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Related to Specific Source Files\nDESCRIPTION: Uses the `--findRelatedTests` option to execute only the test files that are related to (e.g., cover) the specified source files (`fileA.js` and `fileB.js`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Max Workers in GitHub Actions (YAML)\nDESCRIPTION: Provides a YAML snippet for a GitHub Actions workflow. It uses the `SimenB/github-actions-cpu-cores` action to detect the number of available CPU cores in the runner environment and then passes this count to `jest --max-workers` to optimize parallel test execution time.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get number of CPU cores\n  id: cpu-cores\n  uses: SimenB/github-actions-cpu-cores@v2\n- name: run tests\n  run: yarn jest --max-workers ${{ steps.cpu-cores.outputs.count }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Workers Dynamically in GitHub Actions\nDESCRIPTION: A GitHub Actions workflow snippet demonstrating how to dynamically determine the number of available CPU cores using the `SimenB/github-actions-cpu-cores` action. The output (`steps.cpu-cores.outputs.count`) is then passed to Jest's `--max-workers` flag via an environment variable, ensuring optimal parallelization based on the runner's resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get number of CPU cores\n  id: cpu-cores\n  uses: SimenB/github-actions-cpu-cores@v2\n- name: run tests\n  run: yarn jest --max-workers ${{ steps.cpu-cores.outputs.count }}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mock Implementation on Imported Module Using Jest (CommonJS, JavaScript)\nDESCRIPTION: Shows how to define a mock implementation for a required (CommonJS) module function using jest.mock and .mockImplementation. The module is automatically mocked, and .mockImplementation is used to set its default return value to 42. Inputs/outputs are handled entirely by the mock, eliminating the real implementation for mockable testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function () {\n  // some implementation;\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.mock('../foo'); // this happens automatically with automocking\nconst foo = require('../foo');\n\n// foo is a mock function\nfoo.mockImplementation(() => 42);\nfoo();\n// > 42\n```\n\n----------------------------------------\n\nTITLE: Jest Setup File with Custom Matchers\nDESCRIPTION: Example setup file that extends Jest with custom matchers from jest-extended and adds a global teardown hook.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchers = require('jest-extended');\nexpect.extend(matchers);\n\nafterEach(() => {\n  jest.useRealTimers();\n});\n```\n\n----------------------------------------\n\nTITLE: Using diffLinesRaw for Basic Line Comparison (JS)\nDESCRIPTION: Demonstrates the basic usage of the `diffLinesRaw` function from `jest-diff`. It takes two arrays of strings (`aLines` and `bLines`) representing lines of text and returns an array of diff results. Each element in the result array is a tuple indicating whether a line was deleted (-1), common (0), or inserted (1), along with the line content.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst aLines = ['delete', 'common', 'changed from'];\nconst bLines = ['common', 'changed to', 'insert'];\n\nconst diffs = diffLinesRaw(aLines, bLines);\n```\n\n----------------------------------------\n\nTITLE: Recording Function Call Contexts with mock.contexts in Jest JavaScript\nDESCRIPTION: Illustrates tracking the 'this' context provided to a mock function for each invocation using mock.contexts. Multiple contexts are established via bind, call, and apply, and the snippet shows how each maps to the correct index. Requires Jest, and demonstrates behavior when the context changes between calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Mock Implementation with `jest.fn` in JavaScript\nDESCRIPTION: Shows how to provide an implementation function directly as an argument to `jest.fn()`. This allows the created mock function to execute specific custom logic, like invoking a callback passed to it, when called during a test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest.fn(cb => cb(null, true));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n```\n\n----------------------------------------\n\nTITLE: Setting a Fixed Return Value with mockReturnValue in JavaScript\nDESCRIPTION: Demonstrates using `mockFn.mockReturnValue(value)` to make a Jest mock function (`jest.fn()`) consistently return a specific predefined value whenever it's called. The example also shows that the return value can be updated by calling `mockReturnValue` again.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Using toMatch Matcher in Jest\nDESCRIPTION: Shows how to use toMatch for testing strings against regular expressions and substrings.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Export Conditions in Jest (TypeScript)\nDESCRIPTION: Shows how to set custom export conditions for the test environment in Jest using TypeScript. This example configures the 'jsdom' environment to use 'react-native' export conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    customExportConditions: ['react-native'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using rootDir in transformIgnorePatterns in TypeScript\nDESCRIPTION: TypeScript version of using the <rootDir> token in transformIgnorePatterns to ensure paths are resolved relative to the project root directory, preventing accidental ignoring of files in different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_82\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring setupFilesAfterEnv in JavaScript\nDESCRIPTION: Example of configuring setupFilesAfterEnv in a Jest config file to use a custom setup script that runs after the test framework is installed but before tests execute.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Object Structure in TypeScript\nDESCRIPTION: Defines a nested object structure with a typed function that will be mocked in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Test Using a Custom Snapshot Serializer\nDESCRIPTION: Provides an example Jest test case that utilizes `toMatchSnapshot`. If a custom snapshot serializer (like the one checking for the 'foo' property) is configured via `snapshotSerializers` and its `test` function returns true for the `bar` object, that serializer's `serialize` function will be used to generate the snapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\ntest(() => {\n  const bar = {\n    foo: {\n      x: 1,\n      y: 2,\n    },\n  };\n\n  expect(bar).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Mocking of Node Built-In Module fs - Jest JavaScript\nDESCRIPTION: Defines a manual mock for the Node.js `fs` built-in module using Jest, overriding the default behavior provided by the automatic mock generator. The mock reimplements methods like `readdirSync` and introduces a helper `__setMockFiles` for dynamically configuring mock filesystem contents. Depends on Node's `path` and Jest's `jest.createMockFromModule`, and is necessary when you need to test code that interacts with the filesystem without real I/O. Expects explicit use in test setup, especially for built-ins.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst path = require('path');\\n\\nconst fs = jest.createMockFromModule('fs');\\n\\n// This is a custom function that our tests can use during setup to specify\\n// what the files on the \\\"mock\\\" filesystem should look like when any of the\\n// `fs` APIs are used.\\nlet mockFiles = Object.create(null);\\nfunction __setMockFiles(newMockFiles) {\\n  mockFiles = Object.create(null);\\n  for (const file in newMockFiles) {\\n    const dir = path.dirname(file);\\n\\n    if (!mockFiles[dir]) {\\n      mockFiles[dir] = [];\\n    }\\n    mockFiles[dir].push(path.basename(file));\\n  }\\n}\\n\\n// A custom version of `readdirSync` that reads from the special mocked out\\n// file list set via __setMockFiles\\nfunction readdirSync(directoryPath) {\\n  return mockFiles[directoryPath] || [];\\n}\\n\\nfs.__setMockFiles = __setMockFiles;\\nfs.readdirSync = readdirSync;\\n\\nmodule.exports = fs;\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Snapshot Serializer in Jest\nDESCRIPTION: Example showing how to add a custom snapshot serializer module to Jest using expect.addSnapshotSerializer(). This affects snapshot assertions in the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affects expect(value).toMatchSnapshot() assertions in the test file\n```\n\n----------------------------------------\n\nTITLE: Formatting React Elements and Test Components - JavaScript\nDESCRIPTION: This snippet demonstrates formatting a React element and a react-test-renderer test component using pretty-format with plugins. It creates a button element with an onClick handler, then serializes it using the ReactElement and ReactTestComponent plugins. Output is a formatted JSX-like string representation. Requires React, react-test-renderer, and pretty-format installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n----------------------------------------\n\nTITLE: Accessing Mock Function Contexts Example in JavaScript\nDESCRIPTION: Shows how to access the execution contexts (this values) of mock function calls, which are stored in the mock.contexts array.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Environment Options (TypeScript)\nDESCRIPTION: TypeScript configuration example for setting up test environment options including custom HTML, URL, and user agent.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Advanced Coverage Reporters with Options in TypeScript\nDESCRIPTION: In this TypeScript sample, custom Jest coverage reporters are configured, including reporter-specific options like 'skipFull: true' for the 'text' reporter. The configuration uses Jest's Config type, and is suited for projects using TypeScript and ts-node.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Resolution with .resolves Matcher in Jest (JavaScript)\nDESCRIPTION: Shows how to use the `.resolves` matcher with `expect` for testing promises. The test returns the `expect` statement. Jest waits for the promise returned by `fetchData` to resolve and then applies the `.toBe` matcher to the resolved value. Omitting the `return` statement would cause the test to finish prematurely.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot File Using Property Matchers (JavaScript)\nDESCRIPTION: This snippet shows the `.snap` file content generated when using property matchers. Instead of specific dynamic values, the snapshot stores placeholders like `Any<Date>` and `Any<Number>` for the fields where matchers were used, ensuring stable snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Snapshot\nexports[`will check the matchers and pass 1`] = `\n{\n  \"createdAt\": Any<Date>,\n  \"id\": Any<Number>,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Focusing Parameterized Tests with `each`.test.only in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to use `.test.only` (or aliases `.it.only`, `.fit`) with Jest's `each` and tagged template literals. This focuses the test runner exclusively on the set of parameterized tests generated by this `each` block, skipping all other tests in the suite. The data definition and test function structure remain the same as regular `.test`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.only('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Jest Snapshot Test for a React Native Component (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to write a Jest snapshot test for the `Intro` React Native component. It uses `react-test-renderer` to create a serializable representation of the component's render tree and `expect(tree).toMatchSnapshot()` to compare it against a stored snapshot, ensuring UI consistency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Intro from '../Intro';\n\ntest('renders correctly', () => {\n  const tree = renderer.create(<Intro />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Resolved Promises with mockResolvedValue in TypeScript\nDESCRIPTION: TypeScript version of mockResolvedValue usage, demonstrating type-safe mocking of async functions that return resolved promises.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Module Paths with moduleNameMapper in Jest (JSON)\nDESCRIPTION: Demonstrates using the `moduleNameMapper` option in Jest configuration. This allows mapping module paths requested in tests to different actual paths. In this example, any import of `my-module.js` will be resolved to the file located at `<rootDir>/path/to/my-module.js`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"moduleNameMapper\": {\n    \"my-module.js\": \"<rootDir>/path/to/my-module.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Concurrent Data-Driven Tests Using Jest (JavaScript)\nDESCRIPTION: Applies the `test.concurrent.skip.each` API to prevent a collection of concurrent, data-driven tests from running while allowing other tests to execute. The skipped tests are declared in a table, but only the non-skipped test executes. Intended for use when temporarily disabling tests; requires Jest with concurrent test capability. Each row defines a test case, but the callback for these tests will not run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Ignore Patterns in TypeScript\nDESCRIPTION: TypeScript version of configuring Jest transformIgnorePatterns to exclude certain files from transformation, with a caution about overlapping patterns that might cause unexpected behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_80\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Validating Values with Mix of Matchers and Constants in Jest Snapshots (JavaScript)\nDESCRIPTION: This snippet demonstrates using property matchers for some object fields while matching others by value, suitable when only a portion of the data is dynamic. It uses expect.any(Date) for the createdAt property and compares name by its exact string value. Requires Jest. Inputs are user objects; output is a robust snapshot unaffected by changing dates.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the values and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    name: 'Bond... James Bond',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    name: 'Bond... James Bond',\n  });\n});\n\n// Snapshot\nexports[`will check the values and pass 1`] = `\n{\n  \"createdAt\": Any<Date>,\n  \"name\": 'Bond... James Bond',\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Using `beforeEach` for Per-Test Setup in Jest (JavaScript)\nDESCRIPTION: Illustrates the `beforeEach` hook in Jest for performing setup tasks, such as resetting a database, before each individual test runs. This ensures a clean state for every test case and demonstrates handling asynchronous setup by returning a promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.only in JavaScript\nDESCRIPTION: Demonstrates how to use test.only to run a specific test in a file. This is useful for debugging large test files by running only a subset of tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntest.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Native Modules in Jest Tests\nDESCRIPTION: These snippets show different ways to mock native modules in Jest tests, including simple mocks and more complex manual mocks for React components.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('react-native-video', () => 'Video');\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('path/to/MyNativeComponent', () => {\n  const mockComponent = require('react-native/jest/mockComponent');\n  return mockComponent('path/to/MyNativeComponent');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('Text', () => {\n  const RealComponent = jest.requireActual('Text');\n  const React = require('react');\n  class Text extends React.Component {\n    render() {\n      return React.createElement('Text', this.props, this.props.children);\n    }\n  }\n  Text.propTypes = RealComponent.propTypes;\n  return Text;\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a React Component with Jest - JavaScript\nDESCRIPTION: Demonstrates mocking a module with Jest to replace a component with a simple string, suitable for snapshot or shallow rendering. The string returned is interpreted as a native HTML tag, which can trigger warnings in React 16+. Place this in your test files to mock imports for components when testing higher-level containers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions for ESM in Jest (TypeScript)\nDESCRIPTION: This snippet shows how to configure Jest to treat specific file extensions as ECMAScript Modules using the extensionsToTreatAsEsm option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset for React Native Projects (JSON)\nDESCRIPTION: This configuration snippet demonstrates how to set up Jest for React Native testing by specifying the 'jest-react-native' preset in the package's Jest configuration. This minimal configuration enables out-of-the-box compatibility with React Native components and expects the 'jest-react-native' package to be installed as a dev dependency. Only the 'preset' key is shown, but further configuration may be added as needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-07-27-jest-14.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"jest-react-native\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a File Summarizer with Jest and a Manual Node fs Mock - JavaScript\nDESCRIPTION: This test suite checks that a summary module for filesystem contents works correctly when using a manual mock for fs. It calls jest.mock to explicitly mock 'fs', sets up the mock file structure before each test, and asserts that the correct number of files is reported. Dependencies are Jest, the mocked 'fs' module, and the FileSummarizer module under test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ManualMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\njest.mock('fs');\\n\\ndescribe('listFilesInDirectorySync', () => {\\n  const MOCK_FILE_INFO = {\\n    '/path/to/file1.js': 'console.log(\"file1 contents\");',\\n    '/path/to/file2.txt': 'file2 contents',\\n  };\\n\\n  beforeEach(() => {\\n    // Set up some mocked out file info before each test\\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\\n  });\\n\\n  test('includes all files in the directory in the summary', () => {\\n    const FileSummarizer = require('../FileSummarizer');\\n    const fileSummary =\\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\\n\\n    expect(fileSummary.length).toBe(2);\\n  });\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Async Rejection with mockImplementationOnce in Jest (JS)\nDESCRIPTION: Shows the underlying implementation shorthand for `mockRejectedValueOnce(value)`. It uses `mockImplementationOnce` with a function returning `Promise.reject(value)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\n----------------------------------------\n\nTITLE: Using expect.stringContaining Asymmetric Matcher in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 19.0.0, `expect.stringContaining` is an asymmetric matcher used to verify if a string contains a specific substring. It's useful within `toEqual` or `toHaveBeenCalledWith` assertions for partial string matching.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.stringContaining\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Equality Tester in TypeScript\nDESCRIPTION: Defines a typed function `areVolumesEqual` in TypeScript as a custom equality tester for `Volume` instances. It checks types using `instanceof` and delegates comparison to the `Volume.equals` method or returns `undefined`/`false` based on type compatibility. It registers the tester using `expect.addEqualityTesters`. Requires the `Volume` class and `@jest/globals`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_55\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect} from '@jest/globals';\nimport {Volume} from './Volume.js'; // Assuming Volume.ts is compiled to Volume.js\n\nfunction areVolumesEqual(a: unknown, b: unknown): boolean | undefined {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume === isBVolume) {\n    // Let Jest's default equality testers handle comparison of non-Volumes or two Volumes\n    return undefined;\n  } else {\n    // If one is a Volume and the other isn't, they're not equal\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n```\n\n----------------------------------------\n\nTITLE: Implementing mockRejectedValue for simulating Promise rejections in TypeScript\nDESCRIPTION: TypeScript implementation showing how to type and configure an async mock function that always rejects with a specified error.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Non-Default Exported Class with Named Key - Jest - JavaScript\nDESCRIPTION: Demonstrates how to mock a named (not default) exported class by returning an object with a key matching the class name in the Jest module factory. Uses jest.fn and mockImplementation to enable tracking constructor calls, with all mocked members included on instance. Useful when dealing with named exports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Global Types - Bash\nDESCRIPTION: Installs '@jest/globals' as a dev dependency, providing TypeScript type definitions for Jest's global test APIs. Ensures type safety and autocompletion in test files without configuring custom typings. Requires npm and a TypeScript project using Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @jest/globals\n```\n\n----------------------------------------\n\nTITLE: Creating a Utility Function Using jest.Spied<> Type in TypeScript\nDESCRIPTION: Implements a helper function that uses jest.spyOn() to mock Date.now() and returns the spy with the appropriate jest.Spied<> type. This ensures proper type checking when the spy is used in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jest Describe Block and Test Execution Order (JavaScript)\nDESCRIPTION: This snippet uses `console.log` within `describe` blocks and `test` functions to show Jest's execution order. All `describe` block callbacks are executed first to register the tests, followed by the execution of the actual tests in the order they were defined. The output comments confirm this registration-then-execution sequence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndescribe('describe outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n\n    test('test 1', () => console.log('test 1'));\n  });\n\n  console.log('describe outer-b');\n\n  test('test 2', () => console.log('test 2'));\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n\n    test('test 3', () => console.log('test 3'));\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test 1\n// test 2\n// test 3\n```\n\n----------------------------------------\n\nTITLE: Testing Function Return Status with toHaveReturned()\nDESCRIPTION: Demonstrates how to test that a mock function successfully returned (didn't throw an error) at least once using toHaveReturned(). The example creates a mock function that returns true.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinks returns', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Jest APIs in TypeScript\nDESCRIPTION: Shows how to explicitly import Jest APIs (expect, jest, test) from @jest/globals in TypeScript projects. This import is required to make TypeScript examples work properly with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/_TypeScriptExamplesNote.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test with Dynamic Object Fields - JavaScript\nDESCRIPTION: Illustrates the issue of snapshotting objects with generated fields such as dates or random IDs. Jest's expect(...).toMatchSnapshot() will save the literal generated values, causing tests to fail on every run unless handled differently. Example demonstrates this with a user object. No dependencies beyond Jest, though generated data should be controlled or replaced for stable tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('will fail every time', () => {\\n  const user = {\\n    createdAt: new Date(),\\n    id: Math.floor(Math.random() * 20),\\n    name: 'LeBron James',\\n  };\\n\\n  expect(user).toMatchSnapshot();\\n});\\n\\n// Snapshot\\nexports[`will fail every time 1`] = `\\n{\\n  \\\"createdAt\\\": 2018-05-19T23:36:09.816Z,\\n  \\\"id\\\": 3,\\n  \\\"name\\\": \\\"LeBron James\\\",\\n}\\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing pretty-format with CommonJS - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the format function from pretty-format using CommonJS syntax. The require method is used to import the module, and the format function is aliased as prettyFormat. No special setup is required other than having pretty-format installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Setting forceCoverageMatch in Jest Config - TypeScript\nDESCRIPTION: Illustrates configuring the 'forceCoverageMatch' property in a Jest configuration object using TypeScript. The example imports the Config type from 'jest' and exports the configuration as the default export. Requires TypeScript and 'jest' type definitions; the key parameter is 'forceCoverageMatch', which specifies file patterns for coverage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Using Named Mock Functions in Jest\nDESCRIPTION: Shows how to assign a name to a mock function using mockName() to make test failure messages more readable by indicating which mock function failed.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform with Multiple Preprocessors in TypeScript\nDESCRIPTION: TypeScript version of configuring Jest transform option to use both babel-jest for JavaScript/TypeScript files and a custom transformer for CSS files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_78\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring `moduleNameMapper` in Jest (TypeScript)\nDESCRIPTION: Demonstrates configuring `moduleNameMapper` in `jest.config.ts` using TypeScript. It maps module paths via regular expressions, showing examples like mapping to stubs, using `<rootDir>`, substituting captured groups, and providing multiple target paths for a pattern.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Custom toBe Matcher in Bash\nDESCRIPTION: Example output from the custom toBe matcher showing the formatted error message with expected and received values. This demonstrates how the error is displayed to users when an assertion fails.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n  expect(received).toBe(expected)\n\n    Expected value to be (using Object.is):\n      \"banana\"\n    Received:\n      \"apple\"\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest with TypeScript\nDESCRIPTION: TypeScript example for configuring watchPathIgnorePatterns in Jest to ignore specific directories during watch mode, utilizing TypeScript type definitions for Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect Asynchronous Test Definition\nDESCRIPTION: Shows an incorrect way to define a Jest test using `setTimeout`. Tests must be defined synchronously when Jest parses the test file. Defining tests within asynchronous callbacks like `setTimeout` prevents Jest from discovering and running them.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this it will not work\nsetTimeout(() => {\n  it('passes', () => expect(1).toBe(1));\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Serializers in Jest (TypeScript)\nDESCRIPTION: This TypeScript configuration snippet demonstrates how to add a custom snapshot serializer to Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Sequentially for Performance\nDESCRIPTION: Execute Jest tests in a single thread using the --runInBand option. This can improve performance in certain environments, especially CI servers.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --runInBand\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --runInBand\n```\n\n----------------------------------------\n\nTITLE: Creating and Extending Module Mocks with jest.createMockFromModule in TypeScript\nDESCRIPTION: Demonstrates using jest.createMockFromModule in TypeScript with generic typing to mock all properties of an imported module. The mocked 'isAuthorized' is replaced with a custom mock implementation. The test checks both the default and extended behavior. Dependencies: Jest, TypeScript, types for imported module. Input: typings and module path; Output: assertion results in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst {utils} =\\n  jest.createMockFromModule<typeof import('../utils')>('../utils');\\n\\nutils.isAuthorized = jest.fn((secret: string) => secret === 'not wizard');\\n\\ntest('implementation created by jest.createMockFromModule', () => {\\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\\n  expect(utils.isAuthorized('not wizard')).toBe(true);\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Jest Debugging\nDESCRIPTION: VS Code launch configuration for attaching to a Jest process or automatically launching and attaching to Jest tests. This allows for integrated debugging within VS Code.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach\",\n      \"port\": 9229\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",\n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\",\n        \"--watchAll=false\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Mock Implementations with mockImplementationOnce in TypeScript\nDESCRIPTION: Illustrates using `mockFn.mockImplementationOnce()` in TypeScript to set specific, typed implementations for the next individual calls to a Jest mock function. Each provided implementation is used only once. Requires Jest (`@jest/globals`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Jest Global Setup and Teardown Configuration\nDESCRIPTION: Implementation examples of global setup and teardown files for Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  // Set reference to mongod in order to close the server during teardown.\n  globalThis.__MONGOD__ = mongod;\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  await globalThis.__MONGOD__.stop();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-jest to exclude Jest preset\nDESCRIPTION: JSON configuration to set babel-jest as the transformer while excluding the default Jest preset. This may break jest.mock hoisting functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-jest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": [\"babel-jest\", { \"excludeJestPreset\": true }],\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking ESM Modules with jest.unstable_mockModule (Jest, JavaScript)\nDESCRIPTION: This example shows how to mock an ESM module ('node:child_process') using Jest's experimental jest.unstable_mockModule API. It demonstrates supplying a required (optionally async) factory function, then asynchronously importing the mocked module for use in tests. Prerequisites include Jest's ESM support, '@jest/globals' for access to the jest object, and a compatible Node runtime. Input parameters are the module name and a factory function returning the mock; the output is a mocked version of the module imported via dynamic import. Limitations include the API being experimental and subject to change, and the requirement to use import() after the mock call.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ECMAScriptModules.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.unstable_mockModule('node:child_process', () => ({\n  execSync: jest.fn(),\n  // etc.\n}));\n\nconst {execSync} = await import('node:child_process');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Fakeable Timer APIs in Jest\nDESCRIPTION: Defines a TypeScript union type `FakeableAPI` listing all the timer and time-related APIs (like `Date`, `setTimeout`, `setInterval`, `nextTick`, `performance`, etc.) that Jest's fake timers system can potentially mock or leave unfaked via the `doNotFake` option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n```\n\n----------------------------------------\n\nTITLE: Property Replacement with Jest replaceProperty\nDESCRIPTION: Examples of using jest.replaceProperty to mock object properties and restore them after tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst utils = {\n  isLocalhost() {\n    return process.env.HOSTNAME === 'localhost';\n  },\n};\n\nmodule.exports = utils;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst utils = require('./utils');\n\nafterEach(() => {\n  // restore replaced property\n  jest.restoreAllMocks();\n});\n\ntest('isLocalhost returns true when HOSTNAME is localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n  expect(utils.isLocalhost()).toBe(true);\n});\n\ntest('isLocalhost returns false when HOSTNAME is not localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'not-localhost'});\n  expect(utils.isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers Globally in Jest (TypeScript)\nDESCRIPTION: Shows how to enable the legacy fake timers implementation globally within a typed Jest configuration (`Config`) by setting both `fakeTimers.enableGlobally` and `fakeTimers.legacyFakeTimers` to `true` using TypeScript (ES Module syntax).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Jest Test with jest-puppeteer Preset (JavaScript)\nDESCRIPTION: Demonstrates a simple Jest test suite that uses the `jest-puppeteer` preset. It navigates to Google and asserts the page title. The `page` global variable is automatically provided by the preset.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google', () => {\n  beforeAll(async () => {\n    await page.goto('https://google.com');\n  });\n\n  it('should be titled \\\"Google\\\"', async () => {\n    await expect(page.title()).resolves.toMatch('Google');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Export Conditions in Jest (TypeScript)\nDESCRIPTION: This TypeScript configuration snippet shows how to set custom export conditions for the JSDOM test environment in Jest, specifically for React Native.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    customExportConditions: ['react-native'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Jest Test Sequencer in TypeScript (jest.config.ts)\nDESCRIPTION: Shows how to configure Jest to use a custom test sequencer within a TypeScript configuration file (`jest.config.ts`). It sets the `testSequencer` property to the path of the custom sequencer module and utilizes `import type {Config} from 'jest'` for strong typing of the configuration object.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing Random Data in Strings Before Snapshot Testing - JavaScript\nDESCRIPTION: Shows how to preprocess strings containing random or dynamic content prior to snapshot testing in Jest. A random number is injected into a string, which is then replaced with a stable value using string.replace and a regular expression before taking the snapshot. No external dependencies besides Jest and JavaScript standard library. This approach guarantees snapshot stability when handling strings with generated values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomNumber = Math.round(Math.random() * 100);\\nconst stringWithRandomData = `<div id=\\\"${randomNumber}\\\">Lorem ipsum</div>`;\\nconst stringWithConstantData = stringWithRandomData.replace(/id=\\\"\\d+\\\"/, 123);\\nexpect(stringWithConstantData).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Options in Jest (TypeScript)\nDESCRIPTION: This TypeScript configuration snippet shows how to set custom options for the JSDOM test environment in Jest, including HTML, URL, and user agent.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring testSequencer in Jest with JavaScript\nDESCRIPTION: Shows how to configure Jest to use a custom test sequencer by specifying the path to the sequencer implementation file in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Module Field Resolver for Jest\nDESCRIPTION: Custom resolver implementation that prioritizes the \"module\" field over \"main\" in package.json. Uses the defaultResolver and packageFilter to modify how modules are resolved.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (path, options) => {\n  // Call the defaultResolver, so we leverage its cache, error handling, etc.\n  return options.defaultResolver(path, {\n    ...options,\n    // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)\n    packageFilter: pkg => {\n      return {\n        ...pkg,\n        // Alter the value of `main` before resolving the package\n        main: pkg.module || pkg.main,\n      };\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Function Using node-fetch in JavaScript\nDESCRIPTION: This JavaScript snippet defines an asynchronous function `createUser` which utilizes the `node-fetch` library to send a POST request to 'https://website.com/users'. It then awaits the response, extracts the text content (presumably a user ID) using `response.text()`, and returns it. It depends on the `node-fetch` module being available.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/BypassingModuleMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"createUser.js\"\nimport fetch from 'node-fetch';\n\nexport const createUser = async () => {\n  const response = await fetch('https://website.com/users', {method: 'POST'});\n  const userId = await response.text();\n  return userId;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Recursive Custom Equality Testers Example\nDESCRIPTION: Shows how to implement recursive custom equality testers for complex objects like Books and Authors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nfunction areAuthorEqual(a, b) {\n  const isAAuthor = a instanceof Author;\n  const isBAuthor = b instanceof Author;\n\n  if (isAAuthor && isBAuthor) {\n    // Authors are equal if they have the same name\n    return a.name === b.name;\n  } else if (isAAuthor === isBAuthor) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nfunction areBooksEqual(a, b, customTesters) {\n  const isABook = a instanceof Book;\n  const isBBook = b instanceof Book;\n\n  if (isABook && isBBook) {\n    // Books are the same if they have the same name and author array. We need\n    // to pass customTesters to equals here so the Author custom tester will be\n    // used when comparing Authors\n    return (\n      a.name === b.name && this.equals(a.authors, b.authors, customTesters)\n    );\n  } else if (isABook === isBBook) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areAuthorsEqual, areBooksEqual]);\n```\n\n----------------------------------------\n\nTITLE: Nesting describe Blocks for Hierarchical Test Organization in Jest\nDESCRIPTION: Example showing how to nest describe() blocks to create a hierarchy of tests. This advanced organization helps when testing complex functions with multiple test conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Directly Passing Arguments to Jest\nDESCRIPTION: Demonstrates passing command-line arguments directly to the Jest executable. Here, `-u` likely stands for updating snapshots, and `-t` filters tests by name.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njest -u -t=\"ColorPicker\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Asymmetric Matchers in Jest (JavaScript)\nDESCRIPTION: Shows how to create custom asymmetric matchers using a class that implements the `asymmetricMatch` method. These matchers are useful when only asymmetric equality is needed, such as checking if an object contains a subset of properties or if a value meets a specific custom criterion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of defining and using a custom asymmetric matcher\n\nclass DivisibleBy {\n  constructor(divisor) {\n    this.divisor = divisor;\n  }\n\n  asymmetricMatch(received) {\n    return received % this.divisor === 0;\n  }\n\n  toString() {\n    return `DivisibleBy<${this.divisor}>`;\n  }\n}\n\n// Usage in a test\nit('matches numbers divisible by 2', () => {\n  expect({ number: 10 }).toEqual({\n    number: new DivisibleBy(2),\n  });\n  expect({ number: 7 }).not.toEqual({\n    number: new DivisibleBy(2),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Jest Test File by Exact Path (Bash)\nDESCRIPTION: This command demonstrates the correct usage of the `--runTestsByPath` flag by providing the exact path to a specific test file (`__tests__/t1.test.js`). This instructs Jest to execute only this particular test file, bypassing pattern matching.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njest --runTestsByPath __tests__/t1.test.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Serializers in Jest (JavaScript)\nDESCRIPTION: This JavaScript configuration snippet shows how to add a custom snapshot serializer to Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Mocking Async Function Rejection with mockRejectedValue in Jest (JS/TS)\nDESCRIPTION: Explains using `mockRejectedValue` as a shorthand to make a Jest mock function always return a rejected Promise with the specified error or value. Useful for testing error handling in asynchronous code. Requires a Jest mock function and an `await` on the call to observe the rejection. Both JavaScript and TypeScript examples are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Native Component with mockComponent Helper in JavaScript\nDESCRIPTION: This JavaScript code shows how to use the `mockComponent` helper provided by `react-native/jest/mockComponent` for mocking native components. This approach creates a more structured mock that forwards prop types and static fields, providing a more realistic representation of the component than a simple string mock.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('path/to/MyNativeComponent', () => {\n  const mockComponent = require('react-native/jest/mockComponent');\n  return mockComponent('path/to/MyNativeComponent');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple React Native Component (Intro.js)\nDESCRIPTION: Defines a basic React Native class component named `Intro` using TypeScript syntax (TSX). It renders a `View` containing two `Text` components and applies styles defined using `StyleSheet.create`. This component serves as an example for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nclass Intro extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n        <Text style={styles.instructions}>\n          This is a React Native snapshot test.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  instructions: {\n    color: '#333333',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  welcome: {\n    fontSize: 20,\n    margin: 10,\n    textAlign: 'center',\n  },\n});\n\nexport default Intro;\n```\n\n----------------------------------------\n\nTITLE: Mocking Static and Getter Methods with Jest.spyOn\nDESCRIPTION: Example of using jest.spyOn to mock both a static method and a getter method of a class. The special third argument 'get' is used to specify that we're mocking a getter property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// your jest test file below\nimport SoundPlayer from './sound-player';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Module with a Typed Factory Function using jest.mock in TypeScript\nDESCRIPTION: Shows how to use `jest.mock` in TypeScript, providing a type argument (`<typeof import('../moduleName')>`) to ensure the factory function conforms to the original module's type signature. The factory returns a `jest.fn()` that returns `42`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// The optional type argument provides typings for the module factory\njest.mock<typeof import('../moduleName')>('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Test Suites with `each`.describe.skip in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates using `.describe.skip` (or alias `.xdescribe`) with Jest's `each` and tagged template literals. This prevents the entire parameterized test suite generated by this `each` block from running. The suite and all tests within it will be marked as skipped in the test results. The data definition and suite function structure are identical to regular `.describe`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.describe.skip('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-jest with custom Babel options\nDESCRIPTION: JSON configuration to set babel-jest as the transformer with custom Babel options, including extending an existing config and adding plugins.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-jest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": [\"babel-jest\", { \"extends\": \"./babel.config.js\", \"plugins\": [\"babel-plugin-transform-import-meta\"] }]\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Test Environment in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to create a custom test environment by extending the NodeEnvironment class. This environment sets up global objects, handles test events, and manages setup/teardown operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// my-custom-environment\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nclass CustomEnvironment extends NodeEnvironment {\n  constructor(config, context) {\n    super(config, context);\n    console.log(config.globalConfig);\n    console.log(config.projectConfig);\n    this.testPath = context.testPath;\n    this.docblockPragmas = context.docblockPragmas;\n  }\n\n  async setup() {\n    await super.setup();\n    await someSetupTasks(this.testPath);\n    this.global.someGlobalObject = createGlobalObject();\n\n    // Will trigger if docblock contains @my-custom-pragma my-pragma-value\n    if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {\n      // ...\n    }\n  }\n\n  async teardown() {\n    this.global.someGlobalObject = destroyGlobalObject();\n    await someTeardownTasks();\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n\n  async handleTestEvent(event, state) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n\nmodule.exports = CustomEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Literal Syntax with jest-each\nDESCRIPTION: Demonstrates how to use the tagged template literal syntax for more readable data tables in jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Range Matcher Type Definitions\nDESCRIPTION: TypeScript type declarations for the custom toBeWithinRange matcher, enabling IDE autocompletion and type checking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Driven Tests with Tagged Template Literals in Jest (JavaScript)\nDESCRIPTION: This snippet illustrates the tagged template literal syntax for `test.each`. The first line defines column headers, and subsequent lines provide data using `${value}` expressions. The test function receives an object containing the data for each row. The test title injects values using `$variable` syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Snapshot File Format Example for Jest - JavaScript\nDESCRIPTION: This code illustrates the structure of a generated Jest snapshot file. Snapshots are exported as template strings, capturing the serialized output from a test. These files are automatically managed by Jest and should be committed to version control. No external dependencies are required for reading the file; Jest reads and compares these during test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`renders correctly 1`] = `\\n<a\\n  className=\\\"normal\\\"\\n  href=\\\"http://www.facebook.com\\\"\\n  onMouseEnter={[Function]}\\n  onMouseLeave={[Function]}\\n>\\n  Facebook\\n</a>\\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring return values dynamically with mockReturnValue - Jest - TypeScript\nDESCRIPTION: TypeScript example configuring a mock function, specifying the return type and then updating the returned value across calls using Jest's mockReturnValue. Uses @jest/globals for proper imports. Benefits include strong typing and consistent interface for mock return values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Aliases (Webpack resolve.alias) in JavaScript\nDESCRIPTION: Demonstrates how to mimic webpack alias functionality in Jest tests using moduleNameMapper with regex keys. Aliases like 'react' and 'config$' are mapped to their real file locations, ensuring Jest's resolver aligns with webpack's. Applied alongside mock setups for assets. No additional dependencies required.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n\n    '^react(.*)$': '<rootDir>/vendor/react-master$1',\n    '^config$': '<rootDir>/configs/app-config.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Typing Jest Mocks with Generic Arguments in TypeScript\nDESCRIPTION: Explains how to provide explicit type safety for Jest mock functions (`jest.fn()`) in TypeScript by passing a generic type argument (`jest.fn<typeof realFunction>()`). This is useful when an initial implementation isn't provided, ensuring the mock's signature matches the function it replaces and allowing type inference within mock implementations. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Async Resolution with mockResolvedValueOnce in Jest (JS/TS)\nDESCRIPTION: Shows how `mockResolvedValueOnce` can be used to make a Jest mock function return a resolved Promise for a single async call. Demonstrates chaining for multiple calls and falling back to `mockResolvedValue` (or `undefined`). Requires a Jest mock function and is typically used within an `async` test function with `await`. Both JavaScript and TypeScript examples are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n----------------------------------------\n\nTITLE: Scoping Hooks within describe Blocks in Jest - JavaScript\nDESCRIPTION: Demonstrates the use of nested beforeEach hooks within describe blocks to handle separate initialization flows per test grouping, such as separate databases for cities and foods. Top-level hooks run before inner hooks for each applicable test. Requires Jest and test helpers for multiple databases and matcher functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Applies to all tests in this file\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jest-docblock with Package Managers\nDESCRIPTION: Commands for installing the jest-docblock package using either Yarn or npm package managers.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# with yarn\n$ yarn add jest-docblock\n# with npm\n$ npm install jest-docblock\n```\n\n----------------------------------------\n\nTITLE: Customizing Diff Line Colors with Chalk (TS)\nDESCRIPTION: Demonstrates how to exchange the default colors for 'Expected' (a) and 'Received' (b) lines using the `chalk` library in TypeScript. The `aColor` and `bColor` options are set to `chalk.red` and `chalk.green` respectively within the options object.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport chalk = require('chalk');\n\nconst options = {\n  aColor: chalk.red,\n  bColor: chalk.green,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Colored Display Name in Jest (JavaScript)\nDESCRIPTION: This JavaScript configuration uses an object for 'displayName', specifying both a project label and a custom background color via chalk-compatible names. Helps identify projects in multi-project Jest runs. Add to the Jest config file. No special dependencies beyond Jest are required.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  displayName: {\\n    name: 'CLIENT',\\n    color: 'blue',\\n  },\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Mocking a Component as a Custom Element (TypeScript)\nDESCRIPTION: Illustrates mocking a component (`Widget`) in Jest using a custom element (`<mock-widget />`). This approach avoids React warnings by using a valid (though non-standard) DOM element name format (lowercase with a dash), which bypasses React's element type checks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\njest.mock('./Widget', () => () => <mock-widget />);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Test Environment for Puppeteer (JavaScript)\nDESCRIPTION: Defines a custom Jest test environment (`puppeteer_environment.js`) extending `NodeEnvironment`. In its `setup` method, it reads the WebSocket endpoint from the file created by the global setup script and uses `puppeteer.connect` to connect to the existing browser instance, exposing it as `this.global.__BROWSER_GLOBAL__`. The `teardown` method disconnects from the browser. Requires `jest-environment-node`, `puppeteer`, `fs.promises`, `os`, and `path` modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// puppeteer_environment.js\nconst {readFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nclass PuppeteerEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config);\n  }\n\n  async setup() {\n    await super.setup();\n    // get the wsEndpoint\n    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');\n    if (!wsEndpoint) {\n      throw new Error('wsEndpoint not found');\n    }\n\n    // connect to puppeteer\n    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({\n      browserWSEndpoint: wsEndpoint,\n    });\n  }\n\n  async teardown() {\n    if (this.global.__BROWSER_GLOBAL__) {\n      this.global.__BROWSER_GLOBAL__.disconnect();\n    }\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n}\n\nmodule.exports = PuppeteerEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Declaring Fake Timers Configuration Type in TypeScript\nDESCRIPTION: Defines the TypeScript types for configuring Jest’s fake timers. \\\"FakeableAPI\\\" is a union type containing all possible global APIs that can be mocked, while \\\"FakeTimersConfig\\\" specifies the options available for manual configuration. Key parameters include \\\"advanceTimers\\\" (automatic advancement), \\\"doNotFake\\\" (APIs to be excluded from faking), \\\"legacyFakeTimers\\\" (enables legacy mode), \\\"now\\\" (initial time), and \\\"timerLimit\\\" (recursion control). To use, reference when calling jest.useFakeTimers() for strongly typed configuration. Outputs a type definition to guide usage, and does not directly execute any logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype FakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number | Date;\n  /**\n   * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.\n   * The default is `100_000` timers.\n   */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Matching a Spec Name\nDESCRIPTION: Executes only the tests (within `describe` or `test` blocks) whose names match the provided string 'name-of-spec'. The `-t` flag filters tests based on their description or name.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest -t name-of-spec\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/preset-env for Babel-Jest Integration (Bash)\nDESCRIPTION: This bash command installs the '@babel/preset-env' Babel preset as a development dependency, which is necessary to transpile modern JavaScript syntax for Jest tests when using babel-jest. Ensure Babel is configured to use this preset in your test environment for correct transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel-Jest Transformer in Jest\nDESCRIPTION: Example of how to configure the babel-jest transformer in Jest's configuration file to exclude the Jest preset.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CodeTransformation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": [\"babel-jest\", { \"excludeJestPreset\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Test Environment in Test Suite\nDESCRIPTION: Example of using a custom test environment in a test suite with environment-specific global objects\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment ./my-custom-environment\n */\nlet someGlobalObject;\n\nbeforeAll(() => {\n  someGlobalObject = globalThis.someGlobalObject;\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.stringMatching() with Regex in Jest Array Assertions\nDESCRIPTION: Demonstrates nesting `expect.stringMatching(regexp)` inside `expect.arrayContaining()` in Jest tests. This allows asserting that elements within a received array match specific regular expressions. The example checks if an array contains strings starting with 'Alic' and strings starting with 'B' or 'R' followed by 'ob'.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_49\n\nLANGUAGE: js\nCODE:\n```\ndescribe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking ES6 Module with Default Export in JavaScript\nDESCRIPTION: Demonstrates how to mock an ES6 module with a default export using jest.mock(), including setting the __esModule property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport moduleName, {foo} from '../moduleName';\n\njest.mock('../moduleName', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => 42),\n    foo: jest.fn(() => 43),\n  };\n});\n\nmoduleName(); // Will return 42\nfoo(); // Will return 43\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Module with Nested Methods for Mocking in TypeScript\nDESCRIPTION: Defines a TypeScript module with a nested object structure containing a method that will be mocked in tests. The song object contains nested properties with a time method that accepts a number parameter.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Focusing Test Suite Execution with describe.only in Jest (JavaScript)\nDESCRIPTION: Illustrates how to use `describe.only` (or its alias `fdescribe`) to exclusively run the tests within a specific `describe` block. All other `describe` blocks in the file will be skipped during test execution. This is useful for isolating and debugging a particular suite.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndescribe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a basic Jest configuration file\nDESCRIPTION: Command to create a basic Jest configuration file interactively.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn create jest\n```\n\n----------------------------------------\n\nTITLE: Defining a Consumer of an ES6 Class - JavaScript\nDESCRIPTION: Defines an ES6 class named SoundPlayerConsumer that creates an instance of SoundPlayer and provides a method playSomethingCool, which plays a hardcoded sound file. This highlights how classes can depend on and delegate functionality to other imported ES6 classes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test with MongoDB Integration (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates a Jest test suite interacting with MongoDB facilitated by the `jest-mongodb` preset. It uses `beforeAll` to connect to the MongoDB instance provided by the preset (using global variables `__MONGO_URI__` and `__MONGO_DB_NAME__`) and `afterAll` to close the connection. The test (`it` block) performs an insertion and retrieval operation on a 'users' collection, asserting the data consistency using `expect`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MongoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst {MongoClient} = require('mongodb');\n\ndescribe('insert', () => {\n  let connection;\n  let db;\n\n  beforeAll(async () => {\n    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    db = await connection.db(globalThis.__MONGO_DB_NAME__);\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  it('should insert a doc into collection', async () => {\n    const users = db.collection('users');\n\n    const mockUser = {_id: 'some-user-id', name: 'John'};\n    await users.insertOne(mockUser);\n\n    const insertedUser = await users.findOne({_id: 'some-user-id'});\n    expect(insertedUser).toEqual(mockUser);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Module with CommonJS in JavaScript\nDESCRIPTION: This snippet shows how to implement a basic CommonJS module that exports a function returning the string 'banana'. There are no external dependencies or special requirements. The module can be imported and invoked in other files, where it returns 'banana'.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => 'banana';\n```\n\n----------------------------------------\n\nTITLE: Class with API Fetch Using Axios in JavaScript (for Mocking)\nDESCRIPTION: Defines a Users class with a static all() method that fetches user data from an API using axios.get. The method returns a promise resolving to the response's data property. Intended to be easily mockable in tests, the class requires axios as a dependency. Inputs are none, and output is a promise for the user data array. Used as a real-world scenario for module mocking with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\nexport default Users;\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers in Jest (JavaScript)\nDESCRIPTION: Demonstrates enabling Jest\\'s legacy fake timers implementation globally, by setting enableGlobally and legacyFakeTimers to true. This option disables extra modern fake timer configuration. Uses CommonJS for export.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Project Tests in Jest\nDESCRIPTION: Shows how to set up the projects configuration to run tests in multiple projects simultaneously. This example runs tests in the root directory and all subdirectories in the examples folder.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating and Extending Manual Mocks with jest.createMockFromModule (TypeScript)\nDESCRIPTION: Demonstrates using `jest.createMockFromModule<typeof import('../utils')>('../utils')` in TypeScript to generate a typed mock from `utils.ts`. The generic type argument ensures type safety. It overrides `isAuthorized` with a typed `jest.fn()` and tests verify the mocked and overridden parts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst {utils} = \n  jest.createMockFromModule<typeof import('../utils')>('../utils');\n\nutils.isAuthorized = jest.fn((secret: string) => secret === 'not wizard');\n\ntest('implementation created by jest.createMockFromModule', () => {\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\n  expect(utils.isAuthorized('not wizard')).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Nth Return Value with toHaveNthReturnedWith in Jest\nDESCRIPTION: This example shows how to use the .toHaveNthReturnedWith() matcher to test the specific value returned by a mock function on its nth call. The test creates a mock drink function and verifies both the first and second call return values match the expected strings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drink returns expected nth calls', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Recursive Custom Equality Testers with Jest - JavaScript\nDESCRIPTION: This code defines two regular functions, areAuthorEqual and areBooksEqual, as custom equality testers for Jest. areBookEqual demonstrates recursive usage of this.equals to deeply compare nested properties, such as arrays of Author objects, passing through the custom testers array. The code concludes by registering both testers with expect.addEqualityTesters. This pattern enables composable, domain-specific deep equality for complex objects in Jest assertions. Ensure that Author and Book classes are defined elsewhere in the environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction areAuthorEqual(a, b) {\\n  const isAAuthor = a instanceof Author;\\n  const isBAuthor = b instanceof Author;\\n\\n  if (isAAuthor && isBAuthor) {\\n    // Authors are equal if they have the same name\\n    return a.name === b.name;\\n  } else if (isAAuthor === isBAuthor) {\\n    return undefined;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction areBooksEqual(a, b, customTesters) {\\n  const isABook = a instanceof Book;\\n  const isBBook = b instanceof Book;\\n\\n  if (isABook && isBBook) {\\n    // Books are the same if they have the same name and author array. We need\\n    // to pass customTesters to equals here so the Author custom tester will be\\n    // used when comparing Authors\\n    return (\\n      a.name === b.name && this.equals(a.authors, b.authors, customTesters)\\n    );\\n  } else if (isABook === isBBook) {\\n    return undefined;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nexpect.addEqualityTesters([areAuthorsEqual, areBooksEqual]);\n```\n\n----------------------------------------\n\nTITLE: Asserting Calls and Results of Jest Mocks in JavaScript\nDESCRIPTION: Demonstrates various assertions on calls, arguments, return values, contexts, and instances using the .mock property within Jest. This snippet is dependency-free except for Jest, and is intended for use within test files to ensure mock behaviors conform to expectations. Assumes 'someMockFunction' and 'element' are defined in the test context.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The function was called exactly once\nexpect(someMockFunction.mock.calls).toHaveLength(1);\n\n// The first arg of the first call to the function was 'first arg'\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toBe('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n----------------------------------------\n\nTITLE: Using describe.only.each with Array Parameter in JavaScript\nDESCRIPTION: Example of using describe.only.each with an array of test case parameters to run only specific data-driven test suites while skipping others.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots via Command Line using Bash\nDESCRIPTION: This command demonstrates how to instruct Jest to update snapshot files. Running `jest --updateSnapshot` (or its shorthand `jest -u`) tells Jest to regenerate the snapshot artifacts for any tests where the snapshot comparison failed. This is used after confirming that the changes causing the mismatch are intentional and correct.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --updateSnapshot\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrectly Defined Asynchronous Test\nDESCRIPTION: Example showing an incorrect way to define tests asynchronously, which causes Jest to not detect the test. Tests must be defined synchronously for Jest to collect them properly.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this it will not work\nsetTimeout(() => {\n  it('passes', () => expect(1).toBe(1));\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Extending an Automatic Mock for Node fs Module - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a manual mock for the 'fs' Node core module using Jest. It extends an automatic mock with custom functions (__setMockFiles and readdirSync) to simulate file system interactions in tests. The mock requires jest, path, and the Jest runtime, with functions for configuring fake files and reading directory contents.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ManualMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst path = require('path');\\n\\nconst fs = jest.createMockFromModule('fs');\\n\\n// This is a custom function that our tests can use during setup to specify\\n// what the files on the \\\"mock\\\" filesystem should look like when any of the\\n// `fs` APIs are used.\\nlet mockFiles = Object.create(null);\\nfunction __setMockFiles(newMockFiles) {\\n  mockFiles = Object.create(null);\\n  for (const file in newMockFiles) {\\n    const dir = path.dirname(file);\\n\\n    if (!mockFiles[dir]) {\\n      mockFiles[dir] = [];\\n    }\\n    mockFiles[dir].push(path.basename(file));\\n  }\\n}\\n\\n// A custom version of `readdirSync` that reads from the special mocked out\\n// file list set via __setMockFiles\\nfunction readdirSync(directoryPath) {\\n  return mockFiles[directoryPath] || [];\\n}\\n\\nfs.__setMockFiles = __setMockFiles;\\nfs.readdirSync = readdirSync;\\n\\nmodule.exports = fs;\\n\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Mock Implementations with `mockImplementationOnce` in JavaScript\nDESCRIPTION: Shows how to use `.mockImplementationOnce()` to specify different implementations for successive calls to a Jest mock function. Each call consumes one `mockImplementationOnce` definition in the order they were chained.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\n----------------------------------------\n\nTITLE: Composing Babel-Jest Custom Transformer - JavaScript\nDESCRIPTION: Shows how to compose a Jest transformer using babel-jest with a custom preset configuration. Exports a transformer using createTransformer, which applies the specified Babel presets for test file transformation. Use when you need to apply project-specific Babel configurations to test sources.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst babelJest = require('babel-jest');\\n\\nmodule.exports = babelJest.createTransformer({\\n  presets: ['my-custom-preset'],\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Transformers in Jest\nDESCRIPTION: Example of how to configure multiple transformers in Jest's configuration file, including babel-jest and a custom CSS transformer.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CodeTransformation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation Using jest.requireActual\nDESCRIPTION: Fixed implementation showing how to properly mock fetch while using the actual Response class from node-fetch.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/BypassingModuleMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('node-fetch');\nimport fetch from 'node-fetch';\nconst {Response} = jest.requireActual('node-fetch');\n```\n\n----------------------------------------\n\nTITLE: Configuring a Jest Preset with Filesystem Path\nDESCRIPTION: Demonstrates how to configure Jest to use a preset with a relative filesystem path. This approach allows specifying the exact location of the preset file in your project.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotFormat in TypeScript\nDESCRIPTION: TypeScript example of configuring Jest snapshot formatting to disable printing of basic prototypes in snapshot output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Users Class with Axios in JavaScript\nDESCRIPTION: Defines a Users class that fetches user data from an API using axios.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\nexport default Users;\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-jest-hoist via Yarn\nDESCRIPTION: Command to install the babel-plugin-jest-hoist package as a development dependency using Yarn package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-plugin-jest-hoist/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add --dev babel-plugin-jest-hoist\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals Manually When `injectGlobals` is False (TypeScript)\nDESCRIPTION: Demonstrates how to write a Jest test in TypeScript when the `injectGlobals` configuration option is set to `false`. Instead of relying on Jest automatically injecting globals like `expect`, `jest`, and `test`, they must be explicitly imported from the `@jest/globals` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Exclusive Data-Driven Test Suites with describe.only.each and Data Array in Jest (JavaScript)\nDESCRIPTION: This snippet applies describe.only.each with an array of test data to exclusively run a set of parameterized test suites. Each row in the data array feeds three arguments (a, b, expected) into a test verifying their sum. A subsequent non-exclusive test is included to demonstrate that only the describe.only.each block will run. No special dependencies are required other than Jest, and inputs are directly mapped from the array. This approach ignores all other describe or test blocks unless specifically marked with .only.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with a Play Method for Jest Spying - JavaScript\nDESCRIPTION: Defines a simple module exporting a play() method, for demonstration with jest.spyOn in tests. Dependencies: None beyond Node.js environment. Exports: Object with a play method returning true. Used as a subject for function spying and call tracking in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst video = {\n  play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals When injectGlobals is Disabled - TypeScript\nDESCRIPTION: Demonstrates how to manually import Jest globals ('expect', 'jest', 'test') from '@jest/globals' when 'injectGlobals' is set to false in the Jest configuration. The test uses fake timers and asserts the result of 'Date.now()'. Requires TypeScript and the '@jest/globals' package; necessary when automatic global injection is deactivated.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Customizing transformIgnorePatterns in Jest Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates customizing Jest's 'transformIgnorePatterns' option in package.json to transpile additional modules via Babel. This is helpful when dependencies like 'my-project' or 'react-native-button' are not precompiled for React Native. The key parameter is a regex string; it must be updated based on which node_modules entries require transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(react-native|my-project|react-native-button)/)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Constructor Function with jest.mock - Jest - JavaScript\nDESCRIPTION: Mocks a constructor function in Jest by providing a factory that returns a regular function (not an arrow function) which itself returns an object with the methods you wish to mock. This ensures compatibility with JavaScript's new operator. No external dependencies beyond Jest are required. Inputs are the module path and mock factory; output is a mocked module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using toContainEqual Matcher in Jest\nDESCRIPTION: Shows how to use toContainEqual to check if an array contains an object with specific structure and values, using recursive equality checking.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Return Value of Nth Call with toHaveNthReturnedWith in Jest\nDESCRIPTION: Shows how to use the toHaveNthReturnedWith matcher to test the specific value returned by a mock function for a particular call. The example verifies both first and second call return values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drink returns expected nth calls', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');\n});\n```\n\n----------------------------------------\n\nTITLE: Updating jest.mocked() Usage for Jest 29\nDESCRIPTION: Examples showing how to update jest.mocked() usage after the helper method changed to wrap types of deep members by default, with a demonstration of how to maintain the old shallow mocked behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UpgradingToJest29.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Before - with explicit deep mocking\nconst mockedObject = jest.mocked(someObject, true);\n// After - deep mocking is now the default\nconst mockedObject = jest.mocked(someObject);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Before - shallow mocking (default in v28)\nconst mockedObject = jest.mocked(someObject);\n// After - explicit shallow mocking in v29\nconst mockedObject = jest.mocked(someObject, {shallow: true});\n```\n\n----------------------------------------\n\nTITLE: Jest Test with Automock Functionality\nDESCRIPTION: Example Jest test file demonstrating how automocked modules behave. Shows how to use mock functions and set return values for testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport utils from '../utils';\n\ntest('if utils mocked automatically', () => {\n  // Public methods of `utils` are now mock functions\n  expect(utils.authorize.mock).toBeTruthy();\n  expect(utils.isAuthorized.mock).toBeTruthy();\n\n  // You can provide them with your own implementation\n  // or pass the expected return value\n  utils.authorize.mockReturnValue('mocked_token');\n  utils.isAuthorized.mockReturnValue(true);\n\n  expect(utils.authorize()).toBe('mocked_token');\n  expect(utils.isAuthorized('not_wizard')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test Matching Static and Dynamic Properties - JavaScript\nDESCRIPTION: Tests snapshotting an object with both static and dynamic fields using property matchers and literal matches in Jest. The matcher ensures correct comparison for the date, while string fields are compared literally. Dependencies include Jest; input is a user object with a generated date and fixed name.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the values and pass', () => {\\n  const user = {\\n    createdAt: new Date(),\\n    name: 'Bond... James Bond',\\n  };\\n\\n  expect(user).toMatchSnapshot({\\n    createdAt: expect.any(Date),\\n    name: 'Bond... James Bond',\\n  });\\n});\\n\\n// Snapshot\\nexports[`will check the values and pass 1`] = `\\n{\\n  \\\"createdAt\\\": Any<Date>,\\n  \\\"name\\\": 'Bond... James Bond',\\n}\\n`;\n```\n\n----------------------------------------\n\nTITLE: Using a Typed Spy with jest.Spied<> in Test Code\nDESCRIPTION: Shows how to use a typed spy in a test file with proper cleanup in afterEach hooks. Demonstrates creating, using, and asserting on a typed spy, ensuring type safety throughout the testing process.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1_482_363_367_071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking File Imports as String Stub in Jest (JavaScript)\nDESCRIPTION: This __mocks__/fileMock.js file exports a fixed string ('test-file-stub') for mocking file imports like images and fonts. Used with 'moduleNameMapper' in jest.config.js, it ensures that any import of asset files resolves to this stub during test execution, preventing real file loading.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = 'test-file-stub';\n```\n\n----------------------------------------\n\nTITLE: Enabling Fake Timers Globally in Jest Configuration (TypeScript)\nDESCRIPTION: Shows how to globally enable fake timers for all tests by setting `fakeTimers.enableGlobally` to `true` within a typed Jest configuration (`Config`) using TypeScript (ES Module syntax). This eliminates the need for `jest.useFakeTimers()` calls in test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Jest Test with Manual Puppeteer Setup (JavaScript)\nDESCRIPTION: Shows an example test (`test.js`) utilizing the manual Puppeteer setup. It accesses the browser instance via `globalThis.__BROWSER_GLOBAL__` (made available by the custom environment), creates a new page, navigates to Google, and checks the body text content. A timeout is configured for the asynchronous operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// test.js\nconst timeout = 5000;\n\ndescribe(\n  '/ (Home Page)',\n  () => {\n    let page;\n    beforeAll(async () => {\n      page = await globalThis.__BROWSER_GLOBAL__.newPage();\n      await page.goto('https://google.com');\n    }, timeout);\n\n    it('should load without error', async () => {\n      const text = await page.evaluate(() => document.body.textContent);\n      expect(text).toContain('google');\n    });\n  },\n  timeout,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring eslint-plugin-jest for ESLint Jest Globals - JSON\nDESCRIPTION: Shows an ESLint override configuration that uses 'eslint-plugin-jest' to enable Jest globals. This allows test files under 'tests/**/*' to use Jest's global helpers without linting errors. Add this snippet to .eslintrc.json or equivalent ESLint config and ensure the plugin is installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"plugins\": [\"jest\"],\n      \"env\": {\n        \"jest/globals\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Transformers in Jest Configuration\nDESCRIPTION: Example of explicitly including babel-jest alongside other transformers. This is necessary when using additional code preprocessors with the default JavaScript transformer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Plugin Key Registration Conflict Error Message (Bash)\nDESCRIPTION: This is a bash-formatted error message illustrating how Jest reports attempts by a plugin to register a reserved key (like 'q'). The message alerts the user to change the configuration. No processing logic is present; the snippet is for documentation and troubleshooting reference.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\nWatch plugin YourFaultyPlugin attempted to register key `q`, that is reserved internally for quitting watch mode. Please change the configuration key for this plugin.\n\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Display Name for Multi-Project Repos (TypeScript)\nDESCRIPTION: This snippet shows how to configure the displayName property in Jest using TypeScript, enabling per-project test labels. Accepts a string or an object with name and color, and is exported using ES Module syntax. Useful for visually identifying projects in multi-repo setups.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: 'CLIENT',\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects in Jest (JavaScript)\nDESCRIPTION: Example of setting up multiple projects in Jest configuration. This snippet shows how to run tests in multiple directories and how to configure different runners for tests and linting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration\nDESCRIPTION: Basic Babel configuration for Jest testing environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Thresholds in Jest (TypeScript)\nDESCRIPTION: This snippet shows how to configure Jest's coverageThreshold option in TypeScript using a typed configuration. The config object is typed as 'Config' from the Jest package. It provides both global and per-path/glob thresholds, exporting via ES Module. Requires Jest and proper TypeScript setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tasks with jest-worker in JavaScript\nDESCRIPTION: This snippet (`main.js`) demonstrates how to utilize the `jest-worker` package (imported via `require('jest-worker')`, likely assigned to `Worker`) to execute tasks from a separate module (`heavy-task.js`) in parallel worker processes. It requires `jest-worker`, Node.js, and the task module, then runs `myHeavyTask` concurrently using `Promise.all` and logs the aggregated results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Example Deprecation Warning Output from jest-validate\nDESCRIPTION: Shows a sample deprecation message triggered by the `deprecatedConfig` option. It indicates that `scriptPreprocessor` is deprecated, suggests `transform` as a replacement, shows how Jest interprets the current configuration, and provides a link to documentation. A custom title ('Custom Deprecation') is also shown.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nCustom Deprecation:\n\n  Option scriptPreprocessor was replaced by transform, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    \"transform\": {\".*\": \"xxx\"}\n  }\n\n  Please update your configuration.\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Jest Output When a Test Passes with --runTestsByPath\nDESCRIPTION: Shows the typical console output from Jest when a specific test file (`__tests__/t1.test.js`) is successfully executed and passes after being invoked using the `--runTestsByPath` option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPASS __tests__/t1.test.js\n```\n\n----------------------------------------\n\nTITLE: Logging Errors Before Retrying Jest Tests in JavaScript\nDESCRIPTION: Demonstrates using the `logErrorsBeforeRetry` option with `jest.retryTimes`. When set to `true`, errors causing test failures will be logged to the console before each retry attempt. This example retries a failing test up to 3 times, logging errors beforehand, and requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3, {logErrorsBeforeRetry: true});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Reference Error with jest.mock() and Variable Hoisting\nDESCRIPTION: This code demonstrates a ReferenceError that occurs when a mock variable is accessed before initialization due to hoisting of jest.mock() calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// results in a ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with a Method in JavaScript\nDESCRIPTION: Defines a simple JavaScript module named `video` with a `play` method that returns `true`. This module is used in the subsequent example demonstrating `jest.spyOn`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst video = {\n  play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset in babel.config.js\nDESCRIPTION: Recommended method to configure Jest preset using babel.config.js configuration file\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-preset-jest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: ['jest'],\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel Dynamic Imports Plugin in .babelrc for Jest (JSON)\nDESCRIPTION: Provides an advanced .babelrc configuration for supporting ES7 dynamic imports in test and development, especially for projects using dynamic import() calls. Configures syntax-dynamic-import plugin globally and dynamic-import-node specifically during Jest tests. Dependencies are @babel/preset-env and related plugins.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"plugins\": [\"syntax-dynamic-import\"],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"dynamic-import-node\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Functions with `jest.fn` in JavaScript\nDESCRIPTION: This snippet showcases the `jest.fn` API, a utility function for creating simple mock functions. It demonstrates creating a mock, calling it, and asserting its call count using Jest's built-in expectation matchers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-04-12-jest-11.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Create a mock function\nconst mockFn = jest.fn(() => 42);\nmockFn(); // 42\nexpect(mockFn.calls.length).toBe(1);\n```\n```\n\n----------------------------------------\n\nTITLE: Writing DynamoDB Tests with Jest\nDESCRIPTION: Example Jest test case demonstrating how to insert an item into a DynamoDB table and verify its existence using the configured DocumentClient.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/DynamoDB.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('should insert item into table', async () => {\n  await ddb\n    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})\n    .promise();\n\n  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();\n\n  expect(Item).toEqual({\n    id: '1',\n    hello: 'world',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Named Snapshots in Jest (JavaScript)\nDESCRIPTION: Jest 18.0.0 added the ability to provide an optional name (string argument) to the `.toMatchSnapshot()` matcher. This allows for multiple snapshots within a single test block, identified by the provided name, improving organization and readability.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n.toMatchSnapshot(?string)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Jest Environment in Test Suite (JavaScript)\nDESCRIPTION: Demonstrates a test suite (`my-test-suite`) that specifies the previously defined `CustomEnvironment` using the `@jest-environment` docblock pragma. It accesses a global variable (`someGlobalObject`) set up by the custom environment's `setup` method within a `beforeAll` hook.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_87\n\nLANGUAGE: js\nCODE:\n```\n// my-test-suite\n/**\n * @jest-environment ./my-custom-environment\n */\nlet someGlobalObject;\n\nbeforeAll(() => {\n  someGlobalObject = globalThis.someGlobalObject;\n});\n```\n\n----------------------------------------\n\nTITLE: Marking Planned Tests with test.todo in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `test.todo` to mark a test that is planned but not yet implemented. It takes only a test name string as an argument. These tests are highlighted in the Jest summary output. Providing a callback function to `test.todo` will result in an error; use `test.skip` for implemented but disabled tests. The alias `it.todo` performs the same function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nconst add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n```\n\n----------------------------------------\n\nTITLE: Auto-Mocking Modules with jest.mock in JavaScript\nDESCRIPTION: This example illustrates using jest.mock to automatically mock a module. The require call for the mocked module returns an auto-mocked function, which yields 'undefined' when invoked. Requires the Jest testing framework. Inputs: module file path. Outputs: auto-mocked function subject to overrides if desired. Auto-mocking disables the original module's functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../banana');\n\nconst banana = require('../banana'); // banana will be explicitly mocked.\n\nbanana(); // will return 'undefined' because the function is auto-mocked.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timeout for Jest Tests in JavaScript\nDESCRIPTION: Shows how to use jest.setTimeout() to set the default timeout interval for all tests and hooks in a test file. The timeout is specified in milliseconds.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\njest.setTimeout(1000); // 1 second\n```\n\n----------------------------------------\n\nTITLE: Method Spying Implementation\nDESCRIPTION: Demonstrates how to implement method spying using Jest mock functions to track method calls across multiple instances.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Now we can track calls to playSoundFile\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Receiving Custom Configuration in Plugin Constructor (JavaScript)\nDESCRIPTION: This snippet demonstrates how a Jest watch plugin's constructor can accept a configuration object, allowing access to user-specified parameters from the Jest configuration (such as `key` and `prompt`). This enables the plugin to be initialized with custom behavior or prompts based on user preferences and is essential for plugins relying on runtime configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  constructor({config}) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using toThrowErrorMatchingSnapshot Matcher in Jest (JavaScript)\nDESCRIPTION: Added in Jest 16.0.0, the `.toThrowErrorMatchingSnapshot()` matcher asserts that a function throws an error, and compares the error object against a stored snapshot. This allows snapshot testing for error messages and properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntoThrowErrorMatchingSnapshot\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots Using Jest CLI - Bash\nDESCRIPTION: This command re-generates all outdated or failing Jest snapshots by running Jest with the --updateSnapshot flag. Prerequisite is to have Jest installed and a working test setup. Use this after tests fail due to intentional implementation changes, ensuring only the intended snapshots are updated.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --updateSnapshot\n```\n\n----------------------------------------\n\nTITLE: Summarizing Files in a Directory with the fs Module - JavaScript\nDESCRIPTION: This JavaScript module defines a utility function that synchronously summarizes files in a directory using Node's fs module. It exports a function that returns an array of objects with directory and fileName properties, depending on the output of fs.readdirSync. Requires Node.js and access to the 'fs' core module as a dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ManualMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst fs = require('fs');\\n\\nfunction summarizeFilesInDirectorySync(directory) {\\n  return fs.readdirSync(directory).map(fileName => ({\\n    directory,\\n    fileName,\\n  }));\\n}\\n\\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Watch Mode\nDESCRIPTION: CLI commands for configuring Jest's watch mode functionality. The --watchAll flag enables watching all files and re-running all tests on changes, while --no-watchAll explicitly disables watch mode.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n--watchAll\n--no-watchAll\n--watchAll=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use jest-mongodb Preset\nDESCRIPTION: Specifies the `@shelf/jest-mongodb` preset in the Jest configuration file (e.g., `jest.config.json` or `package.json`). This instructs Jest to use the environment and setup provided by the preset.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MongoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-mongodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking an ES6 Module with Default and Named Exports using jest.mock in JavaScript\nDESCRIPTION: Demonstrates mocking an ES6 module using `jest.mock` with a factory function. It's crucial to include `__esModule: true` in the returned object and define mocks for `default` and any named exports (`foo`) as needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport moduleName, {foo} from '../moduleName';\n\njest.mock('../moduleName', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => 42),\n    foo: jest.fn(() => 43),\n  };\n});\n\nmoduleName(); // Will return 42\nfoo(); // Will return 43\n```\n\n----------------------------------------\n\nTITLE: Snapshot Output from Jest for Intro Component - JavaScript\nDESCRIPTION: This JavaScript snippet is an auto-generated snapshot by Jest for a rendered React Native component. It records the expected output structure of the 'Intro' component. Required by Jest to compare future test runs. Inputs are generated by react-test-renderer; output is a string representing the serialized rendered component. This file is typically only modified via Jest’s snapshot update command.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`Intro renders correctly 1`] = `\n<View\n  style={\n    Object {\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#F5FCFF\",\n      \"flex\": 1,\n      \"justifyContent\": \"center\",\n    }\n  }>\n  <Text\n    style={\n      Object {\n        \"fontSize\": 20,\n        \"margin\": 10,\n        \"textAlign\": \"center\",\n      }\n    }>\n    Welcome to React Native!\n  </Text>\n  <Text\n    style={\n      Object {\n        \"color\": \"#333333\",\n        \"marginBottom\": 5,\n        \"textAlign\": \"center\",\n      }\n    }>\n    This is a React Native snapshot test.\n  </Text>\n</View>\n`;\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Suites with describe.skip\nDESCRIPTION: Demonstrates using describe.skip to exclude specific test suites from execution. Provides a clean way to temporarily disable tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Name Mapper for Webpack Aliases in JavaScript\nDESCRIPTION: This `jest.config.js` snippet shows the final configuration incorporating Webpack's `resolve.alias`. It uses `moduleNameMapper` with regular expressions to map the aliases defined in the example `webpack.config.js` (`react` and `config`) to their corresponding paths within the project structure for Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n\n    '^react(.*)$': '<rootDir>/vendor/react-master$1',\n    '^config$': '<rootDir>/configs/app-config.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Watch Plugins with Custom Options\nDESCRIPTION: Illustrates how to pass custom configuration options to a watch plugin through the `jest.config.js` file. The plugin entry in `watchPlugins` becomes an array where the first element is the path and the second is the configuration object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: [\n    [\n      'path/to/yourWatchPlugin',\n      {\n        key: 'k', // <- your custom key\n        prompt: 'show a custom prompt',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions to Treat as ESM in Jest (TypeScript)\nDESCRIPTION: Shows how to configure the `extensionsToTreatAsEsm` array (e.g., `['.ts']`) within a typed Jest configuration (`Config`) using TypeScript (ES Module syntax). This specifies additional file extensions that Jest should run as native ECMAScript Modules. Note that Jest's ESM support is experimental.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Building a Customizable Jest Transformer with babel-jest in JavaScript\nDESCRIPTION: This snippet demonstrates creating a Jest transformer by composing a configuration with babel-jest. It utilizes the babel-jest.createTransformer method and accepts custom presets, enabling easy integration of user-defined Babel options. The key dependency is babel-jest, which should be installed in the project. The configuration object can specify presets, plugins, and other Babel options. The output is a Jest-compatible transformer module, intended for use in the Jest testing pipeline.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst babelJest = require('babel-jest');\\n\\nmodule.exports = babelJest.createTransformer({\\n  presets: ['my-custom-preset'],\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Range Matcher in JavaScript\nDESCRIPTION: Demonstrates how to use the custom toBeWithinRange matcher in tests, including direct assertions and asymmetric matchers within objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Test Runner - TypeScript\nDESCRIPTION: This TypeScript function signature defines the required structure for a custom Jest test runner's runTests method. It specifies the expected parameters (a list of Test objects, a TestWatcher, lifecycle hooks, and runner options) and enforces an async interface. Implementers must manage test execution flow and correctly handle the testing lifecycle, errors, and reporting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function runTests(\n  tests: Array<Test>,\n  watcher: TestWatcher,\n  onStart: OnTestStart,\n  onResult: OnTestSuccess,\n  onFailure: OnTestFailure,\n  options: TestRunnerOptions,\n): Promise<void>;\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Babel Transformation in Jest Config - JavaScript\nDESCRIPTION: Demonstrates how to explicitly reset the 'transform' option in Jest's configuration file, preventing automatic Babel transformations even if a Babel config exists. Useful when custom or no transformation is desired in a project. To be added to jest.config.js.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with toBeGreaterThan in Jest\nDESCRIPTION: Demonstrates using the toBeGreaterThan matcher to check if a value is greater than an expected number. Works with both regular numbers and big integers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is more than 10', () => {\n  expect(ouncesPerCan()).toBeGreaterThan(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with React Testing Library\nDESCRIPTION: Test file demonstrating how to use React Testing Library to test a checkbox component's behavior when clicked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\n// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher\n// unmount and cleanup DOM after the test is finished.\nafterEach(cleanup);\n\nit('CheckboxWithLabel changes the text after click', () => {\n  const {queryByLabelText, getByLabelText} = render(\n    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,\n  );\n\n  expect(queryByLabelText(/off/i)).toBeTruthy();\n\n  fireEvent.click(getByLabelText(/off/i));\n\n  expect(queryByLabelText(/on/i)).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest modulePathIgnorePatterns in TypeScript\nDESCRIPTION: Sets the `modulePathIgnorePatterns` option in a Jest TypeScript configuration using the `Config` type. This option takes an array of regular expression strings. Module paths matching any patterns are ignored by the module loader. The example uses `<rootDir>` to ignore a specific build directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_49\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: afterEach Hook Order Change for Jasmine2 Runner Compatibility (JavaScript)\nDESCRIPTION: Shows how to reorder afterEach hooks to match Jasmine2\\'s reversed teardown order. Essential if moving from Jest\\'s ordering to Jasmine2 for consistent output and teardown behavior, especially when tests rely on teardown ordering. Demonstrates only the change via a unified diff to highlight required adjustments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => console.log('connection setup'));\n+ afterEach(() => console.log('connection teardown'));\n\nbeforeEach(() => console.log('database setup'));\n+ afterEach(() => console.log('database teardown'));\n\n- afterEach(() => console.log('database teardown'));\n- afterEach(() => console.log('connection teardown'));\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Timer Function in JavaScript\nDESCRIPTION: A sample timer function that calls a callback after 1 second. This function will be used in the test examples to demonstrate Jest's timer mocking capabilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Inline Table of Objects in Jest (TypeScript)\nDESCRIPTION: Demonstrates data-driven tests in Jest with TypeScript using an inline array of objects for strong type inference. Comments note that variables such as 'write' are properly typed as optional or specific types. The snippet imports Jest globals for TypeScript and is suitable for when test data includes various fields. Dependencies include Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module for Manual Mock Extension (TypeScript)\nDESCRIPTION: Exports a TypeScript object `utils` (`utils.ts`) with `authorize` and `isAuthorized` methods, including type annotations. This module is the TypeScript equivalent used to demonstrate `jest.createMockFromModule()` with type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport const utils = {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: (secret: string) => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Jest Object in ESM via Import\nDESCRIPTION: Demonstrates how to access the Jest object in ESM by importing it from '@jest/globals' or using import.meta. This is necessary because Jest injects the object differently in ESM compared to CommonJS.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ECMAScriptModules.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.useFakeTimers();\n\n// etc.\n\n// alternatively\nimport.meta.jest.useFakeTimers();\n\n// jest === import.meta.jest => true\n```\n\n----------------------------------------\n\nTITLE: Importing Jest APIs in TypeScript\nDESCRIPTION: This snippet demonstrates the required import statement for Jest APIs when using TypeScript. The explicit imports are necessary for TypeScript compatibility.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/_TypeScriptExamplesNote.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\n----------------------------------------\n\nTITLE: Using jest.Mocked<Source> utility type in TypeScript\nDESCRIPTION: Shows how to use the jest.Mocked utility type to wrap a source type with Jest mock function type definitions, providing proper typing for mocked functions and methods.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns for pnpm Package Manager in JavaScript\nDESCRIPTION: Advanced example showing how to configure transformIgnorePatterns to work with pnpm package manager, handling its unique symlink structure to correctly transform specific packages under node_modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative pattern to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme (Bash)\nDESCRIPTION: Command to install `enzyme` as a development dependency using npm or yarn. Enzyme is a JavaScript testing utility for React that makes it easier to assert, manipulate, and traverse React Components' output. An adapter (`enzyme-adapter-react-XX`) corresponding to the React version is also required but not shown in this command.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev enzyme\n```\n\n----------------------------------------\n\nTITLE: Testing with Resolves Matcher\nDESCRIPTION: Shows how to test promises using Jest's .resolves matcher for more concise testing syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('works with resolves', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Watch Menu Integration for Jest Plugin in JavaScript\nDESCRIPTION: Example of adding a custom key and prompt to the Jest watch mode menu using getUsageInfo method.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  getUsageInfo(globalConfig) {\n    return {\n      key: 's',\n      prompt: 'do something',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Jest Worker Threads\nDESCRIPTION: Demonstrates how to limit the maximum number of worker threads Jest uses for parallel test execution via the `--maxWorkers` CLI option. This can improve performance on CI servers or other resource-constrained environments. The example sets the limit to 4 workers and shows usage with both the Jest CLI and an npm script.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --maxWorkers=4\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --maxWorkers=4\n```\n\n----------------------------------------\n\nTITLE: Serializing Object in Compact Mode with prettyFormat (JavaScript)\nDESCRIPTION: Applies prettyFormat to serialize the object in a compact single-line format using the 'min' option with the custom plugin. The serialized output contains all properties with minimal spacing, suitable for logs and transmission. Input requires prettyFormat, val, the plugin, and 'min: true'. Limitation: reduced readability for deeply nested or long data.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n----------------------------------------\n\nTITLE: Matching Substrings with .toMatch in Jest (JavaScript)\nDESCRIPTION: Shows how the `.toMatch` matcher can also accept a plain string argument. In this case, it checks if the target string ('grapefruits') contains the provided substring ('fruit').\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: js\nCODE:\n```\ndescribe('grapefruits are healthy', () => {\n  test('grapefruits are a fruit', () => {\n    expect('grapefruits').toMatch('fruit');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Theme for Syntax Highlighting - JavaScript\nDESCRIPTION: This snippet defines a DEFAULT_THEME object specifying color mappings for use with pretty-format's syntax highlighting. Each property maps a syntax element to a color. This object can be passed as the theme property in pretty-format options to customize output coloring in terminal environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Jest Matchers with expect.extend (JavaScript)\nDESCRIPTION: Introduced in Jest 17.0.0, `expect.extend(matchers)` allows developers to add their own custom matchers to Jest. This enables the creation of domain-specific assertions, improving test readability and maintainability.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.extend\n```\n\n----------------------------------------\n\nTITLE: Resetting All Mocks with jest.resetAllMocks (JavaScript)\nDESCRIPTION: Introduced in Jest 17.0.0, `jest.resetAllMocks()` resets the state of all mocks (clears call history, resets implementations to a basic `jest.fn()`). It replaced the older `jest.clearAllMocks()`, offering potentially clearer semantics by ensuring mocks are reset to a non-undefined default implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\njest.resetAllMocks\n```\n\n----------------------------------------\n\nTITLE: Customizing snapshot formatting in Jest (JavaScript)\nDESCRIPTION: Example of customizing snapshot formatting options in Jest configuration, specifically disabling the printing of basic prototypes for objects and arrays.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Exporting a Module with Various Data Types - JavaScript\nDESCRIPTION: Exports a CommonJS module with properties of different data types: functions, async functions, classes, objects, arrays, numbers, strings, booleans, and symbols. Used for demonstrating how Jest's createMockFromModule mocks each data type. No dependencies outside Node.js/Jest environment; suitable for comprehensive mocking scenario testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  function: function square(a, b) {\\n    return a * b;\\n  },\\n  asyncFunction: async function asyncSquare(a, b) {\\n    const result = (await a) * b;\\n    return result;\\n  },\\n  class: new (class Bar {\\n    constructor() {\\n      this.array = [1, 2, 3];\\n    }\\n    foo() {}\\n  })(),\\n  object: {\\n    baz: 'foo',\\n    bar: {\\n      fiz: 1,\\n      buzz: [1, 2, 3],\\n    },\\n  },\\n  array: [1, 2, 3],\\n  number: 123,\\n  string: 'baz',\\n  boolean: true,\\n  symbol: Symbol.for('a.b.c'),\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals from @jest/globals in TypeScript\nDESCRIPTION: This snippet demonstrates importing specific Jest global functions (`describe`, `expect`, `it`) directly from the `@jest/globals` package within a TypeScript file. This approach provides explicit dependencies for Jest's testing APIs instead of relying on ambient global types, often useful in environments where globals might conflict or are undesirable.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-types/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {describe, expect, it} from '@jest/globals';\n\ndescribe('my tests', () => {\n  it('works', () => {\n    expect(1).toBe(1);\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Mocking with doMock\nDESCRIPTION: Examples of using jest.doMock() for different mock implementations within the same file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Module with Mixed Exports\nDESCRIPTION: Exports a constant `foo`, a function `bar`, and a default exported function from a JavaScript module using ES module syntax. This serves as an example target for partial mocking techniques in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport const foo = 'foo';\nexport const bar = () => 'bar';\nexport default () => 'baz';\n```\n\n----------------------------------------\n\nTITLE: Defining a Class Method Fetching Data with Axios in JavaScript\nDESCRIPTION: This snippet defines a JavaScript class `Users` with a static method `all`. This method uses the `axios.get` function to make an asynchronous HTTP GET request to '/users.json' and returns a promise that resolves with the `data` property of the response, presumably containing user information. It requires the `axios` library.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\nexport default Users;\n```\n\n----------------------------------------\n\nTITLE: Stabilizing String Snapshots with Regular Expressions in Jest (JavaScript)\nDESCRIPTION: This example shows how to sanitize variable sections of a string (like random IDs) before using Jest snapshot testing, using String.replace and regular expressions. It demonstrates converting a DOM string containing a random integer in its id attribute into a stable value prior to snapshotting. Requires only standard JavaScript and Jest. Inputs are strings with variable parts, outputs are constant-format snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomNumber = Math.round(Math.random() * 100);\nconst stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;\nconst stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);\nexpect(stringWithConstantData).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Exporting Various Data Types for Jest Mocking - JavaScript\nDESCRIPTION: Exports an object containing diverse data types (functions, async functions, classes, objects, arrays, primitives, and symbols). This comprehensive example demonstrates how jest.createMockFromModule treats different data structures when generating mocks. Compatible with Jest test environments expecting CommonJS modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  function: function square(a, b) {\\n    return a * b;\\n  },\\n  asyncFunction: async function asyncSquare(a, b) {\\n    const result = (await a) * b;\\n    return result;\\n  },\\n  class: new (class Bar {\\n    constructor() {\\n      this.array = [1, 2, 3];\\n    }\\n    foo() {}\\n  })(),\\n  object: {\\n    baz: 'foo',\\n    bar: {\\n      fiz: 1,\\n      buzz: [1, 2, 3],\\n    },\\n  },\\n  array: [1, 2, 3],\\n  number: 123,\\n  string: 'baz',\\n  boolean: true,\\n  symbol: Symbol.for('a.b.c'),\\n};\n```\n\n----------------------------------------\n\nTITLE: Utility Function Using jest.Spied Type in TypeScript\nDESCRIPTION: Utility function demonstrating jest.Spied type usage for Date.now() mocking. Shows how to properly type spy return values for reusable test utilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers - Jest - JavaScript\nDESCRIPTION: Shows configuration for enabling Jest's legacy fake timers implementation. Requires Jest 22+ and is intended for compatibility scenarios—most timer-related APIs will be mocked, but extra options are not supported. Input: config object with legacyFakeTimers: true; Output: legacy fake timer mode enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\njest.useFakeTimers({\n  legacyFakeTimers: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Test Sequencer Implementation for Jest\nDESCRIPTION: Example of a custom test sequencer that extends Jest's default sequencer. It implements shard and sort methods to control test execution order, sorting tests alphabetically by path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_94\n\nLANGUAGE: js\nCODE:\n```\nconst Sequencer = require('@jest/test-sequencer').default;\n\nclass CustomSequencer extends Sequencer {\n  /**\n   * Select tests for shard requested via --shard=shardIndex/shardCount\n   * Sharding is applied before sorting\n   */\n  shard(tests, {shardIndex, shardCount}) {\n    const shardSize = Math.ceil(tests.length / shardCount);\n    const shardStart = shardSize * (shardIndex - 1);\n    const shardEnd = shardSize * shardIndex;\n\n    return [...tests]\n      .sort((a, b) => (a.path > b.path ? 1 : -1))\n      .slice(shardStart, shardEnd);\n  }\n\n  /**\n   * Sort test to determine order of execution\n   * Sorting is applied after sharding\n   */\n  sort(tests) {\n    // Test structure information\n    // https://github.com/jestjs/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21\n    const copyTests = [...tests];\n    return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));\n  }\n}\n\nmodule.exports = CustomSequencer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Project Objects with Custom Runners Using Jest - TypeScript\nDESCRIPTION: A Jest configuration written in TypeScript that defines multiple project objects, each specifying its own displayName and, optionally, a custom runner. The 'lint' project uses 'jest-runner-eslint' to run linting tasks alongside tests. This allows developers to keep code validation and testing unified under a single Jest invocation for monorepo or multipurpose environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Using describe.skip.each with Tagged Template Literals in JavaScript\nDESCRIPTION: Example of using describe.skip.each with tagged template literals to skip data-driven test suites with table-like test data. The table-formatted tests will be defined but not executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('will not be run', () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Transformer using babel-jest\nDESCRIPTION: Shows how to create a custom Jest transformer by composing it with `babel-jest`. It uses `babelJest.createTransformer` and passes custom Babel configuration options, such as a custom preset (`'my-custom-preset'`). This leverages `babel-jest`'s existing infrastructure while allowing customization.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst babelJest = require('babel-jest');\n\nmodule.exports = babelJest.createTransformer({\n  presets: ['my-custom-preset'],\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Mock Implementation on Jest Mocks in JavaScript\nDESCRIPTION: This snippet shows how to use jest.fn to create a mock function and provide a custom implementation that invokes a callback with arguments (null, true). It demonstrates simulating real-world callback-based logic in testing. Input is a callback function; output is delegated to that callback. Jest is the required dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMockFn = jest.fn(cb => cb(null, true));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Paths in JavaScript\nDESCRIPTION: This `jest.config.js` snippet adds the `modulePaths` configuration, which is Jest's equivalent to Webpack's `resolve.roots` (or setting `NODE_PATH`). It specifies additional directories where Jest should look for modules, alongside the previously configured `moduleFileExtensions`, `moduleDirectories`, and `moduleNameMapper`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Jest Config - TypeScript\nDESCRIPTION: Demonstrates how to declare global variables for Jest test environments using TypeScript. It imports the 'Config' type and assigns '__DEV__' as a global variable. The object is exported as the default export. Requires TypeScript and Jest, and only JSON-serializable globals are supported.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotSerializers in Jest - JavaScript\nDESCRIPTION: This JavaScript Jest configuration file shows how to specify a custom snapshot serializer by setting snapshotSerializers to the module's path. It is exported as a CommonJS module for use by the Jest test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Running Only Specific Tests in a Suite - Jest Only Modifier - JavaScript\nDESCRIPTION: Demonstrates test.only to execute only a subset of tests for debugging. Only tests marked with only will be run, others in the file are skipped. Supports optional timeout, and can be combined with normal or parameterized test patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Matchers and Hooks in Jest Setup File - JavaScript\nDESCRIPTION: This JavaScript module extends Jest's global expect object with matchers from jest-extended and resets timers after each test. Intended to be loaded as a setupFilesAfterEnv entry, it demonstrates use of third-party matcher libraries and the global afterEach hook for consistent test cleanup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst matchers = require('jest-extended');\nexpect.extend(matchers);\n\nafterEach(() => {\n  jest.useRealTimers();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Running Jest via CLI with Custom Configuration - Bash\nDESCRIPTION: Demonstrates how to run Jest directly using the CLI, specifying a test file pattern, OS notifications, and a custom configuration file. Assumes Jest is globally installed and accessible in PATH. Key parameters include the test file pattern (my-test), --notify for desktop notifications, and --config to specify a configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest my-test --notify --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Test for React Component in TypeScript\nDESCRIPTION: This snippet shows how to update a snapshot test when the component implementation changes intentionally. It creates a new snapshot for the Link component pointing to a different URL.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Defined Values with toBeDefined in Jest\nDESCRIPTION: Demonstrates using the toBeDefined matcher to verify that a variable is not undefined. The example checks that a function returns some value rather than undefined.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntest('there is a new flavor idea', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Reporter in Jest (JavaScript)\nDESCRIPTION: Example of configuring the GitHub Actions Reporter in Jest using JavaScript. This reporter annotates changed files with test failure messages and prints logs with GitHub group features.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing babel-jest and @babel/core with Yarn\nDESCRIPTION: Command to install babel-jest and @babel/core as dev dependencies using Yarn package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-jest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev babel-jest @babel/core\n```\n\n----------------------------------------\n\nTITLE: Mocking a Native Component Using mockComponent Helper (JS)\nDESCRIPTION: Shows how to use the `mockComponent` helper provided by `react-native/jest/mockComponent` for creating more sophisticated manual mocks. This approach is useful when you need to mock a native component (`path/to/MyNativeComponent`) while preserving its basic structure and potentially forwarding prop types or static fields.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('path/to/MyNativeComponent', () => {\n  const mockComponent = require('react-native/jest/mockComponent');\n  return mockComponent('path/to/MyNativeComponent');\n});\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with Enzyme\nDESCRIPTION: Test file showing how to use Enzyme's shallow renderer to test a checkbox component's behavior when clicked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Enzyme, {shallow} from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\nEnzyme.configure({adapter: new Adapter()});\n\nit('CheckboxWithLabel changes the text after click', () => {\n  // Render a checkbox with label in the document\n  const checkbox = shallow(<CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />);\n\n  expect(checkbox.text()).toBe('Off');\n\n  checkbox.find('input').simulate('change');\n\n  expect(checkbox.text()).toBe('On');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Failing Data-Driven Tests in Jest (JavaScript)\nDESCRIPTION: Shows `test.failing.each` with an array of objects to run multiple cases where failure is expected. Each test inverts result logic (throws to pass), making it ideal for known bugs or unimplemented features. Only available with jest-circus runner; test case data is provided as an array of objects. Each row leads to one test, and destructuring provides named parameters in the test body.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Manual Implementation for `.mockReturnThis()` in JavaScript\nDESCRIPTION: This snippet illustrates the explicit function implementation that achieves the same result as using `.mockReturnThis()`. It defines a mock function using `jest.fn()` and provides an implementation `function () { return this; }` to ensure the mock method returns its `this` context, enabling method chaining.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// is the same as\n\nconst otherObj = {\n  myMethod: jest.fn(function () {\n    return this;\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking a CJS Module from an ESM Jest Test (JavaScript)\nDESCRIPTION: Illustrates how to mock a CommonJS module (like 'electron') using `jest.mock` within a Jest test file written with ESM syntax (`import`). It shows how to load the mocked CJS module and the module under test (`./main.cjs`) using either `createRequire` from `node:module` to get a `require` function or by using dynamic `import()`. This technique is necessary when mixing ESM tests with CJS dependencies that need mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ECMAScriptModules.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// title=\"main.test.cjs\"\nimport {createRequire} from 'node:module';\nimport {jest} from '@jest/globals';\n\nconst require = createRequire(import.meta.url);\n\njest.mock('electron', () => ({\n  app: {\n    on: jest.fn(),\n    whenReady: jest.fn(() => Promise.resolve()),\n  },\n  BrowserWindow: jest.fn().mockImplementation(() => ({\n    // partial mocks.\n  })),\n}));\n\nconst {BrowserWindow} = require('electron');\nconst exported = require('./main.cjs');\n\n// alternatively\nconst {BrowserWindow} = (await import('electron')).default;\nconst exported = await import('./main.cjs');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Partial Module Mocking with Jest in JavaScript\nDESCRIPTION: Shows how to create a module with multiple exports and locally overwrite only selected exports using Jest's manual jest.mock capability. Exports default and named functions/variables, and mocks the default export and 'foo' while preserving 'bar's original implementation. Useful for testing with only part of a module substituted.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const foo = 'foo';\nexport const bar = () => 'bar';\nexport default () => 'baz';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test Example\nDESCRIPTION: Example of writing Jest tests in TypeScript with proper type imports.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, expect, test} from '@jest/globals';\nimport {sum} from './sum';\n\ndescribe('sum module', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Concurrent Data-Driven Tests with test.concurrent.each and Tagged Template Literals in Jest (JavaScript)\nDESCRIPTION: This code demonstrates the use of test.concurrent.each with a tagged template literal to run many parallel, parameterized async tests in Jest. The template specifies column headings and data rows, and each object row is passed to the asynchronous test function. Requires Jest; inputs are the table definitions, and outputs are pass/fail of each concurrently executed test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Transformers in TypeScript (jest.config.ts)\nDESCRIPTION: Shows the configuration of multiple code transformers within a Jest TypeScript configuration file (`jest.config.ts`) using the `transform` property. It specifies `babel-jest` for JavaScript/TypeScript files and a custom transformer for CSS files, ensuring type safety with `import type {Config} from 'jest'`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Writing a Puppeteer Test Using a Shared Global Browser (JavaScript)\nDESCRIPTION: Demonstrates an end-to-end test for a web page using Jest and a globally shared Puppeteer browser instance. The test creates a new page, navigates to Google, retrieves body text, and asserts presence of 'google'. Key dependencies include the manual setup of Puppeteer environment. The timeout parameter ensures test reliability in CI/CD or slow environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeout = 5000;\n\ndescribe(\n  '/ (Home Page)',\n  () => {\n    let page;\n    beforeAll(async () => {\n      page = await globalThis.__BROWSER_GLOBAL__.newPage();\n      await page.goto('https://google.com');\n    }, timeout);\n\n    it('should load without error', async () => {\n      const text = await page.evaluate(() => document.body.textContent);\n      expect(text).toContain('google');\n    });\n  },\n  timeout,\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Hook Execution Order in Jest\nDESCRIPTION: Shows the execution order of setup and teardown hooks in nested scopes, illustrating how to manage dependencies between resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => console.log('connection setup'));\nbeforeEach(() => console.log('database setup'));\n\nafterEach(() => console.log('database teardown'));\nafterEach(() => console.log('connection teardown'));\n\ntest('test 1', () => console.log('test 1'));\n\ndescribe('extra', () => {\n  beforeEach(() => console.log('extra database setup'));\n  afterEach(() => console.log('extra database teardown'));\n\n  test('test 2', () => console.log('test 2'));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `setupFilesAfterEnv` in Jest (JavaScript)\nDESCRIPTION: Demonstrates configuring the `setupFilesAfterEnv` option in a JavaScript Jest config file (`.js` or `.cjs`). This option takes an array of paths to modules that run after the test framework is installed but before the tests execute. This example points to a local `setup-jest.js` file using the `<rootDir>` token.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: File Mock Implementation for Jest\nDESCRIPTION: A simple mock file for static assets that returns a string placeholder. This prevents errors when tests try to import assets like images or fonts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = 'test-file-stub';\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects with Jest - JavaScript\nDESCRIPTION: Defines a Jest configuration in JavaScript to enable running tests across multiple projects or directories using the 'projects' option. This approach is useful for monorepos or repositories containing several testable subprojects. The configuration should be exported via CommonJS 'module.exports', and requires Jest to be installed. The 'projects' field accepts an array of path strings or glob patterns, each pointing to a root where Jest should execute tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-jest as a transformer for JavaScript and TypeScript files\nDESCRIPTION: JSON configuration to set babel-jest as the transformer for .js, .jsx, .ts, and .tsx files in Jest config. This uses the default Babel configuration if present.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-jest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use a Custom Watch Plugin (JavaScript)\nDESCRIPTION: This configuration snippet demonstrates how to add a custom watch plugin to a Jest setup using `jest.config.js`. The `watchPlugins` array receives the path to the plugin, integrating it into Jest's lifecycle. This setup is required to enable plugin functionality and must be added to the Jest configuration root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: ['path/to/yourWatchPlugin'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Fake Timers with FakeTimersConfig Type - TypeScript\nDESCRIPTION: Defines the FakeableAPI string union and the FakeTimersConfig interface for configuring Jest's fake timer system. Requires TypeScript. Parameters for FakeTimersConfig include options for advancing timers, specifying APIs not to fake, legacy mode, current system time, and recursion limits. Primarily used as type documentation and aids IDE autocomplete in TypeScript projects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype FakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number | Date;\n  /**\n   * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.\n   * The default is `100_000` timers.\n   */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Object-Based Parameterized Test Suites with jest-each\nDESCRIPTION: Shows how to create parameterized test suites using the describe method with object-based parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n]).describe('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test('does not mutate first arg', () => {\n    a + b;\n    expect(a).toBe(a);\n  });\n\n  test('does not mutate second arg', () => {\n    a + b;\n    expect(b).toBe(b);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up watchPathIgnorePatterns in a Jest configuration file using JavaScript. It ignores changes in the .tmp and bar directories under the root directory when watching for file changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Asserting Function Throws with .toThrow in Jest (JavaScript)\nDESCRIPTION: Shows the basic usage of `.toThrow` (or its alias `.toThrowError`) to assert that calling a function (`drinkFlavor('octopus')`) throws an error. It's crucial to wrap the code that is expected to throw inside a function passed to `expect`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: js\nCODE:\n```\ntest('throws on octopus', () => {\n  expect(() => {\n    drinkFlavor('octopus');\n  }).toThrow();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Environment Options in Test File\nDESCRIPTION: Example of specifying environment options directly in a test file using docblock configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Tests with Template Literals and Generic Types - Jest.each TypeScript\nDESCRIPTION: Demonstrates using Jest's template literal table with a generic type parameter for correct TypeScript type inference where types are not uniform across columns (e.g., mixing strings and booleans). The test callback receives destructured, well-typed parameters. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Test Environment (JavaScript)\nDESCRIPTION: Defines a `CustomEnvironment` class extending `jest-environment-node`. It demonstrates accessing configuration (`config`, `context`), implementing `setup` and `teardown` methods for custom logic (e.g., initializing/destroying global objects, running setup/teardown tasks), passing global variables (`this.global.someGlobalObject`), handling docblock pragmas (`this.docblockPragmas`), implementing `getVmContext`, and optionally handling test events with `handleTestEvent`. Requires the `jest-environment-node` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_86\n\nLANGUAGE: js\nCODE:\n```\n// my-custom-environment\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nclass CustomEnvironment extends NodeEnvironment {\n  constructor(config, context) {\n    super(config, context);\n    console.log(config.globalConfig);\n    console.log(config.projectConfig);\n    this.testPath = context.testPath;\n    this.docblockPragmas = context.docblockPragmas;\n  }\n\n  async setup() {\n    await super.setup();\n    await someSetupTasks(this.testPath);\n    this.global.someGlobalObject = createGlobalObject();\n\n    // Will trigger if docblock contains @my-custom-pragma my-pragma-value\n    if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {\n      // ...\n    }\n  }\n\n  async teardown() {\n    this.global.someGlobalObject = destroyGlobalObject();\n    await someTeardownTasks();\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n\n  async handleTestEvent(event, state) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n\nmodule.exports = CustomEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Mocking Modules in Tests Using jest.doMock in JavaScript\nDESCRIPTION: Demonstrates dynamic mocking of a module within individual test cases by using jest.doMock. Resets modules before each test to ensure isolation. Custom mocks are specified per test using factory functions, returning mocks with different return values. Suitable for scenarios requiring different mocks within the same test file. Requires Jest and CommonJS require.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-mocking a Module with jest.mock (JS)\nDESCRIPTION: Demonstrates how to use `jest.mock()` without a factory function to automatically mock the `../banana` module. When the mocked `banana` function is called, it returns `undefined` because Jest replaces the original implementation with a basic mock function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// __tests__/test.js\njest.mock('../banana');\n\nconst banana = require('../banana'); // banana will be explicitly mocked.\n\nbanana(); // will return 'undefined' because the function is auto-mocked.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Transformer for File Asset Imports in JavaScript\nDESCRIPTION: Implements a custom Jest transformer for asset files (such as images or media files) using JavaScript and Node.js core modules. When an asset file is imported, the transformer replaces the import with a string export of the asset’s basename, effectively stubbing out imported file references during testing. This is useful in scenarios where non-JS assets are encountered by tests. The 'process' method follows the Jest synchronous transformer API. Dependencies include Node’s 'path' module, and the snippet is designed to be placed in a file (e.g., fileTransformer.js) referenced from jest.config.js.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CodeTransformation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\\n\\nmodule.exports = {\\n  process(sourceText, sourcePath, options) {\\n    return {\\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\\n    };\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying JavaScript value types with jest-get-type\nDESCRIPTION: This example shows how to use the getType function from jest-get-type to identify the primitive type of various JavaScript values, returning descriptive string representations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getType} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n----------------------------------------\n\nTITLE: Jest Anything Matcher Example\nDESCRIPTION: Demonstrates using expect.anything() to verify a mock function call with any non-null argument.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ntest('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toHaveBeenCalledWith(expect.anything());\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Jest Defaults with Custom Config in TypeScript\nDESCRIPTION: This snippet imports the Jest Config type and 'defaults' from 'jest-config', then extends the standard file extensions with 'mts'. The config object is exported as default. This requires both 'jest' and 'jest-config' types and packages, and assumes a TypeScript environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\\nimport {defaults} from 'jest-config';\\n\\nconst config: Config = {\\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts'],\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using .toContain Matcher in Jest (JavaScript)\nDESCRIPTION: The `.toContain(item)` matcher, used for checking presence within arrays or substrings within strings, was improved in Jest 17.0.3. This general-purpose matcher verifies if an item exists in an iterable or if a string includes a substring.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n.toContain\n```\n\n----------------------------------------\n\nTITLE: Defining an ES6 Class for Sound Playing in JavaScript\nDESCRIPTION: This snippet defines a simple ES6 class `SoundPlayer` with a constructor and a method `playSoundFile`. It serves as the base class that will be mocked in subsequent examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript title=\"sound-player.js\"\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking an ESM Module with jest.unstable_mockModule (JavaScript)\nDESCRIPTION: Illustrates the usage of `jest.unstable_mockModule` for mocking ECMAScript Modules in Jest. This function requires a factory function (which can be sync or async) and necessitates loading the mocked module afterwards using dynamic `import()` or `require`. This approach is needed due to the static nature of ESM imports, and the API is currently experimental.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ECMAScriptModules.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.unstable_mockModule('node:child_process', () => ({\n  execSync: jest.fn(),\n  // etc.\n}));\n\nconst {execSync} = await import('node:child_process');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Installing identity-obj-proxy for CSS Modules Mocking\nDESCRIPTION: Command to install identity-obj-proxy package for mocking CSS Modules in Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev identity-obj-proxy\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Multiple Custom Reporters\nDESCRIPTION: This example demonstrates how to configure Jest to use multiple reporters via the command line. The `--reporters` flag is specified twice, once for the `default` reporter and once for the `jest-junit` reporter. Note that specific reporter options cannot be passed through the CLI.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest --reporters=\"default\" --reporters=\"jest-junit\"\n```\n\n----------------------------------------\n\nTITLE: Including Default Babel-Jest Transformer in JSON Configuration\nDESCRIPTION: This JSON snippet shows how to configure Jest's `transform` option when using custom transformers alongside Babel. It explicitly includes the default `babel-jest` transformer for `.js` and `.jsx` files, ensuring Babel transformations still occur while also applying a custom transformer (e.g., `some-css-transformer`) for CSS files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking window.matchMedia in Jest\nDESCRIPTION: This snippet shows how to mock the window.matchMedia method, which is not implemented in JSDOM. It creates a mock implementation that can be used in tests where matchMedia is required.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ManualMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n```\n\n----------------------------------------\n\nTITLE: Restoring Real Timers with Jest in JavaScript\nDESCRIPTION: Shows a common pattern of using `jest.useRealTimers()` within an `afterEach` hook. This ensures that fake timers enabled by `jest.useFakeTimers` in a test are restored to the original system timers after the test completes, preventing interference with subsequent tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nafterEach(() => {\n  jest.useRealTimers();\n});\n\ntest('do something with fake timers', () => {\n  jest.useFakeTimers();\n  // ...\n});\n\ntest('do something with real timers', () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Jest Configuration Object in JavaScript\nDESCRIPTION: Demonstrates exporting a simple configuration object from a `jest.config.js` file. It sets the `verbose` option to `true` and uses JSDoc for type hinting with `import('jest').Config`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  verbose: true,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Summary Reporter Configuration with Threshold in Jest - JavaScript\nDESCRIPTION: Configures Jest's 'default' reporter with a 'summaryThreshold' option to control when a detailed summary of failed tests is printed. If the total number of test suites exceeds the threshold (default 20), a detailed summary appears. Useful for large test suites where only failures need elaboration. Option is set either at the default or summary reporter level.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Snapshot Matcher 'toMatchTrimmedSnapshot'\nDESCRIPTION: Illustrates creating a custom Jest snapshot matcher `.toMatchTrimmedSnapshot(length)` using `expect.extend`. It imports `toMatchSnapshot` from `jest-snapshot` and calls it with a sliced version of the received string, effectively creating a snapshot of only the first `length` characters. An example usage within an `it` block is included.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.slice(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nStored snapshot will look like:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Timer Limits in Jest\nDESCRIPTION: Configuration option to set the maximum number of timers that Jest will run before throwing an error. This is useful for preventing infinite loops in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers({timerLimit: 100});\n```\n\n----------------------------------------\n\nTITLE: Creating a Jest-Aware Babel Configuration\nDESCRIPTION: This JavaScript configuration for `babel.config.js` demonstrates how to make Babel environment-aware. It uses the `api.env('test')` function, provided by Babel, to check if the code is being run in the Jest environment (where `process.env.NODE_ENV` is typically 'test'). This allows for conditional application of presets or plugins specifically for testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  const isTest = api.env('test');\n  // You can use isTest to determine what presets and plugins to use.\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous User Fetching Function in JavaScript\nDESCRIPTION: This snippet defines an asynchronous function `getUserName` in `user.js`. It takes a `userID`, uses an imported `request` function (expected to return a promise) to fetch user data from an API endpoint based on the ID, and then uses the promise's `.then` method to extract and return the `user.name` from the resolved data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport request from './request';\n\nexport function getUserName(userID) {\n  return request(`/users/${userID}`).then(user => user.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Asynchronous Test Definition in Jest (Example)\nDESCRIPTION: Illustrates an incorrect way to define a Jest test where the `it` (or `test`) block is wrapped in a `setTimeout` or other asynchronous operation. Jest requires tests to be defined synchronously during the initial file parsing and test collection phase. Tests defined asynchronously like this will not be discovered or executed by Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// Don't do this it will not work\nsetTimeout(() => {\n  it('passes', () => expect(1).toBe(1));\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: TypeScript usage with jest.fn() and type safety\nDESCRIPTION: Shows how to ensure type safety with mock functions in TypeScript by passing a generic type argument to jest.fn(), allowing the mock to properly type its parameters and return value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals and Using Fake Timers (Jest, JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Jest global object in ECMAScript Modules by using the '@jest/globals' package or via import.meta, and then leverages the useFakeTimers API. It highlights the essential pattern to access the 'jest' global in ESM environments, requiring an explicit import instead of assuming global availability. Inputs include no parameters, and outputs depend on subsequent API usage; dependencies include Jest v27+ and '@jest/globals'. This approach applies only to ESM contexts and is not valid in CommonJS modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ECMAScriptModules.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.useFakeTimers();\n\n// etc.\n\n// alternatively\nimport.meta.jest.useFakeTimers();\n\n// jest === import.meta.jest => true\n```\n\n----------------------------------------\n\nTITLE: Setting Module Path Ignore Patterns in Jest\nDESCRIPTION: Configuration for specifying patterns to ignore certain module paths during testing. Uses rootDir token to reference project root directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Basic Sum Function Implementation\nDESCRIPTION: Simple JavaScript function that adds two numbers together, demonstrating basic module exports.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template Literals for Concurrent Only Data-Driven Tests in Jest (JavaScript)\nDESCRIPTION: Shows how to define concurrent, only-run, parameterized tests using tagged template literals for clean tabular test data expression. `test.concurrent.only.each\\`...\\`` executes only specified data-driven tests concurrently, running each row as a separate test. Test variables are injected into names and as test parameters. Requires Jest; supports only concurrent test execution, and utilizes destructuring for parameter access within the test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Scoping Setup Hooks in Jest with describe Blocks\nDESCRIPTION: Demonstrates how to scope setup hooks to specific describe blocks, allowing different setups for different groups of tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Error Matching Snapshot in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to use .toThrowErrorMatchingSnapshot() to test that a function throws an error matching the most recent snapshot. It includes an example of a function that throws an error for a specific input and how to test it.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Focusing Data-Driven Tests with describe.only.each (Array) in Jest (JavaScript)\nDESCRIPTION: Shows how to use `describe.only.each` with an array of arrays (`table`) to run only a specific suite of data-driven tests. Each inner array represents a test case's arguments. The example uses printf-style formatting (`%i`) in the name string. Other tests or suites in the file are skipped.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ndescribe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Parameterized Tests with Typed Table Variable of Arrays in Jest (TypeScript)\nDESCRIPTION: Shows the requirement for explicit tuple typing on array variable data tables to get correct argument types for parameterized tests in Jest with TypeScript. Without the type annotation, argument inference can be incorrect. The snippet imports the Jest global and defines the tuple shape for proper typing. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest 27 to Use the JSDOM Test Environment\nDESCRIPTION: This configuration option sets the test environment to `jsdom`. It's necessary for tests that require a DOM environment (accessing `document`, `window`, etc.) after Jest 27 changed the default environment to `node`. This setting should be placed in the Jest configuration. Alternatively, per-file configuration via docblocks can be used.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2021-05-25-jest-27.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"testEnvironment\": \"jsdom\"\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Test Implementation\nDESCRIPTION: Test implementation showing how to use toThrowErrorMatchingSnapshot() to verify error messages.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Find Files\nDESCRIPTION: Jest configuration to set moduleFileExtensions, moduleDirectories, and moduleNameMapper for finding and processing files.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Related Tests Using Jest CLI (Bash)\nDESCRIPTION: This snippet shows how to use Jest's CLI to determine which test files are affected by changes in particular source files across multiple projects in a monorepo. By combining the --projects, --listTests, and --findRelatedTests options, the command lists relevant tests, improving efficiency for CI processes. Expected input includes project and file paths, and the output is a JSON array of test file paths; dependencies include Jest 20+ and appropriate project configurations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-05-06-jest-20-delightful-testing-multi-project-runner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ jest --projects projectA projectB --listTests --findRelatedTests projectA/banana.js projectB/kiwi.js\n[\n  \"projectA/banana.test.js\",\n  \"projectB/kiwi.test.js\",\n  \"projectB/pineapple.test.js\",\n]\n\n```\n\n----------------------------------------\n\nTITLE: Using Inline Array Tables with Jest.each - TypeScript\nDESCRIPTION: Demonstrates a data-driven test in TypeScript using an inline array-of-arrays table. The arguments in the test callback have their types automatically inferred based on the array structure. Only Jest and TypeScript are necessary. Useful where each row has matching types or optional trailing entries.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Outputs Using exports (JavaScript)\nDESCRIPTION: These code snippets illustrate how snapshot outputs are defined in Jest snapshot files via exports. Each export associates a string snapshot name with the expected output (either a value like 'null' or a formatted HTML structure). Snapshots are generated automatically by Jest when running tests utilizing the toMatchSnapshot assertion, and clear, descriptive names improve maintenance and review. Snapshots can represent components rendering different data or different test scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/SnapshotTesting.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports[`<UserName /> should handle some test case`] = `null`;\n\nexports[`<UserName /> should handle some other test case`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports[`<UserName /> should render null`] = `null`;\n\nexports[`<UserName /> should render Alan Turing`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports[`<UserName /> should render null`] = `\n<div>\n  Alan Turing\n</div>\n`;\n\nexports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library (Bash)\nDESCRIPTION: Command to install `@testing-library/react` as a development dependency using npm or yarn. This library provides utilities for testing React components by interacting with them in a way that resembles how users interact with the DOM.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Generated Inline Snapshot Test in Jest (TSX)\nDESCRIPTION: This snippet shows the result after Jest has run the previous inline snapshot test for the first time. Jest automatically writes the serialized snapshot of the `tree` object as a template literal argument directly within the `toMatchInlineSnapshot()` call in the source code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot(`\n    <a\n      className=\"normal\"\n      href=\"https://example.com\"\n      onMouseEnter={[Function]}\n      onMouseLeave={[Function]}\n    >\n      Example Site\n    </a>\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jest-haste-map using yarn (Bash)\nDESCRIPTION: This command utilizes the Yarn package manager to install the `jest-haste-map` package. The `--dev` flag ensures the package is listed under `devDependencies` in the `package.json`, suitable for development environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-haste-map/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-haste-map --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Ignore Patterns for pnpm (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to configure transformIgnorePatterns for pnpm package manager, addressing the symlink structure specific to pnpm with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_85\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative path to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring and Customizing a Jest Watch Plugin in JavaScript\nDESCRIPTION: This `jest.config.js` example demonstrates how to pass custom configuration options to a watch plugin. The plugin path and an options object are provided as a tuple within the `watchPlugins` array, allowing users to customize plugin behavior (e.g., the trigger `key` and `prompt` text).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: [\n    [\n      'path/to/yourWatchPlugin',\n      {\n        key: 'k', // <- your custom key\n        prompt: 'show a custom prompt',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example Test File for Coverage Inclusion (JavaScript)\nDESCRIPTION: This snippet shows an example JavaScript file (`sum.t.js`) containing both source code (a `sum` function) and its corresponding test using Jest's `test` function. This file type might normally be excluded from coverage, demonstrating a use case for `forceCoverageMatch`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport function sum(a, b) {\n  return a + b;\n}\n\nif (process.env.NODE_ENV === 'test') {\n  test('sum', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter Options in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure options for the summary reporter in Jest, specifically setting the summaryThreshold option. It shows passing options to the default reporter.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Testing in JavaScript\nDESCRIPTION: Example `babel.config.js` file configuring Babel presets for a React project. It includes `@babel/preset-env` for compiling modern JavaScript and `@babel/preset-react` (with the automatic runtime) for handling JSX transformations, ensuring compatibility with the Jest test environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  presets: [\n    '@babel/preset-env',\n    ['@babel/preset-react', {runtime: 'automatic'}],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Volume Equality Test Implementation\nDESCRIPTION: Test case demonstrating the use of custom equality testers with Volume objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js';\nimport '../areVolumesEqual.js';\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.skip.each with array in JavaScript\nDESCRIPTION: Demonstrates how to use test.skip.each with an array of test cases to skip running a collection of data-driven tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntest.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotSerializers in TypeScript\nDESCRIPTION: TypeScript example of setting up custom snapshot serializers in Jest configuration to transform how certain objects appear in snapshot tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotFormat in Jest - TypeScript\nDESCRIPTION: This TypeScript Jest configuration demonstrates how to adjust snapshot output format by setting snapshotFormat. It uses ES module syntax and disables printBasicPrototype for more concise snapshots. Useful for TypeScript projects with custom snapshot requirements.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup and Teardown in Jest\nDESCRIPTION: Example implementation of global setup and teardown modules for Jest test configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  // Set reference to mongod in order to close the server during teardown.\n  globalThis.__MONGOD__ = mongod;\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  await globalThis.__MONGOD__.stop();\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Non-Default Class Exports in Jest\nDESCRIPTION: Example showing how to mock a class that is not the default export from a module. The mock must return an object with the same export name as the original module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript Sum Function\nDESCRIPTION: Defines a simple JavaScript function that adds two numbers together and exports it for use in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n----------------------------------------\n\nTITLE: Embedding 'Build a Testing Framework' Video using React LiteYouTubeEmbed (JSX)\nDESCRIPTION: This JSX snippet uses the 'LiteYouTubeEmbed' React component to embed a YouTube video (ID: B8FbUK0WpVU) that demonstrates how to build a testing framework similar to Jest from scratch. It depends on the 'react-lite-youtube-embed' package and a React setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Architecture.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed id=\"B8FbUK0WpVU\" />\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library using npm/yarn\nDESCRIPTION: Installs the `@testing-library/react` package as a development dependency. This library provides utilities for testing React components by interacting with the rendered DOM in a user-centric way.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Testing Error Snapshots with Jest's toThrowErrorMatchingSnapshot\nDESCRIPTION: Demonstrates using Jest's `.toThrowErrorMatchingSnapshot()` matcher to assert that a function (`drinkOctopus`, which wraps `drinkFlavor`) throws an error when called. Jest captures the error message and compares it to a previously stored snapshot in a `.snap` file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: js\nCODE:\n```\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Docblocks with jest-docblock in JavaScript\nDESCRIPTION: Shows how to use `parseWithComments` from `jest-docblock` to parse the header comment block (docblock) of a JavaScript code string. The output is an object containing extracted `comments` and `pragmas` (like `@flow`), which is then logged. Depends on the `jest-docblock` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Automock Option - TypeScript\nDESCRIPTION: Demonstrates how to configure Jest with automatic module mocking using a TypeScript-based config (typed with 'jest' Config). Requires TypeScript and Jest installed. The automock property is set to true to enable auto-mocking for test suites using this config. Exports the config as default.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  automock: true,\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring `snapshotFormat` in Jest (JavaScript)\nDESCRIPTION: Demonstrates configuring the `snapshotFormat` option in a JavaScript Jest config file (`.js` or `.cjs`). This option allows overriding specific formatting settings from `pretty-format`. This example sets `printBasicPrototype` to `false` to prevent snapshot output from including 'Object' or 'Array' prefixes for basic prototypes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns for pnpm Package Manager in TypeScript\nDESCRIPTION: TypeScript version of the advanced example showing how to configure transformIgnorePatterns to work with pnpm package manager, handling its unique symlink structure to correctly transform specific packages.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative path to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling with Promises\nDESCRIPTION: Shows how to test error conditions in async code using promise catch blocks and try/catch with async/await.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Testing for async errors using Promise.catch.\nit('tests error with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(2).catch(error =>\n    expect(error).toEqual({\n      error: 'User with 2 not found.',\n    }),\n  );\n});\n\n// Or using async/await.\nit('tests error with async/await', async () => {\n  expect.assertions(1);\n  try {\n    await user.getUserName(1);\n  } catch (error) {\n    expect(error).toEqual({\n      error: 'User with 1 not found.',\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Test Implementation with Full Module Mock\nDESCRIPTION: Initial attempt at testing the createUser function with a fully mocked node-fetch module, which fails due to Response being mocked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/BypassingModuleMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('node-fetch');\n\nimport fetch, {Response} from 'node-fetch';\nimport {createUser} from './createUser';\n\ntest('createUser calls fetch with the right args and returns the user id', async () => {\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\n\n  const userId = await createUser();\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {\n    method: 'POST',\n  });\n  expect(userId).toBe('4');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Advanced Coverage Reporters with Options in CommonJS JavaScript\nDESCRIPTION: This snippet demonstrates how to set custom coverage reporters in Jest, including specifying configuration options for certain reporters. 'skipFull: true' instructs the 'text' reporter to omit files that are fully covered. Config is exported via CommonJS. Requires knowledge of reporter options and a compatible Jest version.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Resetting the Module Cache with jest.resetModules (JS)\nDESCRIPTION: Illustrates the core effect of `jest.resetModules()`. Calling `require()` for the same module path before and after `jest.resetModules()` results in two distinct module instances, because the function clears Jest's internal module cache.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst sum1 = require('../sum');\njest.resetModules();\nconst sum2 = require('../sum');\nsum1 === sum2;\n// > false (Both sum modules are separate \"instances\" of the sum module.)\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Max Workers Dynamically in GitHub Actions\nDESCRIPTION: Provides a GitHub Actions workflow snippet that dynamically determines the number of available CPU cores using the `SimenB/github-actions-cpu-cores` action and passes this count to the `jest` command using the `--max-workers` flag. This optimizes Jest's parallel execution based on the runner's resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get number of CPU cores\n  id: cpu-cores\n  uses: SimenB/github-actions-cpu-cores@v2\n- name: run tests\n  run: yarn jest --max-workers ${{ steps.cpu-cores.outputs.count }}\n```\n\n----------------------------------------\n\nTITLE: Implementing One-Time Setup and Teardown with beforeAll/afterAll in Jest (JavaScript)\nDESCRIPTION: Utilizes beforeAll and afterAll to perform setup and cleanup only once for the file, useful for expensive asynchronous operations. Promises are returned from each hook, ensuring Jest waits for initialization and cleanup of the city database. Dependent on initializeCityDatabase, clearCityDatabase, and isCity implementations. Each test runs with the persistent database state.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Default and Global Fake Timers Configuration in Jest (TypeScript)\nDESCRIPTION: This snippet details configuring the fakeTimers option in Jest using TypeScript, with options like enableGlobally or doNotFake for timer APIs. Settable values mirror JavaScript configuration, using type \\'Config\\' and ESModule export. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Jest Global Variables Configuration\nDESCRIPTION: Examples of configuring global variables in Jest test environments using both JavaScript and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Test Directory Structure (Plaintext)\nDESCRIPTION: Shows a simple directory structure commonly used in Jest projects. It depicts a `__tests__` folder containing two JavaScript test files: `t1.test.js` and `t2.test.js`. This structure serves as context for examples demonstrating the `--runTestsByPath` Jest CLI option.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n__tests__\n└── t1.test.js # test\n└── t2.test.js # test\n```\n\n----------------------------------------\n\nTITLE: Jest Init Configuration\nDESCRIPTION: Command to initialize Jest configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm init jest@latest\n```\n\n----------------------------------------\n\nTITLE: Installing jest-worker using Yarn (Shell)\nDESCRIPTION: This command installs the `jest-worker` Node.js module using the Yarn package manager. This module is required to utilize the parallel task execution features described in the documentation.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add jest-worker\n```\n\n----------------------------------------\n\nTITLE: Mocking Non-Default Class Exports in Jest using JavaScript\nDESCRIPTION: Explains the syntax for `jest.mock` when mocking a class that is a named export rather than the default export. The module factory must return an object where the key matches the named export (e.g., `SoundPlayer`) and the value is the mock constructor function (`jest.fn().mockImplementation(...)`).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.not.stringContaining() in Jest\nDESCRIPTION: Shows how to use `expect.not.stringContaining(string)` in Jest. This assertion verifies that the received string ('How are you?') does *not* contain the specified substring ('Hello world!').\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_48\n\nLANGUAGE: js\nCODE:\n```\ndescribe('not.stringContaining', () => {\n  const expected = 'Hello world!';\n\n  it('matches if the received value does not contain the expected substring', () => {\n    expect('How are you?').toEqual(expect.not.stringContaining(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Resource Dependency Using Multiple beforeEach/afterEach in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates the order of execution for multiple beforeEach and afterEach hooks in Jest. It is designed to set up and tear down related resources where the setup is order-dependent, such as connection and database. Output logs document the exact lifecycle for both file-level and describe-scoped hooks, which is important for managing stateful resources across test suites.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SetupAndTeardown.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeEach(() => console.log('connection setup'));\nbeforeEach(() => console.log('database setup'));\n\nafterEach(() => console.log('database teardown'));\nafterEach(() => console.log('connection teardown'));\n\ntest('test 1', () => console.log('test 1'));\n\ndescribe('extra', () => {\n  beforeEach(() => console.log('extra database setup'));\n  afterEach(() => console.log('extra database teardown'));\n\n  test('test 2', () => console.log('test 2'));\n});\n\n// connection setup\n// database setup\n// test 1\n// database teardown\n// connection teardown\n\n// connection setup\n// database setup\n// extra database setup\n// test 2\n// extra database teardown\n// database teardown\n// connection teardown\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Nth Call Arguments with `expect().toHaveBeenNthCalledWith()` in Jest (JavaScript)\nDESCRIPTION: Illustrates using `jest.fn()` for mocking and the `.toHaveBeenNthCalledWith()` matcher (alias `.nthCalledWith()`) to assert the arguments passed during a specific call (indexed from 1) to the mock function (`drink`). This example checks the arguments for the first (`1`, 'lemon') and second (`2`, 'octopus') calls. Requires Jest environment and `jest.fn()`. Assumes `drinkEach` function exists.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenNthCalledWith(1, 'lemon');\n  expect(drink).toHaveBeenNthCalledWith(2, 'octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform with Multiple Transformers in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to configure multiple transformers in Jest, including the default babel-jest transformer alongside a custom CSS transformer with proper type definitions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_98\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Path and Global Coverage Thresholds in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet configures Jest to enforce global, directory, glob, and file-specific coverage thresholds. Each path's thresholds are checked independently, enabling strict coverage enforcement for critical modules. Requires Jest type definitions and a TypeScript-compatible config. Fails tests if any specified threshold is missed.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  coverageThreshold: {\\n    global: {\\n      branches: 50,\\n      functions: 50,\\n      lines: 50,\\n      statements: 50,\\n    },\\n    './src/components/': {\\n      branches: 40,\\n      statements: 40,\\n    },\\n    './src/reducers/**/*.js': {\\n      statements: 90,\\n    },\\n    './src/api/very-important-module.js': {\\n      branches: 100,\\n      functions: 100,\\n      lines: 100,\\n      statements: 100,\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Function Calls with .toHaveBeenCalled in Jest JavaScript Tests\nDESCRIPTION: This snippet shows how to use `.toHaveBeenCalled` (or its alias `.toBeCalled`) to verify that a Jest mock function (`jest.fn()`) was executed at least once. It tests a `drinkAll` function, ensuring the callback `drink` is called when the flavor is not 'octopus'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('drinks something lemon-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('does not drink something octopus-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.concurrent for Parallel Tests in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 16.0.0, `test.concurrent` (or `it.concurrent`) allows running asynchronous tests concurrently, potentially speeding up test suites. Jest 18.0.0 fixed issues related to unhandled promise rejections with this feature and ensured it works with `--testNamePattern`.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Coverage Thresholds in Jest (TypeScript)\nDESCRIPTION: Provides a typed example (using `Config` from 'jest') of setting distinct coverage thresholds for specific directories, files, and glob patterns, complementing the global thresholds in a Jest configuration (ES Module). Coverage data for these specific paths is handled separately from the global coverage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Parameterized Testing with jest-each\nDESCRIPTION: Shows how to use jest-each with asynchronous tests that utilize the done callback pattern.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\neach([['hello'], ['mr'], ['spy']]).test(\n  'gives 007 secret message: %s',\n  (str, done) => {\n    const asynchronousSpy = message => {\n      expect(message).toBe(str);\n      done();\n    };\n    callSomeAsynchronousFunction(asynchronousSpy)(str);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Tests with test.skip.each in JavaScript\nDESCRIPTION: Shows how to use test.skip.each to skip multiple data-driven tests. Two syntaxes are presented: array-based and template literal-based.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ntest.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Jest Object in ESM Tests (JavaScript)\nDESCRIPTION: Shows two ways to access the `jest` global object within ECMAScript Modules (ESM) tests: either by importing it directly from the `@jest/globals` module or by using the `import.meta.jest` property. This is necessary because Jest does not automatically inject the `jest` variable into the global scope in ESM environments as it does in CommonJS.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ECMAScriptModules.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.useFakeTimers();\n\n// etc.\n\n// alternatively\nimport.meta.jest.useFakeTimers();\n\n// jest === import.meta.jest => true\n```\n\n----------------------------------------\n\nTITLE: Custom Puppeteer Test Environment (JavaScript)\nDESCRIPTION: Implements a custom Jest test environment (`puppeteer_environment.js`) that extends `NodeEnvironment`. In its `setup` method, it reads the Puppeteer WebSocket endpoint from the temporary file (created by `setup.js`), connects to the browser instance, and exposes it globally within the test environment as `this.global.__BROWSER_GLOBAL__`. The `teardown` method disconnects from the browser.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// puppeteer_environment.js\nconst {readFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nclass PuppeteerEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config);\n  }\n\n  async setup() {\n    await super.setup();\n    // get the wsEndpoint\n    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');\n    if (!wsEndpoint) {\n      throw new Error('wsEndpoint not found');\n    }\n\n    // connect to puppeteer\n    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({\n      browserWSEndpoint: wsEndpoint,\n    });\n  }\n\n  async teardown() {\n    if (this.global.__BROWSER_GLOBAL__) {\n      this.global.__BROWSER_GLOBAL__.disconnect();\n    }\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n}\n\nmodule.exports = PuppeteerEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Checking for NaN Values with toBeNaN in Jest\nDESCRIPTION: Demonstrates using the toBeNaN matcher to check if a value is NaN (Not a Number). This is useful when testing numeric operations that might result in NaN.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntest('passes when value is NaN', () => {\n  expect(NaN).toBeNaN();\n  expect(1).not.toBeNaN();\n});\n```\n\n----------------------------------------\n\nTITLE: Focusing a Single Test with Only Modifier in Jest (JavaScript)\nDESCRIPTION: Utilizes `test.only` to focus the execution on a chosen test, skipping all others in the same suite. This is particularly useful for debugging or investigating a specific scenario. Test functions can include asynchronous or synchronous code, and a timeout can be supplied optionally. Requires Jest; recommended to remove `.only` before committing code to source control.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring workerIdleMemoryLimit in Jest (JavaScript)\nDESCRIPTION: Configuration for workerIdleMemoryLimit to control memory usage of Jest worker processes. This helps prevent memory leaks by recycling workers that exceed the specified memory limit.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Testing with Property Replacement using Jest in JavaScript\nDESCRIPTION: Shows how to test the `utils` module by using `jest.replaceProperty` to modify `process.env.HOSTNAME` for different test cases. It also demonstrates using `jest.restoreAllMocks` within an `afterEach` hook to clean up the replaced property after each test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst utils = require('./utils');\n\nafterEach(() => {\n  // restore replaced property\n  jest.restoreAllMocks();\n});\n\ntest('isLocalhost returns true when HOSTNAME is localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n  expect(utils.isLocalhost()).toBe(true);\n});\n\ntest('isLocalhost returns false when HOSTNAME is not localhost', () => {\n  jest.replaceProperty(process, 'env', {HOSTNAME: 'not-localhost'});\n  expect(utils.isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.each with Template Literal (Uniform Types) in TypeScript (Jest)\nDESCRIPTION: Shows `test.each` using the template literal syntax in TypeScript when all interpolated values in the table have the same type. In this scenario, TypeScript correctly infers the types of the destructured arguments in the test function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n```\n\n----------------------------------------\n\nTITLE: Testing jQuery DOM Interaction with Jest in JavaScript\nDESCRIPTION: This Jest test suite verifies the functionality of the 'displayUser.js' module. It mocks the `fetchCurrentUser` dependency to avoid actual network requests, sets up a simulated DOM using `document.body.innerHTML`, requires the module under test (which has side effects), simulates a button click using jQuery, and then asserts that the mock function was called and the DOM was updated as expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialjQuery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\njest.mock('../fetchCurrentUser');\n\ntest('displays a user after a click', () => {\n  // Set up our document body\n  document.body.innerHTML =\n    '<div>' +\n    '  <span id=\"username\" />' +\n    '  <button id=\"button\" />' +\n    '</div>';\n\n  // This module has a side-effect\n  require('../displayUser');\n\n  const $ = require('jquery');\n  const fetchCurrentUser = require('../fetchCurrentUser');\n\n  // Tell the fetchCurrentUser mock function to automatically invoke\n  // its callback with some data\n  fetchCurrentUser.mockImplementation(cb => {\n    cb({\n      fullName: 'Johnny Cash',\n      loggedIn: true,\n    });\n  });\n\n  // Use jquery to emulate a click on our button\n  $('#button').click();\n\n  // Assert that the fetchCurrentUser function was called, and that the\n  // #username span's inner text was updated as we'd expect it to.\n  expect(fetchCurrentUser).toHaveBeenCalled();\n  expect($('#username').text()).toBe('Johnny Cash - Logged In');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Projects using Paths/Globs in TypeScript\nDESCRIPTION: Illustrates setting the `projects` option in a Jest TypeScript configuration using an array of strings (paths or glob patterns) and the `Config` type. This enables Jest to run tests for multiple projects simultaneously. Uses `<rootDir>` for relative paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_58\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing ts-jest for TypeScript Testing\nDESCRIPTION: Command to install ts-jest, a TypeScript preprocessor with source map support for Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev ts-jest\n```\n\n----------------------------------------\n\nTITLE: Writing MongoDB Tests with Jest\nDESCRIPTION: A sample Jest test script demonstrating how to connect to MongoDB, insert a document, and verify the insertion. It includes setup and teardown functions for database connection management.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MongoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {MongoClient} = require('mongodb');\n\ndescribe('insert', () => {\n  let connection;\n  let db;\n\n  beforeAll(async () => {\n    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    db = await connection.db(globalThis.__MONGO_DB_NAME__);\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  it('should insert a doc into collection', async () => {\n    const users = db.collection('users');\n\n    const mockUser = {_id: 'some-user-id', name: 'John'};\n    await users.insertOne(mockUser);\n\n    const insertedUser = await users.findOne({_id: 'some-user-id'});\n    expect(insertedUser).toEqual(mockUser);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Test Runner Interface in TypeScript\nDESCRIPTION: The function signature for a custom test runner in Jest. The function must accept globalConfig, config, environment, runtime, and testPath parameters and return a Promise of TestResult.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_73\n\nLANGUAGE: ts\nCODE:\n```\nfunction testRunner(\n  globalConfig: GlobalConfig,\n  config: ProjectConfig,\n  environment: Environment,\n  runtime: Runtime,\n  testPath: string,\n): Promise<TestResult>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Custom Transformers and identity-obj-proxy (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up jest.config.js to handle style imports using 'identity-obj-proxy' and asset imports using a custom-written fileTransformer.js module. The transform option matches asset files and tells Jest to process them using the given transformer, while leaving CSS modules to be handled by identity-obj-proxy.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Jest Worker Threads Configuration\nDESCRIPTION: Example of using the new workerThreads configuration option to enable worker threads for test parallelization.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  workerThreads: true // Enable worker threads for test parallelization\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Inline Snapshot Matcher 'toMatchTrimmedInlineSnapshot'\nDESCRIPTION: Shows how to create a custom Jest inline snapshot matcher `.toMatchTrimmedInlineSnapshot()` using `expect.extend`. It leverages `toMatchInlineSnapshot` from `jest-snapshot`, passing a modified (sliced) value. Note that custom arguments are limited due to how inline snapshots are updated. An example usage and the resulting code with the inline snapshot are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.slice(0, 10), ...rest);\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotSerializers in Jest - TypeScript\nDESCRIPTION: This TypeScript Jest configuration sets snapshotSerializers to point to a custom serializer module. Using ES module syntax and type-imports for strict typing, it is suitable for TypeScript projects utilizing customized snapshot serialization.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Testing with Automatic Mocking Enabled (JavaScript)\nDESCRIPTION: A Jest test suite (`__tests__/automock.test.js`) demonstrating the behavior when the `automock: true` configuration option is set. It imports the `utils` module, verifies that its methods are automatically replaced with mock functions (`jest.fn()`), and shows how to provide custom mock implementations or return values using `.mockReturnValue()`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"__tests__/automock.test.js\"\nimport utils from '../utils';\n\ntest('if utils mocked automatically', () => {\n  // Public methods of `utils` are now mock functions\n  expect(utils.authorize.mock).toBeTruthy();\n  expect(utils.isAuthorized.mock).toBeTruthy();\n\n  // You can provide them with your own implementation\n  // or pass the expected return value\n  utils.authorize.mockReturnValue('mocked_token');\n  utils.isAuthorized.mockReturnValue(true);\n\n  expect(utils.authorize()).toBe('mocked_token');\n  expect(utils.isAuthorized('not_wizard')).toBeTruthy();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects in Jest\nDESCRIPTION: Configuration for running tests across multiple projects simultaneously, including support for different runners and ESLint integration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nexport default config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions in Jest - JavaScript\nDESCRIPTION: These snippets demonstrate using .toMatch matcher in Jest to assert that a string satisfies a regular expression or contains a substring. It supports both RegExp and string patterns. essayOnTheBestFlavor() should return a string. Dependencies: Jest. Key parameter: the pattern to match against. Inputs are string values; outputs are test results for string pattern presence.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\ndescribe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n```\n\nLANGUAGE: js\nCODE:\n```\ndescribe('grapefruits are healthy', () => {\n  test('grapefruits are a fruit', () => {\n    expect('grapefruits').toMatch('fruit');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `moduleDirectories` in Jest (JavaScript)\nDESCRIPTION: Configures the `moduleDirectories` option in `jest.config.js` to specify directories Jest should search recursively for modules. This example overrides the default `['node_modules']` to include both `node_modules` and `bower_components`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Enabling Fake Timers Globally in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration for enabling Jest's fake timers globally across all test files. This eliminates the need to call jest.useFakeTimers() in individual test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Manual Puppeteer Setup (JavaScript)\nDESCRIPTION: Configures Jest in `jest.config.js` to use the custom manual setup. It specifies the paths to the `globalSetup`, `globalTeardown`, and `testEnvironment` scripts created in the previous steps.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  globalSetup: './setup.js',\n  globalTeardown: './teardown.js',\n  testEnvironment: './puppeteer_environment.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Sum Function - JavaScript\nDESCRIPTION: Defines a simple JavaScript function 'sum' that takes two arguments and returns their sum. This function is exported using CommonJS module.exports syntax, making it accessible for import in test or other code files. No external dependencies are required; inputs are two numbers and the output is their sum.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n----------------------------------------\n\nTITLE: Sample Output for testLocationInResults in Jest - JSON\nDESCRIPTION: Shows the structure of a location object as included in Jest test results when the --testLocationInResults flag is used. No external dependencies are required; the field is present in the output JSON. Key parameters are 'column' (0-indexed) and 'line' (1-indexed), which provide positional metadata for tests. The input is automatic from Jest's internal test parsing; output is the enhanced JSON result object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"column\": 4,\n  \"line\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Display Name for Multi-Project Repos (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the displayName property in a Jest configuration for individual projects in a multi-project repository. The displayName can be a string or an object containing name and color (uses chalk color names). The label appears alongside test run logs. Exports the configuration as CommonJS.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: 'CLIENT',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Property Replacement with jest.Replaced<Source> in TypeScript\nDESCRIPTION: Illustrates how to use jest.Replaced<Source> utility type for type-safe property replacement in tests. This is useful for mocking environment variables or other global properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.todo in JavaScript\nDESCRIPTION: Demonstrates the use of test.todo for planning future tests. This method highlights tests that still need to be implemented in the summary output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Formatting in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure Jest to disable printing of basic prototypes for objects and arrays in snapshot formatting.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module for Jest Property Replacement - JavaScript\nDESCRIPTION: Provides a helper utility for environment-based checks, designed to be required and tested with property replacement mocking in Jest. No dependencies aside from Node.js process.env and modular exports. Inputs: process.env.HOSTNAME. Outputs: Boolean indicating localhost environment. Can be combined with jest.replaceProperty for controlled test isolation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst utils = {\n  isLocalhost() {\n    return process.env.HOSTNAME === 'localhost';\n  },\n};\n\nmodule.exports = utils;\n```\n\n----------------------------------------\n\nTITLE: Using expect.closeTo() for Floating-Point Comparisons in Jest Objects\nDESCRIPTION: Shows how to use `expect.closeTo(number, numDigits?)` within an object assertion (`toEqual`) in Jest. It compares a floating-point number property (`sum`) against an expected value (0.3) with a specified precision (5 decimal places), avoiding potential issues with floating-point arithmetic inaccuracies.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_45\n\nLANGUAGE: js\nCODE:\n```\ntest('compare float in object properties', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Snapshot Tests for React Components with Jest\nDESCRIPTION: Example test file (Link.test.js) demonstrating how to write snapshot tests for React components using Jest and react-test-renderer.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('changes the class when hovered', () => {\n  const component = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>,\n  );\n  let tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseEnter();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseLeave();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage of test.each with Template Literals\nDESCRIPTION: Shows how to use test.each with template literals in TypeScript, including cases where generic type arguments are necessary for correct type inference.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.stringMatching() in Jest Assertions (JavaScript)\nDESCRIPTION: Demonstrates how to use expect.stringMatching() to match strings against patterns or regular expressions. It shows an example of using it within expect.arrayContaining() to match array elements against string patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: ReferenceError Due to Hoisting with mock Implementation - JavaScript\nDESCRIPTION: Illustrates another Jest anti-pattern: defining a mockSoundPlayer variable that is accessed before initialization because it is not wrapped in a factory function. Even though the variable starts with mock, improper structure leads to a ReferenceError at runtime. This should not be used as an example for working mock code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// results in a ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n```\n\n----------------------------------------\n\nTITLE: Making a mock return a fixed value - Jest - JavaScript\nDESCRIPTION: Shows the shorthand for configuring a Jest mock to return a specific value when called, using mockReturnValue. Eliminates boilerplate for simple value-returning mocks and simplifies asserting fixed outcomes in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.fn().mockImplementation(() => value);\n```\n\n----------------------------------------\n\nTITLE: Style Mock Implementation for Jest\nDESCRIPTION: A simple mock file for CSS/styling that exports an empty object. This is used with the moduleNameMapper configuration to handle style imports in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Dependency Extractor for Jest (JavaScript)\nDESCRIPTION: This CommonJS JavaScript module defines a custom dependency extractor for Jest by exporting an object with 'extract' and 'getCacheKey' methods. It uses Node.js built-in 'fs' and 'crypto' modules. The extractor scans code for dependencies and creates a cache key using an MD5 digest of the module file. Place this as a standalone Node module and reference from Jest's 'dependencyExtractor' config property.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst crypto = require('crypto');\\nconst fs = require('fs');\\n\\nmodule.exports = {\\n  extract(code, filePath, defaultExtract) {\\n    const deps = defaultExtract(code, filePath);\\n    // Scan the file and add dependencies in `deps` (which is a `Set`)\\n    return deps;\\n  },\\n  getCacheKey() {\\n    return crypto\\n      .createHash('md5')\\n      .update(fs.readFileSync(__filename))\\n      .digest('hex');\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions in Jest\nDESCRIPTION: Shows how to use the toMatch matcher to check strings against regular expressions in Jest. It includes examples of both positive and negative matches.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UsingMatchers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transformer with Babel Support for Jest\nDESCRIPTION: Example of creating a custom transformer using babel-jest for advanced Jest configuration with custom Babel presets.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst babelJest = require('babel-jest');\n\nmodule.exports = babelJest.createTransformer({\n  presets: ['my-custom-preset'],\n});\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for 'toBeWithinRange' Matcher - TypeScript\nDESCRIPTION: Provides a .d.ts TypeScript module augmentation for expect, enabling type support and autocompletion for the custom matcher toBeWithinRange. This declaration can be placed in a declaration file and must be a valid module. Inputs: floor and ceiling numbers. Output: type-annotated matcher signatures for Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_54\n\nLANGUAGE: ts\nCODE:\n```\n// optionally add a type declaration, e.g. it enables autocompletion in IDEs\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\nexport {};\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Snapshot Serializer in Jest\nDESCRIPTION: Shows how to add a custom snapshot serializer module to individual test files using expect.addSnapshotSerializer(). This allows formatting of application-specific data structures for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affects expect(value).toMatchSnapshot() assertions in the test file\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot Output - JavaScript\nDESCRIPTION: Provides the auto-generated Jest snapshot output for a Link component's hover states. Each exported block reflects the rendered HTML (with React props and function handlers) for a test case sequence (normal, hovered, normal). Used by Jest to verify the component's rendered structure and props remain unchanged unless a snapshot update is intended.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`changes the class when hovered 1`] = `\\n<a\\n  className=\\\"normal\\\"\\n  href=\\\"http://www.facebook.com\\\"\\n  onMouseEnter={[Function]}\\n  onMouseLeave={[Function]}\\n>\\n  Facebook\\n</a>\\n`;\n\nexports[`changes the class when hovered 2`] = `\\n<a\\n  className=\\\"hovered\\\"\\n  href=\\\"http://www.facebook.com\\\"\\n  onMouseEnter={[Function]}\\n  onMouseLeave={[Function]}\\n>\\n  Facebook\\n</a>\\n`;\n\nexports[`changes the class when hovered 3`] = `\\n<a\\n  className=\\\"normal\\\"\\n  href=\\\"http://www.facebook.com\\\"\\n  onMouseEnter={[Function]}\\n  onMouseLeave={[Function]}\\n>\\n  Facebook\\n</a>\\n`;\n\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Test Suites with describe.skip.each Template Table in Jest (JavaScript)\nDESCRIPTION: This code uses describe.skip.each with a tagged template to skip running a set of data-driven tests. The provided function will not be executed for each data case. A single test outside the skipped block will execute as usual. This is ideal for turning off entire parameterized suites temporarily, with the only dependency being Jest and the table populated as in other each examples. Only own properties can be injected in test titles.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('will not be run', () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration for Jest in JSON\nDESCRIPTION: This `.babelrc` file snippet shows a minimal Babel configuration. It specifies the `@babel/preset-env` preset, which enables transformations for modern JavaScript syntax, necessary for running tests with Jest in projects using such features.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in Jest Configuration\nDESCRIPTION: Demonstrates how to set up moduleNameMapper to stub out resources like images or styles with a single module. The configuration maps regex patterns to module names or arrays of module names, with support for rootDir tokens and regex capture groups.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Timer-Based Function in JavaScript (Context for Advance Timers)\nDESCRIPTION: This snippet re-shows the `timerGame` function, which uses `setTimeout` to delay an action. It serves as context for the subsequent test example demonstrating `jest.advanceTimersByTime()`. The function logs messages and executes an optional callback after 1000ms.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use jest-circus via CLI (Bash)\nDESCRIPTION: Command-line instruction to run Jest with jest-circus as the test runner using the --testRunner option.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-circus/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest --testRunner='jest-circus/runner'\n```\n\n----------------------------------------\n\nTITLE: Using a Spied Date.now() in Jest Tests with TypeScript\nDESCRIPTION: Demonstrates how to use the 'setDateNow' utility function in a test environment. It shows how to reset the spy after each test and verify its usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1_482_363_367_071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use a Custom File Asset Transformer in JavaScript\nDESCRIPTION: Demonstrates how to configure Jest (via a JavaScript config file) to apply a custom transformer module for specific file extensions typically associated with media assets. This configuration ensures that when asset files matching the provided regex pattern are imported, the specified transformer (such as fileTransformer.js) is invoked to handle the transformation. Useful for seamless testing when JavaScript code imports resource files that Jest otherwise cannot process directly. Entry assumes that fileTransformer.js exists and is accessible under the runtime root directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CodeTransformation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\\n  transform: {\\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\\n      '<rootDir>/fileTransformer.js',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Example Error for Unresolved Promises in Jest (Bash)\nDESCRIPTION: Shows a typical timeout error message emitted by Jest when an asynchronous operation within a test, such as a Promise, fails to resolve or reject within the specified time limit (controlled by `jasmine.DEFAULT_TIMEOUT_INTERVAL` or `jest.setTimeout`). This often indicates issues with Promise implementations or long-running operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n- Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n```\n\n----------------------------------------\n\nTITLE: Using jest.doMock with ES6 Dynamic Imports in JavaScript\nDESCRIPTION: Illustrates how to use `jest.doMock` with ES6 modules by leveraging dynamic `import()`. This approach requires setting `__esModule: true` in the mock factory and an environment configured for dynamic imports (e.g., using `babel-plugin-dynamic-import-node`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default1',\n      foo: 'foo1',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default1');\n    expect(moduleName.foo).toBe('foo1');\n  });\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default2',\n      foo: 'foo2',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default2');\n    expect(moduleName.foo).toBe('foo2');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotFormat in JavaScript\nDESCRIPTION: Example of customizing snapshot formatting options in Jest configuration to avoid printing the basic prototype for Objects and Arrays in snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Generating Jest Configuration File\nDESCRIPTION: Command to initialize a basic Jest configuration file by answering questions about your project.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest --init\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Test Example\nDESCRIPTION: This code snippet demonstrates a Jest snapshot test that verifies the formatting of an object with nested arrays, using the custom snapshot format configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\ntest('does not show prototypes for object and array inline', () => {\n  const object = {\n    array: [{hello: 'Danger'}],\n  };\n  expect(object).toMatchInlineSnapshot(`\n    {\n      \"array\": [\n        {\n          \"hello\": \"Danger\",\n        },\n      ],\n    }\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Tests with test.skip.each (Array Syntax) in Jest (JavaScript)\nDESCRIPTION: Shows how to skip a collection of data-driven tests using `test.skip.each` with the array of arrays syntax. Each inner array represents a test case's arguments. This prevents the execution of all tests defined within this block. Aliases include `it.skip.each`, `xit.each`, and `xtest.each`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\ntest.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB DocumentClient for Test Environment (JavaScript)\nDESCRIPTION: Initializes the AWS DynamoDB DocumentClient for use in tests, configuring it to connect to the local DynamoDB instance when tests are running, and using production defaults otherwise. Relies on environment detection with process.env.JEST_WORKER_ID and requires the aws-sdk package. The configuration enables features like local endpoint targeting, SSL disabling, and region selection for isolated testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/DynamoDB.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');\n\nconst isTest = process.env.JEST_WORKER_ID;\nconst config = {\n  convertEmptyValues: true,\n  ...(isTest && {\n    endpoint: 'localhost:8000',\n    sslEnabled: false,\n    region: 'local-env',\n  }),\n};\n\nconst ddb = new DocumentClient(config);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Function Usage with Module Factory Functions in Jest\nDESCRIPTION: This example demonstrates why arrow functions cannot be used as constructor functions in module factory mocks. Arrow functions cannot be invoked with the 'new' keyword in JavaScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return () => {\n    // Does not work; arrow functions can't be called with new\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resolver in Jest Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure Jest to use a custom resolver by specifying the path to the resolver file in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Example Output of Custom Jest 'toBe' Matcher Failure\nDESCRIPTION: Shows an example console output generated by the custom 'toBe' matcher when an assertion fails. It clearly displays the matcher hint, the expected value, and the received value, formatted using `jest-matcher-utils`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n  expect(received).toBe(expected)\n\n    Expected value to be (using Object.is):\n      \"banana\"\n    Received:\n      \"apple\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring `modulePaths` in Jest (JavaScript)\nDESCRIPTION: Configures the `modulePaths` option in `jest.config.js`. This provides an alternative to the `NODE_PATH` environment variable, adding absolute paths (here, relative to `<rootDir>`) for Jest to search when resolving modules. The example adds the `<rootDir>/app/` directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals and Using Fake Timers - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to manually import Jest global APIs from '@jest/globals' when the injectGlobals configuration is disabled. It demonstrates importing the expect, jest, and test objects, enabling fake timers, and defining a simple test case that asserts the Date.now returns 0. The code should be added to a test file and is intended for use in projects configuring jest-circus without global injection. Input: none. Output: runs a test with fake timers enabled. No special limitations except requiring Jest 27+ and using the jest-circus test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration in JavaScript\nDESCRIPTION: Shows how to import Jest's default configuration settings from `jest-config` using `require` and extend them within a `jest.config.js` file. This example adds 'mts' and 'cts' to the default list of `moduleFileExtensions`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst {defaults} = require('jest-config');\n\n/** @type {import('jest').Config} */\nconst config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts', 'cts'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Snapshot Resolver in JavaScript for Jest\nDESCRIPTION: Shows a JavaScript module (`custom-resolver.js`) exporting functions required for a custom Jest snapshot resolver. It includes `resolveSnapshotPath` (maps test file path to snapshot path), `resolveTestPath` (maps snapshot path back to test file path), and `testPathForConsistencyCheck` (an example path used by Jest to verify the resolver's logic). This allows customizing snapshot file locations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // resolves from test to snapshot path\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('__tests__', '__snapshots__') + snapshotExtension,\n\n  // resolves from snapshot to test path\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    snapshotFilePath\n      .replace('__snapshots__', '__tests__')\n      .slice(0, -snapshotExtension.length),\n\n  // Example test path, used for preflight consistency check of the implementation above\n  testPathForConsistencyCheck: 'some/__tests__/example.test.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Utility Module for Jest Automock Testing\nDESCRIPTION: Example utility module that would be automatically mocked when using Jest's automock option. This module exports authorization-related functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  authorize: () => 'token',\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Installing identity-obj-proxy for CSS Modules\nDESCRIPTION: Command to install identity-obj-proxy, which is used to mock CSS Modules in Jest tests. This package helps with className lookups during tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev identity-obj-proxy\n```\n\n----------------------------------------\n\nTITLE: Manual Mock for API Request Module - JavaScript\nDESCRIPTION: Provides a manual mock for the 'request.js' module, simulating in-memory responses to avoid real network calls during tests. Uses a predefined 'users' object keyed by ID; resolves with user data if found or rejects with an error if not. Accepts a 'url' parameter, expects URLs of the form '/users/:id', and uses process.nextTick for asynchronous simulation. No external dependencies required except Node.js process object for async behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialAsync.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst users = {\\n  4: {name: 'Mark'},\\n  5: {name: 'Paul'},\\n};\\n\\nexport default function request(url) {\\n  return new Promise((resolve, reject) => {\\n    const userID = parseInt(url.slice('/users/'.length), 10);\\n    process.nextTick(() =>\\n      users[userID]\\n        ? resolve(users[userID])\\n        : reject({\\n            error: \\`User with \\${userID} not found.\\`,\\n          }),\\n    );\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Jest Timeout Error Message\nDESCRIPTION: Shows an example error message thrown by Jest when an asynchronous callback, often involving a Promise, does not complete within the configured timeout period (`jasmine.DEFAULT_TIMEOUT_INTERVAL`). This typically indicates an unresolved promise or a test that takes longer than allowed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n- Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Module Rules and Resolvers in JavaScript\nDESCRIPTION: Defines a webpack configuration with module rules for handling JavaScript, CSS, GIF, fonts, and image assets. Establishes aliases and module resolution paths commonly used in complex frontend projects. This setup requires webpack and associated loaders (babel-loader, style-loader, css-loader). The config is exported via CommonJS and expects supporting files and directory structure as referenced in rules and aliases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: \\/\\.jsx?$/,\n        exclude: ['node_modules'],\n        use: ['babel-loader'],\n      },\n      {\n        test: \\/\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: \\/\\.gif$/,\n        type: 'asset/inline',\n      },\n      {\n        test: \\/\\.(ttf|eot|svg)$/,\n        type: 'asset/resource',\n      },\n    ],\n  },\n  resolve: {\n    alias: {\n      config$: './configs/app-config.js',\n      react: './vendor/react-master',\n    },\n    extensions: ['.js', '.jsx'],\n    modules: [\n      'node_modules',\n      'bower_components',\n      'shared',\n      '/shared/vendor/modules',\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Custom Inline Snapshot Matcher in JavaScript\nDESCRIPTION: Implementation of an async custom inline snapshot matcher that captures error context before awaiting. This example shows how to avoid the 'Multiple inline snapshots for the same call' error when using async operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // The error (and its stacktrace) must be created before any `await`\n    this.error = new Error();\n\n    // The implementation of `observe` doesn't matter.\n    // It only matters that the custom snapshot matcher is async.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observes something', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Using toContainEqual Matcher in Jest (JavaScript)\nDESCRIPTION: Added in Jest 16.0.0, the `.toContainEqual(item)` matcher asserts that an item with the same structure and values (deep equality) exists within an array. Unlike `.toContain`, it performs a deep comparison for objects and arrays.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntoContainEqual\n```\n\n----------------------------------------\n\nTITLE: Skipping Concurrent Data-Driven Tests with Tagged Template Literals (Jest, JavaScript)\nDESCRIPTION: Illustrates skipping a series of concurrent parameterized tests defined as a tagged template table using `test.concurrent.skip.each` in Jest. These tests do not execute, but the other included test does. Commonly used to disable problematic or broken data-driven tests. Inputs are mapped by key for each row, and the test body is not invoked for the skipped cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters for GitHub Actions in TypeScript\nDESCRIPTION: Sets up Jest reporters in TypeScript (using `Config` type) for GitHub Actions integration. It includes the `github-actions` reporter (configured with options like `silent: false`) and the `summary` reporter. This setup annotates failures and organizes logs within the GitHub Actions UI.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_66\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Custom Puppeteer Global Setup for Jest\nDESCRIPTION: A global setup script for Jest that launches Puppeteer and stores the browser instance and WebSocket endpoint for use in test environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {mkdir, writeFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nmodule.exports = async function () {\n  const browser = await puppeteer.launch();\n  // store the browser instance so we can teardown it later\n  // this global is only available in the teardown but not in TestEnvironments\n  globalThis.__BROWSER_GLOBAL__ = browser;\n\n  // use the file system to expose the wsEndpoint for TestEnvironments\n  await mkdir(DIR, {recursive: true});\n  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Timer Game Function in JavaScript\nDESCRIPTION: A simple function that uses setTimeout to execute a callback after 1 second. This demonstrates a typical use case for timer functionality that needs to be tested.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\n----------------------------------------\n\nTITLE: Defining webpack Configuration in JavaScript\nDESCRIPTION: Example webpack configuration file showing module rules, resolve options, and aliases.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: ['node_modules'],\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.gif$/,\n        type: 'asset/inline',\n      },\n      {\n        test: /\\.(ttf|eot|svg)$/,\n        type: 'asset/resource',\n      },\n    ],\n  },\n  resolve: {\n    alias: {\n      config$: './configs/app-config.js',\n      react: './vendor/react-master',\n    },\n    extensions: ['.js', '.jsx'],\n    modules: [\n      'node_modules',\n      'bower_components',\n      'shared',\n      '/shared/vendor/modules',\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform with Multiple Transformers in Jest (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to configure multiple transformers in Jest, including the default babel-jest transformer alongside a custom CSS transformer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_97\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Formatting JavaScript Values with pretty-format\nDESCRIPTION: Shows how to use the `format` function (aliased as `prettyFormat`) from the `pretty-format` package to generate a human-readable string representation of a complex JavaScript value. The example includes an object with circular references, Symbols, a Map, and special numeric values like -0, Infinity, and NaN. The formatted output is logged. Depends on the `pretty-format` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```\n\n----------------------------------------\n\nTITLE: Using .toMatchObject Matcher in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 18.0.0, the `.toMatchObject(object)` matcher asserts that an object matches a subset of the properties of the received object. It recursively matches properties, including nested objects and arrays, and ignores properties not present in the expected subset.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n.toMatchObject\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Less Than or Equal To Expected with Jest in JavaScript\nDESCRIPTION: Illustrates the `.toBeLessThanOrEqual()` matcher in Jest, used to verify if a received number or bigint value is less than or equal to an expected value (`received <= expected`). The example asserts that `ouncesPerCan()` returns at most 12.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\ntest('ounces per can is at most 12', () => {\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.concurrent.each with Tagged Template Literals in JavaScript\nDESCRIPTION: Example of using test.concurrent.each with tagged template literals to run data-driven tests concurrently with table-like test data. Each row of the table becomes a separate concurrent test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Coverage Thresholds in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet configures global code coverage thresholds for branches, functions, lines, and statements in Jest. Negative thresholds (e.g., -10) permit up to that many uncovered entities. Place it in a TypeScript Jest config with correct type imports, and Jest will fail if coverage requirements are not met.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  coverageThreshold: {\\n    global: {\\n      branches: 80,\\n      functions: 80,\\n      lines: 80,\\n      statements: -10,\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Order of Hook and Test Execution in Jest - JavaScript\nDESCRIPTION: Provides a logging example to illustrate the order in which beforeAll, beforeEach, afterEach, afterAll, and test blocks are executed at global and nested describe scope. Useful for understanding execution order when combining multiple layers of test setup and teardown. Assumes a Node.js/Jest environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\n\ntest('', () => console.log('1 - test'));\n\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n----------------------------------------\n\nTITLE: Using `.mockReturnThis()` for Chainable Mock Methods in JavaScript\nDESCRIPTION: Demonstrates the `.mockReturnThis()` convenience method available on Jest mock functions. It simplifies mocking methods that need to return `this` to support method chaining, showing it's equivalent to `jest.fn(function() { return this; })`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObj = {\n  myMethod: jest.fn().mockReturnThis(),\n};\n\n// is the same as\n\nconst otherObj = {\n  myMethod: jest.fn(function () {\n    return this;\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring `maxWorkers` as Percentage in Jest (TypeScript)\nDESCRIPTION: Sets the `maxWorkers` configuration option in a Jest configuration file (`jest.config.ts`) to use 50% of available CPU cores using TypeScript. This ensures type safety and allows dynamic adjustment based on the environment's resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  maxWorkers: '50%',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Range Matcher in TypeScript\nDESCRIPTION: TypeScript version of the toBeWithinRange custom matcher with proper type annotations using MatcherFunction. Includes both implementation and type declarations in the same file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect} from '@jest/globals';\nimport type {MatcherFunction} from 'expect';\n\nconst toBeWithinRange: MatcherFunction<[floor: unknown, ceiling: unknown]> =\n  // `floor` and `ceiling` get types from the line above\n  // it is recommended to type them as `unknown` and to validate the values\n  function (actual, floor, ceiling) {\n    if (\n      typeof actual !== 'number' ||\n      typeof floor !== 'number' ||\n      typeof ceiling !== 'number'\n    ) {\n      throw new TypeError('These must be of type number!');\n    }\n\n    const pass = actual >= floor && actual <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          // `this` context will have correct typings\n          `expected ${this.utils.printReceived(\n            actual,\n          )} not to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${this.utils.printReceived(\n            actual,\n          )} to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: false,\n      };\n    }\n  };\n\nexpect.extend({\n  toBeWithinRange,\n});\n\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Nth Mock Return Value with Jest in JavaScript\nDESCRIPTION: Illustrates using the `.toHaveNthReturnedWith()` matcher in Jest to check the specific value returned by the nth call (1-based index) to a mock function. It defines a mock `drink` function, calls it multiple times, and then asserts the return values for the 1st and 2nd calls. This matcher fails if the nth call threw an error.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ntest('drink returns expected nth calls', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Puppeteer Global Setup Script (JavaScript)\nDESCRIPTION: Defines a Jest global setup script (`setup.js`). It launches a Puppeteer browser instance, stores it in a global variable (`globalThis.__BROWSER_GLOBAL__`) for access in teardown, and writes the browser's WebSocket endpoint to a temporary file for test environments to connect.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// setup.js\nconst {mkdir, writeFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nmodule.exports = async function () {\n  const browser = await puppeteer.launch();\n  // store the browser instance so we can teardown it later\n  // this global is only available in the teardown but not in TestEnvironments\n  globalThis.__BROWSER_GLOBAL__ = browser;\n\n  // use the file system to expose the wsEndpoint for TestEnvironments\n  await mkdir(DIR, {recursive: true});\n  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());\n};\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Names to Mock Functions with `.mockName()` in JavaScript\nDESCRIPTION: Shows how to use the `.mockName()` method to assign a descriptive name (e.g., 'add42') to a Jest mock function. This name will appear in test error outputs instead of the generic 'jest.fn()', improving debugging clarity.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Transformer for Static Assets (JavaScript)\nDESCRIPTION: A simple custom Jest transformer (`fileTransformer.js`) written in JavaScript using CommonJS. It defines a `process` method that takes the source path of a file (e.g., an image) and returns a JavaScript module exporting the base filename as a string. This allows importing static assets in tests without causing syntax errors, replacing the import with the filename. It requires the Node.js `path` module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CodeTransformation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// title=\"fileTransformer.js\"\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers Globally in Jest (JavaScript)\nDESCRIPTION: Configures Jest to use the legacy fake timers implementation globally across all tests by setting both `fakeTimers.enableGlobally` and `fakeTimers.legacyFakeTimers` to `true` in the Jest configuration file (CommonJS). This might be necessary for compatibility reasons.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Serializing Functions and Using pretty-format Options - JavaScript\nDESCRIPTION: This snippet shows how pretty-format prints a function, including its name by default, and how to use the printFunctionName option to exclude the function name. An options object is defined and passed as the second argument. Input is a function; output is a formatted string which optionally includes the function name.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset using npm Module Name in TypeScript\nDESCRIPTION: Demonstrates setting the `preset` option in a Jest TypeScript configuration file using the `Config` type. It specifies an npm module name ('foo-bar') which provides a base Jest configuration via a `jest-preset.(json|js|... )` file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_54\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: 'foo-bar',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Specific Jest Tests by Pattern or Filename\nDESCRIPTION: Executes only the tests whose filenames match the provided pattern or path. This allows targeting specific test files or suites.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njest my-test #or\njest path/to/my-test.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Jest Watch Plugin Configuration in JavaScript\nDESCRIPTION: Example of customizing a watch plugin's key and prompt in the Jest configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: [\n    [\n      'path/to/yourWatchPlugin',\n      {\n        key: 'k', // <- your custom key\n        prompt: 'show a custom prompt',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Caution: Mismatched Types in Template Literal Table for Jest (TypeScript)\nDESCRIPTION: Illustrates a caveat when using template literal tables in parameterized Jest tests: TypeScript does not type check the values inside the template string, so mismatched types may go unnoticed at compile time. The snippet explicitly warns that runtime values may violate intended typings. Jest and TypeScript are required.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_42\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each<{a: number; expected: string}>`\n  a                            | expected\n  ${1}                         | ${'one'}\n  ${'will not raise TS error'} | ${'two'}\n  ${3}                         | ${'three'}\n`('template literal with wrongly typed input', ({a, expected}) => {\n  // all arguments are typed as stated in the generic: `a: number`, `expected: string`\n  // WARNING: `a` is of type `number` but will be a string in the 2nd test case.\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Falsy with Jest in JavaScript\nDESCRIPTION: Demonstrates the `.toBeFalsy()` matcher in Jest, used to check if a value is considered false in a boolean context. This is useful when the exact falsy value (`false`, `0`, `''`, `null`, `undefined`, `NaN`) doesn't matter. The example checks if a hypothetical `getErrors()` function returns a falsy value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\ndrinkSomeLaCroix();\nif (!getErrors()) {\n  drinkMoreLaCroix();\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ntest('drinking La Croix does not lead to errors', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Image Transformer in Jest\nDESCRIPTION: Configuration for using a custom image file transformer in Jest's configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CodeTransformation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Concurrent Test Execution\nDESCRIPTION: Shows how to use test.concurrent for running tests concurrently. Useful for improving test execution performance.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring workerIdleMemoryLimit in Jest with TypeScript\nDESCRIPTION: TypeScript example for configuring workerIdleMemoryLimit in Jest to limit memory usage for test workers, with proper type definitions for the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Alternative React Component Mocking Approaches for Jest\nDESCRIPTION: Different approaches to mock React components in Jest tests to avoid warnings in React 16+.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./SomeComponent', () => () => 'SomeComponent');\n```\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('./Widget', () => () => <mock-widget />);\n```\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Functions - JavaScript Module\nDESCRIPTION: Exports an object with utility functions (authorize) from a JavaScript file. The authorize function returns the string 'token'. This pattern is commonly used to define utility modules to be imported and tested elsewhere. No external dependencies are required.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\\n  authorize: () => {\\n    return 'token';\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Recursive Custom Equality Testers Example\nDESCRIPTION: Demonstrates implementation of recursive custom equality testers for comparing complex objects with nested custom types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nfunction areAuthorEqual(a, b) {\n  const isAAuthor = a instanceof Author;\n  const isBAuthor = b instanceof Author;\n\n  if (isAAuthor && isBAuthor) {\n    return a.name === b.name;\n  } else if (isAAuthor === isBAuthor) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nfunction areBooksEqual(a, b, customTesters) {\n  const isABook = a instanceof Book;\n  const isBBook = b instanceof Book;\n\n  if (isABook && isBBook) {\n    return (\n      a.name === b.name && this.equals(a.authors, b.authors, customTesters)\n    );\n  } else if (isABook === isBBook) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areAuthorsEqual, areBooksEqual]);\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Implementation with mockImplementation in JavaScript\nDESCRIPTION: Demonstrates using `mockImplementation(fn)` to provide a custom function body for a Jest mock. The provided function `fn` will be executed when the mock is called, while Jest still tracks calls and results. The implementation can be updated by calling `mockImplementation` again.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with JSON\nDESCRIPTION: Example of a Jest configuration file using JSON format. This demonstrates storing Jest configuration in jest.config.json with basic settings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bail\": 1,\n  \"verbose\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Jest Environment via Docblock (JavaScript)\nDESCRIPTION: Demonstrates using a `@jest-environment` docblock pragma at the top of a test file to specify the `jsdom` environment for that file's tests. This overrides the default or globally configured environment. The example test uses `document.createElement`, which requires a DOM environment like `jsdom`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_84\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div');\n  expect(element).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Asynchronous Callback Test Example - Jest JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect pattern for testing asynchronous callback-based code in Jest. Because the test completes before the callback executes, errors inside the callback do not fail the test. Included to highlight pitfalls and emphasize the importance of using the 'done' callback for async tests. No extra dependencies beyond Jest are needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Don't do this!\ntest('the data is peanut butter', () => {\n  function callback(error, data) {\n    if (error) {\n      throw error;\n    }\n    expect(data).toBe('peanut butter');\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Naming Mock Functions in Jest\nDESCRIPTION: Shows how to provide a name for a mock function using mockName() for easier identification in test output.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Automock in TypeScript\nDESCRIPTION: This example demonstrates how to specify Jest's 'automock' setting in a TypeScript configuration file. It imports the Config type for type safety and exports the config using ES modules. Dependency: 'jest' types. Main property: 'automock'. Input: TypeScript build environment; Output: Typed Jest config object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  automock: true,\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Environment Options in Docblock (JavaScript)\nDESCRIPTION: Demonstrates how to specify test environment options directly in a test file using a docblock. This example sets the 'jsdom' environment and configures a custom URL.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n----------------------------------------\n\nTITLE: Using test.each with Inline Array of Arrays in TypeScript (Jest)\nDESCRIPTION: Demonstrates `test.each` with an inline array of arrays in TypeScript. When the table is defined directly within the `test.each` call, TypeScript can typically infer the types of the arguments correctly, including optional values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Transformers in JavaScript (jest.config.js)\nDESCRIPTION: Illustrates configuring multiple code transformers in a Jest JavaScript configuration file (`jest.config.js`) using the `transform` option. This example explicitly includes the default `babel-jest` for JavaScript/TypeScript files (`\\.[jt]sx?$`) and adds a hypothetical `some-css-transformer` for CSS files (`\\.css$`). Uses JSDoc type annotation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\n/** @type {import('jest').Config} */\nconst config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nmodule.exports = config;\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Resolver for Jest\nDESCRIPTION: This code defines a custom snapshot resolver module for Jest. It specifies how to resolve paths between test files and their corresponding snapshot files.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // resolves from test to snapshot path\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('__tests__', '__snapshots__') + snapshotExtension,\n\n  // resolves from snapshot to test path\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    snapshotFilePath\n      .replace('__snapshots__', '__tests__')\n      .slice(0, -snapshotExtension.length),\n\n  // Example test path, used for preflight consistency check of the implementation above\n  testPathForConsistencyCheck: 'some/__tests__/example.test.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in Jest\nDESCRIPTION: Examples demonstrating how to set global variables for test environments using the globals configuration option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Exporting a Simple Testable Sum Function with Inline Test - JavaScript\nDESCRIPTION: Demonstrates how to define and export a sum function, and add an inline test that runs only in test environments. The code conditionally executes the test block when NODE_ENV is 'test', utilizing Jest's 'test' and 'expect' methods. No external dependencies are required besides Node.js and Jest; input parameters are two numbers, and the expected output is their sum.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nexport function sum(a, b) {\n  return a + b;\n}\n\nif (process.env.NODE_ENV === 'test') {\n  test('sum', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Export Conditions in Jest (JavaScript)\nDESCRIPTION: This JavaScript configuration snippet demonstrates how to set custom export conditions for the JSDOM test environment in Jest, specifically for React Native.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    customExportConditions: ['react-native'],\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using jest.spyOn for Mocking in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 19.0.0, `jest.spyOn` provides a way to create mock functions similar to `jest.fn` but also spies on method calls on an object. It is useful for tracking calls to specific object methods without replacing the original implementation, or optionally mocking the implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.spyOn\n```\n\n----------------------------------------\n\nTITLE: Testing createUser with Jest Mocks (JavaScript)\nDESCRIPTION: Shows a Jest test that mocks 'node-fetch' and checks whether 'createUser' calls fetch with the correct arguments and returns the user id. This snippet demonstrates mocking the fetch function and its expected output. Dependencies: Jest and node-fetch. Accepts no input. Asserts internal calls and expected return; may fail if 'Response' is incorrectly mocked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/BypassingModuleMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.mock('node-fetch');\\n\\nimport fetch, {Response} from 'node-fetch';\\nimport {createUser} from './createUser';\\n\\ntest('createUser calls fetch with the right args and returns the user id', async () => {\\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\\n\\n  const userId = await createUser();\\n\\n  expect(fetch).toHaveBeenCalledTimes(1);\\n  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {\\n    method: 'POST',\\n  });\\n  expect(userId).toBe('4');\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample CJS Module for Testing (JavaScript)\nDESCRIPTION: Presents a basic CommonJS module (`main.cjs`) that requires dependencies (specifically 'electron') using the `require` syntax. This module serves as an example for demonstrating how to mock CJS dependencies from an ESM test file in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ECMAScriptModules.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// title=\"main.cjs\"\nconst {BrowserWindow, app} = require('electron');\n\n// etc.\n\nmodule.exports = {example};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Test and Describe Block Execution Order in Jest\nDESCRIPTION: Illustrates the order in which Jest executes describe handlers and tests, showing that all describe blocks are processed before any tests are run.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('describe outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n\n    test('test 1', () => console.log('test 1'));\n  });\n\n  console.log('describe outer-b');\n\n  test('test 2', () => console.log('test 2'));\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n\n    test('test 3', () => console.log('test 3'));\n  });\n\n  console.log('describe outer-c');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Nth Return Value of Mock Function with Jest - JavaScript\nDESCRIPTION: This snippet shows the usage of the `.toHaveNthReturnedWith` Jest matcher to verify the value a mock function returned for specific calls. It sets up a mock called `drink`, calls it twice, and asserts the returned values for each call in sequence. Dependencies: Jest. Parameters include the call index (positive integer) and the expected return value for that call; throws if the nth call threw.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('drink returns expected nth calls', () => {\\n  const beverage1 = {name: 'La Croix (Lemon)'};\\n  const beverage2 = {name: 'La Croix (Orange)'};\\n  const drink = jest.fn(beverage => beverage.name);\\n\\n  drink(beverage1);\\n  drink(beverage2);\\n\\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');\\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');\\n});\n```\n\n----------------------------------------\n\nTITLE: Using Summary Reporter with Silent Reporter in TypeScript\nDESCRIPTION: TypeScript configuration for using the Summary reporter with jest-silent-reporter for minimal console output with summary information.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Adding a Jest Test Script to package.json - JSON\nDESCRIPTION: Provides a sample package.json fragment to add a Jest test script under the 'scripts' section. No dependencies beyond a valid package.json file and Jest being installed. The script maps 'npm test' or 'yarn test' to run Jest, short-cutting the CLI usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Transformation with babel-jest and Custom Transformer (JSON)\nDESCRIPTION: Example Jest configuration snippet demonstrating how to specify multiple transformers for different file types within the `transform` option. It explicitly includes the default `babel-jest` for JavaScript/TypeScript files (`\\.[jt]sx?$`) alongside a placeholder `some-css-transformer` for CSS files (`\\.css$`). This pattern is necessary when adding custom transformers while still wanting to use the default Babel transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CodeTransformation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Jest Test with jest-puppeteer Preset\nDESCRIPTION: Demonstrates a simple Jest test suite using the `jest-puppeteer` preset. It leverages the globally available `page` object (provided by the preset) to navigate to Google and assert the page title. No explicit Puppeteer setup or teardown is needed within the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google', () => {\n  beforeAll(async () => {\n    await page.goto('https://google.com');\n  });\n\n  it('should be titled \\\"Google\\\"', async () => {\n    await expect(page.title()).resolves.toMatch('Google');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with identity-obj-proxy for CSS Modules (JavaScript)\nDESCRIPTION: This jest.config.js snippet sets 'identity-obj-proxy' as the moduleNameMapper target for style imports. It ensures that CSS module imports map property lookups to class name strings, which is especially helpful for React snapshot tests and components using CSS Modules. Requires prior installation of 'identity-obj-proxy'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling and Using Jest Fake Timers in Test Files (JavaScript)\nDESCRIPTION: This test file example shows how to use jest.useFakeTimers with and without options within test code, increasing the limit for recursive timers locally. Useful for controlling and advancing timers in unit tests, especially for async operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// install fake timers for this file using the options from Jest configuration\njest.useFakeTimers();\n\ntest('increase the limit of recursive timers for this and following tests', () => {\n  jest.useFakeTimers({timerLimit: 5000});\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Jest Configuration File\nDESCRIPTION: This bash command runs Jest with the `--init` flag. It triggers an interactive prompt that asks questions about the project setup and generates a basic `jest.config.js` file tailored to the project.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njest --init\n```\n\n----------------------------------------\n\nTITLE: Configuring Fake Timers with Legacy Implementation in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to enable the legacy implementation of fake timers in Jest globally. This configuration enables fake timers for all tests while using the older implementation rather than the newer @sinonjs/fake-timers based version.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing jest-mongodb Dependency (Bash)\nDESCRIPTION: This command uses npm to install the `@shelf/jest-mongodb` package as a development dependency for the project. This package provides the Jest preset required for easy MongoDB integration in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MongoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-mongodb\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Test Filtering Function\nDESCRIPTION: Example of a JavaScript module exporting a filtering function to exclude tests from running based on file names.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This filter when applied will only run tests ending in .spec.js (not the best way to do it, but it's just an example):\nconst filteringFunction = testPath => testPath.endsWith('.spec.js');\n\nmodule.exports = testPaths => {\n  const allowedPaths = testPaths.filter(filteringFunction); // [\"path1.spec.js\", \"path2.spec.js\", etc]\n\n  return {\n    filtered: allowedPaths,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Treat Extensions as ESM (JavaScript)\nDESCRIPTION: Demonstrates how to configure Jest to treat additional file extensions (e.g., .ts) as ECMAScript Modules by using the extensionsToTreatAsEsm option. This is helpful for ESM support in custom or TypeScript test files. Configuration is exported via CommonJS.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock Request Module for Jest Testing\nDESCRIPTION: A manual mock for the request module that simulates API responses without making actual network calls. It returns predefined user data based on the requested user ID.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = {\n  4: {name: 'Mark'},\n  5: {name: 'Paul'},\n};\n\nexport default function request(url) {\n  return new Promise((resolve, reject) => {\n    const userID = parseInt(url.slice('/users/'.length), 10);\n    process.nextTick(() =>\n      users[userID]\n        ? resolve(users[userID])\n        : reject({\n            error: `User with ${userID} not found.`,\n          }),\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Reporter - JavaScript\nDESCRIPTION: Example of a custom reporter module for Jest, written in JavaScript. The module exports a class that receives global configuration, reporter options, and reporter context in the constructor, and implements the onRunComplete lifecycle hook to log custom output. Optionally, the 'getLastError' method can be implemented to signal test run errors. Required as the entry point for custom reporters listed in Jest configuration; must be CommonJS compatible.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomReporter {\n  constructor(globalConfig, reporterOptions, reporterContext) {\n    this._globalConfig = globalConfig;\n    this._options = reporterOptions;\n    this._context = reporterContext;\n  }\n\n  onRunComplete(testContexts, results) {\n    console.log('Custom reporter output:');\n    console.log('global config:', this._globalConfig);\n    console.log('options for this reporter from Jest config:', this._options);\n    console.log('reporter context passed from test scheduler:', this._context);\n  }\n\n  // Optionally, reporters can force Jest to exit with non zero code by returning\n  // an `Error` from `getLastError()` method.\n  getLastError() {\n    if (this._shouldFail) {\n      return new Error('Custom error reported!');\n    }\n  }\n}\n\nmodule.exports = CustomReporter;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Jest Transformers (JSON)\nDESCRIPTION: Example Jest configuration demonstrating how to use both the default `babel-jest` for JavaScript/TypeScript files and a custom transformer for CSS files within the `transform` option. This setup ensures that `.js`, `.jsx`, `.ts`, and `.tsx` files are processed by `babel-jest`, while `.css` files are handled by a specified `some-css-transformer`. Requires `babel-jest` and the specified custom transformer to be installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CodeTransformation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Custom Transformers\nDESCRIPTION: Configuration that combines identity-obj-proxy for CSS Modules with a custom file transformer for other assets. This provides more control over how assets are handled in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest via jest.config.json\nDESCRIPTION: Illustrates configuring Jest using a dedicated JSON file named `jest.config.json`. This file contains a simple JSON object where keys represent configuration options. This example sets `bail` to stop after 1 failure and `verbose` to `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"jest.config.json\"\n{\n  \"bail\": 1,\n  \"verbose\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transformer Interface in TypeScript\nDESCRIPTION: TypeScript interface definitions for custom transformers in Jest, including options, transformed source, and transformer types.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CodeTransformation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransformOptions<TransformerConfig = unknown> {\n  supportsDynamicImport: boolean;\n  supportsExportNamespaceFrom: boolean;\n  supportsStaticESM: boolean;\n  supportsTopLevelAwait: boolean;\n  instrument: boolean;\n  cacheFS: Map<string, string>;\n  config: ProjectConfig;\n  configString: string;\n  transformerConfig: TransformerConfig;\n}\n\ntype TransformedSource = {\n  code: string;\n  map?: RawSourceMap | string | null;\n};\n\ninterface SyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ninterface AsyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ntype Transformer<TransformerConfig = unknown> =\n  | SyncTransformer<TransformerConfig>\n  | AsyncTransformer<TransformerConfig>;\n\ntype TransformerCreator<\n  X extends Transformer<TransformerConfig>,\n  TransformerConfig = unknown,\n> = (transformerConfig?: TransformerConfig) => X;\n\ntype TransformerFactory<X extends Transformer> = {\n  createTransformer: TransformerCreator<X>;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating a React Component Test Leading to Snapshot Mismatch in TypeScript\nDESCRIPTION: This snippet illustrates a scenario where a snapshot test fails due to an intentional change. The 'Link' component's 'page' prop is updated to point to a different URL ('http://www.instagram.com'). When the test runs, Jest will compare the newly rendered output with the existing snapshot (which contains the old Facebook URL), resulting in a mismatch and a test failure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Updated test case with a Link to a different address\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Modules with Getters and Setters in JavaScript\nDESCRIPTION: Defines two JavaScript modules, `video` and `audio`. The `video` module has a getter property `play`. The `audio` module has a setter and getter for the `volume` property. These modules are used in the subsequent example demonstrating `jest.spyOn` with access types.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nconst video = {\n  // it's a getter!\n  get play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n\nconst audio = {\n  _volume: false,\n  // it's a setter!\n  set volume(value) {\n    this._volume = value;\n  },\n  get volume() {\n    return this._volume;\n  },\n};\n\nmodule.exports = audio;\n```\n\n----------------------------------------\n\nTITLE: Temporarily Overriding Async Mock Implementation with `withImplementation` (JavaScript)\nDESCRIPTION: Demonstrates using `withImplementation` with an asynchronous callback. The method returns a promise that resolves after the callback completes and the mock's implementation is restored. Awaiting the promise ensures the temporary implementation is active during the async operation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jest DynamoDB Preset - Bash\nDESCRIPTION: Installs the @shelf/jest-dynamodb package as a development dependency using npm. This is the prerequisite step to enable Jest compatibility with DynamoDB. Run this command in your project directory before proceeding to configuration steps.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/DynamoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-dynamodb\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Transformer Using @babel/core\nDESCRIPTION: This example shows how to build a custom transformer for Jest using @babel/core and babel-preset-jest. The transformer processes JavaScript source files through Babel with the Jest preset applied.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst {transform} = require('@babel/core');\nconst jestPreset = require('babel-preset-jest');\n\nmodule.exports = {\n  process(src, filename) {\n    const result = transform(src, {\n      filename,\n      presets: [jestPreset],\n    });\n\n    return result || src;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Ignore Patterns (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to set transformIgnorePatterns to exclude specific node_modules paths from transformation. This demonstrates a pattern that can cause conflicts with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_81\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers with Jest in JavaScript\nDESCRIPTION: Demonstrates how to enable the legacy implementation of Jest's fake timers by passing `{ legacyFakeTimers: true }` to `jest.useFakeTimers`. This might be necessary for compatibility reasons in certain scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\njest.useFakeTimers({\n  legacyFakeTimers: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Explicitly Resetting Jest Babel Transform Configuration - JavaScript\nDESCRIPTION: Defines a 'jest.config.js' file that disables any Babel transforms by setting the 'transform' option to an empty object. Prevents Jest from applying Babel-based transformations, even if babel-jest is present. Output is a CommonJS config object for Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Test Sequencer in TypeScript\nDESCRIPTION: TypeScript version of configuring Jest to use a custom test sequencer by specifying the path to the sequencer file in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_76\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Reporters with Options in TypeScript\nDESCRIPTION: Example of configuring coverage reporters with additional options in Jest using TypeScript. It shows how to specify multiple reporters and customize the text reporter to skip fully-covered files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Export Conditions in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to set custom export conditions for the test environment in Jest. This example configures the 'jsdom' environment to use 'react-native' export conditions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    customExportConditions: ['react-native'],\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Jest MaxWorkers Configuration\nDESCRIPTION: Examples of configuring maximum worker threads for Jest test execution using percentage-based settings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  maxWorkers: '50%',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  maxWorkers: '50%',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Functions for JestWorker Child Processes in JavaScript\nDESCRIPTION: This worker module (`worker.js`) exports simple functions (`foo`, `bar`, `getWorkerId`) intended to be called remotely by the parent process using `jest-worker`. The `getWorkerId` function demonstrates accessing the worker's unique ID provided via the `process.env.JEST_WORKER_ID` environment variable. These functions are executed within the isolated child processes managed by the worker farm.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport function foo(param) {\n  return `Hello from foo: ${param}`;\n}\n\nexport function bar(param) {\n  return `Hello from bar: ${param}`;\n}\n\nexport function getWorkerId() {\n  return process.env.JEST_WORKER_ID;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Checkbox Component for DOM Testing\nDESCRIPTION: Example React component (CheckboxWithLabel.js) that implements a checkbox with dynamic labels, used for demonstrating DOM testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useState} from 'react';\n\nexport default function CheckboxWithLabel({labelOn, labelOff}) {\n  const [isChecked, setIsChecked] = useState(false);\n\n  const onChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  return (\n    <label>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />\n      {isChecked ? labelOn : labelOff}\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Complex Example Module in JavaScript\nDESCRIPTION: Defines multiple data types (function, async function, class, object, array, number, string, boolean, symbol) in a CommonJS module. Designed to show how jest.createMockFromModule mocks properties of different data types. No dependencies; facilitates demonstration of Jest automocking. Inputs/Outputs: Various based on exported property.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  function: function square(a, b) {\\n    return a * b;\\n  },\\n  asyncFunction: async function asyncSquare(a, b) {\\n    const result = (await a) * b;\\n    return result;\\n  },\\n  class: new (class Bar {\\n    constructor() {\\n      this.array = [1, 2, 3];\\n    }\\n    foo() {}\\n  })(),\\n  object: {\\n    baz: 'foo',\\n    bar: {\\n      fiz: 1,\\n      buzz: [1, 2, 3],\\n    },\\n  },\\n  array: [1, 2, 3],\\n  number: 123,\\n  string: 'baz',\\n  boolean: true,\\n  symbol: Symbol.for('a.b.c'),\\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Object and Array Snapshots Without Prototypes - JavaScript\nDESCRIPTION: This JavaScript test file demonstrates how Jest renders object and array inline snapshots without the prototype name, by leveraging the snapshotFormat configuration. It defines a unit test using the toMatchInlineSnapshot matcher. This approach provides clearer and more focused snapshot output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('does not show prototypes for object and array inline', () => {\n  const object = {\n    array: [{hello: 'Danger'}],\n  };\n  expect(object).toMatchInlineSnapshot(`\n    {\n      \"array\": [\n        {\n          \"hello\": \"Danger\",\n        },\n      ],\n    }\n  `);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Package Manager\nDESCRIPTION: Examples of running Jest tests through a package manager (npm) while passing command line arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njest -u -t=\"ColorPicker\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration in TypeScript\nDESCRIPTION: Example of retrieving and extending Jest's default configuration using the jest-config package in TypeScript. This allows adding to existing defaults while maintaining type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\nimport {defaults} from 'jest-config';\n\nconst config: Config = {\n  moduleDirectories: [...defaults.moduleDirectories, 'bower_components'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots Using the Jest CLI (Bash)\nDESCRIPTION: This shell command runs Jest test runner with the --updateSnapshot flag, instructing it to automatically re-generate and overwrite failing snapshot artifacts from active snapshot tests. It applies to all tests in the project by default unless further filtered. Prerequisites include a working Jest config and means to execute npm/yarn scripts. Input is invoked at the command line; output is rewritten snapshot files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --updateSnapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Reporters in Jest\nDESCRIPTION: Shows how to add custom reporters to Jest using the reporters configuration. This example uses the default reporter and adds a custom reporter with specific options using the tuple form.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting modulePaths for Additional Module Resolution in Jest\nDESCRIPTION: Demonstrates how to configure modulePaths to specify additional locations for Jest to search when resolving modules. This serves as an alternative to setting the NODE_PATH environment variable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Isolating Individual Tests with Only Modifier in Jest (JavaScript)\nDESCRIPTION: Presents test.only to selectively execute a single test case within a larger test file. Only the test flagged with .only (\"it is raining\") runs, facilitating focused debugging. Any test not marked with .only (such as \"it is not snowing\") is ignored. Accepts an optional timeout parameter.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Launching and Debugging Jest Tests in VS Code (Windows) (JSON)\nDESCRIPTION: Provides a Windows-specific `launch.json` configuration for Visual Studio Code that automatically starts Jest tests with debugging enabled. This version adjusts the path in `runtimeArgs` to point to the Jest executable commonly found at `./node_modules/jest/bin/jest.js` on Windows.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Jest Tests with Node Inspector via CLI\nDESCRIPTION: Shows how to start Jest using Node.js with the `--inspect-brk` flag to enable debugging. The `--runInBand` flag ensures tests run sequentially in the same process, necessary for stable debugging. Requires Node.js installed. An external debugger (like Chrome DevTools) can then connect to the specified port (usually 9229). Commands for both Unix-like systems and Windows are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\nor on Windows\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Configuring modulePaths in Jest (JavaScript)\nDESCRIPTION: Example of setting modulePaths in Jest configuration to specify additional locations for module resolution. This snippet shows how to include the 'app' directory in the search path.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Custom Puppeteer Test Environment for Jest\nDESCRIPTION: A custom Jest test environment that connects to the Puppeteer instance created in the global setup. This allows tests to interact with the browser.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {readFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nclass PuppeteerEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config);\n  }\n\n  async setup() {\n    await super.setup();\n    // get the wsEndpoint\n    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');\n    if (!wsEndpoint) {\n      throw new Error('wsEndpoint not found');\n    }\n\n    // connect to puppeteer\n    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({\n      browserWSEndpoint: wsEndpoint,\n    });\n  }\n\n  async teardown() {\n    if (this.global.__BROWSER_GLOBAL__) {\n      this.global.__BROWSER_GLOBAL__.disconnect();\n    }\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n}\n\nmodule.exports = PuppeteerEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Testing State Preparation with expect.hasAssertions()\nDESCRIPTION: Shows how to ensure at least one assertion is called when testing asynchronous state preparation code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\ntest('prepareState prepares a valid state', () => {\n  expect.hasAssertions();\n  prepareState(state => {\n    expect(validateState(state)).toBeTruthy();\n  });\n  return waitOnState();\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking mock constructor instances - Jest - JavaScript\nDESCRIPTION: Demonstrates how Jest's mock.instances array tracks objects created using the mock as a constructor, and verifies instance equivalency. Requires Jest as a dependency. The code shows usage of jest.fn(), instantiation of two objects, and checking their reference positions in mock.instances. Useful for testing and validating object creation side effects in classes and constructor mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock from a Module in JavaScript\nDESCRIPTION: Example of using jest.createMockFromModule() to create a mock version of a module in JavaScript. This snippet shows how to extend the automatic mock's behavior with a custom implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst utils = jest.createMockFromModule('../utils');\n\nutils.isAuthorized = jest.fn(secret => secret === 'not wizard');\n\ntest('implementation created by jest.createMockFromModule', () => {\n  expect(jest.isMockFunction(utils.authorize)).toBe(true);\n  expect(utils.isAuthorized('not wizard')).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Common Items with diff-sequences in JavaScript\nDESCRIPTION: This snippet defines a function countCommonItems that returns the length of the longest common subsequence between two arrays using the diff-sequences library. It sets up isCommon and foundSubsequence callbacks for item comparison and accumulation, then invokes diff and returns the cumulative length. Requires diff-sequences for use, expects both a and b to be arrays, and illustrates how to accumulate the count as output.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Return length of longest common subsequence according to === operator.\nfunction countCommonItems(a, b) {\n  let n = 0;\n  function isCommon(aIndex, bIndex) {\n    return a[aIndex] === b[bIndex];\n  }\n  function foundSubsequence(nCommon) {\n    n += nCommon;\n  }\n\n  diff(a.length, b.length, isCommon, foundSubsequence);\n\n  return n;\n}\n\nconst commonLength = countCommonItems(\n  ['a', 'b', 'c', 'a', 'b', 'b', 'a'],\n  ['c', 'b', 'a', 'b', 'a', 'c'],\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals in a TypeScript Test File\nDESCRIPTION: This TypeScript code demonstrates how to write a Jest test using explicit imports from `@jest/globals`. It imports `describe`, `expect`, and `test` to structure the test suite and perform assertions, ensuring type safety for these global functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, expect, test} from '@jest/globals';\nimport {sum} from './sum';\n\ndescribe('sum module', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `moduleNameMapper` in Jest (JavaScript)\nDESCRIPTION: Demonstrates configuring `moduleNameMapper` in `jest.config.js` to map module paths using regular expressions. Examples include mapping to a global stub, a relative file path using `<rootDir>`, capturing regex groups for substitution, and mapping to multiple possible paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Snapshot Serializer in Jest (JavaScript)\nDESCRIPTION: Demonstrates how to use `expect.addSnapshotSerializer` to register a custom serializer module (`my-serializer-module`) directly within a test file. This allows for application-specific data structure formatting in snapshots generated by `toMatchSnapshot` assertions within that specific file, taking precedence over globally configured or default serializers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_58\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affects expect(value).toMatchSnapshot() assertions in the test file\n```\n```\n\n----------------------------------------\n\nTITLE: Built-in and Custom Reporters Configuration with JUnit Example - TypeScript\nDESCRIPTION: Sets up Jest reporters in a TypeScript config, demonstrating both the use of 'default' (built-in) and a custom JUnit reporter (using jest-junit) with specific configuration options for report output. The tuple format allows passing custom options to individual reporters. Requires installation of all listed reporters.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery DOM Event Handler with Async Data Fetch\nDESCRIPTION: jQuery code that listens for a button click, fetches user data asynchronously, and updates a span element with the user's login status.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialjQuery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst $ = require('jquery');\nconst fetchCurrentUser = require('./fetchCurrentUser.js');\n\n$('#button').click(() => {\n  fetchCurrentUser(user => {\n    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');\n    $('#username').text(user.fullName + ' - ' + loggedText);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Built-in and Custom Reporters Configuration with JUnit Example - JavaScript\nDESCRIPTION: Defines a list of reporters for Jest in JavaScript, including the built-in 'default' and a custom JUnit reporter (e.g., jest-junit) with options to specify output directory and filename. Multiple reporters can be configured to enhance reporting capabilities. All reporters included in the array must be installed and accessible to Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Running Specific Concurrent Parameterized Tests - Jest - JavaScript\nDESCRIPTION: Demonstrates how to run only specific sets of tests concurrently with test.concurrent.only.each using both array and tagged template literal syntaxes. Requires Jest with concurrent test support. Each test block runs asynchronously for multiple parameter sets and non-only tests are skipped.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Module (CommonJS) - JavaScript\nDESCRIPTION: Creates a CommonJS module exporting an object with authorize() and isAuthorized() methods, suitable for demonstrating Jest's createMockFromModule utility. Used as source module to be programmatically mocked in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting workerIdleMemoryLimit in Jest (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the workerIdleMemoryLimit option in a Jest configuration file using TypeScript. It sets the memory limit for workers to 20% of the system memory before they are recycled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Chaining mockImplementationOnce for sequential mock behaviors - Jest - JavaScript\nDESCRIPTION: Demonstrates chaining .mockImplementationOnce to provide different mocked behavior on consecutive calls of a Jest mock function. Useful for simulating sequences or varied outcomes in test scenarios. No extra dependencies are needed beyond Jest. Provides a means for simulating callback invocations or asynchronous results in unit tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Current Node Version in babel.config.js\nDESCRIPTION: This JavaScript code defines a basic Babel configuration in `babel.config.js`. It uses `@babel/preset-env` and configures it to target the currently running version of Node.js (`{targets: {node: 'current'}}`), ensuring code compatibility.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Async Custom Jest Inline Snapshot Matchers\nDESCRIPTION: Demonstrates how to correctly implement an asynchronous custom inline snapshot matcher in Jest. It highlights the necessity of capturing the error context (`this.error = new Error();`) *before* any `await` calls to prevent errors like \"Multiple inline snapshots for the same call are not supported\" and ensure Jest can update snapshots correctly.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // The error (and its stacktrace) must be created before any `await`\n    this.error = new Error();\n\n    // The implementation of `observe` doesn't matter.\n    // It only matters that the custom snapshot matcher is async.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observes something', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom `coverageReporters` in JavaScript\nDESCRIPTION: Shows how to configure the `coverageReporters` option in `jest.config.js`. This example specifies multiple reporters ('clover', 'json', 'lcov') and customizes the 'text' reporter using a tuple format to pass options, specifically `{skipFull: true}` to hide lines for fully covered files in the console output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Babel TypeScript Preset\nDESCRIPTION: This command installs the `@babel/preset-typescript` package as a development dependency using npm. This preset enables Babel to transpile TypeScript code into JavaScript, allowing Jest to run tests written in TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Custom Resolver\nDESCRIPTION: Configuration examples in both JavaScript and TypeScript showing how to specify a custom resolver in Jest config.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Options in Jest (JavaScript)\nDESCRIPTION: This JavaScript configuration snippet demonstrates how to set custom options for the JSDOM test environment in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Utils Module for Automock Testing\nDESCRIPTION: Sample utils module that provides authorization functions. This module is used to demonstrate Jest's automock feature in the test example.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  authorize: () => 'token',\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Jest Configuration (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates defining global variables using the `globals` option in `jest.config.ts` with type safety via the `Config` type. It sets a global variable `__DEV__` to `true`, making it accessible across all test environments. Globals must be JSON-serializable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Silent and Summary Reporter Configuration in Jest - JavaScript\nDESCRIPTION: Configures Jest to use 'jest-silent-reporter' and the 'summary' reporter, without including the built-in 'default'. This enables minimal output during tests while providing a summary of results at the end. Ideal for reducing test log noise, especially in CI environments where concise output is preferred. Both reporters must be installed separately.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Running jest-codemods for Automated Migration (Bash)\nDESCRIPTION: This command uses `npx` (Node Package Execute) to download and run the `jest-codemods` package without needing a global or local installation. It should be executed in the root directory of the project containing the tests you want to migrate. The tool will then apply code transformations (codemods) using `jscodeshift` to convert test syntax from supported frameworks (AVA, Chai, Expect.js, Jasmine, Mocha, proxyquire, Should.js, Tape, Sinon) to Jest's syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MigrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx jest-codemods\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Projects using Paths/Globs in JavaScript\nDESCRIPTION: Illustrates setting the `projects` option in a Jest JavaScript configuration using an array of strings. These strings can be paths or glob patterns pointing to different project directories. Jest will run tests concurrently for all specified projects, which is useful for monorepos. Uses `<rootDir>` for defining paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_57\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resolver with Package.json Pre-processing\nDESCRIPTION: Example of a custom resolver that modifies package.json before resolution. This resolver prioritizes the 'module' field over 'main' if present.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (path, options) => {\n  // Call the defaultResolver, so we leverage its cache, error handling, etc.\n  return options.defaultResolver(path, {\n    ...options,\n    // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)\n    packageFilter: pkg => {\n      return {\n        ...pkg,\n        // Alter the value of `main` before resolving the package\n        main: pkg.module || pkg.main,\n      };\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Diff Items Between Strings in Jest (JavaScript)\nDESCRIPTION: This function `findDiffItems` compares two strings (`a`, `b`) character by character using an assumed external `diff` function and callbacks (`isCommon`, `foundSubsequence`). It returns an array of diff items, where each item is a tuple `[type, text]` indicating if the text segment is common (`0`), deleted from `a` (`-1`), or inserted from `b` (`1`). This output format is compatible with libraries like `diff-match-patch` and is useful for detailed character-level diff analysis within changed lines identified previously. It depends on an assumed external `diff` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Return diff items for strings (compatible with diff-match-patch package).\nconst findDiffItems = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const array = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      array.push([-1, a.slice(aIndex, aCommon)]); // delete is -1\n    }\n    if (bIndex !== bCommon) {\n      array.push([1, b.slice(bIndex, bCommon)]); // insert is 1\n    }\n\n    aIndex = aCommon + nCommon; // number of characters compared in a\n    bIndex = bCommon + nCommon; // number of characters compared in b\n    array.push([0, a.slice(aCommon, aIndex)]); // common is 0\n  };\n\n  diff(a.length, b.length, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change items.\n  if (aIndex !== a.length) {\n    array.push([-1, a.slice(aIndex)]);\n  }\n  if (bIndex !== b.length) {\n    array.push([1, b.slice(bIndex)]);\n  }\n\n  return array;\n};\n\nconst expectedDeleted = ['\"sorting\": Object {', '\"ascending\": true,'].join(\n  '\\n',\n);\nconst receivedInserted = [\n  '\"sorting\": Array [',\n  'Object {',\n  '\"descending\": false,',\n].join('\\n');\n\nconst diffItems = findDiffItems(expectedDeleted, receivedInserted);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Snapshot Serializer in a Jest Test - JavaScript\nDESCRIPTION: This JavaScript test demonstrates how snapshot output is affected by a custom serializer added to the Jest configuration. The test defines an object with a foo property, invokes toMatchSnapshot, and expects Jest to use the provided serialization logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest(() => {\n  const bar = {\n    foo: {\n      x: 1,\n      y: 2,\n    },\n  };\n\n  expect(bar).toMatchSnapshot();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using jest-leak-detector to Check Object Leak Status in JavaScript\nDESCRIPTION: This asynchronous JavaScript example demonstrates the basic usage of `jest-leak-detector`. It creates an object `reference`, instantiates `LeakDetector` with it, and calls `isLeaking()` to check its status. Initially, `isLeaking()` returns `true` because the strong reference exists. After setting `reference` to `null`, `isLeaking()` is called again, which forces garbage collection and checks the weak reference, returning `false` as the object is no longer strongly referenced and can be collected.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-leak-detector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(async function () {\n  let reference = {};\n  let isLeaking;\n\n  const detector = new LeakDetector(reference);\n\n  // Reference is held in memory.\n  isLeaking = await detector.isLeaking();\n  console.log(isLeaking); // true\n\n  // We destroy the only reference to the object.\n  reference = null;\n\n  // Reference is gone.\n  isLeaking = await detector.isLeaking();\n  console.log(isLeaking); // false\n})();\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Suites with describe.skip in Jest (JavaScript)\nDESCRIPTION: This snippet showcases the use of describe.skip to exclude particular test suites from execution in Jest. Tests inside the skip block are not run, while others proceed normally. Required dependency is Jest. Input is the suite name and tests; only tests outside the skip block are executed. Useful for temporarily disabling tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fake Timers with Jest in TypeScript\nDESCRIPTION: Provides the TypeScript type definition (`FakeTimersConfig`) for the configuration object accepted by `jest.useFakeTimers`. It details options like `advanceTimers`, `doNotFake`, `legacyFakeTimers`, `now`, and `timerLimit` for customizing how Jest fakes timer APIs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype FakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number | Date;\n  /**\n   * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.\n   * The default is `100_000` timers.\n   */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Using --watch option in Jest\nDESCRIPTION: The --watch option watches files for changes and reruns tests related to changed files. It can be disabled using --no-watch or --watch=false, which is typically handled automatically in CI environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n--watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use a Custom Resolver (JSON)\nDESCRIPTION: JSON configuration snippet for Jest. It specifies a custom resolver script (`<rootDir>/resolver.js`) to be used for module resolution. This is necessary for projects needing browser-specific module resolution after the removal of built-in `browser` field support in Jest 26. Requires the `browser-resolve` package to be installed and the specified resolver script to exist.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2020-05-05-jest-26.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"resolver\": \"<rootDir>/resolver.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Utility to Spy on Date.now using jest.spyOn and jest.Spied in TypeScript\nDESCRIPTION: This TypeScript utility function, `setDateNow`, demonstrates how to use `jest.spyOn` to mock the static `Date.now` method. It takes a timestamp number as input, sets `Date.now` to always return this number, and returns the spy object explicitly typed as `jest.Spied<typeof Date.now>` for type safety. It depends on `@jest/globals`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters with Default and JUnit in TypeScript\nDESCRIPTION: Configures Jest reporters in TypeScript (using `Config` type) to include the `default` reporter and the `jest-junit` reporter. It shows how to pass configuration options like `outputDirectory` and `outputName` to the `jest-junit` reporter via a tuple.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_64\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jest Mock Instance and Context Tracking in JavaScript\nDESCRIPTION: This code illustrates inspecting mock function instances and binding contexts in Jest. It creates mock constructors/functions, captures instantiations and bound contexts, and prints out their tracked state. The code emphasizes how the .mock.instances and .mock.contexts properties can be interrogated. Jest is the only dependency, with no inputs beyond the mock functions themselves.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\n----------------------------------------\n\nTITLE: Example Jest Setup File (`setupFilesAfterEnv`) in JavaScript\nDESCRIPTION: Provides an example JavaScript setup file (`setup-jest.js`) intended for use with the `setupFilesAfterEnv` configuration option. It demonstrates extending Jest's `expect` capabilities with custom matchers from the `jest-extended` library and setting up a global `afterEach` hook to reset timers after each test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchers = require('jest-extended');\nexpect.extend(matchers);\n\nafterEach(() => {\n  jest.useRealTimers();\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration (JS/TS)\nDESCRIPTION: Demonstrates how to retrieve Jest's default configuration using `require('jest-config')` (in JS) or `import {defaults} from 'jest-config'` (in TS) and extend it. This example adds custom module file extensions (`'mts'`, `'cts'`) to the default list.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\nconst {defaults} = require('jest-config');\n\n/** @type {import('jest').Config} */\nconst config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts', 'cts'],\n};\n\nmodule.exports = config;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\nimport {defaults} from 'jest-config';\n\nconst config: Config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts'],\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript preset for Babel\nDESCRIPTION: Command to install the TypeScript preset for Babel to use with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Randomization and a Specific Seed\nDESCRIPTION: This command runs Jest tests with the `--randomize` flag to shuffle the order of tests within a file, and the `--seed` flag to specify a seed value (1234). Using a specific seed ensures that the randomized order is reproducible across runs. This feature requires the `jest-circus` test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njest --randomize --seed 1234\n```\n\n----------------------------------------\n\nTITLE: Defining an Object with Methods for Spying - Jest - JavaScript\nDESCRIPTION: Defines a module with a play() method that will be the subject of spying in subsequent Jest tests. Used to demonstrate jest.spyOn functionality. Output: Exports a plain object with a method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst video = {\n  play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n```\n\n----------------------------------------\n\nTITLE: Example Test File Included in Coverage via `forceCoverageMatch` (JavaScript)\nDESCRIPTION: An example JavaScript file (`sum.t.js`) containing both application code (the `sum` function) and its corresponding Jest test. This file type is intended to be included in code coverage reports by using the `forceCoverageMatch` configuration option, overriding Jest's default behavior of excluding test files from coverage.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexport function sum(a, b) {\n  return a + b;\n}\n\nif (process.env.NODE_ENV === 'test') {\n  test('sum', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter Options in JavaScript\nDESCRIPTION: JavaScript configuration for customizing the Summary reporter by passing options to the default reporter. The summaryThreshold is set to control when detailed failure summaries are displayed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Tests with describe.skip.each (Array) in Jest (JavaScript)\nDESCRIPTION: Shows how to use `describe.skip.each` with an array of arrays (`table`) to skip an entire suite of data-driven tests. While the tests defined within this block are skipped, other tests or suites in the file will still run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ndescribe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with jest.disableAutomock in JavaScript\nDESCRIPTION: Illustrates disabling Jest's automocking in a test file. After invoke jest.disableAutomock(), modules are imported in their real form rather than mocked. Tests that the real 'utils.authorize()' returns 'token'. Dependencies: Jest, utility module. Input: test runner; Output: assertion result.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport utils from '../utils';\\n\\njest.disableAutomock();\\n\\ntest('original implementation', () => {\\n  // now we have the original implementation,\\n  // even if we set the automocking in a jest configuration\\n  expect(utils.authorize()).toBe('token');\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing serialize/test Plugin for pretty-format (JavaScript)\nDESCRIPTION: Defines a serialize/test plugin for pretty-format that customizes serialization of arrays. The serializeItems function formats child items with configurable indentation, separators, and spacing, using callbacks for recursive printing. The plugin's test function matches array instances, while serialize controls depth and names output, with awareness of config options like maxDepth and min. Used as a pretty-format plugin, it enables precise control over how arrays are rendered, including custom depth capping and output structure. Requires pretty-format, and expects config, indentation, depth control, and a printer callback.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: VS Code Debugger Configuration for Create React App Tests\nDESCRIPTION: VS Code launch.json configuration specifically for debugging Jest tests in projects created with Facebook's create-react-app. This uses react-scripts to run the tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",\n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\",\n        \"--watchAll=false\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fake Timers Configuration Types - Jest - TypeScript\nDESCRIPTION: Lists the type signatures and configuration options for Jest's fake timer system. Used for TypeScript projects to provide type safety when using jest.useFakeTimers. Specifies allowed fakeable APIs and configuration structure. This is a type definition, not directly executable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype FakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number | Date;\n  /**\n   * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.\n   * The default is `100_000` timers.\n   */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Using expect.any() with Class Constructors in Jest\nDESCRIPTION: Demonstrates using `expect.any(constructor)` in Jest to check if a mock function was called with an instance of a specific class (`Cat`). The test defines a simple class `Cat` and a function `getCat` that invokes the mock with a `Cat` instance.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nclass Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Cat));\n});\n```\n\n----------------------------------------\n\nTITLE: Sharding Test Suites with Jest - Bash\nDESCRIPTION: Shows how to invoke Jest to run a single shard of the complete test suite by specifying the --shard flag with the respective shard index and count. Requires Jest 29.0.0 or later and configuration of a testSequencer with a 'shard' method. Parameters 'shardIndex' and 'shardCount' are 1-based, positive integers, where the index must not exceed the count. The input is the CLI command for each shard; output is the execution of the calculated subset of tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=1/3\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=2/3\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=3/3\n```\n\n----------------------------------------\n\nTITLE: Setting a Simple Test Display Name in Jest (TypeScript)\nDESCRIPTION: Shows how to set the `displayName` property to a string ('CLIENT') within a typed Jest configuration (`Config`) using TypeScript (ES Module syntax) for labeling tests during runtime.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: 'CLIENT',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Jest Test Suite with Yarn\nDESCRIPTION: Commands to install Mercurial (if needed) and run the Jest test suite using Yarn.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install hg # maybe\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDOM Environment Options in Jest (JavaScript)\nDESCRIPTION: Configuration example for setting JSDOM-specific environment options in Jest config file\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Worker Threads\nDESCRIPTION: CLI option for enabling experimental worker threads support for test parallelization instead of the default child processes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n--workerThreads\n```\n\n----------------------------------------\n\nTITLE: Custom Dependency Extractor Module for Jest (JavaScript)\nDESCRIPTION: This snippet provides an example of implementing a custom dependency extractor module for Jest in JavaScript. It exports an object with an extract function that receives code, filePath, and the defaultExtract function, returning a Set or Array of dependencies. Optionally, it includes a getCacheKey function to compute an MD5 hash of the module for cache invalidation. Requires node's crypto and fs modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nmodule.exports = {\n  extract(code, filePath, defaultExtract) {\n    const deps = defaultExtract(code, filePath);\n    // Scan the file and add dependencies in `deps` (which is a `Set`)\n    return deps;\n  },\n  getCacheKey() {\n    return crypto\n      .createHash('md5')\n      .update(fs.readFileSync(__filename))\n      .digest('hex');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters with Custom Reporter in TypeScript\nDESCRIPTION: Shows how to configure the `reporters` option in a Jest TypeScript configuration using the `Config` type. It demonstrates using both the default reporter and a custom reporter loaded from a file path. Options for the custom reporter are provided in a tuple `[reporterPath, optionsObject]`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_62\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Silent and Summary Reporter Configuration in Jest - TypeScript\nDESCRIPTION: TypeScript configuration for Jest that specifies 'jest-silent-reporter' for silent test logging and 'summary' for reporting overall results. Excludes the default reporter for a cleaner output, suitable for streamlined CI/CD pipelines. Ensure both reporters are available in project dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Jest with Project-Based Questions - Bash\nDESCRIPTION: Shows how to initiate Jest with an interactive setup using the latest CLI initializer. This command will guide the user through several configuration questions and output a new Jest configuration file. Assumes Node.js and npm/yarn are available.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm init jest@latest\n```\n\n----------------------------------------\n\nTITLE: Using diff-sequences Callback API in JavaScript\nDESCRIPTION: This snippet demonstrates the typical usage of the diff-sequences package by setting up comparison and output callbacks to find the longest common subsequence between two arrays. It shows how the isCommon and foundSubsequence callbacks can be customized to provide domain-specific comparison logic and handle results, relying on the diff function as the main entry point. Requires diff-sequences as a dependency and assumes sequences a and b are arrays of items; outputs depend on the concrete foundSubsequence implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst a = ['a', 'b', 'c', 'a', 'b', 'b', 'a'];\nconst b = ['c', 'b', 'a', 'b', 'a', 'c'];\n\nfunction isCommon(aIndex, bIndex) {\n  return a[aIndex] === b[bIndex];\n}\nfunction foundSubsequence(nCommon, aCommon, bCommon) {\n  // see examples\n}\n\ndiff(a.length, b.length, isCommon, foundSubsequence);\n```\n\n----------------------------------------\n\nTITLE: Setting One-Time Async Rejection with mockRejectedValueOnce in Jest (JS/TS)\nDESCRIPTION: Demonstrates `mockRejectedValueOnce` for making a Jest mock function return a rejected Promise for a single async call. Useful for testing scenarios with mixed successful (`mockResolvedValueOnce`) and failing async operations. Requires a Jest mock function and `await` to observe results/rejections. Both JavaScript and TypeScript examples are provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Diff Lines Between Objects in Jest (JavaScript)\nDESCRIPTION: This function `formatDiffLines` takes two JavaScript values (`a`, `b`), serializes them using `pretty-format` (both indented and unindented), and then utilizes an external `diff` function with `isCommon` and `foundSubsequence` callbacks to generate an array of strings representing the diff. Lines are prefixed with '-·' (delete), '+·' (insert), or '··' (common), where '·' represents a space, to visually indicate changes between the serialized values. It depends on the `pretty-format` package and an assumed external `diff` function.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Format diff with minus or plus for change lines and space for common lines.\nconst formatDiffLines = (a, b) => {\n  // Jest depends on pretty-format package to serialize objects as strings.\n  // Unindented for comparison to avoid distracting differences:\n  const aLinesUn = format(a, {indent: 0 /*, other options*/}).split('\\n');\n  const bLinesUn = format(b, {indent: 0 /*, other options*/}).split('\\n');\n  // Indented to display changed and unchanged lines:\n  const aLinesIn = format(a, {indent: 2 /*, other options*/}).split('\\n');\n  const bLinesIn = format(b, {indent: 2 /*, other options*/}).split('\\n');\n\n  const aLength = aLinesIn.length; // Validate: aLinesUn.length === aLength\n  const bLength = bLinesIn.length; // Validate: bLinesUn.length === bLength\n\n  const isCommon = (aIndex, bIndex) => aLinesUn[aIndex] === bLinesUn[bIndex];\n\n  // Only because the GitHub Flavored Markdown doc collapses adjacent spaces,\n  // this example code and the following table represent spaces as middle dots.\n  let aIndex = 0;\n  let bIndex = 0;\n  const array = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    for (; aIndex !== aCommon; aIndex += 1) {\n      array.push(`-·${aLinesIn[aIndex]}`); // delete is minus\n    }\n    for (; bIndex !== bCommon; bIndex += 1) {\n      array.push(`+·${bLinesIn[bIndex]}`); // insert is plus\n    }\n    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {\n      // For common lines, received indentation seems more intuitive.\n      array.push(`··${bLinesIn[bIndex]}`); // common is space\n    }\n  };\n\n  diff(aLength, bLength, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change lines.\n  for (; aIndex !== aLength; aIndex += 1) {\n    array.push(`-·${aLinesIn[aIndex]}`);\n  }\n  for (; bIndex !== bLength; bIndex += 1) {\n    array.push(`+·${bLinesIn[bIndex]}`);\n  }\n\n  return array;\n};\n\nconst expected = {\n  searching: '',\n  sorting: {\n    ascending: true,\n    fieldKey: 'what',\n  },\n};\nconst received = {\n  searching: '',\n  sorting: [\n    {\n      descending: false,\n      fieldKey: 'what',\n    },\n  ],\n};\n\nconst diffLines = formatDiffLines(expected, received);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters for GitHub Actions in JavaScript\nDESCRIPTION: Sets up Jest reporters in JavaScript for integration with GitHub Actions. It uses the built-in `github-actions` reporter (with `silent: false` to show logs) and the `summary` reporter. The `default` reporter is typically omitted when using the GitHub Actions reporter.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_65\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest environment with setupFilesAfterEnv (TypeScript)\nDESCRIPTION: TypeScript example of using setupFilesAfterEnv to configure the Jest testing environment, including adding custom matchers and setting up global teardown.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Structures with jest-diff in JavaScript\nDESCRIPTION: Illustrates requiring the `diff` function from `jest-diff` to compare two simple JavaScript objects (`a` and `b`). The resulting pretty-printed difference string, highlighting the changes, is logged to the console. Depends on the `jest-diff` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Marking Individual Tests as Failing with Jest (JavaScript)\nDESCRIPTION: Demonstrates usage of `test.failing` to write tests expected to fail, which inverts the usual pass/fail logic. A test that throws is considered passing, while a test that does not throw is considered failing. Only available using the jest-circus runner. Suitable for documenting expected failures or BDD workflows; no dependencies beyond Jest configured with jest-circus.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking CommonJS Electron Module and Testing with Jest (JavaScript)\nDESCRIPTION: This test file ('main.test.cjs') showcases how to mock CommonJS modules, specifically 'electron', in Jest using the jest.mock function alongside Node's createRequire utility for ESM compatibility. It demonstrates importing both mocked modules and test targets via both require and dynamic import, enabling tests of CJS and ESM interop. The snippet depends on '@jest/globals', Node.js (with 'node:module'), and Jest's ability to mock CommonJS modules. Parameters include mocked implementations for app and BrowserWindow; outputs allow for effective test coverage of code relying on Electron. Limitations: this approach is for CJS modules, and mocking ESM modules requires other APIs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ECMAScriptModules.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {createRequire} from 'node:module';\nimport {jest} from '@jest/globals';\n\nconst require = createRequire(import.meta.url);\n\njest.mock('electron', () => ({\n  app: {\n    on: jest.fn(),\n    whenReady: jest.fn(() => Promise.resolve()),\n  },\n  BrowserWindow: jest.fn().mockImplementation(() => ({\n    // partial mocks.\n  })),\n}));\n\nconst {BrowserWindow} = require('electron');\nconst exported = require('./main.cjs');\n\n// alternatively\nconst {BrowserWindow} = (await import('electron')).default;\nconst exported = await import('./main.cjs');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Typing Jest Mocks with `jest.fn` Generic (TypeScript)\nDESCRIPTION: Illustrates how to provide explicit type safety for a Jest mock function using a generic type argument with `jest.fn`. By passing `typeof add`, the mock `mockAdd` correctly infers the types of its parameters and return value, even without an initial implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Coverage Thresholds in Jest (JavaScript)\nDESCRIPTION: Illustrates defining specific coverage thresholds for different paths (`./src/components/`, `./src/api/very-important-module.js`) and globs (`./src/reducers/**/*.js`), alongside global defaults, in a Jest configuration file (CommonJS). Coverage for matching paths is subtracted from the global calculation and evaluated independently.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating a custom snapshot serializer in Jest\nDESCRIPTION: Example of implementing a custom snapshot serializer for Jest, including serialize and test functions to handle custom object formatting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  serialize(val, config, indentation, depth, refs, printer) {\n    return `Pretty foo: ${printer(val.foo)}`;\n  },\n\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using describe.only.each with Tagged Template Literals in JavaScript\nDESCRIPTION: Example of using describe.only.each with tagged template literals to run only specific data-driven test suites with table-like test data while skipping others.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Executing a Specific Jest Test File using --runTestsByPath (Bash)\nDESCRIPTION: This command demonstrates the correct usage of the `--runTestsByPath` option by providing the exact path to a specific test file (`__tests__/t1.test.js`). Jest will execute only this single test file, bypassing the default regex-based test discovery mechanism, which can improve performance in large projects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njest --runTestsByPath __tests__/t1.test.js\n```\n\n----------------------------------------\n\nTITLE: Mocking window.matchMedia in Jest/JSDOM Test Environments - JavaScript\nDESCRIPTION: This snippet provides a way to mock 'window.matchMedia' in Jest when the JSDOM implementation does not offer it. It assigns a mock function to window.matchMedia with proper mocked methods for event handling, allowing code using matchMedia to work in test environments. Dependencies include Jest and a browser-like global window object; limitations arise if matchMedia is used at the module’s top level.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ManualMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nObject.defineProperty(window, 'matchMedia', {\\n  writable: true,\\n  value: jest.fn().mockImplementation(query => ({\\n    matches: false,\\n    media: query,\\n    onchange: null,\\n    addListener: jest.fn(), // deprecated\\n    removeListener: jest.fn(), // deprecated\\n    addEventListener: jest.fn(),\\n    removeEventListener: jest.fn(),\\n    dispatchEvent: jest.fn(),\\n  })),\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Puppeteer Global Setup for Jest (JavaScript)\nDESCRIPTION: Implements a global setup script for launching a Puppeteer browser instance and exposing its WebSocket endpoint to test environments. Requires 'fs', 'os', 'path', and 'puppeteer' Node modules. The script writes the wsEndpoint string to a temp file for later connection and stores the browser globally for teardown. Place this script (setup.js) and reference it under globalSetup in your Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {mkdir, writeFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nmodule.exports = async function () {\n  const browser = await puppeteer.launch();\n  // store the browser instance so we can teardown it later\n  // this global is only available in the teardown but not in TestEnvironments\n  globalThis.__BROWSER_GLOBAL__ = browser;\n\n  // use the file system to expose the wsEndpoint for TestEnvironments\n  await mkdir(DIR, {recursive: true});\n  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());\n};\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Data-Driven Tests with test.concurrent.each and Data Array in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates test.concurrent.each with an array, which allows multiple asynchronous tests to be run in parallel, one for each parameter row. Each test asynchronously checks that a + b equals expected. Inputs are from the table array; each is handled concurrently and independently. This pattern requires async test functions and relies only on Jest. Outputs are reported as concurrent test results. Use this to efficiently test large numbers of parameter combinations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing `moduleDirectories` in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates overriding the default `moduleDirectories` in `jest.config.ts` with type safety. It instructs Jest to search for modules within both `node_modules` and `bower_components` directories during module resolution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using mockRejectedValue for failed async mocks (TypeScript)\nDESCRIPTION: TypeScript implementation of mockRejectedValue showing how to create a properly typed mock function that returns a rejected Promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jest-haste-map using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `jest-haste-map` package. The `--save-dev` flag adds it to the `devDependencies` section of the `package.json` file, indicating it's needed for development and testing but not for production runtime.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-haste-map/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jest-haste-map --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Node Inspector for Debugging (Bash)\nDESCRIPTION: Starts Jest using Node.js with the `--inspect-brk` flag, which pauses execution until a debugger attaches. The `--runInBand` flag forces tests to run sequentially in the same process, simplifying debugging. Commands are provided for both Unix-like systems and Windows.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\nor on Windows\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\n----------------------------------------\n\nTITLE: Using replaceValue with Jest replaced properties\nDESCRIPTION: Shows how to change the value of an already replaced property, allowing for property value adjustment in specific tests without calling jest.replaceProperty() multiple times.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter with Silent Reporter in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Jest to use the summary reporter along with a silent reporter, showing how to combine different reporters for custom output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Checking Mock Function Arguments with `expect().toHaveBeenCalledWith()` in Jest (JavaScript)\nDESCRIPTION: Shows how to use `jest.fn()` for mocking and the `.toHaveBeenCalledWith()` matcher (alias `.toBeCalledWith()`) to assert that a mock function (`f`) was called with specific arguments (`beverage`). The arguments are checked using deep equality (`toEqual` logic). Requires Jest environment and `jest.fn()`. Assumes `LaCroix` class, `register`, and `applyToAll` functions exist.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ntest('registration applies correctly to orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n```\n\n----------------------------------------\n\nTITLE: Jest String Pattern Matching\nDESCRIPTION: Demonstrates using stringMatching() with arrays to match string patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Module - JavaScript\nDESCRIPTION: Implements a simple ES module exporting an object with an authorize() method returning the static string 'token'. Intended as a dependency to be imported and tested or mocked in Jest test files. No dependencies beyond ES module support; input/output are static and fixed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\\n  authorize: () => {\\n    return 'token';\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom File Transformer in Jest Config\nDESCRIPTION: Jest configuration that applies a custom file transformer to various asset file types like images, fonts, and media files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CodeTransformation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use jest-circus (JSON)\nDESCRIPTION: Shows how to configure Jest to use jest-circus as the test runner by setting the testRunner option in the Jest configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-circus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"testRunner\": \"jest-circus/runner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Volume Class with Custom Equality - TypeScript\nDESCRIPTION: This TypeScript class Volume encapsulates a numeric amount and unit ('L' or 'mL'), and provides an equals method for unit conversion-aware equality. This is intended for use with Jest's custom equality tester registration, where strict or cross-unit comparisons may be needed for domain objects. No external dependencies are needed if used in a TypeScript environment compliant with ES module syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Volume {\\n  public amount: number;\\n  public unit: 'L' | 'mL';\\n\\n  constructor(amount: number, unit: 'L' | 'mL') {\\n    this.amount = amount;\\n    this.unit = unit;\\n  }\\n\\n  toString(): string {\\n    return `[Volume ${this.amount}${this.unit}]`;\\n  }\\n\\n  equals(other: Volume): boolean {\\n    if (this.unit === other.unit) {\\n      return this.amount === other.amount;\\n    } else if (this.unit === 'L' && other.unit === 'mL') {\\n      return this.amount * 1000 === other.amount;\\n    } else {\\n      return this.amount === other.amount * 1000;\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing JestWorker with `computeWorkerKey` for Bound Tasks in JavaScript\nDESCRIPTION: This snippet (`parent.js`) illustrates creating a `JestWorker` with a `computeWorkerKey` function. This function determines which worker handles a specific task based on its arguments (here, the filename). This is useful for caching or maintaining state within a worker for specific inputs, as subsequent calls with the same key are routed to the same worker. Requires the `jest-worker` package and a corresponding `./worker.js`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {Worker as JestWorker} from 'jest-worker';\n\nasync function main() {\n  const myWorker = new JestWorker(require.resolve('./worker'), {\n    computeWorkerKey: (method, filename) => filename,\n  });\n\n  // Transform the given file, within the first available worker.\n  console.log(await myWorker.transform('/tmp/foo.js'));\n\n  // Wait a bit.\n  await sleep(10_000);\n\n  // Transform the same file again. Will immediately return because the\n  // transformed file is cached in the worker, and `computeWorkerKey` ensures\n  // the same worker that processed the file the first time will process it now.\n  console.log(await myWorker.transform('/tmp/foo.js'));\n\n  const {forceExited} = await myWorker.end();\n  if (forceExited) {\n    console.error('Workers failed to exit gracefully');\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Static Asset Handling\nDESCRIPTION: Jest configuration to mock out static assets like stylesheets and images using moduleNameMapper.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Paths in Jest\nDESCRIPTION: Configuration for adding additional locations to search when resolving modules. Alternative to setting NODE_PATH environment variable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring `preset` using a relative path in Jest (JavaScript)\nDESCRIPTION: Sets the `preset` option in `jest.config.js` using a relative filesystem path. Jest will load the configuration preset from the specified file path, which is resolved relative to the project's `rootDir` if defined.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset for Puppeteer\nDESCRIPTION: JSON configuration for specifying jest-puppeteer as a preset in Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"jest-puppeteer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns with Exceptions in JavaScript\nDESCRIPTION: Shows how to configure Jest's transformIgnorePatterns to exclude node_modules except for specific packages, with a warning about overlapping patterns that can cause unexpected behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced coverageThreshold in Jest with Path-Specific Settings (JavaScript)\nDESCRIPTION: This example demonstrates how to set different coverage thresholds for specific files and directories in Jest. It applies different standards to components, reducers, important modules, and maintains a baseline coverage requirement for all other files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Custom Reporters Configuration in Jest - TypeScript\nDESCRIPTION: Jest configuration for specifying custom and built-in reporters in TypeScript. The 'reporters' field includes both string names for built-in reporters and a tuple for custom reporters, where the first element is the module path and the second is an options object passed to the reporter class. This approach requires Jest, and any custom reporters must be implemented as exportable classes.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Exclusive Data-Driven Test Suites with describe.only.each Template Table in Jest (JavaScript)\nDESCRIPTION: Using a tagged template literal with describe.only.each, this snippet exclusively runs a test suite for each data row, substituting values into the test title. The provided function verifies that addition matches the expected sum. A non-exclusive test demonstrates that only the describe.only.each suite is executed. No special dependencies are required except Jest, and table headers are mapped as variables. Injection of nested values in titles is restricted to own properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Core Jest APIs in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the required import statement for using Jest's core testing APIs (`expect`, `jest`, `test`) within a TypeScript file. Importing from '@jest/globals' makes these functions available in the module scope, which is necessary for type checking and proper execution when Jest is configured with TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/_TypeScriptExamplesNote.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Native\nDESCRIPTION: Basic Jest configuration setup in package.json for React Native applications\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReactNative.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest via Package Manager and Argument Format Flexibility - Bash\nDESCRIPTION: These snippets demonstrate invoking Jest through a package manager (such as npm or yarn), passing CLI arguments, and illustrate support for both dashed and camelcase argument formats. No additional prerequisites are required beyond a standard JavaScript/Node.js setup with Jest installed. Inputs are the respective CLI calls; output is standard Jest terminal output. Mixing argument styles is permitted, offering flexibility in automation scripts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njest -u -t=\"ColorPicker\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -u -t=\"ColorPicker\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --collect-coverage\njest --collectCoverage\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --update-snapshot --detectOpenHandles\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library\nDESCRIPTION: Command to install React Testing Library for DOM testing of React components.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Configuring setupFilesAfterEnv in TypeScript\nDESCRIPTION: TypeScript example of setting up setupFilesAfterEnv in Jest configuration to specify a setup file that runs after the test framework is initialized.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Floating Point Precision with toBeCloseTo in Jest (JavaScript)\nDESCRIPTION: This code illustrates using the `toBeCloseTo` matcher to compare floating-point numbers in Jest. It asserts that the sum of `0.1` and `0.2` is approximately equal to `0.3`, circumventing issues due to floating-point precision errors. Jest must be installed; parameters are internal, and output is pass/fail of assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UsingMatchers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntest('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Hook for File Changes in JavaScript\nDESCRIPTION: Example of using the onFileChange hook to react to file system changes in watched projects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onFileChange(({projects}) => {\n      this._projects = projects;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Webpack Aliases in Jest Configuration (JavaScript)\nDESCRIPTION: This jest.config.js snippet expands on previous moduleNameMapper usage by mapping JavaScript import aliases (e.g., 'react' and 'config') from webpack’s resolve.alias into Jest’s configuration. Also retains custom paths and asset mocks. This allows tests to correctly resolve the same modules as webpack during builds.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n\n    '^react(.*)$': '<rootDir>/vendor/react-master$1',\n    '^config$': '<rootDir>/configs/app-config.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing HasteMap in JavaScript\nDESCRIPTION: This snippet demonstrates the basic syntax for creating a new `HasteMap` instance in JavaScript. It requires importing `HasteMap` (adjusting for ES Modules or CommonJS) and calling its constructor (`HasteMap.default` likely for ES Modules) with an options object, which configures how the map will be built and behave.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-haste-map/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new HasteMap.default({\n  // options\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Mock Function Types with jest.Mock in TypeScript\nDESCRIPTION: Demonstrates using the `jest.Mock<T>` utility type in TypeScript to explicitly define the type signature of a mock function variable. This is particularly useful for scenarios like defining recursive mock functions where the type needs to be declared before the implementation that references itself. `T` should be the function signature. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    // Error: 'fn' is not defined. Assuming 'sumRecursively' was intended.\n    // Corrected code would be:\n    // return value + sumRecursively(value - 1);\n    return value + fn(value - 1); // Original potentially erroneous code\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Reporter in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom Jest reporter class in JavaScript. It includes constructor and onRunComplete methods, as well as an optional getLastError method.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomReporter {\n  constructor(globalConfig, reporterOptions, reporterContext) {\n    this._globalConfig = globalConfig;\n    this._options = reporterOptions;\n    this._context = reporterContext;\n  }\n\n  onRunComplete(testContexts, results) {\n    console.log('Custom reporter output:');\n    console.log('global config:', this._globalConfig);\n    console.log('options for this reporter from Jest config:', this._options);\n    console.log('reporter context passed from test scheduler:', this._context);\n  }\n\n  // Optionally, reporters can force Jest to exit with non zero code by returning\n  // an `Error` from `getLastError()` method.\n  getLastError() {\n    if (this._shouldFail) {\n      return new Error('Custom error reported!');\n    }\n  }\n}\n\nmodule.exports = CustomReporter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fake Timers in Jest Tests\nDESCRIPTION: Shows how to use fake timers in Jest tests. This example installs fake timers using configuration from Jest and demonstrates how to increase the timer limit for specific tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// install fake timers for this file using the options from Jest configuration\njest.useFakeTimers();\n\ntest('increase the limit of recursive timers for this and following tests', () => {\n  jest.useFakeTimers({timerLimit: 5000});\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module File Extensions and Directories (JavaScript)\nDESCRIPTION: This jest.config.js entry sets up moduleFileExtensions and moduleDirectories to match webpack’s configuration for recognized file extensions and lookup paths, respectively. It maps CSS/LESS and select asset extensions to their corresponding mock files for use in tests. Ensure the listed directories and mocks exist in the project for this configuration to succeed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: VS Code Debugger Configuration for Jest Tests on Windows\nDESCRIPTION: Windows-specific VS Code launch.json configuration to debug Jest tests. This uses the correct path to the Jest binary on Windows systems.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example of Jest transformIgnorePatterns\nDESCRIPTION: This JSON snippet illustrates a potential pitfall when defining `transformIgnorePatterns`. Splitting the pattern into multiple strings with negative lookaheads can lead to unintended behavior where the exclusions cancel each other out, potentially transforming modules that should be ignored or vice-versa.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\"node_modules/(?!foo/)\", \"node_modules/(?!bar/)\"] // not what you want\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Snapshot Failures with Dynamic Data in JavaScript\nDESCRIPTION: This code illustrates a common issue where snapshot tests fail due to dynamic data. An object with a `createdAt` (current date) and a random `id` is snapshotted. Because these values change on every test run, the generated snapshot (shown in the comment) will not match subsequent runs, causing the test to fail consistently.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('will fail every time', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot();\n});\n\n// Snapshot\nexports[`will fail every time 1`] = `\n{\n  \"createdAt\": 2018-05-19T23:36:09.816Z,\n  \"id\": 3,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Using restore with Jest replaced properties\nDESCRIPTION: Demonstrates how to restore an object's property to its original value after it has been replaced using jest.replaceProperty().\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Exporting a Jest Filter Function - JavaScript\nDESCRIPTION: This JavaScript snippet exports a filter module for Jest's --filter option. It provides an asynchronous function that takes in an array of test file paths, applies a filtering function, and returns an object with the \\'filtered\\' property containing test objects (with property 'test'). It can be used by passing the file to Jest's --filter CLI argument. The filtering logic must be implemented via the custom 'filteringFunction'. Input: array of test paths. Output: object {filtered: [{test: string}, ...]}. No package dependencies required, but expected to be used in a Jest environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = testPaths => {\n  const allowedPaths = testPaths\n    .filter(filteringFunction)\n    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]\n\n  return {\n    filtered: allowedPaths,\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Testing Framework in JavaScript\nDESCRIPTION: This configuration exports an object with various Jest settings. It specifies module file extensions, sets up the test environment, and defines transformations for different file types. The configuration also includes coverage collection settings and global setup files.\nSOURCE: https://github.com/jestjs/jest/blob/main/e2e/resolve/__tests__/nope.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  collectCoverageFrom: [\n    '**/packages/*/**/*.js',\n    '**/packages/*/**/*.ts',\n    '!**/bin/**',\n    '!**/cli/**',\n    '!**/__mocks__/**',\n    '!**/__tests__/**',\n    '!**/build/**',\n    '!**/vendor/**',\n    '!e2e/**',\n  ],\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n  setupFiles: ['<rootDir>/packages/jest-jasmine2/build/jasmineAsyncInstall.js'],\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['/node_modules/', '/examples/'],\n  transform: {\n    '\\\\.[jt]sx?$': '<rootDir>/packages/babel-jest',\n    '\\\\.(ts|tsx)$': '<rootDir>/packages/ts-jest',\n  },\n  watchPlugins: [\n    'jest-watch-typeahead/filename',\n    'jest-watch-typeahead/testname',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing transformIgnorePatterns in Jest Configuration\nDESCRIPTION: This snippet shows how to customize the transformIgnorePatterns option in the Jest configuration to include additional npm modules for Babel transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(react-native|my-project|react-native-button)/)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with jest.enableAutomock in JavaScript\nDESCRIPTION: Demonstrates enabling automocking via jest.enableAutomock(), causing imported module functions to be replaced with mocks. The test asserts that both 'authorize' and 'isAuthorized' are now mock functions. Dependency: Jest, utility module. Input: test runner; Output: assertion results on mockedness.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.enableAutomock();\\n\\nimport utils from '../utils';\\n\\ntest('original implementation', () => {\\n  // now we have the mocked implementation,\\n  expect(utils.authorize._isMockFunction).toBeTruthy();\\n  expect(utils.isAuthorized._isMockFunction).toBeTruthy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Object Key Order in Diff (JS)\nDESCRIPTION: Demonstrates using the `compareKeys` option to control the sorting of keys when diffing objects. By providing a comparison function that always returns 0 (`() => 0`), the default alphabetical sorting is disabled, and keys are displayed in their original order. Requires the `diff` function from `jest-diff`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst a = {c: 'c', b: 'b1', a: 'a'};\nconst b = {c: 'c', b: 'b2', a: 'a'};\n\nconst options = {\n  // The keys will be in their original order\n  compareKeys: () => 0,\n};\n\nconst difference = diff(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Watchman Integration\nDESCRIPTION: Command line option for controlling Jest's integration with Watchman for file crawling. The --watchman flag enables Watchman integration, while --no-watchman disables it.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n--watchman\n--no-watchman\n```\n\n----------------------------------------\n\nTITLE: Using Jest Replace Property API\nDESCRIPTION: Shows usage of the new jest.replaceProperty() API for replacing property values during testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { prop: 'original' };\njest.replaceProperty(obj, 'prop', 'replaced');\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Mocking a Class in JavaScript\nDESCRIPTION: Defines a JavaScript object to specify the metadata schema for a class with both static methods and instance methods for use with mock generation. The metadata structure describes the presence and types of all members, including prototypes, as required by jest-mock's getMetadata() and generateFromMetadata() APIs. Inputs are the function and its members; expected output is a descriptive recursive metadata object. This approach is essential for accurately recreating class-like structures during mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-mock/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst classDef = {\n  type: 'function',\n  members: {\n    staticMethod: {type: 'function'},\n    prototype: {\n      type: 'object',\n      members: {\n        instanceMethod: {type: 'function'},\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Puppeteer Global Teardown Script (JavaScript)\nDESCRIPTION: Defines a Jest global teardown script (`teardown.js`). It accesses the globally stored Puppeteer browser instance (from `setup.js`) via `globalThis.__BROWSER_GLOBAL__`, closes it, and then removes the temporary directory containing the WebSocket endpoint file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// teardown.js\nconst fs = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\nmodule.exports = async function () {\n  // close the browser instance\n  await globalThis.__BROWSER_GLOBAL__.close();\n\n  // clean-up the wsEndpoint file\n  await fs.rm(DIR, {recursive: true, force: true});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom toBe Matcher with jest-diff in JavaScript\nDESCRIPTION: Example implementation of the toBe matcher that uses jest-diff and utility functions like matcherHint, printExpected, and printReceived to format error messages. It compares values using Object.is and generates detailed error messages with optional diff output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshotFormat in Jest - JavaScript\nDESCRIPTION: This JavaScript config file shows how to customize snapshot formatting in Jest by setting snapshotFormat. The example disables printBasicPrototype to omit the prototype name for objects and arrays. Configuration is exported as a CommonJS module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Module with Diverse Data Types (JavaScript)\nDESCRIPTION: Exports a JavaScript object (`example.js`) containing various data types: functions, async functions, class instances, nested objects, arrays, and primitives (number, string, boolean, symbol). This module is specifically designed to illustrate how `jest.createMockFromModule` handles mocking each of these different JavaScript constructs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  function: function square(a, b) {\n    return a * b;\n  },\n  asyncFunction: async function asyncSquare(a, b) {\n    const result = (await a) * b;\n    return result;\n  },\n  class: new (class Bar {\n    constructor() {\n      this.array = [1, 2, 3];\n    }\n    foo() {}\n  })(),\n  object: {\n    baz: 'foo',\n    bar: {\n      fiz: 1,\n      buzz: [1, 2, 3],\n    },\n  },\n  array: [1, 2, 3],\n  number: 123,\n  string: 'baz',\n  boolean: true,\n  symbol: Symbol.for('a.b.c'),\n};\n```\n\n----------------------------------------\n\nTITLE: Setting workerIdleMemoryLimit in Jest (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set the workerIdleMemoryLimit option in a Jest configuration file using JavaScript. It sets the memory limit for workers to 20% of the system memory before they are recycled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Creating Async Jest Configuration with JavaScript\nDESCRIPTION: Example of a Jest configuration file using JavaScript that returns a Promise for async configuration. This pattern allows for asynchronous operations during configuration generation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @returns {Promise<import('jest').Config>} */\nmodule.exports = async () => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest modulePathIgnorePatterns in JavaScript\nDESCRIPTION: Sets the `modulePathIgnorePatterns` option in a Jest JavaScript configuration. This option takes an array of regular expression strings. Module paths matching any of these patterns will not be resolvable by the module loader in the test environment. The example uses `<rootDir>` to ignore a specific build directory relative to the project root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_48\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Call Return Value with `mockReturnValueOnce` Shorthand (JavaScript)\nDESCRIPTION: Provides the shorthand equivalent for `mockFn.mockReturnValueOnce(value)`. This method is used to specify a return value for only the next call to the mock function. It utilizes `jest.fn().mockImplementationOnce()` internally.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\n----------------------------------------\n\nTITLE: Custom Asset File Transformer for Jest\nDESCRIPTION: A custom transformer that returns the basename of a file. This is an alternative approach to handling assets in Jest when moduleNameMapper is insufficient.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using findRepos function to get git and hg repositories\nDESCRIPTION: Example of using the findRepos function to get a set of git and hg repositories. It returns a Promise that resolves to an object containing git and hg Sets of paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {findRepos} from 'jest-changed-files';\n\nfindRepos(['/path/to/test']).then(repos => {\n  /*\n  {\n    git: Set<Path>,\n    hg: Set<Path>\n  }\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Using require('v8') in Jest Tests (Node.js/JavaScript)\nDESCRIPTION: As of Jest 18.0.0, requiring the built-in Node.js 'v8' module (`require('v8')`) works correctly within a test context managed by Jest. Previously, there might have been issues accessing certain Node.js built-ins.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('v8')\n```\n\n----------------------------------------\n\nTITLE: Manual Mock Equivalent for Class with Named Mock Method - Jest - JavaScript\nDESCRIPTION: Provides a manual mock pattern for a class, exporting both the mock method and the overall class mock from a __mocks__ directory file. Makes the mockPlaySoundFile available for assertions in tests. Input includes the import of this manual mock; output is aligned with Jest's automatic mocking capabilities.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Import this named export into your test file\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset using Relative Path in JavaScript\nDESCRIPTION: Shows how to configure the Jest `preset` option in JavaScript using a relative file system path. This points directly to a preset file (e.g., within `node_modules`), allowing Jest to load it as a base configuration. The path resolution is relative to `rootDir` if specified.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_55\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using describe.skip.each with Array Parameter in JavaScript\nDESCRIPTION: Example of using describe.skip.each with an array of test case parameters to skip data-driven test suites. The tests will be defined but not executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Write Jest Test for DynamoDB Interaction (JavaScript)\nDESCRIPTION: Demonstrates a Jest test case interacting with the configured DynamoDB instance. It uses the initialized `DocumentClient` (`ddb`) to perform a `put` operation to insert an item and a `get` operation to retrieve it, then uses `expect` to assert that the retrieved item matches the inserted data.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/DynamoDB.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('should insert item into table', async () => {\n  await ddb\n    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})\n    .promise();\n\n  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();\n\n  expect(Item).toEqual({\n    id: '1',\n    hello: 'world',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in Jest Configuration\nDESCRIPTION: This snippet demonstrates how to use the moduleNameMapper configuration option in Jest to map module paths to different modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"moduleNameMapper\": {\n    \"my-module.js\": \"<rootDir>/path/to/my-module.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Jest Test Path Filtering Function - JavaScript\nDESCRIPTION: This Node.js snippet shows how to export a custom test path filtering function for use with the Jest `--filter` CLI flag. The function receives an array of test paths and must return an object with a 'filtered' array of test path objects. It depends on the Node.js module system and optional user-defined filtering logic. Expected input is an array of test file paths, and output is a filtered object used to restrict which tests Jest executes. Modular, composable, and intended for advanced test selection automation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = testPaths => {\n  const allowedPaths = testPaths\n    .filter(filteringFunction)\n    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]\n\n  return {\n    filtered: allowedPaths,\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Collection Source Files (JS/TS)\nDESCRIPTION: Examples of setting the `collectCoverageFrom` option in Jest configuration using an array of glob patterns. This option specifies which files should be included in the coverage report, even if they are not directly tested or required. The example includes patterns to cover all JS/JSX files while excluding `node_modules` and `vendor` directories. This option requires `collectCoverage: true` or the `--coverage` flag.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\n/** @type {import('jest').Config} */\nconst config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nmodule.exports = config;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking Static Assets in Jest Configuration (JavaScript)\nDESCRIPTION: This jest.config.js snippet configures Jest to mock static asset imports such as images, fonts, audio, and style files, mapping them to local mock modules instead of attempting to load them. It uses 'moduleNameMapper' to replace file patterns with corresponding mock files, facilitating isolated JavaScript testing. Requires the existence of file and style mocks in the project's __mocks__ directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Concurrent Tests with test.concurrent.skip.each in Jest\nDESCRIPTION: Demonstrates how to use test.concurrent.skip.each to skip a collection of asynchronous data-driven tests. It includes examples for both array and template literal syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GlobalAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Mock Static Assets in JavaScript\nDESCRIPTION: Sets up Jest via CommonJS export to mock static asset imports like images and stylesheets using the moduleNameMapper option. Requires corresponding mock files (fileMock.js, styleMock.js) placed in __mocks__ directory at the project root. Allows tests to run without processing actual asset files. Inputs are RegExp patterns for asset extensions; output is redirected to mock modules. Dependencies: Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Jest Fake Timers Globally (JavaScript/TypeScript)\nDESCRIPTION: Configures Jest to enable fake timers globally for all test files by setting `enableGlobally: true` within the `fakeTimers` object in the Jest configuration file. This avoids needing to call `jest.useFakeTimers()` in each test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot File Content (JavaScript)\nDESCRIPTION: This snippet shows the content of a typical `.snap` file generated by Jest for the corresponding test case. It exports the serialized representation of the rendered component (`<a>` tag in this case), including its props and structure. This file is committed alongside the code and used for future comparisons.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Matcher 'toBe' using jest-matcher-utils\nDESCRIPTION: Demonstrates how to define a custom Jest matcher named 'toBe' using `expect.extend`. It utilizes `this.utils` (specifically `matcherHint`, `printExpected`, `printReceived`) from `jest-matcher-utils` and `diff` from `jest-diff` to provide well-formatted error messages upon assertion failure, comparing received and expected values using `Object.is`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Recursive Timers with jest.runOnlyPendingTimers()\nDESCRIPTION: This Jest test suite validates the `infiniteTimerGame` function using fake timers. It checks that the initial `setTimeout` is scheduled correctly. It then uses `jest.runOnlyPendingTimers()` to execute only the currently pending timer (the initial 1-second one) without triggering the recursively scheduled timers, preventing an infinite loop. Assertions verify the callback execution and the scheduling of the subsequent 10-second timer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ndescribe('infiniteTimerGame', () => {\n  test('schedules a 10-second timer after 1 second', () => {\n    const infiniteTimerGame = require('../infiniteTimerGame');\n    const callback = jest.fn();\n\n    infiniteTimerGame(callback);\n\n    // At this point in time, there should have been a single call to\n    // setTimeout to schedule the end of the game in 1 second.\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n\n    // Fast forward and exhaust only currently pending timers\n    // (but not any new timers that get created during that process)\n    jest.runOnlyPendingTimers();\n\n    // At this point, our 1-second timer should have fired its callback\n    expect(callback).toHaveBeenCalled();\n\n    // And it should have created a new timer to start the game over in\n    // 10 seconds\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Recursive Timers Using Jest's runOnlyPendingTimers\nDESCRIPTION: A Jest test for functions with recursive timers using jest.runOnlyPendingTimers(). This approach prevents infinite loops by only running currently scheduled timers, not any new ones created in the process.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TimerMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ndescribe('infiniteTimerGame', () => {\n  test('schedules a 10-second timer after 1 second', () => {\n    const infiniteTimerGame = require('../infiniteTimerGame');\n    const callback = jest.fn();\n\n    infiniteTimerGame(callback);\n\n    // At this point in time, there should have been a single call to\n    // setTimeout to schedule the end of the game in 1 second.\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n\n    // Fast forward and exhaust only currently pending timers\n    // (but not any new timers that get created during that process)\n    jest.runOnlyPendingTimers();\n\n    // At this point, our 1-second timer should have fired its callback\n    expect(callback).toHaveBeenCalled();\n\n    // And it should have created a new timer to start the game over in\n    // 10 seconds\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests with Randomized Order and Specific Seed (Bash)\nDESCRIPTION: Executes Jest tests using the `jest` command, enabling test randomization within files via `--randomize` and setting a specific seed value (`1234`) with `--seed`. This combination ensures that the randomized order is reproducible, which is useful for debugging flaky tests that might only fail in certain orders. Requires Jest to be installed and uses the default `jest-circus` test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest --randomize --seed 1234\n```\n\n----------------------------------------\n\nTITLE: Typing Recursive Jest Mocks with `jest.Mock` (TypeScript)\nDESCRIPTION: Shows how to use the `jest.Mock<T>` utility type to explicitly define the type signature of a mock function, particularly useful for recursive functions where type inference might be challenging.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    // Assuming `fn` here refers to `sumRecursively` for recursion\n    // Note: Original snippet had `fn` which might be a typo for `sumRecursively`\n    return value + sumRecursively(value - 1); \n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Function Name in pretty-format with and without Plugins (JavaScript)\nDESCRIPTION: Demonstrates prettyFormat's 'printFunctionName' option for suppressing function names, comparing outputs when used with a classic print/test plugin and when used natively. Shows that the plugin ignores 'printFunctionName', continuing to show names and counts, while native output omits the name when the flag is set. Useful to illustrate limitations of the legacy print/test interface versus serialize/test. Requires prettyFormat, a legacy plugin, and val. Output presented as comments.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Running Jest Performance Benchmark with Hyperfine\nDESCRIPTION: Command to benchmark Jest performance using hyperfine tool with warm-up runs and multiple iterations. Compares performance between two Jest installations with warmup (-w) of 3 runs and minimum (-m) of 10 runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/benchmarks/test-file-overhead/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhyperfine -w 3 -m 10 ../../jest /tmp/other-jest-clone-to-compare-against/jest\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with MongoDB Preset (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set the Jest configuration to use the @shelf/jest-mongodb preset. By specifying the 'preset' property in your jest.config.js or package.json, Jest is instructed to use the custom environment and setup hooks required for MongoDB integration. No additional configuration is required for basic usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MongoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-mongodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using .toHaveLength Matcher in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 17.0.3, the `.toHaveLength(number)` matcher asserts that an object (like an array or string) has a `.length` property with the specified numeric value.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n.toHaveLength\n```\n\n----------------------------------------\n\nTITLE: Test Coverage Configuration with forceCoverageMatch in Jest\nDESCRIPTION: Example showing how to write tests in source files with .t.js extension and collect coverage using forceCoverageMatch configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport function sum(a, b) {\n  return a + b;\n}\n\nif (process.env.NODE_ENV === 'test') {\n  test('sum', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Test Environment in Jest\nDESCRIPTION: Example of creating a custom test environment class with setup, teardown, and event handling capabilities\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nclass CustomEnvironment extends NodeEnvironment {\n  constructor(config, context) {\n    super(config, context);\n    console.log(config.globalConfig);\n    console.log(config.projectConfig);\n    this.testPath = context.testPath;\n    this.docblockPragmas = context.docblockPragmas;\n  }\n\n  async setup() {\n    await super.setup();\n    await someSetupTasks(this.testPath);\n    this.global.someGlobalObject = createGlobalObject();\n\n    // Will trigger if docblock contains @my-custom-pragma my-pragma-value\n    if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {\n      // ...\n    }\n  }\n\n  async teardown() {\n    this.global.someGlobalObject = destroyGlobalObject();\n    await someTeardownTasks();\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n\n  async handleTestEvent(event, state) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n\nmodule.exports = CustomEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Test Suites with describe.skip.each and Tagged Template Literals in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to skip a suite of parameterized tests using describe.skip.each with a tagged template literal. All tests in the skipped block are ignored, and tests outside remain active. Input is a table specified through tagged template literal; dependency is Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ndescribe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('will not be run', () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Identifying Changed Files with jest-changed-files in JavaScript\nDESCRIPTION: This snippet shows how to use the `getChangedFilesForRoots` function from the `jest-changed-files` package to identify files modified since the last commit in the current Git/Hg repository. It requires the `jest-changed-files` package and outputs the set of changed files to the console.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// print the set of modified files since last commit in the current repo\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with jest-mongodb Preset (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to set the `preset` property within a Jest configuration file (e.g., `jest.config.js` or the `jest` section in `package.json`) to `@shelf/jest-mongodb`. Applying this preset automatically configures Jest's global setup/teardown and test environment for MongoDB.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MongoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-mongodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Test Runner Function Signature\nDESCRIPTION: TypeScript signature for a custom test runner function. Test runners must export a function that accepts configuration objects, environment, runtime, and test path parameters, returning a Promise with test results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_74\n\nLANGUAGE: ts\nCODE:\n```\nfunction testRunner(\n  globalConfig: GlobalConfig,\n  config: ProjectConfig,\n  environment: Environment,\n  runtime: Runtime,\n  testPath: string,\n): Promise<TestResult>;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Resolver in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom resolver for Jest using the browser-resolve package. It shows how to implement a synchronous resolver function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Test Sequencer in JavaScript\nDESCRIPTION: Example of how to configure Jest to use a custom test sequencer by specifying the path to the sequencer file in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_75\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Limiting Jest Worker Threads (Bash)\nDESCRIPTION: Shows how to use the `--maxWorkers` command-line option to explicitly set the maximum number of worker processes Jest can spawn for parallel test execution. Limiting workers (e.g., to 4 as shown) can improve performance and prevent resource exhaustion on CI servers or machines with limited CPU cores.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --maxWorkers=4\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --maxWorkers=4\n```\n\n----------------------------------------\n\nTITLE: Implementing an Async Custom Matcher in Jest\nDESCRIPTION: Creates an asynchronous custom matcher that checks if a number is divisible by a value retrieved from an external source. Demonstrates the structure of async matchers that return Promises.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue === 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring sandboxInjectedGlobals in JavaScript\nDESCRIPTION: Example of configuring sandboxInjectedGlobals to optimize calls to Math operations in Jest tests by defining them inside the vm for faster lookups.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring displayName in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation of adding a display name label to Jest tests. This helps identify which project a test belongs to when running tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: 'CLIENT',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for CSS Modules\nDESCRIPTION: Jest configuration to use identity-obj-proxy for mocking CSS Modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Test Results Processor Input Structure\nDESCRIPTION: JSON schema for the input object structure that a custom test results processor receives. This processor must be a node module that exports a function expecting this object as the first argument.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": boolean,\n  \"startTime\": epoch,\n  \"numTotalTestSuites\": number,\n  \"numPassedTestSuites\": number,\n  \"numFailedTestSuites\": number,\n  \"numRuntimeErrorTestSuites\": number,\n  \"numTotalTests\": number,\n  \"numPassedTests\": number,\n  \"numFailedTests\": number,\n  \"numPendingTests\": number,\n  \"numTodoTests\": number,\n  \"openHandles\": Array<Error>,\n  \"testResults\": [{\n    \"numFailingTests\": number,\n    \"numPassingTests\": number,\n    \"numPendingTests\": number,\n    \"testResults\": [{\n      \"title\": string (message in it block),\n      \"status\": \"failed\" | \"pending\" | \"passed\",\n      \"ancestorTitles\": [string (message in describe blocks)],\n      \"failureMessages\": [string],\n      \"numPassingAsserts\": number,\n      \"location\": {\n        \"column\": number,\n        \"line\": number\n      },\n      \"duration\": number | null\n    },\n    ...\n    ],\n    \"perfStats\": {\n      \"start\": epoch,\n      \"end\": epoch\n    },\n    \"testFilePath\": absolute path to test file,\n    \"coverage\": {}\n  },\n  \"testExecError:\" (exists if there was a top-level failure) {\n    \"message\": string\n    \"stack\": string\n  }\n  ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to use MongoDB Preset - JSON\nDESCRIPTION: Sets the 'preset' field in the Jest configuration file to '@shelf/jest-mongodb', which instructs Jest to use the MongoDB preset. This enables automatic global setup/teardown and correct environment settings for MongoDB integration tests. This JSON block must be added to the main Jest config (e.g., jest.config.js or package.json). No additional configuration is needed for basic functionality.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MongoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-mongodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Seed for a Jest Test Run (Bash)\nDESCRIPTION: Executes Jest tests with a predefined seed value (`1324`) using the `--seed` option. This seed value influences the order in which test suites are run and, if `--randomize` is active, the order of tests within suites. Using a fixed seed allows for reproducible test runs, aiding in debugging.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\njest --seed=1324\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Tests with describe.skip.each (Template Literal) in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `describe.skip.each` with a tagged template literal (`table`) to skip a specific suite of parameterized tests. Tests defined within this block will not execute, but other tests or suites outside this block remain unaffected.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\ndescribe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('will not be run', () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Mock Function Creation in TypeScript\nDESCRIPTION: Illustrates how to create type-safe mock functions in TypeScript using jest.fn() with generic type arguments. This ensures proper typing for mock implementations and usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Manual Mock Paths in Jest (JavaScript)\nDESCRIPTION: Jest 19.0.0 introduced support for manual mocks located within nested folders under the `__mocks__` directory. This example path demonstrates mocking the `Text` component from the `react-native/Libraries` directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n__mocks__/react-native/Library/Text.js\n```\n\n----------------------------------------\n\nTITLE: Running Parameterized Concurrent Tests with Only Modifier Using Tagged Templates in Jest (JavaScript)\nDESCRIPTION: Showcases the use of test.concurrent.only.each with a tagged template literal to define table-driven parameterized tests. Each row provides test data for variables a, b, and expected; each test title dynamically reflects the test case. Requires Jest, expects async handler, and automatically injects values as test parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Resolver with Package Filter\nDESCRIPTION: This snippet demonstrates how to create a custom Jest resolver that modifies package.json resolution. It uses the 'module' field if present, otherwise falls back to 'main'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (path, options) => {\n  // Call the defaultResolver, so we leverage its cache, error handling, etc.\n  return options.defaultResolver(path, {\n    ...options,\n    // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)\n    packageFilter: pkg => {\n      return {\n        ...pkg,\n        // Alter the value of `main` before resolving the package\n        main: pkg.module || pkg.main,\n      };\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onTestRunComplete Hook in Jest Watch Plugin\nDESCRIPTION: Example of using the onTestRunComplete hook to process test results after tests have finished running. This example tracks snapshot failures.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onTestRunComplete(results => {\n      this._hasSnapshotFailure = results.snapshot.failure;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Mocks between Tests with beforeEach - Jest - JavaScript\nDESCRIPTION: Shows how to use beforeEach to clear the call and state history of Jest mocks before each test, promoting test isolation and preventing cross-test contamination. Inputs: mock objects/functions to clear; output: fresh mock state per test.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Function-Describing print Plugin and Default prettyFormat (JavaScript)\nDESCRIPTION: Shows usage of the function-formatting plugin by pretty-formatting an object with method properties. Exhibits the difference between plugin-enhanced output, which includes both function names and argument counts, and default pretty-format output, which only shows the name. Input includes prettyFormat, the plugin, and the val object. Highlights how plugins modify function summaries but default output only includes names, without argument counts.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Returning 'this' from Mock Function in JavaScript\nDESCRIPTION: Shows how to create a mock function that returns the 'this' context using mockReturnThis(), which is equivalent to the shown implementation.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\njest.fn(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests from Command Line - Bash\nDESCRIPTION: These Bash snippets show how to execute Jest test suites using the `jest` CLI, filter tests by patterns or filenames, and leverage CLI flags for common workflows such as related file changes and spec name filtering. No additional setup beyond Jest installation is required. Key parameters include specifying test paths or patterns, flags for filtering, and options for watch mode. The expected input is the CLI call, outputting results to the terminal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njest\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest my-test #or\njest path/to/my-test.js\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -o\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -t name-of-spec\n\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --watch #runs jest -o by default\njest --watchAll #runs all tests\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Colored Test Display Name in Jest (TypeScript)\nDESCRIPTION: Provides a typed example (using `Config` from 'jest') of setting `displayName` as an object with `name` and `color` properties for a customized, colored test label in a Jest configuration (ES Module). Colors are based on the `chalk` library.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Global Setup Module in Jest (JavaScript)\nDESCRIPTION: Provides an example of a `globalSetup` module (`setup.js`) for Jest. This module must export a function (sync or async) that runs once before all test suites. It receives Jest's `globalConfig` and `projectConfig` as arguments. This example logs parts of the configuration and sets a global reference (`globalThis.__MONGOD__`) to a MongoDB instance, presumably for use in the global teardown phase.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPatterns);\n  console.log(projectConfig.cache);\n\n  // Set reference to mongod in order to close the server during teardown.\n  globalThis.__MONGOD__ = mongod;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ts-jest for TypeScript with Jest - Bash\nDESCRIPTION: Installs 'ts-jest' as a dev dependency, allowing Jest to preprocess and run TypeScript code with source map support. Used when type checking with Babel is insufficient and stronger TypeScript integration is needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev ts-jest\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure for Jest Mocks - Bash\nDESCRIPTION: This bash code block visually represents a typical project directory layout used for manual mocks in Jest. It shows where to place __mocks__ directories adjacent to both modules and node_modules to ensure proper mocking behavior in tests. It acts as a reference for developers to organize their files to facilitate Jest's module replacement.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ManualMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── config\\n├── __mocks__\\n│   └── fs.js\\n├── models\\n│   ├── __mocks__\\n│   │   └── user.js\\n│   └── user.js\\n├── node_modules\\n└── views\\n\n```\n\n----------------------------------------\n\nTITLE: Setting and Overriding Mock Implementations with mockImplementation in Jest TypeScript\nDESCRIPTION: Similar to the JavaScript variation, this TypeScript snippet uses type annotation for mockFn to ensure correct parameter and return types. It includes the import of Jest globals for strong typing. The pattern aids in code safety for TypeScript-based Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jest Tests with jest.retryTimes in JavaScript\nDESCRIPTION: This snippet shows how to use `jest.retryTimes(numRetries)` to automatically retry a failing test a specified number of times. It requires the `jest-circus` runner and must be called at the top level of a test file or within a `describe` block. The example sets the retry count to 3 for a test designed to fail.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3);\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Range Matcher\nDESCRIPTION: Type declaration file for the custom toBeWithinRange matcher that enables TypeScript support and autocompletion in IDEs. Declares the matcher for both regular and asymmetric matcher contexts.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n// optionally add a type declaration, e.g. it enables autocompletion in IDEs\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Environment for Jest\nDESCRIPTION: ESLint configuration that enables the Jest environment for test files, allowing use of Jest globals without imports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"env\": {\n        \"jest\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot File for Test with Dynamic Data (JavaScript)\nDESCRIPTION: This snippet shows the content of the `.snap` file generated for the previous test containing dynamic data. Notice that the `createdAt` and `id` fields have specific, generated values, which will differ in subsequent test runs, leading to failures.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Snapshot\nexports[`will fail every time 1`] = `\n{\n  \"createdAt\": 2018-05-19T23:36:09.816Z,\n  \"id\": 3,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining a User Creation Function with node-fetch – JavaScript\nDESCRIPTION: Defines an asynchronous function, createUser, that issues a POST request to a users endpoint using node-fetch, and returns the user ID from the response text. Requires the node-fetch package. Input/Output: No parameters; returns a Promise that resolves to a string user ID. Should be used in a Node.js or compatible environment where fetch is not global.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/BypassingModuleMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nexport const createUser = async () => {\\n  const response = await fetch('https://website.com/users', {method: 'POST'});\\n  const userId = await response.text();\\n  return userId;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Jest Test Sequencer in JavaScript (jest.config.js)\nDESCRIPTION: Demonstrates how to configure Jest to use a custom test sequencer by setting the `testSequencer` property in a JavaScript configuration file (`jest.config.js`). The value should be the path to the custom sequencer module (e.g., 'path/to/custom-sequencer.js'). This example uses a JSDoc type annotation for enhanced editor support.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\n/** @type {import('jest').Config} */\nconst config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nmodule.exports = config;\n```\n```\n\n----------------------------------------\n\nTITLE: Assert Less Than or Equal Comparison with toBeLessThanOrEqual in Jest - JavaScript\nDESCRIPTION: This example shows how to use `.toBeLessThanOrEqual` matcher in Jest to assert that a number or bigint produced by a function is less than or equal to a specified value. Useful for testing upper boundaries. Dependency: Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('ounces per can is at most 12', () => {\\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dependency Extractor in Jest\nDESCRIPTION: This code snippet shows how to create a custom dependency extractor for Jest. It exports an object with extract and getCacheKey functions to handle dependency extraction and caching.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nmodule.exports = {\n  extract(code, filePath, defaultExtract) {\n    const deps = defaultExtract(code, filePath);\n    // Scan the file and add dependencies in `deps` (which is a `Set`)\n    return deps;\n  },\n  getCacheKey() {\n    return crypto\n      .createHash('md5')\n      .update(fs.readFileSync(__filename))\n      .digest('hex');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Native Modules in Jest - Simple Manual Mock - JavaScript\nDESCRIPTION: This small JavaScript snippet uses Jest's mocking system to provide a stub for a native module (e.g., 'react-native-video') in tests. No dependencies except Jest. The first parameter is the module name, and the second is a manual mock implementation (here, a string representing a React component). It enables snapshotting of mocked-out native modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\njest.mock('react-native-video', () => 'Video');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for testRunner in Jest\nDESCRIPTION: Defines the function signature for a custom Jest test runner implementation. The function receives configuration, environment, and runtime details and returns a Promise with test results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nfunction testRunner(\n  globalConfig: GlobalConfig,\n  config: ProjectConfig,\n  environment: Environment,\n  runtime: Runtime,\n  testPath: string,\n): Promise<TestResult>;\n```\n\n----------------------------------------\n\nTITLE: Disabling React Warnings in Jest by Mocking fbjs\nDESCRIPTION: Shows how to suppress React warnings globally in Jest tests by mocking the `fbjs/lib/warning` module and replacing it with an empty function. This is generally discouraged but can be useful in specific scenarios, like testing React Native components where DOM-related warnings are irrelevant.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\njest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Test Suite Sharding\nDESCRIPTION: Demonstrates how to run Jest with test suite sharding, splitting the test suite into three parts. This is useful for parallelizing test execution across multiple machines or processes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=1/3\njest --shard=2/3\njest --shard=3/3\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Dynamic Imports in JSON\nDESCRIPTION: This `.babelrc` snippet shows how to configure Babel to support dynamic imports (`import()`) within Jest tests. It includes the `syntax-dynamic-import` plugin globally and adds the `dynamic-import-node` plugin specifically for the `test` environment (used by Jest) to handle dynamic imports correctly during testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"plugins\": [\"syntax-dynamic-import\"],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"dynamic-import-node\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for Jest Modern Fake Timers Config (TypeScript)\nDESCRIPTION: This TypeScript type declaration shows all available configuration properties on Jest's ModernFakeTimersConfig, including advanceTimers, doNotFake, enableGlobally, legacyFakeTimers, now, and timerLimit. Used for IntelliSense/documentation purposes only, not for execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype ModernFakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /** Whether fake timers should be enabled for all test files. The default is `false`. */\n  enableGlobally?: boolean;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number;\n  /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Making Babel config Jest-aware\nDESCRIPTION: Example of a Babel configuration that's aware of Jest's test environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = api => {\n  const isTest = api.env('test');\n  // You can use isTest to determine what presets and plugins to use.\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Dependency using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install Jest as a development dependency in the project. The `--save-dev` flag ensures it's added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest\n```\n\n----------------------------------------\n\nTITLE: Attempting to Run Jest Tests by Path Pattern (Bash)\nDESCRIPTION: This command demonstrates using the `--runTestsByPath` flag with an incomplete path (`__tests__/t`). Because this flag requires an exact file path match and not a pattern, it will not find any tests to run in the example file structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njest --runTestsByPath __tests__/t\n```\n\n----------------------------------------\n\nTITLE: Defining a React Checkbox Component for DOM Testing (TypeScript)\nDESCRIPTION: A functional React component (`CheckboxWithLabel`) written in TypeScript (`tsx`). It renders a checkbox input within a label. The label text changes between `labelOn` and `labelOff` props based on the checkbox's checked state, managed using the `useState` hook.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\n\nexport default function CheckboxWithLabel({labelOn, labelOff}) {\n  const [isChecked, setIsChecked] = useState(false);\n\n  const onChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  return (\n    <label>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />\n      {isChecked ? labelOn : labelOff}\n    </label>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Error Cause\nDESCRIPTION: Demonstrates the use of Error causes in Jest tests with the new error cause support.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('example with error cause', () => {\n  const error = new Error('test failed', { cause: new Error('root cause') });\n  throw error;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Parameterized Tests with `each`.test in Jest (JavaScript)\nDESCRIPTION: This example illustrates how to perform asynchronous operations within parameterized tests created using Jest's `each` and tagged template literals. The test function accepts the data object (`{str}`) and a `done` callback. The `done` callback must be called to signal the completion of the asynchronous operation. This pattern is necessary when testing code involving callbacks or Promises without using async/await.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\neach`\n  str\n  ${'hello'}\n  ${'mr'}\n  ${'spy'}\n`.test('gives 007 secret message: $str', ({str}, done) => {\n  const asynchronousSpy = message => {\n    expect(message).toBe(str);\n    done();\n  };\n  callSomeAsynchronousFunction(asynchronousSpy)(str);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring custom snapshot serializers in Jest (TypeScript)\nDESCRIPTION: TypeScript example of adding a custom snapshot serializer to Jest configuration using the snapshotSerializers option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Jest in React Projects\nDESCRIPTION: Babel configuration file (babel.config.js) for using Jest with React, including necessary presets.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    '@babel/preset-env',\n    ['@babel/preset-react', {runtime: 'automatic'}],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is Greater Than or Equal To Expected with Jest in JavaScript\nDESCRIPTION: Shows the `.toBeGreaterThanOrEqual()` matcher in Jest, used to check if a received number or bigint value is greater than or equal to an expected value (`received >= expected`). The example asserts that `ouncesPerCan()` returns at least 12.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\ntest('ounces per can is at least 12', () => {\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\n});\n```\n\n----------------------------------------\n\nTITLE: Type Guard for Plugin test method (ReactElement) - JavaScript\nDESCRIPTION: This snippet shows the implementation of a test function used by a pretty-format plugin (such as ReactElement) to check if a value is a React element. It verifies that the value is not null/undefined and contains the $$typeof property equal to the React element symbol. This avoids runtime errors and ensures correct type handling. Requires Symbol.for to be available (ES6).\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Functions Explicitly with @jest/globals (JavaScript)\nDESCRIPTION: Demonstrates importing Jest's core testing functions (`expect`, `jest`, `test`) explicitly from the new `@jest/globals` package introduced in Jest 26. This allows users to avoid relying on implicit global variables. Note that globals still exist in Jest 26, and there are limitations regarding `require` usage and custom matcher TypeScript definitions with this approach.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2020-05-05-jest-26.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\n----------------------------------------\n\nTITLE: Creating Async Jest Configuration with TypeScript\nDESCRIPTION: Example of a Jest configuration file using TypeScript that returns a Promise for async configuration. It properly annotates the return type for type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nexport default async (): Promise<Config> => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Coverage Collection Patterns in TypeScript\nDESCRIPTION: Example of configuring collectCoverageFrom in a TypeScript Jest configuration to collect coverage information from specific files using glob patterns. This example includes files and excludes node_modules and vendor directories.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Suite Execution with describe.skip in Jest (JavaScript)\nDESCRIPTION: Illustrates the use of `describe.skip` (or its alias `xdescribe`) to prevent the tests within a specific `describe` block from running. The `describe` block itself still runs, so setup logic outside `beforeAll`/`beforeEach` might execute. This is useful for temporarily disabling a suite.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using an Asynchronous Custom Jest Matcher (JavaScript)\nDESCRIPTION: Demonstrates the creation and usage of an asynchronous custom Jest matcher, `toBeDivisibleByExternalValue`. This matcher performs an asynchronous operation (simulated by `getExternalValueFromRemoteSource`) before determining the pass/fail status. Tests utilizing async matchers must use `async`/`await` to correctly handle the returned Promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_65\n\nLANGUAGE: js\nCODE:\n```\n```js\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue === 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Identifying Incorrect Jest Snapshots with Descriptive Names\nDESCRIPTION: Illustrates how descriptive snapshot names immediately highlight potential issues when the generated snapshot content does not match the expectation described in the name. In this example, the test named 'should render null' incorrectly contains rendered HTML, and the test named 'should render Alan Turing' incorrectly contains `null`, making the mismatch obvious.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SnapshotTesting.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexports[`<UserName /> should render null`] = `\n<div>\n  Alan Turing\n</div>\n`;\n\nexports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n----------------------------------------\n\nTITLE: Configuring `preset` using an npm module in Jest (JavaScript)\nDESCRIPTION: Sets the `preset` option in `jest.config.js` to use a configuration preset from an installed npm module. Jest will look for `jest-preset.json` or `jest-preset.js` (or .cjs/.mjs variants) in the root of the 'foo-bar' module.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: 'foo-bar',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Tests with Array Tables - Jest JavaScript\nDESCRIPTION: Shows how to use `test.skip.each` in Jest to skip a batch of parameterized tests using a table of input values. The skipped block will not execute its assertions. Includes both skipped and non-skipped test cases. Dependencies: only Jest. Parameters come from the unpacked row values; output is suppressed for skipped tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform With Multiple Transformers (JavaScript)\nDESCRIPTION: JavaScript configuration example for specifying multiple code transformers in Jest. This shows how to use babel-jest for JavaScript files alongside a custom CSS transformer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_78\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Utility Module with ES Module Syntax\nDESCRIPTION: This ES module exports an object with two simple utility functions: 'authorize', which returns a token string, and 'isAuthorized', which performs a basic check. Useful as a sample implementation for showing Jest's automock feature. No dependencies beyond standard ES module support.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport default {\\n  authorize: () => 'token',\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Async Promise-based Code\nDESCRIPTION: Example of testing async functionality using Jest with promises and expect assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('../request');\n\nimport * as user from '../user';\n\n// The assertion for a promise must be returned.\nit('works with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(4).then(data => expect(data).toBe('Mark'));\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Component with a Simple String in Jest\nDESCRIPTION: Demonstrates mocking a React component (`SomeComponent`) using `jest.mock` by replacing it with a simple string ('SomeComponent'). This technique can lead to React warnings in version 16+ when used with Enzyme because the string is not a valid DOM element or React component type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Browserify-Compatible Resolver for Jest\nDESCRIPTION: Custom resolver implementation that uses the browser-resolve package to respect Browserify's \"browser\" field in package.json files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\n----------------------------------------\n\nTITLE: Installing jest-mongodb Preset using npm\nDESCRIPTION: Installs the `@shelf/jest-mongodb` package as a development dependency using npm. This preset provides the necessary configuration and environment setup for running Jest tests with MongoDB.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MongoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-mongodb\n```\n\n----------------------------------------\n\nTITLE: Skipping Concurrent Parameterized Tests in jest-each\nDESCRIPTION: Demonstrates how to skip concurrent parameterized tests using both .concurrent and .skip modifiers.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).test.concurrent.skip(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Sum Function - JavaScript\nDESCRIPTION: Defines a simple 'sum' function that returns the sum of two numbers and exports it from a CommonJS module. No external dependencies are required. Inputs are two arguments (a, b: number); the output is their sum. The file is intended to be placed in 'sum.js'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Babel Transformation in Jest\nDESCRIPTION: This JavaScript configuration snippet for `jest.config.js` explicitly disables Jest's automatic code transformation. By setting the `transform` option to an empty object `{}`, it prevents `babel-jest` (or other transformers) from processing files, even if a Babel configuration exists.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Running Data-Driven Tests Exclusively with describe.only.each and Tagged Template Literals in Jest (JavaScript)\nDESCRIPTION: This demonstrates describe.only.each used with a tagged template literal for specifying parameterized datasets. All tests using this API are run, while others are skipped. Requires Jest and a valid table definition. Input is via template literal table; output depends on test assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ndescribe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Jest reporters using JavaScript. It shows how to use the 'jest-silent-reporter' and 'summary' reporters together.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Collecting Coverage from Selected Files in TypeScript\nDESCRIPTION: This TypeScript snippet sets the 'collectCoverageFrom' config to include JavaScript and JSX files while excluding 'node_modules' and 'vendor' folders. The config uses Jest's typed 'Config' interface and is exported as the default export. Must be used with Jest in TypeScript projects and may require 'ts-node'.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  collectCoverageFrom: [\\n    '**/*.{js,jsx}',\\n    '!**/node_modules/**',\\n    '!**/vendor/**',\\n  ],\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDOM Test Environment Options\nDESCRIPTION: Provides examples of setting `testEnvironmentOptions` within Jest configuration files (`jest.config.js` and `jest.config.ts`). It specifies `jsdom` as the `testEnvironment` and passes options like `html`, `url`, and `userAgent` to customize the jsdom environment setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_88\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Resolver Options Type Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the options object shape that can be passed to custom resolvers. Includes properties for base directory, conditions, extensions, and other resolution configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolverOptions = {\n  /** Directory to begin resolving from. */\n  basedir: string;\n  /** List of export conditions. */\n  conditions?: Array<string>;\n  /** Instance of default resolver. */\n  defaultResolver: (path: string, options: ResolverOptions) => string;\n  /** List of file extensions to search in order. */\n  extensions?: Array<string>;\n  /** List of directory names to be looked up for modules recursively. */\n  moduleDirectory?: Array<string>;\n  /** List of `require.paths` to use if nothing is found in `node_modules`. */\n  paths?: Array<string>;\n  /** Allows transforming parsed `package.json` contents. */\n  packageFilter?: (pkg: PackageJSON, file: string, dir: string) => PackageJSON;\n  /** Allows transforms a path within a package. */\n  pathFilter?: (pkg: PackageJSON, path: string, relativePath: string) => string;\n  /** Current root directory. */\n  rootDir?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using diffLinesUnified for Line-by-Line Comparison\nDESCRIPTION: Example showing how to use diffLinesUnified() to compare arrays of strings line-by-line. This is useful when strings have been split into lines and detailed substring differences aren't needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst aLines = ['delete', 'common', 'changed from'];\nconst bLines = ['common', 'changed to', 'insert'];\n\nconst difference = diffLinesUnified(aLines, bLines);\n```\n\n----------------------------------------\n\nTITLE: Defining Source Object for Jest Mocking in TypeScript\nDESCRIPTION: Example source file defining a nested object structure that will be mocked in tests. Contains a nested method 'time' that takes a number parameter.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of jest-validate in JavaScript\nDESCRIPTION: Demonstrates the fundamental usage of the `validate` function imported from `jest-validate`. It takes a configuration object (`config`) and validation options (`validationOptions`) as input, returning an object indicating if there were deprecation warnings and if the configuration is valid.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate} from 'jest-validate';\n\nvalidate(config, validationOptions); // => {hasDeprecationWarnings: boolean, isValid: boolean}\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Custom Test Results Processor Input Structure in JSON\nDESCRIPTION: Defines the JSON object structure expected as input by a custom test results processor function specified via the `testResultsProcessor` configuration option. It outlines the various properties detailing test execution outcomes, including success status, timing, test suite counts, individual test results, performance statistics, and potential errors.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"success\": boolean,\n  \"startTime\": epoch,\n  \"numTotalTestSuites\": number,\n  \"numPassedTestSuites\": number,\n  \"numFailedTestSuites\": number,\n  \"numRuntimeErrorTestSuites\": number,\n  \"numTotalTests\": number,\n  \"numPassedTests\": number,\n  \"numFailedTests\": number,\n  \"numPendingTests\": number,\n  \"numTodoTests\": number,\n  \"openHandles\": Array<Error>,\n  \"testResults\": [{\n    \"numFailingTests\": number,\n    \"numPassingTests\": number,\n    \"numPendingTests\": number,\n    \"testResults\": [{\n      \"title\": string (message in it block),\n      \"status\": \"failed\" | \"pending\" | \"passed\",\n      \"ancestorTitles\": [string (message in describe blocks)],\n      \"failureMessages\": [string],\n      \"numPassingAsserts\": number,\n      \"location\": {\n        \"column\": number,\n        \"line\": number\n      },\n      \"duration\": number | null,\n      \"startAt\": epoch | null\n    },\n    ...\n    ],\n    \"perfStats\": {\n      \"end\": epoch,\n      \"loadTestEnvironmentEnd\": epoch,\n      \"loadTestEnvironmentStart\": epoch,\n      \"runtime\": number,\n      \"setupAfterEnvEnd\": epoch,\n      \"setupAfterEnvStart\": epoch,\n      \"setupFilesEnd\": epoch,\n      \"setupFilesStart\": epoch,\n      \"slow\": boolean,\n      \"start\": epoch\n    },\n    \"testFilePath\": absolute path to test file,\n    \"coverage\": {}\n  },\n  \"testExecError:\" (exists if there was a top-level failure) {\n    \"message\": string\n    \"stack\": string\n  }\n  ...\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Jest from command line with options\nDESCRIPTION: Example of running Jest with specific options from the command line.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest my-test --notify --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Setting Seed Value for Jest Runs - Bash\nDESCRIPTION: Demonstrates how to provide a deterministic seed value for Jest's internal test randomization using the --seed CLI flag. No prerequisites other than a valid Jest installation. The key parameter '--seed' accepts an integer in the range -2147483648 to 2147483647. The input influences shuffle order of test suites and, if --randomize is used, test cases within describe blocks. The output is a test run with the specified seed applied; if not specified, a random seed is used.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\njest --seed=1324\n```\n\n----------------------------------------\n\nTITLE: Parsing Docblocks with Jest Docblock in JavaScript\nDESCRIPTION: This example demonstrates extracting the docblock (top comment block) and its pragmas from a JavaScript file string using 'jest-docblock'. The 'parseWithComments' function analyzes a code string, returning an object with both the comments and metadata (pragmas). Requires installation of 'jest-docblock'; the input is a string of JavaScript code; output is a parsed object with comment and pragma details. Useful for tooling or documentation extraction.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Jest Matcher `toBeWithinRange` in Tests (TypeScript)\nDESCRIPTION: Shows how to use the custom `toBeWithinRange` matcher within Jest tests written in TypeScript. Similar to the JavaScript example, it covers basic assertions, negation (`.not`), and usage in asymmetric matching scenarios, benefiting from the type definitions provided earlier for improved developer experience.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_63\n\nLANGUAGE: ts\nCODE:\n```\n```ts tab title=\\\"__tests__/ranges.test.ts\\\"\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Jest Architecture Video using React LiteYouTubeEmbed (JSX)\nDESCRIPTION: This JSX snippet utilizes the `LiteYouTubeEmbed` React component to embed a specific YouTube video (ID: 3YDiloj8_d0) discussing Jest's architecture. It requires the `react-lite-youtube-embed` package and a React environment. The `id` prop specifies the YouTube video ID to be displayed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Architecture.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed id=\"3YDiloj8_d0\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing snapshot formatting in Jest (TypeScript)\nDESCRIPTION: TypeScript example of customizing snapshot formatting options in Jest configuration, specifically disabling the printing of basic prototypes for objects and arrays.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Sequencer in Jest (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to specify a custom test sequencer in Jest configuration. This references the custom sequencer implementation file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_95\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and Babel Dependencies for React Testing\nDESCRIPTION: Installs necessary development dependencies for setting up Jest testing in a React project without Create React App. This includes Jest itself, Babel core components (`babel-jest`, `@babel/preset-env`, `@babel/preset-react`) for code transformation, and `react-test-renderer` for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Function for `jest.Replaced` Example (TypeScript)\nDESCRIPTION: Defines a simple utility function `isLocalhost` that checks an environment variable. This function serves as the target for testing property replacement using `jest.replaceProperty` and the `jest.Replaced` type in the subsequent test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\n// title=\"src/utils.ts\"\nexport function isLocalhost(): boolean {\n  return process.env['HOSTNAME'] === 'localhost';\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JavaScript values with pretty-format\nDESCRIPTION: This example shows how to use the format function from pretty-format to convert complex JavaScript values (including circular references, symbols, and special values) into human-readable strings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```\n\n----------------------------------------\n\nTITLE: Parsing Docblocks with jest-docblock in JavaScript\nDESCRIPTION: Illustrates using the `parseWithComments` function from the `jest-docblock` package to extract and parse structured data (pragmas like `@flow`) and comments from a standard JavaScript docblock at the beginning of a code string. It requires the `jest-docblock` package. The function returns an object containing `comments` and `pragmas`, which is logged to the console.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform With Multiple Transformers (TypeScript)\nDESCRIPTION: TypeScript configuration example for specifying multiple code transformers in Jest. This shows how to use babel-jest for JavaScript files alongside a custom CSS transformer with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_79\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Validating User Configuration with jest-validate in JavaScript\nDESCRIPTION: This snippet demonstrates validating a user-provided configuration object (`configByUser`) against a predefined example configuration using the `validate` function from `jest-validate`. It requires the `jest-validate` package and outputs an object containing boolean flags `isValid` and `hasDeprecationWarnings`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Generated Jest Snapshot for Error Message\nDESCRIPTION: Shows the content of the `.snap` file generated by the `.toThrowErrorMatchingSnapshot()` test. It contains the exported, serialized error message ('yuck, octopus flavor') thrown by the tested function, associated with the test name.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: js\nCODE:\n```\nexports[`drinking flavors throws on octopus 1`] = `\"yuck, octopus flavor\"`;\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings using split and diffLinesRaw (JS)\nDESCRIPTION: Illustrates how to use `diffLinesRaw` to compare two strings after splitting them into lines using the standard `string.split('\\n')` method. This example specifically shows the comparison between a non-empty string and an empty string, highlighting the resulting diff array structure. It requires importing `diffLinesRaw` from the `jest-diff` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport {diffLinesRaw} from 'jest-diff';\n\nconst a = 'non-empty string';\nconst b = '';\n\nconst diffs = diffLinesRaw(a.split('\\n'), b.split('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resolver in Jest Configuration (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Jest to use a custom resolver by specifying the path to the resolver file in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Automock Option - JavaScript\nDESCRIPTION: Shows how to set the Jest configuration to enable automatic module mocking using a JavaScript configuration file. Requires Jest installed and configures the automock flag. The exported config enables auto-mocking of modules; no parameters are required, and the effect is global for tests using this configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  automock: true,\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using diffLinesRaw with Empty and Multi-line Strings (JS)\nDESCRIPTION: Demonstrates calling `diffLinesRaw` to compare an empty string (`a`) with a multi-line string (`b`), after splitting both using the standard `split('\\n')`. The surrounding text notes that `diffLinesUnified` and `diffLinesUnified2` handle the empty string splitting internally, making a helper like `splitLines0` unnecessary for those functions. Requires `diffLinesRaw` from `jest-diff`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport {diffLinesRaw} from 'jest-diff';\n\nconst a = '';\nconst b = 'line 1\\nline 2\\nline 3';\n\nconst diffs = diffLinesRaw(a.split('\\n'), b.split('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Configuring collectCoverageFrom in Jest with JavaScript\nDESCRIPTION: Example of configuring the collectCoverageFrom option in Jest with JavaScript. It specifies a set of glob patterns to include or exclude files from coverage reporting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Customizing Jest transformIgnorePatterns in package.json\nDESCRIPTION: This JSON configuration demonstrates how to customize the `transformIgnorePatterns` option in Jest for a React Native project. It modifies the default pattern to ensure that specific npm modules (`my-project`, `react-native-button` in this example), besides `react-native` itself, are processed by Babel, which is necessary if they are published with uncompiled source code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReactNative.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(react-native|my-project|react-native-button)/)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Browser Resolver Implementation\nDESCRIPTION: Example of a custom resolver that respects Browserify's browser field using browser-resolve package.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with toBeLessThanOrEqual in Jest\nDESCRIPTION: Shows how to use the toBeLessThanOrEqual matcher to check if a value is less than or equal to an expected number. Works with both regular numbers and big integers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is at most 12', () => {\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Resolver in Jest (TypeScript)\nDESCRIPTION: Example of configuring a custom resolver in Jest using TypeScript. This setup points to a custom resolver file in the project root directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing mockRejectedValueOnce for one-time Promise rejections in TypeScript\nDESCRIPTION: TypeScript implementation showing how to type and configure an async mock that mixes resolved values and rejected errors for sequential calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n----------------------------------------\n\nTITLE: VS Code Debugger Configuration for Launching Jest Tests\nDESCRIPTION: VS Code launch.json configuration to automatically launch and debug Jest tests. This runs Jest with the inspect-brk flag and connects the debugger.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sandboxInjectedGlobals in Jest (TypeScript)\nDESCRIPTION: TypeScript example of setting up sandboxInjectedGlobals in Jest configuration to improve performance for frequently accessed global objects like Math.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Jest from Command Line with Options\nDESCRIPTION: This bash command demonstrates running Jest directly from the command line interface (CLI). It targets files matching `my-test`, enables native OS notifications (`--notify`), and specifies a custom configuration file (`--config=config.json`). Requires Jest to be globally installed or accessible via `npx`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest my-test --notify --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Using jest.deepUnmock via Babel Plugin in Jest (JavaScript)\nDESCRIPTION: Added in Jest 16.0.0 via `babel-plugin-jest-hoist`, `jest.deepUnmock(moduleName)` allows for the explicit unmocking of a module that might have been automatically mocked or mocked via `jest.mock`. This ensures the original module implementation is used.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\njest.deepUnmock\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Configuration in JSON\nDESCRIPTION: Example of a Jest configuration file in JSON format that sets bail to 1 and enables verbose mode. This provides a simpler alternative to JavaScript or TypeScript configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bail\": 1,\n  \"verbose\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel dependencies for Jest\nDESCRIPTION: Command to install Babel and related dependencies for use with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev babel-jest @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Using test.each with Array of Objects Variable in TypeScript (Jest)\nDESCRIPTION: Shows `test.each` in TypeScript using a pre-defined variable containing an array of objects. Similar to the inline version, this method offers reliable type inference for test arguments, correctly identifying types and optional properties.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n----------------------------------------\n\nTITLE: Creating User Function Implementation\nDESCRIPTION: Example function that makes a POST request to create a user and returns the user ID using node-fetch.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/BypassingModuleMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nexport const createUser = async () => {\n  const response = await fetch('https://website.com/users', {method: 'POST'});\n  const userId = await response.text();\n  return userId;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Webpack Aliases\nDESCRIPTION: Complete Jest configuration including moduleNameMapper for handling webpack aliases.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n\n    '^react(.*)$': '<rootDir>/vendor/react-master$1',\n    '^config$': '<rootDir>/configs/app-config.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying jest-dynamodb Preset in Jest Config (JSON)\nDESCRIPTION: Configures Jest to use the jest-dynamodb preset by adding the preset field to the configuration file (such as jest.config.json). This enables all necessary hooks and setup for DynamoDB integration. No additional fields are required at this step; just ensure that @shelf/jest-dynamodb is installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/DynamoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-dynamodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using rootDir Token in Transform Ignore Patterns (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to use the <rootDir> token in transformIgnorePatterns to ensure proper path resolution across different environments with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_83\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Test Environment in Jest\nDESCRIPTION: This snippet shows how to use a custom test environment in a Jest test suite using a docblock pragma.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment ./my-custom-environment\n */\nlet someGlobalObject;\n\nbeforeAll(() => {\n  someGlobalObject = globalThis.someGlobalObject;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Directories\nDESCRIPTION: Examples showing how to configure module directory search paths in Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Controlling Object Serialization with SERIALIZABLE_PROPERTIES in Jest\nDESCRIPTION: Explains how to customize the serialization of custom class instances in Jest error messages. By defining a `SERIALIZABLE_PROPERTIES` property (imported from `jest-matcher-utils`) on the class prototype with an array of property names, only those specified properties will be included in the diff output during failed equality checks.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport {SERIALIZABLE_PROPERTIES} from 'jest-matcher-utils';\n\nclass Volume {\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  get label() {\n    throw new Error('Not implemented');\n  }\n}\n\nVolume.prototype[SERIALIZABLE_PROPERTIES] = ['amount', 'unit'];\n\nexpect(new Volume(1, 'L')).toEqual(new Volume(10, 'L'));\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Hook for Test Run Completion in JavaScript\nDESCRIPTION: Example of using the onTestRunComplete hook to perform actions after a test run finishes.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onTestRunComplete(results => {\n      this._hasSnapshotFailure = results.snapshot.failure;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transformers in Jest Using JSON\nDESCRIPTION: Demonstrates how to configure multiple file transformers in the Jest testing framework by mapping glob patterns to transformer modules in a JSON-style configuration. It highlights usage of the babel-jest transformer for JavaScript and TypeScript files, and a custom transformer for CSS files. This snippet assumes these transformer modules are installed in the project dependencies and located in the runtime path. Key property: the 'transform' key maps regex patterns to the appropriate transformer resolved by Jest during test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CodeTransformation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"transform\": {\\n    \"\\\\.[jt]sx?$\": \"babel-jest\",\\n    \"\\\\.css$\": \"some-css-transformer\",\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JavaScript file comments with jest-docblock\nDESCRIPTION: This example demonstrates using the parseWithComments function from jest-docblock to extract and parse comments from the top of a JavaScript file, separating the pragmas and general comments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n----------------------------------------\n\nTITLE: Setting Babel Preset for Jest and Webpack Projects (.babelrc JSON)\nDESCRIPTION: This .babelrc configuration specifies '@babel/preset-env' in the presets array to enable transpilation of modern JavaScript for Jest and webpack builds. The configuration requires the '@babel/preset-env' package. Ensures code is compatible with current JS environments during test and build steps.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for Custom Puppeteer Setup\nDESCRIPTION: Jest configuration file that references the custom global setup, teardown, and test environment files for Puppeteer integration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  globalSetup: './setup.js',\n  globalTeardown: './teardown.js',\n  testEnvironment: './puppeteer_environment.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in package.json for React Native - JSON\nDESCRIPTION: This snippet shows the default or recommended Jest test script and preset for a React Native app. The 'scripts.test' entry tells npm/yarn to run Jest tests, while the 'jest.preset' field ensures the React Native preset is used for optimal configuration. Required as part of installing or initializing a React Native project with Jest. No parameters, just configuration settings; outputs enable running 'yarn test' or 'npm test' to execute Jest tests for React Native code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Native in package.json\nDESCRIPTION: This snippet shows the default Jest configuration added to package.json when initializing a React Native project. It sets up the test script and specifies the React Native preset for Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Range Matcher in TypeScript\nDESCRIPTION: TypeScript test file demonstrating how to use the custom toBeWithinRange matcher with various test cases and asymmetric matchers.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Name Mapping in Jest\nDESCRIPTION: Configuration example showing how to map module names to stub resources using regular expressions. Demonstrates mapping image files and assets to stub implementations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests on Changed Files\nDESCRIPTION: Executes only the tests related to files that have changed based on the SCM (hg/git) status, specifically targeting uncommitted files. The `-o` flag enables this optimized test run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njest -o\n```\n\n----------------------------------------\n\nTITLE: Updating jest.mocked() Usage for Default Deep Mocking in Jest v29 (diff)\nDESCRIPTION: This code diff demonstrates how to update the usage of the `jest.mocked()` helper in TypeScript for Jest v29. The second argument (`true`) previously used for deep mocking should be removed, as deep mocking is now the default behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UpgradingToJest29.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- const mockedObject = jest.mocked(someObject, true);\n+ const mockedObject = jest.mocked(someObject);\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-jest Package\nDESCRIPTION: NPM command to install babel-preset-jest as a development dependency\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-preset-jest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev babel-preset-jest\n```\n\n----------------------------------------\n\nTITLE: Disabling Colors in Diff Output (JS)\nDESCRIPTION: Demonstrates how to generate a diff output without any ANSI escape codes for colors. This is useful for storing diffs in files or environments that don't support color. It involves defining an identity function (`noColor`) and assigning it to all color-related options (`aColor`, `bColor`, `changeColor`, `commonColor`, `patchColor`).\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst noColor = string => string;\n\nconst options = {\n  aColor: noColor,\n  bColor: noColor,\n  changeColor: noColor,\n  commonColor: noColor,\n  patchColor: noColor,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Manual Puppeteer Setup (JavaScript)\nDESCRIPTION: Configures Jest in `jest.config.js` to use the custom global setup, global teardown, and test environment scripts created for the manual Puppeteer integration. This tells Jest to execute these scripts during its test lifecycle.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  globalSetup: './setup.js',\n  globalTeardown: './teardown.js',\n  testEnvironment: './puppeteer_environment.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Custom Transformers\nDESCRIPTION: Jest configuration using custom transformers for specific file types and CSS Modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Transformer with @babel/core in JavaScript\nDESCRIPTION: This code defines a custom Jest transformer using the @babel/core library and the babel-preset-jest preset. It exports a process function that transforms source files during testing, applying Jest-specific babel presets. Dependencies required are @babel/core and babel-preset-jest, both of which must be installed. The expected inputs are the source code and filename; the output is transformed code, or the original source if no transformation is performed. This module is intended to be referenced in the Jest configuration's transform option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\\n\\nconst {transform} = require('@babel/core');\\nconst jestPreset = require('babel-preset-jest');\\n\\nmodule.exports = {\\n  process(src, filename) {\\n    const result = transform(src, {\\n      filename,\\n      presets: [jestPreset],\\n    });\\n\\n    return result || src;\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing LiteYouTubeEmbed Component in JavaScript/React\nDESCRIPTION: This snippet imports the `LiteYouTubeEmbed` component from the `react-lite-youtube-embed` npm package using ES6 module syntax. This allows embedding YouTube videos efficiently within a React application or MDX document. It requires the `react-lite-youtube-embed` package to be installed as a dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Architecture.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LiteYouTubeEmbed from 'react-lite-youtube-embed';\n```\n\n----------------------------------------\n\nTITLE: Babel Jest-Aware Config with Environment Detection - JavaScript\nDESCRIPTION: Defines a function-based Babel config that uses the Babel 'api' parameter to detect if the current environment is 'test'. Allows conditional modification of Babel presets/plugins for Jest runs. This adds flexibility for projects using different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  const isTest = api.env('test');\n  // You can use isTest to determine what presets and plugins to use.\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect transformIgnorePatterns with Multiple Patterns - JSON\nDESCRIPTION: This snippet demonstrates an incorrect usage of multiple 'transformIgnorePatterns' in Jest configuration. By including both patterns, exclusion logic can unintentionally cancel each other out for modules like 'foo' and 'bar'. The configuration highlights a potential pitfall when using multiple negative lookahead assertions. It is a cautionary example and not a recommended configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformIgnorePatterns\": [\"node_modules/(?!foo/)\", \"node_modules/(?!bar/)\"] // not what you want\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Async/Await with Jest - JavaScript\nDESCRIPTION: This snippet shows how to write Jest tests for async functions using the async/await syntax. The tests mark the test function as async and use await to pause execution until the promise resolves or rejects. It includes cases for both resolved and rejected promises using try/catch for error assertion. Requires Jest and an async fetchData function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TestingAsyncCode.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (error) {\n    expect(error).toMatch('error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking ESM Modules with jest.unstable_mockModule in JavaScript\nDESCRIPTION: Illustrates how to mock an ECMAScript Module (specifically 'node:child_process') using the experimental `jest.unstable_mockModule` function. This method requires providing a factory function (sync or async) that returns the mock implementation. The mocked module must then be loaded using dynamic `import()` *after* the mock definition.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ECMAScriptModules.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {jest} from '@jest/globals';\n\njest.unstable_mockModule('node:child_process', () => ({\n  execSync: jest.fn(),\n  // etc.\n}));\n\nconst {execSync} = await import('node:child_process');\n\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Watch Plugin in Jest Configuration (JavaScript)\nDESCRIPTION: This `jest.config.js` snippet demonstrates how to enable a custom watch plugin by adding its file path to the `watchPlugins` array within the Jest configuration object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: ['path/to/yourWatchPlugin'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing jest-dynamodb Preset with npm (Bash)\nDESCRIPTION: Installs the @shelf/jest-dynamodb package as a development dependency using npm. This must be run before configuring Jest to allow interaction with DynamoDB in tests. The command is suitable for any Node.js projects intending to use DynamoDB with Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/DynamoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-dynamodb\n```\n\n----------------------------------------\n\nTITLE: Importing a Manual Mock for matchMedia Before Target Code - JavaScript\nDESCRIPTION: This code snippet ensures that the matchMedia mock is applied before the tested file is imported. The test suite then imports myMethod from the target file, with the mock in effect for all subsequent code. This approach is required if matchMedia is used immediately on module evaluation, and relies on ES module imports and Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ManualMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport './matchMedia.mock'; // Must be imported before the tested file\\nimport {myMethod} from './file-to-test';\\n\\ndescribe('myMethod()', () => {\\n  // Test the method here...\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals Manually\nDESCRIPTION: Demonstrates how to import necessary Jest globals (`expect`, `jest`, `test`) from `@jest/globals` when the `--injectGlobals` option is set to `false` or `injectGlobals` configuration is false. This approach avoids polluting the global namespace.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger Launch (Linux/macOS)\nDESCRIPTION: Provides a VS Code `launch.json` configuration to automatically launch Jest tests and attach the debugger (non-Windows). It uses the `node` type, `launch` request, and passes necessary runtime arguments like `--inspect-brk` and `--runInBand` to the Jest executable. Output is shown in the integrated terminal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel TypeScript Preset for Jest - Bash\nDESCRIPTION: Shows how to install '@babel/preset-typescript' as a dev dependency. Required when using Babel to transpile TypeScript code in conjunction with Jest. Assumes prior installation of Babel and Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Setting workerIdleMemoryLimit in Jest (TypeScript)\nDESCRIPTION: TypeScript example of configuring workerIdleMemoryLimit in Jest to set a memory limit for worker processes. This option helps manage memory usage and can prevent issues related to worker memory consumption.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Project Objects with Custom Runners Using Jest - JavaScript\nDESCRIPTION: Jest configuration in JavaScript demonstrating the use of multiple project objects, each with its own displayName and runner configuration. Useful for simultaneously running tests (default) and linter (e.g., jest-runner-eslint) tasks as separate Jest projects. 'displayName' helps identify project output, and custom runners are set per project object. Requires Jest and any custom runners (e.g., jest-runner-eslint).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Format for Backward Compatibility in Jest 29\nDESCRIPTION: Configuration snippet to maintain the previous snapshot formatting behavior in Jest 29, which changed the default settings for escapeString and printBasicPrototype.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/UpgradingToJest29.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsnapshotFormat: {\n  escapeString: true,\n  printBasicPrototype: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest 27 to Use the Jasmine 2 Test Runner\nDESCRIPTION: This configuration option sets the test runner back to `jest-jasmine2`. It's used within the Jest configuration file (e.g., `jest.config.js` or `package.json`) to opt out of the new default `jest-circus` runner introduced in Jest 27, typically for projects relying on Jasmine-specific APIs like `jasmine.getEnv()`. No external dependencies are required beyond Jest itself.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2021-05-25-jest-27.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"testRunner\": \"jest-jasmine2\"\n```\n\n----------------------------------------\n\nTITLE: Using toEqual Matcher in Jest\nDESCRIPTION: Demonstrates toEqual matcher for deep equality comparison between objects, showing how it differs from toBe matcher.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Summary Reporter Configuration with Threshold in Jest - TypeScript\nDESCRIPTION: TypeScript Jest configuration using the 'default' reporter with a custom 'summaryThreshold' option to display a detailed summary if the number of test suites surpasses the set limit. Adjustable per project needs and helpful for rapidly locating failed tests in large codebases.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Jest Config - JavaScript\nDESCRIPTION: Exemplifies how to set up global variables (e.g., '__DEV__') in the Jest configuration so they are available in all test environments. The configuration object is exported via CommonJS 'module.exports'. Requires Jest, and the 'globals' object must be JSON-serializable. Custom global functions cannot be included here and should use 'setupFiles' instead.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Snapshot Serializer in Jest Test Files - JavaScript\nDESCRIPTION: This snippet shows how to add a custom snapshot serializer module to Jest in an individual test file. It imports a serializer and registers it with expect.addSnapshotSerializer. This enables using the custom serializer in snapshot assertions within the file. The serializer must be implemented and installed as a module.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\n----------------------------------------\n\nTITLE: Configuring Diff Annotation Labels via Options (JS)\nDESCRIPTION: Shows how to customize the default 'Expected' and 'Received' annotation labels in the diff output. This is achieved by passing an options object with `aAnnotation` and `bAnnotation` properties to a `jest-diff` function (like `diff`, `diffStringsUnified`, etc.).\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n  aAnnotation: 'Original',\n  bAnnotation: 'Modified',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest modulePaths in JavaScript\nDESCRIPTION: Configures the `modulePaths` option in a Jest JavaScript setup. This provides an array of absolute paths for Jest to search when resolving modules, acting as an alternative to the `NODE_PATH` environment variable. The example uses `<rootDir>` to specify a path relative to the project root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_50\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resolver in JavaScript\nDESCRIPTION: JavaScript configuration example showing how to set up a custom resolver path in Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple CommonJS Module in JavaScript\nDESCRIPTION: Exports a single anonymous function using the CommonJS `module.exports` pattern. This module represents a dependency that will be mocked and have its implementation replaced in a subsequent test example.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function () {\n  // some implementation;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring maxWorkers in Jest Config - JavaScript\nDESCRIPTION: Illustrates how to set the 'maxWorkers' option in Jest configuration to control the number of worker threads, using a percentage string (e.g., '50%') for dynamic environments. The configuration is exported as a CommonJS module. Requires Jest, with 'maxWorkers' accepting both numbers and strings representing percentages.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  maxWorkers: '50%',\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Docblock with Pragma Arguments Example in JavaScript\nDESCRIPTION: An example of a docblock with a pragma that takes arguments. Pragmas can have associated values that provide additional information.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Check this out:\n *\n * @myPragma it is so cool\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom 'toBe' Matcher using Jest Utilities (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a custom Jest matcher named `toBe` using `expect.extend`. It utilizes `this.utils` (specifically `matcherHint`, `printExpected`, `printReceived`) and `jest-diff` to construct informative messages for both passing and failing assertions, comparing received and expected values using `Object.is`. The options object helps configure the matcher's behavior and output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Transformed Test Code Using inline-requires Babel Plugin in JavaScript\nDESCRIPTION: Shows the result of applying the `inline-requires` Babel transform to a Jest test. The top-level `require` is removed, and the `require('sum')` call is inlined directly where the `sum` variable was used. This optimization delays module loading until it's actually needed within the test, improving performance, especially when combined with lazy mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-03-11-javascript-unit-testing-performance.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\ndescribe('sum', () => {\n  it('works', () => {\n    expect(require('sum')(5, 4)).toBe(9);\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Tables Configuration\nDESCRIPTION: JavaScript configuration for defining DynamoDB tables in jest-dynamodb-config.js file. It specifies table structure using the CreateTable API format.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/DynamoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tables: [\n    {\n      TableName: `files`,\n      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],\n      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n    },\n    // etc\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Utility Function for Spying on Date.now() in TypeScript\nDESCRIPTION: Defines a utility function 'setDateNow' that uses jest.spyOn() to mock Date.now(). It demonstrates the usage of jest.Spied<Source> type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Exported Function in a Worker Module (JavaScript)\nDESCRIPTION: This JavaScript code defines a simple worker module (`worker.js`). It exports a synchronous function `hello` that takes a parameter and returns a greeting string. This function will be executed in a separate worker process when called from the parent process via the `JestWorker` instance.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport function hello(param) {\n  return `Hello, ${param}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring displayName with Custom Color in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation for setting a custom colored displayName in Jest. Configures the test label as 'CLIENT' with a blue background color for better visual identification.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest with JavaScript\nDESCRIPTION: Example of configuring watchPathIgnorePatterns in Jest to ignore specific directories during watch mode. This prevents Jest from re-running tests when files in these directories change.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Disabling watch mode in Jest\nDESCRIPTION: Options to explicitly disable watch mode if it was enabled using --watch. This is typically handled automatically in CI environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n--no-watch\n```\n\nLANGUAGE: bash\nCODE:\n```\n--watch=false\n```\n\n----------------------------------------\n\nTITLE: Jest forceCoverageMatch Configuration\nDESCRIPTION: Configuration examples in both JavaScript and TypeScript showing how to set forceCoverageMatch to include .t.js files in coverage reports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Jest CLI Argument Formats\nDESCRIPTION: Examples demonstrating Jest's support for both camelcase and dashed argument formats, as well as mixing argument styles.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njest --collect-coverage\njest --collectCoverage\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --update-snapshot --detectOpenHandles\n```\n\n----------------------------------------\n\nTITLE: Example Jest Watch Mode Menu with Custom Plugin Prompt (Text)\nDESCRIPTION: This text snippet displays an example of the Jest watch mode usage menu, highlighting how a custom plugin prompt (added via `getUsageInfo`) integrates with the default options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nWatch Usage\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a test name regex pattern.\n › Press q to quit watch mode.\n › Press s to do something. // <-- This is our plugin\n › Press Enter to trigger a test run.\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset for Webpack\nDESCRIPTION: Command to install @babel/preset-env for use with webpack and Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Standard Jest Test Mocking node-fetch – JavaScript\nDESCRIPTION: Shows a Jest test that mocks node-fetch entirely, including both fetch and Response imports. It demonstrates mocking the fetch function to return a Promise containing a new mocked Response, and asserts that fetch is called with appropriate arguments and the user ID is correct. Prerequisites: Jest setup; node-fetch as a dependency; the file createUser.js defined as above. Limitation: Because the Response class is also mocked, the test will fail with TypeError: response.text is not a function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/BypassingModuleMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.mock('node-fetch');\\n\\nimport fetch, {Response} from 'node-fetch';\\nimport {createUser} from './createUser';\\n\\ntest('createUser calls fetch with the right args and returns the user id', async () => {\\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\\n\\n  const userId = await createUser();\\n\\n  expect(fetch).toHaveBeenCalledTimes(1);\\n  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {\\n    method: 'POST',\\n  });\\n  expect(userId).toBe('4');\\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Single Rejected Promise with `mockRejectedValueOnce` Shorthand (JavaScript)\nDESCRIPTION: Provides the shorthand equivalent for `mockFn.mockRejectedValueOnce(value)`. This method configures a mock function to return a Promise that rejects with the specified value for only the next call. It uses `jest.fn().mockImplementationOnce()` internally.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\n----------------------------------------\n\nTITLE: Using expect.closeTo() in Jest Assertions (JavaScript)\nDESCRIPTION: Demonstrates the usage of expect.closeTo() for comparing floating-point numbers in object properties or array items. It shows how to set precision and compare float values within objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ntest('compare float in object properties', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest with CLI Options - Bash\nDESCRIPTION: Demonstrates running Jest from the CLI to match files named 'my-test', show notifications, and use a specific config file. Requires Jest installed globally and a config.json present. Shows command-line integration and advanced usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest my-test --notify --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Mocking a Module with a Custom Factory using jest.mock (JS/TS)\nDESCRIPTION: Shows how to provide a custom factory function as the second argument to `jest.mock`. This factory returns a Jest mock function (`jest.fn()`) configured to return a specific value (`42`). The subsequent `require` call gets this mocked implementation. The TypeScript version includes an optional type argument for type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\njest.mock('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\nLANGUAGE: ts\nCODE:\n```\n// The optional type argument provides typings for the module factory\njest.mock<typeof import('../moduleName')>('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\n----------------------------------------\n\nTITLE: Resetting the Module Cache with jest.resetModules in JavaScript\nDESCRIPTION: Illustrates `jest.resetModules()` which clears Jest's module cache. Requiring the same module (`../sum`) before and after calling `jest.resetModules()` results in two different instances of the module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst sum1 = require('../sum');\njest.resetModules();\nconst sum2 = require('../sum');\nsum1 === sum2;\n// > false (Both sum modules are separate \"instances\" of the sum module.)\n```\n\n----------------------------------------\n\nTITLE: Asserting Null Values with toBeNull in Jest - JavaScript\nDESCRIPTION: This snippet demonstrates using `.toBeNull` matcher to explicitly check that a value is `null`, which is functionally equivalent to `.toBe(null)` but provides clearer error messages in Jest. It tests the return value of a function expected to be null. Dependency: Jest. Returns assertion pass/fail based on value being strictly `null`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction bloop() {\\n  return null;\\n}\\n\\ntest('bloop returns null', () => {\\n  expect(bloop()).toBeNull();\\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Sort Order to Object Keys in Diff (JS)\nDESCRIPTION: Illustrates using the `compareKeys` option with a custom comparison function to achieve a non-default sort order for object keys in the diff. This example provides a function `(a, b) => (a > b ? -1 : 1)` which results in reverse alphabetical sorting of keys. Requires the `diff` function from `jest-diff`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nconst a = {c: 'c', b: 'b1', a: 'a'};\nconst b = {c: 'c', b: 'b2', a: 'a'};\n\nconst options = {\n  // The keys will be in reverse order\n  compareKeys: (a, b) => (a > b ? -1 : 1),\n};\n\nconst difference = diff(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Module Paths\nDESCRIPTION: Extends the Jest configuration to include modulePaths, which is analogous to webpack's resolve.roots. This helps Jest find modules in additional locations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Usage Example of jest-docblock API in JavaScript\nDESCRIPTION: A comprehensive example demonstrating how to use the jest-docblock API, including extracting, stripping, parsing, and printing docblocks from code.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = `\n/**\n * Everything is awesome!\n *\n * @everything is:awesome\n * @flow\n */\n\n export const everything = Object.create(null);\n export default function isAwesome(something) {\n   return something === everything;\n }\n`;\n\nconst {\n  extract,\n  strip,\n  parse,\n  parseWithComments,\n  print,\n} = require('jest-docblock');\n\nconst docblock = extract(code);\nconsole.log(docblock); // \"/**\\n * Everything is awesome!\\n * \\n * @everything is:awesome\\n * @flow\\n */\"\n\nconst stripped = strip(code);\nconsole.log(stripped); // \"export const everything = Object.create(null);\\n export default function isAwesome(something) {\\n return something === everything;\\n }\"\n\nconst pragmas = parse(docblock);\nconsole.log(pragmas); // { everything: \"is:awesome\", flow: \"\" }\n\nconst parsed = parseWithComments(docblock);\nconsole.log(parsed); // { comments: \"Everything is awesome!\", pragmas: { everything: \"is:awesome\", flow: \"\" } }\n\nconsole.log(print({pragmas, comments: 'hi!'})); // /**\\n * hi!\\n *\\n * @everything is:awesome\\n * @flow\\n */;\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter with Silent Reporter in JavaScript\nDESCRIPTION: This snippet shows how to configure Jest to use the summary reporter along with a silent reporter, demonstrating how to combine different reporters for custom output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Updating Default Snapshot Format Configuration in Jest 29 (Diff)\nDESCRIPTION: This diff shows the change in the default `snapshotFormat` configuration introduced in Jest 29. The `escapeString` and `printBasicPrototype` properties are now explicitly set to `false` by default, altering how snapshots are generated and formatted compared to previous versions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2022-08-25-jest-29.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ snapshotFormat: {\n+   escapeString: false,\n+   printBasicPrototype: false\n+ }\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Mode Key Actions with run() Method (JavaScript)\nDESCRIPTION: By implementing the `run` method, this snippet allows the plugin to react to its configured key in Jest's watch mode. The method receives the `globalConfig` and an `updateConfigAndRun` callback (should rerunning be required). Returning a resolved `Promise<boolean>` signals when to return control. External dependencies are not needed but care must be taken not to call `updateConfigAndRun` and resolve truthy simultaneously to avoid double-runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  run(globalConfig, updateConfigAndRun) {\n    // do something.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking and Unmocking an ESM Module in a Jest Test (JavaScript)\nDESCRIPTION: Shows a complete test case (`esm-module.test.mjs`) for mocking and unmocking an ESM module (`./esm-module.js`). It uses `jest.unstable_mockModule` to replace the module's exports, dynamic `import()` to load the mocked version, `jest.unstable_unmockModule` to restore the original, and dynamic `import()` again to load the original. The snippet also highlights a limitation where re-mocking the same module within the same test might not behave as expected.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ECMAScriptModules.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// title=\"esm-module.test.mjs\"\nimport {jest, test} from '@jest/globals';\n\ntest('test esm-module', async () => {\n  jest.unstable_mockModule('./esm-module.js', () => ({\n    default: () => 'default implementation',\n    namedFn: () => 'namedFn implementation',\n  }));\n\n  const mockModule = await import('./esm-module.js');\n\n  console.log(mockModule.default()); // 'default implementation'\n  console.log(mockModule.namedFn()); // 'namedFn implementation'\n\n  jest.unstable_unmockModule('./esm-module.js');\n\n  const originalModule = await import('./esm-module.js');\n\n  console.log(originalModule.default()); // 'default'\n  console.log(originalModule.namedFn()); // 'namedFn'\n\n  /* !!! WARNING !!! Don`t override */\n  jest.unstable_mockModule('./esm-module.js', () => ({\n    default: () => 'default override implementation',\n    namedFn: () => 'namedFn override implementation',\n  }));\n\n  const mockModuleOverride = await import('./esm-module.js');\n\n  console.log(mockModuleOverride.default()); // 'default implementation'\n  console.log(mockModuleOverride.namedFn()); // 'namedFn implementation'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babel for Jest Support - Bash\nDESCRIPTION: Shows how to install Babel-related dependencies for Jest integration using npm. Installs 'babel-jest', '@babel/core', and '@babel/preset-env' as dev dependencies. Prerequisites include having npm and a Node.js project set up.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Dependency Extractor for Jest\nDESCRIPTION: This code illustrates how to create a custom dependency extractor for Jest. It exports an object with an extract function that processes code and identifies dependencies, plus a getCacheKey function to determine if cached artifacts should be invalidated.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nmodule.exports = {\n  extract(code, filePath, defaultExtract) {\n    const deps = defaultExtract(code, filePath);\n    // Scan the file and add dependencies in `deps` (which is a `Set`)\n    return deps;\n  },\n  getCacheKey() {\n    return crypto\n      .createHash('md5')\n      .update(fs.readFileSync(__filename))\n      .digest('hex');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Module for jest-worker in JavaScript\nDESCRIPTION: Defines a simple Node.js module (`heavy-task.js`) that exports an object containing a function `myHeavyTask`. This function simulates a computationally intensive task designed to be run in a separate process using `jest-worker` for parallel execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Async Module Isolation with Jest isolateModulesAsync\nDESCRIPTION: Demonstrates using jest.isolateModulesAsync for async module isolation scenarios.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nlet myModule;\nawait jest.isolateModulesAsync(async () => {\n  myModule = await import('myModule');\n  // do async stuff here\n});\n\nconst otherCopyOfMyModule = await import('myModule');\n```\n\n----------------------------------------\n\nTITLE: Tracking Instances with mock.instances in JavaScript\nDESCRIPTION: Illustrates how the `mock.instances` array tracks object instances created using `new` with a Jest mock function (`jest.fn()`). It shows accessing these instances and verifying their identity within the array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n----------------------------------------\n\nTITLE: Enabling Fake Timers Globally in Jest Configuration (JavaScript)\nDESCRIPTION: Configures Jest to enable fake timers for all test files automatically by setting `fakeTimers.enableGlobally` to `true` in the Jest configuration file (CommonJS). This avoids needing to call `jest.useFakeTimers()` in each individual test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Limiting Jest Worker Pool for CI Performance\nDESCRIPTION: Set the maximum number of worker processes for Jest using the --maxWorkers option. This can optimize test execution time on CI servers with limited resources.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --maxWorkers=4\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --maxWorkers=4\n```\n\n----------------------------------------\n\nTITLE: Clearing All Mocks with jest.clearAllMocks (JavaScript)\nDESCRIPTION: Added in Jest 16.0.0, `jest.clearAllMocks()` clears the `mock.calls` and `mock.instances` properties of all mocks. This is useful for cleaning up mock state between tests. Note: This was later replaced by `jest.resetAllMocks` in Jest 17.0.0.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\njest.clearAllMocks\n```\n\n----------------------------------------\n\nTITLE: Third-party Plugin Key Conflict Error Message (Bash)\nDESCRIPTION: This bash-formatted snippet demonstrates the error shown when more than one third-party plugin attempts to register the same key in Jest watch mode. The error identifies both conflicting plugins and instructs the user to resolve the configuration overlap. This is not executable code but a reference for debugging watch plugin integrations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\nWatch plugins YourFaultyPlugin and TheirFaultyPlugin both attempted to register key `x`. Please change the key configuration for one of the conflicting plugins to avoid overlap.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Referential Metadata with refID in JavaScript\nDESCRIPTION: Shows how to declare a self-referential metadata object for mocking purposes, using a 'refID' to uniquely identify the base object and a 'ref' to create self-references. This is used by jest-mock's mock generation routines to handle objects with recursive or cyclic property references. The key input is an object schema; the output enables restoration of self-linking relationships in mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-mock/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst refID = {\n  type: 'object',\n  refID: 1,\n  members: {\n    self: {ref: 1},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Determining JavaScript Value Types with jest-get-type\nDESCRIPTION: This example shows how to use the `getType` function from the `jest-get-type` package to identify the specific type of various JavaScript values (array, null, undefined). It requires the `jest-get-type` package and prints the string representation of each value's type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getType} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Functions - TypeScript\nDESCRIPTION: Exports a utils object with typed authorize and isAuthorized methods in TypeScript. This approach provides type safety for unit testing, especially when importing and mocking specific methods using Jest. Targeted for use in TypeScript test suites.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const utils = {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: (secret: string) => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use jest-puppeteer Preset\nDESCRIPTION: Configures Jest to use the `jest-puppeteer` preset by adding the `preset` key to the Jest configuration file (e.g., `jest.config.js` or `package.json`). This automatically sets up the necessary environment and global variables for Puppeteer tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"jest-puppeteer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using jest.doMock with Dynamic ES6 Imports (JS)\nDESCRIPTION: Explains how to use `jest.doMock` with ES6 modules when avoiding `require`. This involves using dynamic `import()` calls (since static imports are hoisted before `doMock` can run), setting `__esModule: true` in the mock factory, and ensuring the environment supports dynamic imports (e.g., via Babel plugins like `babel-plugin-dynamic-import-node`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestObjectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default1',\n      foo: 'foo1',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default1');\n    expect(moduleName.foo).toBe('foo1');\n  });\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default2',\n      foo: 'foo2',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toBe('default2');\n    expect(moduleName.foo).toBe('foo2');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Jest Configuration (JSON)\nDESCRIPTION: Example showing how to add comments in Jest configuration within package.json using the special '//' key. This allows for documentation within the configuration itself.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_109\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Async Rejection with mockImplementation in Jest (JS)\nDESCRIPTION: Shows the underlying implementation shorthand for `mockRejectedValue(value)`. It uses `mockImplementation` with a function that returns `Promise.reject(value)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Sequentially (Bash)\nDESCRIPTION: Illustrates how to execute Jest tests serially within the main Node.js process using the `--runInBand` command-line flag. This approach avoids spawning worker processes and can improve performance or stability in resource-constrained environments like Docker or some CI servers. Examples show direct CLI usage and usage via npm/yarn scripts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --runInBand\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --runInBand\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos using LiteYouTubeEmbed in JSX/React\nDESCRIPTION: These JSX snippets demonstrate using the `LiteYouTubeEmbed` component to embed YouTube videos by providing the video ID via the `id` prop. This component efficiently embeds videos, typically loading the full player only upon user interaction. Requires React and the imported `LiteYouTubeEmbed` component.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Architecture.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed id=\"3YDiloj8_d0\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed id=\"B8FbUK0WpVU\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Jest test script to package.json\nDESCRIPTION: Configuration to add a test script in package.json for running Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jest-mongodb Preset\nDESCRIPTION: Command to install the @shelf/jest-mongodb package using npm or yarn.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MongoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-mongodb\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Mock Call Arguments with mock.lastCall in JavaScript\nDESCRIPTION: Illustrates the `mock.lastCall` property, which provides direct access to the array of arguments passed during the most recent invocation of the mock function. It returns `undefined` if the mock hasn't been called.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n['arg3', 'arg4'];\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Output with jest-validate in JavaScript\nDESCRIPTION: Illustrates customizing the behavior and output of `jest-validate`. The `validate` function is called with additional options: `comment` adds extra text to messages, `deprecatedConfig` defines deprecated keys, and `title` overrides default message titles.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate(config, {\n  comment: '  Documentation: http://custom-docs.com',\n  deprecatedConfig,\n  exampleConfig,\n  title: {\n    deprecation: 'Custom Deprecation',\n    // leaving 'error' and 'warning' as default\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Create React App Tests in VS Code (JSON)\nDESCRIPTION: Provides a `launch.json` configuration for debugging Jest tests within a Create React App (CRA) project using Visual Studio Code. It sets `runtimeExecutable` to `react-scripts` and passes relevant arguments like `test`, `--runInBand`, and `--no-cache` for effective debugging.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",\n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\",\n        \"--watchAll=false\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Type for Diff Color Options (TS)\nDESCRIPTION: Shows the TypeScript import statement required to use the specific type definition for color options within `jest-diff`. Importing `DiffOptionsColor` allows for type-safe definition of color functions when using TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {DiffOptionsColor} from 'jest-diff';\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of jest-each with Array of Rows\nDESCRIPTION: Demonstrates how to use jest-each with an array of test cases to run multiple tests with different input parameters.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).test('returns the result of adding %d to %d', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Nth Call Arguments with toHaveBeenNthCalledWith()\nDESCRIPTION: Shows how to test the arguments of specific calls to a mock function using toHaveBeenNthCalledWith(). The example verifies the arguments for both the first and second calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenNthCalledWith(1, 'lemon');\n  expect(drink).toHaveBeenNthCalledWith(2, 'octopus');\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Generic Snapshot Names in Jest Snapshots\nDESCRIPTION: Illustrates poorly named snapshots within a Jest snapshot file (`.snap`). The generic names like `should handle some test case` make it difficult to understand the expected output (`null` or a `div` element) and verify correctness during code reviews.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexports[`<UserName /> should handle some test case`] = `null`;\n\nexports[`<UserName /> should handle some other test case`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Generated Snapshot for React Component in JavaScript\nDESCRIPTION: This is an example of a generated snapshot file for a Link component. It shows the expected structure of the rendered component in a human-readable format.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing onFileChange Hook in Jest Watch Plugin\nDESCRIPTION: Example of using the onFileChange hook to respond to file system changes in the project. This hook receives information about the projects Jest is watching.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onFileChange(({projects}) => {\n      this._projects = projects;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Jest reporters, including the default reporter and a custom XML reporter. It shows how to use multiple reporters in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter with Silent Reporter in Jest (TypeScript)\nDESCRIPTION: Example of using the Summary Reporter alongside the Silent Reporter in Jest configuration using TypeScript. This setup prints out a summary of all tests without detailed output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Jest Error Message for Reserved Key Conflict (Bash)\nDESCRIPTION: This example shows the error output from Jest when a custom watch plugin attempts to register a key (like 'q') that is reserved for internal Jest functionality. The message clearly indicates the conflicting plugin and the reserved key.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\nWatch plugin YourFaultyPlugin attempted to register key `q`, that is reserved internally for quitting watch mode. Please change the configuration key for this plugin.\n\n\n```\n\n----------------------------------------\n\nTITLE: React Native Component Implementation\nDESCRIPTION: Example of a React Native component with styling that will be used for snapshot testing\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReactNative.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nclass Intro extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n        <Text style={styles.instructions}>\n          This is a React Native snapshot test.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  instructions: {\n    color: '#333333',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  welcome: {\n    fontSize: 20,\n    margin: 10,\n    textAlign: 'center',\n  },\n});\n\nexport default Intro;\n```\n\n----------------------------------------\n\nTITLE: TestRunner Function Signature for Jest Custom Test Runner\nDESCRIPTION: Defines the function signature for a custom test runner in Jest. The function must take specific parameters including global configuration, project configuration, environment, runtime, and test path, and return a Promise with the test result.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_93\n\nLANGUAGE: ts\nCODE:\n```\nfunction testRunner(\n  globalConfig: GlobalConfig,\n  config: ProjectConfig,\n  environment: Environment,\n  runtime: Runtime,\n  testPath: string,\n): Promise<TestResult>;\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic Structure of a Jest Watch Plugin in JavaScript\nDESCRIPTION: This snippet outlines the basic class structure for a Jest watch plugin. It includes the `apply` method for hooking into Jest lifecycle events, `getUsageInfo` for defining watch mode menu prompts, and `run` for executing code when the associated key is pressed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  // Add hooks to Jest lifecycle events\n  apply(jestHooks) {}\n\n  // Get the prompt information for interactive plugins\n  getUsageInfo(globalConfig) {}\n\n  // Executed when the key from `getUsageInfo` is input\n  run(globalConfig, updateConfigAndRun) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Jest Output: No Tests Found (Plaintext)\nDESCRIPTION: Represents the console output from Jest when no tests are found matching the criteria specified. This specific output occurs when using `jest --runTestsByPath __tests__/t` (as shown in the previous example), because the provided path is incomplete and `--runTestsByPath` requires exact file paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nNo tests found\n```\n\n----------------------------------------\n\nTITLE: Installing @jest/globals for TypeScript Type Definitions\nDESCRIPTION: This command installs the `@jest/globals` package using npm. This package provides official type definitions for Jest's global functions (like `describe`, `test`, `expect`), allowing them to be explicitly imported in TypeScript test files for better type safety and autocompletion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @jest/globals\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with modulePaths\nDESCRIPTION: Jest configuration including modulePaths to set additional module search paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using rootDir with transformIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation of using the <rootDir> token with transformIgnorePatterns to ensure paths are properly resolved regardless of the environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Manually in Bash\nDESCRIPTION: Commands to navigate to an integration test directory and run Jest manually for debugging purposes.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd e2e/clear-cache\n$ node ../../packages/jest-cli/bin/jest.js # It is possible to use `node --inspect`\n```\n\n----------------------------------------\n\nTITLE: Customizing Patch Mark Color in Diff Output (TS)\nDESCRIPTION: Demonstrates how to change the color of patch marks (e.g., `@@ -12,7 +12,9 @@`) that appear when context lines are limited (`expand: false`). This TypeScript example uses the `patchColor` option with `chalk.dim` from the `chalk` library to make the patch marks appear in the same dim style as common lines.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport chalk = require('chalk');\n\nconst options = {\n  expand: false,\n  patchColor: chalk.dim,\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Setup Files\nDESCRIPTION: Configuration examples showing how to specify setup files in Jest config using both JavaScript and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Arrow Function Limitation for Jest Constructor Mocks in JavaScript\nDESCRIPTION: Shows an incorrect way to mock a constructor using an arrow function within `jest.mock`. This approach fails because arrow functions cannot be called with the `new` keyword in JavaScript, leading to a TypeError unless the code is transpiled to ES5.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return () => {\n    // Does not work; arrow functions can't be called with new\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding 'Build Testing Framework' Video using React LiteYouTubeEmbed (JSX)\nDESCRIPTION: This JSX snippet uses the `LiteYouTubeEmbed` React component to embed a YouTube video (ID: B8FbUK0WpVU) demonstrating how to build a testing framework like Jest from scratch. It depends on the `react-lite-youtube-embed` package and a React setup. The `id` prop determines which YouTube video is embedded.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Architecture.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed id=\"B8FbUK0WpVU\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Timeout for Long-Running Tests\nDESCRIPTION: Code example showing how to increase Jest's timeout duration for tests that take longer to complete. This prevents timeout errors for valid but slow tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njest.setTimeout(10_000); // 10 second timeout\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Module with Multiple Methods in CommonJS JavaScript\nDESCRIPTION: Defines a utility module with 'authorize' and 'isAuthorized' functions using CommonJS syntax, suitable for Node.js environments. Used in conjunction with jest.createMockFromModule to create partial or full manual mocks. No dependencies. Input: secret (for isAuthorized); Output: authorization status.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Mixing Jest Argument Formats\nDESCRIPTION: Shows that dashed and camelCase argument formats can be mixed within the same Jest command invocation. Here, `--update-snapshot` (dashed) and `--detectOpenHandles` (camelCase) are used together.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njest --update-snapshot --detectOpenHandles\n```\n\n----------------------------------------\n\nTITLE: Updating jest.mocked Usage for Deep and Shallow Mocking - diff\nDESCRIPTION: Shows how to refactor usages of 'jest.mocked()' from the older boolean-based signature to the new syntax required by Jest v29. When removing the second argument, the call now defaults to deep mocking. The snippet highlights removing the 'true' boolean, and provides the new approach to explicitly request shallow mocking by passing an options object. This change affects projects using TypeScript with Jest's mocking utilities, and helps avoid type errors or unexpected mocking depth.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UpgradingToJest29.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- const mockedObject = jest.mocked(someObject, true);\n+ const mockedObject = jest.mocked(someObject);\n```\n\n----------------------------------------\n\nTITLE: Increasing Jest Test Timeout Duration (JavaScript)\nDESCRIPTION: Demonstrates using the `jest.setTimeout()` function within a test file or setup file to extend the time Jest waits for a test to complete before considering it timed out. This example increases the timeout to 10 seconds (10,000 milliseconds).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njest.setTimeout(10_000); // 10 second timeout\n```\n\n----------------------------------------\n\nTITLE: Illustrative Test Output Using mockName\nDESCRIPTION: Displays example Jest test failure output (typically shown in a terminal/bash environment). It highlights how the custom mock name 'mockedFunction', set using `mockName()`, appears in the failure message, making it easier to identify which mock failed the expectation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexpect(mockedFunction).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n```\n\n----------------------------------------\n\nTITLE: Diff Output with Custom Annotation Labels (Diff)\nDESCRIPTION: Displays the resulting diff output when custom annotation labels ('Original', 'Modified') are specified using the options object. Shows the common line and the changed lines prefixed with the standard indicators.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- Original\n+ Modified\n\n  common\n- changed from\n+ changed to\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Sequentially via CLI\nDESCRIPTION: Shows how to execute Jest tests sequentially using the `--runInBand` flag. This forces tests to run in the same process, which can improve performance or stability on resource-constrained environments (like CI or Docker) by avoiding the overhead of process spawning and parallelization. Examples are provided for direct CLI usage and via npm/yarn scripts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --runInBand\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --runInBand\n```\n\n----------------------------------------\n\nTITLE: Disabling Babel transforms in Jest config\nDESCRIPTION: Jest configuration to disable automatic Babel transforms.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  transform: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Default and Global Fake Timers Configuration in Jest (JavaScript)\nDESCRIPTION: These snippets configure Jest's fakeTimers property in a project-level config using JavaScript. Options such as doNotFake, timerLimit, and enableGlobally are set for timer mocks and default mocking behavior, affecting all tests. Exports use CommonJS syntax. No extra dependencies beyond Jest required.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Jest Repository in Bash\nDESCRIPTION: Commands to fork the Jest repository, clone it locally, and create a new branch for development. This is the initial setup process for contributing to Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/<your_username>/jest\n$ cd jest\n$ git checkout -b my_branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset for DynamoDB\nDESCRIPTION: JSON configuration to specify the @shelf/jest-dynamodb preset in Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/DynamoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-dynamodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Describing JEST_WORKER_ID Environment Variable in Jest\nDESCRIPTION: Explains how Jest assigns a unique JEST_WORKER_ID to each worker process, starting from 1. It also mentions that this is set to 1 for all tests when runInBand option is true.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/EnvironmentVariables.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `JEST_WORKER_ID`\n\nEach worker process is assigned a unique id (index-based that starts with `1`). This is set to `1` for all tests when [`runInBand`](CLI.md#--runinband) is set to true.\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Serializers Globally in Jest - JSON\nDESCRIPTION: This JSON snippet shows adding a custom snapshot serializer module to Jest's global configuration. The snapshotSerializers array under jest in package.json specifies modules to use before built-in plugins. Requires my-serializer-module to be available in node_modules. This affects all test files in the project.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Jest Configuration (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to define global variables available in all test environments using the `globals` option in `jest.config.js`. It sets a global variable `__DEV__` to `true`. Note that these globals must be JSON-serializable.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Fake Timers Implementation in Jest 27 Tests\nDESCRIPTION: This JavaScript code snippet demonstrates how to enable the legacy fake timers implementation within a specific test file or suite using the Jest API. It's used when the new \"modern\" fake timers (default in Jest 27) cause issues due to subtle implementation differences. This call replaces the standard `jest.useFakeTimers()` within your test setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2021-05-25-jest-27.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers(\"legacy\")\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Snapshot After Format Change with Version Header - JavaScript\nDESCRIPTION: This snippet shows the updated Jest snapshot format introduced in v19, featuring a version header comment, streamlined snapshot key (no 'test' prefix), and improved JSX prop formatting. It demonstrates best practices for snapshot naming and formatting, ensuring compatibility and better maintainability. This is used with Jest's snapshot testing mechanism and requires that Jest 19 or newer is installed. The JSX is formatted for cleaner diffs and enhanced readability.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Jest Snapshot v1, https://goo.gl/fbAQLP\\n\\nexports[`snap 1`] = `\\n<header>\\n  <h1>\\n    Jest \\\"19\\\"\\n  </h1>\\n  <Subtitle\\n    name=\\\"Painless JavaScript Testing\\\"\\n  />\\n</header>\\n`;\n```\n\n----------------------------------------\n\nTITLE: Displaying Jest Project Sponsor Logos using HTML\nDESCRIPTION: This HTML snippet displays a series of sponsor logos for the Jest project, sourced dynamically from Open Collective. Each logo (avatar) is wrapped in an anchor tag linking to the respective sponsor's website, set to open in a new browser tab.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/jest/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/0/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/1/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/2/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/3/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/4/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/5/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/6/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/7/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/8/avatar.svg\"></a> <a href=\"https://opencollective.com/jest/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/jest/sponsor/9/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using JestWorker for Standard Parallel Tasks in JavaScript\nDESCRIPTION: This snippet shows how to create a `JestWorker` instance in a parent script (`parent.js`), specifying the worker module path, exposed methods (`foo`, `bar`, `getWorkerId`), and the number of workers. It then calls methods defined in the worker module via the worker instance and handles graceful shutdown using `myWorker.end()`. Requires the `jest-worker` package and a corresponding `./worker.js` file.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {Worker as JestWorker} from 'jest-worker';\n\nasync function main() {\n  const myWorker = new JestWorker(require.resolve('./worker'), {\n    exposedMethods: ['foo', 'bar', 'getWorkerId'],\n    numWorkers: 4,\n  });\n\n  console.log(await myWorker.foo('Alice')); // \"Hello from foo: Alice\"\n  console.log(await myWorker.bar('Bob')); // \"Hello from bar: Bob\"\n  console.log(await myWorker.getWorkerId()); // \"3\" -> this message has sent from the 3rd worker\n\n  const {forceExited} = await myWorker.end();\n  if (forceExited) {\n    console.error('Workers failed to exit gracefully');\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Running Jest Codemods Migration Utility - Bash\nDESCRIPTION: This snippet demonstrates executing the jest-codemods CLI tool via npx to automate the migration of existing tests from frameworks such as Mocha, Jasmine, AVA, or others to Jest-compatible syntax. It requires a Node.js project with npx available and access to your project directory with the tests you want to migrate. The command will guide users through transforming their test files in-place; output is printed in the terminal and changes are reflected in your source files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MigrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx jest-codemods\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Ignore Patterns in JavaScript\nDESCRIPTION: Example of configuring Jest transformIgnorePatterns to exclude certain files from transformation, with a caution about overlapping patterns that might cause unexpected behavior.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_79\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Async Resolution with mockImplementationOnce in Jest (JS)\nDESCRIPTION: Shows the underlying implementation shorthand for `mockResolvedValueOnce(value)`. It uses `mockImplementationOnce` with a function returning `Promise.resolve(value)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\n----------------------------------------\n\nTITLE: Forcing Shallow Mocking with jest.mocked() - diff\nDESCRIPTION: Illustrates how to explicitly request shallow mocking behavior for the jest.mocked() method under the new Jest 29 API. By passing {shallow: true} as the second argument, you can restore the previous shallow mocking behavior if needed. No extra dependencies, works within TypeScript and Jest context. Inputs: object to be mocked and options object, Output: shallowly mocked object. Important for legacy codebases relying on shallow mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UpgradingToJest29.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- const mockedObject = jest.mocked(someObject);\n+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking a React Native Native Module with jest.mock (JS)\nDESCRIPTION: Provides a basic example of mocking a third-party native module (`react-native-video`) using `jest.mock`. This replaces the actual native implementation with a simple string ('Video'), allowing components depending on it to render without crashing during tests. The mocked component will appear as `<Video {...props} />` in snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('react-native-video', () => 'Video');\n```\n\n----------------------------------------\n\nTITLE: Using the onFileChange Hook in a Jest Watch Plugin\nDESCRIPTION: Shows an example of the `jestHooks.onFileChange` hook within the `apply` method. This hook is triggered when changes occur in the file system being watched by Jest. It receives an object containing project information, including test paths.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onFileChange(({projects}) => {\n      this._projects = projects;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Types for a Custom Jest Matcher `toBeWithinRange` (TypeScript)\nDESCRIPTION: Provides TypeScript type definitions for the custom `toBeWithinRange` Jest matcher by augmenting the `expect` module's interfaces (`AsymmetricMatchers` and `Matchers`). This enhances type safety and enables features like IDE autocompletion when using the custom matcher in TypeScript projects. The file must be a valid module, hence the `export {}`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_61\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\\\"toBeWithinRange.d.ts\\\"\n// optionally add a type declaration, e.g. it enables autocompletion in IDEs\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\nexport {};\n```\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Summary Reporter Configuration in Jest - JavaScript\nDESCRIPTION: Configures Jest to use the built-in 'github-actions' reporter for better integration with GitHub Actions CI environments. Set 'silent' to false within options to enable grouped log outputs. Also includes the 'summary' reporter to replace the default summary from Jest's 'default' reporter. Suitable for CI/CD pipelines leveraging GitHub, ensuring test failure annotations in PRs.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Testing Jest Automock Feature in a Test File\nDESCRIPTION: This test imports the 'utils' module and checks if its functions are automatically mocked when automock is enabled in Jest. It demonstrates checking for mock function properties, customizing return values using Jest's mock functions, and asserting test results. Intended for files inside '__tests__' directories with automock enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport utils from '../utils';\\n\\ntest('if utils mocked automatically', () => {\\n  // Public methods of `utils` are now mock functions\\n  expect(utils.authorize.mock).toBeTruthy();\\n  expect(utils.isAuthorized.mock).toBeTruthy();\\n\\n  // You can provide them with your own implementation\\n  // or pass the expected return value\\n  utils.authorize.mockReturnValue('mocked_token');\\n  utils.isAuthorized.mockReturnValue(true);\\n\\n  expect(utils.authorize()).toBe('mocked_token');\\n  expect(utils.isAuthorized('not_wizard')).toBeTruthy();\\n});\n```\n\n----------------------------------------\n\nTITLE: Selectively Faking Timers in Jest with `doNotFake`\nDESCRIPTION: This Jest test demonstrates how to prevent Jest's fake timers from mocking specific APIs using the `doNotFake` option. It runs in a `jsdom` environment, mocks `window.performance.mark`, and then enables fake timers while specifying `doNotFake: ['performance']`. The test asserts that `window.performance.mark` retains its mocked implementation instead of being overridden by Jest's fake timers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nconst mockPerformanceMark = jest.fn();\nwindow.performance.mark = mockPerformanceMark;\n\ntest('allows mocking `performance.mark()`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n\n  expect(window.performance.mark).toBe(mockPerformanceMark);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom `coverageReporters` in TypeScript\nDESCRIPTION: Shows how to configure the `coverageReporters` option in `jest.config.ts` using TypeScript. It lists reporters ('clover', 'json', 'lcov') and customizes the 'text' reporter by passing options `{skipFull: true}` via a tuple, hiding fully covered files in the text report. Requires `ts-node`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing DefinitelyTyped Jest Type Definitions\nDESCRIPTION: Command to install @types/jest package which provides TypeScript type definitions for Jest globals without requiring imports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/jest\n```\n\n----------------------------------------\n\nTITLE: Highlighting Trailing Spaces with Custom Colors (JS)\nDESCRIPTION: Shows how to configure custom colors for added/deleted lines (`aColor`, `bColor`) using specific RGB values via `chalk.rgb` and `chalk.bgRgb`. Crucially, it demonstrates using `commonLineTrailingSpaceColor` set to `chalk.bgYellow` to apply a background color specifically to trailing spaces in common lines, making them more visible. Requires the `chalk` library.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n  aColor: chalk.rgb(128, 0, 128).bgRgb(255, 215, 255), // magenta\n  bColor: chalk.rgb(0, 95, 0).bgRgb(215, 255, 215), // green\n  commonLineTrailingSpaceColor: chalk.bgYellow,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting a CommonJS Module (Electron Example, JavaScript)\nDESCRIPTION: This snippet defines a CommonJS module called 'main.cjs' that imports 'BrowserWindow' and 'app' from the 'electron' module and exports an 'example' property. It illustrates CommonJS import/export patterns suitable for modules needing CJS compatibility, such as Electron main process files. Required dependencies are the Electron package and Node.js; inputs/outputs are determined by the specific application of 'example'. No ESM syntax is used here, and the code is intended to be used in conjunction with corresponding test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ECMAScriptModules.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {BrowserWindow, app} = require('electron');\n\n// etc.\n\nmodule.exports = {example};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Custom Equality Tester Implementation\nDESCRIPTION: Implements a custom equality tester for Volume objects and registers it with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a, b) {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume === isBVolume) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n```\n\n----------------------------------------\n\nTITLE: Using Property Matchers in Snapshot Tests in JavaScript\nDESCRIPTION: This snippet shows how to use property matchers in snapshot tests to handle dynamic data like dates and IDs. It uses expect.any() to match the type of the dynamic fields.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('will check the matchers and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    id: expect.any(Number),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing with `automock` Enabled in JavaScript\nDESCRIPTION: An example Jest test file (`__tests__/automock.test.js`) demonstrating the behavior when the `automock` configuration option is enabled. It verifies that the imported `utils` module's functions are automatically replaced with mock functions and shows how to assert their mocked status and provide custom return values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport utils from '../utils';\n\ntest('if utils mocked automatically', () => {\n  // Public methods of `utils` are now mock functions\n  expect(utils.authorize.mock).toBeTruthy();\n  expect(utils.isAuthorized.mock).toBeTruthy();\n\n  // You can provide them with your own implementation\n  // or pass the expected return value\n  utils.authorize.mockReturnValue('mocked_token');\n  utils.isAuthorized.mockReturnValue(true);\n\n  expect(utils.authorize()).toBe('mocked_token');\n  expect(utils.isAuthorized('not_wizard')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Emulating Unix Diff Command with diff-sequences in JavaScript\nDESCRIPTION: This comprehensive snippet presents a set of utility functions (getRange, pushDelIns, findShortestEditScript) for emulating the Unix diff command. It processes two file contents line-wise, uses diff-sequences to find the shortest edit script, then formats the differences following diff output conventions. Dependencies include diff-sequences; expects string inputs a and b representing file contents. It outputs a formatted string suitable for visual inspection or command-line emulation, handling all edit types (add, delete, change).\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Given zero-based half-open range [start, end) of array indexes,\n// return one-based closed range [start + 1, end] as string.\nconst getRange = (start, end) =>\n  start + 1 === end ? `${start + 1}` : `${start + 1},${end}`;\n\n// Given index intervals of lines to delete or insert, or both, or neither,\n// push formatted diff lines onto array.\nconst pushDelIns = (aLines, aIndex, aEnd, bLines, bIndex, bEnd, array) => {\n  const deleteLines = aIndex !== aEnd;\n  const insertLines = bIndex !== bEnd;\n  const changeLines = deleteLines && insertLines;\n  if (changeLines) {\n    array.push(`${getRange(aIndex, aEnd)}c${getRange(bIndex, bEnd)}`);\n  } else if (deleteLines) {\n    array.push(`${getRange(aIndex, aEnd)}d${String(bIndex)}`);\n  } else if (insertLines) {\n    array.push(`${String(aIndex)}a${getRange(bIndex, bEnd)}`);\n  } else {\n    return;\n  }\n\n  for (; aIndex !== aEnd; aIndex += 1) {\n    array.push(`< ${aLines[aIndex]}`); // delete is less than\n  }\n\n  if (changeLines) {\n    array.push('---');\n  }\n\n  for (; bIndex !== bEnd; bIndex += 1) {\n    array.push(`> ${bLines[bIndex]}`); // insert is greater than\n  }\n};\n\n// Given content of two files, return emulated output of diff utility.\nconst findShortestEditScript = (a, b) => {\n  const aLines = a.split('\\n');\n  const bLines = b.split('\\n');\n  const aLength = aLines.length;\n  const bLength = bLines.length;\n\n  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const array = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    pushDelIns(aLines, aIndex, aCommon, bLines, bIndex, bCommon, array);\n    aIndex = aCommon + nCommon; // number of lines compared in a\n    bIndex = bCommon + nCommon; // number of lines compared in b\n  };\n\n  diff(aLength, bLength, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change lines.\n  pushDelIns(aLines, aIndex, aLength, bLines, bIndex, bLength, array);\n\n  return array.length === 0 ? '' : `${array.join('\\n')}\\n`;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing run Method in Jest Watch Plugin\nDESCRIPTION: Basic implementation of the run method that executes when the user presses the plugin's key in watch mode. Returns a Promise that resolves to a boolean indicating whether Jest should rerun tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  run(globalConfig, updateConfigAndRun) {\n    // do something.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing `node-notifier` for Jest Notifications\nDESCRIPTION: Shows the command to install the `node-notifier` package as a development dependency using npm (or yarn via the `npm2yarn` notation). This package is required for Jest to display native OS notifications when the `notify: true` option is enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev node-notifier\n```\n\n----------------------------------------\n\nTITLE: Publishing a Stable Jest Release using Lerna-Lite (Shell)\nDESCRIPTION: Executes the `lerna-lite` publish command via yarn to initiate a new stable release process for the Jest project. This command interactively prompts the user to select the package versions to be published. Requires `yarn` and `lerna-lite` to be installed and configured.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lerna publish\n```\n\n----------------------------------------\n\nTITLE: Configuring `modulePathIgnorePatterns` in Jest (TypeScript)\nDESCRIPTION: Sets the `modulePathIgnorePatterns` option in `jest.config.ts` using TypeScript. It defines an array of regex patterns to match against full module paths, preventing matched modules from being required. This example ignores paths inside `<rootDir>/build/`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Diff Objects Manually\nDESCRIPTION: Example demonstrating how to manually create Diff objects for custom diff implementations. This might be useful when implementing application-specific cleanup algorithms or custom formatting.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffCommon = new Diff(DIFF_EQUAL, 'changed ');\nconst diffDelete = new Diff(DIFF_DELETE, 'from');\nconst diffInsert = new Diff(DIFF_INSERT, 'to');\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Mocking in Jest (JavaScript)\nDESCRIPTION: Example of configuring automatic mocking in Jest using JavaScript. This snippet shows how to enable automatic mocking in the Jest configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  automock: true,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Running a Focused Test Suite with describe.only in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use describe.only to run a single describe block in Jest, causing only the contained tests to execute while skipping all others. Useful for isolating a specific group of tests during development or debugging. Requires Jest; key parameters are the name of the suite and the test functions within. Only the specified tests produce outputs; all others in the file are skipped.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndescribe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Default Jest Configuration with JavaScript\nDESCRIPTION: Example of extending Jest's default configuration values using JavaScript. It imports default settings from jest-config and adds additional file extensions to the moduleFileExtensions array.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {defaults} = require('jest-config');\n\n/** @type {import('jest').Config} */\nconst config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts', 'cts'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Jest Output When No Tests Found with --runTestsByPath\nDESCRIPTION: Displays the console output generated by Jest when the `--runTestsByPath` option is used but fails to find any tests matching the provided exact paths. This typically occurs if the specified path is incorrect or incomplete.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNo tests found\n```\n\n----------------------------------------\n\nTITLE: Volume Class Implementation in JavaScript\nDESCRIPTION: Defines a Volume class with custom equality logic for comparing volumes in different units (L and mL).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Volume {\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString() {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other) {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.unit;\n    } else {\n      return this.amount === other.unit * 1000;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom File Transformer for Jest\nDESCRIPTION: Example of a custom file transformer that returns the basename of a file for Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Webpack.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Async Assertions with Custom Jest Environment (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates advanced Jest 20 testing APIs such as the @jest-environment annotation for specifying the Node environment per test file. It uses expect.hasAssertions() to ensure at least one assertion per test and leverages async Promises with resolves modifiers. The test expects an assertion failure due to mismatched object values. Dependencies include Jest 20+, Immutable.js, and eslint-plugin-jest for lint rule enforcement. Inputs are objects compared within the test, and outputs are test pass/fail results with formatted errors if expectations are not met.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-05-06-jest-20-delightful-testing-multi-project-runner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment node\n */\n\ntest('compares apples and bananas', async () => {\n  expect.hasAssertions(); // Ensure this test has at least one assertion.\n\n  await expect(\n    Promise.resolve(Immutable.Map({apples: 1, bananas: 2})),\n  ).resolves.toEqual(Immutable.Map({apples: 1, bananas: 3}));\n\n  expect('banana'); // valid-expect in eslint-plugin-jest will show an error.\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring modulePaths in Jest (TypeScript)\nDESCRIPTION: TypeScript version of setting modulePaths in Jest configuration. It demonstrates how to add extra locations for Jest to search when resolving modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Number of Successful Returns with toHaveReturnedTimes()\nDESCRIPTION: Shows how to test that a mock function returned successfully an exact number of times using toHaveReturnedTimes(). The example verifies the function returned twice.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntest('drink returns twice', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Jest Architecture Video using React LiteYouTubeEmbed (JSX)\nDESCRIPTION: This JSX snippet utilizes the 'LiteYouTubeEmbed' React component to embed a YouTube video (ID: 3YDiloj8_d0) discussing Jest's architecture and its modular package structure. It requires the 'react-lite-youtube-embed' package and a React environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Architecture.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed id=\"3YDiloj8_d0\" />\n```\n\n----------------------------------------\n\nTITLE: Project Directory Layout for Manual Mocks - Bash\nDESCRIPTION: Demonstrates a typical project directory structure for implementing manual mocks in Jest. The layout highlights locations for source modules, manual mock files inside `__mocks__` directories, and test files. This structure is crucial for proper Jest mock resolution and should be maintained for expected mock detection.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── config\\n├── __mocks__\\n│   └── fs.js\\n├── models\\n│   ├── __mocks__\\n│   │   └── user.js\\n│   └── user.js\\n├── node_modules\\n└── views\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: TypeScript example of configuring watchPathIgnorePatterns in Jest to ignore specific directories during watch mode. Uses type imports from Jest for better type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Complete Jest Test File with Class Mocking and Spying - JavaScript\nDESCRIPTION: Presents a full test suite using a Jest module factory to mock a class, spy on its methods, and verify object instantiation and method calls. Demonstrates best practices in setup (mocking, beforeEach), test structure, and assertions. Dependencies include Jest and the tested modules. Expects the mocked module, method calls, and assertions with expected outputs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Concurrently Only Selected Data-Driven Tests with Jest (JavaScript)\nDESCRIPTION: Demonstrates the use of `test.concurrent.only.each` to execute only a specific subset of parameterized tests in parallel using Jest. The first block runs three different test cases concurrently, each checking addition, and prevents other tests in the same suite from running. Requires Jest with support for concurrent tests; primarily focuses on running data-driven tests efficiently during debugging or focused runs. Inputs are arrays representing test parameters, and the function checks if their sum matches expectations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Jest CLI Command Example\nDESCRIPTION: Example of running Jest from command line with notification and config options.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest my-test --notify --config=config.json\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Types with jest-validate in JavaScript\nDESCRIPTION: Demonstrates how to allow multiple valid types for a single configuration option using the `multipleValidOptions` helper function. In this example, the `bar` option in the configuration is valid if it's either a string or a number.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {multipleValidOptions} from 'jest-validate';\n\nvalidate(config, {\n  // `bar` will accept either a string or a number\n  bar: multipleValidOptions('string is ok', 2),\n});\n```\n\n----------------------------------------\n\nTITLE: Diff Output with Preserved Object Key Order (Diff)\nDESCRIPTION: Shows the diff output for two objects when key sorting is disabled via `compareKeys: () => 0`. The keys (`c`, `b`, `a`) appear in the order they were likely defined or inserted, rather than alphabetically.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\n+ Received\n\n  Object {\n    \"c\": \"c\",\n-   \"b\": \"b1\",\n+   \"b\": \"b2\",\n    \"a\": \"a\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Global Teardown Script for Puppeteer\nDESCRIPTION: Node.js script intended for Jest's `globalTeardown`. It retrieves the Puppeteer browser instance stored in `globalThis.__BROWSER_GLOBAL__` by the setup script, closes the browser using `browser.close()`, and removes the temporary directory (`DIR`) containing the WebSocket endpoint file, cleaning up resources. Requires `fs.promises`, `os`, and `path`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// teardown.js\nconst fs = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\nmodule.exports = async function () {\n  // close the browser instance\n  await globalThis.__BROWSER_GLOBAL__.close();\n\n  // clean-up the wsEndpoint file\n  await fs.rm(DIR, {recursive: true, force: true});\n};\n```\n\n----------------------------------------\n\nTITLE: Running Snapshot Test for Intro Component with Jest - TypeScript (React)\nDESCRIPTION: This snippet demonstrates writing a Jest snapshot test for the previously defined 'Intro' React Native component using react-test-renderer. Dependencies include Jest and react-test-renderer. The test renders the component, serializes it to JSON, and compares it to a stored snapshot for regression testing. No input parameters; the output is a pass/fail determination for UI changes, and it auto-generates a .snap file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReactNative.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Intro from '../Intro';\n\ntest('renders correctly', () => {\n  const tree = renderer.create(<Intro />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jest TypeScript Types from DefinitelyTyped - Bash\nDESCRIPTION: Installs '@types/jest' from DefinitelyTyped to provide Jest global types in TypeScript projects. Useful for projects that prefer global typings and want to avoid explicit imports of Jest APIs. Requires npm and is recommended to match the package version with installed Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/jest\n```\n\n----------------------------------------\n\nTITLE: Bypassing Jest Mocks with jest.requireActual for node-fetch – JavaScript\nDESCRIPTION: Modifies the import approach to allow using the actual node-fetch Response class even while fetch remains mocked. This uses jest.requireActual to import only the non-mocked Response, resolving issues with missing native methods in the class. Prerequisites: Jest environment; mocked fetch function. Ensures compatibility with original code requiring unmocked class behavior while other parts of the module remain mocked.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/BypassingModuleMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AFTER\\njest.mock('node-fetch');\\nimport fetch from 'node-fetch';\\nconst {Response} = jest.requireActual('node-fetch');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transformer for Jest\nDESCRIPTION: Example of a custom transformer (custom-transformer.js) using @babel/core for advanced Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst {transform} = require('@babel/core');\nconst jestPreset = require('babel-preset-jest');\n\nmodule.exports = {\n  process(src, filename) {\n    const result = transform(src, {\n      filename,\n      presets: [jestPreset],\n    });\n\n    return result || src;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Supporter Data using Node (Bash)\nDESCRIPTION: Executes the `fetchSupporters.js` script using Node.js to fetch the `backers.json` file. This step is performed after installing dependencies and before starting the development server.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode fetchSupporters.js\n```\n\n----------------------------------------\n\nTITLE: Installing Jest using Yarn\nDESCRIPTION: Command to install Jest as a dev dependency using Yarn package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev jest\n```\n\n----------------------------------------\n\nTITLE: Initial Test Implementation with Mock Issue\nDESCRIPTION: Shows an initial attempt at testing the createUser function by mocking node-fetch. This implementation fails because the Response class is also mocked, causing the test to throw a TypeError.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/BypassingModuleMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('node-fetch');\n\nimport fetch, {Response} from 'node-fetch';\nimport {createUser} from './createUser';\n\ntest('createUser calls fetch with the right args and returns the user id', async () => {\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\n\n  const userId = await createUser();\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {\n    method: 'POST',\n  });\n  expect(userId).toBe('4');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Test Environment Options in Jest Test File\nDESCRIPTION: This code snippet demonstrates how to specify test environment options directly in a Jest test file using a docblock pragma.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Run Method for Jest Watch Plugin in JavaScript\nDESCRIPTION: Basic structure of the run method to handle key press events in a Jest watch plugin.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  run(globalConfig, updateConfigAndRun) {\n    // do something.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Module with Multiple Methods - JavaScript\nDESCRIPTION: Defines a module exporting an object with two methods: authorize (returns a static token) and isAuthorized (returns true if secret is 'wizard'). Meant for import and use as a mockable or testable dependency within Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Test Suites with shouldRunTestSuite Hook (JavaScript)\nDESCRIPTION: This snippet illustrates two ways to use the `shouldRunTestSuite` hook in Jest--synchronously and asynchronously. The hook takes a `testSuiteInfo` parameter, allowing the plugin to control which test suites run based on conditions such as the file path. Usage of synchronous return (`boolean`) or an asynchronous `Promise<boolean>` is supported, and the plugin may selectively execute suites containing a custom keyword.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return testSuiteInfo.testPath.includes('my-keyword');\n    });\n\n    // or a promise\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing Execution on Data-Driven Tests with Template Literal Syntax in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates `test.only.each` with the tagged template literal syntax. Only the parameterized tests defined in the template literal will be executed within the file; other tests are skipped. This helps isolate and debug specific data-driven test cases.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\ntest.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Order of afterEach Hooks for jasmine2 Test Runner - JavaScript\nDESCRIPTION: Presents a diff snippet to clarify that jasmine2 calls afterEach hooks in the reverse order of declaration compared to Jest. Suggests how to reorder afterEach calls so the execution order matches Jest's if using the jasmine2 runner. Intended for users switching test runners or comparing behaviors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/SetupAndTeardown.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n```diff\n  beforeEach(() => console.log('connection setup'));\n+ afterEach(() => console.log('connection teardown'));\n\n  beforeEach(() => console.log('database setup'));\n+ afterEach(() => console.log('database teardown'));\n\n- afterEach(() => console.log('database teardown'));\n- afterEach(() => console.log('connection teardown'));\n\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Greater Than Comparison with toBeGreaterThan in Jest\nDESCRIPTION: This example demonstrates using .toBeGreaterThan() to compare numeric values. The test verifies that the ouncesPerCan() function returns a value strictly greater than 10.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest('ounces per can is more than 10', () => {\n  expect(ouncesPerCan()).toBeGreaterThan(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching VS Code Debugger to Running Jest Process (JSON)\nDESCRIPTION: Provides a `launch.json` configuration for Visual Studio Code to attach its debugger to an existing Node.js process running Jest (started with `--inspect-brk`). It specifies the request type as 'attach' and the default debugging port 9229.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach\",\n      \"port\": 9229\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Options in Jest (TypeScript)\nDESCRIPTION: Shows how to configure test environment options in Jest using TypeScript. This example sets custom HTML, URL, and user agent for the 'jsdom' environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Limiting Context Lines in Diff Output (JS)\nDESCRIPTION: Illustrates how to control the number of unchanged 'context' lines displayed around differences. Setting `contextLines` to a specific number (e.g., 1) and `expand` to `false` limits the output to show only that many common lines before and after a change, making the diff more concise. When `expand` is `false`, patch marks may appear.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n  contextLines: 1,\n  expand: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Building Jest from TypeScript to JavaScript\nDESCRIPTION: Command to transpile TypeScript code to JavaScript and perform type checking for Jest development.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample ESM Module for Testing (JavaScript)\nDESCRIPTION: Provides a basic ECMAScript Module (`esm-module.mjs`) with both a default export and a named export (`namedFn`). This module serves as the target for mocking and unmocking demonstrations in subsequent test code snippets.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ECMAScriptModules.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// title=\"esm-module.mjs\"\nexport default () => {\n  return 'default';\n};\n\nexport const namedFn = () => {\n  return 'namedFn';\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for TypeScript\nDESCRIPTION: Adds TypeScript preset to Babel configuration, allowing Jest to process TypeScript files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {targets: {node: 'current'}}],\n    // highlight-next-line\n    '@babel/preset-typescript',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use jest-puppeteer Preset\nDESCRIPTION: JSON configuration snippet demonstrating how to set the `preset` property in Jest's configuration (e.g., in `jest.config.js` or `package.json`) to `jest-puppeteer`. This automatically applies the necessary setup and teardown logic for using Puppeteer.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Puppeteer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"jest-puppeteer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring `moduleDirectories` in Jest (TypeScript)\nDESCRIPTION: Configures the `moduleDirectories` option in `jest.config.ts` using TypeScript. This specifies directories Jest should search recursively for modules, overriding the default to include both `node_modules` and `bower_components`.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Watch Plugin in JavaScript\nDESCRIPTION: Example of adding a custom watch plugin to Jest configuration file (jest.config.js).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: ['path/to/yourWatchPlugin'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use the Jest-Puppeteer Preset (JSON)\nDESCRIPTION: Specifies the use of the jest-puppeteer preset in Jest's configuration file. This enables automatic configuration of the Puppeteer environment when running tests. Requires that jest-puppeteer is installed and Jest is initialized. The preset parameter signals Jest to delegate setup to the plugin, exposing Puppeteer's page and browser objects globally. Place this block in your jest.config.json or equivalent file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"jest-puppeteer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use Custom File Transformer (JavaScript)\nDESCRIPTION: Example Jest configuration (`jest.config.js`) demonstrating how to register the custom `fileTransformer.js`. It uses the `transform` option to map a regular expression matching various static file extensions (images, fonts, audio, video) to the path of the custom transformer module (`<rootDir>/fileTransformer.js`). This configuration tells Jest to use the specified transformer for any imported files matching the pattern.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CodeTransformation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// title=\"jest.config.js\"\nmodule.exports = {\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring fakeTimers in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation for configuring Jest's fake timers. Sets up fake timers while preserving the original implementation of nextTick and limiting recursive timers to 1000.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring `modulePathIgnorePatterns` in Jest (JavaScript)\nDESCRIPTION: Sets the `modulePathIgnorePatterns` option in `jest.config.js`. This configuration prevents Jest's module loader from resolving modules whose full paths match the provided regular expression patterns. The example ignores any path within the `<rootDir>/build/` directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset for webpack\nDESCRIPTION: Command to install @babel/preset-env, which is needed alongside babel-jest when using Jest with webpack for JavaScript transpilation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Limiting Jest Worker Pool to Optimize CI Performance\nDESCRIPTION: Commands to limit Jest's worker pool to a specific number of workers. This can significantly reduce test execution time on CI servers with limited CPU cores.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --maxWorkers=4\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --maxWorkers=4\n```\n\n----------------------------------------\n\nTITLE: Mocking Single Resolved Promise with `mockResolvedValueOnce` Shorthand (JavaScript)\nDESCRIPTION: Provides the shorthand equivalent for `mockFn.mockResolvedValueOnce(value)`. This method configures a mock function to return a Promise that resolves with the specified value for only the next call. It uses `jest.fn().mockImplementationOnce()` internally.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\n----------------------------------------\n\nTITLE: Configuring sandboxInjectedGlobals in Jest - JavaScript\nDESCRIPTION: This JavaScript configuration file demonstrates how to inject global objects (such as Math) into the Jest vm sandbox for faster property lookup. It exports a config object specifying sandboxInjectedGlobals, improving performance for test code that frequently accesses globals. This setting does not affect environments using native ESM modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nmodule.exports = config;\n\n```\n\n----------------------------------------\n\nTITLE: Using --watchAll option in Jest\nDESCRIPTION: The --watchAll option watches files for changes and reruns all tests when something changes, rather than only those related to changed files. It can be disabled using --no-watchAll or --watchAll=false.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n--watchAll\n```\n\n----------------------------------------\n\nTITLE: Using Prettier v2 with Jest via Package Alias\nDESCRIPTION: Workaround for using Prettier with Jest as Prettier v3 is not supported. This configures package.json to use v2 of Prettier via a package alias and sets the prettierPath in Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"prettier-2\": \"npm:prettier@^2\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  prettierPath: require.resolve('prettier-2'),\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  prettierPath: require.resolve('prettier-2'),\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a task module for jest-worker\nDESCRIPTION: This example shows how to define a module with a heavy computation task that can be executed in parallel using jest-worker.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Jest and React Testing\nDESCRIPTION: Sample package.json configuration with React dependencies, Jest, and test script setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"<current-version>\",\n    \"react-dom\": \"<current-version>\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"<current-version>\",\n    \"@babel/preset-react\": \"<current-version>\",\n    \"babel-jest\": \"<current-version>\",\n    \"jest\": \"<current-version>\",\n    \"react-test-renderer\": \"<current-version>\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Environment for Jest Globals\nDESCRIPTION: This JSON snippet shows how to configure ESLint to recognize Jest's global variables (like `describe`, `test`, `expect`). By adding `\"env\": { \"jest\": true }` within an override targeting test files (e.g., `tests/**/*`), it prevents ESLint from reporting `no-undef` errors for these globals.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"env\": {\n        \"jest\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest modulePaths in TypeScript\nDESCRIPTION: Configures the `modulePaths` option in a Jest TypeScript setup using the `Config` type. This provides an array of absolute paths for Jest's module resolver, similar to `NODE_PATH`. The example uses `<rootDir>` to specify a path relative to the project root.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_51\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest-Puppeteer Preset via NPM (Bash)\nDESCRIPTION: Installs the jest-puppeteer package using npm to facilitate integration of Puppeteer browser automation with the Jest testing framework. Requires Node.js, npm, and an existing Jest setup. This command adds jest-puppeteer as a development dependency, making subsequent configuration and UI tests possible. There are no parameters; simply run as shown in a shell terminal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Puppeteer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration in Jest Watch Plugin Constructor\nDESCRIPTION: Example of accessing custom configuration passed to a Jest watch plugin in its constructor.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  constructor({config}) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Object with Type Annotations - TypeScript\nDESCRIPTION: Defines a TypeScript export of a utils object with authorize and isAuthorized methods, with types annotated. Meant for illustrating type-safe mocking in Jest via createMockFromModule. Requires TypeScript and Jest; input/output follows type definitions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const utils = {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: (secret: string) => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Ignore Patterns for pnpm (JavaScript)\nDESCRIPTION: JavaScript configuration example showing how to configure transformIgnorePatterns for pnpm package manager, addressing the symlink structure specific to pnpm.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_84\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative pattern to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters with Default and JUnit in JavaScript\nDESCRIPTION: Configures Jest reporters in JavaScript to use both the standard `default` reporter and the `jest-junit` reporter. Options specific to the `jest-junit` reporter, such as `outputDirectory` and `outputName`, are passed using the tuple syntax `['jest-junit', optionsObject]`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_63\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Tables in jest-dynamodb-config.js\nDESCRIPTION: JavaScript configuration file that defines DynamoDB tables for testing. This example creates a 'files' table with a string ID as the hash key.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/DynamoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  tables: [\n    {\n      TableName: `files`,\n      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],\n      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n    },\n    // etc\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting a Simple Function from a JavaScript Module\nDESCRIPTION: This snippet defines a simple Node.js module (`foo.js`) that exports a single function using the `module.exports` syntax. The function itself has some placeholder implementation commented out.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function () {\n  // some implementation;\n};\n```\n\n----------------------------------------\n\nTITLE: Attempting Jest Test Execution with Incomplete Path using --runTestsByPath (Bash)\nDESCRIPTION: This command attempts to run Jest tests using the `--runTestsByPath` option with an incomplete path `__tests__/t`. Because this option requires exact file paths rather than patterns or partial names, it will not match any test files in the example directory structure, leading to no tests being executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njest --runTestsByPath __tests__/t\n```\n\n----------------------------------------\n\nTITLE: Configuring testSequencer in Jest with TypeScript\nDESCRIPTION: TypeScript example of configuring Jest to use a custom test sequencer by specifying the path to the sequencer implementation file in the Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Formatted Diff Output for Empty vs Multi-line String (Diff)\nDESCRIPTION: Illustrates the formatted diff output corresponding to the comparison between an empty string and a multi-line string using `diffLinesRaw`. It shows the expected (-0) and received (+3) line counts in the header and lists the inserted lines.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- Expected  - 0\n+ Received  + 3\n\n+ line 1\n+ line 2\n+ line 3\n```\n\n----------------------------------------\n\nTITLE: Installing Jest via NPM\nDESCRIPTION: Command to install Jest as a development dependency using npm package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Jest Configuration (JSON)\nDESCRIPTION: Example of using the special '//' property to add comments to Jest configuration in package.json. This allows for better documentation of configuration choices.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_108\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Dynamic Imports in Jest\nDESCRIPTION: Advanced .babelrc configuration that supports dynamic imports in test environments. This is needed if your code uses import() syntax with webpack.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"plugins\": [\"syntax-dynamic-import\"],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"dynamic-import-node\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Snapshot for React Component Testing\nDESCRIPTION: Example of a generated snapshot file (__tests__/__snapshots__/Link.test.js.snap) from Jest snapshot testing of a React component.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`changes the class when hovered 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 2`] = `\n<a\n  className=\"hovered\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 3`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jest Website for Development in Shell\nDESCRIPTION: Commands to navigate to the website directory, install dependencies, fetch supporters data, and start the development server for the Jest website.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ cd website       # Only needed if you are not already in the website directory\n$ yarn\n$ node fetchSupporters.js\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Docblock with Pragma Example in JavaScript\nDESCRIPTION: An example of a docblock with a pragma (a word prefixed by @). Pragmas are special annotations within docblocks that can be parsed for metadata.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Pragma incoming!\n *\n * @flow\n */\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Shards (Bash)\nDESCRIPTION: These commands illustrate how to use the `--shard` option to split a test suite into multiple parts (shards) for parallel execution, typically across different machines or processes in a CI environment. The examples show how to run the first, second, and third shard respectively when the suite is split into three (`1/3`, `2/3`, `3/3`). This requires a `testSequencer` that supports sharding.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=1/3\njest --shard=2/3\njest --shard=3/3\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Global Teardown Module in Jest (JavaScript)\nDESCRIPTION: Shows an example of a `globalTeardown` module (`teardown.js`) for Jest. This module exports a function (sync or async) that runs once after all test suites have completed. It receives Jest's `globalConfig` and `projectConfig`. This example logs configuration details and uses the global reference set in `globalSetup` (`globalThis.__MONGOD__`) to stop the MongoDB server.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPatterns);\n  console.log(projectConfig.cache);\n\n  await globalThis.__MONGOD__.stop();\n};\n```\n\n----------------------------------------\n\nTITLE: Installing jest-matcher-utils using Yarn\nDESCRIPTION: This shell command uses the Yarn package manager to download and add the `jest-matcher-utils` package as a dependency to the current project. It serves as an alternative to npm and requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-matcher-utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add jest-matcher-utils\n```\n\n----------------------------------------\n\nTITLE: Configuring sandboxInjectedGlobals in Jest - TypeScript\nDESCRIPTION: This TypeScript configuration showcases injection of global objects (like Math) into the Jest vm sandbox by specifying sandboxInjectedGlobals on a Config-typed object. The configuration is exported as the default module export, and is intended for projects using TypeScript module syntax instead of CommonJS.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Installing JSDOM Test Environment for Jest\nDESCRIPTION: Command to install the jest-environment-jsdom package which provides DOM simulation for Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialjQuery.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Referencing External Jest Configuration in package.json\nDESCRIPTION: Example of referencing an external Jest configuration JSON file through the \"jest\" key in package.json. This allows keeping configuration separate while maintaining the package.json reference.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": \"./path/to/config.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the @jest/expect-utils Module\nDESCRIPTION: Shows the module name for the expect utilities in Jest. This module exports utility functions for the expect assertion function that is core to Jest's testing framework.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/expect-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@jest/expect-utils`\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Randomization and Seed\nDESCRIPTION: Demonstrates how to run Jest tests with randomization enabled and a specific seed value. This is useful for reproducing test order in cases of flaky tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest --randomize --seed 1234\n```\n\n----------------------------------------\n\nTITLE: Installing Babel and Babel Presets for Jest - Bash\nDESCRIPTION: Outlines the installation of Babel-related dependencies to transpile code using Babel with Jest. Requires Node.js, npm, and a pre-existing project. Installs 'babel-jest', '@babel/core', and '@babel/preset-env' as dev dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Example Jest Error Message for Third-Party Key Conflict (Bash)\nDESCRIPTION: This example displays the error message Jest generates when two different third-party watch plugins attempt to register the same key (e.g., 'x'). The message identifies both conflicting plugins and prompts the user to resolve the overlap.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\nWatch plugins YourFaultyPlugin and TheirFaultyPlugin both attempted to register key `x`. Please change the key configuration for one of the conflicting plugins to avoid overlap.\n\n\n```\n\n----------------------------------------\n\nTITLE: Omitting Annotation Header Lines in Diff (JS)\nDESCRIPTION: Demonstrates how to generate a diff output that excludes the standard 'Expected' and 'Received' annotation header lines. This is achieved by setting the `omitAnnotationLines` option to `true` when calling `diffStringsUnified`. Requires `diffStringsUnified` from `jest-diff`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst a = 'common\\nchanged from';\nconst b = 'common\\nchanged to';\n\nconst options = {\n  omitAnnotationLines: true,\n};\n\nconst difference = diffStringsUnified(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Ensuring matchMedia is Mocked Before Importing Test Target - JavaScript (ES Modules)\nDESCRIPTION: This ES Modules JavaScript code demonstrates how to sequence imports to ensure that a manual mock for window.matchMedia is established before importing the module under test. By importing './matchMedia.mock' first, it guarantees that the global browser API stubs are available, resolving JSDOM limitation issues with direct matchMedia execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ManualMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport './matchMedia.mock'; // Must be imported before the tested file\\nimport {myMethod} from './file-to-test';\\n\\ndescribe('myMethod()', () => {\\n  // Test the method here...\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration in a Jest Watch Plugin Constructor (JavaScript)\nDESCRIPTION: This snippet shows the constructor of a Jest watch plugin class. It receives an object containing a `config` property, which holds the custom configuration provided in the `jest.config.js` file, allowing the plugin to adapt its behavior based on user settings.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/WatchPlugins.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  constructor({config}) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using jest-each for Parameterized Tests in Jest (JavaScript)\nDESCRIPTION: Demonstrates the use of `test.each` (integrated from the `jest-each` package) for creating data-driven tests. It allows defining a table of test cases (using arrays or template literals) and running the same test logic for each row with the specified column values.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Example using test.each with template literals\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\n// Example using test.each with arrays\n\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a CommonJS Module for Testing in JavaScript\nDESCRIPTION: This snippet shows a basic CommonJS module (`main.cjs`) that imports dependencies (`BrowserWindow`, `app` from `electron`) using `require` and exports functionality via `module.exports`. It serves as an example module to be tested and mocked from an ESM test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ECMAScriptModules.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst {BrowserWindow, app} = require('electron');\n\n// etc.\n\nmodule.exports = {example};\n```\n\n----------------------------------------\n\nTITLE: Configuring SnapshotFormat Option in Jest Configuration - diff\nDESCRIPTION: Demonstrates how to set the 'snapshotFormat' property in your Jest configuration to maintain the old snapshot behavior (pre-v29), where string escaping and printing basic prototypes are enabled. Users upgrading to Jest v29 can paste this snippet into their Jest config file (e.g., jest.config.js) to prevent changes in snapshot formatting. Ensure configuration files are written in supported formats and that these options suit your project's snapshot usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UpgradingToJest29.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ snapshotFormat: {\n+   escapeString: true,\n+   printBasicPrototype: true\n+ }\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation of transformIgnorePatterns configuration in Jest that specifies patterns for files that should not be transformed during testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using babel-plugin-jest-hoist via CLI\nDESCRIPTION: Command line example of using the Babel CLI to transform a JavaScript file with the jest-hoist plugin.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-plugin-jest-hoist/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ babel --plugins jest-hoist script.js\n```\n\n----------------------------------------\n\nTITLE: Installing jest-changed-files via npm\nDESCRIPTION: Command to install the jest-changed-files module using npm package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save jest-changed-files\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup for Manual Puppeteer Integration (JavaScript)\nDESCRIPTION: Defines a Jest global setup script (`setup.js`). It launches a Puppeteer browser instance, stores the instance on `globalThis.__BROWSER_GLOBAL__` for access in teardown, creates a temporary directory, and writes the browser's WebSocket endpoint to a file (`wsEndpoint`) within that directory. This endpoint allows test environments to connect to the same browser instance. Requires `puppeteer`, `fs.promises`, `os`, and `path` modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// setup.js\nconst {mkdir, writeFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nmodule.exports = async function () {\n  const browser = await puppeteer.launch();\n  // store the browser instance so we can teardown it later\n  // this global is only available in the teardown but not in TestEnvironments\n  globalThis.__BROWSER_GLOBAL__ = browser;\n\n  // use the file system to expose the wsEndpoint for TestEnvironments\n  await mkdir(DIR, {recursive: true});\n  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Resolver with browser-resolve (JavaScript)\nDESCRIPTION: JavaScript code for a custom Jest resolver (`resolver.js`). It uses the `browser-resolve` package to provide module resolution logic based on the `browser` field, restoring functionality removed in Jest 26. This script should be referenced in the Jest configuration's `resolver` property. Requires `browser-resolve` to be installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2020-05-05-jest-26.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// resolver.js\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter Options in Jest (JavaScript)\nDESCRIPTION: Example of configuring options for the Summary Reporter in Jest using JavaScript. This setup sets the summaryThreshold option to control when detailed summaries are printed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Suites with describe.skip in Jest (JavaScript)\nDESCRIPTION: This snippet shows how to skip all tests in a describe block using describe.skip (or its alias xdescribe), while another block is not skipped. The skipped suite includes two property assertions on myOtherBeverage, which are not executed. This is suitable for temporarily disabling a group of tests without commenting them out. Only Jest is required, and any setup inside skipped blocks should also be moved if it must not run.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Loader Options in Jest\nDESCRIPTION: Example of passing options to the TypeScript configuration loader through docblocks. This example shows how to enable transpileOnly mode for ts-node.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/** @jest-config-loader ts-node */\n/** @jest-config-loader-options {\"transpileOnly\": true} */\n\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Specifying Default and Additional Transformers in Jest (JSON)\nDESCRIPTION: This JSON shows how to explicitly define Jest's transform configuration, using 'babel-jest' for JavaScript/TypeScript files and a custom transformer ('some-css-transformer') for CSS files. It is intended for .babelrc or a Jest config block. Ensure the necessary packages are installed and correctly referenced in your project.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transform\": {\n    \"\\\\.[jt]sx?$\": \"babel-jest\",\n    \"\\\\.css$\": \"some-css-transformer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize DynamoDB DocumentClient for Jest Tests (JavaScript)\nDESCRIPTION: Initializes the AWS SDK DynamoDB DocumentClient. It conditionally configures the client to connect to a local DynamoDB endpoint (localhost:8000) without SSL when running within a Jest worker environment, identified by the `process.env.JEST_WORKER_ID` environment variable. This allows tests to interact with the local DynamoDB instance managed by `jest-dynamodb`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/DynamoDB.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');\n\nconst isTest = process.env.JEST_WORKER_ID;\nconst config = {\n  convertEmptyValues: true,\n  ...(isTest && {\n    endpoint: 'localhost:8000',\n    sslEnabled: false,\n    region: 'local-env',\n  }),\n};\n\nconst ddb = new DocumentClient(config);\n```\n\n----------------------------------------\n\nTITLE: Testing Recursive Timers with runOnlyPendingTimers\nDESCRIPTION: A test that uses jest.runOnlyPendingTimers() to handle recursive timers without causing an infinite loop. This approach advances only timers that are currently pending, not new ones created during execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TimerMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ndescribe('infiniteTimerGame', () => {\n  test('schedules a 10-second timer after 1 second', () => {\n    const infiniteTimerGame = require('../infiniteTimerGame');\n    const callback = jest.fn();\n\n    infiniteTimerGame(callback);\n\n    // At this point in time, there should have been a single call to\n    // setTimeout to schedule the end of the game in 1 second.\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n\n    // Fast forward and exhaust only currently pending timers\n    // (but not any new timers that get created during that process)\n    jest.runOnlyPendingTimers();\n\n    // At this point, our 1-second timer should have fired its callback\n    expect(callback).toHaveBeenCalled();\n\n    // And it should have created a new timer to start the game over in\n    // 10 seconds\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Name in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet declares a 'displayName' string in the Jest config, identifying the project during test execution in multi-project workspaces. Type-safe via imports, it is used in Jest-run test output. Requires TypeScript and Jest with types.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  displayName: 'CLIENT',\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generated Jest Snapshot Example\nDESCRIPTION: An example of a Jest snapshot file that was automatically generated during testing, showing the rendered output of a React component in different states.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`changes the class when hovered 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 2`] = `\n<a\n  className=\"hovered\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 3`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Custom Range Matcher Implementation in JavaScript\nDESCRIPTION: Implementation of a custom Jest matcher called toBeWithinRange that checks if a number falls within a specified range. Includes type checking and custom error messages.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect} from '@jest/globals';\n\nfunction toBeWithinRange(actual, floor, ceiling) {\n  if (\n    typeof actual !== 'number' ||\n    typeof floor !== 'number' ||\n    typeof ceiling !== 'number'\n  ) {\n    throw new TypeError('These must be of type number!');\n  }\n\n  const pass = actual >= floor && actual <= ceiling;\n  if (pass) {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} not to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: true,\n    };\n  } else {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: false,\n    };\n  }\n}\n\nexpect.extend({\n  toBeWithinRange,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Test Environment in Jest (JavaScript)\nDESCRIPTION: Shows how to use a custom test environment in a test suite by specifying it in a docblock. This example uses the previously defined custom environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// my-test-suite\n/**\n * @jest-environment ./my-custom-environment\n */\nlet someGlobalObject;\n\nbeforeAll(() => {\n  someGlobalObject = globalThis.someGlobalObject;\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Watch Mode for Development\nDESCRIPTION: Command to start Jest in watch mode, which continuously transforms changed files for easier development.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Importing ModuleMocker from Jest-Mock in JavaScript\nDESCRIPTION: Imports the ModuleMocker class from the 'jest-mock' package, which enables users to generate and manage mocks in a controlled test environment. This provides access to methods for mocking modules and functions, serving as an entry point for programmatic mocking in Jest. Required dependency: 'jest-mock' installed in your project.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-mock/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ModuleMocker} from 'jest-mock';\n```\n\n----------------------------------------\n\nTITLE: Installing jest-dynamodb Preset\nDESCRIPTION: Command to install the @shelf/jest-dynamodb package using npm or yarn.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/DynamoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-dynamodb\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Configuration in package.json\nDESCRIPTION: This example places the Jest configuration under the 'jest' key inside a project's package.json. It allows for centralized project metadata and config, commonly used in npm/yarn workflows. The example enables verbose test output for more detailed reporting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"name\": \"my-project\",\\n  \"jest\": {\\n    \"verbose\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest MongoDB Preset with npm - Bash\nDESCRIPTION: Installs the @shelf/jest-mongodb preset as a dev dependency using npm. This is a prerequisite for using MongoDB in Jest test environments. No additional parameters are required except the package manager, and it prepares the project for MongoDB-backed tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MongoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-mongodb\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Module for Mocking in TypeScript\nDESCRIPTION: This TypeScript snippet defines an exported constant `song`, which is an object containing nested properties leading to a function `time`. This structure is used in accompanying test files to demonstrate Jest's deep mocking capabilities with `jest.mocked`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jest Tests in JavaScript\nDESCRIPTION: This snippet demonstrates how to use `jest.retryTimes()` to automatically retry a failing test up to a specified number of times (3 in this case). The test checks if `true` is `false`, which will always fail, triggering the retry mechanism. This function must be called at the top level or within a `describe` block and is only available with the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n```js\njest.retryTimes(3);\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Image File Transformer in Jest\nDESCRIPTION: Example of a custom transformer that replaces imported image files with their filenames in Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CodeTransformation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Built-in Plugins with CommonJS - JavaScript\nDESCRIPTION: This snippet demonstrates using CommonJS to import React, react-test-renderer, and both the format function and plugins from pretty-format. It shows extraction of the ReactElement and ReactTestComponent plugins for use in custom formatting. Prerequisites: React, react-test-renderer, and pretty-format must be installed.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n----------------------------------------\n\nTITLE: Running Jest with a Specific Seed\nDESCRIPTION: Illustrates how to run Jest with a specific seed value. This is useful for reproducing test runs, especially when dealing with randomized test order.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/CLI.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njest --seed=1324\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for MongoDB\nDESCRIPTION: JSON configuration to specify the jest-mongodb preset in Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MongoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-mongodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset Env using Bash\nDESCRIPTION: This command installs the `@babel/preset-env` package as a development dependency using npm (or yarn). This preset is required for Babel to transpile modern JavaScript features down to a compatible version, enabling Jest (via `babel-jest`) to process project code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Generated Snapshot Output\nDESCRIPTION: Example of a generated snapshot file showing the component's rendered output structure\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReactNative.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`Intro renders correctly 1`] = `\n<View\n  style={\n    Object {\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#F5FCFF\",\n      \"flex\": 1,\n      \"justifyContent\": \"center\",\n    }\n  }>\n  <Text\n    style={\n      Object {\n        \"fontSize\": 20,\n        \"margin\": 10,\n        \"textAlign\": \"center\",\n      }\n    }>\n    Welcome to React Native!\n  </Text>\n  <Text\n    style={\n      Object {\n        \"color\": \"#333333\",\n        \"marginBottom\": 5,\n        \"textAlign\": \"center\",\n      }\n    }>\n    This is a React Native snapshot test.\n  </Text>\n</View>\n`;\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Summary Reporter Configuration in Jest - TypeScript\nDESCRIPTION: Shows how to set up the 'github-actions' and 'summary' reporters in a Jest TypeScript configuration, providing enhanced feedback for pull requests via failure annotations and log reporting. Requires Jest version with built-in GitHub Actions reporter, with silent mode configurable for log verbosity.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Global Teardown Script in Jest (JavaScript)\nDESCRIPTION: This JavaScript snippet shows an example `globalTeardown` module (`teardown.js`). It exports an async function triggered once after all test suites complete. It receives Jest configurations, logs details, and performs cleanup, such as stopping a MongoDB server using the reference (`globalThis.__MONGOD__`) established in the `globalSetup` script.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  await globalThis.__MONGOD__.stop();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Jest --runTestsByPath with a Partial Path (No Match)\nDESCRIPTION: Shows an attempt to run Jest tests using `jest --runTestsByPath` with a partial path (`__tests__/t`). Because this option requires exact file paths, it does not match any files and finds no tests to run in this scenario.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njest --runTestsByPath __tests__/t\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Format in Jest v29\nDESCRIPTION: Configuration to maintain v28 snapshot behavior in Jest v29. The snapshotFormat property needs to be added to keep escapeString and printBasicPrototype settings at their previous values.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UpgradingToJest29.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsnapshotFormat: {\n  escapeString: true,\n  printBasicPrototype: true\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Jest Tests\nDESCRIPTION: Executes all tests found by Jest in the current project. This is the default behavior when running Jest without any arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njest\n```\n\n----------------------------------------\n\nTITLE: Running Jest in Watch Mode\nDESCRIPTION: Starts Jest in watch mode. `--watch` typically runs tests related to changed files (`-o` by default), while `--watchAll` runs all tests whenever a file change is detected. Watch mode allows for interactive test filtering.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njest --watch #runs jest -o by default\njest --watchAll #runs all tests\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Export Example - JavaScript\nDESCRIPTION: This is a CommonJS module that requires the 'electron' module and exports an object. The snippet serves as an example of a conventional CJS setup for use with Jest's module mocking features. It lacks full implementation details, so consumers may expect to fill in the actual business logic as appropriate. Designed for use in Node.js projects using CommonJS.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ECMAScriptModules.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst {BrowserWindow, app} = require('electron');\\n\\n// etc.\\n\\nmodule.exports = {example};\n```\n\n----------------------------------------\n\nTITLE: Displaying Jest Project Backers Image using HTML\nDESCRIPTION: This HTML snippet embeds an image displaying the backers of the Jest project, sourced dynamically from Open Collective. The image is wrapped in an anchor tag linking to the backers section on Jest's Open Collective page, set to open in a new browser tab.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/jest#backers\" target=\"_blank\"><img src=\"https://opencollective.com/jest/backers.svg?width=890\"></a>\n```\n\n----------------------------------------\n\nTITLE: Initializing Jest Projects Using Package Managers\nDESCRIPTION: Commands to create a new Jest project using npm, Yarn, or pnpm. These single-line commands initialize a Jest configuration in your project, setting up the necessary files and dependencies for testing with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/create-jest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init jest@latest\n# Or for Yarn\nyarn create jest\n# Or for pnpm\npnpm create jest\n```\n\n----------------------------------------\n\nTITLE: Mocking Native Modules\nDESCRIPTION: Examples of different approaches to mock React Native native modules in Jest tests\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReactNative.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('react-native-video', () => 'Video');\n\njest.mock('path/to/MyNativeComponent', () => {\n  const mockComponent = require('react-native/jest/mockComponent');\n  return mockComponent('path/to/MyNativeComponent');\n});\n\njest.mock('Text', () => {\n  const RealComponent = jest.requireActual('Text');\n  const React = require('react');\n  class Text extends React.Component {\n    render() {\n      return React.createElement('Text', this.props, this.props.children);\n    }\n  }\n  Text.propTypes = RealComponent.propTypes;\n  return Text;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Summary Reporter with Silent Reporter in JavaScript\nDESCRIPTION: JavaScript configuration for using the Summary reporter alongside jest-silent-reporter instead of the default reporter for minimal console output with summary at the end.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring displayName in Jest (JavaScript)\nDESCRIPTION: Shows how to add a label to tests while they are running. This is particularly useful in multi-project repositories to identify which project a test belongs to.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: 'CLIENT',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing identity-obj-proxy for CSS Module Mocking with npm\nDESCRIPTION: Installs the identity-obj-proxy library as a development dependency using npm. identity-obj-proxy is used to mock CSS Modules in Jest, enabling className lookups to return their own name as a string. This is essential for snapshot testing and CSS-in-JS testing. Requires Node.js and npm.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev identity-obj-proxy\n```\n\n----------------------------------------\n\nTITLE: Installing jest-create-cache-key-function via npm\nDESCRIPTION: Command for installing the @jest/create-cache-key-function package using npm as a development dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-create-cache-key-function/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev @jest/create-cache-key-function\n```\n\n----------------------------------------\n\nTITLE: Installing React Test Renderer with npm/yarn\nDESCRIPTION: Command to install react-test-renderer for snapshot testing in a React application.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function-Based Jest Configuration Asynchronously in CommonJS JavaScript\nDESCRIPTION: This snippet exports an asynchronous function that resolves to a Jest config object, allowing dynamic or async logic during config generation. It is written in CommonJS style for JavaScript environments. 'verbose' is set to true for detailed output. Useful when configuration depends on async data or environment lookups.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @returns {Promise<import('jest').Config>} */\\nmodule.exports = async () => {\\n  return {\\n    verbose: true,\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Fake Timers in Jest (JavaScript)\nDESCRIPTION: As of Jest 18.0.0, fake timers managed by Jest's `FakeTimers` implementation are automatically reset whenever `FakeTimers.useTimers()` (implicitly called via `jest.useFakeTimers()`) is invoked. This ensures a clean state for timer-dependent tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nFakeTimers.useTimers()\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Style Mock for Jest (JavaScript)\nDESCRIPTION: In __mocks__/styleMock.js, this snippet exports an empty object for mocking imported style files (such as CSS or LESS) during Jest test runs. No dependencies are required. This satisfies import statements for styles without returning real CSS, avoiding test errors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {};\n```\n\n----------------------------------------\n\nTITLE: Explaining Actual Execution Order Due to Hoisting\nDESCRIPTION: This snippet clarifies the execution order resulting from ES2015 import hoisting. It shows that the `import` statement is moved to the top of the block, causing it to run before the `jest.dontMock` call.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-04-12-jest-11.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport LikeButton from 'LikeButton'; // This happens before the dontMock call.\njest.dontMock('LikeButton');\n```\n```\n\n----------------------------------------\n\nTITLE: Installing jest-circus via npm (Bash)\nDESCRIPTION: Command to install jest-circus as a development dependency using npm package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-circus/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-circus\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme for React Testing\nDESCRIPTION: Command to install Enzyme for testing React components as an alternative to React Testing Library.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev enzyme\n```\n\n----------------------------------------\n\nTITLE: Illustrating Old `jest.dontMock` Usage with `require` in JavaScript\nDESCRIPTION: This snippet shows the previous pattern for preventing automocking in Jest. The `jest.dontMock` function was called before using `require` to import the module, ensuring the original module implementation was used.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-04-12-jest-11.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\njest.dontMock('LikeButton');\nconst LikeButton = require('LikeButton'); // LikeButton is unmocked\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Mock Function Results Example in JavaScript\nDESCRIPTION: Shows the structure of the mock.results array which contains the outcomes of all mock function calls, including normal returns, thrown errors, and incomplete calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Asserting Value is NaN with Jest in JavaScript\nDESCRIPTION: Demonstrates the `.toBeNaN()` matcher in Jest, used specifically to check if a value is `NaN` (Not-a-Number). The example shows asserting that `NaN` itself passes the check, while a regular number like `1` does not.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\ntest('passes when value is NaN', () => {\n  expect(NaN).toBeNaN();\n  expect(1).not.toBeNaN();\n});\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Optimizing Jest Workers\nDESCRIPTION: GitHub Actions workflow example that automatically detects the number of available CPU cores and passes that to Jest's maxWorkers option for optimal performance.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Get number of CPU cores\n  id: cpu-cores\n  uses: SimenB/github-actions-cpu-cores@v2\n- name: run tests\n  run: yarn jest --max-workers ${{ steps.cpu-cores.outputs.count }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automocking in Jest Tests\nDESCRIPTION: Example of disabling automatic mocking in a Jest test file. This snippet shows how to use jest.disableAutomock() to access the original implementation of a module.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport utils from '../utils';\n\njest.disableAutomock();\n\ntest('original implementation', () => {\n  // now we have the original implementation,\n  // even if we set the automocking in a jest configuration\n  expect(utils.authorize()).toBe('token');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking a Constructor with Module Factory Function in Jest\nDESCRIPTION: Example of how to mock a constructor function using Jest's mock() function with a module factory. The factory must return a function that can be called with 'new' to create mock instances.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Test Renderer - Bash\nDESCRIPTION: Installs the react-test-renderer package as a development dependency via npm. This tool is required for rendering React components for snapshot tests. Run this command in your React application's root directory to enable snapshot testing functionality with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Custom Jest Test Filtering Function (JavaScript)\nDESCRIPTION: Example of a custom filtering function module that can be used with the --filter CLI option to exclude certain tests from running.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = testPaths => {\n  const allowedPaths = testPaths\n    .filter(filteringFunction)\n    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]\n\n  return {\n    filtered: allowedPaths,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing the equals Method Documentation\nDESCRIPTION: Shows how to reference the documentation for the this.equals method that is injected into custom matchers in Jest and should be used instead of directly importing from @jest/expect-utils.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/expect-utils/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`this.equals`](https://jestjs.io/docs/expect#thisequalsa-b)\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals Explicitly\nDESCRIPTION: Example of importing Jest's global functions explicitly when the --injectGlobals option is set to false.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Async Jest Configuration in TypeScript\nDESCRIPTION: Example of a Jest configuration file in TypeScript that exports an async function returning a configuration object. Utilizes TypeScript's type system for type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nexport default async (): Promise<Config> => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Making a mock return its own this - Jest - JavaScript\nDESCRIPTION: Illustrates the shorthand for configuring a mock so it returns its this context, which may be necessary for chaining or context-bound functions. It is an alternative to manually specifying the implementation. Requires Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.fn(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Parallelizing tasks with jest-worker\nDESCRIPTION: This example demonstrates how to use the Worker class from jest-worker to execute CPU-intensive tasks in parallel processes, improving performance by leveraging multiple cores.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/JestPlatform.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Reporter with jest-junit in JavaScript\nDESCRIPTION: Configuration example for keeping the default Jest reporter while adding jest-junit reporter. The jest-junit reporter is configured to output reports to a specific directory and filename.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Parameterized Tests with jest-each\nDESCRIPTION: Demonstrates how to run parameterized tests concurrently using the .concurrent modifier in jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).test.concurrent(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Snapshot Serializer to Jest Expect - JavaScript\nDESCRIPTION: Demonstrates how to add a custom snapshot serializer to Jest's expect object in an individual test file. Requires the serializer module as a dependency. The serializer formats application-specific data during snapshot assertions using expect(value).toMatchSnapshot(), and takes precedence over global configuration. Inputs are the serializer module; output affects all subsequent snapshot assertions in the file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_51\n\nLANGUAGE: js\nCODE:\n```\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affects expect(value).toMatchSnapshot() assertions in the test file\n\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Tests with `each`.test.skip in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates using `.test.skip` (or aliases `.it.skip`, `.xit`, `.xtest`) with Jest's `each` and tagged template literals. This prevents the set of parameterized tests generated by this `each` block from running. The tests will be marked as skipped in the test results. The data definition and test function structure are identical to regular `.test`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\neach`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`.test.skip('returns $expected when adding $a to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking CJS Modules in a CJS Test with Jest - JavaScript\nDESCRIPTION: This snippet illustrates how to mock a CommonJS module ('electron') within an ESM-compatible Jest test file, using createRequire to obtain the correct require function. It demonstrates both Jest's jest.mock API for CJS and dynamic import alternatives. The code covers partial mocking of app and BrowserWindow. Requires Node.js with ESM support and Jest v27+. Source and mocked modules should be present for tests to execute.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ECMAScriptModules.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {createRequire} from 'node:module';\\nimport {jest} from '@jest/globals';\\n\\nconst require = createRequire(import.meta.url);\\n\\njest.mock('electron', () => ({\\n  app: {\\n    on: jest.fn(),\\n    whenReady: jest.fn(() => Promise.resolve()),\\n  },\\n  BrowserWindow: jest.fn().mockImplementation(() => ({\\n    // partial mocks.\\n  })),\\n}));\\n\\nconst {BrowserWindow} = require('electron');\\nconst exported = require('./main.cjs');\\n\\n// alternatively\\nconst {BrowserWindow} = (await import('electron')).default;\\nconst exported = await import('./main.cjs');\\n\\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handler in Jest Environment (TypeScript)\nDESCRIPTION: Demonstrates how to create a custom test environment that extends NodeEnvironment and implements a handleTestEvent method to respond to test events. This example shows how to react to the 'test_start' event.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-circus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Event, State} from 'jest-circus';\nimport {TestEnvironment as NodeEnvironment} from 'jest-environment-node';\n\nclass MyCustomEnvironment extends NodeEnvironment {\n  //...\n\n  async handleTestEvent(event: Event, state: State) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing identity-obj-proxy for ES6 Proxy-based CSS Module Mocking (Bash)\nDESCRIPTION: This bash command installs the 'identity-obj-proxy' module as a development dependency, enabling ES6 Proxy-based mocking of CSS Modules for Jest. It allows all property accesses (e.g., styles.className) to resolve to their property name strings, facilitating accurate testing of CSS Modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev identity-obj-proxy\n```\n\n----------------------------------------\n\nTITLE: Skipping a Collection of Concurrent Data-Driven Tests with Array Syntax in Jest (JavaScript)\nDESCRIPTION: This snippet demonstrates `test.concurrent.skip.each` with an array of arrays. It prevents this entire collection of parameterized tests from running concurrently. Other tests in the file (like `test('will be run', ...)` example) will execute as normal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jest-matcher-utils using npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and add the `jest-matcher-utils` package as a dependency to the current project. It requires Node.js and npm to be installed and available in the system's PATH.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-matcher-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install jest-matcher-utils\n```\n\n----------------------------------------\n\nTITLE: Installing jest-validate using npm\nDESCRIPTION: This command installs the `jest-validate` package as a project dependency using the Node Package Manager (npm). The `--save` flag ensures it is added to the project's `package.json` file.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-validate\n```\n\n----------------------------------------\n\nTITLE: Configure Jest Preset (JSON)\nDESCRIPTION: Updates the Jest configuration file (e.g., `jest.config.json` or `package.json`) to use the installed `@shelf/jest-dynamodb` preset. This automatically handles much of the setup and teardown for the DynamoDB test environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/DynamoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-dynamodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Difficulty in Spotting Errors with Generic Snapshot Names\nDESCRIPTION: Demonstrates how generic snapshot names can make it harder to identify incorrect snapshot updates or mismatches. Although the output values (`div` and `null`) are clearly swapped compared to the previous example, the vague names obscure the error.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SnapshotTesting.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexports[`<UserName /> should render null`] = `\n<div>\n  Alan Turing\n</div>\n`;\n\nexports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n----------------------------------------\n\nTITLE: Including Line Change Counts in Diff Header (JS)\nDESCRIPTION: Shows how to display the total number of deleted ('Expected') and added ('Received') lines in the annotation header of the diff output. This is done by setting the `includeChangeCounts` option to `true` when calling a diff function like `diff`. Requires the `diff` function from `jest-diff`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst a = ['common', 'changed from'];\nconst b = ['common', 'changed to', 'insert'];\n\nconst options = {\n  includeChangeCounts: true,\n};\n\nconst difference = diff(a, b, options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest as a Unit Test Engine in Phabricator - JSON\nDESCRIPTION: This JSON snippet shows how to specify JestUnitTestEngine as the unit engine in the .arcconfig configuration file for a Phabricator project. Setting 'unit.engine' enables Arcanist to delegate test execution to the provided engine. This requires that JestUnitTestEngine is available in the project and properly set up to run Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-phabricator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n...\\n\\\"unit.engine\\\" : \\\"JestUnitTestEngine\\\",\\n...\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Parts in Strings for Jest Snapshots (JavaScript)\nDESCRIPTION: This snippet provides a strategy for handling dynamic data within strings before snapshotting. It uses JavaScript's `String.prototype.replace()` method with a regular expression to replace a randomly generated ID within an HTML string with a constant value (`123`) before passing it to `toMatchSnapshot`, thus ensuring consistent results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomNumber = Math.round(Math.random() * 100);\nconst stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;\nconst stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);\nexpect(stringWithConstantData).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Typing Replaced Properties with jest.Replaced in TypeScript\nDESCRIPTION: Illustrates the `jest.Replaced<Source>` utility type in TypeScript for typing variables that hold the result of `jest.replaceProperty()`. This utility wraps the original property's type (`Source`) and adds Jest's replacement methods like `.restore()`, ensuring type safety when managing replaced properties within tests. Requires Jest and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\n// title=\"src/utils.ts\"\nexport function isLocalhost(): boolean {\n  return process.env['HOSTNAME'] === 'localhost';\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// title=\"src/__tests__/utils.test.ts\"\nimport {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jest Tests Immediately in JavaScript\nDESCRIPTION: Illustrates the use of the `retryImmediately` option with `jest.retryTimes`. When set to `true`, failed tests are retried immediately after they fail, rather than waiting for all other tests in the file to complete. This example retries a failing test up to 3 times immediately upon failure. Requires the `jest-circus` runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3, {retryImmediately: true});\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mock Call Contexts with mock.contexts in JavaScript\nDESCRIPTION: Demonstrates the `mock.contexts` array, which stores the `this` context for each call made to the mock function. This is particularly relevant when the function's context is explicitly set using methods like `bind`, `call`, or `apply`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n----------------------------------------\n\nTITLE: Clearing Jest Mocks Between Tests using JavaScript\nDESCRIPTION: Illustrates how to reset the state of Jest mocks before each test runs using a `beforeEach` block. Calling `.mockClear()` on the mock constructor (`SoundPlayer.mockClear()`) and any instance method mocks (`mockPlaySoundFile.mockClear()`) ensures that call counts and arguments are reset for each test.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Promises in Jest (JavaScript)\nDESCRIPTION: Demonstrates testing a function (`fetchData`) that returns a promise. The test function returns this promise, and Jest waits for it to resolve before proceeding. It asserts that the resolved data matches the expected value 'peanut butter'. Requires the `fetchData` function to be defined and return a promise.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Error Output from jest-validate\nDESCRIPTION: Shows a sample error message generated by `jest-validate` when a configuration option (`transform`) has an incorrect type (string instead of object). The output includes the error type, the option name, the expected type, the received type, an example of the correct format, and any custom comment.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n● Validation Error:\n\n  Option transform must be of type:\n    object\n  but instead received:\n    string\n\n  Example:\n  {\n    \"transform\": {\n      \"\\\\.js$\": \"<rootDir>/preprocessor.js\"\n    }\n  }\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Automock (JavaScript)\nDESCRIPTION: Sets the `automock` configuration option to `true` in a Jest configuration file (e.g., `jest.config.js`). Enabling this option is a prerequisite for `jest.disableAutomock()` to have any effect, as it turns on automatic mocking by default for all modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  automock: true,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using JSDOM Test Environment in Jest\nDESCRIPTION: Example showing how to use JSDOM environment for testing DOM operations in Jest using @jest-environment docblock\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div');\n  expect(element).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Test Location Results in Jest (JSON)\nDESCRIPTION: This JSON snippet shows the format of the `location` field that is added to test results when the `--testLocationInResults` CLI flag is used. It contains the `column` (0-indexed) and `line` (1-indexed) number indicating the location of the test within its source file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"column\": 4,\n  \"line\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Jest's Automock Feature\nDESCRIPTION: Example test file that demonstrates Jest's automock functionality, which automatically mocks all imported modules. It shows how to check for mock functions and provide custom implementations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport utils from '../utils';\n\ntest('if utils mocked automatically', () => {\n  // Public methods of `utils` are now mock functions\n  expect(utils.authorize.mock).toBeTruthy();\n  expect(utils.isAuthorized.mock).toBeTruthy();\n\n  // You can provide them with your own implementation\n  // or pass the expected return value\n  utils.authorize.mockReturnValue('mocked_token');\n  utils.isAuthorized.mockReturnValue(true);\n\n  expect(utils.authorize()).toBe('mocked_token');\n  expect(utils.isAuthorized('not_wizard')).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Using diffStringsRaw with Cleanup Option\nDESCRIPTION: Example of using diffStringsRaw() to get raw difference data between two strings with cleanup enabled. This returns an array of Diff objects representing equal, deleted, and inserted substrings.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffs = diffStringsRaw('changed from', 'changed to', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Jest Configuration in package.json\nDESCRIPTION: Example of configuring Jest directly within the package.json file using the \"jest\" key. This approach eliminates the need for a separate configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Async Code with `async`/`await` in Jest\nDESCRIPTION: These Jest tests demonstrate using the `async`/`await` syntax for testing asynchronous code. The test functions are marked `async`. Inside the first test, `await user.getUserName(4)` pauses execution until the promise resolves, and its value is then asserted. The second test shows combining `async`/`await` with the `.resolves` matcher for a concise assertion on the resolved value. Requires appropriate Babel configuration (`@babel/preset-env`) to transpile `async`/`await`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialAsync.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// async/await can be used.\nit('works with async/await', async () => {\n  expect.assertions(1);\n  const data = await user.getUserName(4);\n  expect(data).toBe('Mark');\n});\n\n// async/await can also be used with `.resolves`.\nit('works with async/await and resolves', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(5)).resolves.toBe('Paul');\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.each() for Parameterized Test Suites in Jest\nDESCRIPTION: This snippet demonstrates how to use describe.each() to create parameterized test suites. It shows two examples: one using an array of arrays for input, and another using an array of objects, both testing addition operations with various inputs.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n\ndescribe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in Shell\nDESCRIPTION: Command to verify the installed Python version, which is required for node-gyp during the Jest setup process.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Handling Jest Module Resets with beforeEach in JavaScript\nDESCRIPTION: Demonstrates a pattern to handle Jest's behavior of resetting the module registry after each test (`it` block). The `require` statement for the 'sum' module is placed inside a `beforeEach` block to ensure a fresh copy of the module is loaded before each test runs, maintaining test isolation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-03-11-javascript-unit-testing-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nlet sum;\ndescribe('sum', () => {\n  beforeEach(() => {\n    sum = require('sum');\n  });\n  it('works', () => {\n    expect(sum(5, 4)).toBe(9);\n  });\n  it('works too', () => {\n    // This copy of sum is not the same as in the previous call to `it`.\n    expect(sum(2, 3)).toBe(5);\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Changed Substrings within Lines (TS)\nDESCRIPTION: Illustrates how to customize the styling for changed substrings *within* lines using the `changeColor` option in TypeScript. This example uses `chalk.bold.bgYellowBright` from the `chalk` library to make changed parts appear bold on a bright yellow background.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport chalk = require('chalk');\n\nconst options = {\n  changeColor: chalk.bold.bgYellowBright,\n};\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests with Jest in JavaScript\nDESCRIPTION: This snippet demonstrates using the `jest.retryTimes` API to retry a failing test up to three times. It is useful for reducing flakiness in tests that might fail intermittently due to non-deterministic factors. This requires Jest v24.5.0+ and supports chaining; `jest.retryTimes()` must be called at the top-level or inside a `describe` block. Key parameter: the number of retries (`3`). The snippet\\'s input is a test that deliberately fails; output is a test rerun up to three times.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestObjectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\njest.retryTimes(3);\n\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Error Throws with Snapshots in Jest\nDESCRIPTION: Example showing how to test a function that throws an error using snapshot matching. The function throws when given 'octopus' as input.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning JEST_WORKER_ID in Jest\nDESCRIPTION: Jest assigns a unique JEST_WORKER_ID to each worker process, starting from 1. When running tests in band (sequentially), this ID is always set to 1.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/EnvironmentVariables.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `JEST_WORKER_ID`\n\nEach worker process is assigned a unique id (index-based that starts with `1`). This is set to `1` for all tests when [`runInBand`](CLI.md#--runinband) is set to true.\n```\n\n----------------------------------------\n\nTITLE: Incorrect jest.mock() Factory Usage (Out-of-Scope Variable) in JavaScript\nDESCRIPTION: Demonstrates a common error when using the `jest.mock()` module factory. Because `jest.mock` calls are hoisted, variables defined outside the factory might not be accessible unless they start with 'mock'. This example uses `fakePlaySoundFile` (which does not start with 'mock'), resulting in an out-of-scope error when Jest attempts to hoist the mock definition.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// Note: this will fail\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running Jest with jest-jasmine2 in Bash\nDESCRIPTION: Command to run Jest using the jest-jasmine2 test runner instead of the default jest-circus for integration testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nJEST_JASMINE=1 yarn jest\n```\n\n----------------------------------------\n\nTITLE: Implementing mockResolvedValue for async functions in TypeScript\nDESCRIPTION: TypeScript implementation of mockResolvedValue showing how to properly type an async mock function that returns a Promise with a specific value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Text File as Module in JavaScript\nDESCRIPTION: Example code showing an attempt to require a text file as a module using Node.js require syntax. This is typically not a valid operation unless specifically configured through custom loaders or build tools.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-core/src/__tests__/test_root/__testtests__/do-not-match-me.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('../module.txt');\n```\n\n----------------------------------------\n\nTITLE: Configuring Colored Display Name in Jest (TypeScript)\nDESCRIPTION: This TypeScript example displays configuring 'displayName' as an object with 'name' and 'color', for colored labels in test output. Requires Jest, TypeScript, and compatible color names as supported by chalk. Place this in the Jest config file for projects needing visibility in test reports.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {Config} from 'jest';\\n\\nconst config: Config = {\\n  displayName: {\\n    name: 'CLIENT',\\n    color: 'blue',\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Jest Preset via Babel CLI\nDESCRIPTION: Command line approach to apply Jest preset when transforming JavaScript files using Babel CLI\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-preset-jest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ babel script.js --presets jest\n```\n\n----------------------------------------\n\nTITLE: Importing jest-each in ES6 and ES5\nDESCRIPTION: Shows how to import the jest-each library using both ES6 import syntax and ES5 require syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// es6\nimport each from 'jest-each';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// es5\nconst each = require('jest-each').default;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for Jest development using Yarn package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: TypeScript Volume Class Implementation\nDESCRIPTION: TypeScript version of the Volume class with type annotations and unit type constraints.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Volume {\n  public amount: number;\n  public unit: 'L' | 'mL';\n\n  constructor(amount: number, unit: 'L' | 'mL') {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString(): string {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other: Volume): boolean {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.amount;\n    } else {\n      return this.amount === other.amount * 1000;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Test Suites with describe.skip\nDESCRIPTION: Shows how to skip parameterized test suites using the describe.skip method in jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).describe.skip('.add(%d, %d)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot File Content (JavaScript)\nDESCRIPTION: Illustrates the content of a Jest snapshot file (`.snap`) generated for the `Link.test.js` test. It contains serialized representations of the `Link` component's rendered output at different points during the test execution (initial render, after mouse enter, after mouse leave).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`changes the class when hovered 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 2`] = `\n<a\n  className=\"hovered\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 3`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Inline Snapshot Matcher 'toMatchTrimmedInlineSnapshot' (JavaScript)\nDESCRIPTION: This code shows how to create a custom inline snapshot matcher, `toMatchTrimmedInlineSnapshot`, using `expect.extend` and `toMatchInlineSnapshot` from `jest-snapshot`. The matcher trims the received string to 10 characters before passing it to the standard `toMatchInlineSnapshot` function. An example test demonstrates its usage and how the snapshot is written directly into the test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.slice(0, 10), ...rest);\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring `sandboxInjectedGlobals` in Jest (TypeScript)\nDESCRIPTION: Demonstrates configuring the `sandboxInjectedGlobals` option in a TypeScript Jest config file (`.ts`). This option, typed using `import type {Config} from 'jest'`, lists global properties (like 'Math') to be defined within the test VM sandbox for potential performance gains. This configuration is part of the exported `config` object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: Configuration for watchPathIgnorePatterns to specify which file paths should be ignored by Jest's watch mode. This prevents unnecessary test reruns when certain files change.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring workerIdleMemoryLimit in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation of workerIdleMemoryLimit configuration to control the memory usage of Jest worker processes and recycle workers that exceed the specified limit.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters in TypeScript\nDESCRIPTION: This snippet shows how to configure Jest reporters using TypeScript. It demonstrates the use of 'jest-silent-reporter' and 'summary' reporters.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Specific Parameterized Test Suites with describe.only\nDESCRIPTION: Demonstrates how to run only specific parameterized test suites using the describe.only method in jest-each.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).describe.only('.add(%d, %d)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Jest Preset using Babel Node API\nDESCRIPTION: Programmatic method to transform code using Jest preset through Babel's Node API\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-preset-jest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform('code', {\n  presets: ['jest'],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @jest/globals for Typed Jest APIs - Bash\nDESCRIPTION: Installs the '@jest/globals' package to provide typed definitions for Jest's global APIs, facilitating better TypeScript support in Jest tests. No other changes are required for import-based usage of describe/test/expect in TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/GettingStarted.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @jest/globals\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals Explicitly (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import Jest's global functions and objects (`expect`, `jest`, `test`) explicitly from `@jest/globals`. This approach is necessary when the `injectGlobals` configuration option is set to `false`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Expected-Failure Parameterized Tests - Jest Failing Each - JavaScript\nDESCRIPTION: Shows how to use test.failing.each (requires jest-circus) for running multiple 'expected-to-fail' tests with different parameters. Each test case in the array produces a separate failing test invocation, passing only if the assertion fails or throws.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: TypeScript example of configuring watchPathIgnorePatterns in Jest to ignore specific directories during watch mode. This helps optimize test re-runs by excluding irrelevant file changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Shell\nDESCRIPTION: Command to check the installed Node.js version, ensuring compatibility with Jest development requirements.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Mocking Unimplemented window.matchMedia in JSDOM - Jest JavaScript\nDESCRIPTION: Demonstrates how to define a manual Jest mock for `window.matchMedia` to avoid `TypeError` in environments where it is not implemented (such as JSDOM). The snippet uses `Object.defineProperty` to set `matchMedia` as a writable property and provides a Jest mock function that returns a consistent object structure emulating browser behavior. Useful for safely testing code that checks media queries without browser support.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty(window, 'matchMedia', {\\n  writable: true,\\n  value: jest.fn().mockImplementation(query => ({\\n    matches: false,\\n    media: query,\\n    onchange: null,\\n    addListener: jest.fn(), // deprecated\\n    removeListener: jest.fn(), // deprecated\\n    addEventListener: jest.fn(),\\n    removeEventListener: jest.fn(),\\n    dispatchEvent: jest.fn(),\\n  })),\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Tables for Tests - JavaScript\nDESCRIPTION: Exports a module that specifies table definitions for DynamoDB in the jest-dynamodb-config.js file. The 'tables' array defines one or more tables with relevant attributes, key schema, and provisioned throughput settings. This file must exist in your project root and match the interface required by jest-dynamodb for automatic test environment table management.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/DynamoDB.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tables: [\n    {\n      TableName: `files`,\n      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],\n      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n    },\n    // etc\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running jest-codemods for Automated Migration (Bash)\nDESCRIPTION: Executes the `jest-codemods` tool using `npx` to automatically transform existing test files written for frameworks like AVA, Chai, Expect.js, Jasmine, Mocha, proxyquire, Should.js, Tape, or Sinon into Jest-compatible syntax. Requires Node.js and npm/npx to be installed. This command should be run within the project directory containing the tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MigrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx jest-codemods\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage of test.each with Array of Arrays\nDESCRIPTION: Demonstrates the use of test.each with an array of arrays in TypeScript, showing how to ensure correct type inference for test arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GlobalAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Equality Tester Implementation\nDESCRIPTION: Implements a custom equality tester for Volume objects and registers it with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a, b) {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume === isBVolume) {\n    return undefined;\n  } else {\n    return false;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n```\n\n----------------------------------------\n\nTITLE: Displaying Jest Project Contributors Image using HTML\nDESCRIPTION: This HTML snippet embeds an image displaying the contributors to the Jest project, sourced dynamically from Open Collective. The image is wrapped in an anchor tag linking to the contributors graph page on the Jest GitHub repository.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://github.com/jestjs/jest/graphs/contributors\"><img src=\"https://opencollective.com/jest/contributors.svg?width=890&button=false\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Example Jest Test Output - Bash\nDESCRIPTION: Shows sample output from running Jest on the command line after a successful test execution. The snippet demonstrates console output indicating a passing test, often used to illustrate expected CLI results. No input or parameterization is required; output is informational and will vary for different test suites.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPASS  ./sum.test.js\n✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n----------------------------------------\n\nTITLE: Skipping Multiple Data-Driven Tests with Template Literals in Jest (JavaScript)\nDESCRIPTION: Illustrates using \"test.skip.each\" with a tagged template literal to skip tests for multiple sets of input data. This method formats test data as a readable table and is functionally similar to the array form. The main parameters are the template literal data, test name pattern, and the test callback. Only Jest is needed as a dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\ntest.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Sequencer in Jest Configuration (JavaScript)\nDESCRIPTION: JavaScript configuration example for specifying a custom test sequencer in Jest. This shows how to reference a sequencer file path in the testSequencer option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_76\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Paths for Webpack-style Roots (JavaScript)\nDESCRIPTION: This snippet demonstrates adding modulePaths for Jest, aligning with webpack’s resolve.roots option to add custom lookup paths (such as '/shared/vendor/modules'). Other module resolution configs (file extensions, directories, and asset mocks) are included. This is useful for mono-repos or projects with non-standard directory layouts.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Webpack.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  modulePaths: ['/shared/vendor/modules'],\n  moduleFileExtensions: ['js', 'jsx'],\n  moduleDirectories: ['node_modules', 'bower_components', 'shared'],\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',\n    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset using npm Module Name in JavaScript\nDESCRIPTION: Demonstrates setting the `preset` option in a Jest JavaScript configuration file. It specifies an npm module name ('foo-bar') whose root directory contains a Jest preset file (`jest-preset.json`, `jest-preset.js`, etc.) that Jest will use as a base configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_53\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  preset: 'foo-bar',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code to Debug Create React App Tests\nDESCRIPTION: A VS Code `launch.json` configuration specifically for debugging tests in a Create React App (CRA) project. It uses `react-scripts test` as the `runtimeExecutable` and passes necessary arguments like `--runInBand` (sequential execution), `--no-cache` (disable caching), `--env=jsdom` (specify test environment), and `--watchAll=false` (prevent watch mode during debug).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",\n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\",\n        \"--watchAll=false\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Data-Driven Tests Concurrently with test.concurrent.each (Template Literal) in Jest (JavaScript)\nDESCRIPTION: Demonstrates using `test.concurrent.each` with a tagged template literal (`table`) for concurrent, data-driven tests. The test function (`fn`) must be asynchronous. Variables like `$a`, `$b`, `$expected` are interpolated into the title, and the data object is passed to the test function. Each row runs concurrently.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Timer Faking in Jest (JSDOM)\nDESCRIPTION: This Jest test, running in a JSDOM environment, demonstrates selective timer faking. It manually mocks `window.performance.mark`. Then, `jest.useFakeTimers({doNotFake: ['performance']})` enables fake timers for standard functions like `setTimeout` but explicitly prevents Jest from mocking APIs under the `performance` object. The test asserts that the manually provided mock for `performance.mark` remains in place.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nconst mockPerformanceMark = jest.fn();\nwindow.performance.mark = mockPerformanceMark;\n\ntest('allows mocking `performance.mark()`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n\n  expect(window.performance.mark).toBe(mockPerformanceMark);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom snapshot resolver in Jest\nDESCRIPTION: Example of creating a custom snapshot resolver to customize where Jest stores snapshot files on disk, including functions to resolve paths between tests and snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // resolves from test to snapshot path\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('__tests__', '__snapshots__') + snapshotExtension,\n\n  // resolves from snapshot to test path\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    snapshotFilePath\n      .replace('__snapshots__', '__tests__')\n      .slice(0, -snapshotExtension.length),\n\n  // Example test path, used for preflight consistency check of the implementation above\n  testPathForConsistencyCheck: 'some/__tests__/example.test.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration in Babel using API and Jest - JavaScript\nDESCRIPTION: Shows how to use a function export in Babel's config to conditionally change options depending on the environment, specifically for Jest ('test' env). Useful for customizing presets and plugins based on context. Input is the Babel API object; output is a config object; outputs depend on env string.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  const isTest = api.env('test');\n  // You can use isTest to determine what presets and plugins to use.\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns for pnpm in Jest (JavaScript)\nDESCRIPTION: Advanced configuration for transformIgnorePatterns when using pnpm package manager. Handles the symlinked structure that pnpm creates for node_modules packages.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative pattern to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot File Format for React Components (JavaScript)\nDESCRIPTION: This snippet shows the format of a Jest snapshot file for a React component. It exports a snapshot string keyed by the test description and uses human-readable formatting for ease of review. No external dependencies are required for reading this file directly, but Jest reads and updates these files during test runs. The format expects snapshot values to be string literals and will automatically update them if the test output changes and 'jest -u' is run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-07-27-jest-14.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports[`Link renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function bound _onMouseEnter]}\n  onMouseLeave={[Function bound _onMouseLeave]}>\n  Facebook\n</a>\n`;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with TypeScript Preset\nDESCRIPTION: This `babel.config.js` configuration adds the `@babel/preset-typescript` to the Babel presets array, alongside `@babel/preset-env`. This setup configures Babel to handle both standard JavaScript features (targeting the current Node version) and TypeScript syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {targets: {node: 'current'}}],\n    // highlight-next-line\n    '@babel/preset-typescript',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Jest Defaults with Custom Config in CommonJS JavaScript\nDESCRIPTION: This code imports Jest's default configuration from 'jest-config' and extends file extension handling. Additional extensions 'mts' and 'cts' are appended to the 'moduleFileExtensions' option. The resulting config is exported in CommonJS style. Requires installation of 'jest-config' as a dependency.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst {defaults} = require('jest-config');\\n\\n/** @type {import('jest').Config} */\\nconst config = {\\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts', 'cts'],\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Teardown for Manual Puppeteer Integration (JavaScript)\nDESCRIPTION: Defines a Jest global teardown script (`teardown.js`). It accesses the browser instance stored in `globalThis.__BROWSER_GLOBAL__` by the setup script and calls `close()` to terminate the Puppeteer browser. It also removes the temporary directory containing the WebSocket endpoint file. Requires `fs.promises`, `os`, and `path` modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Puppeteer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// teardown.js\nconst fs = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\nmodule.exports = async function () {\n  // close the browser instance\n  await globalThis.__BROWSER_GLOBAL__.close();\n\n  // clean-up the wsEndpoint file\n  await fs.rm(DIR, {recursive: true, force: true});\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Matcher with Bail Out in Jest\nDESCRIPTION: This snippet illustrates a custom snapshot matcher that bails out on the first mismatch instead of collecting all mismatches. It's useful for testing state machines where continuing after a mismatch doesn't make sense.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Typo in the implementation should cause the test to fail\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions as expected', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Already produces a mismatch. No point in continuing the test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring watchPathIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation of watchPathIgnorePatterns configuration to specify which file paths should be ignored by Jest's watch mode when detecting file changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Importing and Adding the Aligned ANSI Style Serializer in Jest - JavaScript\nDESCRIPTION: This code snippet shows how to import the alignedAnsiStyleSerializer from @jest/test-utils and add it to Jest's snapshot serializer list using expect.addSnapshotSerializer. This enables clearer and more aligned ANSI-colored outputs in Jest snapshots, aiding in the identification of differences during test failures. No additional dependencies are required except for the private @jest/test-utils package and a properly configured Jest environment; the input is the serializer itself, and its registration affects all subsequent Jest snapshot comparisons.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/test-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {alignedAnsiStyleSerializer} from '@jest/test-utils';\n\nexpect.addSnapshotSerializer(alignedAnsiStyleSerializer);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Directory File Summarizer - Node.js JavaScript\nDESCRIPTION: Implements a function to synchronize and summarize all files within a specified directory using the Node.js `fs` built-in module. The exported method `summarizeFilesInDirectorySync` takes a directory path, synchronously retrieves file names, and returns an array of objects containing directory and file name pairs. Requires the built-in `fs` module and expects a valid directory string as input; output is an array with file summary objects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ManualMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst fs = require('fs');\\n\\nfunction summarizeFilesInDirectorySync(directory) {\\n  return fs.readdirSync(directory).map(fileName => ({\\n    directory,\\n    fileName,\\n  }));\\n}\\n\\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\\n\n```\n\n----------------------------------------\n\nTITLE: Using Typed Variable Array Tables with Jest.each - TypeScript\nDESCRIPTION: Provides an example where the table for `test.each` is defined as a separately-typed variable, ensuring correct TypeScript inference for each test parameter. The array's type is annotated to specify tuple shape, which eliminates unwanted union inference. Dependencies: Jest and TypeScript. Outputs are produced by assertions in the test body.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Execution using jest.runAllTimers()\nDESCRIPTION: This Jest test uses `jest.useFakeTimers()` to mock timers. It tests the `timerGame` function, asserting that a mock callback (`jest.fn()`) is not called immediately after invoking `timerGame`. It then calls `jest.runAllTimers()` to execute all pending timers instantly. Finally, it asserts that the callback has been called exactly once.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TimerMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.useFakeTimers();\ntest('calls the callback after 1 second', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toHaveBeenCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers();\n\n  // Now our callback should have been called!\n  expect(callback).toHaveBeenCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Summarizer Module with Node fs - JavaScript\nDESCRIPTION: This snippet defines a Node.js module that summarizes all files in a given directory by leveraging the 'fs' module's readdirSync method. The summarizeFilesInDirectorySync function accepts a directory path and returns an array of file metadata objects. Prerequisites include access to the 'fs' core module, and the function’s inputs/outputs are directory paths and file detail arrays respectively.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ManualMocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst fs = require('fs');\\n\\nfunction summarizeFilesInDirectorySync(directory) {\\n  return fs.readdirSync(directory).map(fileName => ({\\n    directory,\\n    fileName,\\n  }));\\n}\\n\\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect jest.mock() Factory Usage (ReferenceError) in JavaScript\nDESCRIPTION: Shows another pitfall with `jest.mock()` and hoisting. Although the variable `mockSoundPlayer` starts with 'mock', it's accessed directly within the factory (`return mockSoundPlayer;`). Due to hoisting, the `jest.mock` call executes before the `mockSoundPlayer` variable is initialized, leading to a `ReferenceError`. Wrapping the variable access in a function or using the HOF pattern as shown previously prevents this.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Es6ClassMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// results in a ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tasks with jest-worker in JavaScript\nDESCRIPTION: Demonstrates creating a `Worker` instance from the `jest-worker` package, pointing it to a module file (`heavy-task.js`). It then invokes the `myHeavyTask` method exported by the module twice concurrently with different arguments, using `Promise.all` to wait for both tasks to complete in separate processes. The results are collected and logged. Requires the `jest-worker` package and the `heavy-task.js` module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Promise Rejections in Jest JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to test asynchronous functions that are expected to reject with an error in Jest. It uses `async/await` syntax and the `expect().rejects` modifier combined with `toThrowErrorMatchingSnapshot()` to assert that the promise returned by `throwingFunction()` rejects and that the error matches the stored snapshot. This demonstrates the enhanced capability for testing async errors introduced in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-12-18-jest-22.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function throwingFunction() {\n  throw new Error('This failed');\n}\n\ntest('asynchronous rejection', async () => {\n  await expect(throwingFunction()).rejects.toThrowErrorMatchingSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns for pnpm in Jest (TypeScript)\nDESCRIPTION: TypeScript implementation of advanced configuration for transformIgnorePatterns when using pnpm package manager. Handles the unique symlinked structure that pnpm creates.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative path to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects in Jest (TypeScript)\nDESCRIPTION: TypeScript version of setting up multiple projects in Jest. It demonstrates how to run tests across multiple directories and configure different runners for tests and linting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Timeout in a Jest File using JavaScript\nDESCRIPTION: This code snippet demonstrates setting a default timeout interval for all tests and hooks within the current test file using `jest.setTimeout()`. The timeout is set to 1000 milliseconds (1 second), overriding the default 5-second timeout for the scope of this file. Individual tests can still override this file-level setting.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n```js\njest.setTimeout(1000); // 1 second\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Coverage with forceCoverageMatch in Jest\nDESCRIPTION: Example showing how to write tests in source files with .t.js extension and collect coverage using forceCoverageMatch configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexport function sum(a, b) {\n  return a + b;\n}\n\nif (process.env.NODE_ENV === 'test') {\n  test('sum', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Snapshot Serializers in Jest (JavaScript)\nDESCRIPTION: Introduced in Jest 19.0.0, `expect.addSnapshotSerializer` allows developers to add custom modules that format specific data structures for Jest snapshots. This enables cleaner and more meaningful snapshot comparisons for custom objects or complex data.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect.addSnapshotSerializer\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Concurrent Tests Using Tagged Templates in Jest (JavaScript)\nDESCRIPTION: Shows how to skip a batch of tagged-template concurrent tests with test.concurrent.skip.each. The test data is supplied via the template literal, and each case is excluded from execution while other tests remain enabled. Appropriate for temporarily disabling sets of asynchronous tests in Jest projects.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Early-Bailout Custom Snapshot Matcher in JavaScript\nDESCRIPTION: Example of a custom snapshot matcher that bails out on the first mismatch rather than collecting all mismatches. This is useful for state machines where continuing after a failed transition doesn't make sense.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Typo in the implementation should cause the test to fail\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions as expected', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Already produces a mismatch. No point in continuing the test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating jest.mocked() Usage for Jest v29\nDESCRIPTION: Examples showing how to update jest.mocked() TypeScript usage for Jest v29. The first example removes the boolean parameter as deep mocking is now the default, while the second shows how to specify shallow mocking with the new options object syntax.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/UpgradingToJest29.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- const mockedObject = jest.mocked(someObject, true);\n+ const mockedObject = jest.mocked(someObject);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n- const mockedObject = jest.mocked(someObject);\n+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```\n\n----------------------------------------\n\nTITLE: Customizing Watch Plugin Configuration in jest.config.js (JavaScript)\nDESCRIPTION: The snippet showcases how to pass custom arguments (e.g., `key` and `prompt`) to a Jest watch plugin via the Jest configuration file. The plugin is included in a tuple with its configuration object inside the `watchPlugins` array, allowing users to override or define new menu keys and prompts. This provides flexibility for adapting third-party plugins or fine-tuning their menu integration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: [\n    [\n      'path/to/yourWatchPlugin',\n      {\n        key: 'k', // <- your custom key\n        prompt: 'show a custom prompt',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Isolating a Single Test Run in Jest using test.only (JavaScript)\nDESCRIPTION: This snippet demonstrates how to run only a specific test within a Jest test suite by appending `.only` to the `test` function call (`test.only`). This is a useful debugging technique to isolate failures. Any other `test` calls in the suite will be skipped.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SetupAndTeardown.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n----------------------------------------\n\nTITLE: Snapshot Output Produced by Custom Serializer - JSON\nDESCRIPTION: This JSON output demonstrates the actual snapshot generated when the custom serializer is active. It highlights the Pretty foo: prefix and the serialized foo object, showcasing the effect of the custom serialization logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_66\n\nLANGUAGE: JSON\nCODE:\n```\nPretty foo: Object {\n  \"x\": 1,\n  \"y\": 2,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting modulePathIgnorePatterns in Jest (TypeScript)\nDESCRIPTION: TypeScript version of configuring modulePathIgnorePatterns in Jest. It shows how to specify patterns for ignoring certain module paths during test execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Querying Changed Files with Jest Changed Files in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'jest-changed-files' package to asynchronously retrieve a set of files modified since the last commit in the current Git repository. 'getChangedFilesForRoots' returns a promise that, when resolved, yields an object containing the changed files. Requires Node.js, a Git or Mercurial repository, and installation of 'jest-changed-files'. Input is an array of root directory paths and options; output is a result object with file lists. Limited to repositories supported by Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// print the set of modified files since last commit in the current repo\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n----------------------------------------\n\nTITLE: Installing @types/jest for Ambient Type Definitions\nDESCRIPTION: This command installs the `@types/jest` package from DefinitelyTyped using npm. This package provides ambient type definitions for Jest's global variables, meaning you don't need to explicitly import them in your TypeScript tests, as they are automatically recognized by the TypeScript compiler.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/jest\n```\n\n----------------------------------------\n\nTITLE: Configuring TransformIgnorePatterns with rootDir Token in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to use the <rootDir> token in transformIgnorePatterns to reference the project's root directory, ensuring patterns work correctly across different environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_102\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration for Jest with webpack\nDESCRIPTION: A simple .babelrc configuration that uses @babel/preset-env. This is required to properly transpile JavaScript when using Jest with webpack.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Parameterized Concurrent Tests in Jest (JavaScript)\nDESCRIPTION: Illustrates skipping a set of parameterized concurrent tests using test.concurrent.skip.each. The specified test cases are not executed while other tests in the suite will run. Useful for ignoring failing or currently irrelevant asynchronous tests. Parameters and test logic remain as per standard Jest patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/GlobalAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Name in Jest (JavaScript)\nDESCRIPTION: This snippet sets the 'displayName' property in Jest's JavaScript config to a string, labeling the project in test results. Useful in multi-project setups for better output clarity. No dependencies beyond Node.js and Jest are required. Outputs a named label beside test suite results.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  displayName: 'CLIENT',\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Environment Options (JavaScript)\nDESCRIPTION: JavaScript configuration example for setting up test environment options including custom HTML, URL, and user agent.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  testEnvironment: 'jsdom',\n  testEnvironmentOptions: {\n    html: '<html lang=\"zh-cmn-Hant\"></html>',\n    url: 'https://jestjs.io/',\n    userAgent: 'Agent/007',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest with Babel and React Test Renderer\nDESCRIPTION: Command to install Jest and necessary Babel presets for testing React applications without Create React App.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Negated Partial Array Matching with expect.not.arrayContaining in JavaScript\nDESCRIPTION: Demonstrates the use of expect.not.arrayContaining to ensure the actual array does not include all elements of the expected array. This inverse matcher is showcased through a simple Jest describe/it block, verifying the actual lacks the expected value. No special setup beyond Jest is required; primarily used for confirming exclusion of specific elements.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('not.arrayContaining', () => {\n  const expected = ['Samantha'];\n\n  it('matches if the actual array does not contain the expected elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(\n      expect.not.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding a Jest Repl.it Instance using HTML iframe\nDESCRIPTION: This HTML snippet uses an `<iframe>` tag to embed an interactive Jest environment provided by `repl.it`. The `src` attribute points to the Jest language environment on `repl.it` with the `lite=true` parameter for a simplified view. This allows users reading the blog post to experiment with Jest directly within the page, facilitating easier troubleshooting and trial.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-12-15-2016-in-jest.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"jest-repl\">\n  <iframe src=\"https://repl.it/languages/jest?lite=true\"></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Webpack Configuration in JavaScript\nDESCRIPTION: This snippet shows a sample `webpack.config.js` file. It defines rules for handling JavaScript/JSX files with `babel-loader`, CSS files with `style-loader` and `css-loader`, and different types of assets (like gifs, fonts). It also includes `resolve` options for setting aliases, default extensions, and module directories.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: ['node_modules'],\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.gif$/,\n        type: 'asset/inline',\n      },\n      {\n        test: /\\.(ttf|eot|svg)$/,\n        type: 'asset/resource',\n      },\n    ],\n  },\n  resolve: {\n    alias: {\n      config$: './configs/app-config.js',\n      react: './vendor/react-master',\n    },\n    extensions: ['.js', '.jsx'],\n    modules: [\n      'node_modules',\n      'bower_components',\n      'shared',\n      '/shared/vendor/modules',\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking ES6 Modules with Default and Named Exports in JavaScript\nDESCRIPTION: Illustrates mocking an ES6 module with both default and named exports using jest.mock. The factory returns an object with __esModule set to true and mock implementations for 'default' and 'foo'. This ensures correct import behavior (default and named). Requires Babel or TypeScript for native ES module handling; manual __esModule property may be necessary.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport moduleName, {foo} from '../moduleName';\n\njest.mock('../moduleName', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => 42),\n    foo: jest.fn(() => 43),\n  };\n});\n\nmoduleName(); // Will return 42\nfoo(); // Will return 43\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Mocks using jest.mock in JavaScript\nDESCRIPTION: Illustrates how to use the third argument (`options`) of `jest.mock` with `{virtual: true}` to mock a module that doesn't actually exist in the file system. This is useful for mocking generated or native modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\njest.mock(\n  '../moduleName',\n  () => {\n    /*\n     * Custom implementation of a module that doesn't exist in JS,\n     * like a generated module or a native module in react-native.\n     */\n  },\n  {virtual: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Running Specific Concurrent Tests with jest-each\nDESCRIPTION: Shows how to run only specific concurrent parameterized tests using both .concurrent and .only modifiers.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-each/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neach([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n]).test.concurrent.only(\n  'returns the result of adding %d to %d',\n  (a, b, expected) => {\n    expect(a + b).toBe(expected);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting modulePathIgnorePatterns in Jest (JavaScript)\nDESCRIPTION: Example of configuring modulePathIgnorePatterns in Jest to ignore specific module paths during testing. This snippet demonstrates how to exclude the 'build' directory.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Identifying Changed Files with jest-changed-files in JavaScript\nDESCRIPTION: Demonstrates requiring `getChangedFilesForRoots` from `jest-changed-files` and calling it to find modified files in the current directory (`./`) since the last git commit. The result object containing `changedFiles` is logged to the console. Depends on the `jest-changed-files` package.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/JestPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// print the set of modified files since last commit in the current repo\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n----------------------------------------\n\nTITLE: Installing jest-puppeteer Preset (Bash)\nDESCRIPTION: Installs the `jest-puppeteer` preset package as a development dependency using npm. This preset simplifies the integration of Puppeteer with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Puppeteer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Skipping a Collection of Concurrent Data-Driven Tests with Template Literal Syntax in Jest (JavaScript)\nDESCRIPTION: This snippet uses `test.concurrent.skip.each` with a tagged template literal to define a set of data-driven tests that should be skipped. These tests, defined with named parameters, will not be executed concurrently. Other tests within the file will run.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\ntest.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting a Jest Configuration Object in CommonJS JavaScript\nDESCRIPTION: This snippet demonstrates how to export a Jest configuration object using CommonJS syntax in a JavaScript file. It adds typings through JSDoc comments for editor support. The key config property here is 'verbose', which makes Jest output more details. Requires Node.js, Jest, and a JS file named with accepted Jest config naming.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\\nconst config = {\\n  verbose: true,\\n};\\n\\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test Failing Due to Dynamic Data (JavaScript)\nDESCRIPTION: This snippet illustrates a common issue where snapshot tests fail consistently because the object being snapshotted contains fields with dynamically generated values, such as `createdAt` (a Date object) and `id` (a random number). These values change on every test run, causing mismatches.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/SnapshotTesting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('will fail every time', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting mock.results for Call Outcomes in Jest JavaScript\nDESCRIPTION: Shows the result tracking with the mock.results property, providing insight into how Jest records the outcome (return/throw/incomplete) for each mock call. This is useful for verifying behavior across various executions. Assumes calls return values or throw, and each result entry includes a type and value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using expect.arrayContaining() in Jest for Subset Checks\nDESCRIPTION: Illustrates Jest's `expect.arrayContaining(array)` matcher within a `describe` block. It asserts that the received array contains all elements of the expected array (subset check), allowing for additional elements in the received array. It also shows a negative test case where the received array is missing an expected element.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_42\n\nLANGUAGE: js\nCODE:\n```\ndescribe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Defined Values with toBeDefined in Jest - JavaScript\nDESCRIPTION: This snippet shows how to use `.toBeDefined` matcher to ensure that a value or result is not undefined. It demonstrates using the matcher on a function's return value to ensure something (not undefined) is produced. This is preferable to direct `.not.toBe(undefined)` checks. Dependencies: Jest. Input is a variable or function result; output is assertion pass/fail.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('there is a new flavor idea', () => {\\n  expect(fetchNewFlavorIdea()).toBeDefined();\\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking an `axios` Module Dependency in Jest Tests (JavaScript)\nDESCRIPTION: Illustrates how to test the `Users.all` method by mocking its `axios` dependency using `jest.mock('axios')`. `axios.get.mockResolvedValue(resp)` simulates a successful API response, allowing the test to verify the component's logic without actual network interaction. An alternative using `mockImplementation` is also commented.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport axios from 'axios';\nimport Users from './users';\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  // or you could use the following depending on your use case:\n  // axios.get.mockImplementation(() => Promise.resolve(resp))\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n```\n\n----------------------------------------\n\nTITLE: Testing jQuery DOM Manipulation with Jest\nDESCRIPTION: Jest test implementation that sets up a mock DOM environment, mocks the fetchCurrentUser dependency, simulates a button click, and verifies the DOM updates correctly.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialjQuery.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\njest.mock('../fetchCurrentUser');\n\ntest('displays a user after a click', () => {\n  // Set up our document body\n  document.body.innerHTML =\n    '<div>' +\n    '  <span id=\"username\" />' +\n    '  <button id=\"button\" />' +\n    '</div>';\n\n  // This module has a side-effect\n  require('../displayUser');\n\n  const $ = require('jquery');\n  const fetchCurrentUser = require('../fetchCurrentUser');\n\n  // Tell the fetchCurrentUser mock function to automatically invoke\n  // its callback with some data\n  fetchCurrentUser.mockImplementation(cb => {\n    cb({\n      fullName: 'Johnny Cash',\n      loggedIn: true,\n    });\n  });\n\n  // Use jquery to emulate a click on our button\n  $('#button').click();\n\n  // Assert that the fetchCurrentUser function was called, and that the\n  // #username span's inner text was updated as we'd expect it to.\n  expect(fetchCurrentUser).toHaveBeenCalled();\n  expect($('#username').text()).toBe('Johnny Cash - Logged In');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking as Custom DOM Element (No Warnings, JSX) - TypeScript/JSX\nDESCRIPTION: Mocks a module using a function component that renders a custom HTML element (lowercase with a dash). This approach sidesteps React's checks and avoids warnings for unknown elements. Use for snapshot testing when React version produces warnings for unknown uppercase elements.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\njest.mock('./Widget', () => () => <mock-widget />);\n```\n\n----------------------------------------\n\nTITLE: Implementing the getUsageInfo Method for Watch Menu Integration\nDESCRIPTION: Demonstrates how to implement the `getUsageInfo` method in a Jest watch plugin. This method should return an object containing a `key` (the character to press) and a `prompt` (the description shown in the watch menu) to add an interactive option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  getUsageInfo(globalConfig) {\n    return {\n      key: 's',\n      prompt: 'do something',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Mock Call Results with mock.results in JavaScript\nDESCRIPTION: Illustrates the format of the `mock.results` array property. Each element in the array is an object describing the outcome of a call, containing a `type` ('return', 'throw', or 'incomplete') and the corresponding `value` (the returned value or thrown error).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Volume Class in TypeScript\nDESCRIPTION: Defines a simple `Volume` class in TypeScript with typed `amount` and `unit` properties, a `toString` method, and an `equals` method for comparing volume instances, handling 'L' and 'mL' units. This class serves as the basis for demonstrating custom equality testers in TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_54\n\nLANGUAGE: ts\nCODE:\n```\n// For simplicity in this example, we'll just support the units 'L' and 'mL'\nexport class Volume {\n  public amount: number;\n  public unit: 'L' | 'mL';\n\n  constructor(amount: number, unit: 'L' | 'mL') {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString(): string {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other: Volume): boolean {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.amount;\n    } else {\n      return this.amount === other.amount * 1000;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform with Multiple Preprocessors in JavaScript\nDESCRIPTION: Example of configuring Jest transform option to use both babel-jest for JavaScript/TypeScript files and a custom transformer for CSS files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_77\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Project Directory Structure for Manual Mocks - Bash\nDESCRIPTION: This snippet shows a typical project directory tree structure for organizing manual mocks in a Jest project. It highlights the placement of __mocks__ directories next to modules and Node modules to enable Jest’s manual mock system. No dependencies are required as this is purely a representation; this is meant to illustrate proper physical organization, not code execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/ManualMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── config\\n├── __mocks__\\n│   └── fs.js\\n├── models\\n│   ├── __mocks__\\n│   │   └── user.js\\n│   └── user.js\\n├── node_modules\\n└── views\\n\n```\n\n----------------------------------------\n\nTITLE: Using mockReturnThis in Jest Mocks\nDESCRIPTION: Demonstrates how to use mockReturnThis() for methods that typically return 'this' in chained calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObj = {\n  myMethod: jest.fn().mockReturnThis(),\n};\n\n// is the same as\n\nconst otherObj = {\n  myMethod: jest.fn(function () {\n    return this;\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns for pnpm in JavaScript\nDESCRIPTION: Special configuration for transformIgnorePatterns when using pnpm package manager, accounting for its unique symlinked structure in node_modules to properly include packages that need transformation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_83\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)',\n    /* if config file is under '~/packages/lib-a/' */\n    `${path.join(\n      __dirname,\n      '../..',\n    )}/node_modules/.pnpm/(?!(package-a|@scope\\\\+pkg-b)@)`,\n    /* or using relative pattern to match the second 'node_modules/' in 'node_modules/.pnpm/@scope+pkg-b@x.x.x/node_modules/@scope/pkg-b/' */\n    'node_modules/(?!.pnpm|package-a|@scope/pkg-b)',\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Sequentially to Improve CI Performance\nDESCRIPTION: Commands to run Jest tests in a single thread using the --runInBand flag. This can improve performance by up to 50% in certain CI environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --runInBand\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --runInBand\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and Babel Dependencies for React Testing\nDESCRIPTION: Command to install Jest, Babel, and related dependencies for testing React applications without Create React App.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Setting a Simple Test Display Name in Jest (JavaScript)\nDESCRIPTION: Configures a simple string `displayName` ('CLIENT') in a Jest configuration file (CommonJS) to label tests during execution. This is particularly useful for visually distinguishing tests in multi-project repositories.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: 'CLIENT',\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Problematic Import After Mocking node-fetch in Jest (JavaScript)\nDESCRIPTION: This snippet shows the 'before' state of imports in a Jest test file where `node-fetch` is globally mocked using `jest.mock('node-fetch')`. Importing both the default export (`fetch`) and a named export (`Response`) directly after the mock call results in both variables referencing mocked versions, which can cause runtime errors if the original functionality of `Response` is needed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/BypassingModuleMocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// BEFORE\njest.mock('node-fetch');\nimport fetch, {Response} from 'node-fetch';\n```\n```\n\n----------------------------------------\n\nTITLE: Correctly Testing Callbacks with `done` in Jest (JavaScript)\nDESCRIPTION: Demonstrates the correct way to test asynchronous code using callbacks in Jest. The test function accepts a `done` argument. Jest waits until `done()` is explicitly called within the callback to finish the test. Error handling is included using `try...catch` to pass potential assertion errors to `done(error)`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TestingAsyncCode.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ntest('the data is peanut butter', done => {\n  function callback(error, data) {\n    if (error) {\n      done(error);\n      return;\n    }\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Data-Driven Tests with Template Tables - Jest JavaScript\nDESCRIPTION: Uses Jest's tagged template literal API in combination with `test.skip.each` to declare tables for data-driven skipped tests. Parameters are auto-unpacked from the columns and rows. Only the skipped tests are omitted from execution. Jest is the only requirement.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GlobalAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Module Factory Not Wrapped in a Function - JavaScript\nDESCRIPTION: Demonstrates a ReferenceError occurring when a mock variable is accessed before initialization due to hoisting order. Although the variable starts with 'mock', the factory returns a reference directly, causing an error. Highlights correct and incorrect patterns for advanced Jest mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// results in a ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Specific Concurrent Parameterized Tests - Jest - JavaScript\nDESCRIPTION: Shows how to skip collections of asynchronous parameterized tests using test.concurrent.skip.each in both array and template literal forms. The skipped tests are marked and won't be executed, while any other tests in the file will run as usual.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the shouldRunTestSuite Hook in a Jest Watch Plugin\nDESCRIPTION: Provides an example of implementing the `jestHooks.shouldRunTestSuite` hook within the `apply` method. This hook allows the plugin to decide whether a specific test suite should be executed based on its information (e.g., `testPath`). It demonstrates returning both a direct boolean and a Promise resolving to a boolean for asynchronous operations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return testSuiteInfo.testPath.includes('my-keyword');\n    });\n\n    // or a promise\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sandboxInjectedGlobals in Jest (JavaScript)\nDESCRIPTION: Example of setting up sandboxInjectedGlobals in Jest configuration to improve performance for frequently accessed global objects like Math.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Mock to Return 'this' using mockImplementation in JavaScript\nDESCRIPTION: Shows the explicit `mockImplementation` code that is equivalent to the `mockReturnThis()` shorthand. It defines a mock function that returns its own execution context (`this`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\njest.fn(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Third Shard of a Jest Test Suite (Bash)\nDESCRIPTION: Executes the third and final shard (index 3) of a Jest test suite split into 3 parts via `--shard=3/3`. This command runs the remaining third of the tests and completes the distributed test execution when run in parallel with the other shard commands (`1/3`, `2/3`). Requires a test sequencer capable of handling sharding.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=3/3\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Jest Fake Timers Configuration\nDESCRIPTION: Defines the TypeScript type for Jest's fake timers configuration options. Includes options for advancing timers automatically, selecting which APIs to fake, enabling globally, using legacy implementation, setting system time, and limiting recursive timers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype ModernFakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /** Whether fake timers should be enabled for all test files. The default is `false`. */\n  enableGlobally?: boolean;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers, in milliseconds. The default is `Date.now()`. */\n  now?: number;\n  /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */\n  timerLimit?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Test Location in Jest Results (JSON)\nDESCRIPTION: Illustrates the JSON object format representing the `location` field, which can be added to Jest test results using the `--testLocationInResults` CLI flag. This object provides the `column` (0-indexed) and `line` (1-indexed) number where the test is defined in its source file, useful for custom reporters or integrations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"column\": 4,\n  \"line\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Native Component for Snapshot Testing\nDESCRIPTION: This snippet defines a simple React Native component called 'Intro' with some text and styling. It's used as an example for creating a snapshot test.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nclass Intro extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n        <Text style={styles.instructions}>\n          This is a React Native snapshot test.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  instructions: {\n    color: '#333333',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  welcome: {\n    fontSize: 20,\n    margin: 10,\n    textAlign: 'center',\n  },\n});\n\nexport default Intro;\n```\n\n----------------------------------------\n\nTITLE: Testing Mocked Object with TypeScript Type Safety\nDESCRIPTION: Demonstrates how to use jest.mocked() helper to create type-safe mocks of objects and console methods, including mock assertions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Function Mock for Constructor - Jest - JavaScript\nDESCRIPTION: Demonstrates an incorrect use of an arrow function in a Jest module factory, which cannot be called with new and thus fails to mock constructors. Highlights a key limitation: arrow functions can't serve as constructor mocks. Safe only if transpiled to ES5 where arrow functions become plain functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Es6ClassMocks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return () => {\n    // Does not work; arrow functions can't be called with new\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jest Transformer for Files in JavaScript\nDESCRIPTION: This snippet defines a custom Jest transformer (`fileTransformer.js`). It uses the Node.js `path` module to process any given file (`sourcePath`) and returns its basename as a string module export. This can be used via Jest's `transform` config option as an alternative way to handle static asset imports.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Webpack.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Jest Environment in ESLint Configuration - JSON\nDESCRIPTION: Configures ESLint to recognize Jest's global variables in files matching 'tests/**/*'. This prevents 'no-undef' errors from ESLint when using Jest globals in test files. Add this override to the project's .eslintrc.json or equivalent ESLint config.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"env\": {\n        \"jest\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Randomization and a Specific Seed (Bash)\nDESCRIPTION: This command demonstrates running Jest tests using the `--randomize` flag to shuffle the order of tests within a file and the `--seed` flag to specify a particular seed (1234) for the randomization. Using a specific seed ensures reproducibility of the shuffled order. This feature requires the default `jest-circus` test runner.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njest --randomize --seed 1234\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion with Jest expect and toBe Matcher in JavaScript\nDESCRIPTION: This snippet demonstrates a basic Jest test case. It uses the `expect` function to assert that the value returned by `bestLaCroixFlavor()` is strictly equal ('grapefruit') using the `.toBe` matcher. The `test` function defines an individual test block.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntest('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n```\n\n----------------------------------------\n\nTITLE: Using getChangedFilesForRoots with lastCommit and withAncestor options\nDESCRIPTION: Example of using the getChangedFilesForRoots function with lastCommit and withAncestor options set to true. It returns a Promise that resolves to an object containing repos and changedFiles.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {getChangedFilesForRoots} from 'jest-changed-files';\n\ngetChangedFilesForRoots(['/path/to/test'], {\n  lastCommit: true,\n  withAncestor: true,\n}).then(files => {\n  /*\n  {\n    repos: [],\n    changedFiles: []\n  }\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot File for React Native Component\nDESCRIPTION: Shows the content of a generated Jest snapshot file (`__tests__/__snapshots__/Intro-test.js.snap`). This file contains the serialized render output of the `Intro` component from the first successful test run, including component types, props, and styles. Jest uses this file for subsequent comparisons.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReactNative.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`Intro renders correctly 1`] = `\n<View\n  style={\n    Object {\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#F5FCFF\",\n      \"flex\": 1,\n      \"justifyContent\": \"center\",\n    }\n  }>\n  <Text\n    style={\n      Object {\n        \"fontSize\": 20,\n        \"margin\": 10,\n        \"textAlign\": \"center\",\n      }\n    }>\n    Welcome to React Native!\n  </Text>\n  <Text\n    style={\n      Object {\n        \"color\": \"#333333\",\n        \"marginBottom\": 5,\n        \"textAlign\": \"center\",\n      }\n    }>\n    This is a React Native snapshot test.\n  </Text>\n</View>\n`;\n```\n\n----------------------------------------\n\nTITLE: Inspecting Mock Function Instantiation with `.mock.instances` in JavaScript\nDESCRIPTION: This snippet demonstrates how to track instances created by a constructor mock function. It defines a mock using `jest.fn()`, instantiates it using `new`, and then accesses the `.mock.instances` property to retrieve an array of the objects created by the constructor mock.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Mock Function Instances Example in JavaScript\nDESCRIPTION: Demonstrates how to access object instances created from a mock function using new, stored in the mock.instances array.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctionAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Tests with Jest in JavaScript\nDESCRIPTION: Demonstrates the usage of Jest's new test.todo API, introduced in version 24, to mark test cases intended for future implementation. This snippet declares test cases that will be included in the output summary as reminders, but will not run or fail the test suite until implemented. Requires Jest 24 or later as a devDependency, with no parameters aside from the test description. Inputs are test descriptions as strings, and outputs are informative test placeholders during Jest runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2019-01-25-jest-24-refreshing-polished-typescript-friendly.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ntest.todo('invalid input should throw');\n\ntest.todo('missing options should be normalized');\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger Launch (Windows)\nDESCRIPTION: Provides a VS Code `launch.json` configuration to automatically launch Jest tests and attach the debugger on Windows. It uses the `node` type, `launch` request, and passes necessary runtime arguments like `--inspect-brk` and `--runInBand` to the specific Jest JavaScript file path used on Windows. Output is shown in the integrated terminal.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing pretty-format with ES2015 Modules - JavaScript\nDESCRIPTION: This snippet demonstrates importing the format function from pretty-format using ES2015 (ES6) module syntax. It uses the import statement and destructures the format function, assigning it the prettyFormat alias. Requires a JavaScript environment that supports ES2015 modules.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n----------------------------------------\n\nTITLE: Custom Test Environment for Jest\nDESCRIPTION: This code defines a custom test environment for Jest. It extends the Node environment and adds custom setup, teardown, and event handling logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nconst NodeEnvironment = require('jest-environment-node').TestEnvironment;\n\nclass CustomEnvironment extends NodeEnvironment {\n  constructor(config, context) {\n    super(config, context);\n    console.log(config.globalConfig);\n    console.log(config.projectConfig);\n    this.testPath = context.testPath;\n    this.docblockPragmas = context.docblockPragmas;\n  }\n\n  async setup() {\n    await super.setup();\n    await someSetupTasks(this.testPath);\n    this.global.someGlobalObject = createGlobalObject();\n\n    // Will trigger if docblock contains @my-custom-pragma my-pragma-value\n    if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {\n      // ...\n    }\n  }\n\n  async teardown() {\n    this.global.someGlobalObject = destroyGlobalObject();\n    await someTeardownTasks();\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n\n  async handleTestEvent(event, state) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n\nmodule.exports = CustomEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Mocking Option 1: Render Mock as Text (JavaScript)\nDESCRIPTION: A workaround for the mocking warning: mock the component to a function that returns a string. This avoids the React warning but means the component's props won't be visible in the snapshot.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./SomeComponent', () => () => 'SomeComponent');\n```\n\n----------------------------------------\n\nTITLE: Install jest-dynamodb Preset (Bash)\nDESCRIPTION: Installs the `@shelf/jest-dynamodb` package as a development dependency using npm. This preset simplifies the setup required to use DynamoDB within Jest tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/DynamoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-dynamodb\n```\n\n----------------------------------------\n\nTITLE: Example of a Generated Snapshot for React Native Component\nDESCRIPTION: This snippet shows an example of a generated snapshot file for the 'Intro' component. It captures the rendered output of the component for future comparisons.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReactNative.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`Intro renders correctly 1`] = `\n<View\n  style={\n    Object {\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#F5FCFF\",\n      \"flex\": 1,\n      \"justifyContent\": \"center\",\n    }\n  }>\n  <Text\n    style={\n      Object {\n        \"fontSize\": 20,\n        \"margin\": 10,\n        \"textAlign\": \"center\",\n      }\n    }>\n    Welcome to React Native!\n  </Text>\n  <Text\n    style={\n      Object {\n        \"color\": \"#333333\",\n        \"marginBottom\": 5,\n        \"textAlign\": \"center\",\n      }\n    }>\n    This is a React Native snapshot test.\n  </Text>\n</View>\n`;\n```\n\n----------------------------------------\n\nTITLE: Specifying DynamoDB Preset in Jest Configuration - JSON\nDESCRIPTION: Sets the Jest preset to '@shelf/jest-dynamodb' in the project's configuration file (such as jest.config.json or package.json). This preset enables default setup and teardown suitable for DynamoDB tests. No additional fields are required; ensure this appears at the top level of your Jest configuration.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/DynamoDB.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preset\": \"@shelf/jest-dynamodb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating ReferenceError with jest.mock() Factory Hoisting\nDESCRIPTION: This snippet shows a `ReferenceError` that occurs when using `jest.mock()` with a module factory. Even though the variable `mockSoundPlayer` starts with `mock`, it's accessed before initialization within the factory due to hoisting, because it's not wrapped in an arrow function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// results in a ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Tracking Constructor Calls for Mocked Classes in Jest using JavaScript\nDESCRIPTION: Shows how to track constructor invocations of a mocked class. Instead of returning a plain function, the HOF in `jest.mock` returns `jest.fn().mockImplementation(...)`. This allows using Jest matchers like `expect(SoundPlayer).toHaveBeenCalled()` to verify constructor calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting JavaScript Values with pretty-format in JavaScript\nDESCRIPTION: Illustrates using the `format` function (aliased as `prettyFormat`) from the `pretty-format` package to convert complex JavaScript values into a human-readable string representation. It requires the `pretty-format` package. The example shows formatting an object containing circular references, Symbols, Maps, and special numeric values (`-0`, `Infinity`, `NaN`), logging the formatted string output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```\n\n----------------------------------------\n\nTITLE: Mocking an ES6 Class using jest.mock() with Module Factory\nDESCRIPTION: Shows how to provide a mock implementation directly using the module factory argument of `jest.mock()`. The factory function returns a mock constructor function created with `jest.fn().mockImplementation()`. Requires variables used inside factory to be prefixed with `mock`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Mocking a Module and Overriding Its Implementation in Jest with JavaScript\nDESCRIPTION: Shows how to mock a module using jest.mock and override its implementation with mockImplementation. The example provides a module that exports a function, and in the test, replaces it so that it returns 42 instead of the original value. Requires the module and Jest, with automatic mocking of modules enabled.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function () {\n  // some implementation;\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.mock('../foo'); // this happens automatically with automocking\nconst foo = require('../foo');\n\n// foo is a mock function\nfoo.mockImplementation(() => 42);\nfoo();\n// > 42\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Environment for jsdom - Bash\nDESCRIPTION: This snippet provides a CLI command to install the 'jest-environment-jsdom' package as a development dependency, which is required for simulating a browser DOM environment in Jest tests. It should be run in the root of your Node.js project using npm. This step is necessary to enable DOM APIs for JavaScript testing in non-browser (Node) environments.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialjQuery.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Configuring workerIdleMemoryLimit in Jest (TypeScript)\nDESCRIPTION: TypeScript example showing how to set memory limits for Jest worker processes, using type imports from Jest for better type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: VS Code Debugger Configuration for Attaching to Jest\nDESCRIPTION: VS Code launch.json configuration to attach the built-in debugger to a running Jest process. This connects to the Node debugger on port 9229.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach\",\n      \"port\": 9229\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Validation Example with jest-validate in JavaScript\nDESCRIPTION: Shows the simplest way to invoke `jest-validate`. The `validate` function is called with the configuration object (`config`) to be validated and an options object containing only the mandatory `exampleConfig`.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate(config, {exampleConfig});\n```\n\n----------------------------------------\n\nTITLE: Providing a File Mock for Jest in JavaScript\nDESCRIPTION: Exports a simple string stub to mock static file imports (images, fonts, etc.) in Jest. Helps avoid processing non-JavaScript files during tests. Used by moduleNameMapper. Expects no special dependencies beyond Node.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = 'test-file-stub';\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive Mock Functions with jest.Mock<T>\nDESCRIPTION: Shows how to use jest.Mock<T> to define the type of a recursive mock function. This is useful for complex mocking scenarios that involve self-referential function calls.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    return value + fn(value - 1);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using describe.skip to Skip Test Blocks in JavaScript\nDESCRIPTION: Example of using describe.skip to exclude a specific describe block from test execution. This is useful for temporarily disabling tests without removing the code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GlobalAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.not.arrayContaining() in Jest\nDESCRIPTION: Demonstrates the inverse matcher `expect.not.arrayContaining(array)` in Jest. It asserts that the received array does *not* contain all elements of the expected array (i.e., the expected array is not a subset of the received array).\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_44\n\nLANGUAGE: js\nCODE:\n```\ndescribe('not.arrayContaining', () => {\n  const expected = ['Samantha'];\n\n  it('matches if the actual array does not contain the expected elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(\n      expect.not.arrayContaining(expected),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hook Execution Order in Jest\nDESCRIPTION: Shows the order of execution for various hooks (beforeAll, afterAll, beforeEach, afterEach) in nested describe blocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/SetupAndTeardown.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\n\ntest('', () => console.log('1 - test'));\n\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n\n  test('', () => console.log('2 - test'));\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Test Renderer using npm/yarn\nDESCRIPTION: Installs the `react-test-renderer` package as a development dependency. This package is necessary for rendering React components into pure JavaScript objects, which is essential for snapshot testing with Jest, especially when using Create React App.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialReact.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom `snapshotFormat` Settings in Jest\nDESCRIPTION: Illustrates a Jest test (`some.test.js`) using `toMatchInlineSnapshot`. The resulting inline snapshot demonstrates the effect of setting `snapshotFormat.printBasicPrototype` to `false` in the Jest configuration, where the default 'Object' and 'Array' prefixes are omitted.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\ntest('does not show prototypes for object and array inline', () => {\n  const object = {\n    array: [{hello: 'Danger'}],\n  };\n  expect(object).toMatchInlineSnapshot(`\n    {\n      \"array\": [\n        {\n          \"hello\": \"Danger\",\n        },\n      ],\n    }\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Link Component for Snapshot Testing\nDESCRIPTION: A React functional component that renders a hyperlink with hover state, used as an example for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialReact.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useState} from 'react';\n\nconst STATUS = {\n  HOVERED: 'hovered',\n  NORMAL: 'normal',\n};\n\nexport default function Link({page, children}) {\n  const [status, setStatus] = useState(STATUS.NORMAL);\n\n  const onMouseEnter = () => {\n    setStatus(STATUS.HOVERED);\n  };\n\n  const onMouseLeave = () => {\n    setStatus(STATUS.NORMAL);\n  };\n\n  return (\n    <a\n      className={status}\n      href={page || '#'}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Test Using Custom Environment\nDESCRIPTION: A Jest test that uses the custom Puppeteer environment to open Google.com and verify its content. Shows how to access the global browser instance.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Puppeteer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeout = 5000;\n\ndescribe(\n  '/ (Home Page)',\n  () => {\n    let page;\n    beforeAll(async () => {\n      page = await globalThis.__BROWSER_GLOBAL__.newPage();\n      await page.goto('https://google.com');\n    }, timeout);\n\n    it('should load without error', async () => {\n      const text = await page.evaluate(() => document.body.textContent);\n      expect(text).toContain('google');\n    });\n  },\n  timeout,\n);\n```\n\n----------------------------------------\n\nTITLE: Partial Mocking of Module in Jest\nDESCRIPTION: Demonstrates how to partially mock a module in Jest, overriding some exports while keeping others intact.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport defaultExport, {bar, foo} from '../foo-bar-baz';\n\njest.mock('../foo-bar-baz', () => {\n  const originalModule = jest.requireActual('../foo-bar-baz');\n\n  //Mock the default export and named export 'foo'\n  return {\n    __esModule: true,\n    ...originalModule,\n    default: jest.fn(() => 'mocked baz'),\n    foo: 'mocked foo',\n  };\n});\n\ntest('should do a partial mock', () => {\n  const defaultExportResult = defaultExport();\n  expect(defaultExportResult).toBe('mocked baz');\n  expect(defaultExport).toHaveBeenCalled();\n\n  expect(foo).toBe('mocked foo');\n  expect(bar()).toBe('bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Returning This Context with mockReturnThis in Jest JavaScript\nDESCRIPTION: Exposes the underlying implementation of mockReturnThis, showing that it can be replicated by returning this from a mock's custom function. Useful for mock chaining, particularly with APIs that rely on returning the context object.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctionAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.fn(function () {\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Async Custom Inline Snapshot Matcher in Jest\nDESCRIPTION: This code snippet shows how to create an async custom inline snapshot matcher. It demonstrates the proper way to handle errors in async matchers to avoid issues with multiple inline snapshots for the same call.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/ExpectAPI.md#2025-04-23_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // The error (and its stacktrace) must be created before any `await`\n    this.error = new Error();\n\n    // The implementation of `observe` doesn't matter.\n    // It only matters that the custom snapshot matcher is async.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observes something', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: SoundPlayer Class with Static and Getter Methods\nDESCRIPTION: Example class definition with a regular method, a getter method, and a static method which will be used for demonstrating mocking techniques in the next examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Es6ClassMocks.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot of named mock assertion output - Jest - Bash\nDESCRIPTION: Provides an example output from a Jest error when a named mock function is asserted but not called. The output snippet is for demonstration purposes only and not intended for code execution.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctionAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nexpect(mockedFunction).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic `forEach` Utility Function in JavaScript\nDESCRIPTION: Defines a JavaScript function `forEach` that iterates over an array and executes a provided callback function for each element. This function serves as an example target for testing with mock functions in subsequent snippets.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport function forEach(items, callback) {\n  for (const item of items) {\n    callback(item);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for CSS Modules\nDESCRIPTION: Configuration that uses identity-obj-proxy to handle CSS Modules in Jest tests. This approach returns classNames as-is, which is useful for snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Webpack.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/__mocks__/fileMock.js',\n    '\\\\.(css|less)$': 'identity-obj-proxy',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Native Components in Jest React Native with JavaScript\nDESCRIPTION: Demonstrates how to use `jest.mock` in conjunction with the `jest-react-native` helper `mockComponent` to create a mock implementation for a custom native component named 'MyNativeComponent'. This pattern is used in React Native testing to isolate components under test from their native dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-09-01-jest-15.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\njest.mock('MyNativeComponent', () => {\n  const jestReactNative = require('jest-react-native');\n  return jestReactNative.mockComponent('MyNativeComponent');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Click Event Handler and Displaying User - jQuery - JavaScript\nDESCRIPTION: This snippet defines a UI handler using jQuery that listens for clicks on a button, fetches the current user asynchronously via an imported function, and sets the text of a span element to the user's full name and login status. It requires jQuery and a module named 'fetchCurrentUser.js' and assumes the relevant DOM elements are present. The handler performs conditional string formatting based on the user object's properties, and is meant for interactive web pages where user state is shown upon a button click.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialjQuery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst $ = require('jquery');\\nconst fetchCurrentUser = require('./fetchCurrentUser.js');\\n\\n$('#button').click(() => {\\n  fetchCurrentUser(user => {\\n    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');\\n    $('#username').text(user.fullName + ' - ' + loggedText);\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Test Filter Function\nDESCRIPTION: Provides an example JavaScript module (`my-filter.js`) intended for use with the `--filter` CLI option. This module exports an asynchronous function that receives a list of test paths and returns a filtered list based on custom logic (`filteringFunction`), allowing fine-grained control over which tests are executed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CLI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = testPaths => {\n  const allowedPaths = testPaths\n    .filter(filteringFunction)\n    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]\n\n  return {\n    filtered: allowedPaths,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest `snapshotFormat` Default Options\nDESCRIPTION: This JSON object represents the planned default value for the `snapshotFormat` configuration option in Jest 29. Setting `escapeString` to `false` prevents string escaping, and `printBasicPrototype` to `false` omits the object's prototype in snapshots, enhancing readability and usability. Users can optionally apply these settings in earlier Jest versions by explicitly configuring `snapshotFormat`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2022-04-25-jest-28.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"escapeString\": false,\n  \"printBasicPrototype\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Jest forceCoverageMatch Configuration\nDESCRIPTION: Configuration examples in both JavaScript and TypeScript showing how to set forceCoverageMatch to include .t.js files in coverage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Custom Inline Snapshot Matchers (JavaScript)\nDESCRIPTION: This snippet illustrates how to correctly implement an asynchronous custom inline snapshot matcher (`toMatchObservationInlineSnapshot`). It highlights the necessity of creating an `Error` instance and assigning it to `this.error` *before* any `await` calls within the matcher. This provides Jest with the necessary stack trace context to update inline snapshots correctly for async operations. An example test case demonstrates its usage with an async function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // The error (and its stacktrace) must be created before any `await`\n    this.error = new Error();\n\n    // The implementation of `observe` doesn't matter.\n    // It only matters that the custom snapshot matcher is async.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observes something', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Diffing Objects with Jest Diff in JavaScript\nDESCRIPTION: This snippet uses 'jest-diff' to calculate and print a human-readable difference between two JavaScript objects. 'diff' accepts any values, compares them recursively, and generates a string representing their differences for easier visual inspection. Requires the 'jest-diff' package installed; inputs are two values to compare; output is a formatted diff string. Ideal for debugging or test fail messages.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {diff} = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring transformIgnorePatterns with Exceptions in TypeScript\nDESCRIPTION: TypeScript example showing how to configure Jest's transformIgnorePatterns to exclude node_modules except for specific packages, with a warning about overlapping patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Class for Mocking in JavaScript\nDESCRIPTION: Provides the definition of a simple JavaScript class `SomeClass` with a `method`. This class serves as the target for mocking in the subsequent example demonstrating how to mock a class constructor using `mockImplementation`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctionAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\n----------------------------------------\n\nTITLE: Invalid Arrow Function Mock Example\nDESCRIPTION: Demonstrates an incorrect implementation using arrow functions that will cause TypeError due to JavaScript's limitations with new operator on arrow functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('./sound-player', () => {\n  return () => {\n    // Does not work; arrow functions can't be called with new\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using toMatchObject Matcher in Jest\nDESCRIPTION: Demonstrates toMatchObject for checking if an object matches a subset of properties of another object.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('the house has my desired features', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Automocking in Jest Tests\nDESCRIPTION: Example of enabling automatic mocking in a Jest test file. This snippet demonstrates how to use jest.enableAutomock() to create mocked versions of imported functions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njest.enableAutomock();\n\nimport utils from '../utils';\n\ntest('original implementation', () => {\n  // now we have the mocked implementation,\n  expect(utils.authorize._isMockFunction).toBeTruthy();\n  expect(utils.isAuthorized._isMockFunction).toBeTruthy();\n});\n```\n\n----------------------------------------\n\nTITLE: Output When a Specific Test Passes with --runTestsByPath (Bash)\nDESCRIPTION: This shows the console output when the `jest --runTestsByPath __tests__/t1.test.js` command is executed successfully. It indicates that the specified test file (`__tests__/t1.test.js`) passed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPASS __tests__/t1.test.js\n```\n\n----------------------------------------\n\nTITLE: Configuring `preset` using an npm module in Jest (TypeScript)\nDESCRIPTION: Sets the `preset` option in `jest.config.ts` using TypeScript to specify a base configuration from an npm module. Jest searches for a preset file (e.g., `jest-preset.json`) within the 'foo-bar' module.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: 'foo-bar',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Plugins with Custom Options\nDESCRIPTION: Example of customizing a watch plugin through the Jest configuration, providing custom key and prompt settings that will be passed to the plugin constructor.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: [\n    [\n      'path/to/yourWatchPlugin',\n      {\n        key: 'k', // <- your custom key\n        prompt: 'show a custom prompt',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Test Case Using Custom Snapshot Serializer\nDESCRIPTION: Example test case that benefits from a custom serializer, showing how objects with a 'foo' property will be formatted in the resulting snapshots.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ntest(() => {\n  const bar = {\n    foo: {\n      x: 1,\n      y: 2,\n    },\n  };\n\n  expect(bar).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating jest.mocked() Usage for TypeScript - diff\nDESCRIPTION: Shows the update required when using the jest.mocked() helper method in TypeScript projects after migrating to Jest 29. The default behavior is now to deep mock; thus, any code passing true as the second argument should remove it to avoid type errors. No external dependencies are required. Input is an object to mock, output is a mocked version. This prevents type issues introduced by the breaking change in the API.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/UpgradingToJest29.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- const mockedObject = jest.mocked(someObject, true);\n+ const mockedObject = jest.mocked(someObject);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Jest Plugin\nDESCRIPTION: ESLint configuration that uses eslint-plugin-jest to enable Jest globals for test files, providing additional Jest-specific linting rules.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"tests/**/*\"],\n      \"plugins\": [\"jest\"],\n      \"env\": {\n        \"jest/globals\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up jQuery Click Handler for User Display - JavaScript\nDESCRIPTION: Implements a click event handler with jQuery that fetches user data asynchronously and updates a span element on the page. Requires the \\'jquery\\' module for DOM manipulation and an external \\'fetchCurrentUser\\' module for fetching user information. When the #button element is clicked, the user\\'s name and logged-in status are displayed in the #username span. Expects that #button and #username elements exist in the DOM; correct operation depends on these selectors.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialjQuery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst $ = require('jquery');\\nconst fetchCurrentUser = require('./fetchCurrentUser.js');\\n\\n$('#button').click(() => {\\n  fetchCurrentUser(user => {\\n    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');\\n    $('#username').text(user.fullName + ' - ' + loggedText);\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Basic Jest Configuration Object (JS/TS)\nDESCRIPTION: Demonstrates defining Jest configuration by exporting a simple object. The JavaScript version uses `module.exports` and JSDoc for type hinting, while the TypeScript version uses `export default` and imports the `Config` type. Both set the `verbose` option to `true`. Configuration files like `jest.config.js` or `jest.config.ts` are automatically discovered.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js tab\n/** @type {import('jest').Config} */\nconst config = {\n  verbose: true,\n};\n\nmodule.exports = config;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Resolver in JavaScript\nDESCRIPTION: This snippet shows how to create a custom Jest resolver function that respects Browserify's 'browser' field. It uses the browser-resolve package to implement the resolution logic.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Sequencer in Jest (TypeScript)\nDESCRIPTION: TypeScript configuration example showing how to specify a custom test sequencer in Jest configuration. This references the custom sequencer implementation file with proper type definitions.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_96\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Reporter in JavaScript\nDESCRIPTION: JavaScript configuration for using the GitHub Actions reporter with summary reporter. The github-actions reporter is configured with silent mode disabled for full log output.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['github-actions', {silent: false}], 'summary'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Custom Jest Transformer with Babel Core - JavaScript\nDESCRIPTION: Exports a custom Jest transformer that uses @babel/core and babel-preset-jest to preprocess source files. Receives source code and filename as parameters, applies Babel presets, and returns the transformed result or the source as fallback. Place this file (e.g., custom-transformer.js) and reference it within Jest's transform configuration for advanced customization.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TutorialReact.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\\n\\nconst {transform} = require('@babel/core');\\nconst jestPreset = require('babel-preset-jest');\\n\\nmodule.exports = {\\n  process(src, filename) {\\n    const result = transform(src, {\\n      filename,\\n      presets: [jestPreset],\\n    });\\n\\n    return result || src;\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Network Request Implementation\nDESCRIPTION: Implementation of a request module that makes HTTP requests to fetch user data from an API endpoint using Node's http module.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TutorialAsync.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\n\nexport default function request(url) {\n  return new Promise(resolve => {\n    // This is an example of an http request, for example to fetch\n    // user data from an API.\n    // This module is being mocked in __mocks__/request.js\n    http.get({path: url}, response => {\n      let data = '';\n      response.on('data', _data => (data += _data));\n      response.on('end', () => resolve(data));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Enabling Shallow Mocked Behavior with jest.mocked - diff\nDESCRIPTION: Illustrates how to achieve the previous shallow mocking behavior in Jest v29 by passing an options object '{shallow: true}' as the second argument to 'jest.mocked()'. Projects requiring only shallow mocks (instead of the now-default deep mocks) should use this updated API for clarity and correctness. Particularly relevant to codebases with advanced or custom mocking needs using TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/UpgradingToJest29.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- const mockedObject = jest.mocked(someObject);\n+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```\n\n----------------------------------------\n\nTITLE: Exporting Simple Utility Module in JavaScript\nDESCRIPTION: Defines and exports a utility object with a single method 'authorize' that returns a static string token. No external dependencies are required. Useful as a mock or real implementation for authentication logic in test scenarios. Input: none; Output: object with authorize function.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\\n  authorize: () => {\\n    return 'token';\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Timer-based Game Module with setTimeout in JavaScript\nDESCRIPTION: Implements a function that prints a start message, schedules a callback to execute after 1 second using setTimeout, and exports the function for use elsewhere. No external dependencies beyond the Node.js standard library are required. The callback, if provided, is invoked after the timer elapses; otherwise, nothing happens. This pattern forms the basis for controlled timer tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TimerMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample JavaScript Class with Methods and Getters\nDESCRIPTION: Provides the source code for a sample `SoundPlayer` class. This class includes a constructor, an instance method (`playSoundFile`), a getter (`foo`), and a static method (`brand`), serving as the basis for subsequent mocking examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Es6ClassMocks.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Class for Mocking in JavaScript\nDESCRIPTION: Defines a basic JavaScript class `SomeClass` with a single method `method`. This class is used in subsequent examples to demonstrate how to mock class constructors and methods using Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\n----------------------------------------\n\nTITLE: Installing jest-dynamodb Preset with npm/yarn\nDESCRIPTION: Command to install the jest-dynamodb preset package as a development dependency. This preset provides all required configuration to run tests using DynamoDB.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/DynamoDB.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shelf/jest-dynamodb\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Automock (TypeScript)\nDESCRIPTION: Sets the `automock` configuration option to `true` using TypeScript syntax in a Jest configuration file (e.g., `jest.config.ts`). This enables automatic mocking globally and is necessary for `jest.disableAutomock()` to function. It utilizes the `Config` type from the `jest` package for type safety.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  automock: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jest Test Sequencer in JavaScript\nDESCRIPTION: Provides a JavaScript example of a custom test sequencer class (`CustomSequencer`) that extends Jest's default sequencer (`@jest/test-sequencer`). It implements `shard` and `sort` methods to customize test sharding and execution order, specifically sorting tests alphabetically by path. This class can be used via the `testSequencer` configuration option.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"custom-sequencer.js\"\nconst Sequencer = require('@jest/test-sequencer').default;\n\nclass CustomSequencer extends Sequencer {\n  /**\n   * Select tests for shard requested via --shard=shardIndex/shardCount\n   * Sharding is applied before sorting\n   */\n  shard(tests, {shardIndex, shardCount}) {\n    const shardSize = Math.ceil(tests.length / shardCount);\n    const shardStart = shardSize * (shardIndex - 1);\n    const shardEnd = shardSize * shardIndex;\n\n    return [...tests]\n      .sort((a, b) => (a.path > b.path ? 1 : -1))\n      .slice(shardStart, shardEnd);\n  }\n\n  /**\n   * Sort test to determine order of execution\n   * Sorting is applied after sharding\n   */\n  sort(tests) {\n    // Test structure information\n    // https://github.com/jestjs/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21\n    const copyTests = [...tests];\n    return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));\n  }\n}\n\nmodule.exports = CustomSequencer;\n```\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests from Command Line (Bash)\nDESCRIPTION: Examples of running Jest tests using various command line options, including running all tests, specific tests, tests related to changed files, and watch mode.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njest\n```\n\nLANGUAGE: bash\nCODE:\n```\njest my-test #or\njest path/to/my-test.js\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -o\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nLANGUAGE: bash\nCODE:\n```\njest -t name-of-spec\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --watch #runs jest -o by default\njest --watchAll #runs all tests\n```\n\n----------------------------------------\n\nTITLE: Testing Callbacks with Done Parameter\nDESCRIPTION: Demonstrates testing callback-based async code using Jest's done parameter to signal test completion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/TestingAsyncCode.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the data is peanut butter', done => {\n  function callback(error, data) {\n    if (error) {\n      done(error);\n      return;\n    }\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Serializer for Jest\nDESCRIPTION: This snippet defines a custom snapshot serializer module for Jest. It provides custom serialization for objects with a 'foo' property.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  serialize(val, config, indentation, depth, refs, printer) {\n    return `Pretty foo: ${printer(val.foo)}`;\n  },\n\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Limiting Jest Worker Threads via CLI\nDESCRIPTION: Demonstrates using the `--maxWorkers` flag to limit the number of worker threads Jest uses for parallel test execution. This can improve performance and stability on CI servers or machines with limited CPU cores by reducing resource contention. The example sets the maximum workers to 4.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Using Jest CLI\njest --maxWorkers=4\n\n# Using your package manager's `test` script (e.g. with create-react-app)\nnpm test -- --maxWorkers=4\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Configuration in package.json\nDESCRIPTION: Demonstrates embedding Jest configuration within the project's `package.json` file under a dedicated `\"jest\"` key. This example sets the `verbose` option to `true`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Mocking in Jest (TypeScript)\nDESCRIPTION: Example of configuring automatic mocking in Jest using TypeScript. This snippet demonstrates how to enable automatic mocking in the Jest configuration file with TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  automock: true,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Importing Module in Jest Test\nDESCRIPTION: Demonstrates importing a module using Node.js require syntax in a Jest test context. Uses unconventional .txt extension for both the test and imported module.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-core/src/__tests__/test_root/__testtests__/not-really-a-test.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('../module.txt');\n```\n\n----------------------------------------\n\nTITLE: Increasing Jest Timeout for Long-Running Tests\nDESCRIPTION: Set a custom timeout for Jest tests using jest.setTimeout(). This is useful for tests that take longer than the default timeout to complete.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.setTimeout(10_000); // 10 second timeout\n```\n\n----------------------------------------\n\nTITLE: Defining createUser with node-fetch (JavaScript)\nDESCRIPTION: Implements a simple async function 'createUser' using 'node-fetch' to issue a POST request and return the created user's ID. Requires 'node-fetch' to be installed as a dependency. Designed as a real example for testing with Jest, expecting a Response object and its text() method on return. Inputs: none; outputs: the response body as a string.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/BypassingModuleMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from 'node-fetch';\\n\\nexport const createUser = async () => {\\n  const response = await fetch('https://website.com/users', {method: 'POST'});\\n  const userId = await response.text();\\n  return userId;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring `snapshotSerializers` in Jest (JavaScript)\nDESCRIPTION: Demonstrates configuring the `snapshotSerializers` option in a JavaScript Jest config file (`.js` or `.cjs`). This option accepts an array of paths to modules that act as custom snapshot serializers. Jest will use these serializers during snapshot testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Function that Throws an Error in JavaScript\nDESCRIPTION: Defines a simple JavaScript function `drinkFlavor` that throws a custom `DisgustingFlavorError` when the input `flavor` is 'octopus'. This function serves as an example for demonstrating Jest's error snapshot testing features.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nfunction drinkFlavor(flavor) {\n  if (flavor === 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous User Fetch Function in JavaScript\nDESCRIPTION: This snippet defines the `getUserName` function in `user.js`. It imports a `request` function (presumably from `./request.js`) and uses it to fetch user data based on a `userID`. It returns a Promise that resolves with the `name` property of the fetched user object. Requires Babel support as mentioned in the Jest documentation.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/TutorialAsync.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport request from './request';\n\nexport function getUserName(userID) {\n  return request(`/users/${userID}`).then(user => user.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JavaScript Values with pretty-format\nDESCRIPTION: This example showcases the `format` function from the `pretty-format` package to convert a complex JavaScript object, including circular references, Symbols, Maps, and special numeric values, into a well-formatted, human-readable string. It requires the `pretty-format` package and prints the formatted string representation of the value.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestPlatform.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```\n\n----------------------------------------\n\nTITLE: Defining Module with Multiple Exports in JavaScript\nDESCRIPTION: Creates a module with default and named exports for demonstrating partial mocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/MockFunctions.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = 'foo';\nexport const bar = () => 'bar';\nexport default () => 'baz';\n```\n\n----------------------------------------\n\nTITLE: Implementing File Summarizer in JavaScript\nDESCRIPTION: This snippet defines a function that summarizes files in a directory using the fs module. It's used as an example to demonstrate how manual mocking works in Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ManualMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst fs = require('fs');\n\nfunction summarizeFilesInDirectorySync(directory) {\n  return fs.readdirSync(directory).map(fileName => ({\n    directory,\n    fileName,\n  }));\n}\n\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Jest\nDESCRIPTION: Basic Babel configuration file (babel.config.js) for use with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Module Directories Configuration\nDESCRIPTION: Configuration examples for specifying custom module directories in Jest using both JavaScript and TypeScript.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Pretty-Formatting Values with Pretty-format in JavaScript\nDESCRIPTION: This snippet demonstrates formatting a complex JavaScript object, including circular references, symbols, maps, and special number values, using the 'pretty-format' package. The 'format' method (aliased from 'pretty-format') serializes diverse data structures into readable strings, helpful for debugging and test snapshot output. Input is any value or object; output is a string. Must install 'pretty-format', and circular/repeated structures are handled gracefully.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {format: prettyFormat} = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```\n\n----------------------------------------\n\nTITLE: Exporting an ES6 Class - JavaScript\nDESCRIPTION: Defines a basic ES6 class, SoundPlayer, with a constructor and a method playSoundFile. Exports this class as the default export, intended for later mocking or usage in consumer classes. No external dependencies are required to run this code; parameters include the constructor property foo and the fileName parameter for playSoundFile.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Watch Plugin Interface in JavaScript\nDESCRIPTION: Basic structure of a Jest watch plugin class with methods for applying hooks, getting usage info, and running custom actions.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  // Add hooks to Jest lifecycle events\n  apply(jestHooks) {}\n\n  // Get the prompt information for interactive plugins\n  getUsageInfo(globalConfig) {}\n\n  // Executed when the key from `getUsageInfo` is input\n  run(globalConfig, updateConfigAndRun) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @testing-library/react for DOM Testing\nDESCRIPTION: Command to install @testing-library/react for DOM testing in React applications.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialReact.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Common Subsequence Items with diff-sequences in JavaScript\nDESCRIPTION: This example provides an arrow function, findCommonItems, that returns an array of values from the longest common subsequence, using Object.is for comparison. By leveraging custom index manipulations in the foundSubsequence callback, the snippet collects the common elements based on callbacks and returns the resulting array. Requires diff-sequences and expects both a and b to be comparable arrays; output is an array of the actual items in the common subsequence.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/diff-sequences/README.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Return array of items in longest common subsequence according to Object.is method.\nconst findCommonItems = (a, b) => {\n  const array = [];\n  diff(\n    a.length,\n    b.length,\n    (aIndex, bIndex) => Object.is(a[aIndex], b[bIndex]),\n    (nCommon, aCommon) => {\n      for (; nCommon !== 0; nCommon -= 1, aCommon += 1) {\n        array.push(a[aCommon]);\n      }\n    },\n  );\n  return array;\n};\n\nconst commonItems = findCommonItems(\n  ['a', 'b', 'c', 'a', 'b', 'b', 'a'],\n  ['c', 'b', 'a', 'b', 'a', 'c'],\n);\n```\n\n----------------------------------------\n\nTITLE: Running Jest Codemods Migration Tool - Bash\nDESCRIPTION: This bash command runs the jest-codemods migration utility in your project directory to convert tests written with AVA, Chai, Jasmine, Mocha, and other supported libraries to Jest. It requires Node.js and npx installed, and automatically invokes the transformation over your codebase, leveraging jscodeshift under the hood. Input tests are expected in compatible JavaScript formats, and the output will be Jest-ready test files; backup your code before running as changes are made in-place.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MigrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx jest-codemods\n```\n\n----------------------------------------\n\nTITLE: Defining a Class Using `axios` for API Calls in JavaScript\nDESCRIPTION: Defines a JavaScript class `Users` with a static method `all` that uses the `axios` library to make a GET request to '/users.json'. It returns a promise resolving with the `data` from the response, representing a typical module with external dependencies.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/MockFunctions.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\nexport default Users;\n```\n\n----------------------------------------\n\nTITLE: Implementing print/test Plugin for Functions with pretty-format (JavaScript)\nDESCRIPTION: Defines a plugin using the print/test interface that formats functions in pretty-format with their name and argument count. The print method returns a string like '[Function name N]', while test matches function objects. Used as a pretty-format plugin, it overrides default function representation. Relies on pretty-format, and the plugin is designed for cases where no advanced options (like indentation or depth) are required.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for testResultsProcessor in Jest\nDESCRIPTION: Demonstrates the expected structure of the object that a custom testResultsProcessor should handle and return. This includes test success information, metrics, and detailed test results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": boolean,\n  \"startTime\": epoch,\n  \"numTotalTestSuites\": number,\n  \"numPassedTestSuites\": number,\n  \"numFailedTestSuites\": number,\n  \"numRuntimeErrorTestSuites\": number,\n  \"numTotalTests\": number,\n  \"numPassedTests\": number,\n  \"numFailedTests\": number,\n  \"numPendingTests\": number,\n  \"numTodoTests\": number,\n  \"openHandles\": Array<Error>,\n  \"testResults\": [{\n    \"numFailingTests\": number,\n    \"numPassingTests\": number,\n    \"numPendingTests\": number,\n    \"testResults\": [{\n      \"title\": string (message in it block),\n      \"status\": \"failed\" | \"pending\" | \"passed\",\n      \"ancestorTitles\": [string (message in describe blocks)],\n      \"failureMessages\": [string],\n      \"numPassingAsserts\": number,\n      \"location\": {\n        \"column\": number,\n        \"line\": number\n      },\n      \"duration\": number | null\n    },\n    ...\n    ],\n    \"perfStats\": {\n      \"start\": epoch,\n      \"end\": epoch\n    },\n    \"testFilePath\": absolute path to test file,\n    \"coverage\": {}\n  },\n  \"testExecError:\" (exists if there was a top-level failure) {\n    \"message\": string\n    \"stack\": string\n  }\n  ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error-Inducing jest.mock Factory with Out-of-Scope Variable - JavaScript\nDESCRIPTION: Demonstrates a faulty jest.mock usage pattern where a variable (fakePlaySoundFile) not following Jest's naming convention is out-of-scope, resulting in an error after hoisting. Serves as an anti-pattern showing how not to structure factory mocks in Jest. Running this as-is will result in a runtime error.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Es6ClassMocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: this will fail\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Package Filter Resolver Implementation\nDESCRIPTION: Custom resolver implementation that uses packageFilter to modify package.json resolution, preferring the module field over main.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (path, options) => {\n  // Call the defaultResolver, so we leverage its cache, error handling, etc.\n  return options.defaultResolver(path, {\n    ...options,\n    // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)\n    packageFilter: pkg => {\n      return {\n        ...pkg,\n        // Alter the value of `main` before resolving the package\n        main: pkg.module || pkg.main,\n      };\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Reporters with Custom Reporter in JavaScript\nDESCRIPTION: Shows how to configure the `reporters` option in a Jest JavaScript configuration. This example includes the default Jest reporter alongside a custom reporter specified via a relative path (`<rootDir>/custom-reporter.js`). Options are passed to the custom reporter using a tuple `[reporterPath, optionsObject]`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_61\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporters in Jest (TypeScript)\nDESCRIPTION: TypeScript version of setting up custom reporters in Jest. It demonstrates how to use the default reporter alongside additional custom reporters with specific options.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporters in Jest (JavaScript)\nDESCRIPTION: Example of setting up custom reporters in Jest configuration. This snippet shows how to use the default reporter along with additional custom reporters.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporters in Jest\nDESCRIPTION: Configuration for adding custom reporters to Jest with additional options passed as tuples.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring workerIdleMemoryLimit in Jest (JavaScript)\nDESCRIPTION: JavaScript example showing how to set memory limits for Jest worker processes. This configuration helps prevent memory leaks by recycling workers that exceed the specified memory limit.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing the apply Method in a Jest Watch Plugin\nDESCRIPTION: Shows the signature of the `apply` method within a Jest watch plugin class. This method receives `jestHooks` as an argument, allowing the plugin to register callbacks for specific Jest lifecycle events.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hoisting Issue with `jest.dontMock` and ES2015 `import`\nDESCRIPTION: This snippet illustrates the problem encountered when using `jest.dontMock` with ES2015 `import` statements. Due to hoisting, the `import` statement effectively executes before `jest.dontMock`, preventing the intended unmocking.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2016-04-12-jest-11.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\njest.dontMock('LikeButton');\nimport LikeButton from 'LikeButton';\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter Options in JavaScript\nDESCRIPTION: This snippet shows how to configure options for the summary reporter in Jest, specifically setting the summaryThreshold option. It demonstrates passing options to the default reporter.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Client for Testing\nDESCRIPTION: JavaScript code to configure the DynamoDB DocumentClient for testing environment. It sets up local endpoint and test-specific configurations.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/DynamoDB.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');\n\nconst isTest = process.env.JEST_WORKER_ID;\nconst config = {\n  convertEmptyValues: true,\n  ...(isTest && {\n    endpoint: 'localhost:8000',\n    sslEnabled: false,\n    region: 'local-env',\n  }),\n};\n\nconst ddb = new DocumentClient(config);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Dependency Extractor Module in Jest (JavaScript)\nDESCRIPTION: Example of a Node.js module exporting `extract` and `getCacheKey` functions for custom dependency extraction in Jest. The `extract` function receives code, filePath, and the default extractor function, returning an iterable (e.g., a Set) of dependencies. `getCacheKey` uses `crypto` and `fs` to generate a hash based on the extractor file's content, ensuring cache invalidation when the extractor logic changes.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nmodule.exports = {\n  extract(code, filePath, defaultExtract) {\n    const deps = defaultExtract(code, filePath);\n    // Scan the file and add dependencies in `deps` (which is a `Set`)\n    return deps;\n  },\n  getCacheKey() {\n    return crypto\n      .createHash('md5')\n      .update(fs.readFileSync(__filename))\n      .digest('hex');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Display Name for Jest Tests (JavaScript)\nDESCRIPTION: This example demonstrates how to set a display name for Jest tests using the displayName configuration option. It shows both simple string and object-based configurations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Jest testRegex Matches\nDESCRIPTION: Provides a directory structure visualization illustrating which files would be identified as test files by Jest's default `testRegex` pattern. Files ending in `.spec.js`, `.test.js`, `.spec.jsx`, or located within a `__tests__` directory are marked as tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_91\n\nLANGUAGE: bash\nCODE:\n```\n├── __tests__\n│   └── component.spec.js # test\n│   └── anything # test\n├── package.json # not test\n├── foo.test.js # test\n├── bar.spec.jsx # test\n└── component.js # not test\n```\n\n----------------------------------------\n\nTITLE: Incorrect Asynchronous Test Definition in Jest\nDESCRIPTION: Example of an incorrectly defined asynchronous test in Jest. Tests must be defined synchronously for Jest to collect them properly.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this it will not work\nsetTimeout(() => {\n  it('passes', () => expect(1).toBe(1));\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel TypeScript Preset - Bash\nDESCRIPTION: Installs '@babel/preset-typescript' as a dev dependency, enabling Babel to transpile TypeScript files in Jest. Requires an existing Node.js project and Babel setup.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/GettingStarted.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Validating Configurations with Jest Validate in JavaScript\nDESCRIPTION: This code sample validates a user-supplied configuration object with 'jest-validate', comparing it to an example config and adding custom comments for context. The function returns an object signaling validation status and presence of deprecated options. The snippet requires 'jest-validate'; inputs are the user's config and a validation options object; output is a result object with diagnostic flags. This helps enforce configuration correctness and avoid obsolete settings.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestPlatform.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Custom Test Runner Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript function signature required for a custom test runner module used with the `testRunner` configuration option. It details the parameters (`globalConfig`, `config`, `environment`, `runtime`, `testPath`) provided by Jest and the expected `Promise<TestResult>` return type, which contains the results for the specified test path.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfunction testRunner(\n  globalConfig: GlobalConfig,\n  config: ProjectConfig,\n  environment: Environment,\n  runtime: Runtime,\n  testPath: string,\n): Promise<TestResult>;\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Second Shard of a Jest Test Suite (Bash)\nDESCRIPTION: Executes the second shard (index 2) of a Jest test suite divided into 3 shards, specified by `--shard=2/3`. Similar to the first shard command, this is used for parallelizing test execution in CI environments, running the middle third of the tests. Requires a test sequencer that supports sharding.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njest --shard=2/3\n```\n\n----------------------------------------\n\nTITLE: Exporting Utility Module with Multiple Methods in JavaScript\nDESCRIPTION: Exports a utility object with methods for authorization and authorization checking. This module can be mocked or used as-is in Jest tests, allowing differentiation between mocked and real functionality. Methods: 'authorize' returns a token; 'isAuthorized' checks an input secret. No dependencies. Input: secret (for isAuthorized); Output: Boolean for isAuthorized.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestObjectAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\\n  authorize: () => {\\n    return 'token';\\n  },\\n  isAuthorized: secret => secret === 'wizard',\\n};\n```\n\n----------------------------------------\n\nTITLE: Example Jest Test Output in Bash\nDESCRIPTION: This snippet shows the typical output in a bash terminal when Jest tests pass successfully. It indicates the test file (`./sum.test.js`), the status (`PASS`), the description of the passed test, and the time taken.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPASS  ./sum.test.js\n✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Snapshot Content with Descriptive Names in Jest\nDESCRIPTION: This snippet shows how descriptive snapshot names make it easier to identify when snapshot content is incorrect, as the expected output is clearly described in the snapshot name.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/SnapshotTesting.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`<UserName /> should render null`] = `\n<div>\n  Alan Turing\n</div>\n`;\n\nexports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n----------------------------------------\n\nTITLE: Tracking `this` Context with `.mock.contexts` in JavaScript\nDESCRIPTION: This snippet shows how to inspect the `this` context associated with calls to a mock function. It creates a mock function, binds it to a specific object `b` using `.bind()`, calls the bound function, and then checks the `.mock.contexts` property to verify the `this` context for that call.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\n----------------------------------------\n\nTITLE: Exporting a forEach Helper Function in JavaScript\nDESCRIPTION: This function defines and exports a reusable helper that iterates over an array and invokes a callback for each element. There are no non-standard dependencies. Inputs are an items array and a callback function, and the function simply applies the callback to each array item. There is no return value; the function is purely procedural and exposes its logic for both use and testing.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/MockFunctions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function forEach(items, callback) {\n  for (const item of items) {\n    callback(item);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inline Snapshot Matcher in JavaScript\nDESCRIPTION: Example of a custom inline snapshot matcher that trims input strings. This demonstrates how to create matchers for inline snapshots where the snapshots are included directly in the test code.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.slice(0, 10), ...rest);\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jest Codemods Migration Tool via npx - Bash Script\nDESCRIPTION: This Bash command snippet demonstrates how to execute the jest-codemods tool using npx to automate the migration of tests from other JavaScript testing frameworks (such as AVA, Chai, Jasmine, Mocha, Tape, etc.) to Jest. The command should be run from the root of the project containing the test files. It leverages the Node.js-based CLI, requiring npx (bundled with modern Node.js installations) and access to the internet to fetch the package. On execution, jest-codemods applies codemod transformations to refactor test code automatically. No additional arguments are required for basic usage.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MigrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx jest-codemods\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Format for Jest v29 Compatibility (diff)\nDESCRIPTION: This configuration diff shows how to set the `snapshotFormat` property in Jest v29 to maintain the v28 behavior by explicitly setting `escapeString` and `printBasicPrototype` to `true`. This is necessary because Jest v29 changed the default formatting to `{escapeString: false, printBasicPrototype: false}`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/UpgradingToJest29.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+ snapshotFormat: {\n+   escapeString: true,\n+   printBasicPrototype: true\n+ }\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Jest Environment via Docblock (JavaScript)\nDESCRIPTION: Illustrates how to specify a custom test environment using the `@jest-environment` docblock pragma. The value provided is the relative path to the custom environment module file (`my-custom-environment.js` located in `./src/test/`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_85\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @jest-environment ./src/test/my-custom-environment\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Snapshot Before Format Change - JavaScript\nDESCRIPTION: This snippet exports a snapshot in the Jest pre-v19 format, where the snapshot key retains the 'test' prefix and JSX elements may have suboptimal prop formatting and escaping. Intended for use in Jest test suites, it relies on the Jest testing framework's snapshot feature enabled via `expect(...).toMatchSnapshot()`. No special dependencies are required beyond Jest. The key 'exports' associates named snapshot results with their rendered values as multi-line template literals.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports[`test snap 1`] = `\\n<header>\\n  <h1>\\n    Jest \\\"19\\\"\\n  </h1>\\n  <Subtitle\\n    name=\\\"Painless JavaScript Testing\\\" />\\n</header>\\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Input Object for pretty-format Plugin (JavaScript)\nDESCRIPTION: Declares a sample JavaScript object 'val' representing a filtered list with 'items' and 'completed' flags. Intended as input for serialization and plugin demonstration, it showcases nested object structures with example task entries. This object is used in subsequent pretty-format calls to show plugin effects. Contains no dependencies and is valid vanilla JS data.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Class for Mocking in TypeScript\nDESCRIPTION: Defines a basic TypeScript class `SomeClass` with a typed method `method`. This serves as the target for mocking in the corresponding TypeScript test example.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctionAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Structures with jest-diff in JavaScript\nDESCRIPTION: Shows how to use the `diff` function from the `jest-diff` package to generate a human-readable string visualizing the differences between two JavaScript values (objects in this example). It requires the `jest-diff` package. The comparison result, a formatted string highlighting the changes, is then printed to the console.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/JestPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {diff} = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring sandboxInjectedGlobals in TypeScript\nDESCRIPTION: TypeScript example of setting sandboxInjectedGlobals option to optimize Math operations in Jest tests by making them directly available in the vm.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Exporting a Simple forEach Function in JavaScript\nDESCRIPTION: Defines and exports a utility function named forEach that iterates over an array and applies a callback to each item. There are no external dependencies, and it is intended to be unit tested and used wherever a simple forEach abstraction is needed. The function takes an array 'items' and a 'callback' and calls the callback for each item.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/MockFunctions.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function forEach(items, callback) {\n  for (const item of items) {\n    callback(item);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Diff Output with Reverse Alphabetical Object Key Order (Diff)\nDESCRIPTION: Displays the diff output for two objects where keys have been sorted in reverse alphabetical order (`a`, `b`, `c`) using a custom function provided to the `compareKeys` option.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n- Expected\n+ Received\n\n  Object {\n    \"a\": \"a\",\n-   \"b\": \"b1\",\n+   \"b\": \"b2\",\n    \"c\": \"c\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Reporter Options in Jest (TypeScript)\nDESCRIPTION: Example of configuring options for the Summary Reporter in Jest using TypeScript. This setup sets the summaryThreshold option to control when detailed summaries are printed.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/Configuration.md#2025-04-23_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [['default', {summaryThreshold: 10}]],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Test Failure Context with Codeframe in Jest JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a Jest test case designed to fail. It defines a function `someFunctionWhichShouldThrow` that does not throw an error, but the test expects it to using `expect(...).toThrow()`. This example is used in the blog post to highlight the improved error reporting in Jest 22, which includes a codeframe showing the exact location of the failing assertion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2017-12-18-jest-22.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('some test', () => {\n  function someFunctionWhichShouldThrow() {\n    if (false) {\n      throw new Error();\n    }\n\n    return 'success!';\n  }\n\n  expect(someFunctionWhichShouldThrow).toThrow();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module in JavaScript\nDESCRIPTION: Example of a simple utility module in JavaScript that exports an object with authorization methods. This module will be used in subsequent test examples.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Recursive Timer Function in JavaScript\nDESCRIPTION: This JavaScript code defines `infiniteTimerGame`, a function that uses `setTimeout` to execute a callback after 1 second. Crucially, inside the `setTimeout` callback, it schedules *another* `setTimeout` to call itself again after 10 seconds, creating a recursive timer loop.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction infiniteTimerGame(callback) {\n  console.log('Ready....go!');\n\n  setTimeout(() => {\n    console.log(\"Time's up! 10 seconds before the next game starts...\");\n    callback && callback();\n\n    // Schedule the next game in 10 seconds\n    setTimeout(() => {\n      infiniteTimerGame(callback);\n    }, 10000);\n  }, 1000);\n}\n\nmodule.exports = infiniteTimerGame;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest 27 to Use Legacy Fake Timers Globally\nDESCRIPTION: This configuration option sets the global fake timers implementation to `legacy`. It's used in the Jest configuration file to opt out of the \"modern\" implementation (default in Jest 27) for all tests, typically when migrating a project heavily reliant on the previous behavior of timer mocks. This is an alternative to using `jest.useFakeTimers(\"legacy\")` programmatically.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2021-05-25-jest-27.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"timers\": \"legacy\"\n```\n\n----------------------------------------\n\nTITLE: Generating Module Mocks with Jest onGenerateMock\nDESCRIPTION: Demonstrates using jest.onGenerateMock to customize mock generation for modules. Shows how to register a callback that modifies generated mocks before they are used in tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\njest.onGenerateMock((modulePath, moduleMock) => {\n  // Inspect the module name and decide how to transform the mock\n  if (modulePath.includes('Database')) {\n    // For demonstration, let's replace a method with our own custom mock\n    moduleMock.connect = jest.fn().mockImplementation(() => {\n      console.log('Connected to mock DB');\n    });\n  }\n\n  // Return the (potentially modified) mock\n  return moduleMock;\n});\n\n// Apply mock for module\njest.mock('./Database');\n\n// Later in your tests\nimport Database from './Database';\n// The `Database` mock now has any transformations applied by our callback\n```\n\n----------------------------------------\n\nTITLE: Implementing the run Method for Handling Key Presses\nDESCRIPTION: Shows the signature of the `run` method in a Jest watch plugin. This method is executed when the key defined in `getUsageInfo` is pressed. It receives the `globalConfig` and an `updateConfigAndRun` function to optionally trigger new test runs with updated configuration. It should return a Promise resolving to a boolean indicating if Jest should rerun tests upon completion.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  run(globalConfig, updateConfigAndRun) {\n    // do something.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies for Jest\nDESCRIPTION: Command to install Babel and related dependencies required for using Babel with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationOptions Type in TypeScript\nDESCRIPTION: Provides the TypeScript type definition for `ValidationOptions`, which details the structure and types of the options object passed to the `validate` function. It includes fields for comments, custom validation conditions, deprecation handling, error/warning customization, example configuration, recursive validation control, and custom titles.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ValidationOptions = {\n  comment?: string;\n  condition?: (option: unknown, validOption: unknown) => boolean;\n  deprecate?: (\n    config: Record<string, unknown>,\n    option: string,\n    deprecatedOptions: DeprecatedOptions,\n    options: ValidationOptions,\n  ) => boolean;\n  deprecatedConfig?: DeprecatedOptions;\n  error?: (\n    option: string,\n    received: unknown,\n    defaultValue: unknown,\n    options: ValidationOptions,\n    path?: Array<string>,\n  ) => void;\n  exampleConfig: Record<string, unknown>;\n  recursive?: boolean;\n  recursiveBlacklist?: Array<string>;\n  recursiveDenylist?: Array<string>;\n  title?: Title;\n  unknown?: (\n    config: Record<string, unknown>,\n    exampleConfig: Record<string, unknown>,\n    option: string,\n    options: ValidationOptions,\n    path?: Array<string>,\n  ) => void;\n};\n\ntype Title = {\n  deprecation?: string;\n  error?: string;\n  warning?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldRunTestSuite Hook in Jest Watch Plugin\nDESCRIPTION: Example of using the shouldRunTestSuite hook to determine whether a test suite should be run based on its path. Supports both synchronous and asynchronous implementations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/WatchPlugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return testSuiteInfo.testPath.includes('my-keyword');\n    });\n\n    // or a promise\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest with npm or yarn\nDESCRIPTION: Command to install Jest as a development dependency using npm or yarn package managers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest\n```\n\n----------------------------------------\n\nTITLE: Creating User Function Implementation\nDESCRIPTION: Demonstrates a function that creates a user by making a POST request using node-fetch. The function sends a request to a users endpoint and returns the user ID from the response.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/BypassingModuleMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nexport const createUser = async () => {\n  const response = await fetch('https://website.com/users', {method: 'POST'});\n  const userId = await response.text();\n  return userId;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Timer Function in JavaScript\nDESCRIPTION: This JavaScript code defines a function `timerGame` which takes an optional callback. It logs a start message and uses `setTimeout` to delay the execution of another log message and the callback function by 1000 milliseconds. The function is exported for use in other modules, typically tests.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/TimerMocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Global Types Package\nDESCRIPTION: Command to install @jest/globals package that provides type definitions for Jest global APIs in TypeScript projects.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/GettingStarted.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @jest/globals\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Resolver Implementation\nDESCRIPTION: Example of a custom snapshot resolver that defines how Jest maps between test files and snapshot files, allowing customization of where snapshots are stored.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // resolves from test to snapshot path\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('__tests__', '__snapshots__') + snapshotExtension,\n\n  // resolves from snapshot to test path\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    snapshotFilePath\n      .replace('__snapshots__', '__tests__')\n      .slice(0, -snapshotExtension.length),\n\n  // Example test path, used for preflight consistency check of the implementation above\n  testPathForConsistencyCheck: 'some/__tests__/example.test.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Installing pretty-format - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the pretty-format package using yarn. The only prerequisite is to have yarn installed. Running this command adds pretty-format as a dependency to the project, enabling access to its features.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add pretty-format\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Custom Transformer API (TypeScript)\nDESCRIPTION: TypeScript interfaces defining the structure and methods required for custom Jest transformers. It outlines `TransformOptions` (configuration and context passed to the transformer), `TransformedSource` (the expected return type containing code and optional source map), `SyncTransformer` and `AsyncTransformer` (defining synchronous and asynchronous processing methods like `process` and `processAsync`), and related factory types (`TransformerCreator`, `TransformerFactory`). These interfaces serve as the contract for implementing custom code transformation logic compatible with Jest's synchronous (`require`) and asynchronous (`import`) module loading.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/CodeTransformation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransformOptions<TransformerConfig = unknown> {\n  supportsDynamicImport: boolean;\n  supportsExportNamespaceFrom: boolean;\n  /**\n   * The value is:\n   * - `false` if Jest runs without Node ESM flag `--experimental-vm-modules`\n   * - `true` if the file extension is defined in [extensionsToTreatAsEsm](Configuration.md#extensionstotreatasesm-arraystring)\n   * and Jest runs with Node ESM flag `--experimental-vm-modules`\n   *\n   * See more at https://jestjs.io/docs/next/ecmascript-modules\n   */\n  supportsStaticESM: boolean;\n  supportsTopLevelAwait: boolean;\n  instrument: boolean;\n  /** Cached file system which is used by `jest-runtime` to improve performance. */\n  cacheFS: Map<string, string>;\n  /** Jest configuration of currently running project. */\n  config: ProjectConfig;\n  /** Stringified version of the `config` - useful in cache busting. */\n  configString: string;\n  /** Transformer configuration passed through `transform` option by the user. */\n  transformerConfig: TransformerConfig;\n}\n\ntype TransformedSource = {\n  code: string;\n  map?: RawSourceMap | string | null;\n};\n\ninterface SyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ninterface AsyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ntype Transformer<TransformerConfig = unknown> =\n  | SyncTransformer<TransformerConfig>\n  | AsyncTransformer<TransformerConfig>;\n\ntype TransformerCreator<\n  X extends Transformer<TransformerConfig>,\n  TransformerConfig = unknown,\n> = (transformerConfig?: TransformerConfig) => X;\n\ntype TransformerFactory<X extends Transformer> = {\n  createTransformer: TransformerCreator<X>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Module for Manual Mock Extension (JavaScript)\nDESCRIPTION: Exports a JavaScript object (`utils.js`) containing `authorize` and `isAuthorized` methods. This module serves as the basis for demonstrating how `jest.createMockFromModule()` can generate an automatic mock which can then be manually extended or overridden in a test file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/JestObjectAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\n----------------------------------------\n\nTITLE: Adding comments in Jest configuration (JSON)\nDESCRIPTION: Example of adding comments to Jest configuration in package.json using the '//' key. This allows developers to include explanatory notes within the configuration file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest CLI Argument Formats (Bash)\nDESCRIPTION: Examples demonstrating Jest's support for both camelcase and dashed argument formats, as well as mixing argument styles.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njest --collect-coverage\njest --collectCoverage\n```\n\nLANGUAGE: bash\nCODE:\n```\njest --update-snapshot --detectOpenHandles\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Link Component (TSX)\nDESCRIPTION: A React functional component named `Link` that renders an anchor (`<a>`) tag. It uses the `useState` hook to manage a `status` state ('hovered' or 'normal') which changes the component's className on mouse enter and leave events. The component accepts `page` (URL) and `children` as props.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\n\nconst STATUS = {\n  HOVERED: 'hovered',\n  NORMAL: 'normal',\n};\n\nexport default function Link({page, children}) {\n  const [status, setStatus] = useState(STATUS.NORMAL);\n\n  const onMouseEnter = () => {\n    setStatus(STATUS.HOVERED);\n  };\n\n  const onMouseLeave = () => {\n    setStatus(STATUS.NORMAL);\n  };\n\n  return (\n    <a\n      className={status}\n      href={page || '#'}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Sum Function in JavaScript\nDESCRIPTION: This JavaScript code defines a simple function named `sum` that takes two arguments (`a` and `b`) and returns their sum. It uses `module.exports` to make the function available for import in other modules, such as test files.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n----------------------------------------\n\nTITLE: Using diffStringsRaw without Cleanup\nDESCRIPTION: Example showing diffStringsRaw() without cleanup, which provides more granular differences between strings. Without cleanup, small common substrings aren't combined, resulting in more detailed diff information.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffs = diffStringsRaw('changed from', 'changed to', false);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Sequencer in Jest Configuration (TypeScript)\nDESCRIPTION: TypeScript configuration example for specifying a custom test sequencer in Jest. This shows how to reference a sequencer file path with proper type annotations.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/Configuration.md#2025-04-23_snippet_77\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder for Empty First/Last Lines (JS)\nDESCRIPTION: Explains and demonstrates the `emptyFirstOrLastLinePlaceholder` option. This option allows specifying a character (e.g., '↵') to be displayed when the first or last line of the diff content is empty, making it visually apparent. This is useful because empty lines, especially at the end, might be trimmed or overlooked.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst options = {\n  emptyFirstOrLastLinePlaceholder: '↵', // U+21B5\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Utility Module (JavaScript)\nDESCRIPTION: A basic JavaScript module (`utils.js`) exporting an object with two methods, `authorize` and `isAuthorized`. This module is used as an example target for Jest's automatic mocking feature demonstrated in a subsequent test snippet.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"utils.js\"\nexport default {\n  authorize: () => 'token',\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n```\n\n----------------------------------------\n\nTITLE: TestResultsProcessor Input Object Structure for Jest\nDESCRIPTION: Defines the expected structure of the input object passed to a custom testResultsProcessor in Jest. The processor must export a function that accepts and returns an object with this structure.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/Configuration.md#2025-04-23_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": boolean,\n  \"startTime\": epoch,\n  \"numTotalTestSuites\": number,\n  \"numPassedTestSuites\": number,\n  \"numFailedTestSuites\": number,\n  \"numRuntimeErrorTestSuites\": number,\n  \"numTotalTests\": number,\n  \"numPassedTests\": number,\n  \"numFailedTests\": number,\n  \"numPendingTests\": number,\n  \"numTodoTests\": number,\n  \"openHandles\": Array<Error>,\n  \"testResults\": [{\n    \"numFailingTests\": number,\n    \"numPassingTests\": number,\n    \"numPendingTests\": number,\n    \"testResults\": [{\n      \"title\": string (message in it block),\n      \"status\": \"failed\" | \"pending\" | \"passed\",\n      \"ancestorTitles\": [string (message in describe blocks)],\n      \"failureMessages\": [string],\n      \"numPassingAsserts\": number,\n      \"location\": {\n        \"column\": number,\n        \"line\": number\n      },\n      \"duration\": number | null\n    },\n    ...\n    ],\n    \"perfStats\": {\n      \"start\": epoch,\n      \"end\": epoch\n    },\n    \"testFilePath\": absolute path to test file,\n    \"coverage\": {}\n  },\n  \"testExecError:\" (exists if there was a top-level failure) {\n    \"message\": string\n    \"stack\": string\n  }\n  ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Test Results Processor Input Object Structure in JSON\nDESCRIPTION: The structure of the object that testResultsProcessor receives as input. This JSON structure contains comprehensive test result data including success status, timing information, test counts, and detailed test results.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/Configuration.md#2025-04-23_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": boolean,\n  \"startTime\": epoch,\n  \"numTotalTestSuites\": number,\n  \"numPassedTestSuites\": number,\n  \"numFailedTestSuites\": number,\n  \"numRuntimeErrorTestSuites\": number,\n  \"numTotalTests\": number,\n  \"numPassedTests\": number,\n  \"numFailedTests\": number,\n  \"numPendingTests\": number,\n  \"numTodoTests\": number,\n  \"openHandles\": Array<Error>,\n  \"testResults\": [{\n    \"numFailingTests\": number,\n    \"numPassingTests\": number,\n    \"numPendingTests\": number,\n    \"testResults\": [{\n      \"title\": string (message in it block),\n      \"status\": \"failed\" | \"pending\" | \"passed\",\n      \"ancestorTitles\": [string (message in describe blocks)],\n      \"failureMessages\": [string],\n      \"numPassingAsserts\": number,\n      \"location\": {\n        \"column\": number,\n        \"line\": number\n      },\n      \"duration\": number | null\n    },\n    ...\n    ],\n    \"perfStats\": {\n      \"start\": epoch,\n      \"end\": epoch\n    },\n    \"testFilePath\": absolute path to test file,\n    \"coverage\": {}\n  },\n  \"testExecError:\" (exists if there was a top-level failure) {\n    \"message\": string\n    \"stack\": string\n  }\n  ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Module with Named and Default Exports\nDESCRIPTION: This snippet defines a JavaScript module named `foo-bar-baz.js`. It exports a constant string `foo`, a function `bar` that returns 'bar', and a default export which is a function returning 'baz'. This illustrates common ES module export patterns.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/MockFunctions.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport const foo = 'foo';\nexport const bar = () => 'bar';\nexport default () => 'baz';\n```\n\n----------------------------------------\n\nTITLE: Example Output with Custom Serialization using SERIALIZABLE_PROPERTIES\nDESCRIPTION: Shows the resulting Jest error output when comparing two instances of the `Volume` class after `SERIALIZABLE_PROPERTIES` has been set. Notice that only the specified `amount` and `unit` properties are included in the Expected and Received sections, ignoring the `label` getter.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/ExpectAPI.md#2025-04-23_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexpect(received).toEqual(expected) // deep equality\n\nExpected: {\"amount\": 10, \"unit\": \"L\"}\nReceived: {\"amount\": 1, \"unit\": \"L\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Watch Plugins in jest.config.js\nDESCRIPTION: This snippet demonstrates how to register a custom watch plugin within the Jest configuration file (`jest.config.js`). The `watchPlugins` array should contain the path to the plugin file.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/WatchPlugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  watchPlugins: ['path/to/yourWatchPlugin'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous User Data Fetching in JavaScript\nDESCRIPTION: A module that fetches user data from an API and returns the user name using promises. It depends on an external request module to make the API call.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/TutorialAsync.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport request from './request';\n\nexport function getUserName(userID) {\n  return request(`/users/${userID}`).then(user => user.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating CLI Options with validateCLIOptions in JavaScript\nDESCRIPTION: Demonstrates validating command-line arguments (`argv`) using the `validateCLIOptions` function from `jest-validate`. It checks the provided arguments against a configuration object containing allowed options and deprecated options mapping.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate} from 'jest-validate';\n\nvalidateCLIOptions(argv, {...allowedOptions, deprecatedOptions});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Volume Class in JavaScript\nDESCRIPTION: Defines a simple `Volume` class in JavaScript with `amount` and `unit` properties, a `toString` method, and an `equals` method for comparing volume instances, potentially with different units ('L' and 'mL'). This class is used to demonstrate custom equality testers.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.5/ExpectAPI.md#2025-04-23_snippet_51\n\nLANGUAGE: js\nCODE:\n```\n// For simplicity in this example, we'll just support the units 'L' and 'mL'\nexport class Volume {\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString() {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other) {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.unit; // Note: Original code has a potential typo here (other.unit instead of other.amount)\n    } else {\n      return this.amount === other.unit * 1000; // Note: Original code has a potential typo here (other.unit instead of other.amount)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Jest Hook for Test Suite Selection in JavaScript\nDESCRIPTION: Example of using the shouldRunTestSuite hook to selectively run test suites based on a condition.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/WatchPlugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return testSuiteInfo.testPath.includes('my-keyword');\n    });\n\n    // or a promise\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a simple JavaScript function for testing\nDESCRIPTION: Example of a simple sum function to be tested with Jest.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n----------------------------------------\n\nTITLE: Fixing toHaveBeenCalledWith Behavior in Jest (JavaScript)\nDESCRIPTION: Jest 16.0.2 fixed an issue where the `.toHaveBeenCalledWith()` matcher did not work correctly when called without any arguments. This ensures that `expect(mockFn).toHaveBeenCalledWith()` correctly asserts the mock was called with zero arguments.\nSOURCE: https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntoHaveBeenCalledWith()\n```\n\n----------------------------------------\n\nTITLE: Example Warning Output from jest-validate\nDESCRIPTION: Displays a sample warning message generated by `jest-validate` when an unknown configuration option (`transformx`) is detected. The output includes the warning type, the problematic option and its value, a suggestion for fixing it, and any custom comment provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n● Validation Warning:\n\n  Unknown option transformx with value \"<rootDir>/node_modules/babel-jest\" was found.\n  This is either a typing error or a user mistake. Fixing it will remove this message.\n\n  Documentation: http://custom-docs.com\n```\n\n----------------------------------------\n\nTITLE: Defining Jest Transformer API (TypeScript)\nDESCRIPTION: TypeScript interface definitions outlining the structure and methods required for custom Jest transformers. Includes interfaces for transform options (`TransformOptions`), transformed source output (`TransformedSource`), synchronous (`SyncTransformer`) and asynchronous (`AsyncTransformer`) transformers, and transformer factories (`TransformerFactory`). Details parameters like source text, path, options (including ESM/CJS support flags, config, cacheFS), and expected return types for processing (`process`/`processAsync`) and cache key generation (`getCacheKey`/`getCacheKeyAsync`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CodeTransformation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransformOptions<TransformerConfig = unknown> {\n  supportsDynamicImport: boolean;\n  supportsExportNamespaceFrom: boolean;\n  /**\n   * The value is:\n   * - `false` if Jest runs without Node ESM flag `--experimental-vm-modules`\n   * - `true` if the file extension is defined in [extensionsToTreatAsEsm](Configuration.md#extensionstotreatasesm-arraystring)\n   * and Jest runs with Node ESM flag `--experimental-vm-modules`\n   *\n   * See more at https://jestjs.io/docs/next/ecmascript-modules\n   */\n  supportsStaticESM: boolean;\n  supportsTopLevelAwait: boolean;\n  instrument: boolean;\n  /** Cached file system which is used by `jest-runtime` to improve performance. */\n  cacheFS: Map<string, string>;\n  /** Jest configuration of currently running project. */\n  config: ProjectConfig;\n  /** Stringified version of the `config` - useful in cache busting. */\n  configString: string;\n  /** Transformer configuration passed through `transform` option by the user. */\n  transformerConfig: TransformerConfig;\n}\n\ntype TransformedSource = {\n  code: string;\n  map?: RawSourceMap | string | null;\n};\n\ninterface SyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ninterface AsyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ntype Transformer<TransformerConfig = unknown> =\n  | SyncTransformer<TransformerConfig>\n  | AsyncTransformer<TransformerConfig>;\n\ntype TransformerCreator<\n  X extends Transformer<TransformerConfig>,\n  TransformerConfig = unknown,\n> = (transformerConfig?: TransformerConfig) => X;\n\ntype TransformerFactory<X extends Transformer> = {\n  createTransformer: TransformerCreator<X>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining splitLines0 for Empty String Edge Case (JS)\nDESCRIPTION: Provides the implementation of a helper function `splitLines0`. This function addresses the edge case where `''.split('\\n')` results in `['']`. `splitLines0` returns an empty array `[]` when the input string is empty, otherwise it returns the result of `string.split('\\n')`. This behavior is useful for consistency in certain diffing scenarios, although `diffLinesUnified` handles this internally.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport const splitLines0 = string =>\n  string.length === 0 ? [] : string.split('\\n');\n```\n\n----------------------------------------\n\nTITLE: Example Test File Structure for Jest (Bash)\nDESCRIPTION: This snippet illustrates a typical directory structure for Jest tests. It shows a `__tests__` directory containing two JavaScript test files (`t1.test.js` and `t2.test.js`). This structure is used as context for demonstrating the `--runTestsByPath` CLI option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.6/CLI.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n__tests__\n└── t1.test.js # test\n└── t2.test.js # test\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest 26 for Node Environment and Circus Runner (JSON)\nDESCRIPTION: JSON configuration snippet for Jest 26. It sets the test environment to `node` and the test runner to `jest-circus/runner`. This configuration aligns with the planned defaults for Jest 27 and can be used by projects that do not require a DOM environment (like `jsdom`).\nSOURCE: https://github.com/jestjs/jest/blob/main/website/blog/2020-05-05-jest-26.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"testEnvironment\": \"node\",\n    \"testRunner\": \"jest-circus/runner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Matcher Documentation\nDESCRIPTION: Shows how to reference the custom matcher documentation in Jest, specifically the this.equals method that should be used in custom matchers instead of directly using the @jest/expect-utils package.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/expect-utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[custom matcher](https://jestjs.io/docs/expect#expectextendmatchers)\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers in Jest (JavaScript)\nDESCRIPTION: Shows how to enable Jest's legacy fake timers system by passing the legacyFakeTimers: true configuration flag to jest.useFakeTimers(). This is required when compatibility with older Jest timer behavior is necessary. The snippet assumes additional configuration options will not be supported and demonstrates the minimal required code. Input is an options object with legacyFakeTimers. Output is a Jest environment using legacy timer mocks.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/JestObjectAPI.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\njest.useFakeTimers({\n  legacyFakeTimers: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Jest Unit Tests for ArcanistConfigurationDrivenUnitTestEngine - JSON\nDESCRIPTION: This JSON snippet defines a Jest test entry in the .arcunit configuration for use with ArcanistConfigurationDrivenUnitTestEngine. It specifies the test type as 'jest' and instructs the engine to include all files with a .js extension for test execution. This enables tighter control over which files trigger Jest runs.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-phabricator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"jest\\\": {\\n  \\\"type\\\": \\\"jest\\\",\\n  \\\"include\\\": \\\"(\\\\.js$)\\\"\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Jest Watch Menu Display (Text)\nDESCRIPTION: This text block represents the interface output of Jest's watch mode, displaying built-in and custom plugin key prompts. It acts as a reference for users to understand where their plugin prompt appears and how it coexists alongside core Jest menu options. No code execution takes place; the snippet is purely for user guidance.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/WatchPlugins.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nWatch Usage\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a test name regex pattern.\n › Press q to quit watch mode.\n › Press s to do something. // <-- This is our plugin\n › Press Enter to trigger a test run.\n```\n\n----------------------------------------\n\nTITLE: Integrating babel-plugin-jest-hoist using Node.js API\nDESCRIPTION: Example of programmatically transforming code using the Babel Core API with the jest-hoist plugin in a Node.js environment.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/babel-plugin-jest-hoist/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform('code', {\n  plugins: ['jest-hoist'],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Fake Timers Globally in Jest (JavaScript/TypeScript)\nDESCRIPTION: Shows how to enable the legacy implementation of fake timers globally for all tests in the Jest configuration. This is done by setting both `enableGlobally` and `legacyFakeTimers` properties to `true` within the `fakeTimers` object.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/Configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nmodule.exports = config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Test Directory Structure for Jest\nDESCRIPTION: Illustrates a sample directory structure containing two Jest test files (`t1.test.js`, `t2.test.js`) within a `__tests__` directory. This structure serves as context for explaining the behavior of the `--runTestsByPath` CLI option.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.7/CLI.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n__tests__\n└── t1.test.js # test\n└── t2.test.js # test\n```\n\n----------------------------------------\n\nTITLE: Installing jest-circus via Yarn (Bash)\nDESCRIPTION: Command to install jest-circus as a development dependency using Yarn package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-circus/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev jest-circus\n```\n\n----------------------------------------\n\nTITLE: Diff Output Without Annotation Header Lines (Diff)\nDESCRIPTION: Shows the resulting diff output when `omitAnnotationLines` is set to true. Only the comparison lines (common, deleted, added) are displayed, without the usual header.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n  common\n- changed from\n+ changed to\n```\n\n----------------------------------------\n\nTITLE: Installing Jest using npm\nDESCRIPTION: Command to install Jest as a dev dependency using npm package manager.\nSOURCE: https://github.com/jestjs/jest/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest\n```\n\n----------------------------------------\n\nTITLE: Publishing a Pre-Release Jest Version using Lerna-Lite (Shell)\nDESCRIPTION: Executes the `lerna-lite` publish command via yarn to publish a specific pre-release version (e.g., `30.0.0-alpha.5`). It uses flags `--preid` to set the pre-release identifier (like 'alpha'), `--pre-dist-tag` and `--dist-tag` to set the npm distribution tag to 'next'. Requires `yarn`, `lerna-lite`, and the specific `version-number` to be provided.\nSOURCE: https://github.com/jestjs/jest/blob/main/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lerna publish *version-number* --preid alpha --pre-dist-tag next --dist-tag next\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn (Bash)\nDESCRIPTION: Installs all necessary project dependencies using Yarn. This command should be run in the root directory the first time setting up the project. Requires Node >=14.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Replacing Trailing Spaces with Middle Dots (JS)\nDESCRIPTION: Provides an alternative approach to highlighting trailing spaces. Instead of coloring, this example defines a function `replaceSpacesWithMiddleDot` and assigns it to the `changeLineTrailingSpaceColor` and `commonLineTrailingSpaceColor` options. This causes trailing spaces in both changed and common lines to be replaced with '·' characters in the output.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst replaceSpacesWithMiddleDot = string => '·'.repeat(string.length);\n\nconst options = {\n  changeLineTrailingSpaceColor: replaceSpacesWithMiddleDot,\n  commonLineTrailingSpaceColor: replaceSpacesWithMiddleDot,\n};\n```\n\n----------------------------------------\n\nTITLE: Example Console Warnings from Incorrect Mocking (Bash)\nDESCRIPTION: Shows typical warning messages output to the console when using a simple string mock (like `'SomeComponent'`) with Enzyme and React 16+. React warns about using uppercase HTML tags or unrecognized tags because the mock doesn't resolve to a valid element type.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/TutorialReact.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.\n\n# Or:\nWarning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\n----------------------------------------\n\nTITLE: Example Output for Failing Custom 'toBe' Matcher (Bash)\nDESCRIPTION: This shows the formatted console output generated by the custom `toBe` matcher (implemented in the previous JavaScript snippet) when an assertion fails. It clearly indicates the expected and received values, utilizing the formatting provided by `this.utils`.\nSOURCE: https://github.com/jestjs/jest/blob/main/website/versioned_docs/version-29.4/ExpectAPI.md#2025-04-23_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n  expect(received).toBe(expected)\n\n    Expected value to be (using Object.is):\n      \"banana\"\n    Received:\n      \"apple\"\n```\n```\n\n----------------------------------------\n\nTITLE: Example CLI Deprecation Error Output from jest-validate\nDESCRIPTION: Displays the console error output when `validateCLIOptions` encounters a deprecated CLI option (`collectCoverageOnlyFrom`) that is not listed in the allowed options. The message specifies the deprecated option and its replacement, along with a documentation link.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n● collectCoverageOnlyFrom:\n\n  Option \"collectCoverageOnlyFrom\" was replaced by \"collectCoverageFrom\"\n\n  CLI Options Documentation: https://jestjs.io/docs/en/cli.html\n```\n\n----------------------------------------\n\nTITLE: Formatted Diff Output for String Comparison (Diff)\nDESCRIPTION: Shows a potential formatted output for the `diffLinesRaw` result obtained when comparing 'non-empty string' and an empty string. It uses standard diff indicators ('-' for deletions, '+' for additions) and includes headers indicating expected (-1) and received (+1) line counts.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-diff/README.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- Expected  - 1\n+ Received  + 1\n\n- non-empty string\n+\n```\n\n----------------------------------------\n\nTITLE: Example Jest Output: Test Passed (Plaintext)\nDESCRIPTION: Represents the typical console output from Jest when a specific test file (`__tests__/t1.test.js`) is executed successfully. This output corresponds to running the command `jest --runTestsByPath __tests__/t1.test.js`, indicating that the specified test file was found and all tests within it passed.\nSOURCE: https://github.com/jestjs/jest/blob/main/docs/CLI.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nPASS __tests__/t1.test.js\n```\n\n----------------------------------------\n\nTITLE: Implementing JestUnitTestEngine for Phabricator - PHP\nDESCRIPTION: This PHP class provides a full implementation of a custom ArcanistUnitTestEngine for running Jest tests from within Phabricator's build pipeline. It configures Jest command execution, gathers and parses coverage reports, batches related source files, and overrides test reporting logic to properly display results inline. Key dependencies include various Phabricator/Arcanist classes (such as ExecFuture, ArcanistUnitTestResult, Filesystem, PhutilConsole), and the Jest CLI via node. Inputs include per-diff path lists; outputs are structured test results with optional coverage. The engine is sensitive to project size—skipping full test/coverage runs above user-defined thresholds—and requires the Jest processor/paths to be accurately set.\nSOURCE: https://github.com/jestjs/jest/blob/main/packages/jest-phabricator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class JestUnitTestEngine extends ArcanistUnitTestEngine {\\n  const PROCESSOR = 'jest/packages/jest-phabricator/build/index.js';\\n  const JEST_PATH = 'jest/packages/jest/bin/jest.js';\\n  const TOO_MANY_FILES_TO_COVER = 100;\\n  const GIGANTIC_DIFF_THRESHOLD = 200;\\n\\n  public function getEngineConfigurationName() {\\n    return 'jest';\\n  }\\n\\n  private function getRoot() {\\n    return $this->getWorkingCopy()->getProjectRoot();\\n  }\\n\\n  private function getOutputJSON() {\\n    return $this->getRoot() . '/output.json';\\n  }\\n\\n  private function getFutureResults($future) {\\n    list($stdout, $stderr) = $future->resolvex();\\n    $output_JSON = $this->getOutputJSON();\\n    $report_path_exists = file_exists($output_JSON);\\n    $raw_results = null;\\n\\n    if ($report_path_exists) {\\n      $raw_results = json_decode(\\n        Filesystem::readFile($output_JSON),\\n        true\\n      )['coverageMap'];\\n      Filesystem::remove($output_JSON);\\n    } else {\\n      $raw_results = json_decode($stdout, true);\\n    }\\n\\n    if (!is_array($raw_results)) {\\n      throw new Exception(\\\"Unit test script emitted invalid JSON: {$stdout}\\\");\\n    }\\n\\n    $results = array();\\n    foreach ($raw_results as $result) {\\n      $test_result = new ArcanistUnitTestResult();\\n      $test_result->setName($result['name']);\\n      $succeed = isset($result['status']) && $result['status'] == 'passed';\\n      $test_result->setResult(\\n        $succeed ?\\n        ArcanistUnitTestResult::RESULT_PASS :\\n        ArcanistUnitTestResult::RESULT_FAIL\\n      );\\n\\n      if (isset($result['coverage'])) {\\n        $coverage = array();\\n        $root = $this->getRoot() . '/';\\n        foreach ($result['coverage'] as $file_path => $coverage_data) {\\n          if (substr($file_path, 0, strlen($root)) == $root) {\\n            $file_path = substr($file_path, strlen($root));\\n          }\\n          $coverage[$file_path] = $coverage_data;\\n       }\\n       $test_result->setCoverage($coverage);\\n     }\\n     $test_result->setUserData($result['message']);\\n     $results[] = $test_result;\\n   }\\n\\n    return $results;\\n  }\\n\\n  private function runCommands($commands) {\\n    $futures = array();\\n    foreach ($commands as $command) {\\n      $bin = $command['bin'];\\n      $options = implode(' ', $command['options']);\\n      $paths = $command['paths'];\\n      $futures[] = new ExecFuture(\\\"{$bin} {$options} %Ls\\\", $paths);\\n    }\\n\\n    $console = PhutilConsole::getConsole();\\n\\n    // Pass stderr through so we can give the user updates on test\\n    // status as tests run.\\n    $completed = array();\\n    $iterator = new FutureIterator($futures);\\n    foreach ($iterator->setUpdateInterval(0.2) as $_) {\\n      foreach ($futures as $key => $future) {\\n        if (isset($completed[$key])) {\\n          continue;\\n        }\\n        if ($future->isReady()) {\\n          $completed[$key] = true;\\n        }\\n        list(, $stderr) = $future->read();\\n        $console->writeErr('%s', $stderr);\\n        break;\\n      }\\n    }\\n    // Finish printing output for remaining futures\\n    foreach ($futures as $key => $future) {\\n      if (!isset($completed[$key])) {\\n        list(, $stderr) = $future->read();\\n        $console->writeErr('%s', $stderr);\\n      }\\n    }\\n    $results = array();\\n    foreach ($futures as $future) {\\n      $results[] = $this->getFutureResults($future);\\n    }\\n\\n    if (empty($results)) {\\n      return array();\\n    }\\n    return call_user_func_array('array_merge', $results);\\n  }\\n\\n  private function runJSTests() {\\n    $console = PhutilConsole::getConsole();\\n    $root = $this->getRoot();\\n\\n    $result_arrays = [];\\n    $paths = $this->getPaths();\\n    $jest_paths = array();\\n    foreach ($paths as $path) {\\n      $ext = idx(pathinfo($path), 'extension');\\n      if ($ext === 'js' || $ext === 'json') {\\n        // Filter deleted modules because Jest can't do anything with them.\\n        if (file_exists(\\\"$root/$path\\\")) {\\n          $jest_paths[] = \\\"$root/$path\\\";\\n        }\\n      }\\n    }\\n\\n    $commands = [];\\n    if (count($jest_paths) > self::GIGANTIC_DIFF_THRESHOLD) {\\n      $console->writeOut(\\\"Too many files, skipping JavaScript tests.\\\\n\\\");\\n      $result_arrays[] = array();\\n    } else {\\n      if (count($jest_paths) > 0) {\\n        $console->writeOut(\\\"Running JavaScript tests.\\\\n\\\");\\n        $commands[] = array(\\n          'bin' => self::JEST_PATH,\\n          'options' => $this->getJestOptions($jest_paths),\\n          'paths' => $jest_paths,\\n        );\\n      }\\n\\n      try {\\n        $result_arrays[] = $this->runCommands($commands);\\n      } catch (Exception $e) {\\n        // Ignore the exception in case of failing tests\\n        // As Jest should have already printed the results.\\n        $result = new ArcanistUnitTestResult();\\n        $result->setName('JavaScript tests');\\n        $result->setResult(ArcanistUnitTestResult::RESULT_FAIL);\\n        $result->setDuration(0);\\n        $result_arrays[] = array($result);\\n      }\\n    }\\n\\n    $console->writeOut(\\\"Finished tests.\\\\n\\\");\\n    // $console->writeErr(implode(', ', $result_arrays));\\n    return call_user_func_array('array_merge', $result_arrays);\\n  }\\n\\n  private function getJestOptions($paths) {\\n    $output_JSON = $this->getOutputJSON();\\n    $options = array(\\n      '--colors',\\n      '--json',\\n      '--passWithNoTests true',\\n      '--outputFile=' . $output_JSON,\\n      '--testResultsProcessor=' . self::PROCESSOR\\n    );\\n\\n    // Checks for the number of files to cover, in case it's too big skips coverage\\n    // A better solution would involve knowing what's the machine buffer size limit\\n    // for exec and check if the command can stay within it.\\n    if (count($paths) < self::TOO_MANY_FILES_TO_COVER) {\\n      $options[] = '--findRelatedTests ' . join(' ', $paths);\\n      $options[] = '--coverage';\\n      $options[] = '--collectCoverageFrom '. join(' ', $paths);\\n    }\\n\\n    return $options;\\n  }\\n\\n  /** @Override */\\n  public function run() {\\n    return self::runJSTests();\\n  }\\n}\\n\n```"
  }
]