[
  {
    "owner": "devcontainers",
    "repo": "devcontainers.github.io",
    "content": "TITLE: Example of Renamed Feature Metadata with legacyIds in devcontainer-feature.json (JSONC)\nDESCRIPTION: Shows an updated devcontainer-feature.json after renaming a Feature, including new id, incremented version, updated name, revised documentationURL, and a legacyIds array to ensure backward compatibility. No dependencies beyond standard devcontainer tooling; expected as a Feature descriptor. Key parameters include id (new), legacyIds (old ids), name, and version. The presence of legacyIds supports migration and user notification. Limitations: Placeholder values are used for brevity.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-outside-of-docker\",\n    \"version\": \"2.0.2\",\n    \"name\": \"Docker (Docker-outside-of-Docker)\",\n    \"documentationURL\": \"https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker\",\n    \"legacyIds\": [\n        \"docker-from-docker\"\n    ]\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Environment Variables from Feature Options (Bash)\nDESCRIPTION: This Bash snippet shows how the chosen and default options from the devcontainer configuration are emitted as environment variables (VERSION, PIP, OPTIMIZE). These are sourced by shell scripts for feature installation logic. No dependencies except a POSIX shell; expects variables exported by the build-time process. Inputs are taken from the emitted file; outputs are their assigned values. Limitations: Quoting may be necessary for more complex values (not shown).\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=\"3.10\"\nPIP=\"false\"\nOPTIMIZE=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Round Priority to Features (JavaScript)\nDESCRIPTION: This snippet illustrates how the orchestrating tool assigns `roundPriority` values to Features based on their position in the `overrideFeatureInstallOrder` array. This priority influences the installation order of Features during the dependency resolution process.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst roundPriority = {\n  \"foo\": 3,\n  \"bar\": 2,\n  \"baz\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Port Attributes for HTTP/HTTPS Forwarding\nDESCRIPTION: Configuration example for customizing port forwarding behavior, including protocol handling and browser actions when ports are automatically forwarded.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"portsAttributes\": {\n  \"3000\": {\n    \"label\": \"Web App\",\n    \"protocol\": \"https\",\n    \"onAutoForward\": \"openBrowser\",\n    \"requireLocalPort\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting property types for lifecycle scripts in devcontainer.json\nDESCRIPTION: This snippet explains the different formats (Array, String, Object) for properties like postCreateCommand, postStartCommand, postAttachCommand, initializeCommand, and runArgs. It highlights their usage contexts, such as direct execution or shell parsing, and illustrates examples demonstrating how each format affects command execution and output, including handling of arguments with spaces and parallel execution support.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": [\"echo\", \"Hello from container\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"echo Hello from container\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": {\"parallel\": [\"echo start\", \"echo end\"]}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [\"--device-cgroup-rule=my rule here\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"postAttachCommand\": \"echo foo='bar'\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"postAttachCommand\": [\"echo\", \"foo='bar'\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"postAttachCommand\": { \"server\": \"npm start\", \"db\": [\"mysql\", \"-u\", \"root\", \"-p\", \"my database\"] } }\n```\n\n----------------------------------------\n\nTITLE: Defining composeContainer in devcontainer.json Schema\nDESCRIPTION: Schema definition for configuring a development environment using Docker Compose. Specifies the Docker Compose file(s) (`dockerComposeFile`), the primary service to connect to (`service`), other services to manage (`runServices`), the workspace path within the container (`workspaceFolder`), the shutdown behavior (`shutdownAction` - defaults to stopping all compose services), and whether to override the service's command (`overrideCommand`).\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"composeContainer\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"dockerComposeFile\": {\n\t\t\t\"type\": [\n\t\t\t\t\"string\",\n\t\t\t\t\"array\"\n\t\t\t],\n\t\t\t\"description\": \"The name of the docker-compose file(s) used to start the services.\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"service\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The service you want to work on. This is considered the primary container for your dev environment which your editor will connect to.\"\n\t\t},\n\t\t\"runServices\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"description\": \"An array of services that should be started and stopped.\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"workspaceFolder\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The path of the workspace folder inside the container. This is typically the target path of a volume mount in the docker-compose.yml.\"\n\t\t},\n\t\t\"shutdownAction\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"enum\": [\n\t\t\t\t\"none\",\n\t\t\t\t\"stopCompose\"\n\t\t\t],\n\t\t\t\"description\": \"Action to take when the user disconnects from the primary container in their editor. The default is to stop all of the compose containers.\"\n\t\t},\n\t\t\"overrideCommand\": {\n\t\t\t\"type\": \"boolean\",\n            \"description\": \"Whether to override the command specified in the service definition. Defaults may vary by tool.\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining buildOptions in devcontainer.json Schema\nDESCRIPTION: Schema definition for Docker build options (`buildOptions`). This object includes properties for specifying the build target stage (`target`), build arguments (`args`), and images to use for caching (`cacheFrom`). `cacheFrom` can be a single string or an array of strings.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"buildOptions\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"target\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Target stage in a multi-stage build.\"\n\t\t},\n\t\t\"args\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"additionalProperties\": {\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"string\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"description\": \"Build arguments.\"\n\t\t},\n\t\t\"cacheFrom\": {\n\t\t\t\"type\": [\n\t\t\t\t\"string\",\n\t\t\t\t\"array\"\n\t\t\t],\n\t\t\t\"description\": \"The image to consider as a cache. Use an array to specify multiple images.\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining imageContainer in devcontainer.json Schema\nDESCRIPTION: Schema definition for configuring a container based on a pre-built Docker image. Requires the `image` property to specify the name or identifier of the Docker image to use.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"imageContainer\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"image\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The docker image that will be used to create the container.\"\n\t\t}\n\t},\n\t\"required\": [\n\t\t\"image\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing variables in devcontainer.json\nDESCRIPTION: This section details how environment variables can be referenced within devcontainer.json using the syntax ${variableName}, with support for host environment variables, container environment variables, workspace folder paths, and dev container identifiers. It emphasizes the use of default values and the importance of restarting clients to update environment changes.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Arguments - devcontainer.json - JSON\nDESCRIPTION: Demonstrates how to pass build-time arguments to a Dockerfile build using the `build.args` property in devcontainer.json. It shows setting a static value and referencing a local environment variable using the ${localEnv:VARIABLE_NAME} syntax.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"build\": { \"args\": { \"MYARG\": \"MYVALUE\", \"MYARGFROMENVVAR\": \"${localEnv:VARIABLE_NAME}\" } }\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Docker Compose Files - devcontainer.json - JSON\nDESCRIPTION: Demonstrates specifying multiple Docker Compose files using an array for the `dockerComposeFile` property. The order matters, as later files can override configurations from previous ones, commonly used for extending base configurations.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"dockerComposeFile\": [\"docker-compose.yml\", \"docker-compose.override.yml\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring Feature Options in devcontainer-feature.json (JSONC)\nDESCRIPTION: This JSONC snippet defines multiple Feature options, including types (string/boolean), valid values (enum), defaults, and descriptions within a devcontainer-feature.json file. Dependencies: Used by the devcontainer tooling to present option choices to users and emit defaults. Key parameters include option names (version, pip, optimize), types, enums for validation, and descriptions for documentation. Expects inclusion inside the Feature's main JSON configuration. Limitations: JSONC allows comments, but tools consuming may require standard JSON.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n// ...\n\"options\": {\n    \"version\": {\n        \"type\": \"string\",\n        \"enum\": [\"latest\", \"3.10\", \"3.9\", \"3.8\", \"3.7\", \"3.6\"],\n        \"default\": \"latest\",\n        \"description\": \"Select a Python version to install.\"\n    },\n    \"pip\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Installs pip\"\n    },\n    \"optimize\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Optimize python installation\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Feature Installer Script (Bash)\nDESCRIPTION: Demonstrates a typical Bash entrypoint (install.sh) that echoes option-derived environment variables for debug or install logic in a Feature. No external dependencies; expects the variables $VERSION, $PIP, and $OPTIMIZE to be present in the environment. The script outputs human-readable information. Limitations: Designed for demonstration and does not include error handling or installation tasks.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\necho \"Version is $VERSION\"\necho \"Pip? $PIP\"\necho \"Optimize? $OPTIMIZE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Dependencies with dependsOn - JSON\nDESCRIPTION: This snippet demonstrates how to declare dependencies for a Feature using the `dependsOn` property in `devcontainer-feature.json`.  It specifies that `myFeature` depends on `foo`, `bar`, and `baz`, with specific versions and options for `foo`. This ensures that these dependencies are installed before `myFeature`. The options for each dependency are defined within the dependency object. Each Feature listed in `dependsOn` must be installed before `myFeature`.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"My Feature\",\n    \"id\": \"myFeature\",\n    \"version\": \"1.0.0\",\n    \"dependsOn\": {\n        \"foo:1\": {\n            \"flag\": true\n        },\n        \"bar:1.2.3\": {},\n        \"baz@sha256:a4cdc44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool-specific Properties with Dev Container JSON - JSON\nDESCRIPTION: This snippet demonstrates how to add tool-specific namespaces within the \"customizations\" property in devcontainer.json, such as configuring VS Code specific settings. To use, include the \"customizations\" object at the root of your devcontainer.json file; dependencies include a devcontainer.json-compatible tooling ecosystem such as VS Code Dev Containers or other supporting implementations. The key parameter is the name of the tool (e.g., \"vscode\"), where you define tool-specific configuration like default settings in the container. Input is a JSON object structure; no output is produced, but the container setup will apply these customizations when created. Only known tools should be added as namespaces to avoid conflicts.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/contributing.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {}\n      // Additional VS Code specific properties...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Lifecycle Scripts in Dev Containers using JSON\nDESCRIPTION: Example demonstrating how to configure parallel execution of lifecycle scripts in a dev container. The configuration uses an object structure where each key represents a uniquely named command and values can be strings or arrays. All commands will run in parallel during their respective lifecycle step.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/spec.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postCreateCommand\": {\n    \"server\": \"npm start\",\n    \"db\": [\"mysql\", \"-u\", \"root\", \"-p\", \"my database\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Requirements\nDESCRIPTION: Example showing detailed GPU resource requirements configuration, including cores and memory. This can be used to ensure proper GPU allocation for the container.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"hostRequirements\": {\n  \"gpu\": { \n    \"cores\": 1000, \n    \"storage\": \"32gb\" \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OCI Manifest Example with dev.containers.metadata Annotation - JSON\nDESCRIPTION: Illustrates a complete OCI manifest JSON structure as published to an OCI registry for a Dev Container Feature. Demonstrates the use of the 'dev.containers.metadata' annotation populated with an escaped JSON string representing all required feature metadata. Includes fields for schemaVersion, mediaType, config, layers (with custom media type and title annotation), and manifest-level annotations. Intended as a reference for developers of distributing tools, demonstrates proper structure for OCI-compliant publication.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features-distribution.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.devcontainers\",\n    \"digest\": \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    \"size\": 0\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.devcontainers.layer.v1+tar\",\n      \"digest\": \"sha256:738af5504b253dc6de51d2cb1556cdb7ce70ab18b2f32b0c2f12650ed6d2e4bc\",\n      \"size\": 3584,\n      \"annotations\": {\n        \"org.opencontainers.image.title\": \"devcontainer-feature-myFeature.tgz\"\n      }\n    }\n  ],\n  \"annotations\": {\n    \"dev.containers.metadata\": \"{\\\"name\\\": \\\"My Feature\\\",\\\"id\\\": \\\"myFeature\\\",\\\"version\\\": \\\"1.0.0\\\",\\\"dependsOn\\\": {\\\"ghcr.io/myotherFeature:1\\\": {\\\"flag\\\": true},\\\"features.azurecr.io/aThirdFeature:1\\\": {},\\\"features.azurecr.io/aFourthFeature:1.2.3\\\": {}}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PATH in Dev Container Feature Configuration - Bash\nDESCRIPTION: Demonstrates how to modify the PATH environment variable in a devcontainer-feature.json to include a custom tool directory. This ensures that executables in '/usr/local/myTool/bin' are prioritized in the container environment. It relies on the 'containerEnv' property to redefine environment variables within the container.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-06-14-feature-authoring-best-practices.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"containerEnv\": {\n    \"PATH\": \"/usr/local/myTool/bin:${PATH}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hostRequirements in devcontainer.json Schema\nDESCRIPTION: Schema definition for the `hostRequirements` property. This object allows specifying minimum hardware requirements for the host machine, including CPUs, memory (RAM), storage, and GPU (including optional or detailed configurations). Memory and storage values support units like gb, mb, kb.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"hostRequirements\": {\n\t\"type\": \"object\",\n\t\"description\": \"Host hardware requirements.\",\n\t\"allOf\": [\n\t\t{\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"cpus\": {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"minimum\": 1,\n\t\t\t\t\t\"description\": \"Number of required CPUs.\"\n\t\t\t\t},\n\t\t\t\t\"memory\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"pattern\": \"^\\\\d+([tgmk]b)?$\",\n\t\t\t\t\t\"description\": \"Amount of required RAM in bytes. Supports units tb, gb, mb and kb.\"\n\t\t\t\t},\n\t\t\t\t\"storage\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"pattern\": \"^\\\\d+([tgmk]b)?$\",\n\t\t\t\t\t\"description\": \"Amount of required disk space in bytes. Supports units tb, gb, mb and kb.\"\n\t\t\t\t},\n\t\t\t\t\"gpu\": {\n\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\t\t\"boolean\",\n\t\t\t\t\t\t\t\t\"string\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\"optional\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"description\": \"Indicates whether a GPU is required. The string \\\"optional\\\" indicates that a GPU is optional. An object value can be used to configure more detailed requirements.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"cores\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\t\t\t\t\"minimum\": 1,\n\t\t\t\t\t\t\t\t\t\"description\": \"Number of required cores.\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"memory\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"pattern\": \"^\\\\d+([tgmk]b)?$\",\n\t\t\t\t\t\t\t\t\t\"description\": \"Amount of required RAM in bytes. Supports units tb, gb, mb and kb.\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"description\": \"Indicates whether a GPU is required. The string \\\"optional\\\" indicates that a GPU is optional. An object value can be used to configure more detailed requirements.\",\n\t\t\t\t\t\t\t\"additionalProperties\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining waitFor in devcontainer.json Schema\nDESCRIPTION: Schema definition for the `waitFor` property. This property specifies which lifecycle command (e.g., `initializeCommand`, `postCreateCommand`) the system should wait for before continuing background execution during UI startup. Defaults to `updateContentCommand`.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"waitFor\": {\n\t\"type\": \"string\",\n\t\"enum\": [\n\t\t\"initializeCommand\",\n\t\t\"onCreateCommand\",\n\t\t\"updateContentCommand\",\n\t\t\"postCreateCommand\",\n\t\t\"postStartCommand\"\n\t],\n\t\"description\": \"The user command to wait for before continuing execution in the background while the UI is starting up. The default is \\\"updateContentCommand\\\".\"\n}\n```\n\n----------------------------------------\n\nTITLE: Base Schema Definition for Dev Containers in JSON\nDESCRIPTION: This JSON schema defines the structure and properties of a dev container configuration. It includes definitions for container naming, feature management, port forwarding, command execution during container lifecycle, and user settings. The schema serves as the foundation for validating dev container configuration files.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\t\"description\": \"Defines a dev container\",\n\t\"allowComments\": true,\n\t\"allowTrailingCommas\": false,\n\t\"definitions\": {\n\t\t\"devContainerCommon\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"A name for the dev container which can be displayed to the user.\"\n\t\t\t\t},\n\t\t\t\t\"features\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"description\": \"Features to add to the dev container.\",\n\t\t\t\t\t\"additionalProperties\": true\n\t\t\t\t},\n\t\t\t\t\"overrideFeatureInstallOrder\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"description\": \"Array consisting of the Feature id (without the semantic version) of Features in the order the user wants them to be installed.\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"forwardPorts\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"description\": \"Ports that are forwarded from the container to the local machine. Can be an integer port number, or a string of the format \\\"host:port_number\\\".\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"oneOf\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\t\t\t\"maximum\": 65535,\n\t\t\t\t\t\t\t\t\"minimum\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"pattern\": \"^([a-z0-9-]+):(\\\\d{1,5})$\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"portsAttributes\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"patternProperties\": {\n\t\t\t\t\t\t\"(^\\\\d+(-\\\\d+)?$)|(.+)\": {\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"description\": \"A port, range of ports (ex. \\\"40000-55000\\\"), or regular expression (ex. \\\".+\\\\\\\\/server.js\\\").  For a port number or range, the attributes will apply to that port number or range of port numbers. Attributes which use a regular expression will apply to ports whose associated process command line matches the expression.\",\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"onAutoForward\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\t\"notify\",\n\t\t\t\t\t\t\t\t\t\t\"openBrowser\",\n\t\t\t\t\t\t\t\t\t\t\"openBrowserOnce\",\n\t\t\t\t\t\t\t\t\t\t\"openPreview\",\n\t\t\t\t\t\t\t\t\t\t\"silent\",\n\t\t\t\t\t\t\t\t\t\t\"ignore\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"enumDescriptions\": [\n\t\t\t\t\t\t\t\t\t\t\"Shows a notification when a port is automatically forwarded.\",\n\t\t\t\t\t\t\t\t\t\t\"Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser.\",\n\t\t\t\t\t\t\t\t\t\t\"Opens the browser when the port is automatically forwarded, but only the first time the port is forward during a session. Depending on your settings, this could open an embedded browser.\",\n\t\t\t\t\t\t\t\t\t\t\"Opens a preview in the same window when the port is automatically forwarded.\",\n\t\t\t\t\t\t\t\t\t\t\"Shows no notification and takes no action when this port is automatically forwarded.\",\n\t\t\t\t\t\t\t\t\t\t\"This port will not be automatically forwarded.\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"description\": \"Defines the action that occurs when the port is discovered for automatic forwarding\",\n\t\t\t\t\t\t\t\t\t\"default\": \"notify\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"elevateIfNeeded\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\t\t\t\t\"description\": \"Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port.\",\n\t\t\t\t\t\t\t\t\t\"default\": false\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"label\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"description\": \"Label that will be shown in the UI for this port.\",\n\t\t\t\t\t\t\t\t\t\"default\": \"Application\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"requireLocalPort\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\t\t\t\t\"markdownDescription\": \"When true, a modal dialog will show if the chosen local port isn't used for forwarding.\",\n\t\t\t\t\t\t\t\t\t\"default\": false\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"protocol\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\t\t\"http\",\n\t\t\t\t\t\t\t\t\t\t\"https\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"description\": \"The protocol to use when forwarding this port.\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"default\": {\n\t\t\t\t\t\t\t\t\"label\": \"Application\",\n\t\t\t\t\t\t\t\t\"onAutoForward\": \"notify\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"markdownDescription\": \"Set default properties that are applied when a specific port number is forwarded. For example:\\n\\n```\\n\\\"3000\\\": {\\n  \\\"label\\\": \\\"Application\\\"\\n},\\n\\\"40000-55000\\\": {\\n  \\\"onAutoForward\\\": \\\"ignore\\\"\\n},\\n\\\".+\\\\\\\\/server.js\\\": {\\n \\\"onAutoForward\\\": \\\"openPreview\\\"\\n}\\n```\",\n\t\t\t\t\t\"defaultSnippets\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\"${1:3000}\": {\n\t\t\t\t\t\t\t\t\t\"label\": \"${2:Application}\",\n\t\t\t\t\t\t\t\t\t\"onAutoForward\": \"notify\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"additionalProperties\": false\n\t\t\t\t},\n\t\t\t\t\"otherPortsAttributes\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"onAutoForward\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"notify\",\n\t\t\t\t\t\t\t\t\"openBrowser\",\n\t\t\t\t\t\t\t\t\"openPreview\",\n\t\t\t\t\t\t\t\t\"silent\",\n\t\t\t\t\t\t\t\t\"ignore\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"enumDescriptions\": [\n\t\t\t\t\t\t\t\t\"Shows a notification when a port is automatically forwarded.\",\n\t\t\t\t\t\t\t\t\"Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser.\",\n\t\t\t\t\t\t\t\t\"Opens a preview in the same window when the port is automatically forwarded.\",\n\t\t\t\t\t\t\t\t\"Shows no notification and takes no action when this port is automatically forwarded.\",\n\t\t\t\t\t\t\t\t\"This port will not be automatically forwarded.\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"description\": \"Defines the action that occurs when the port is discovered for automatic forwarding\",\n\t\t\t\t\t\t\t\"default\": \"notify\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"elevateIfNeeded\": {\n\t\t\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\t\t\"description\": \"Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port.\",\n\t\t\t\t\t\t\t\"default\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"label\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"Label that will be shown in the UI for this port.\",\n\t\t\t\t\t\t\t\"default\": \"Application\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"requireLocalPort\": {\n\t\t\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\t\t\"markdownDescription\": \"When true, a modal dialog will show if the chosen local port isn't used for forwarding.\",\n\t\t\t\t\t\t\t\"default\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"protocol\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"enum\": [\n\t\t\t\t\t\t\t\t\"http\",\n\t\t\t\t\t\t\t\t\"https\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"description\": \"The protocol to use when forwarding this port.\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"defaultSnippets\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\"onAutoForward\": \"ignore\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"markdownDescription\": \"Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:\\n\\n```\\n{\\n  \\\"onAutoForward\\\": \\\"ignore\\\"\\n}\\n```\",\n\t\t\t\t\t\"additionalProperties\": false\n\t\t\t\t},\n\t\t\t\t\"updateRemoteUserUID\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"description\": \"Controls whether on Linux the container's user should be updated with the local user's UID and GID. On by default when opening from a local folder.\"\n\t\t\t\t},\n\t\t\t\t\"remoteEnv\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\"null\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": \"Remote environment variables to set for processes spawned in the container including lifecycle scripts and any remote editor/IDE server process.\"\n\t\t\t\t},\n\t\t\t\t\"remoteUser\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"The username to use for spawning processes in the container including lifecycle scripts and any remote editor/IDE server process. The default is the same user as the container.\"\n\t\t\t\t},\n\t\t\t\t\"initializeCommand\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\"array\"\n\t\t\t\t\t],\n\t\t\t\t\t\"description\": \"A command string or list of command arguments to run on the host machine during initialization, including during container creation and on subsequent starts.  The command may run more than once during a given session. This command is run before \\\"onCreateCommand\\\". If this is a single string, it will be run in a shell. If this is an array of strings, it will be run as a single command without shell.\",\n\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onCreateCommand\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\"array\",\n\t\t\t\t\t\t\"object\"\n\t\t\t\t\t],\n\t\t\t\t\t\"description\": \"A command to run when creating the container. This command is run after \\\"initializeCommand\\\" and before \\\"updateContentCommand\\\". If this is a single string, it will be run in a shell. If this is an array of strings, it will be run as a single command without shell.\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\"array\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"updateContentCommand\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\"array\",\n\t\t\t\t\t\t\"object\"\n\t\t\t\t\t],\n\t\t\t\t\t\"description\": \"A command to run when creating the container and rerun when the workspace content was updated while creating the container. This command is run after \\\"onCreateCommand\\\" and before \\\"postCreateCommand\\\". If this is a single string, it will be run in a shell. If this is an array of strings, it will be run as a single command without shell.\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\"array\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"postCreateCommand\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\"array\",\n\t\t\t\t\t\t\"object\"\n\t\t\t\t\t],\n\t\t\t\t\t\"description\": \"A command to run after creating the container. This command is run after \\\"updateContentCommand\\\" and before \\\"postStartCommand\\\". If this is a single string, it will be run in a shell. If this is an array of strings, it will be run as a single command without shell.\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\"array\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"postStartCommand\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\"array\",\n\t\t\t\t\t\t\"object\"\n\t\t\t\t\t],\n```\n\n----------------------------------------\n\nTITLE: Example of Original Feature Metadata in devcontainer-feature.json (JSONC)\nDESCRIPTION: Illustrates the existing metadata structure for a Feature in devcontainer-feature.json, including id, version, name, and documentationURL. Dependencies: Used by development environments and tooling to identify, version, and document the Feature. Key fields are typically required, and the format enables easy renaming/updating of Feature records. Limitations: JSONC allows comments and elided values (e.g., ....) for brevity only.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-from-docker\",\n    \"version\": \"2.0.1\",\n    \"name\": \"Docker (Docker-from-Docker)\",\n    \"documentationURL\": \"https://github.com/devcontainers/features/tree/main/src/docker-from-docker\",\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scripts from Source Tree\nDESCRIPTION: Example demonstrating how to execute a shell script from your source code tree as part of the container lifecycle. Scripts run after source code is mounted.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"postStartCommand\": \"bash scripts/install-dev-tools.sh\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Host Requirements for CPU and Memory\nDESCRIPTION: Configuration example showing how to define minimum host hardware requirements for the container, including CPU cores and memory allocation.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"hostRequirements\": {\n  \"cpus\": 2,\n  \"memory\": \"4gb\",\n  \"storage\": \"32gb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Features to OCI Registry using ORAS - Bash\nDESCRIPTION: Pushes Dev Container Feature tarballs to an OCI registry with multiple semver tags (major, minor, patch, latest) using the ORAS CLI. Requires oras CLI, previously packaged '.tgz' artifact, and environment variables: REGISTRY (e.g. 'ghcr.io'), NAMESPACE (e.g. 'devcontainers/features'), and FEATURE. Iterates over each desired version, uploading the artifact with correct media types. No authentication-handling is shown, assumes oras is already configured. Intended for demonstration; integrate similar logic into publishing pipelines.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features-distribution.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/features/go:1 \nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/features\nFEATURE=go\n\nARTIFACT_PATH=devcontainer-feature-go.tgz\n\nfor VERSION in 1  1.2  1.2.3  latest\ndo\n    oras push ${REGISTRY}/${NAMESPACE}/${FEATURE}:${VERSION} \\\n            --config /dev/null:application/vnd.devcontainers \\\n                             ./${ARTIFACT_PATH}:application/vnd.devcontainers.layer.v1+tar\ndone\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Options - devcontainer.json - JSON\nDESCRIPTION: Shows how to specify command-line options for the `docker build` command using the `build.options` array in devcontainer.json. The example demonstrates adding a host entry using the `--add-host` option.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"build\": { \"options\": [ \"--add-host=host.docker.internal:host-gateway\" ] }\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Testing Dev Container Features Matrixed by Base Image - YAML\nDESCRIPTION: Defines a GitHub Actions workflow that runs tests on multiple dev container Features against a matrix of base images using the 'devcontainer features test' CLI command. It checks out code, installs the devcontainer CLI, and executes tests for various feature and base image combinations, facilitating continuous integration validation across diverse environments.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-06-14-feature-authoring-best-practices.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Test Features matrixed with a set of base images\"\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    strategy:\n      matrix:\n        features: [\n            \"anaconda\",\n            \"aws-cli\",\n            \"azure-cli\",\n            # ...\n        ]\n        baseImage:\n          [\n            \"ubuntu:bionic\",\n            \"ubuntu:focal\",\n            \"ubuntu:jammy\",\n            \"debian:11\",\n            \"debian:12\",\n            \"mcr.microsoft.com/devcontainers/base:ubuntu\",\n            \"mcr.microsoft.com/devcontainers/base:debian\",\n          ]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: \"Install latest devcontainer CLI\"\n        run: npm install -g @devcontainers/cli\n        {% raw %}\n      - name: \"Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'\"\n        run: devcontainer features test  --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }}\n        {% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Detecting Platform and Supported OS Versions in Bash Install Script\nDESCRIPTION: Provides a Bash script snippet to detect the OS distribution by sourcing '/etc/os-release' and checking the version codename against a supported list. It exits with an error if the OS is unsupported. This helps ensure that the Feature installation scripts run only on compatible base images, improving reliability and user feedback.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-06-14-feature-authoring-best-practices.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Source /etc/os-release to get OS info\n# Looks something like:\n#     PRETTY_NAME=\"Debian GNU/Linux 11 (bullseye)\"\n#     NAME=\"Debian GNU/Linux\"\n#     VERSION_ID=\"11\"\n#     VERSION=\"11 (bullseye)\"\n#     VERSION_CODENAME=bullseye\n#     ID=debian\n#     HOME_URL=\"https://www.debian.org/\"\n#     SUPPORT_URL=\"https://www.debian.org/support\"\n#     BUG_REPORT_URL=\"https://bugs.debian.org/\"\n. /etc/os-release\n# Store host architecture\narchitecture=\"$(dpkg --print-architecture)\"\n\nDOCKER_MOBY_ARCHIVE_VERSION_CODENAMES=\"buster bullseye focal bionic xenial\"\nif [[ \"${DOCKER_MOBY_ARCHIVE_VERSION_CODENAMES}\" != *\"${VERSION_CODENAME}\"* ]]; then\n    print_error \"Unsupported  distribution version '${VERSION_CODENAME}'. To resolve, either: (1) set feature option '\\\"moby\\\": false' , or (2) choose a compatible OS distribution\"\n    print_error \"Supported distributions include:  ${DOCKER_MOBY_ARCHIVE_VERSION_CODENAMES}\"\n    exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Main Project (gitlab-ci.yml)\nDESCRIPTION: This GitLab CI configuration defines the pipeline for the main project. It specifies the dev container image to use for the CI environment, runs Python and CDK version checks, and performs linting and static analysis tasks (py_compile, cdk synth, Pylint, Black). The pipeline stages are Build and Lint, and the jobs are executed only on merge request events.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-02-15-gitlab-ci.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage: ${CI_REGISTRY_IMAGE}-dev-container:latest\n\nbefore_script:\n  - python --version\n  - cdk --version\n\nstages:\n  - Build\n  - Lint\n\npy_compile:\n  stage: Build\n  script:\n    - find . -type f -name \"*.py\" -print | xargs -n1 python3 -m py_compile\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\ncdk synth:\n  stage: Build\n  script:\n    - JSII_DEPRECATED=fail cdk --app \"python3 app.py\" synth\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\nPylint:\n  stage: Lint\n  script:\n    - pylint *\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\nBlack code format:\n  stage: Lint\n  script:\n    - black --check --diff .\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n```\n\n----------------------------------------\n\nTITLE: Main Dev Container Schema References\nDESCRIPTION: The main schema definition that extends base schemas and includes references to external schemas for VS Code and GitHub Codespaces integration. This combines multiple schema components to create a complete validation specification.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allOf\": [\n        {\n            \"$ref\": \"./devContainer.base.schema.json\"\n        },\n        {\n            \"$ref\": \"https://raw.githubusercontent.com/microsoft/vscode/main/extensions/configuration-editing/schemas/devContainer.codespaces.schema.json\"\n        },\n        {\n            \"$ref\": \"https://raw.githubusercontent.com/microsoft/vscode/main/extensions/configuration-editing/schemas/devContainer.vscode.schema.json\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Collection Metadata to OCI Registry\nDESCRIPTION: Shows the bash command to publish the devcontainer-collection.json metadata file to an OCI registry using ORAS, which contains information about all templates in the collection.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates-distribution.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/templates\nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/templates\n\noras push ${REGISTRY}/${NAMESPACE}:latest \\\n        --config /dev/null:application/vnd.devcontainers \\\n                            ./devcontainer-collection.json:application/vnd.devcontainers.collection.layer.v1+json\n```\n\n----------------------------------------\n\nTITLE: Customizing Workspace Mount and Folder - devcontainer.json - JSON\nDESCRIPTION: Provides an example of using the `workspaceMount` and `workspaceFolder` properties together to explicitly control how the local workspace is mounted into the container and which folder is opened within the IDE. It uses a bind mount type with the 'cached' consistency option.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"workspaceMount\": \"source=${localWorkspaceFolder}/sub-folder,target=/workspace,type=bind,consistency=cached\",\n\"workspaceFolder\": \"/workspace\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dev Container Feature Installation Script (Bash)\nDESCRIPTION: Example `install.sh` script for a 'hello' Feature. This script is the entry point executed when the Feature is installed. It retrieves the 'GREETING' option defined in `devcontainer-feature.json`, prints it during installation, and creates a new command `/usr/local/bin/hello` that prints the configured greeting in red text when executed within the container. Uses `set -e` to exit immediately if a command exits with a non-zero status.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2022-11-01-author-a-feature.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -e\n\necho \"Activating feature 'hello'\"\n\nGREETING=${GREETING:-undefined}\necho \"The provided greeting is: $GREETING\"\n\ncat > /usr/local/bin/hello \\\n<< EOF\n#!/bin/sh\nRED='\\033[0;91m'\nNC='\\033[0m' # No Color\necho \"\\${RED}${GREETING}, \\$(whoami)!\\${NC}\"\nEOF\n\nchmod +x /usr/local/bin/hello\n```\n\n----------------------------------------\n\nTITLE: Publishing Templates with Dev Container CLI\nDESCRIPTION: Shows how to use the Dev Container CLI to publish templates to a registry with authentication using a GitHub token.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates-distribution.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[/tmp]$  GITHUB_TOKEN=\"$CR_PAT\" devcontainer templates publish -r ghcr.io -n devcontainers/templates ./src\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Target - devcontainer.json - JSON\nDESCRIPTION: Illustrates setting the target build stage from a multi-stage Dockerfile using the `build.target` property in devcontainer.json. This specifies which stage to build as the final image.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"build\": { \"target\": \"development\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring postCreateCommand in Dev Container Feature devcontainer-feature.json (JSON)\nDESCRIPTION: This JSON snippet shows an example `devcontainer-feature.json` configuration file. It illustrates how to define required Feature metadata such as `id`, `version`, and `name`, and crucially, how to use the `postCreateCommand` property. This property specifies a command (in this case, executing the script created by `install.sh`) that will run after the Dev Container is created, demonstrating how Features can contribute commands to the container's lifecycle.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"git-lfs\",\n    \"version\": \"1.1.0\",\n    \"name\": \"Git Large File Support (LFS)\",\n    // <...truncated...>\n    \"postCreateCommand\": \"/usr/local/share/pull-git-lfs-artifacts.sh\",\n    \"installsAfter\": [\n        \"ghcr.io/devcontainers/features/common-utils\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Features in devcontainer.json (JSONC)\nDESCRIPTION: This JSONC fragment shows how to declare a python Feature in a user's devcontainer.json, overriding defaults for option values (version and pip), while omitting others (optimize). Dependencies: Must be in a valid devcontainer.json file and reference a valid Feature registry or image (e.g., ghcr.io). Parameters set here will override Feature defaults and be processed into environment variables. Limitations: JSONC syntax (comments) may need removal for use with strict JSON parsers.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/python:1\": {\n        \"version\": \"3.10\",\n        \"pip\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Script for Installing Bash on Alpine and Privilege Check - sh\nDESCRIPTION: A portable POSIX-compliant shell script snippet to verify script execution as root, install 'bash' on Alpine Linux if necessary, and then launch the main Bash script. It ensures compatibility with lightweight base images like Alpine that may lack bash by default and enforces execution privileges required for feature installation.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-06-14-feature-authoring-best-practices.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh \n\n# ... \n# ...\n\nif [ \"$(id -u)\" -ne 0 ]; then\n    echo -e 'Script must be run as root. Use sudo, su, or add \"USER root\" to your Dockerfile before running this script.'\n    exit 1\nfi\n\n# If we're using Alpine, install bash before executing\n. /etc/os-release\nif [ \"${ID}\" = \"alpine\" ]; then\n    apk add --no-cache bash\nfi\n\nexec /bin/bash \"$(dirname $0)/main.sh\" \"$@\"\nexit $?\n```\n\n----------------------------------------\n\nTITLE: Specifying Installation Order with installsAfter - JSON\nDESCRIPTION: This snippet shows how to use the `installsAfter` property in `devcontainer-feature.json` to define a 'soft dependency' for installation order. `myFeature` will be installed after `foo` and `bar` only if they are already in the installation queue.  Unlike `dependsOn`, `installsAfter` doesn't add dependencies to the installation list and doesn't allow specifying options or version pinning for the Features it references. The feature indicated by `installsAfter` cannot provide options.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"My Feature\",\n    \"id\": \"myFeature\",\n    \"version\": \"1.0.0\",\n    \"installsAfter\": [\n        \"foo\",\n        \"bar\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for Dev Container Updates in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up Dependabot to automatically update Dev Container Features within a repository. It defines the package ecosystem as `devcontainers`, specifies the root directory for configuration files, and sets a weekly update schedule.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2024-01-23-dependabot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates\n\nversion: 2\nupdates:\n  - package-ecosystem: \"devcontainers\" # See documentation for possible values\n    directory: \"/\"\n    schedule:\n      interval: weekly\n```\n\n----------------------------------------\n\nTITLE: Installing Tools in Effective Remote User Directory - Bash\nDESCRIPTION: Bash snippet demonstrating installation of tools into the effective remote user's home directory. It creates a bin folder under the remote user, downloads the tool, changes file ownership to the remote user, and sets executable permissions. It leverages environment variables like '_REMOTE_USER' and '_REMOTE_USER_HOME' to adapt installation paths based on user context during Feature installation.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-06-14-feature-authoring-best-practices.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install tool in effective remoteUser's bin folder\nmkdir -p \"$_REMOTE_USER_HOME/bin\"\ncurl $TOOL_DOWNLOAD_LINK -o \"$_REMOTE_USER_HOME/bin/$TOOL\"\nchown $_REMOTE_USER:$_REMOTE_USER \"$_REMOTE_USER_HOME/bin/$TOOL\"\nchmod 755 \"$_REMOTE_USER_HOME/bin/$TOOL\"\n```\n\n----------------------------------------\n\nTITLE: Example Dependabot Update Diff for Dev Container Features\nDESCRIPTION: This diff illustrates the changes made by Dependabot when updating a Dev Container Feature. It shows modifications to both the `.devcontainer.json` file, updating the Feature reference (e.g., from version 1 to 2), and the associated `.devcontainer-lock.json` file, updating the specific version, resolved URI, and integrity hash.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2024-01-23-dependabot.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n---\n .devcontainer-lock.json              | 8 ++++----\n .devcontainer.json                   | 2 +-\n 2 files changed, 5 insertions(+), 5 deletions(-)\n\ndiff --git a/.devcontainer-lock.json b/.devcontainer-lock.json\nindex 324582b..a3868d9 100644\n--- a/.devcontainer-lock.json\n+++ b/.devcontainer-lock.json\n@@ -1,9 +1,9 @@\n {\n   \"features\": {\n-    \"ghcr.io/devcontainers/features/docker-in-docker:1\": {\n-      \"version\": \"1.0.9\",\n-      \"resolved\": \"ghcr.io/devcontainers/features/docker-in-docker@sha256:b4c04ba88371a8ec01486356cce10eb9fe8274627d8d170aaec87ed0d333080d\",\n-      \"integrity\": \"sha256:b4c04ba88371a8ec01486356cce10eb9fe8274627d8d170aaec87ed0d333080d\"\n+    \"ghcr.io/devcontainers/features/docker-in-docker:2\": {\n+      \"version\": \"2.7.1\",\n+      \"resolved\": \"ghcr.io/devcontainers/features/docker-in-docker@sha256:f6a73ee06601d703db7d95d03e415cab229e78df92bb5002e8559bcfc047fec6\",\n+      \"integrity\": \"sha256:f6a73ee06601d703db7d95d03e415cab229e78df92bb5002e8559bcfc047fec6\"\n     }\n   }\n }\n\\ No newline at end of file\ndiff --git a/.devcontainer.json b/.devcontainer.json\nindex e9d9af5..9eb9165 100644\n--- a/.devcontainer.json\n+++ b/.devcontainer.json\n@@ -1,6 +1,6 @@\n {\n     \"image\": \"mcr.microsoft.com/devcontainers/base:jammy\",\n     \"features\": {\n-        \"ghcr.io/devcontainers/features/docker-in-docker:1\": {}\n+        \"ghcr.io/devcontainers/features/docker-in-docker:2\": {}\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Container Metadata to Dockerfile\nDESCRIPTION: Dockerfile snippet demonstrating how to manually add dev container configuration metadata as a label to a container image, including capability additions, remote user settings, and post-creation commands.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/reference.md#_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nLABEL devcontainer.metadata='[{ \\\n  \"capAdd\": [ \"SYS_PTRACE\" ], \\\n  \"remoteUser\": \"devcontainer\", \\\n  \"postCreateCommand\": \"yarn install\" \\\n}]'\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing a Dev Container Image with devcontainer CLI - Bash\nDESCRIPTION: This snippet demonstrates using the Dev Container CLI to build a container image from a workspace folder, push the image to a container registry, and specify the image name and optionally an image version tag. The parameters include the workspace folder path, a flag to trigger pushing the image, and the image name/version reference. It automates creating prebuilt images that can be reused across machines and team members, reducing build times.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-08-22-prebuild.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer build --workspace-folder . --push true --image-name <my_image_name>:<optional_image_version>\n```\n\n----------------------------------------\n\nTITLE: Publishing Collection Metadata to OCI Registry using ORAS - Bash\nDESCRIPTION: Uploads the 'devcontainer-collection.json' metadata file representing a Feature collection to an OCI registry using the ORAS CLI. Requires the ORAS CLI, proper Auth credentials, REGISTRY and NAMESPACE variables, and a pre-generated 'devcontainer-collection.json'. Content is pushed with a custom collection media type and always tagged 'latest'. Intended for publishing Feature collection metadata for discovery and validation.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features-distribution.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/features\nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/features\n\noras push ${REGISTRY}/${NAMESPACE}:latest \\\n        --config /dev/null:application/vnd.devcontainers \\\n                            ./devcontainer-collection.json:application/vnd.devcontainers.collection.layer.v1+json\n```\n\n----------------------------------------\n\nTITLE: Configuring onCreateCommand with Array Syntax\nDESCRIPTION: Example using array syntax for onCreateCommand which executes inside the container after it starts for the first time. This syntax runs the command directly without a shell.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"onCreateCommand\": [\"yarn\", \"install\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Container Configuration (devcontainer.json)\nDESCRIPTION: This JSON file defines the dev container configuration, including the Dockerfile to use for building the container, the features to install (AWS CLI and AWS CDK), and VS Code settings for Python formatting using Black. It utilizes features from both the official devcontainers repository and the devcontainers-contrib repository.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-02-15-gitlab-ci.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"context\": \"..\",\n    \"dockerfile\": \"Dockerfile\"\n  },\n  \"features\": {\n    \"ghcr.io/devcontainers/features/aws-cli:1\": {},\n    \"ghcr.io/devcontainers-contrib/features/aws-cdk:2\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {\n        \"python.formatting.provider\": \"black\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Script in Dev Container Feature install.sh (Bash)\nDESCRIPTION: This Bash snippet demonstrates how a Feature's `install.sh` script can write another script to a known, persistent path within the container. This created script can then be executed later, for example, via a lifecycle hook like `postCreateCommand`. It uses the `tee` command and a here-string to write the script content to the specified file path.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nPULL_GIT_LFS_SCRIPT_PATH=\"/usr/local/share/pull-git-lfs-artifacts.sh\"\n\ntee \"$PULL_GIT_LFS_SCRIPT_SCRIPT\" > /dev/null \\\n<< EOF\n#!/bin/sh\nset -e\n<...truncated...>\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Feature Metadata (JSON)\nDESCRIPTION: Example `devcontainer-feature.json` file for a 'hello' Feature. It defines metadata like name, ID, version, description, and customizable options, such as a 'greeting' string with proposals and a default value. This file is required for defining the properties and configuration of a Feature.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2022-11-01-author-a-feature.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Hello, World!\",\n    \"id\": \"hello\",\n    \"version\": \"1.0.2\",\n    \"description\": \"A hello world feature\",\n    \"options\": {\n        \"greeting\": {\n            \"type\": \"string\",\n            \"proposals\": [\n                \"hey\",\n                \"hello\",\n                \"hi\",\n                \"howdy\"\n            ],\n            \"default\": \"hey\",\n            \"description\": \"Select a pre-made greeting, or enter your own\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Container Template Options JSONC\nDESCRIPTION: Illustrates the structure of the `options` property within `devcontainer-template.json`. It defines configurable parameters (`optionId`) for the template, specifying their type, description, suggested values (`proposals`), and default value. Supporting tools parse this to prompt users and apply selections by replacing placeholder values in other template files.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"options\": {\n    \"optionId\": {\n      \"type\": \"string\",\n      \"description\": \"Description of the option\",\n      \"proposals\": [\"value1\", \"value2\"],\n      \"default\": \"value1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Commands with String Syntax\nDESCRIPTION: Example showing how to execute multiple commands using the string syntax with && operator. This runs in /bin/sh and allows for sequential command execution.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"apt-get update && apt-get install -y curl\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Customizations in devcontainer.json (JSON)\nDESCRIPTION: Demonstrates how to configure VS Code-specific properties within the `customizations` section of a `devcontainer.json` file. This includes setting default VS Code settings and specifying extensions to be installed inside the development container upon creation. These properties are read by tools like the Dev Containers extension and GitHub Codespaces.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/supporting.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"customizations\": {\n\t\t// Configure properties specific to VS Code.\n\t\t\"vscode\": {\n\t\t\t// Set *default* container specific settings.json values on container create.\n\t\t\t\"settings\": {},\n\t\t\t\"extensions\": [],\n\t\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Template Collection File Structure Example\nDESCRIPTION: Demonstrates the expected file structure for a collection of Dev Container Templates, showing how multiple templates can share a single git repository with their required configuration files.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates-distribution.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── README.md\n├── src\n│   ├── dotnet\n│   │   ├── devcontainer-template.json\n│   │   ├── .devcontainer.json\n│   │   ├── ...\n|   ├\n│   ├── docker-from-docker\n│   │   ├── devcontainer-template.json\n│   │   ├── .devcontainer\n│   │       ├── devcontainer.json\n│   │       ├── Dockerfile\n│   │       └── ...\n│   │   ├── ...\n|   ├\n│   ├── go-postgres\n│   │   ├── devcontainer-template.json\n│   │   ├── .devcontainer\n│   │       ├── devcontainer.json\n│   │       ├── docker-compose.yml\n│   │       ├── Dockerfile\n│   │       └── ...\n│   │   ├── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Dev Container (gitlab-ci.yml)\nDESCRIPTION: This GitLab CI configuration defines a pipeline to build and push the dev container image to the GitLab Container Registry. It installs the devcontainers CLI, logs in to the registry, builds the dev container using the CLI, and pushes the resulting image. It requires Docker and Node.js to be installed.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-02-15-gitlab-ci.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:latest\n\nvariables:\n  DOCKER_TLS_CERTDIR: \"/certs\"\n\nservices:\n  - docker:dind\n\nbefore_script:\n  - apk add --update nodejs npm python3 make g++\n  - npm install -g @devcontainers/cli\n\nbuild:\n  stage: build\n  script:\n    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}\n    - devcontainer build --workspace-folder . --push true --image-name ${CI_REGISTRY_IMAGE}:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Codespaces Initial Open Files in devcontainer.json (JSON)\nDESCRIPTION: Demonstrates how to specify which files should be automatically opened when a GitHub Codespace is created. Paths are relative to the repository root, and files are opened in the listed order, with the first file being active. These settings are configured within the `customizations.codespaces` section.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/supporting.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"customizations\": {\n\t// Configure properties specific to Codespaces.\n\t\"codespaces\": {\n\t\t\"openFiles\": [\n\t\t\t\"README\"\n\t\t\t\"src/index.js\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining postAttachCommand in devcontainer.json Schema\nDESCRIPTION: Schema definition for the `postAttachCommand` property. This command runs when attaching to the container, after `postStartCommand`. It accepts a string (run in shell), an array of strings (run directly), or an object for more complex configurations.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postAttachCommand\": {\n\t\"type\": [\n\t\t\"string\",\n\t\t\"array\",\n\t\t\"object\"\n\t],\n\t\"description\": \"A command to run when attaching to the container. This command is run after \\\"postStartCommand\\\". If this is a single string, it will be run in a shell. If this is an array of strings, it will be run as a single command without shell.\",\n\t\"items\": {\n\t\t\"type\": \"string\"\n\t},\n\t\"additionalProperties\": {\n\t\t\"type\": [\n\t\t\t\"string\",\n\t\t\t\"array\"\n\t\t],\n\t\t\"items\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example URL for GHCR Package Settings\nDESCRIPTION: Provides a URL pattern for accessing the settings page of a specific Feature package hosted on GitHub Container Registry (GHCR). This page allows users to manage package settings, including changing the visibility from private (default) to public, which is necessary for free usage and broader accessibility. Replace `<owner>`, `<repo>`, and `<featureName>` with the appropriate values.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2022-11-01-author-a-feature.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/users/<owner>/packages/container/<repo>%2F<featureName>/settings\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Codespaces Repository Permissions in devcontainer.json (JSON)\nDESCRIPTION: Shows how to configure repository permissions for a GitHub Codespace within the `customizations.codespaces` section of a `devcontainer.json` file. This allows specifying access levels for other repositories that the codespace might need to interact with, such as cloning or writing to issues.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/supporting.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"customizations\": {\n\t// Configure properties specific to Codespaces.\n\t\"codespaces\": {\n\t\t\"repositories\": {\n\t\t\t\"my_org/my_repo\": {\n\t\t\t\t\"permissions\": {\n\t\t\t\t\t\"issues\": \"write\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Template Collection Structure\nDESCRIPTION: Shows an example directory structure with multiple templates (color, hello) and their test files, demonstrating how templates should be organized for publishing.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates-distribution.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n├── src\n│   ├── color\n│   │   ├── devcontainer-template.json\n│   │   └──| .devcontainer\n│   │      └── devcontainer.json\n│   ├── hello\n│   │   ├── devcontainer-template.json\n│   │   └──| .devcontainer\n│   │      ├── devcontainer.json\n│   │      └── Dockerfile\n|   ├── ...\n│   │   ├── devcontainer-template.json\n│   │   └──| .devcontainer\n│   │      └── devcontainer.json\n├── test\n│   ├── color\n│   │   └── test.sh\n│   ├── hello\n│   │   └── test.sh\n│   └──test-utils\n│      └── test-utils.sh\n...\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Local Dev Container Features\nDESCRIPTION: Illustrates the required folder layout for defining local Features within the project's `.devcontainer` directory. Each local Feature must reside in a sub-folder named after its ID and contain at least `devcontainer-feature.json` and `install.sh`.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features-distribution.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .devcontainer/\n│   ├── localFeatureA/\n│   │   ├── devcontainer-feature.json\n│   │   ├── install.sh\n│   │   └── ...\n│   ├── localFeatureB/\n│   │   ├── devcontainer-feature.json\n│   │   ├── install.sh\n│   │   └── ...\n│   ├── devcontainer.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Features in devcontainer.json (JSONC)\nDESCRIPTION: Demonstrates how to reference locally defined Features within the `features` object of a `devcontainer.json` file. Local Features are specified using relative paths (e.g., `./localFeatureA`) from the location of the `devcontainer.json` file. An empty object `{}` can be used for default options.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features-distribution.md#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n        // ...\n        \"features\": {\n                \"./localFeatureA\": {},\n                \"./localFeatureB\": {}\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Feature Option Names for Environment Variables in JavaScript\nDESCRIPTION: This JavaScript one-liner function transforms a provided string (option name) to an uppercase, environment variable-safe format by replacing all non-alphanumeric and non-underscore characters with underscores, prefixing with an underscore if it starts with digits or underscores, and converting to upper case. Requires no external dependencies, expects a string as input, and outputs a sanitized string suitable for use as an environment variable. Limitations: May introduce leading underscores, and does not validate empty strings.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(str: string) => str\n\t.replace(/[^\\w_]/g, '_')\n\t.replace(/^[\\d_]+/g, '_')\n\t.toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Run Arguments - devcontainer.json - JSON\nDESCRIPTION: Shows how to pass command-line arguments to the `docker run` command when the dev container is started using the `runArgs` array. The example adds Linux capabilities (`SYS_PTRACE`) and disables default seccomp security options, which are often required for debuggers.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"runArgs\": [ \"--cap-add=SYS_PTRACE\", \"--security-opt\", \"seccomp=unconfined\" ]\n```\n\n----------------------------------------\n\nTITLE: Publishing Template to OCI Registry with ORAS\nDESCRIPTION: Shows the bash commands to publish a Dev Container Template to an OCI registry using ORAS. It demonstrates pushing both the template artifact and the collection metadata file with proper versioning and media types.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates-distribution.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/templates/go:1\nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/templates\nTEMPLATE=go\n\nARTIFACT_PATH=devcontainer-template-go.tgz\n\nfor VERSION in 1  1.2  1.2.3  latest\ndo\n        oras push ${REGISTRY}/${NAMESPACE}/${TEMPLATE}:${VERSION} \\\n                --config /dev/null:application/vnd.devcontainers \\\n                        ./${ARTIFACT_PATH}:application/vnd.devcontainers.layer.v1+tar\ndone\n```\n\n----------------------------------------\n\nTITLE: Starting a Dev Container with CLI\nDESCRIPTION: Commands to clone a sample Rust project and start a dev container using the CLI's up command, which downloads the container image and starts the container.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/reference.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/vscode-remote-try-rust\ndevcontainer up --workspace-folder <path-to-vscode-remote-try-rust>\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Container CLI with npm - Bash\nDESCRIPTION: This snippet shows how to globally install the Dev Container CLI using npm. The CLI is a prerequisite for building and managing dev container images, including prebuilding. Installing this package allows users to run relevant commands such as building and pushing container images from the command line.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-08-22-prebuild.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @devcontainers/cli\n```\n\n----------------------------------------\n\nTITLE: Defining dockerfileContainer in devcontainer.json Schema\nDESCRIPTION: Schema definition for configuring a container built from a Dockerfile. It uses `oneOf` to allow specifying build context and Dockerfile path either directly or nested within a `build` object, which can also include options defined in `buildOptions` (like `target`, `args`, `cacheFrom`). The `dockerfile` property path is relative to the `devcontainer.json` file.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"dockerfileContainer\": {\n\t\"oneOf\": [\n\t\t{\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"build\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"description\": \"Docker build-related options.\",\n\t\t\t\t\t\"allOf\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"dockerfile\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"description\": \"The location of the Dockerfile that defines the contents of the container. The path is relative to the folder containing the `devcontainer.json` file.\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"context\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\"description\": \"The location of the context folder for building the Docker image. The path is relative to the folder containing the `devcontainer.json` file.\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\t\"dockerfile\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"$ref\": \"#/definitions/buildOptions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"required\": [\n\t\t\t\t\"build\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"allOf\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"dockerFile\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"The location of the Dockerfile that defines the contents of the container. The path is relative to the folder containing the `devcontainer.json` file.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"context\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"The location of the context folder for building the Docker image. The path is relative to the folder containing the `devcontainer.json` file.\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\"dockerFile\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"build\": {\n\t\t\t\t\t\t\t\"description\": \"Docker build-related options.\",\n\t\t\t\t\t\t\t\"$ref\": \"#/definitions/buildOptions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Container Dockerfile\nDESCRIPTION: This Dockerfile sets up the dev container environment, starting from the official Python dev container image. It installs necessary Python packages (aws_cdk_lib, constructs, jsii, pylint) using pip and removes the temporary pip directory to reduce image size.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-02-15-gitlab-ci.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/python:latest\n\nRUN pip3 --disable-pip-version-check --no-cache-dir install aws_cdk_lib constructs jsii pylint \\\n    && rm -rf /tmp/pip-tmp\n```\n\n----------------------------------------\n\nTITLE: Defining userEnvProbe in devcontainer.json Schema\nDESCRIPTION: Schema definition for the `userEnvProbe` property. This specifies the type of shell probe (e.g., `loginShell`, `interactiveShell`) to run for gathering user environment variables. Defaults to `loginInteractiveShell`.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"userEnvProbe\": {\n\t\"type\": \"string\",\n\t\"enum\": [\n\t\t\"none\",\n\t\t\"loginShell\",\n\t\t\"loginInteractiveShell\",\n\t\t\"interactiveShell\"\n\t],\n\t\"description\": \"User environment probe to run. The default is \\\"loginInteractiveShell\\\".\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining overrideFeatureInstallOrder in devcontainer.json (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the `overrideFeatureInstallOrder` property in a `devcontainer.json` file to specify the installation order of features. It's an array of Feature IDs indicating the priority order for installation.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/features.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noverrideFeatureInstallOrder = [\n  \"foo\",\n  \"bar\",\n  \"baz\"\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Paths in Dev Container Template JSONC\nDESCRIPTION: Demonstrates the `optionalPaths` property in `devcontainer-template.json`. This array lists files or directories that supporting tools can present to the user as optional inclusions when applying the template. It shows examples for specifying single files and recursively including the contents of a directory using a trailing `/*`.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates.md#_snippet_1\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n    \"id\": \"cpp\",\n    \"version\": \"3.0.0\",\n    \"name\": \"C++\",\n    \"description\": \"Develop C++ applications\",\n    \"optionalPaths\": [\n         \"GETTING-STARTED.md\",                 // Single file\n         \"example-project-1/MyProject.csproj\", // Single file in nested directory\n         \".github/*\"                           // Entire recursive contents of directory\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining customizations in devcontainer.json Schema\nDESCRIPTION: Schema definition for the `customizations` property. This object acts as a namespace for tool-specific configurations (e.g., VS Code extensions, settings). Each tool should use a unique subproperty.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"customizations\": {\n\t\"type\": \"object\",\n\t\"description\": \"Tool-specific configuration. Each tool should use a JSON object subproperty with a unique name to group its customizations.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server for Local Development\nDESCRIPTION: Command to start the Jekyll server for local website development. This command uses Bundler to execute Jekyll with the serve option, which builds the site and starts a local web server.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: Referencing Dev Container Image (devcontainer.json)\nDESCRIPTION: This JSON file configures the main project's dev container to use a pre-built image from the GitLab Container Registry.  The `image` property points to the registry path of the pre-built container.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_posts/2023-02-15-gitlab-ci.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image\": \"registry.gitlab.com/my-user/my-project-dev-container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Container CLI via npm\nDESCRIPTION: Command to install the Dev Container CLI globally using npm package manager. Requires Python, Node.js (version 14+), and C/C++ to build dependencies.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/reference.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @devcontainers/cli\n```\n\n----------------------------------------\n\nTITLE: Simplified Dev Container Configuration with Prebuilt Image\nDESCRIPTION: JSON configuration example showing a minimal devcontainer.json that references a prebuilt image, allowing the container to inherit all settings from the image metadata.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/reference.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/go:1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Development Website\nDESCRIPTION: URL for accessing the locally running website in a browser after starting the Jekyll server. The site will be available at the specified localhost address.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://localhost:4000/containers.dev/\n```\n\n----------------------------------------\n\nTITLE: Using initializeCommand in devcontainer.json\nDESCRIPTION: Example of the initializeCommand property which runs on the host machine during container initialization. This command executes wherever source code is located.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_reference.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"initializeCommand\": \"yarn install\"\n```\n\n----------------------------------------\n\nTITLE: Prebuilding and Pushing Dev Container Images\nDESCRIPTION: Command to build a dev container image and push it to a container registry with a specified name and optional version tag.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/reference.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer build --workspace-folder . --push true --image-name <my_image_name>:<optional_image_version>\n```\n\n----------------------------------------\n\nTITLE: Defining nonComposeBase in devcontainer.json Schema\nDESCRIPTION: Schema definition for `nonComposeBase` properties, applicable to non-Docker Compose setups. Includes settings like exposed application ports (`appPort`), container environment variables (`containerEnv`), the user to run as (`containerUser`), volume mounts (`mounts`), container run arguments (`runArgs`), shutdown behavior (`shutdownAction`), command override behavior (`overrideCommand`), and workspace location (`workspaceFolder`, `workspaceMount`).\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/json_schema.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"nonComposeBase\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"appPort\": {\n\t\t\t\"type\": [\n\t\t\t\t\"integer\",\n\t\t\t\t\"string\",\n\t\t\t\t\"array\"\n\t\t\t],\n\t\t\t\"description\": \"Application ports that are exposed by the container. This can be a single port or an array of ports. Each port can be a number or a string. A number is mapped to the same port on the host. A string is passed to Docker unchanged and can be used to map ports differently, e.g. \\\"8000:8010\\\".\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": [\n\t\t\t\t\t\"integer\",\n\t\t\t\t\t\"string\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"containerEnv\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"additionalProperties\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"description\": \"Container environment variables.\"\n\t\t},\n\t\t\"containerUser\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The user the container will be started with. The default is the user on the Docker image.\"\n\t\t},\n\t\t\"mounts\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"description\": \"Mount points to set up when creating the container. See Docker's documentation for the --mount option for the supported syntax.\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"runArgs\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"description\": \"The arguments required when starting in the container.\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"shutdownAction\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"enum\": [\n\t\t\t\t\"none\",\n\t\t\t\t\"stopContainer\"\n\t\t\t],\n\t\t\t\"description\": \"Action to take when the user disconnects from the container in their editor. The default is to stop the container.\"\n\t\t},\n\t\t\"overrideCommand\": {\n\t\t\t\"type\": \"boolean\",\n\t\t\t\"description\": \"Whether to overwrite the command specified in the image. The default is true.\"\n\t\t},\n\t\t\"workspaceFolder\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The path of the workspace folder inside the container.\"\n\t\t},\n\t\t\"workspaceMount\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"The --mount parameter for docker run. The default is to mount the project folder at /workspaces/$project.\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in a Dev Container\nDESCRIPTION: Command to run a cargo command inside a running dev container, which compiles and runs a Rust sample project.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/reference.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer exec --workspace-folder <path-to-vscode-remote-try-rust> cargo run\n```\n\n----------------------------------------\n\nTITLE: Applying a Published Template with Dev Container CLI\nDESCRIPTION: Demonstrates how to apply a published template (color) using the Dev Container CLI with template arguments.\nSOURCE: https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_implementors/templates-distribution.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[/tmp]$  devcontainer templates apply \\\n                 -t 'ghcr.io/devcontainers/templates/color' \\\n                 -a '{\"favorite\": \"red\"}'\n```"
  }
]