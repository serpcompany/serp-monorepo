[
  {
    "owner": "baseflow",
    "repo": "flutter-permission-handler",
    "content": "TITLE: Requesting Multiple Permissions in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to request multiple permissions simultaneously using `[Permission.location, Permission.storage].request()`.  The result is a `Map` containing the status of each requested permission.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nMap<Permission, PermissionStatus> statuses = await [\n  Permission.location,\n  Permission.storage,\n].request();\nprint(statuses[Permission.location]);\n```\n\n----------------------------------------\n\nTITLE: Checking Permission Status in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to check the current status of a permission using the `Permission.camera.status` property.  The result can be used to determine if permission needs to be requested.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nvar status = await Permission.camera.status;\nif (status.isDenied) {\n  // We haven't asked for permission yet or the permission has been denied before, but not permanently.\n}\n```\n\n----------------------------------------\n\nTITLE: Opening App Settings in Flutter (Dart)\nDESCRIPTION: This snippet shows how to open the app's settings page using `openAppSettings()`.  This is useful when a permission is permanently denied and the user needs to manually enable it.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nif (await Permission.speech.isPermanentlyDenied) {\n  // The user opted to never again see the permission request dialog for this\n  // app. The only way to change the permission's status now is to let the\n  // user manually enables it in the system settings.\n  openAppSettings();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Status in Flutter (Dart)\nDESCRIPTION: This snippet shows how to check the status of an associated service for a permission, such as location services. The `serviceStatus.isEnabled` property indicates if the service is enabled.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nif (await Permission.locationWhenInUse.serviceStatus.isEnabled) {\n  // Use location.\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Permission Rationale in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to determine if a rationale should be shown to the user before requesting a permission using `Permission.contacts.shouldShowRequestRationale`.  This is only applicable on Android.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nbool isShown = await Permission.contacts.shouldShowRequestRationale;\n```\n\n----------------------------------------\n\nTITLE: Update compileSdkVersion in build.gradle (Android)\nDESCRIPTION: This snippet highlights the need to update the `compileSdkVersion` in the `android/app/build.gradle` file to `33` when upgrading to version 10.0.0 of the permission_handler plugin. This is crucial for handling the new `POST_NOTIFICATIONS` permission in Android.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/CHANGELOG.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ncompileSdkVersion 33\n```\n\n----------------------------------------\n\nTITLE: Using Permission Callbacks in Flutter (Dart)\nDESCRIPTION: This snippet showcases how to use callback functions with the `Permission` class.  It allows for specifying different actions based on the permission's status.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nawait Permission.camera\n  .onDeniedCallback(() {\n    // Your code\n  })\n  .onGrantedCallback(() {\n    // Your code\n  })\n  .onPermanentlyDeniedCallback(() {\n    // Your code\n  })\n  .onRestrictedCallback(() {\n    // Your code\n  })\n  .onLimitedCallback(() {\n    // Your code\n  })\n  .onProvisionalCallback(() {\n    // Your code\n  })\n  .request();\n```\n\n----------------------------------------\n\nTITLE: Example iOS Permission Configuration\nDESCRIPTION: Shows an example of how to enable a specific permission, calendar access, by uncommenting the relevant line in the Podfile. Removing the '#' character activates the macro and ensures the app requests the necessary permission.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n## dart: PermissionGroup.calendar\n'PERMISSION_EVENTS=1',\n```\n\n----------------------------------------\n\nTITLE: Set compileSdkVersion in build.gradle\nDESCRIPTION: Sets the compileSdkVersion in the android/app/build.gradle file to 33. This ensures that the Android project is compatible with the AndroidX libraries used by the permission_handler plugin.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n  compileSdkVersion 35\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SiriKit Entitlement in iOS (XML)\nDESCRIPTION: This snippet shows how to add the SiriKit entitlement to the application configuration. This is required if the application requests the `Permission.assistant` permission. This configuration needs to be done in the `Runner.entitlements` file.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>com.apple.developer.siri</key>\n\t<true/>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Define GCC preprocessor definitions in Podfile (iOS)\nDESCRIPTION: This snippet illustrates how permissions are disabled by default from version 8.0.0 onwards and must be explicitly enabled by specifying the correct `GCC_PREPROCESSOR_DEFINITIONS` in the `ios/Podfile` file. This is to enable permissions on iOS. Refer to the example application's Podfile for how to do this.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/CHANGELOG.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nGCC_PREPROCESSOR_DEFINITIONS\n```\n\n----------------------------------------\n\nTITLE: Configure iOS Permissions in Podfile\nDESCRIPTION: Configures iOS permissions within the Podfile by adding preprocessor definitions to the build settings for each target. This snippet shows how to enable specific permissions by setting macro values to 1, and how to selectively remove unused permissions by setting macro values to 0. The configuration ensures the app requests necessary permissions and avoids unnecessary permission prompts.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    flutter_additional_ios_build_settings(target)\n\n    target.build_configurations.each do |config|\n      # You can remove unused permissions here\n      # for more information: https://github.com/Baseflow/flutter-permission-handler/blob/main/permission_handler_apple/ios/Classes/PermissionHandlerEnums.h\n      # e.g. when you don't need camera permission, just add 'PERMISSION_CAMERA=0'\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [\n        '$(inherited)',\n\n        ## dart: PermissionGroup.calendar\n        'PERMISSION_EVENTS=1',\n        \n        ## dart: PermissionGroup.calendarFullAccess\n        'PERMISSION_EVENTS_FULL_ACCESS=1',\n\n        ## dart: PermissionGroup.reminders\n        'PERMISSION_REMINDERS=1',\n\n        ## dart: PermissionGroup.contacts\n        'PERMISSION_CONTACTS=1',\n\n        ## dart: PermissionGroup.camera\n        'PERMISSION_CAMERA=1',\n\n        ## dart: PermissionGroup.microphone\n        'PERMISSION_MICROPHONE=1',\n\n        ## dart: PermissionGroup.speech\n        'PERMISSION_SPEECH_RECOGNIZER=1',\n\n        ## dart: PermissionGroup.photos\n        'PERMISSION_PHOTOS=1',\n\n        ## The 'PERMISSION_LOCATION' macro enables the `locationWhenInUse` and `locationAlways` permission. If\n        ## the application only requires `locationWhenInUse`, only specify the `PERMISSION_LOCATION_WHENINUSE`\n        ## macro.\n        ##\n        ## dart: [PermissionGroup.location, PermissionGroup.locationAlways, PermissionGroup.locationWhenInUse]\n        'PERMISSION_LOCATION=1',\n        'PERMISSION_LOCATION_WHENINUSE=0',\n\n        ## dart: PermissionGroup.notification\n        'PERMISSION_NOTIFICATIONS=1',\n\n        ## dart: PermissionGroup.mediaLibrary\n        'PERMISSION_MEDIA_LIBRARY=1',\n\n        ## dart: PermissionGroup.sensors\n        'PERMISSION_SENSORS=1',\n\n        ## dart: PermissionGroup.bluetooth\n        'PERMISSION_BLUETOOTH=1',\n\n        ## dart: PermissionGroup.appTrackingTransparency\n        'PERMISSION_APP_TRACKING_TRANSPARENCY=1',\n\n        ## dart: PermissionGroup.criticalAlerts\n        'PERMISSION_CRITICAL_ALERTS=1',\n\n        ## dart: PermissionGroup.criticalAlerts\n        'PERMISSION_ASSISTANT=1',\n      ]\n\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching NuGet and CppWinRT using CMake\nDESCRIPTION: This section uses CMake's FetchContent module to download NuGet, and then uses NuGet to install the Microsoft.Windows.CppWinRT package. It then executes cppwinrt.exe to generate header files from the Windows SDK, necessary for interacting with Windows Runtime APIs. It also defines a preprocessor definition for the plugin implementation.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFetchContent_Declare(nuget\n  URL \"https://dist.nuget.org/win-x86-commandline/v6.0.0/nuget.exe\"\n  URL_HASH SHA256=04eb6c4fe4213907e2773e1be1bbbd730e9a655a3c9c58387ce8d4a714a5b9e1\n  DOWNLOAD_NO_EXTRACT true\n)\n\nfind_program(NUGET nuget)\nif (NOT NUGET)\n    message(\"Nuget.exe not found, trying to download or use cached version.\")\n    FetchContent_MakeAvailable(nuget)\n    set(NUGET ${nuget_SOURCE_DIR}/nuget.exe)\nendif()\n\nexecute_process(COMMAND\n    ${NUGET} install Microsoft.Windows.CppWinRT -Version ${CPPWINRT_VERSION} -OutputDirectory packages\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    RESULT_VARIABLE ret)\nif (NOT ret EQUAL 0)\n    message(FATAL_ERROR \"Failed to install nuget package Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}\")\nendif()\n\nset(CPPWINRT ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}/bin/cppwinrt.exe)\nexecute_process(COMMAND\n    ${CPPWINRT} -input sdk -output include\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    RESULT_VARIABLE ret)\nif (NOT ret EQUAL 0)\n    message(FATAL_ERROR \"Failed to run cppwinrt.exe\")\nendif()\n\ninclude_directories(BEFORE SYSTEM ${CMAKE_BINARY_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Dependencies\nDESCRIPTION: This snippet defines installation rules to copy the executable, ICU data file, Flutter library, and plugin bundled libraries to their respective destination directories as part of the installation process.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for the application bundle, including data and library directories, and configures CMake to include the install step by default in Visual Studio builds.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"<$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This snippet includes a CMake file containing generated plugin build rules, which manage building plugins and adding them to the application.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Install RPATH\nDESCRIPTION: This snippet sets the RPATH for the installed executable to find shared libraries at runtime.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and RPATH\nDESCRIPTION: This snippet sets a CMake policy to NEW and configures the RPATH (Run-Path) for the executable to locate shared libraries at runtime.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating the Plugin Library\nDESCRIPTION: This snippet defines the shared library for the Flutter plugin, specifies source files, applies standard settings, sets visibility, defines C++ standard, compiler options (enabling /await), preprocessor definitions, include directories, and links to the Flutter library. The Flutter plugin implementation is defined using `FLUTTER_PLUGIN_IMPL`.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"include/permission_handler_windows/permission_handler_windows_plugin.h\"\n  \"permission_handler_windows_plugin.cpp\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES CXX_VISIBILITY_PRESET hidden)\ntarget_compile_features(${PLUGIN_NAME} PRIVATE cxx_std_20)\ntarget_compile_options(${PLUGIN_NAME} PRIVATE /await)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation settings to a target, including C++ standard, warnings as errors, exception handling, and debug definitions.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures build options based on whether the build is multi-configuration or single-configuration. It sets the available configuration types and the default build type.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Executable with CMake\nDESCRIPTION: This CMake snippet builds the Flutter runner executable for the Windows platform. It includes setting the minimum CMake version, defining the project name, adding source files, applying standard project settings, linking necessary libraries and setting the include directory.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter-managed directory as a subdirectory, including its build rules.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Set Wrapper Root Directory\nDESCRIPTION: Sets the root directory for the C++ client wrapper. This directory contains the source code for the wrapper, which provides an interface between Flutter and native Windows code.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Define Flutter Tool Backend Command\nDESCRIPTION: Defines a custom command to run the Flutter tool backend.  This command is responsible for assembling the Flutter application and generating necessary files. The output files include the Flutter library, header files, and C++ wrapper sources.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library for the Flutter wrapper plugin. Includes core and plugin-specific sources, applies standard settings, sets position independent code, hides C++ visibility, links to the Flutter library, includes directories, and adds dependencies.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources\nDESCRIPTION: Defines the source files for the C++ wrapper, separating them into core implementations, plugin registrar, and application specific files. The TRANSFORM command prepends the wrapper root directory to each file name.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Specifies the path to the Flutter Windows DLL.  This is a key dependency for the application to run. It also sets the path for the ICU data file, project build directory and AOT library, publishing to the parent scope for use in subsequent steps.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to run the Flutter tool backend script. It depends on the Flutter library and headers, as well as the C++ wrapper sources. A phony output file ensures the command runs every time.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources (Plugin)\nDESCRIPTION: Lists the plugin-specific C++ wrapper source files and prepends the wrapper root directory to their paths.  These are required for the plugin support.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings and Compile Definitions\nDESCRIPTION: This snippet applies standard project settings, adds a compile definition to prevent conflicts with the Windows API's min/max macros, and links necessary Flutter libraries. It also includes the source directory for include files.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library (Plugin)\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin'. It is built using the core and plugin C++ wrapper sources. Standard settings are applied and visibility settings adjusted. Includes and dependencies are then established.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter Windows DLL.  This library contains the core Flutter runtime for Windows.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and C++ wrapper sources. This target ensures that all necessary files are generated before other targets that depend on them are built.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory.  This file contains configurations provided by the Flutter tool, influencing the build process.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Updating compileSdkVersion in Android Gradle - Groovy\nDESCRIPTION: This snippet illustrates the necessary step of updating the `compileSdkVersion` in the `android/app/build.gradle` file to `33` when upgrading to version 10.0.0 of the flutter-permission-handler package. This is a breaking change that requires manual intervention in the Android project configuration.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_android/CHANGELOG.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncompileSdkVersion 33\n```\n\n----------------------------------------\n\nTITLE: Updating compileSdkVersion in Android Gradle - Groovy\nDESCRIPTION: This snippet illustrates the necessary step of updating the `compileSdkVersion` in the `app/build.gradle` file to `35` when upgrading to version 13.0.0 of the flutter-permission-handler package. This is a breaking change that requires manual intervention in the Android project configuration.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_android/CHANGELOG.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncompileSdkVersion 35\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Executable Definition\nDESCRIPTION: This snippet defines the minimum CMake version, sets up the project, and creates an executable target for the Windows runner. It specifies source files to be included in the build.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library (App)\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app'. It is built using the core and app C++ wrapper sources. Standard settings are applied, includes and dependencies are established.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures build options based on whether the generator is multi-config or not, setting CMAKE_CONFIGURATION_TYPES and CMAKE_BUILD_TYPE accordingly.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating sourceCompatibility in Android Gradle - Groovy\nDESCRIPTION: This snippet shows the update from `sourceCompatibility = JavaVersion.VERSION_1_8` to `sourceCompatibility = JavaVersion.VERSION_17` which is part of updating to version 13.0.0 of the flutter-permission-handler package. This change needs to be done inside the `app/build.gradle` file.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_android/CHANGELOG.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nsourceCompatibility = JavaVersion.VERSION_17\n```\n\n----------------------------------------\n\nTITLE: Setting up project properties in CMake\nDESCRIPTION: This snippet sets up the basic project properties, including the minimum CMake version, project name, and the CppWinRT version. The PLUGIN_NAME variable is defined to be used throughout the build process, and FetchContent module is included.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nset(PROJECT_NAME \"permission_handler_windows\")\nset(CPPWINRT_VERSION \"2.0.210806.1\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\ninclude(FetchContent)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper App Library\nDESCRIPTION: Creates a static library for the Flutter wrapper application. Includes core and app-specific sources, applies standard settings, links to the Flutter library, includes directories, and adds dependencies.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Define Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library header files. These headers are required for compiling code that interacts with the Flutter runtime.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Requesting a Permission in Flutter (Dart)\nDESCRIPTION: This snippet shows how to request a specific permission using `Permission.contacts.request()`.  The method returns the new status of the permission, which can then be checked. The `isGranted` property indicates if the permission is granted.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nif (await Permission.contacts.request().isGranted) {\n  // Either the permission was already granted before or the user just granted it.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flags for Profile Builds\nDESCRIPTION: This snippet sets the linker and compiler flags for 'Profile' build configurations to be the same as the 'Release' configuration, ensuring consistent optimization levels.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Assemble Target\nDESCRIPTION: Creates a custom target named flutter_assemble that depends on the generated Flutter library, header files, and C++ wrapper sources. This target is used to trigger the assembly of the Flutter application.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting bundled library paths\nDESCRIPTION: This sets a variable for bundled libraries, it sets an empty string for the bundled libraries and is set to PARENT_SCOPE so it can be used by parent CMakeLists.txt files.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# List of absolute paths to libraries that should be bundled with the plugin\nset(permission_handler_windows_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Restricted Permission Status in Flutter (Dart)\nDESCRIPTION: This snippet illustrates how to check if a permission is restricted, for example, due to parental controls.  The `Permission.location.isRestricted` property returns a boolean indicating the restricted status.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nif (await Permission.location.isRestricted) {\n  // The OS restricts access, for example, because of parental controls.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote with Git\nDESCRIPTION: Adds a remote named 'upstream' that points to the original repository. This enables fetching updates from the original repository without affecting your local changes or fork.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit remote add upstream git@github.com:Baseflow/flutter-permission-handler.git\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags\nDESCRIPTION: This snippet sets the linker and compiler flags for the 'Profile' build configuration, copying them from the 'Release' configuration.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Flutter and Runner\nDESCRIPTION: This snippet adds subdirectories for the Flutter managed directory and the application runner, allowing CMake to manage these components as part of the build process.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources (Core)\nDESCRIPTION: Lists the core C++ wrapper source files and prepends the wrapper root directory to their paths. These sources provide essential functionalities for the wrapper.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources (App)\nDESCRIPTION: Lists the application-specific C++ wrapper source files and prepends the wrapper root directory to their paths. These are required for the app support.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the 'ephemeral' directory, which contains generated configuration files and pre-built Flutter binaries.  This is crucial for locating Flutter's core files.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets\nDESCRIPTION: This snippet removes the assets directory recursively and reinstalls it to avoid stale files.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: AndroidX Gradle Properties Configuration\nDESCRIPTION: Configures the Android project to use AndroidX by enabling AndroidX and Jetifier in the gradle.properties file. This is a prerequisite for using the permission_handler plugin with AndroidX.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/README.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote with Git\nDESCRIPTION: Pushes the committed changes from the local branch to the corresponding branch on the 'origin' remote (your forked repository). This makes your changes available on GitHub.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: git\nCODE:\n```\ngit push origin <name_of_your_branch>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dart Code with Flutter Format\nDESCRIPTION: Formats all Dart code files in the current directory and its subdirectories using the Flutter formatting rules. This ensures consistent code style across the project.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: flutter\nCODE:\n```\nflutter format .\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library in 'Profile' and 'Release' build configurations, which optimizes performance.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. This library is then configured to include directories and link against the Flutter library. The dependencies are set to ensure the flutter assemble target has been built.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, specifies the project name and supported languages, and sets the binary name.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory with cd\nDESCRIPTION: Changes the current working directory in the terminal to the `flutter-permission-handler` directory. This allows subsequent commands to be executed within the context of the project.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd flutter-permission-handler\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: Commits the staged changes to the local repository with a descriptive message. The `-am` flag combines the `add` and `commit` operations.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: git\nCODE:\n```\ngit commit -am \"<your informative commit message>\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory with cd\nDESCRIPTION: Changes the current working directory to the 'example' directory, which usually contains a sample application demonstrating the usage of the Flutter Permission Handler plugin.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd example\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Specifies the header files required for the Flutter library.  The list is then transformed to prepend the ephemeral directory to each header file path.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the location of the C++ client wrapper directory. This directory contains the source files for the C++ wrapper around the Flutter engine.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support in the project, ensuring proper handling of international characters.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building plugins and adding them to the application.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the 'ephemeral' directory. This file is expected to be generated by the Flutter tool and contains project-specific settings.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the CMake version used to build the project meets the specified requirements.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Defines the ephemeral directory where generated configuration files are located.  This simplifies referencing files generated by the Flutter tool.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This snippet installs plugin bundled libraries to the library directory.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory, where the application build is located.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Target\nDESCRIPTION: This snippet installs the runtime target (executable) to the installation prefix.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Settings Function\nDESCRIPTION: This snippet defines a function APPLY_STANDARD_SETTINGS that applies standard compilation features, options, and definitions to a target.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for data and library files within the application bundle.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions for Unicode support.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets a CMake policy to NEW.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the data directory for Profile and Release configurations only.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the directory for the build bundle.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: This snippet sets the install step as default in Visual Studio.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix if it was initialized to the default.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required version of CMake for the project and defines the project name with CXX language support.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App with flutter run\nDESCRIPTION: Executes the Flutter application in the 'example' directory. This command compiles the Dart code and deploys the application to a connected device or emulator.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: flutter\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Flutter Test\nDESCRIPTION: Executes all unit tests defined in the Flutter project. This verifies the correctness of individual components and functions.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: flutter\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code with Flutter Analyze\nDESCRIPTION: Performs static analysis on the Dart code in the current directory and its subdirectories, identifying potential errors, warnings, and style issues.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: flutter\nCODE:\n```\nflutter analyze\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream Changes with Git\nDESCRIPTION: Fetches the latest changes from the 'upstream' remote (the original repository) without merging them into your local branch. This allows you to see the latest updates and merge them manually.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: git\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Checking Out Upstream Branch with Git\nDESCRIPTION: Creates a new local branch based on the 'develop' branch of the 'upstream' remote and switches to it. This allows you to work on the latest code from the original repository in a separate branch.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: git\nCODE:\n```\ngit checkout upstream/develop -b <name_of_your_branch>\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git\nDESCRIPTION: Clones the forked repository from your GitHub account to your local machine using Git. This command downloads the complete repository history and files, allowing local development and modifications.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone git@github.com:<your_name_here>/flutter-permission-handler.git\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the binary executable.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Managed Directory\nDESCRIPTION: This snippet sets the directory where the Flutter-managed files are located.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet installs the assets directory by first removing the existing directory to avoid stale files and then copying the new assets to the installation directory.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the build to be processed correctly. This ensures compatibility with the CMake features used in the script.\nSOURCE: https://github.com/baseflow/flutter-permission-handler/blob/main/permission_handler_windows/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```"
  }
]