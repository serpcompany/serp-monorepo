[
  {
    "owner": "shopify",
    "repo": "shopify_python_api",
    "content": "TITLE: Making Authorized API Requests to Shopify\nDESCRIPTION: Activate a Shopify session and make authorized API requests to retrieve shop data and perform operations.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsession = shopify.Session(shop_url, api_version, access_token)\nshopify.ShopifyResource.activate_session(session)\n\n# Note: REST API examples will be deprecated in 2025\nshop = shopify.Shop.current()  # Get the current shop\nproduct = shopify.Product.find(179761209)  # Get a specific product\n\n# GraphQL API example\nshopify.GraphQL().execute(\"{ shop { name id } }\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Shopify Session for Authentication\nDESCRIPTION: Initialize the Shopify Session with API key and secret for authentication. This is required for public and custom apps.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport shopify\n\nshopify.Session.setup(api_key=API_KEY, secret=API_SECRET)\n```\n\n----------------------------------------\n\nTITLE: Exchanging OAuth Code for Access Token\nDESCRIPTION: Exchange the temporary OAuth code for a permanent access token after the merchant approves the app.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsession = shopify.Session(shop_url, api_version)\naccess_token = session.request_token(request_params) # request_token will validate hmac and timing attacks\n# you should save the access token now for future use.\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Permission URL for Shopify App\nDESCRIPTION: Generate an OAuth permission URL for a Shopify app. This URL is used to request access to a shop's data.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nshop_url = \"SHOP_NAME.myshopify.com\"\napi_version = '2024-07'\nstate = binascii.b2a_hex(os.urandom(15)).decode(\"utf-8\")\nredirect_uri = \"http://myapp.com/auth/shopify/callback\"\nscopes = ['read_products', 'read_orders']\n\nnewSession = shopify.Session(shop_url, api_version)\nauth_url = newSession.create_permission_url(redirect_uri, scopes, state)\n# redirect to auth_url\n```\n\n----------------------------------------\n\nTITLE: Initializing Private App Session\nDESCRIPTION: Set up a session for a private Shopify app using the private app password as the access token.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsession = shopify.Session(shop_url, api_version, private_app_password)\nshopify.ShopifyResource.activate_session(session)\n# ...\nshopify.ShopifyResource.clear_session()\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Shopify Python API\nDESCRIPTION: This snippet demonstrates how to execute a simple GraphQL query using the Shopify Python API to retrieve shop information.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nresult = shopify.GraphQL().execute('{ shop { name id } }')\n```\n\n----------------------------------------\n\nTITLE: Executing Named GraphQL Operation with Variables\nDESCRIPTION: This snippet demonstrates how to execute a named GraphQL operation with variables using the Shopify Python API. It loads a GraphQL document from a file and specifies the operation name and variables.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Load the document with both queries\ndocument = Path(\"./order_queries.graphql\").read_text()\n\n# Specify the named operation to execute, and the parameters for the query\nresult = shopify.GraphQL().execute(\n    query=document,\n    variables={\"order_id\": \"gid://shopify/Order/12345\"},\n    operation_name=\"GetOneOrder\",\n)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Shopify Products with pyactiveresource\nDESCRIPTION: Demonstrate CRUD operations on Shopify products using pyactiveresource methods.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Note: REST API examples will be deprecated in 2025\nproduct = shopify.Product()\nproduct.title = \"Shopify Logo T-Shirt\"\nproduct.id                          # => 292082188312\nproduct.save()                      # => True\nshopify.Product.exists(product.id)  # => True\nproduct = shopify.Product.find(292082188312)\n# Resource holding our newly created Product object\n# Inspect attributes with product.attributes\nproduct.price = 19.99\nproduct.save()                      # => True\nproduct.destroy()\n# Delete the resource from the remote server (i.e. Shopify)\n```\n\n----------------------------------------\n\nTITLE: Creating Session Token Authentication Decorator in Python\nDESCRIPTION: Implementation of a decorator that validates Shopify session tokens for protecting app routes. Includes error handling and session management functionality.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/session-tokens.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom shopify import session_token\n\n\ndef session_token_required(func):\n    def wrapper(*args, **kwargs):\n        request = args[0]  # Or flask.request if you use Flask\n        try:\n            decoded_session_token = session_token.decode_from_header(\n                authorization_header = request.headers.get('Authorization'),\n                api_key = SHOPIFY_API_KEY,\n                secret = SHOPIFY_API_SECRET\n            )\n            with shopify_session(decoded_session_token):\n                return func(*args, **kwargs)\n        except session_token.SessionTokenError as e:\n            # Log the error here\n            return unauthorized_401_response()\n\n    return wrapper\n\n\ndef shopify_session(decoded_session_token):\n    shopify_domain = decoded_session_token.get(\"dest\")\n    access_token = get_offline_access_token_by_shop_domain(shopify_domain)\n\n    return shopify.Session.temp(shopify_domain, SHOPIFY_API_VERSION, access_token)\n\n\n@session_token_required  # Requests to /products require session tokens\ndef products(request):\n    products = shopify.Product.find()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Private App Session\nDESCRIPTION: Create a temporary session for a private Shopify app to execute GraphQL queries.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith shopify.Session.temp(shop_url, api_version, private_app_password):\n    shopify.GraphQL().execute(\"{ shop { name id } }\")\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Shopify Session\nDESCRIPTION: Initialize a temporary Shopify session to execute commands and automatically clear the session afterward.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith shopify.Session.temp(shop_url, api_version, token):\n   product = shopify.Product.find()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shopify Orders with Parameters\nDESCRIPTION: Fetch a list of open Shopify orders with specific parameters using the find method.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nnew_orders = shopify.Order.find(status=\"open\", limit=\"50\")\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Queries with Fragments\nDESCRIPTION: This snippet shows how to define GraphQL queries using fragments for retrieving order information. It includes two named queries for fetching single and multiple orders.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n# ./order_queries.graphql\n\nfragment OrderInfo on Order {\n    id\n    name\n    createdAt\n}\n\nquery GetOneOrder($order_id: ID!){\n    node(id: $order_id){\n        ...OrderInfo\n    }\n}\n\nquery GetManyOrders($order_ids: [ID]!){\n    nodes(ids: $order_ids){\n       ...OrderInfo\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relative Cursor Pagination with Shopify Python API\nDESCRIPTION: This Python snippet shows how to use relative cursor pagination with the Shopify Python API for retrieving product data across multiple pages.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport shopify\n\npage1 = shopify.Product.find()\nif page1.has_next_page():\n  page2 = page1.next_page()\n\n# to persist across requests you can use next_page_url and previous_page_url\nnext_url = page1.next_page_url\npage2 = shopify.Product.find(from_=next_url)\n```\n\n----------------------------------------\n\nTITLE: Accessing Prefixed Shopify Resources\nDESCRIPTION: Interact with Shopify resources that are prefixed by a parent resource, such as fulfillments within an order.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Note: This REST API example will be deprecated in the future\nshopify.Fulfillment.find(255858046, order_id=450789469)\n```\n\n----------------------------------------\n\nTITLE: Handling Access Scope Changes with ApiAccess in Python\nDESCRIPTION: Shows a decorator that uses ApiAccess to check if the current shop's scopes match the expected scopes, redirecting to OAuth if there's a mismatch.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/api-access.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom shopify import ApiAccess\n\n\ndef oauth_on_access_scopes_mismatch(func):\n  def wrapper(*args, **kwargs):\n    shop_domain = get_shop_query_parameter(request) # shop query param when loading app\n    current_shop_scopes = ApiAccess(ShopStore.get_record(shopify_domain = shop_domain).access_scopes)\n    expected_access_scopes = ApiAccess(SHOPIFY_API_SCOPES)\n\n    if current_shop_scopes != expected_access_scopes:\n      return redirect_to_login() # redirect to OAuth to update access scopes granted\n\n    return func(*args, **kwargs)\n\n  return wrapper\n```\n\n----------------------------------------\n\nTITLE: Creating Shopify Application Charge\nDESCRIPTION: Create a billing charge for a Shopify application, including test mode for development stores.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napplication_charge = shopify.ApplicationCharge.create({\n    'name': 'My public app',\n    'price': 123,\n    'test': True,\n    'return_url': 'https://domain.com/approve'\n})\n# Redirect user to application_charge.confirmation_url so they can approve the charge\n```\n\n----------------------------------------\n\nTITLE: Activating Shopify Application Charge\nDESCRIPTION: Activate an approved application charge after the user is redirected back to the app.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncharge = shopify.ApplicationCharge.find(charge_id)\nshopify.ApplicationCharge.activate(charge)\n```\n\n----------------------------------------\n\nTITLE: Decoding Shopify Session Token from Header in Python\nDESCRIPTION: Basic example of decoding a session token from an HTTP Authorization header using the Shopify Python API. Requires API key and secret as parameters.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/session-tokens.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom shopify import session_token\n\ndecoded_payload = session_token.decode_from_header(\n    authorization_header=your_auth_request_header,\n    api_key=your_api_key,\n    secret=your_api_secret,\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing ApiAccess Objects in Python\nDESCRIPTION: Demonstrates how to create ApiAccess objects using either a list of access scopes or a comma-delimited string of scopes.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/api-access.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi_access = ApiAccess([\"read_products\", \"write_orders\"]) # List of access scopes\nanother_api_access = ApiAccess(\"read_products, write_products, unauthenticated_read_themes\") # String of comma-delimited access scopes\n```\n\n----------------------------------------\n\nTITLE: Checking Shopify Charge Status\nDESCRIPTION: Verify if a Shopify application charge has been successfully billed and activated.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nactivated_charge = shopify.ApplicationCharge.find(charge_id)\nhas_been_billed = activated_charge.status == 'active'\n```\n\n----------------------------------------\n\nTITLE: Checking if ApiAccess Covers Another in Python\nDESCRIPTION: Demonstrates how to determine if one ApiAccess object covers the access granted by another using the covers() method.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/api-access.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsuperset_access = ApiAccess([\"write_products\", \"write_orders\", \"read_themes\"])\nsubset_access = ApiAccess([\"read_products\", \"write_orders\"])\n\nsuperset_access.covers(subset_access) # True\n```\n\n----------------------------------------\n\nTITLE: Clearing Shopify Session\nDESCRIPTION: Clear the Shopify session when finished to ensure proper resource management.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nshopify.ShopifyResource.clear_session()\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify API Library with pip\nDESCRIPTION: Use pip to install or upgrade to the latest release of the ShopifyAPI library.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade ShopifyAPI\n```\n\n----------------------------------------\n\nTITLE: Serializing ApiAccess Objects in Python\nDESCRIPTION: Shows how to convert an ApiAccess object into a list of scopes or a comma-delimited string.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/api-access.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi_access = ApiAccess([\"read_products\", \"write_orders\", \"unauthenticated_read_themes\"])\n\naccess_scopes_list = list(api_access) # [\"read_products\", \"write_orders\", \"unauthenticated_read_themes\"]\ncomma_delimited_access_scopes = str(api_access) # \"read_products,write_orders,unauthenticated_read_themes\"\n```\n\n----------------------------------------\n\nTITLE: Comparing ApiAccess Objects for Equality in Python\nDESCRIPTION: Illustrates how to check if two ApiAccess objects grant the same API access using the equality operator.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/docs/api-access.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexpected_api_access = ApiAccess([\"read_products\", \"write_orders\"])\n\nactual_api_access = ApiAccess([\"read_products\", \"read_orders\", \"write_orders\"])\nnon_equal_api_access = ApiAccess([\"read_products\", \"write_orders\", \"read_themes\"])\n\nactual_api_access == expected_api_access # True\nnon_equal_api_access == expected_api_access # False\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Development Version of Shopify Python API\nDESCRIPTION: This shell snippet shows how to build and install the development version of the Shopify Python API using setup.py and pip.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npython setup.py sdist\npip install --upgrade dist/ShopifyAPI-*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Shopify Python API\nDESCRIPTION: This shell snippet demonstrates how to run tests for the Shopify Python API project using setup.py.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npip install setuptools --upgrade\npython setup.py test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit for Shopify Python API Development\nDESCRIPTION: This shell snippet demonstrates how to set up pre-commit for local development of the Shopify Python API, including installing requirements and setting up git hook scripts.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify Python API Package with setuptools\nDESCRIPTION: This snippet defines the setup configuration for the Shopify Python API package. It specifies package metadata, version, author details, dependencies, and other installation parameters using setuptools.\nSOURCE: https://github.com/shopify/shopify_python_api/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsetuptools\n```"
  }
]