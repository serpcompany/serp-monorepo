[
  {
    "owner": "annulusgames",
    "repo": "litmotion",
    "content": "TITLE: Using SerializableMotionSettings in Unity C# MonoBehaviour\nDESCRIPTION: Illustrates the use of SerializableMotionSettings in a Unity MonoBehaviour script. This allows for editing motion settings through the Unity Inspector. The example shows how to bind the settings to a transform's X position.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/motion-settings.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Example : MonoBehaviour\n{\n    [SerializeField] SerializableMotionSettings<float, NoOptions> settings;\n\n    void Start()\n    {\n        LMotion.Create(settings)\n            .BindToPositionX(transform);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Binding Animations with LitMotion in C#\nDESCRIPTION: This code snippet demonstrates how to create motion animations with LitMotion in Unity. It shows three different ways to use LMotion.Create(): binding to a transform's position, binding to Unity's logger for debugging, and binding to a custom variable using a lambda function. Each animation transitions from a starting value to an end value over a specified duration.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/quick-start.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nusing UnityEngine;\nusing LitMotion;\nusing LitMotion.Extensions;\n\npublic class Example : MonoBehaviour\n{\n    [SerializeField] Transform target;\n\n    void Start()\n    {\n        LMotion.Create(Vector3.zero, Vector3.one, 2f) // Animates values from (0f, 0f, 0f) to (1f, 1f, 1f) over 2 seconds\n            .BindToPosition(target); // Binds to target.position\n\n        LMotion.Create(0f, 10f, 2f) // Animates values from 0f to 10f over 2 seconds\n            .BindToUnityLogger(); // Binds to Debug.unityLogger, displaying values in the Console on updates\n\n        var value = 0f;\n        LMotion.Create(0f, 10f, 2f) // Animates values from 0f to 10f over 2 seconds\n            .Bind(x => value = x); // Can bind to any variable, field, or property\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Motion with Method Chaining in LitMotion\nDESCRIPTION: Demonstrates the standard method chaining pattern for creating and configuring a motion in LitMotion. This example shows how to create a float animation with ease, custom scheduler, binding to Unity's logger, and attaching to a GameObject for lifecycle management.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/design-philosophy.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(0f, 10f, 2f)\n    .WithEase(Ease.OutQuad)\n    .WithScheduler(MotionScheduler.FixedUpdate)\n    .BindToUnityLogger()\n    .AddTo(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Motion with Method Chaining in C#\nDESCRIPTION: Example of creating a motion with LitMotion that animates a value from 0 to 10 over 2 seconds, using OutQuad easing and a completion callback. The example demonstrates method chaining to configure multiple settings for the motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar value = 0f;\nLMotion.Create(0f, 10f, 2f)\n    .WithEase(Ease.OutQuad)\n    .WithComplete(() => Debug.Log(\"Complete!\"))\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Creating a MotionBuilder in LitMotion\nDESCRIPTION: Demonstrates how to initialize a basic motion builder with starting value, ending value, and duration in seconds.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/basic-concepts.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar builder = LMotion.Create(0f, 10f, 3f);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector3MotionAdapter in C#\nDESCRIPTION: This snippet demonstrates how to create a custom adapter for Vector3 type in LitMotion. It includes the necessary assembly attributes for Burst compilation and implements the IMotionAdapter interface.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/custom-adapter.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing UnityEngine;\nusing LitMotion;\n\n[assembly: RegisterGenericJobType(typeof(MotionUpdateJob<Vector3, NoOptions, Vector3MotionAdapter>))]\n\npublic readonly struct Vector3MotionAdapter : IMotionAdapter<Vector3, NoOptions>\n{\n    public Vector3 Evaluate(ref Vector3 startValue, ref Vector3 endValue, ref NoOptions options, in MotionEvaluationContext context)\n    {\n        return Vector3.LerpUnclamped(startValue, endValue, context.Progress);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LitMotion in Unity C#\nDESCRIPTION: Example demonstrating various features of LitMotion including creating motions, binding to properties, setting easing, looping, and callbacks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading;\nusing UnityEngine;\nusing R3; // R3\nusing Cysharp.Threading.Tasks; // UniTask\nusing LitMotion;\nusing LitMotion.Extensions;\n\npublic class Example : MonoBehaviour\n{\n    [SerializeField] Transform target1;\n    [SerializeField] Transform target2;\n    [SerializeField] TMP_Text tmpText;\n\n    void Start()\n    {\n        LMotion.Create(Vector3.zero, Vector3.one, 2f) // Animate values from (0f, 0f, 0f) to (1f, 1f, 1f) over 2 seconds\n            .BindToPosition(target1); // Bind to target1.position\n\n        LMotion.Create(0f, 10f, 2f) // Animate from 0f to 10f over 2 seconds\n            .WithEase(Ease.OutQuad) // Specify easing function\n            .WithLoops(2, LoopType.Yoyo) // Specify loop count and type\n            .WithDelay(0.2f) // Set delay\n            .BindToUnityLogger(); // Bind to Debug.unityLogger and display values in Console on update\n\n        var value = 0f;\n        LMotion.Create(0f, 10f, 2f) // Animate from 0f to 10f over 2 seconds\n            .WithScheduler(MotionScheduler.FixedUpdate) // Specify execution timing with Scheduler\n            .WithOnComplete(() => Debug.Log(\"Complete!\")) // Set a callback\n            .WithCancelOnError() // Cancel motion if an exception occurs within Bind\n            .Bind(x => value = x) // Bind to any variable, field, or property\n            .AddTo(gameObject); // Cancel motion when the GameObject is destroyed\n        \n        LMotion.String.Create128Bytes(\"\", \"<color=red>Zero</color> Allocation <i>Text</i> Tween! <b>Foooooo!!</b>\", 5f)\n            .WithRichText() // Enable RichText tags\n            .WithScrambleChars(ScrambleMode.All) // Fill unseen parts with random characters\n            .BindToText(tmpText); // Bind to TMP_Text (update text with zero allocation without generating strings)\n\n        LMotion.Punch.Create(0f, 5f, 2f) // Create a Punch motion (regular damping oscillation)\n            .WithFrequency(20) // Specify oscillation count\n            .WithDampingRatio(0f) // Specify damping ratio\n            .BindToPositionX(target2); // Bind to transform.position.x\n\n        // Control created motions via the `MotionHandle` struct\n        var handle = LMotion.Create(0f, 1f, 2f).RunWithoutBinding();\n\n        if (handle.IsActive()) // Returns true if the motion is playing\n        {\n            handle.Cancel(); // Cancel the motion\n            handle.Complete(); // Complete the motion\n        }\n    }\n    \n    // Animate TMP_Text characters\n    void TMPCharMotionExample()\n    {\n        // Get the number of characters from TMP_Text.textInfo.characterCount\n        for (int i = 0; i < text.textInfo.characterCount; i++)\n        {\n            LMotion.Create(Color.white, Color.red, 1f)\n                .WithDelay(i * 0.1f)\n                .WithEase(Ease.OutQuad)\n                .BindToTMPCharColor(text, i); // Bind to the i-th character\n\n            LMotion.Punch.Create(Vector3.zero, Vector3.up * 30f, 1f)\n                .WithDelay(i * 0.1f)\n                .WithEase(Ease.OutQuad)\n                .BindToTMPCharPosition(text, i);\n        }\n    }\n\n    // Coroutine support\n    IEnumerator CoroutineExample()\n    {\n        var handle = LMotion.Create(0f, 1f, 2f).BindToUnityLogger();\n        yield return handle.ToYieldInteraction(); // Wait for completion in a coroutine\n    }\n\n    // async/await using UniTask\n    async UniTask AsyncAwaitExample(CancellationToken cancellationToken)\n    {\n        var handle = LMotion.Create(0f, 1f, 2f).BindToUnityLogger();\n        await handle; // Await MotionHandle directly\n        await handle.ToUniTask(cancellationToken); // Await with passing CancellationToken\n    }\n\n    // Convert to Observable<T> using R3\n    void RxExample()\n    {\n        LMotion.Create(0f, 1f, 2f)\n            .ToObservable() // Create motion as Observable<T>\n            .Where(x => x > 0.5f) // Utilize R3 operators\n            .Select(x => x.ToString())\n            .Subscribe(x =>\n            {\n                tmpText.text = x;\n            })\n            .AddTo(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extension Methods for Common Transform Bindings in LitMotion\nDESCRIPTION: Demonstrates the use of extension methods from the LitMotion.Extensions namespace to simplify binding to common Unity Transform properties. Shows binding to position and scale properties.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/binding.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing UnityEngine;\nusing LitMotion;\nusing LitMotion.Extensions; // Include this namespace\n\npublic class Example : MonoBehaviour\n{\n    [SerializeField] Transform target;\n\n    void Start()\n    {\n        LMotion.Create(Vector3.zero, Vector3.one, 2f)\n            .BindToPosition(target); // Bind value to target.position\n\n        LMotion.Create(1f, 3f, 2f)\n            .BindToLocalScaleX(target); // Bind value to target.localScale.x\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sequence with Multiple Motions in C#\nDESCRIPTION: Creates a sequence combining multiple position motions using different methods (Append, Join, and Insert) and executes it. This demonstrates the basic structure for creating and running a sequence.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nLSequence.Create()\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionX(transform))\n    .Join(LMotion.Create(0f, 1f, 1f).BindToPositionY(transform))\n    .Insert(0f, LMotion.Create(0f, 1f, 1f).BindToPositionZ(transform))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Procedural Animation Using LitMotion with UniTask and Async/Await\nDESCRIPTION: Demonstrates using LitMotion with async/await and UniTask to create sequential animations. This approach provides a more readable alternative to Sequence-based animation by leveraging C# async patterns for procedural animation flow.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/design-philosophy.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nfor (int i = 0; i < 2; i++)\n{\n    // Motions created can be awaited directly\n    await LMotion.Create(0f, 4f, 2f).BindToPositionY(target);\n    await LMotion.Create(0f, 2f, 2f).BindToPositionX(target);\n    Debug.Log(\"Callback1\");\n}\n\nawait UniTask.WaitForSeconds(1f);\nawait LMotion.Create(target.position, Vector3.zero, 2f).BindToPosition(target);\nDebug.Log(\"Callback2\");\n```\n\n----------------------------------------\n\nTITLE: Binding a Value to a Motion in LitMotion\nDESCRIPTION: Demonstrates how to bind a motion to a variable, which initiates motion creation and playback. The bound value will be updated as the motion progresses.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/basic-concepts.md#2025-04-18_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar value = 0f;\nLMotion.Create(0f, 10f, 3f)\n    .WithEase(Ease.OutQuad)\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Avoiding Allocations in LitMotion Bindings with C#\nDESCRIPTION: Shows how to avoid allocations caused by lambda expression closures by passing a state object to the Bind method. This approach is more memory-efficient for performance-critical applications.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/binding.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass FooClass\n{\n    public float Value { get; set; }\n}\n\nvar target = new FooClass();\n\nLMotion.Create(0f, 10f, 2f)\n    .Bind(target, (x, target) => target.Value = x); // 第一引数に対象のオブジェクトを渡す\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector3MotionAdapter for Unity's Vector3 Type in LitMotion\nDESCRIPTION: This snippet demonstrates how to implement a custom motion adapter for Unity's Vector3 type by creating a struct that conforms to the IMotionAdapter interface. It includes the necessary assembly attribute for Burst compilation support and implements the Evaluate method for Vector3 interpolation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-adapter.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing UnityEngine;\nusing LitMotion;\n\n// The assembly attribute is necessary to support Burst for Jobs\n// Add the RegisterGenericJobType attribute to register MotionUpdateJob<T, TOptions, TAdapter>\n[assembly: RegisterGenericJobType(typeof(MotionUpdateJob<Vector3, NoOptions, Vector3MotionAdapter>))]\n\n// Create a structure implementing IMotionAdapter with type arguments specifying the target value type and additional options (if required, else use NoOptions)\npublic readonly struct Vector3MotionAdapter : IMotionAdapter<Vector3, NoOptions>\n{\n    // Implement the interpolation logic within the Evaluate method\n    public Vector3 Evaluate(ref Vector3 startValue, ref Vector3 endValue, ref NoOptions options, in MotionEvaluationContext context)\n    {\n        return Vector3.LerpUnclamped(startValue, endValue, context.Progress);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MotionHandle to Control Animations in LitMotion\nDESCRIPTION: Shows how to obtain and use a MotionHandle to interact with a running motion. The handle allows checking if a motion is active and controlling its completion or cancellation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/basic-concepts.md#2025-04-18_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 3f).Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential Animations with LSequence in C#\nDESCRIPTION: Demonstrates how to compose multiple motion animations in sequence using LSequence.Create(). The example shows chaining position animations for X, Y, and Z coordinates of a target object.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/whats-new-in-v2.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLSequence.Create()\n    .Append(LMotion.Create(-5f, 5f, 0.5f).BindToPositionX(target))\n    .Append(LMotion.Create(0f, 5f, 0.5f).BindToPositionY(target))\n    .Append(LMotion.Create(-2f, 2f, 1f).BindToPositionZ(target))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Binding Number Animation to TextMeshPro in C#\nDESCRIPTION: This code shows how to bind a number animation to a TextMeshPro text component using LMotion.Create(). It demonstrates a simple integer animation from 0 to 999 over 2 seconds.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/text-animation.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTMP_Text text;\nLMotion.Create(0, 999, 2f)\n    .BindToText(text);\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Motion in C#\nDESCRIPTION: Demonstrates how to create a motion from 0 to 10 over 2 seconds and run it without binding.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 2f).RunWithoutBinding();\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Animations Using LitMotion with UniRx Observables\nDESCRIPTION: Shows how to use Reactive Extensions (UniRx) with LitMotion to combine multiple animations. This example creates three separate animations as observables and combines them to update a transform's position, demonstrating a powerful alternative to Sequence-based animation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/design-philosophy.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Create motions as observables\nvar x = LMotion.Create(-5f, 5f, 2f).ToObservable();\nvar y = LMotion.Create(0f, 3f, 2f).ToObservable();\nvar z = LMotion.Create(-1f, 1f, 2f).ToObservable();\n\n// Combine x, y, z observables to update position\nObservable.CombineLatest(x, y, z, (x, y, z) => new Vector3(x, y, z))\n\t.Subscribe(x => transform.position = x);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence of Motions in LitMotion\nDESCRIPTION: Example showing how to create a sequence of motions using LSequence in LitMotion, combining multiple animations.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLSequence.Create()\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionX(transform))\n    .Join(LMotion.Create(0f, 1f, 1f).BindToPositionY(transform))\n    .Insert(0f, LMotion.Create(0f, 1f, 1f).BindToPositionZ(transform))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Motion with Method Chaining in LitMotion\nDESCRIPTION: Shows how to configure a motion using method chaining to set ease function, delay, and loop behavior.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/basic-concepts.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nLMotion.Create(0f, 10f, 3f)\n    .WithEase(Ease.OutQuad)\n    .WithDelay(2f)\n    .WithLoops(4, LoopType.Yoyo);\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential Animations with LSequence in C#\nDESCRIPTION: Demonstrates how to create sequential animations by chaining multiple motions using LSequence.Create(). This allows combining position animations on different axes in sequence.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/whats-new-in-v2.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLSequence.Create()\n    .Append(LMotion.Create(-5f, 5f, 0.5f).BindToPositionX(target))\n    .Append(LMotion.Create(0f, 5f, 0.5f).BindToPositionY(target))\n    .Append(LMotion.Create(-2f, 2f, 1f).BindToPositionZ(target))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple MotionHandles in C#\nDESCRIPTION: Illustrates how to use CompositeMotionHandle to manage multiple MotionHandle instances.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar handles = new CompositeMotionHandle();\n\nLMotion.Create(0f, 10f, 2f)\n    .Bind(() => Debug.Log(x))\n    .AddTo(handles);\n```\n\n----------------------------------------\n\nTITLE: Animating TextMesh Pro Characters with LitMotion in C#\nDESCRIPTION: This code demonstrates how to animate individual characters in a TextMesh Pro text element. It iterates through each character, creating color transitions from white to red and position animations that make characters bounce upward. Each character's animation is delayed based on its position in the text to create a sequential effect.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/textmesh-pro-character-animation.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTMP_Text text;\nfor (int i = 0; i < text.textInfo.characterCount; i++)\n{\n    LMotion.Create(Color.white, Color.red, 1f)\n        .WithDelay(i * 0.1f)\n        .WithEase(Ease.OutQuad)\n        .BindToTMPCharColor(text, i);\n    \n    LMotion.Punch.Create(Vector3.zero, Vector3.up * 30f, 1f)\n        .WithDelay(i * 0.1f)\n        .WithEase(Ease.OutQuad)\n        .BindToTMPCharPosition(text, i);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Value Binding in LitMotion with Action Delegate\nDESCRIPTION: Demonstrates the fundamental approach to binding a motion value to a variable using an Action<T> delegate. The motion updates the value from 0 to 10 over 2 seconds.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/binding.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar value = 0f;\nLMotion.Create(0f, 10f, 2f)\n    .Bind(x => value = x); // Pass Action<T> to update the value\n```\n\n----------------------------------------\n\nTITLE: Awaiting LitMotion Animations in Unity Coroutines Using ToYieldInstruction Method\nDESCRIPTION: This code demonstrates how to await the completion of a LitMotion animation within a Unity coroutine. It creates a motion that interpolates from 0 to 10 over 2 seconds, logs the current value during animation, and yields until the motion completes.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/await-motion-in-coroutine.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerator CoroutineExample()\n{\n    yield return LMotion.Create(0f, 10f, 2f).Bind(x => Debug.Log(x))\n        .ToYieldInstruction();\n}\n```\n\n----------------------------------------\n\nTITLE: Binding LitMotion to ReactiveProperty with R3 in C#\nDESCRIPTION: This code snippet shows how to bind a created motion to a ReactiveProperty<T> using the BindToReactiveProperty extension method provided by R3 integration. It creates a float motion from 0 to 10 over 2 seconds and binds it to a ReactiveProperty.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-r3.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar reactiveProperty = new ReactiveProperty<float>();\nLMotion.Create(0f, 10f, 2f)\n    .BindToReactiveProperty(reactiveProperty);\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Text Animation with LMotion\nDESCRIPTION: Creates a text animation with rich text support and scramble effect. Uses LMotion.String.Create128Bytes() to animate text with HTML-like markup, while supporting scramble characters effect in lowercase mode.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/text-animation.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nTMP_Text text;\nLMotion.String.Create128Bytes(\"\", \"<color=red>Zero</color> Allocation <i>Text</i> Tween! <b>Foooooo!!</b>\", 5f)\n    .WithRichText()\n    .WithScrambleChars(ScrambleMode.Lowercase)\n    .BindToText(text);\n```\n\n----------------------------------------\n\nTITLE: Using Insert Method for Timed Position Animations in C#\nDESCRIPTION: Shows how to use the Insert method to add motions at specific time positions within a sequence. This provides precise control over when each motion starts relative to the sequence timeline.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/sequence.md#2025-04-18_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n// Insert the x, y, and z motions at specified positions\nLSequence.Create()\n    .Insert(0.1f, LMotion.Create(0f, 1f, 1f).BindToPositionX(transform))\n    .Insert(0.2f, LMotion.Create(0f, 1f, 1f).BindToPositionY(transform))\n    .Insert(0.3f, LMotion.Create(0f, 1f, 1f).BindToPositionZ(transform))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Allocation-Free Binding with State Parameters in LitMotion\nDESCRIPTION: Shows how to avoid closure allocations by passing the target object as a state parameter to the Bind method. This technique helps improve performance by reducing garbage collection.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/binding.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass FooClass\n{\n    public float Value { get; set; }\n}\n\nvar target = new FooClass();\n\nLMotion.Create(0f, 10f, 2f)\n    .Bind(target, (x, target) => target.Value = x); // Pass the target object as the first argument\n```\n\n----------------------------------------\n\nTITLE: Formatting Numeric Motion with TMP_Text\nDESCRIPTION: Shows how to bind a float value to text with specific formatting. Creates a float animation from 0 to 100000 over 2 seconds, displaying the value with comma separation and two decimal places.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/text-animation.md#2025-04-18_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nTMP_Text text;\nLMotion.Create(0f, 100000f, 2f)\n    .BindToText(text, \"{0:N2}\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Bind Extension Method for the Foo Class\nDESCRIPTION: Custom extension method that allows binding float animations to the Value property of a Foo object. The method is defined generically to support any motion options or adapters that work with float values.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/custom-binding-extension-method.md#2025-04-18_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FooMotionExtensions\n{\n    public static MotionHandle BindToFooValue<TOptions, TAdapter>(this MotionBuilder<float, TOptions, TAdapter> builder, Foo target)\n        where TOptions : unmanaged, IMotionOptions\n        where TAdapter : unmanaged, IMotionAdapter<float, TOptions>\n    {\n        return builder.Bind(target, (x, target) =>\n        {\n            target.Value = x;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loop Completion Callbacks in C#\nDESCRIPTION: Example of using WithOnLoopComplete() to add a callback that triggers when each animation loop completes. The callback receives the number of completed loops as a parameter.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/whats-new-in-v2.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(...)\n    .WithOnLoopComplete(completedLoops => { })\n    .Bind(x => { })\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Value Animation Component in C#\nDESCRIPTION: This snippet shows how to create a simplified Animation Component for animating Slider.value using FloatPropertyAnimationComponent<TObject>. It demonstrates the use of LitMotionAnimationComponentMenu attribute and implements GetValue and SetValue methods.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-animation-component.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Serializable]\n[LitMotionAnimationComponentMenu(\"UI/Slider/Value\")]\npublic sealed class SliderValueAnimation : FloatPropertyAnimationComponent<Slider>\n{\n    protected override float GetValue(Slider target) => target.value;\n    protected override void SetValue(Slider target, in float value) => target.value = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delays Between Sequenced Animations with AppendInterval in C#\nDESCRIPTION: Shows how to add time intervals between sequential motions using the AppendInterval method. This allows for precise timing control between animations.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/sequence.md#2025-04-18_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nLSequence.Create()\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionX(transform))\n    .AppendInterval(0.5f)\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionY(transform))\n    .AppendInterval(0.5f)\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionZ(transform))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Vibration Settings in LitMotion\nDESCRIPTION: Shows how to customize vibration behavior using additional configuration options. WithFrequency controls vibration speed, WithDampingRatio affects decay rate, and WithRandomSeed (Shake only) sets a specific randomization pattern.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/punch-and-shake.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Punch.Create(0f, 5f, 2f)\n    .WithFrequency(20)\n    .WithDampingRatio(0f)\n    .BindToPositionX(target1);\n\nLMotion.Shake.Create(0f, 5f, 2f)\n    .WithFrequency(20)\n    .WithDampingRatio(0f)\n    .WithRandomSeed(123)\n    .BindToPositionX(target2);\n```\n\n----------------------------------------\n\nTITLE: Using MotionSettings with LMotion.Create() in C#\nDESCRIPTION: Shows how to use the created MotionSettings object with LMotion.Create() method to initialize an animation. The Bind method is used to define the action to be performed during the animation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/motion-settings.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(settings)\n    .Bind(x => { });\n```\n\n----------------------------------------\n\nTITLE: Using Join Method for Simultaneous Animations in C#\nDESCRIPTION: Demonstrates how to use the Join method to make multiple motions start and play simultaneously. All joined motions will begin at the same time.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/sequence.md#2025-04-18_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n// The x, y, and z motions will play simultaneously\nLSequence.Create()\n    .Join(LMotion.Create(0f, 1f, 1f).BindToPositionX(transform))\n    .Join(LMotion.Create(0f, 1f, 1f).BindToPositionY(transform))\n    .Join(LMotion.Create(0f, 1f, 1f).BindToPositionZ(transform))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Controlling LitMotion Animation using C# Methods\nDESCRIPTION: This snippet shows the common control methods for the LitMotionAnimation class. It demonstrates how to play/resume, pause, stop, and restart an animation from C# code.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-animation-script.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nLitMotionAnimation animation;\n\n// Play (or resume) the animation\nanimation.Play();\n\n// Pause the animation\nanimation.Pause();\n\n// Stop the animation\nanimation.Stop();\n\n// Restart the animation from the beginning\nanimation.Restart();\n```\n\n----------------------------------------\n\nTITLE: Fully Optimized Implementation for TMP_Text Using SetTextFormat\nDESCRIPTION: Implementation for TextMeshPro that uses ZString's SetTextFormat extension method to achieve completely zero-allocation text formatting by leveraging TMP_Text.SetText().\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-zstring.md#2025-04-18_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nbuilder.BindWithState(text, format, (x, target, format) =>\n{\n    ...\n    target.SetTextFormat(format, x);\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Sequences from PrimeTween to LitMotion\nDESCRIPTION: Demonstrates how to create animation sequences in both libraries. The syntax is similar but uses different method names - Chain/Group/Insert in PrimeTween versus Append/Join/Insert in LitMotion, which also requires Run() to start.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\nSequence.Create()\n    .Chain(...) \n    .Group(...)\n    .Insert(...);\n\n// LitMotion\nLSequence.Create()\n    .Append(...)\n    .Join(...)\n    .Insert(...)\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Using MotionSettings with LMotion.Create() in C#\nDESCRIPTION: Demonstrates how to use a previously created MotionSettings instance with LMotion.Create(). This allows for reusing predefined animation settings.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-settings.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(settings)\n    .Bind(x => { });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Motion Information in C#\nDESCRIPTION: Demonstrates how to get various motion data from MotionHandle properties.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Duration per loop\nvar duration = handle.Duration;\n\n// Total duration of the motion\nvar totalDuration = handle.TotalDuration;\n\n// Delay time\nvar delay = handle.Delay;\n\n// Number of loops\nvar loops = handle.Loops;\n\n// Number of completed loops\nvar completedLoops = handle.CompletedLoops;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Punch and Shake Vibration Motions in C#\nDESCRIPTION: Demonstrates how to create basic vibration effects using LMotion's Punch and Shake methods. The first parameter is the starting value, the second is the vibration strength, and the third is the duration in seconds.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/punch-and-shake.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Punch.Create(0f, 5f, 2f)\n    .BindToPositionX(target1);\n\nLMotion.Shake.Create(0f, 5f, 2f)\n    .BindToPositionX(target2);\n```\n\n----------------------------------------\n\nTITLE: Directly Awaiting MotionHandle in C#\nDESCRIPTION: Simple example showing how to directly await a MotionHandle to wait for its completion. This works because MotionHandle implements the GetAwaiter() method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/await-motion-in-async-await.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait handle;\n```\n\n----------------------------------------\n\nTITLE: Position Tweening in DOTween vs LitMotion\nDESCRIPTION: Demonstrates how to create position-based animations, showing the equivalent code for moving a transform between positions in both frameworks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar endValue = new Vector3(1f, 2f, 3f);\nvar duration = 1f;\n\n// DOTween\ntransform.DOMove(endValue, duration);\n\n// LitMotion\nLMotion.Create(transform.position, endValue, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Linking Motion Cancellation to GameObject in C#\nDESCRIPTION: Demonstrates how to automatically cancel a motion when a GameObject is destroyed.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(0f, 10f, 2f)\n    .Bind(() => Debug.Log(x))\n    .AddTo(this.gameObject);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Animation Component in C#\nDESCRIPTION: This snippet demonstrates how to create a custom Animation Component by inheriting from LitMotionAnimationComponent. It includes overrides for Play(), OnPause(), OnResume(), and OnStop() methods, along with the LitMotionAnimationComponentMenu attribute for specifying the menu name.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-animation-component.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Serializable]\n// The menu name displayed in the dropdown when pressing [Add...] can be specified using the LitMotionAnimationComponentMenu attribute\n[LitMotionAnimationComponentMenu(\"Custom/Custom Animation\")]\npublic class CustomAnimation : LitMotionAnimationComponent\n{\n    public override MotionHandle Play()\n    {\n        // Actions to perform when Play() is called and the animation starts\n        // Return the created MotionHandle\n    }\n\n    public override void OnPause()\n    {\n        // Actions to perform when Pause() is called\n    }\n\n    public override void OnResume()\n    {\n        // Actions to perform when Play() is called after a pause and the animation resumes\n    }\n\n    public override void OnStop()\n    {\n        // Actions to perform when Stop() is called\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Motion as an Observable with UniRx in C#\nDESCRIPTION: Creates a motion from 0 to 5 over 2 seconds as an IObservable<T> using the ToObservable() extension method, then subscribes to it to log values and manages subscription lifecycle with AddTo.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-unirx.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar observable = LMotion.Create(0f, 5f, 2f).ToObservable();\nobservable.Subscribe(x =>\n{\n    Debug.Log(x);\n})\n.AddTo(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Converting Motion to ValueTask in C#\nDESCRIPTION: Example of converting a LitMotion motion to a ValueTask for use with async/await. This method allows passing a CancellationToken to support cancellation of the asynchronous operation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/await-motion-in-async-await.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync ValueTask ExampleAsync(CancellationToken cancellationToken)\n{\n    await LMotion.Create(0f, 10f, 1f)\n        .RunWithoutBinding()\n        .ToValueTask(cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Value Tweens from PrimeTween to LitMotion\nDESCRIPTION: Demonstrates how to create custom value tweens in both systems. PrimeTween uses a Tween.Custom method with a callback, while LitMotion uses Create with a Bind method for the callback.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\nvar value = 0f;\nTween.Custom(value, endValue, duration, x => value = x);\n\n// LitMotion\nLMotion.Create(value, endValue, duration)\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Simplifying Motion Completion/Cancellation in C#\nDESCRIPTION: Shows how to use TryComplete() and TryCancel() methods for simplified motion control.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nhandle.TryComplete();\nhandle.TryCancel();\n```\n\n----------------------------------------\n\nTITLE: Preserving and Reusing Motion in C#\nDESCRIPTION: Illustrates how to preserve a motion for reuse after completion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Call Preserve()\nhandle.Preserve();\n\n// It can be reused after completion\nhandle.Complete();\nhandle.Time = 0;\n```\n\n----------------------------------------\n\nTITLE: Ensuring Storage Capacity for Motion Animations in C#\nDESCRIPTION: Pre-allocates memory for motion animations to prevent runtime allocations. This method reserves capacity in the internal array that stores motions for specific type combinations, reducing garbage collection overhead during execution.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/avoid-dynamic-memory-allocation.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMotionDispatcher.EnsureStorageCapacity<float, NoOptions, FloatMotionAdapter>(500);\nMotionDispatcher.EnsureStorageCapacity<Vector3, NoOptions, Vector3MotionAdapter>(1000);\n```\n\n----------------------------------------\n\nTITLE: Creating Motions with Custom Adapters in LitMotion\nDESCRIPTION: This example demonstrates how to use a custom adapter when creating a MotionBuilder. The adapter type is passed as a type argument to LMotion.Create method, allowing for animation of the custom type (Vector3 in this case).\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-adapter.md#2025-04-18_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nLMotion.Create<Vector3, NoOptions, Vector3MotionAdapter>(from, to, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Using SerializableMotionSettings in Unity MonoBehaviour\nDESCRIPTION: Demonstrates how to use SerializableMotionSettings in a Unity MonoBehaviour to make motion settings editable in the Inspector. This example shows binding the settings to a transform's X position.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-settings.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Example : MonoBehaviour\n{\n    [SerializeField] SerializableMotionSettings<float, NoOptions> settings;\n\n    void Start()\n    {\n        LMotion.Create(settings)\n            .BindToPositionX(transform);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MotionHandle Properties and Methods in C#\nDESCRIPTION: Lists the new properties and methods available on the MotionHandle class, including preservation, playback control, and animation state information.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/whats-new-in-v2.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMotionHandle handle;\n\n// methods\nhandle.Preserve();\nhandle.IsPlaying();\nhandle.TryComplete();\nhandle.TryCancel();\n\n// readonly property\nhandle.Duration;\nhandle.TotalDuration;\nhandle.Loops;\nhandle.ComplatedLoops;\nhandle.Delay;\n\n// property\nhandle.Time;\n```\n\n----------------------------------------\n\nTITLE: Converting Punch and Shake Animations from PrimeTween to LitMotion\nDESCRIPTION: Shows how to convert punch and shake animations between the libraries. PrimeTween uses specific methods for each effect, while LitMotion uses specialized Create methods from the Punch and Shake namespaces.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\nTween.ShakePosition(transform, ...);\nTween.PunchPosition(transform, ...);\n\n// LitMotion\nLMotion.Punch.Create(...)\n    .BindToPosition(transform);\nLMotion.Shake.Create(...)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Binding Numeric Motion to TMP_Text\nDESCRIPTION: Demonstrates binding a numeric motion to a TMP_Text object with zero allocation. Creates an integer animation that goes from 0 to 999 over 2 seconds.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/text-animation.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nTMP_Text text;\nLMotion.Create(0, 999, 2f)\n    .BindToText(text);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Binding Extension Method with LMotion in C#\nDESCRIPTION: This snippet demonstrates how to use the custom BindToFooValue extension method to animate the Value property of a Foo object from 0 to 10 over 2 seconds using LMotion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-binding-extension-method.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar foo = new Foo();\nLMotion.Create(0f, 10f, 2f)\n    .BindToFooValue(foo);\n```\n\n----------------------------------------\n\nTITLE: Checking if Motion is Playing in C#\nDESCRIPTION: Shows how to check if a motion is currently playing using IsPlaying() method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nif (handle.IsPlaying())\n{\n    DoSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing Motions in Unity Editor with LitMotion (C#)\nDESCRIPTION: This snippet demonstrates how to create and play motions using LitMotion in both Play Mode and Edit Mode. In Play Mode, motions are driven by the regular Update, while in Edit Mode, they are automatically scheduled on EditorApplication.update.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/play-motion-in-editor.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing UnityEngine;\nusing LitMotion;\n\nif (Application.isPlaying)\n{\n    // Play Mode(Runtime)では通常通りUpdate上で駆動される\n    LMotion.Create(0f, 10f, 2f)\n        .Bind(x => Debug.Log(x));\n}\nelse\n{\n    // Edit Modeで作成するとEditorApplication.update上で駆動される\n    LMotion.Create(0f, 10f, 2f)\n        .Bind(x => Debug.Log(x));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking and Controlling Motion State with MotionHandle in LitMotion\nDESCRIPTION: Demonstrates how to check if a motion is active and control it by completing or canceling it using the MotionHandle.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/basic-concepts.md#2025-04-18_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 3f).Bind(x => value = x);\n\nif (handle.IsActive())\n{\n    handle.Complete();\n    handle.Cancel();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Append Method for Sequential Animations in C#\nDESCRIPTION: Demonstrates how to use the Append method to play motions sequentially one after another. Each motion starts after the previous one completes.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/sequence.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n// The x, y, z motions will be played in order\nLSequence.Create()\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionX(transform))\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionY(transform))\n    .Append(LMotion.Create(0f, 1f, 1f).BindToPositionZ(transform))\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Converting MotionHandle to UniTask for Async Waiting\nDESCRIPTION: Demonstrates how to convert a LitMotion MotionHandle to a UniTask using the ToUniTask() method, allowing for awaiting motion animations with cancellation support.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-unitask.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar cts = new CancellationTokenSource();\nawait LMotion.Create(0f, 10f, 2f).Bind(x => Debug.Log(x))\n    .ToUniTask(cts.Token);\n```\n\n----------------------------------------\n\nTITLE: Binding LitMotion to ReactiveProperty in C#\nDESCRIPTION: Creates a ReactiveProperty<float> and binds a motion from 0 to 10 over 2 seconds to it using the BindToReactiveProperty extension method, allowing reactive updates to the property.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-unirx.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar reactiveProperty = new ReactiveProperty<float>();\nLMotion.Create(0f, 10f, 2f)\n    .BindToReactiveProperty(reactiveProperty);\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying EditorMotionScheduler for LitMotion in Unity Editor (C#)\nDESCRIPTION: This snippet shows how to explicitly specify the EditorMotionScheduler.Update as the scheduler for LitMotion in Unity Editor. This allows for more control over when the motion is updated.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/play-motion-in-editor.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing LitMotion;\nusing LitMotion.Editor;\n\nLMotion.Create(0f, 10f, 2f)\n    .WithScheduler(EditorMotionScheduler.Update)\n    .Bind(x => Debug.Log(x));\n```\n\n----------------------------------------\n\nTITLE: Animation Control Methods\nDESCRIPTION: Shows the different methods for controlling animation playback, including pause, complete, and kill operations.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.Pause();\ntween.Complete();\ntween.Kill();\n\n// LitMotion\nhandle.PlaybackSpeed = 0f;\nhandle.Complete();\nhandle.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Creating MotionSettings using object initializer in C#\nDESCRIPTION: Demonstrates how to create a MotionSettings instance using an object initializer. This example sets up animation parameters for a float value.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new MotionSettings<float, NoOptions>\n{\n    StartValue = 0f,\n    EndValue = 10f,\n    Duration = 2f,\n    Ease = Ease.OutQuad\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a ManualMotionDispatcher instance in C#\nDESCRIPTION: Initializes a new ManualMotionDispatcher object that can be used to manually control motion updates.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/manual-motion-dispatcher.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar dispatcher = new ManualMotionDispatcher();\n```\n\n----------------------------------------\n\nTITLE: Tween Settings Configuration\nDESCRIPTION: Demonstrates how to configure loop behavior and easing functions for animations in both frameworks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.SetLoops(2, LoopType.Yoyo)\n    .SetEase(Ease.OutQuad);\n\n// LitMotion\nbuilder.WithLoops(2, LoopType.Yoyo)\n    .WithEase(Ease.OutQuad);\n```\n\n----------------------------------------\n\nTITLE: Converting MotionHandle to Unity Awaitable (Unity 2023.1+)\nDESCRIPTION: Example of using ToAwaitable() extension method to convert MotionHandle to Unity's Awaitable class for efficient async/await in Unity 2023.1 and above.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/await-motion-in-async-await.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nasync Awaitable ExampleAsync(CancellationToken cancellationToken)\n{\n    await LMotion.Create(0f, 10f, 1f)\n        .RunWithoutBinding()\n        .ToAwaitable(cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Motion Existence in C#\nDESCRIPTION: Demonstrates how to check if a motion is active before completing it.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 2f).RunWithoutBinding();\n\nif (handle.IsActive()) handle.Complete();\n```\n\n----------------------------------------\n\nTITLE: Creating MotionSettings using MotionBuilder in C#\nDESCRIPTION: Shows how to create a MotionSettings instance using the MotionBuilder fluent interface. This method allows for a more chainable approach to setting up animation parameters.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-settings.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = LMotion.Create(0f, 10f, 2f)\n    .WithEase(Ease.OutQuad)\n    .ToMotionSettings();\n```\n\n----------------------------------------\n\nTITLE: Configuring a motion to use ManualMotionDispatcher in C#\nDESCRIPTION: Sets up a motion animation to be controlled by a ManualMotionDispatcher by specifying its Scheduler property when creating the motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/manual-motion-dispatcher.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Set the Scheduler to the created ManualMotionDispatcher's Scheduler\nvar handle = LMotion.Create(value, endValue, 2f)\n    .WithScheduler(dispatcher.Scheduler)\n    .BindToUnityLogger();\n```\n\n----------------------------------------\n\nTITLE: Converting Update Timing Settings from PrimeTween to LitMotion\nDESCRIPTION: Shows how to change the update mode for tweens between normal and fixed update. PrimeTween uses a useFixedUpdate parameter in settings, while LitMotion uses a WithScheduler method with a scheduler enum.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\nTween.PositionX(transform, endValue: 10f, new TweenSettings(duration: 1f, useFixedUpdate: true));\n\n// LitMotion\nLMotion.Create(transform.position.x, 10f, 1f)\n    .WithScheduler(MotionScheduler.FixedUpdate)\n    .BindToPositionX(transform);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cancellation Behavior with ToAwaitable method\nDESCRIPTION: Example showing how to customize cancellation behavior by passing CancelBehavior and additional parameters to the ToAwaitable method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/await-motion-in-async-await.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait LMotion.Create(0f, 10f, 1f)\n    .RunWithoutBinding()\n    .ToAwaitable(CancelBehavior.Complete, true, cancellationToken);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Action Alternative in LitMotion with C#\nDESCRIPTION: Demonstrates how to achieve delayed action functionality in LitMotion as an alternative to DelayedCall(). Creates a motion with arbitrary float values and attaches completion callback, meant for cases where direct DelayedCall replacement is needed during migration.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/faq.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// The value doesn't matter, so any value will work\nLMotion.Create(0f, 1f, delay)\n    .WithOnComplete(action)\n    .RunWithoutBinding();\n```\n\n----------------------------------------\n\nTITLE: Using Tweens with Coroutines and Async/Await in C#\nDESCRIPTION: Demonstrates how to use tweens with coroutines and async/await in both DOTween and LitMotion. LitMotion simplifies async usage by making the handle directly awaitable.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\nyield return tween.WaitForCompletion();\nawait tween.AsyncWaitForCompletion();\n\n// LitMotion\nyield return handle.ToYieldInstruction();\nawait handle;\n```\n\n----------------------------------------\n\nTITLE: Manually updating motions with ManualMotionDispatcher in C#\nDESCRIPTION: Manually advances all motions registered with the dispatcher by a specified delta time.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/manual-motion-dispatcher.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndispatcher.Update(0.1);\n```\n\n----------------------------------------\n\nTITLE: Updating ManualMotionDispatcher Usage in C#\nDESCRIPTION: Illustrates the changes in ManualMotionDispatcher usage, showing how to use the new Default instance in v2 which replaced the static methods from v1.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-v1.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// v1\nManualMotionDispatcher.Update(0.1);\n\n// v2\nManualMotionDispatcher.Default.Update(0.1);\n```\n\n----------------------------------------\n\nTITLE: Converting MotionHandle to ValueTask with Cancellation Token\nDESCRIPTION: Example of converting a MotionHandle to ValueTask using ToValueTask() method to enable async/await pattern with cancellation support.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/await-motion-in-async-await.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync ValueTask ExampleAsync(CancellationToken cancellationToken)\n{\n    await LMotion.Create(0f, 10f, 1f)\n        .RunWithoutBinding()\n        .ToValueTask(cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extension Methods for Binding in LitMotion with C#\nDESCRIPTION: Demonstrates the use of extension methods from the LitMotion.Extensions namespace to simplify binding operations. These methods provide convenient ways to bind values to common Unity properties like Transform position and scale.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/binding.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing UnityEngine;\nusing LitMotion;\nusing LitMotion.Extensions; // usingを追加\n\npublic class Example : MonoBehaviour\n{\n    [SerializeField] Transform target;\n\n    void Start()\n    {\n        LMotion.Create(Vector3.zero, Vector3.one, 2f)\n            .BindToPosition(target); // 値をtarget.positionにバインドする\n\n        LMotion.Create(1f, 3f, 2f)\n            .BindToLocalScaleX(target); // 値をtarget.localScale.xにバインドする\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LitMotion in Play Mode and Edit Mode\nDESCRIPTION: This snippet demonstrates how to create a LitMotion animation that works in both Play Mode and Edit Mode. In Play Mode, it operates on Update, while in Edit Mode, it uses EditorApplication.update.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/play-motion-in-editor.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing UnityEngine;\nusing LitMotion;\n\nif (Application.isPlaying)\n{\n    // In Play Mode (Runtime), it operates as usual on Update\n    LMotion.Create(0f, 10f, 2f)\n        .Bind(x => Debug.Log(x));\n}\nelse\n{\n    // In Edit Mode, it operates on EditorApplication.update\n    LMotion.Create(0f, 10f, 2f)\n        .Bind(x => Debug.Log(x));\n}\n```\n\n----------------------------------------\n\nTITLE: Using the global ManualMotionDispatcher.Default in C#\nDESCRIPTION: Updates all motions registered with the default global ManualMotionDispatcher instance.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/manual-motion-dispatcher.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nManualMotionDispatcher.Default.Update(0.1);\n```\n\n----------------------------------------\n\nTITLE: Creating MotionSettings in C# for LitMotion Animation\nDESCRIPTION: Demonstrates two methods of creating MotionSettings: using object initializer syntax and using MotionBuilder. The settings define animation parameters such as start value, end value, duration, and easing function.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/motion-settings.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// オブジェクト初期化子を用いて作成\nvar settings = new MotionSettings<float, NoOptions>\n{\n    StartValue = 0f,\n    EndValue = 10f,\n    Duration = 2f,\n    Ease = Ease.OutQuad\n};\n\n// MotionBuilderを用いて作成\nvar settings = LMotion.Create(0f, 10f, 2f)\n    .WithEase(Ease.OutQuad)\n    .ToMotionSettings();\n```\n\n----------------------------------------\n\nTITLE: Value Tweening in C# with LeanTween and LitMotion\nDESCRIPTION: Shows how to tween a float value using LeanTween and the corresponding method in LitMotion. It demonstrates updating a variable over time from a start value to an end value.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-leantween.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\nvar value = 0f;\nLeanTween.value(gameObject, x => value = x, value, endValue, duration);\n\n// LitMotion\nLMotion.Create(value, endValue, duration)\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Position Tweening in C# with LeanTween and LitMotion\nDESCRIPTION: Demonstrates how to perform position tweening using LeanTween and the equivalent operation using LitMotion. It shows moving a GameObject to a specific position over a duration.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-leantween.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar endValue = new Vector3(1f, 2f, 3f);\nvar duration = 1f;\n\n// LeanTween\nLeanTween.move(gameObject, endValue, duration);\n\n// LitMotion\nLMotion.Create(tranform.position, endValue, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cancellation Behavior with ToAwaitable in C#\nDESCRIPTION: Example showing how to configure cancellation behavior when using ToAwaitable(). This demonstrates specifying CancelBehavior and setting cancelAwaitOnMotionCanceled to respond to both token cancellation and motion cancellation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/await-motion-in-async-await.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait LMotion.Create(0f, 10f, 1f)\n    .RunWithoutBinding()\n    .ToAwaitable(CancelBehavior.Complete, true, cancellationToken);\n```\n\n----------------------------------------\n\nTITLE: Resetting the global ManualMotionDispatcher on startup in C#\nDESCRIPTION: Initializes the global ManualMotionDispatcher.Default at application startup to avoid unexpected behavior when Domain Reload is disabled.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/manual-motion-dispatcher.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Awake()\n{\n    ManualMotionDispatcher.Default.Reset();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Text Animation with LMotion in C#\nDESCRIPTION: This snippet demonstrates how to create a rich text animation using LMotion.String.Create128Bytes(). It includes support for rich text tags, scramble effects, and binding to a TextMeshPro text component.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/text-animation.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTMP_Text text;\nLMotion.String.Create128Bytes(\"\", \"<color=red>Zero</color> Allocation <i>Text</i> Tween! <b>Foooooo!!</b>\", 5f)\n    .WithRichText()\n    .WithScrambleChars(ScrambleMode.Lowercase)\n    .BindToText(text);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Debug Name in LitMotion\nDESCRIPTION: Demonstrates how to create a motion with a custom debug name using the WithDebugName() method. This allows for easier identification of specific motions in the debugger.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-debugger.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 1f, 1f)\n    .WithDebugName(\"name\")\n    .Bind(x => { });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GC Allocation with Standard BindToText in LitMotion\nDESCRIPTION: Example showing how the standard implementation of BindToText causes GC allocation per frame due to boxing when formatting text values.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-zstring.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nTMP_Text text;\nLMotion.Create(0, 100, 2f)\n    .BindToText(text, \"{0:0}\"); // Causes GC allocation per frame\n```\n\n----------------------------------------\n\nTITLE: Canceling a Motion in C#\nDESCRIPTION: Illustrates how to cancel a running motion using the Cancel() method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 2f).RunWithoutBinding();\nhandle.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Value Tweening Implementation\nDESCRIPTION: Shows how to animate a float value over time using both frameworks, demonstrating the binding mechanism for value updates.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\nvar value = 0f;\nDOTween.To(() => value, x => value = x, endValue, duration);\n\n// LitMotion\nLMotion.Create(value, endValue, duration)\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Updating WithBindOnSchedule to WithImmediateBind in C#\nDESCRIPTION: Shows the migration from v1's WithBindOnSchedule() to v2's WithImmediateBind() method, noting that the new default value is true making explicit calls unnecessary in most cases.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-v1.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// v1\nLMotion.Create(0f, 1f, 1f)\n    .WithBindOnSchedule()\n    .BindToPositionX(transform);\n\n// v2\nLMotion.Create(0f, 1f, 1f)\n    .WithImmediateBind() // Default is true, so there's no need to call it explicitly.\n    .BindToPositionX(transform);\n```\n\n----------------------------------------\n\nTITLE: Default Debug Name Format in C#\nDESCRIPTION: Shows the default format used for motion debug names in the debugger window. The format includes the storage ID, index, and version of the motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-debugger.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n$\"MotionHandle`{StorageId}({Index}:{Version})\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Dispose Behavior for MotionHandle in C#\nDESCRIPTION: Demonstrates how to customize the dispose behavior of a converted MotionHandle by specifying a DisposeBehavior argument. When set to Complete, calling Dispose() will complete the motion rather than canceling it.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/convert-to-disposable.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar disposable = handle.ToDisposable(DisposeBehavior.Complete);\n\n// handle.Complete() will be called\ndisposable.Dispose();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Motion Playback Speed in C#\nDESCRIPTION: Demonstrates how to modify the playback speed of a motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 2f).RunWithoutBinding();\nhandle.PlaybackSpeed = 2f;\n```\n\n----------------------------------------\n\nTITLE: From Value Animation Setup\nDESCRIPTION: Demonstrates setting up animations with explicit start values in both frameworks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntransform.DOMoveX(endValue, duration).From(startValue);\n\n// LitMotion\nLMotion.Create(startValue, endValue, duration)\n    .BindToPositionX(transform);\n```\n\n----------------------------------------\n\nTITLE: Defining LitMotion Package Organization\nDESCRIPTION: Markdown table defining the namespace structure of LitMotion, outlining the purpose and functionality of each namespace component including core motion handling, Unity adapters, editor tools, extensions, and animation features.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/package-structure.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Namespace | Description |\n| - | - |\n| LitMotion | Contains essential functionalities for creating and driving motions. |\n| LitMotion.Adapters | Includes adapters for Unity-specific types like primitive types and Vector3. |\n| LitMotion.Editor | Contains functionalities to operate motions within the editor. |\n| LitMotion.Extensions | Contains extension methods to bind motions to Unity components. These functionalities are separated into a different asmdef file. |\n| LitMotion.Animation | A package that provides animation functionality working with LitMotion. The LitMotion Animation component, which allows you to create complex animations directly from the Inspector, becomes available. This is provided as a separate package. |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Motion Debug Name\nDESCRIPTION: Shows how to retrieve the debug name of a motion using the GetDebugName() method. This can be useful for debugging and logging purposes.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-debugger.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar name = handle.GetDebugName();\n```\n\n----------------------------------------\n\nTITLE: From Tweening in C# with LeanTween and LitMotion\nDESCRIPTION: Illustrates how to set a starting value for a tween using LeanTween's 'from' method and the equivalent approach in LitMotion. It shows tweening the X position of a GameObject.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-leantween.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\nLeanTween.moveX(gameObject, endValue, duration)\n    .from(startValue);\n\n// LitMotion\nLMotion.Create(startValue, endValue, duration)\n    .BindToPositionX(transform);\n```\n\n----------------------------------------\n\nTITLE: Running Motions Without Binding in LitMotion\nDESCRIPTION: Shows how to use RunWithoutBinding() to play motions without binding them to any variable. This is useful when you only care about completion callbacks or other side effects.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/binding.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(0f, 0f, 2f)\n    .WithOnComplete(() => Debug.Log(\"Complete!\"))\n    .RunWithoutBinding();\n```\n\n----------------------------------------\n\nTITLE: Punch and Shake Animation Configuration\nDESCRIPTION: Shows how to create punch and shake effects in both frameworks using position-based animations.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntransform.DOPunchPosition(...);\ntransform.DOShakePosition(...);\n\n// LitMotion\nLMotion.Punch.Create(...)\n    .BindToPosition(transform);\nLMotion.Shake.Create(...)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Using From in Tweens in C#\nDESCRIPTION: Illustrates how to set a starting value for a tween in DOTween and LitMotion. LitMotion simplifies this by including the start value in the Create method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntransform.DOMoveX(endValue, duration).From(startValue) \n\n// LitMotion\nLMotion.Create(startValue, endValue, duration)\n    .BindToPositionX(transform);\n```\n\n----------------------------------------\n\nTITLE: Default Debug Name Format for LitMotion in C#\nDESCRIPTION: Shows the default format for debug names in LitMotion. It includes the StorageId, Index, and Version of the motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/litmotion-debugger.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n$\"MotionHandle`{StorageId}({Index}:{Version})\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tween Sequences in C#\nDESCRIPTION: Shows how to create and manage sequences of tweens in DOTween and LitMotion. LitMotion uses LSequence.Create() and requires an explicit Run() call.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\nDOTween.Sequence()\n    .Append(...)\n    .Join(...)\n    .Insert(...);\n\n// LitMotion\nLSequence.Create()\n    .Append(...)\n    .Join(...)\n    .Insert(...)\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: MotionHandle Properties and Methods Usage in C#\nDESCRIPTION: Shows the available properties and methods for the MotionHandle class, including control methods like Preserve() and IsPlaying(), and properties for accessing duration, loops, and timing information.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/whats-new-in-v2.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMotionHandle handle;\n\n// methods\nhandle.Preserve();\nhandle.IsPlaying();\nhandle.TryComplete();\nhandle.TryCancel();\n\n// readonly properties\nhandle.Duration;\nhandle.TotalDuration;\nhandle.Loops;\nhandle.CompletedLoops;\nhandle.Delay;\n\n// properties\nhandle.Time;\n```\n\n----------------------------------------\n\nTITLE: Animation Sequence Creation\nDESCRIPTION: Demonstrates how to create and configure animation sequences in both frameworks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\nDOTween.Sequence()\n    .Append(...)\n    .Join(...)\n    .Insert(...);\n\n// LitMotion\nLSequence.Create()\n    .Append(...)\n    .Join(...)\n    .Insert(...)\n    .Run();\n```\n\n----------------------------------------\n\nTITLE: Running Motions Without Binding in LitMotion with C#\nDESCRIPTION: Shows how to run a motion without binding it to any value using the RunWithoutBinding() method. This is useful when you only need the motion for its side effects like completion callbacks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/binding.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(0f, 0f, 2f)\n    .WithOnComplete(() => Debug.Log(\"Complete!\"))\n    .RunWithoutBinding();\n```\n\n----------------------------------------\n\nTITLE: Defining Unity Editor Version in YAML\nDESCRIPTION: YAML configuration specifying Unity Editor version 6000.0.23f1 and its corresponding revision hash. This file ensures project compatibility with the correct Unity Editor version.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/src/LitMotion/ProjectSettings/ProjectVersion.txt#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nm_EditorVersion: 6000.0.23f1\nm_EditorVersionWithRevision: 6000.0.23f1 (1c4764c07fb4)\n```\n\n----------------------------------------\n\nTITLE: Implementing Loop Completion Callbacks in C#\nDESCRIPTION: Shows how to add a callback that executes when each animation loop completes using the WithOnLoopComplete method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/whats-new-in-v2.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create(...)\n    .WithOnLoopComplete(complatedLoops => { })\n    .Bind(x => { })\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween Settings in C#\nDESCRIPTION: Shows how to set loop and ease settings for tweens in DOTween and LitMotion. LitMotion uses a builder pattern with WithLoops and WithEase methods.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.SetLoops(2, LoopType.Yoyo)\n    .SetEase(Ease.OutQuad);\n\n// LitMotion\nbuilder.WithLoops(2, LoopType.Yoyo)\n    .WithEase(Ease.OutQuad);\n```\n\n----------------------------------------\n\nTITLE: GameObject Link Configuration\nDESCRIPTION: Demonstrates how to link animations to GameObjects for lifecycle management.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.SetLink(gameObject);\n\n// LitMotion\nhandle.AddTo(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Converting Inspector-Serialized Tweens from PrimeTween to LitMotion\nDESCRIPTION: Demonstrates how to use serialized tween settings in the Inspector. PrimeTween uses TweenSettings<T> class, while LitMotion uses SerializableMotionSettings<T, NoOptions> with a different creation syntax.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\n[SerializeField] TweenSettings<float> settings;\nTween.PositionY(transform, settings);\n\n// LitMotion\n[SerializeField] SerializableMotionSettings<float, NoOptions> settings;\nLMotion.Create(settings).BindToPositionY(transform);\n```\n\n----------------------------------------\n\nTITLE: Update Timing Configuration\nDESCRIPTION: Shows how to configure the update timing mode for animations in both frameworks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.SetUpdate(UpdateType.Fixed);\n\n// LitMotion\nbuilder.WithScheduler(MotionScheduler.FixedUpdate);\n```\n\n----------------------------------------\n\nTITLE: Tweening Position in C#\nDESCRIPTION: Demonstrates how to tween an object's position using DOTween and LitMotion. It shows the syntax difference for creating a position tween with a specified end value and duration.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar endValue = new Vector3(1f, 2f, 3f);\nvar duration = 1f;\n\n// DOTween\ntransform.DOMove(endValue, duration);\n\n// LitMotion\nLMotion.Create(tranform.position, endValue, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Migrating Position Tweens from LeanTween to LitMotion in C#\nDESCRIPTION: Demonstrates how to convert a LeanTween position tween to its LitMotion equivalent. The code moves a GameObject to a specified end position over a given duration.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-leantween.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar endValue = new Vector3(1f, 2f, 3f);\nvar duration = 1f;\n\n// LeanTween\nLeanTween.move(gameObject, endValue, duration);\n\n// LitMotion\nLMotion.Create(transform.position, endValue, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in LitMotion Unity Framework\nDESCRIPTION: Demonstrates how to retrieve and modify the unhandled exception handler in LitMotion. Shows both getting the current handler and registering a new one that uses Debug.LogWarning instead of the default Debug.LogException.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/exception-handling.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing UnityEngine;\nusing LitMotion;\n\n// Retrieve the currently set exception handling (Action<Exception>)\nvar handler = MotionDispatcher.GetUnhandledExceptionHandler();\n\n// Change to display a warning using LogWarning instead of LogException\nMotionDispatcher.RegisterUnhandledExceptionHandler(ex => Debug.LogWarning(ex));\n```\n\n----------------------------------------\n\nTITLE: Introducing LitMotionAnimationComponent Usage\nDESCRIPTION: Class reference showing the extension point for creating custom animation components using LitMotionAnimationComponent\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-animation-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nLitMotionAnimationComponent\n```\n\n----------------------------------------\n\nTITLE: Formatting Float Animation with LMotion in C#\nDESCRIPTION: This snippet illustrates how to animate a float value with formatting. It uses LMotion.Create() to animate from 0 to 100000 over 2 seconds, applying a format string to display the result with comma separators and two decimal places.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/text-animation.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTMP_Text text;\nLMotion.Create(0f, 100000f, 2f)\n    .BindToText(text, \"{0:N2}\");\n```\n\n----------------------------------------\n\nTITLE: Converting Value Tweens from LeanTween to LitMotion in C#\nDESCRIPTION: Shows how to migrate a LeanTween value tween to LitMotion. The code tweens a float value and updates it using a callback function.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-leantween.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\nvar value = 0f;\nLeanTween.value(gameObject, x => value = x, value, endValue, duration);\n\n// LitMotion\nLMotion.Create(value, endValue, duration)\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Safe Mode Exception Handling\nDESCRIPTION: Demonstrates how to configure exception handling similar to DOTween's Safe Mode.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Log caught exceptions as warnings in the console\nMotionDispatcher.RegisterUnhandledExceptionHandler(ex => Debug.LogWarning(ex));\n```\n\n----------------------------------------\n\nTITLE: Implementing IntegerOptions in C#\nDESCRIPTION: This snippet shows how to create custom options for integer motions by implementing the IMotionOptions interface. It defines a structure with a RoundingMode property.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/custom-adapter.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct IntegerOptions : IMotionOptions, IEquatable<IntegerOptions>\n{\n    public RoundingMode RoundingMode;\n\n    // Equals, GetHashCode, etc.\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Tween Settings from PrimeTween to LitMotion\nDESCRIPTION: Demonstrates how to set various tween properties like easing, loops, and cycle modes. PrimeTween uses parameters in the tween creation method, while LitMotion uses fluent method chaining with With* methods.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\nTween.Position(transform, endValue: endValue, duration: duration, ease: Ease.InOutSine, cycle: 2, cycleMode: CycleMode.Yoyo);\n\n// LitMotion\nLMotion.Create(transform.position, endValue, duration)\n    .WithLoops(2, LoopType.Yoyo)\n    .WithEase(Ease.OutQuad)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Implementing 'From' Tweens in LitMotion (C#)\nDESCRIPTION: Illustrates how to replicate LeanTween's 'from' functionality in LitMotion. The example shows tweening the X position of a transform from a start value to an end value.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-leantween.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\nLeanTween.moveX(gameObject, endValue, duration)\n    .from(startValue);\n\n// LitMotion\nLMotion.Create(startValue, endValue, duration)\n    .BindToPositionX(transform);\n```\n\n----------------------------------------\n\nTITLE: Installing LitMotion via Package Manager in Unity\nDESCRIPTION: Instructions for installing LitMotion using Unity's Package Manager by adding a Git URL dependency.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"com.annulusgames.lit-motion\": \"https://github.com/annulusgames/LitMotion.git?path=src/LitMotion/Assets/LitMotion\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Motion to Awaitable in Unity 2023.1+ with C#\nDESCRIPTION: Example of using the ToAwaitable() extension method available in Unity 2023.1 and later. This converts a MotionHandle to Unity's Awaitable class for efficient async/await handling.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/await-motion-in-async-await.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nasync Awaitable ExampleAsync(CancellationToken cancellationToken)\n{\n    await LMotion.Create(0f, 10f, 1f)\n        .RunWithoutBinding()\n        .ToAwaitable(cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween Settings in LitMotion (C#)\nDESCRIPTION: Demonstrates how to set up tween properties like repetition, loop type, and easing in LitMotion, compared to LeanTween. The example shows setting up a tween with 2 repetitions, ping-pong looping, and an ease out quad easing function.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-leantween.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\ndescr.setRepeat(2)\n    .setLoopPingPong()\n    .setEase(LeanTweenType.easeOutQuad);\n\n// LitMotion\nbuilder.WithLoops(2, LoopType.Flip)\n    .WithEase(Ease.OutQuad);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Binding Extension Method for MotionBuilder in C#\nDESCRIPTION: This code defines an extension method BindToFooValue for MotionBuilder to animate the Value property of a Foo object. It uses generics to support various motion options and adapters while maintaining zero allocation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-binding-extension-method.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class FooMotionExtensions\n{\n    public static MotionHandle BindToFooValue<TOptions, TAdapter>(this MotionBuilder<float, TOptions, TAdapter> builder, Foo target)\n        where TOptions : unmanaged, IMotionOptions\n        where TAdapter : unmanaged, IMotionAdapter<float, TOptions>\n    {\n        return builder.Bind(target, (x, target) =>\n        {\n            target.Value = x;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Tween Control in LitMotion (C#)\nDESCRIPTION: Shows how to control tween playback in LitMotion compared to LeanTween. The example demonstrates pausing and cancelling a tween.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-leantween.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\ndescr.pause();\ndescr.cancel();\n\n// LitMotion\nhandle.PlaybackSpeed = 0f;\nhandle.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Tween Control in C# with LeanTween and LitMotion\nDESCRIPTION: Shows how to control tween playback, such as pausing and canceling, in both LeanTween and LitMotion. It demonstrates pausing a tween by setting playback speed to 0 in LitMotion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-leantween.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\ndescr.pause();\ndescr.cancel();\n\n// LitMotion\nhandle.PlaybackSpeed = 0f;\nhandle.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Converting Position Tweens from PrimeTween to LitMotion\nDESCRIPTION: Shows how to convert a basic position tween from PrimeTween syntax to LitMotion syntax. In PrimeTween, a single method call is used, while LitMotion uses a fluent API with creation and binding steps.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar endValue = new Vector3(1f, 2f, 3f);\nvar duration = 1f;\n\n// PrimeTween\nTween.Position(transform, endValue, duration);\n\n// LitMotion\nLMotion.Create(transform.position, endValue, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Basic Value Binding in LitMotion with C#\nDESCRIPTION: Demonstrates the basic way to bind a motion value to a variable using an Action<T> delegate. The motion value is updated in the PlayerLoop specified by the Scheduler and reflected in the bound field/property.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/binding.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar value = 0f;\nLMotion.Create(0f, 10f, 2f)\n    .Bind(x => value = x); // Action<T>で値を反映させる処理を渡す\n```\n\n----------------------------------------\n\nTITLE: Converting Tween Control Operations from PrimeTween to LitMotion\nDESCRIPTION: Shows how to control running tweens with operations like pause, complete, and kill. PrimeTween uses properties and methods on the tween object, while LitMotion uses different method names and a playback speed property for pausing.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\ntween.isPaused = true;\ntween.Complete();\ntween.Kill();\n\n// LitMotion\nhandle.PlaybackSpeed = 0f;\nhandle.Complate();\nhandle.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Motion Time in C#\nDESCRIPTION: Shows how to manually set the elapsed time of a motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Manually set the elapsed time of the motion\nhandle.Time = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Converting Coroutine and async/await Usage from PrimeTween to LitMotion\nDESCRIPTION: Shows how to use tweens with coroutines and async/await in both libraries. The syntax is nearly identical, with both using ToYieldInstruction() for coroutines and direct awaiting for async methods.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-primetween.md#2025-04-18_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n// PrimeTween\nyield return tween.ToYieldInstruction();\nawait tween;\n\n// LitMotion\nyield return handle.ToYieldInstruction();\nawait handle;\n```\n\n----------------------------------------\n\nTITLE: Linking Tweens to GameObjects in C#\nDESCRIPTION: Shows how to link tweens to GameObjects in DOTween and LitMotion. LitMotion uses an AddTo method on the handle object.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.SetLink(gameObject);\n\n// LitMotion\nhandle.AddTo(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Completing a Motion in C#\nDESCRIPTION: Shows how to complete a running motion using the Complete() method.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-control.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 10f, 2f).RunWithoutBinding();\nhandle.Complete();\n```\n\n----------------------------------------\n\nTITLE: Modifying MotionSettings using 'with' expression in C#\nDESCRIPTION: Shows how to create a new MotionSettings instance by modifying an existing one using the 'with' expression. This is possible because MotionSettings is a record type.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/motion-settings.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar newSettings = settings with\n{\n    StartValue = 5f\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debug Name for LitMotion in C#\nDESCRIPTION: Shows how to retrieve the debug name of a motion using the GetDebugName() method on the motion handle.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/litmotion-debugger.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar name = handle.GetDebugName();\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Mode in LitMotion C#\nDESCRIPTION: Shows how to implement a Safe Mode equivalent in LitMotion to display tween exceptions as warnings. This is done by registering an unhandled exception handler.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// catchした例外を警告としてConsoleに表示する\nMotionDispatcher.RegisterUnhandledExceptionHandler(ex => Debug.LogWarning(ex));\n```\n\n----------------------------------------\n\nTITLE: Initializing ManualMotionDispatcher in C#\nDESCRIPTION: Creates a new instance of ManualMotionDispatcher for manual motion updates.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/manual-motion-dispatcher.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar dispatcher = new ManualMotionDispatcher();\n```\n\n----------------------------------------\n\nTITLE: Converting MotionHandle to IDisposable in C#\nDESCRIPTION: Shows how to convert a MotionHandle to an IDisposable interface. By default, calling Dispose() will cancel the motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/convert-to-disposable.md#2025-04-18_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar disposable = handle.ToDisposable();\n```\n\n----------------------------------------\n\nTITLE: Updating ManualMotionDispatcher in C#\nDESCRIPTION: Shows how to manually update the ManualMotionDispatcher with a specified delta time. This will update all motions assigned to this dispatcher.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/manual-motion-dispatcher.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndispatcher.Update(0.1);\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Motion with LitMotion and R3 in C#\nDESCRIPTION: This snippet demonstrates how to create a motion as an Observable<T> using the ToObservable() method from R3 integration. It creates a float motion from 0 to 5 over 2 seconds and subscribes to it, logging the values.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-r3.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar observable = LMotion.Create(0f, 5f, 2f).ToObservable();\nobservable.Subscribe(x =>\n{\n    Debug.Log(x);\n})\n.AddTo(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Using Default ManualMotionDispatcher in C#\nDESCRIPTION: Demonstrates the use of the global ManualMotionDispatcher.Default for scenarios requiring a globally accessible dispatcher. It updates all motions assigned to the default dispatcher.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/manual-motion-dispatcher.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nManualMotionDispatcher.Default.Update(0.1);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Adapter in LitMotion C#\nDESCRIPTION: This snippet demonstrates how to use a custom adapter when creating a motion with LMotion.Create. It shows passing the Vector3MotionAdapter as a type argument.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/custom-adapter.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLMotion.Create<Vector3, NoOptions, Vector3MotionAdapter>(from, to, duration)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Resetting Default ManualMotionDispatcher in C#\nDESCRIPTION: Shows how to reset the ManualMotionDispatcher.Default to avoid unexpected behavior when Domain Reload is disabled. This should be called on application startup.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/manual-motion-dispatcher.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Awake()\n{\n    ManualMotionDispatcher.Default.Reset();\n}\n```\n\n----------------------------------------\n\nTITLE: Tweening Values in C#\nDESCRIPTION: Shows how to tween a float value using both DOTween and LitMotion. The LitMotion version uses a Create method and Bind to update the value.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\nvar value = 0f;\nDOTween.To(() => value, x => value = x, endValue, duration);\n\n// LitMotion\nLMotion.Create(value, endValue, duration)\n    .Bind(x => value = x);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Motion with ManualMotionDispatcher in C#\nDESCRIPTION: Demonstrates how to create a motion and assign it to a ManualMotionDispatcher's scheduler. This allows the motion to be updated manually through the dispatcher.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/manual-motion-dispatcher.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(value, endValue, 2f)\n    .WithScheduler(dispatcher.Scheduler)\n    .BindToUnityLogger();\n```\n\n----------------------------------------\n\nTITLE: Implementing Punch and Shake Effects in C#\nDESCRIPTION: Demonstrates how to create punch and shake effects in both DOTween and LitMotion. LitMotion uses specific Punch and Shake classes for these effects.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntransform.DOPunchPosition(...) \ntransform.DOShakePosition(...) \n\n// LitMotion\nLMotion.Punch.Create(...)\n    .BindToPosition(transform);\nLMotion.Shake.Create(...)\n    .BindToPosition(transform);\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying EditorMotionScheduler in LitMotion\nDESCRIPTION: This snippet shows how to explicitly specify EditorMotionScheduler.Update as the scheduler for a LitMotion animation. This approach can be used to ensure the motion is driven by the editor update loop.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/play-motion-in-editor.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing LitMotion;\nusing LitMotion.Editor;\n\nLMotion.Create(0f, 10f, 2f)\n    .WithScheduler(EditorMotionScheduler.Update)\n    .Bind(x => Debug.Log(x));\n```\n\n----------------------------------------\n\nTITLE: Controlling Tweens in C#\nDESCRIPTION: Demonstrates how to pause, complete, and kill tweens in DOTween and their equivalent operations in LitMotion. LitMotion uses different method names and a handle object.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.Pause();\ntween.Complete();\ntween.Kill();\n\n// LitMotion\nhandle.PlaybackSpeed = 0f;\nhandle.Complate();\nhandle.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Implementing IntegerOptions for Integer Type Animations in LitMotion\nDESCRIPTION: This snippet shows a partial implementation of IntegerOptions struct that conforms to IMotionOptions interface. This is used to provide special states for motions involving integer types, with properties like RoundingMode to control how integer values are interpolated.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-adapter.md#2025-04-18_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic struct IntegerOptions : IMotionOptions, IEquatable<IntegerOptions>\n{\n    public RoundingMode RoundingMode;\n\n    // Implement Equals, GetHashCode, etc.\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Tween Update Timing in C#\nDESCRIPTION: Demonstrates how to change the update timing of tweens in DOTween and LitMotion. LitMotion uses a WithScheduler method to set the update type.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-dotween.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\ntween.SetUpdate(UpdateType.Fixed);\n\n// LitMotion\nbuilder.WithScheduler(MotionScheduler.FixedUpdate);\n```\n\n----------------------------------------\n\nTITLE: Directly awaiting a MotionHandle in C#\nDESCRIPTION: The simplest way to await a motion's completion using MotionHandle's built-in GetAwaiter() implementation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/await-motion-in-async-await.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait handle;\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Extension Method for Animation\nDESCRIPTION: Example code showing how to use the custom BindToFooValue extension method to animate the Value property of a Foo object from 0 to 10 over 2 seconds.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/custom-binding-extension-method.md#2025-04-18_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar foo = new Foo();\nLMotion.Create(0f, 10f, 2f)\n    .BindToFooValue(foo);\n```\n\n----------------------------------------\n\nTITLE: Tween Settings in C# with LeanTween and LitMotion\nDESCRIPTION: Demonstrates how to configure tween settings such as repeat, loop type, and easing in both LeanTween and LitMotion. It shows setting up a tween to repeat twice with ping-pong looping and an easing function.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/migrate-from-leantween.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// LeanTween\ndescr.setRepeat(2)\n    .setLoopPingPong();\n    .setEase(LeanTweenType.easeOutQuad);\n\n// LitMotion\nbuilder.WithLoops(2, LoopType.Flip)\n    .WithEase(Ease.OutQuad);\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with a Property for Animation\nDESCRIPTION: Sample 'Foo' class with a float Value property that will be the target for animation binding.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/custom-binding-extension-method.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Foo\n{\n    public float Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying MotionSettings using with Expression in C#\nDESCRIPTION: Demonstrates how to partially modify MotionSettings using the with expression, taking advantage of its record type nature. This allows for creating new settings objects with specific changes.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/motion-settings.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar newSettings = settings with\n{\n    StartValue = 5f\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Foo Class with Value Property in C#\nDESCRIPTION: This snippet defines a simple Foo class with a float Value property that will be used as a target for custom animation binding.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/custom-binding-extension-method.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo\n{\n    public float Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LitMotion via Git URL in Unity Package Manager\nDESCRIPTION: The Git URL needed to add LitMotion through Unity's Package Manager. This URL points to the LitMotion repository with a specific path parameter to target the correct package location.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/installation.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/annulusgames/LitMotion.git?path=src/LitMotion/Assets/LitMotion\n```\n\n----------------------------------------\n\nTITLE: Updating BindWithState to Bind Method in C#\nDESCRIPTION: Demonstrates the migration from v1's BindWithState() to v2's Bind() method which now uses a struct State parameter for better allocation efficiency.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-v1.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// v1\nLMotion.Create(0f, 1f, 1f)\n    .BindWithState(state, (x, state) => { });\n\n// v2\nLMotion.Create(0f, 1f, 1f)\n    .Bind(state, (x, state) => { });\n```\n\n----------------------------------------\n\nTITLE: Adding LitMotion Dependency to manifest.json\nDESCRIPTION: JSON code for manually adding LitMotion as a dependency in the project's manifest.json file. This is an alternative to using the Package Manager UI for installation.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/installation.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"com.annulusgames.lit-motion\": \"https://github.com/annulusgames/LitMotion.git?path=src/LitMotion/Assets/LitMotion\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LitMotion.Animation via manifest.json\nDESCRIPTION: JSON configuration to add LitMotion.Animation directly to the project's manifest.json file. This method adds the package dependency by specifying the Git repository URL with the correct path parameter.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-animation-installation.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"com.annulusgames.lit-motion.animation\": \"https://github.com/annulusgames/LitMotion.git?path=src/LitMotion/Assets/LitMotion.Animation\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Motion Scheduler in LitMotion\nDESCRIPTION: Shows how to configure a motion to use a specific update schedule (like FixedUpdate) instead of the default scheduler.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/basic-concepts.md#2025-04-18_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nLMotion.Create(0f, 10f, 2f)\n    .WithScheduler(MotionScheduler.FixedUpdate)\n    .Bind(() => Debug.Log(x));\n```\n\n----------------------------------------\n\nTITLE: Installing LitMotion.Animation via Git URL in Package Manager\nDESCRIPTION: The Git URL required to install LitMotion.Animation through Unity's Package Manager. Users need to copy this URL and add it through the Package Manager interface.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/litmotion-animation-installation.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/annulusgames/LitMotion.git?path=src/LitMotion/Assets/LitMotion.Animation\n```\n\n----------------------------------------\n\nTITLE: Standard Implementation of BindToText Using string.Format\nDESCRIPTION: Partial implementation of BindToText showing how string.Format causes memory allocation due to boxing when converting values to strings.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-zstring.md#2025-04-18_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n// Part of the code for BindToText()\nbuilder.BindWithState(text, format, (x, target, format) =>\n{\n    ...\n    target.text = string.Format(format, x); // Allocates due to boxing here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Debug Name for LitMotion in C#\nDESCRIPTION: Demonstrates how to set a custom debug name for a motion using the WithDebugName() method when creating a new motion.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/ja/litmotion-debugger.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = LMotion.Create(0f, 1f, 1f)\n    .WithDebugName(\"name\")\n    .Bind(x => { });\n```\n\n----------------------------------------\n\nTITLE: Optimized Implementation Using ZString.Format\nDESCRIPTION: Modified implementation that uses ZString.Format to eliminate boxing allocations when formatting text values.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/integration-zstring.md#2025-04-18_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nbuilder.BindWithState(text, format, (x, target, format) =>\n{\n    ...\n    target.text = ZString.Format(format, x); // Allows zero-allocation formatting\n});\n```\n\n----------------------------------------\n\nTITLE: Installing LitMotion.Animation Package in Unity\nDESCRIPTION: Instructions for installing the LitMotion.Animation package using Unity's Package Manager by adding a Git URL dependency.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"com.annulusgames.lit-motion.animation\": \"https://github.com/annulusgames/LitMotion.git?path=src/LitMotion/Assets/LitMotion.Animation\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Coroutine and Async Support\nDESCRIPTION: Shows how to use animations with coroutines and async/await patterns in both frameworks.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/docs/articles/en/migrate-from-dotween.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// DOTween\nyield return tween.WaitForCompletion();\nawait tween.AsyncWaitForCompletion();\n\n// LitMotion\nyield return handle.ToYieldInstruction();\nawait handle;\n```\n\n----------------------------------------\n\nTITLE: Unity Editor Version Configuration\nDESCRIPTION: Specifies the Unity Editor version (2022.3.7f1) and its full revision number used for this project.\nSOURCE: https://github.com/annulusgames/litmotion/blob/main/samples/LitMotion.Samples/ProjectSettings/ProjectVersion.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm_EditorVersion: 2022.3.7f1\nm_EditorVersionWithRevision: 2022.3.7f1 (b16b3b16c7a0)\n```"
  }
]