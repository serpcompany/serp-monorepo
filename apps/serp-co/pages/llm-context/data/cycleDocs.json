[
  {
    "owner": "cycle",
    "repo": "docs",
    "content": "TITLE: Installing Cycle ORM via Composer\nDESCRIPTION: Command to install Cycle ORM package using Composer package manager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require cycle/orm\n```\n\n----------------------------------------\n\nTITLE: Complete Entity Configuration Example in PHP\nDESCRIPTION: A comprehensive example showing multiple entity configuration options including custom table name, repository class, and query scope. This demonstrates how to fully customize an entity's behavior in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(\n    table: 'users',\n    repository: \\App\\Repository\\UserRepository::class,\n    scope: \\App\\Scope\\SortByID::class\n)]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database with Connection in PHP\nDESCRIPTION: Demonstrates how to register a basic database configuration that connects to a SQLite database. This snippet shows the minimal required configuration for a database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'default' => [\n  'connection' => 'sqlite'\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Database Connection Setup\nDESCRIPTION: Example of setting up a basic SQLite database connection using DatabaseManager with configuration options.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse Cycle\\Database\\DatabaseManager;\nuse Cycle\\Database\\Driver;\nuse Cycle\\Database\\Config;\n\n$dbal = new DatabaseManager(new Config\\DatabaseConfig([\n    'databases' => [\n        'default' => [\n            'driver' => 'runtime'\n        ],\n    ],\n    'connections' => [\n        'runtime' => new Config\\SQLiteDriverConfig(\n            connection: new Config\\SQLite\\FileConnectionConfig(\n                database:  __DIR__.'./runtime/database.sqlite'\n            ),\n            queryCache: true,\n        ),\n    ],\n]));\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Multiple Fields in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to find an entity by matching multiple field values simultaneously.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findOne([\n  'name'    => 'Antony',\n  'balance' => 100\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with Many To Many Relation in PHP\nDESCRIPTION: Shows how to define a User entity with a Many To Many relationship to Tags using annotations, including methods for managing the tags collection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Relation\\ManyToMany;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[ManyToMany(target: Tag::class, through: UserTag::class)]\n    protected array $tags;\n    \n    public function getTags(): array\n    {\n        return $this->tags;\n    }\n    \n    public function addTag(Tag $tag): void\n    {\n        $this->tags[] = $tag;\n    }\n    \n    public function removeTag(Tag $tag): void\n    {\n        $this->tags = array_filter($this->tags, static fn(Tag $t) => $t !== $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Database in PHP using Cycle ORM\nDESCRIPTION: This snippet demonstrates how to get access to the database specific to an entity using Cycle ORM. It shows two methods: using the DBAL directly and accessing it through the ORM's Source object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/direct-database-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$source = $orm->getSource(User::class);\n\n$db = $source->getDatabase();\n$table = $source->getTable();\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity with Cycle ORM EntityManager in PHP\nDESCRIPTION: This snippet shows how to update an existing entity using Cycle ORM. It demonstrates fetching an entity by its primary key, modifying its properties, and then persisting the changes using the EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(User::class)->findByPK(1);\n\n$user->setName(\"John\");\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with Cycle ORM EntityManager in PHP\nDESCRIPTION: This snippet demonstrates how to create a new User entity and persist it to the database using Cycle ORM's EntityManager. It shows the basic process of instantiating an entity, setting its properties, and using the EntityManager to save it.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->setName(\"Antony\");\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Transaction Management with Closures in PHP\nDESCRIPTION: The recommended approach using the transaction() method with a closure. This method automatically manages the transaction state and rolls back in case of any exceptions, simplifying error handling.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/transactions.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$db->transaction(function (Database $db) {\n    //Queries    \n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Cycle ORM EntityManager Operations in PHP\nDESCRIPTION: This code snippet illustrates how to handle exceptions that may occur during the execution of EntityManager operations. It specifically focuses on catching and handling database-related exceptions such as connection issues or constraint violations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Exception\\StatementException;\n\ntry {\n    $manager->run();\n} catch (StatementException\\ConnectionException $e) {\n   print_r(\"database has gone away\");\n} catch (StatementException\\ConstrainException $e) {\n   print_r(\"database constrain not met, nullable field?\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DatabaseManager with SQLite Connection in PHP\nDESCRIPTION: Creates a DatabaseManager instance with a SQLite in-memory connection. This code configures the default database connection that Cycle ORM will use for operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database;\nuse Cycle\\Database\\Config;\n\n$dbConfig = new Config\\DatabaseConfig([\n    'default' => 'default',\n    'databases' => [\n        'default' => [\n            'connection' => 'sqlite'\n        ]\n    ],\n    'connections' => [\n        'sqlite' => new Config\\SQLiteDriverConfig(\n            connection: new Config\\SQLite\\MemoryConnectionConfig(),\n            queryCache: true,\n        ),\n    ]\n]);\n\n$dbal = new Database\\DatabaseManager($dbConfig);\n```\n\n----------------------------------------\n\nTITLE: ORM Initialization with Schema in PHP\nDESCRIPTION: Initializes the ORM instance with compiled schema and database connection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\n$schema = /** ... */;\n\n$orm = new ORM\\ORM(new ORM\\Factory($dbal), new ORM\\Schema($schema));\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Insert Query Builder in PHP\nDESCRIPTION: Demonstrates how to create an Insert query builder for a table, add values to be inserted, and execute the query. The run() method returns the last inserted ID.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$insert = $db->insert('test');\n\n$insert->values([\n    'time_created' => new \\DateTime(),\n    'name'         => 'Anton',\n    'email'        => 'test@email.com',\n    'balance'      => 800.90\n]);\n\nprint_r($db->run());\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Queries with Cycle ORM's DBAL in PHP\nDESCRIPTION: This code snippet shows how to execute a SELECT query using the DBAL's query method. It demonstrates passing parameters to the query and fetching all results.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/access.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db = $dbal->database();\n\nprint_r(\n    $db->query(\n        'SELECT * FROM users WHERE id > ?',\n        [\n            1\n        ]\n    )->fetchAll()\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Primary Key in Cycle ORM (PHP)\nDESCRIPTION: Shows how to retrieve an entity using its primary key. Returns null if no entity is found.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/select.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findByPK(1);\n```\n\n----------------------------------------\n\nTITLE: Unsafe Order By Usage - PHP\nDESCRIPTION: Demonstration of unsafe usage of user input in orderBy clause that could enable SQL injection attacks.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/security.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users->orderBy($userParam, $userDirection); // possible SQL injection\n```\n\n----------------------------------------\n\nTITLE: Paginating and Counting Pages in Cycle ORM (PHP)\nDESCRIPTION: Demonstrates how to paginate a Select query, set a specific page, and count the total number of pages. This is useful for implementing page navigation in user interfaces.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$paginator->withPage(2)->paginate($select)->countPages();\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycle ORM with Manual Schema Definition for User and Profile Entities\nDESCRIPTION: This example demonstrates how to create a Cycle ORM instance with manually defined schema for User and Profile entities with a HasOne relation. It configures a database connection to SQLite in memory, defines entity mappings with columns, typecast rules, and relation schema.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/no-annotations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\ninclude 'vendor/autoload.php';\n\nuse Cycle\\Database;\nuse Cycle\\Database\\Config;\nuse Cycle\\ORM;\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Relation;\n\n$dbal = new Database\\DatabaseManager(\n    new Database\\Config\\DatabaseConfig([\n        'default' => 'default',\n        'databases' => [\n            'default' => ['connection' => 'sqlite']\n        ],\n        'connections' => [\n            'sqlite' => new Config\\SQLiteDriverConfig(\n                connection: new SQLite\\MemoryConnectionConfig(),\n                queryCache: true,\n            ),\n        ]\n    ])\n);\n\n$orm = new ORM\\ORM(new ORM\\Factory($dbal), new Schema([\n    'user' => [\n        Schema::ENTITY => User::class,\n        Schema::MAPPER => ORM\\Mapper\\Mapper::class,\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'user',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => [\n            'id' => 'id',\n            'email' => 'email',\n            'balance' => 'balance',\n        ],\n        Schema::TYPECAST => [\n            'id' => 'int',\n            'balance' => 'float',\n        ],\n        Schema::RELATIONS => [\n            'profile' => [\n                Relation::TYPE => Relation::HAS_ONE,\n                Relation::TARGET => 'profile',\n                Relation::SCHEMA => [\n                    Relation::CASCADE => true,\n                    Relation::INNER_KEY => 'id',\n                    Relation::OUTER_KEY => 'user_id',\n                ],\n            ],\n        ],\n    ],\n    'profile' => [\n        Schema::ENTITY => Profile::class,\n        Schema::MAPPER => ORM\\Mapper\\Mapper::class,\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'profile',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => [\n            'id' => 'id',\n            'user_id' => 'user_id',\n            'image' => 'image',\n        ],\n        Schema::TYPECAST => [\n            'id' => 'int',\n            'user_id' => 'int',\n        ],\n        Schema::RELATIONS => [],\n    ],\n]));\n\nprint_r($orm->getRepository(User::class)->findOne());\n```\n\n----------------------------------------\n\nTITLE: Entity Manager Setup in PHP\nDESCRIPTION: Initializes the EntityManager for handling entity operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\EntityManager;\n\n$orm = /** ... */;\n\n$em = new EntityManager($orm);\n```\n\n----------------------------------------\n\nTITLE: Creating Select Query Builders in Various Ways\nDESCRIPTION: Shows different approaches to create a Select query builder, either from the database instance or from a table instance. All methods produce equivalent results.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select();\n\n// alternative\n$select = $db->select()->from('test');\n\n// alternative\n$select = $db->test->select();\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Where Groups with Closure\nDESCRIPTION: Shows how to create complex WHERE conditions with nested groups using closures, allowing for precise control over condition precedence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->where(\n        static function (SelectQuery $select) {\n            $select\n                ->where('id', 'between', 10, 100)\n                ->andWhere('name', 'Anton');\n        }\n    )\n    ->orWhere('status', 'disabled');\n```\n\n----------------------------------------\n\nTITLE: Defining Joined Table Inheritance with PHP Attributes in Cycle ORM\nDESCRIPTION: This example demonstrates how to set up a class hierarchy using Joined Table Inheritance with PHP attributes. It shows a Person base class with Employee, Customer, and Executive child entities. The JoinedTable attribute marks the inheritance relationship, with optional outerKey parameter for custom parent key columns.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/joined-table-inheritance.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Inheritance\\JoinedTable;\n\n#[Entity]\nclass Person\n{\n    #[Column(primary: true)]\n    protected int $id;\n    \n    #[Column]\n    protected int $fooId;\n\n    #[Column(type: 'string')]\n    protected string $name;\n}\n\n#[Entity]\n#[JoinedTable]\nclass Employee extends Person\n{\n    #[Column(type: 'int')]\n    protected int $salary;\n}\n\n#[Entity]\n#[JoinedTable(outerKey: 'fooId')]\nclass Customer extends Person\n{\n    #[Column(type: 'json')]\n    protected array $preferences;\n}\n\n#[Entity]\n#[JoinedTable]\nclass Executive extends Employee\n{\n    #[Column(type: 'int')]\n    protected int $bonus;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Update Query with Conditions in PHP using Cycle ORM\nDESCRIPTION: Demonstrates how to use the 'update' method to create and execute an update query with conditions. It updates the 'name' column for records where 'id' is less than 10.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$update = $db->table('test')\n    ->update(['name' => 'Abc'])\n    ->where('id', '<', 10)\n    ->run();\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `primary_test`\nSET `name` = 'Abc'\nWHERE `id` < 10\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Behaviors in PHP Entity Class\nDESCRIPTION: Example of implementing CreatedAt and UpdatedAt behaviors in a PHP entity class using Cycle ORM annotations. Shows configuration of timestamp fields with custom column names and demonstrates proper property declarations with datetime types.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/timestamps.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior;\n\n#[Entity]\n#[Behavior\\CreatedAt(\n    field: 'createdAt',   // Required. By default 'createdAt'\n    column: 'created_at'  // Optional. By default 'null'. If not set, will be used information from property declaration.\n)]\n#[Behavior\\UpdatedAt(\n    field: 'updatedAt',   // Required. By default 'updatedAt' \n    column: 'updated_at'  // Optional. By default 'null'. If not set, will be used information from property declaration.\n)]\nclass Page\n{\n    #[Column(type: 'primary')]\n    private int $id;\n    \n    #[Column(type: 'datetime')]\n    private \\DateTimeImmutable $createdAt;\n    \n    #[Column(type: 'datetime', nullable: true)]\n    private ?\\DateTimeImmutable $updatedAt = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting and Pagination in PHP\nDESCRIPTION: Demonstrates how to add sorting and pagination to queries\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$select->orderBy('id', 'DESC')->limit(1);\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Building with SelectQuery - PHP\nDESCRIPTION: Shows how to use the select method for building complex queries with conditions and relation loading.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$result = $repository->select()->where('balance', '>', 1)->load('address')->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Transaction State Error Handling\nDESCRIPTION: Advanced error handling using transaction state and retry logic\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/entity-manager.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($entity);\n$state = $manager->run(throwException: false);\n\nwhile ($error = $state->getLastError()) {\n    if ($error instanceof \\Cycle\\Database\\Exception\\StatementException\\ConnectionException) {\n        usleep(100);\n        $state->retry();\n        continue;\n    }\n    \n    throw $error;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SoftDelete Behavior in Cycle ORM PHP Entities\nDESCRIPTION: This example demonstrates how to implement the SoftDelete behavior in a Cycle ORM entity by adding a deletedAt property. The behavior adds a deleted_at column which marks records as deleted without physically removing them from the database, maintaining data consistency in complex systems.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/soft-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\SoftDelete;\n\n#[Entity]\n#[Behavior\\SoftDelete(\n    field: 'deletedAt',   // Required. By default 'deletedAt' \n    column: 'deleted_at'  // Optional. By default 'null'. If not set, will be used information from property declaration.\n)]\nclass Page\n{\n    #[Column(type: 'primary')]\n    public int $id;\n        \n    #[Column(type: 'datetime', nullable: true)]\n    public ?\\DateTimeImmutable $deletedAt = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database with Read/Write Connections in PHP\nDESCRIPTION: Demonstrates how to set up separate read and write connections for a database, which is useful for load balancing. This configuration directs read queries to a slave connection while write operations use the main connection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'default' => [\n  'connection'     => 'mysql',\n  'readConnection' => 'mysqlSlave',\n  'prefix'         => 'secondary_'\n]\n```\n\n----------------------------------------\n\nTITLE: Starting and Committing Database Transactions Manually in PHP\nDESCRIPTION: Example of manually starting a transaction with begin() and committing it with commit() methods on a database instance. This approach requires explicit transaction management by the developer.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->begin();\n\n// your queries\n\n$db->commit();\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities Using Nested Relations in PHP\nDESCRIPTION: Demonstrates how to filter entities using nested relation properties.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$select->distinct()->where('posts.comments.approved', true);\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Methods in Cycle ORM Queries\nDESCRIPTION: Example of using count and sum methods on a query. This demonstrates getting the total count of records and the sum of the balance column without modifying the columns in the SELECT clause.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['id', 'name', 'status']);\n\nprint_r($select->count());\nprint_r($select->sum('balance'));\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM `primary_test`;\n\nSELECT SUM(`balance`)\nFROM `primary_test`;\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Specific Fields in Cycle ORM (PHP)\nDESCRIPTION: Illustrates how to find an entity using one or more field conditions. Field names are automatically mapped to column names.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/select.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findOne([\n  'name' => 'Antony'\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findOne([\n  'name' => 'Antony',\n  'balance' => 100\n]);\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex Queries with SelectQuery in Cycle ORM (PHP)\nDESCRIPTION: Illustrates how to use the select() method for creating more complex queries and preloading related entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/select.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$result = $repository->select()->where('balance', '>', 1)->load('address')->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Executing Non-SELECT Query in PHP with Cycle ORM\nDESCRIPTION: This snippet demonstrates how to execute a non-SELECT query (in this case, a DELETE statement) using the execute method of the database object. It also shows the use of named parameters.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/direct-database-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$affected = $db->execute('DELETE FROM users WHERE id = :id', [\n  ':id' => 1\n]);\nprint_r($affected);\n```\n\n----------------------------------------\n\nTITLE: Complex Where Conditions in PHP\nDESCRIPTION: Example of combining multiple where conditions with OR operator\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$select->where('balance', '<', 100)\n       ->orWhere('status', 'blocked');\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Migration in PHP\nDESCRIPTION: PHP class example of a manually created migration. It demonstrates how to define 'up' and 'down' methods for creating and dropping a table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass MyMigrationMigration extends Migration\n{\n    /**\n     * Create tables, add columns or insert data here\n     */\n    public function up()\n    {\n        $this->table('sample_table')\n            ->addColumn('id', 'primary')\n            ->addColumn('name', 'string')\n            ->create();\n    }\n\n    /**\n     * Drop created, columns and etc here\n     */\n    public function down()\n    {\n        $this->table('sample_table')->drop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Databases with Cycle ORM's DatabaseManager in PHP\nDESCRIPTION: This snippet demonstrates how to set up and use the DatabaseManager to access different database connections. It shows how to connect to the default database and secondary databases using aliases.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/access.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire_once \"vendor/autoload.php\";\n\nuse Cycle\\Database\\Config\\DatabaseConfig;\nuse Cycle\\Database\\DatabaseManager;\nuse Cycle\\Database\\Driver\\SQLite\\SQLiteDriver;\n\n$dbal = new DatabaseManager(new DatabaseConfig(...));\n\n//Default database\nprint_r($dbal->database());\n\n//Using alias default which points to primary database\nprint_r($dbal->database('default'));\n\n//Secondary\nprint_r($dbal->database('secondary'));\n```\n\n----------------------------------------\n\nTITLE: Unsafe Identifier Usage in Where Clause - PHP\nDESCRIPTION: Example showing potentially unsafe usage of user-provided identifiers in where clause that could lead to SQL injection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/security.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = $userRepository->select();\n\n$users->where($userParam, '=', $value); // possible SQL injection\n```\n\n----------------------------------------\n\nTITLE: Adding User Values to ON Statements with onWhere Method\nDESCRIPTION: Shows how to include user values in ON statements using onWhere, orOnWhere, and andOnWhere methods. The example joins the 'users' table with conditions based on both column relationships and literal values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->innerJoin('users')\n    ->on(['users.id' => 'test.id'])\n    ->onWhere('users.name', 'Anton');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `primary_users`.`name` as `user_name`\nFROM `primary_test`\n         INNER JOIN `primary_users`\n                    ON `primary_users`.`id` = `primary_test`.`id` AND `primary_users`.`name` = 'Anton'\n```\n\n----------------------------------------\n\nTITLE: Executing DeleteQuery with Where Clause in PHP\nDESCRIPTION: This snippet demonstrates how to create and execute a delete query using the 'delete' method and 'where' clause. It deletes records from the 'test' table where the 'id' is less than 1000.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$db->table('test')->delete()->where('id', '<', 1000)->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sluggable Behavior Listener in PHP\nDESCRIPTION: Creates a listener class that handles the actual slug generation logic. Implements event handlers for entity creation and updates, ensuring unique slugs by appending timestamps when needed.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/extensions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Attribute\\Listen;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command\\OnCreate;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command\\OnUpdate;\nuse Cocur\\Slugify\\Slugify;\n\nfinal class SluggableListener\n{\n    public function construct(\n        private Slugify $slugify,\n        private ORMInterface $orm,\n        private string $field\n        private string $from\n    ) {\n    }\n\n    #[Listen(OnCreate::class)]\n    #[Listen(OnUpdate::class)]\n    public function invoke(OnCreate|OnUpdate $event): void\n    {\n        $slug = $this->slugify->slugify($event->state->getData()[$this->from]);\n        $isExist = $this->orm->getRepository($event->role)->findOne([$this->field => $slug]) !== null;\n\n        if ($isExist) {\n            $slug .= '-' . time();\n        }\n\n        $event->state->register($this->field, $slug);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities by Related Data\nDESCRIPTION: Shows two approaches to filter User entities based on related Address data using with() and where() methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)\n    ->select()\n    ->with('address')->where('address.city', 'New York')\n    ->fetchAll();\n\nprint_r($users);\n```\n\n----------------------------------------\n\nTITLE: Implementing OptimisticLock Behavior in PHP Entity Class\nDESCRIPTION: This snippet demonstrates how to use the OptimisticLock attribute in a PHP entity class. It shows the configuration of the OptimisticLock behavior, including field specification, column naming, and rule selection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/optimistic-lock.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\OptimisticLock;\n\n#[Entity]\n#[OptimisticLock(\n  field: 'version',                         // Required. By default 'version' \n  column: 'version',                        // Optional. By default 'null'. If not set, will be used information from property declaration.\n  rule: OptimisticLock::RULE_INCREMENT      // Optional. By default OptimisticLock::RULE_INCREMENT\n)]\nclass Page\n{\n    #[Column(type: 'primary')]\n    private int $id;\n    \n    #[Column(type: 'integer')]\n    private int $version;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with limit and offset\nDESCRIPTION: Shows how to implement pagination in queries using the limit and offset methods. The example selects 10 records starting from the second record (offset 1).\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')\n    ->select(['id', 'name', 'status'])\n    ->limit(10)\n    ->offset(1);\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Aggregation Methods\nDESCRIPTION: Demonstrates using built-in aggregation methods (count, sum, avg, min, max) to perform common calculations on query results without manipulating the selected columns.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')\n    ->select(['id', 'name', 'status']);\n\nprint_r($select->count());\nprint_r($select->sum('balance'));\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM `primary_test`;\n\nSELECT SUM(`balance`)\nFROM `primary_test`;\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns and Fetching Results\nDESCRIPTION: Demonstrates how to specify which columns to select from a table using the columns() method and how to fetch results using various methods including iterators and fetchAll.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$db->users->select()\n    ->columns('name')\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener Class in Cycle ORM (PHP)\nDESCRIPTION: This snippet shows how to implement a listener class with methods that respond to entity events. It includes handlers for OnCreate/OnUpdate events to filter spam and an OnDelete event handler to manage cascading deletion of child comments.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/event-listener.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Attribute\\Listen;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\nuse Cycle\\ORM\\EntityManagerInterface;\n\nfinal class CommentListener\n{\n    public function __construct(\n        private CommentSpamFilter $spamFilter,\n        private CommentRepository $commentRepository,\n        private EntityManagerInterface $em\n    ) {\n    }\n    \n    #[Listen(Command\\OnCreate::class)]\n    #[Listen(Command\\OnUpdate::class)]\n    public function filterSpam(Command\\OnCreate|Command\\OnUpdate $event): void\n    {\n        $event->state->register(\n            'body', \n            $this->spamFilter->filter(\n                $event->state->getData()['body']\n            )\n        );\n    }\n    \n    #[Listen(Command\\OnDelete::class)]\n    public function deleteChildComments(Command\\OnDelete $event): void\n    {\n        // Please don't use this example in production.\n        // This example contains recursion with too low performance.\n        $comments = $this->commentRepository->findAll([\n           'parent_id' => $event->entity->id\n        ]);\n        \n        foreach ($comments as $comment) {\n            $this->em->delete($comment);\n        }\n        \n        // Will fire 'Command\\OnDelete' for each child comment\n        $this->em->run(); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Strict Active Record Entity in PHP\nDESCRIPTION: Demonstrates the strict approach to defining an Active Record entity with private properties and public getter/setter methods. Uses attributes for column definitions and includes created timestamp behavior.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Entities;\n\nuse Cycle\\ActiveRecord\\ActiveRecord;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\CreatedAt;\n\n#[CreatedAt(field: 'createdAt')]\n#[Entity(table: 'users')]\nclass User extends ActiveRecord\n{\n    #[Column(type: 'bigInteger', primary: true, typecast: 'int')]\n    private int $id;\n\n    #[Column(type: 'string')]\n    private string $name;\n\n    #[Column(type: 'string', unique: true)]\n    private string $email;\n\n    private \\DatetimeImmutable $createdAt;\n\n    public function __construct(string $name, string $email)\n    {\n        $this->name = $name;\n        $this->email = $email;\n    }\n\n    public static function create(string $name, string $email): static\n    {\n        return static::make([\n            'name' => $name,\n            'email' => $email,\n        ]);\n    }\n\n    public function id(): int\n    {\n        return $this->id;\n    }\n\n    public function name(): string\n    {\n        return $this->name;\n    }\n\n    public function changeName(string $name): void\n    {\n        $this->name = $name;\n    }\n\n    public function email(): string\n    {\n        return $this->email;\n    }\n\n    public function changeEmail(string $email): void\n    {\n        $this->email = $email;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Instance in PHP\nDESCRIPTION: Shows how to access the configured database instance using the DatabaseManager. This code retrieves and prints the default database object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprint_r($dbal->database('default'));\n```\n\n----------------------------------------\n\nTITLE: Getting Repository Instance in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to obtain a repository instance using entity class name.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$r = $orm->getRepository(User::class);\n```\n\n----------------------------------------\n\nTITLE: Handling Database Connection Exceptions in Cycle ORM\nDESCRIPTION: Manages database connection issues during transactions by catching and retrying failed operations. This code detects connection exceptions specifically and implements a retry mechanism with backoff.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/daemonizing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($entity);\n$state = $manager->run(throwException: false);\n\nwhile ($error = $state->getLastError()) {\n    if ($error instanceof \\Cycle\\Database\\Exception\\StatementException\\ConnectionException) {\n        usleep(100);\n        $state->retry();\n        continue;\n    }\n    \n    throw $error;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Query with Nested Relations and Filtering\nDESCRIPTION: Example of a more complex query that filters users by one condition (having published posts) while loading all posts and their visible comments. This demonstrates the flexibility of Cycle ORM's query builder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)\n    ->distinct() // required due join of posts\n    ->with('posts')->where('posts.published', true)\n    ->load('posts.comments', ['where' => ['visible' => true]])\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema in PHP\nDESCRIPTION: Demonstrates manual entity definition including setting entity role, class, fields and table association using the Schema Builder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/schema-builder.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema\\Definition;\n\n$entity = new Definition\\Entity();\n\n$entity\n    ->setRole('user')\n    ->setClass(User::class);\n\n// add fields\n$entity->getFields()\n    ->set('id', (new Definition\\Field())->setType('primary')->setColumn('id')->setPrimary(true))\n    ->set('name', (new Definition\\Field())->setType('string(32)')->setColumn('user_name'));\n\n// register entity\n$r->register($entity);\n\n// associate table\n$r->linkTable($entity, 'default', 'users');\n```\n\n----------------------------------------\n\nTITLE: Fetching Entity Data with Proxy Relations in PHP\nDESCRIPTION: Demonstrates how to fetch and access entity data using the ORM, including accessing both eager and lazy-loaded relations. Shows practical usage of the proxy entity system.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/proxy-mapper.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository('user')->findByPK(1);\n\nforeach ($user->posts as $post) {\n    // ...\n}\n\nforeach ($user->tags as $post) {\n    // ...\n}\n\n$post = $orm->getRepository('post')->findByPK(1);\n\n$userId = $post->user->id;\n\n$tagName = $post->tag->name;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Repository with Save Method in PHP\nDESCRIPTION: This snippet shows how to create a custom repository class with a save method using EntityManager. It extends the default Select\\Repository and adds the ability to persist entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/persist-repository.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Select;\nuse Cycle\\ORM\\EntityManager;\nuse Cycle\\ORM\\ORMInterface;\n\nclass UserPersistRepository extends Select\\Repository\n{\n    private EntityManager $entityManager;\n\n    public function __construct(Select $select, ORMInterface $orm)\n    {\n        parent::__construct($select);\n        $this->entityManager = new EntityManager($orm);\n    }\n\n    public function save(User $user, bool $cascade = true)\n    {\n        $this->entityManager->persist(\n            $user,\n            $cascade\n        );\n\n        // entity manager is clean after run\n        $this->entityManager->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Persistence Example\nDESCRIPTION: Simple example showing how to persist an entity using EntityManager\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/entity-manager.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($entity);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Foreign Keys in Cycle ORM - PHP\nDESCRIPTION: Shows the process of creating two related tables and establishing their relationship using foreign keys in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$first = $database->table('first')->getSchema();\n\n$first->primary('id');\n$first->string('name', 64);\n$first->string('email');\n\n$first->save();\n\n$second = $database->table('second')->getSchema();\n\n$second->bigPrimary('id');\n$second->string('title');\n\n$second->save();\n```\n\n----------------------------------------\n\nTITLE: Persisting Related Entities with Cycle ORM EntityManager in PHP\nDESCRIPTION: This snippet illustrates how to persist an entity along with its related entities using Cycle ORM. It demonstrates the cascading behavior where related entities are automatically persisted when the main entity is saved.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->setAddress(new Address());\n$user->getAddress()->setCountry(\"USA\");\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n\nprint_r($user->getAddress()->getID());\n```\n\n----------------------------------------\n\nTITLE: Read/Write Connection Configuration\nDESCRIPTION: Configuring separate read and write connections for database operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Driver;\n\n$dbal = new DatabaseManager(new DatabaseConfig([\n    'databases' => [\n        // Will be used for read and write operations\n        'primary' => [\n           'driver' => 'mysql', \n           // or\n           'write' => 'mysql'\n           \n           // ...\n        ],\n        'secondary' => [\n            'write' => 'mysql', // Will be used for write operations\n            'read' => 'sqlite', // Will be used for read operations\n             // ...\n        ]\n    ],\n    'connections' => [\n        // ...\n    ],\n]));\n```\n\n----------------------------------------\n\nTITLE: Loading Related Data in Cycle ORM\nDESCRIPTION: Demonstrates how to load related entities using the Select object's load method. Shows fetching a Post with its associated User.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/belongs-to.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$post = $orm->getRepository(Post::class)->select()->load('user')->wherePK(1)->fetchOne();\nprint_r($post->getAddress());\n```\n\n----------------------------------------\n\nTITLE: Joining Tables in Cycle ORM\nDESCRIPTION: Example of performing a LEFT JOIN in a query. This demonstrates joining the users table to the test table with conditions on matching IDs.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['test.*', 'u.name as u']);\n\n$select->leftJoin('users', 'u')->on('users.id', 'test.id');\n```\n\nLANGUAGE: sql\nCODE:\n```\n SELECT `x_test`.*,\n        `u`.`name` AS `u`\n FROM `x_test`\n          LEFT JOIN `x_users` AS `u`\n                    ON `x_users`.`id` = `x_test`.`id`\n```\n\n----------------------------------------\n\nTITLE: Advanced Join - Complex Grouped Conditions with Nested Groups\nDESCRIPTION: Demonstrates creating a complex join with nested grouped conditions, using both AND and OR operators. The example shows how to structure complex conditional logic in join statements.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$select->join('LEFT', 'photos', 'pht', [\n    [\n        '@or' => [\n            [\n                'pht.user_id' => 'users.id',\n                'users.is_admin' => new Parameter(true),\n            ],\n            [\n                '@or' => [\n                    ['pht.user_id' => 'users.parent_id'],\n                    ['users.is_admin' => new Parameter(false)],\n                ],\n            ],\n        ],\n    ],\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `users`\n         LEFT JOIN `photos` AS `pht`\n                   ON (\n                           (`pht`.`user_id` = `users`.`id` AND `users`.`is_admin` = true)\n                           OR\n                           (`pht`.`user_id` = `users`.`parent_id` OR `users`.`is_admin` = false)\n                       )\n```\n\n----------------------------------------\n\nTITLE: Entity Retrieval by Primary Key in PHP\nDESCRIPTION: Fetches an entity from the database using its primary key through the repository.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(\\Example\\User::class)->findByPK(1);\nprint_r($user);\n```\n\n----------------------------------------\n\nTITLE: Handling All Entity Events in Cycle ORM\nDESCRIPTION: Demonstrates how to use QueueCommand to handle multiple entity lifecycle events in a single listener with type checking.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/events.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Attribute\\Listen;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\QueueCommand;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\n\n#[Listen(QueueCommand::class)]\npublic function onCreate(QueueCommand $event): void\n{\n    if ($event instanceof Command\\OnCreate){\n        // ...\n    }\n    \n    if ($event instanceof Command\\OnUpdate){\n        // ...\n    }\n    \n    if ($event instanceof Command\\OnDelete){\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Related Data with Filtering\nDESCRIPTION: Examples of loading related data with various filtering options including distinct selection and conditional loading.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)\n    ->select()\n    ->distinct()\n    ->with('posts')->where('posts.published', true)\n    ->fetchAll();\n\nprint_r($users);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Query Scope in Cycle ORM Repository\nDESCRIPTION: Shows how to create a custom query scope by implementing a method that clones the repository and customizes the base select query. This example creates a 'withActive' method that filters users with 'active' status.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/chained-repository.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UserRepository extends \\Cycle\\ORM\\Select\\Repository\n{\n    public function withActive(): self\n    {\n        $repository = clone $this;\n        $repository->select->where('status', 'active');\n\n        return $repository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using COUNT and Aggregation Functions in Cycle ORM\nDESCRIPTION: Example of using COUNT function in a SELECT query. This demonstrates selecting the count of all records directly in the column list.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['COUNT(*)']);\n```\n\n----------------------------------------\n\nTITLE: Creating and Persisting Many To Many Relationship in PHP\nDESCRIPTION: Example of creating and persisting a Many To Many relationship between User and Tag entities using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->setName(\"Antony\");\n$user->addTag(new Tag(\"tag a\"));\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entity with Cycle ORM EntityManager in PHP\nDESCRIPTION: This code snippet demonstrates how to delete an entity using Cycle ORM's EntityManager. It shows the process of fetching an entity and then using the delete method to remove it from the database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(User::class)->findByPK(1);\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->delete($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Using Combined Expressions in Cycle ORM SQL Repository (PHP)\nDESCRIPTION: Demonstrates how to use combined expressions for more complex queries in SQL repositories.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/select.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findOne([\n  'name' => 'Antony',\n  'balance' => ['>=' => 100]\n]);\n```\n\n----------------------------------------\n\nTITLE: Attaching Child Object in Has One Relation\nDESCRIPTION: Demonstrates how to attach a child Address object to a parent User entity in a Has One relationship.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n\n// or setAddress() method if you have a setter\n$user->address = new Address();\n```\n\n----------------------------------------\n\nTITLE: Cleaning Database State Between Tests\nDESCRIPTION: Demonstrates how to clean up the test database between test iterations by first dropping foreign keys and then dropping tables, ensuring a fresh database state for each test.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/testing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function tearDown()\n{\n    $db = $this->dbal->database('default');\n\n    // delete all FKs first\n    foreach ($database->getTables() as $table) {\n        $schema = $table->getSchema();\n        foreach ($schema->getForeignKeys() as $foreign) {\n            $schema->dropForeignKey($foreign->getColumns());\n        }\n\n        $schema->save(\\Cycle\\Database\\Driver\\HandlerInterface::DROP_FOREIGN_KEYS);\n    }\n\n    // delete tables\n    foreach ($database->getTables() as $table) {\n        $schema = $table->getSchema();\n        $schema->declareDropped();\n        $schema->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing STI Using PHP Attributes in CycleORM\nDESCRIPTION: Demonstrates how to define Single Table Inheritance using PHP attributes. Shows a Person class hierarchy with Employee, Customer, and CEO entities sharing a single table with type discrimination.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/single-table-inheritance.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Inheritance\\SingleTable;\nuse Cycle\\Annotated\\Annotation\\Inheritance\\DiscriminatorColumn;\n\n#[Entity]\n#[DiscriminatorColumn(name: 'type')]\nclass Person\n{\n    #[Column(type: 'primary', primary: true)]\n    protected int $id;\n\n    #[Column(type: 'string')]\n    protected string $name;\n\n    #[Column(type: 'string')]\n    protected string $type;\n}\n\n#[Entity]\n#[SingleTable] // discriminator value: employee\nclass Employee extends Person\n{\n    #[Column(type: 'int')]\n    protected int $salary;\n}\n\n#[Entity]\n#[SingleTable] // discriminator value: customer\nclass Customer extends Person\n{\n    #[Column(type: 'json')]\n    protected array $preferences;\n}\n\n#[Entity]\n#[SingleTable]\nclass Ceo extends Employee\n{\n    #[Column(type: 'int')]\n    public int $stocks;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Entities in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to retrieve multiple entities matching specific criteria using findAll method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nforeach($repository->findAll(['status' => 'active']) as $e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Entity Creation Event in Cycle ORM\nDESCRIPTION: Shows how to implement an OnCreate event listener that generates a UUID for the entity's ID field before database insertion.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/events.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Attribute\\Listen;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\n\n#[Listen(OnCreate::class)]\npublic function onCreate(Command\\OnCreate $event): void\n{\n    $event->state->register('id', Uuid::uuid4());\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Sorting Criteria with Chained orderBy Calls\nDESCRIPTION: Shows how to apply multiple sorting criteria by chaining orderBy method calls. The example sorts first by name in descending order, then by ID in ascending order.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->orderBy(\n        'test.name', SelectQuery::SORT_DESC\n    )->orderBy(\n        'test.id', SelectQuery::SORT_ASC\n    );\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Related Entity Fields\nDESCRIPTION: Example of filtering users based on properties of related entities using the with() method. This allows you to create conditions based on fields from related tables.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$result = $orm->getRepository(User::class)\n    ->select()\n    ->with('address')->where('address.city', 'New York')\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation Functions in Selected Columns\nDESCRIPTION: Shows how to include COUNT and other aggregation functions directly in the select columns list. This approach allows for custom column selection combined with aggregation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['COUNT(*)']);\n```\n\n----------------------------------------\n\nTITLE: Defining Primary and Composite Primary Key Columns in PHP with Cycle ORM\nDESCRIPTION: This snippet demonstrates how to define a primary key column and composite primary key columns using Cycle ORM annotations in PHP. It shows the usage of the #[Column] attribute with different options for primary and non-primary columns.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private int $id;\n}\n\n#[Entity]\nclass Pivot\n{\n    #[Column(type: 'int', primary: true)]\n    private int $postId;\n\n    #[Column(type: 'int', primary: true)]\n    private int $tagId;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Repository in Cycle ORM (PHP)\nDESCRIPTION: Demonstrates how to obtain a repository instance for a specific entity using either the entity class name or its role name.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/select.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository(User::class);\n```\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository(\"user\");\n```\n\n----------------------------------------\n\nTITLE: Executing Grouped ActiveRecord Operations with EntityManager\nDESCRIPTION: Demonstrates how to use groupActions() with an EntityManager to perform multiple entity operations within a single Unit of Work. Shows entity saving, deletion, and persistence operations with transaction mode configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nActiveRecord::groupActions(\n    function (EntityManagerInterface $em) use ($users, $user, $account, $post) {\n        array_walk($users, fn ($user) => $user->save());\n        $user->save();\n        $post->delete();\n        $em->persist($account);\n    },\n    TransactionMode::Ignore,\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Relations with Conditions in PHP\nDESCRIPTION: Demonstrates loading relations with additional filtering conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$select->load('posts', [\n    'where' => ['published' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated SQL from Select Query\nDESCRIPTION: Shows how to inspect the SQL statement that will be executed for a Select query, useful for debugging and optimization.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprint_r(\n    $db->users->select()\n        ->columns('name')\n        ->sqlStatement()\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Queries by Reusing Join Aliases\nDESCRIPTION: Example of optimizing a query by reusing the same JOIN for both filtering and loading, using the 'using' option to specify the JOIN alias to reuse.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$result = $orm->getRepository(User::class)\n    ->select()\n    ->with('address', ['as' => 'user_address'])->where('address.city', 'New York')\n    ->load('address', ['using' => 'user_address'])\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Basic Where Conditions\nDESCRIPTION: Shows how to add basic WHERE conditions to select queries with examples of operators and multiple conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function indexAction(\\Cycle\\Database\\Database $database)\n{\n    $select = $database->select()->from('test')->columns(['id', 'status', 'name']);\n\n    $select->where('status', '=', 'active');\n\n    foreach ($select as $row) {\n        print_r($row);\n    }\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `status` = 'active'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom UUID Typecast Handler\nDESCRIPTION: Example of a custom typecast handler for UUID values that implements both CastableInterface and UncastableInterface to convert between string representation in the database and UUID objects in the application.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/typecasting.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Parser\\CastableInterface;\nuse Cycle\\ORM\\Parser\\UncastableInterface;\n\nfinal class UuidTypecast implements CastableInterface, UncastableInterface\n{\n    private array $rules = [];\n\n    public function __construct(\n        private DatabaseInterface $database\n    ) {\n    }\n\n    public function setRules(array $rules): array\n    {\n        foreach ($rules as $key => $rule) {\n            if ($rule === 'uuid') {\n                unset($rules[$key]);\n                $this->rules[$key] = $rule;\n            }\n        }\n\n        return $rules;\n    }\n\n    public function cast(array $values): array\n    {\n        foreach ($this->rules as $column => $rule) {\n            if (! isset($values[$column])) {\n                continue;\n            }\n\n            $values[$column] = Uuid::fromString($values[$column]);\n        }\n\n        return $values;\n    }\n\n    public function uncast(array $values): array\n    {\n        foreach ($this->rules as $column => $rule) {\n            if (! isset($values[$column]) || !$values[$column] instanceof UuidInterface) {\n                continue;\n            }\n\n            $values[$column] = $values[$column]->toString();\n        }\n\n        return $values;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Query Results with groupBy\nDESCRIPTION: Demonstrates how to group query results by a specific column using the groupBy method. The example groups rows by status and counts the number of rows in each group.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')\n    ->select(['status', 'count(*) as count'])\n    ->groupBy('status');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `status`,\n       count(*) as `count`\nFROM `primary_test`\nGROUP BY `status`\n```\n\n----------------------------------------\n\nTITLE: EntityManagerInterface Definition in PHP\nDESCRIPTION: Interface definition for EntityManager showing core methods for entity persistence, state management, and transaction handling\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/entity-manager.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface EntityManagerInterface\n{\n    /**\n     * Tells the EntityManager to make an Entity managed and persistent.\n     *\n     * Entity will be queued up with fixing current state.\n     * Entity state changes after adding to the queue will be ignored.\n     */\n    public function persistState(object $entity, bool $cascade = true): self;\n\n    /**\n     * Tells the EntityManager to make an Entity managed and persistent with deferred state syncing.\n     */\n    public function persist(object $entity, bool $cascade = true): self;\n\n    /**\n     * Delete an entity.\n     */\n    public function delete(object $entity, bool $cascade = true): self;\n\n    /**\n     * Sync all changes to entities with database.\n     */\n    public function run(): \\Cycle\\ORM\\Transaction\\StateInterface;\n\n    /**\n     * Clean state.\n     */\n    public function clean(): static;\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQL Expressions in PHP with Cycle Database\nDESCRIPTION: Shows how to inject raw SQL expressions into queries using Cycle\\Database\\Injection\\Expression class.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/complex.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$select->where('time_created', '>', new \\Cycle\\Database\\Injection\\Expression(\"NOW()\"));\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Insert Operations with Column Definition\nDESCRIPTION: Shows how to perform batch inserts by defining columns once and then adding multiple value sets. This approach is more efficient for inserting multiple rows.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$insert->columns([\n    'time_created',\n    'name',\n    'email',\n    'balance'\n]);\n\nfor ($i = 0; $i < 20; $i++) {\n    // we don't need to specify key names in this case\n    $insert->values([\n        new \\DateTime(),\n        $this->faker->randomNumber(2),\n        $this->faker->email,\n        $this->faker->randomFloat(2)\n    ]);\n}\n\n$insert->run();\n```\n\n----------------------------------------\n\nTITLE: Complete Active Record Base Class Implementation in PHP\nDESCRIPTION: The complete implementation of the Record abstract class combining ORM operations, data storage, and magic methods for property access, which will serve as the foundation for Active Record entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\nabstract class Record\n{\n    private static ORM\\ORMInterface $orm;\n\n    private array $data = [];\n\n    public function __construct(array $data = [])\n    {\n        $this->__setData($data);\n    }\n\n    public function __setData(array $data): void\n    {\n        $this->data = $data;\n    }\n\n    public function __getData(): array\n    {\n        return $this->data;\n    }\n\n    public function __get($name)\n    {\n        return $this->data[$name];\n    }\n\n    public function __set($name, $value): void\n    {\n        $this->data[$name] = $value;\n    }\n\n    public function save(bool $saveChildren = true): ORM\\Transaction\\StateInterface\n    {\n        $manager = new ORM\\EntityManager(self::getORM());\n\n        return $manager->persist($this, $saveChildren)->run();\n    }\n\n    public function delete(): ORM\\Transaction\\StateInterface\n    {\n        $manager = new ORM\\EntityManager(self::getORM());\n\n        return $manager->delete($this)->run();\n    }\n\n    public static function find(): ORM\\RepositoryInterface\n    {\n        return self::getORM()->getRepository(static::class);\n    }\n\n    public static function getORM(): ORM\\ORMInterface\n    {\n        return self::$orm;\n    }\n\n    public static function setORM(ORM\\ORMInterface $orm): void\n    {\n        self::$orm = $orm;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQL Expressions in Cycle DBAL\nDESCRIPTION: Shows how to use Expression class to create complex SQL comparisons and concatenations while maintaining proper column quoting.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Injection\\Expression;\n\n$select->where(\n    new Expression(\"DAYOFYEAR(concat('2015-09-', id))\"),\n    '=',\n    255\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `x_users`\nWHERE DAYOFYEAR(concat('2015-09-', `id`)) = 255\n```\n\n----------------------------------------\n\nTITLE: Batch Insert Implementation\nDESCRIPTION: Shows how to perform batch inserts with multiple rows of data using a loop.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$insert->columns(['time_created', 'name', 'email', 'balance']);\n\nfor ($i = 0; $i < 20; $i++) {\n    // We don't need to specify key names in this case\n    $insert->values([\n        new \\DateTime(),\n        $this->faker->randomNumber(2),\n        $this->faker->email,\n        $this->faker->randomFloat(2)\n    ]);\n}\n\n$insert->run();\n```\n\n----------------------------------------\n\nTITLE: Complete Example of StdMapper Implementation\nDESCRIPTION: Full example showing StdMapper implementation including database configuration, schema setup, and entity creation with persistence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/dynamic-schema.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nrequire_once \"vendor/autoload.php\";\n\nuse Cycle\\ORM\\Factory;\nuse Cycle\\ORM\\Mapper\\StdMapper;\nuse Cycle\\ORM\\ORM;\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\EntityManager;\nuse Cycle\\Database\\DatabaseManager;\nuse Cycle\\Database\\Driver\\SQLite\\SQLiteDriver;\nuse Cycle\\Database\\Config;\n\n$dbal = new DatabaseManager(new Config\\DatabaseConfig([\n    'databases' => [\n        'default' => ['driver' => 'runtime'],\n    ],\n    'connections' => [\n        'runtime'   => new Config\\SQLiteDriverConfig(\n            connection: new Config\\SQLite\\FileConnectionConfig(\n                database:  __DIR__.'./runtime/database.sqlite'\n            ),\n            queryCache: true,\n        ),\n    ],\n]));\n\n// automatically migrate database schema if needed (optional)\n$users = $dbal->database('default')->table('users')->getSchema();\n$users->primary('id');\n$users->string('name');\n$users->datetime('created_at');\n$users->datetime('updated_at');\n$users->save();\n\n$orm = new ORM(new Factory($dbal), new Schema([\n    'user' => [\n        Schema::MAPPER => StdMapper::class,\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'users',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => [\n            'id' => 'id', // property => column_name\n            'name' => 'name',\n            'created_at' => 'created_at',\n            'updated_at' => 'updated_at',\n        ],\n        Schema::TYPECAST => [\n            'id' => 'int',\n            'created_at' => 'datetime',\n            'updated_at' => 'datetime',\n        ],\n        Schema::RELATIONS => [],\n    ],\n]));\n\n$user = $orm->make('user', [\n    'name' => 'test',\n    'created_at' => new DateTimeImmutable(),\n    'updated_at' => new DateTimeImmutable(),\n]);\n\n(new EntityManager($orm))->persist($user)->run();\n\nprint_r(\n    $orm->getRepository('user')->findAll()\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Hook Listeners on Entity in PHP\nDESCRIPTION: Example of implementing multiple event hooks on a Comment entity using Cycle ORM's Hook attribute. This demonstrates subscribing to both OnCreate and AfterCreate events with separate handler methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\nuse Cycle\\ORM\\Entity\\Behavior;\n\n#[Entity]\n#[Behavior\\Hook(\n    callable: [Comment::class, 'onCreate'], \n    events: Command\\OnCreate::class\n)]\n#[Behavior\\Hook(\n    callable: [Comment::class, 'AfterCreate'], \n    events: Command\\AfterCreate::class\n)]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    public int $id;\n    \n    public static function onCreate(Command\\OnCreate $event): void\n    {\n        // do something before comment created\n    }\n    \n    public static function afterCreate(Command\\AfterCreate $event): void\n    {\n        // do something when comment created\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unix Epoch Time UUID (Version 7)\nDESCRIPTION: Example of implementing UUID v7 in an entity class using Unix epoch time for monotonically increasing, sortable identifiers.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid7;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\n#[Entity]\n#[Uuid7(field: 'uuid', nullable: false)]\nclass User\n{\n    #[Column(type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Select Query Results\nDESCRIPTION: Shows how to use a Select query as an iterator to process results one by one, which is memory efficient for large result sets.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nforeach($select->getIterator() as $row) {\n    print_r($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Immutable UserRepository with ActiveRepository in PHP\nDESCRIPTION: Complete implementation of a UserRepository class that extends ActiveRepository and implements the UserRepositoryInterface. Shows how to maintain immutability with the with() pattern and customize entity queries.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-repository.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @method UserQuery select()\n * @extends ActiveRepository<User>\n */\nclass UserRepository extends ActiveRepository implements UserRepositoryInterface\n{\n    // Redefine the constructor to hardcode the entity class\n    public function __construct()\n    {\n        parent::__construct(User::class);\n    }\n\n    // Replace the main Select object with the custom UserQuery\n    public function initSelect(ORMInterface $orm, string $role): UserQuery\n    {\n        return new UserQuery();\n    }\n\n    // How to build a query\n    public function getByEmail(string $email): User\n    {\n        return $this->select()->where('email', $email)->fetchOne() ?? throw new NotFoundException();\n    }\n\n    // How to write an immutable method\n    public function whereActive(bool $active = true): static\n    {\n        return $this->with($this->select()->active());\n    }\n\n    public function withPosts(): static\n    {\n        return $this->with($this->select()->withPosts());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Order in Cycle ORM Queries\nDESCRIPTION: Example of using the orderBy method to set sort direction. This demonstrates sorting query results by ID in descending order.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// We have a join, so table name is mandatory\n$select->orderBy('test.id', \\Cycle\\Database\\Query\\SelectQuery::SORT_DESC);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repository to Save Entity in Cycle ORM\nDESCRIPTION: This snippet shows how to use the custom repository with a save method to create or update an entity in a Cycle ORM application. It demonstrates creating a new User entity and saving it using the custom repository.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/persist-repository.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var UserPersistRepository $users */\n$users = $orm->getRepository(User::class);\n\n$user = new User();\n$user->email = \"test@email.com\";\n\n$users->save($user);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entity Mapping in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to define a complete entity mapping including table definition, primary key, columns, and type casting. Shows configuration for a User entity with basic properties.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/manual.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Mapper\\Mapper;\n\n$orm = $orm->with(schema: new Schema([\n   'user' => [\n      Schema::ENTITY => User::class,\n      Schema::MAPPER => Mapper::class,\n      Schema::DATABASE => 'default',\n      Schema::TABLE => 'user',\n      Schema::PRIMARY_KEY => 'id',\n      Schema::COLUMNS => [\n          // property => column\n          'id' => 'id',\n          'email' => 'email',\n          'balance' => 'balance'\n      ],\n      Schema::TYPECAST => [\n          'id' => 'int',\n          'balance' => 'float'\n      ],\n      Schema::RELATIONS => []\n  ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL and MariaDB Connection Options in PHP\nDESCRIPTION: Shows three different ways to configure MySQL/MariaDB connections: TCP, DSN, and socket-based. Each configuration type offers different connection options depending on how the database is set up.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => new Config\\MySQLDriverConfig(\n    connection: new Config\\MySQL\\TcpConnectionConfig(\n        database: 'spiral',\n        host: '127.0.0.1',\n        port: 3306,\n        user:'spiral',\n        password: '',\n    ),\n    queryCache: true\n),\n\n'mysql_dsn' => new Config\\MySQLDriverConfig(\n    connection: new Config\\MySQL\\DsnConnectionConfig(\n        dsn: 'mysql:host=127.0.0.1;port=3306;dbname=spiral',\n        user:'spiral',\n        password: '',\n    ),\n    queryCache: true\n),\n\n'mysql_socket' => new Config\\MySQLDriverConfig(\n    connection: new Config\\MySQL\\SocketConnectionConfig(\n        database: 'spiral',\n        socket: '/tmp/mysql.sock',\n        dsn: 'mysql:host=127.0.0.1;port=3306;dbname=spiral',\n        user: 'spiral',\n        password: '',\n    ),\n    queryCache: true\n),\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Relations in PHP\nDESCRIPTION: Example of loading deeply nested relations using dot notation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$select->load('posts.comments.author');\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Class for Dynamic Query Values\nDESCRIPTION: Demonstrates how to use the Parameter class for dynamic query values, which allows changing parameter values before executing the query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Injection\\Parameter;\n// ...\n\n$select = $db->select()\n    ->from('test')\n    ->columns(['id', 'status', 'name']);\n\n$select->where('id', $id = new Parameter(null));\n\n//Bind new parameter value\n$id->setValue(15);\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Repository Select Method in PHP\nDESCRIPTION: Demonstrates declaring select statements within an entity's repository class\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Select;\n\nclass UserRepository extends Select\\Repository\n{\n    public function findActive(): Select\n    {\n        return $this->select()->where('status', 'active');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Entity Selection Data in PHP with Cycle ORM\nDESCRIPTION: Demonstrates how to cache selected entities and their relations using the fetchData method of Cycle\\ORM\\Select. The data can be stored in any cache implementation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/caching.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cacheStore = // ...\n\n$userData = $userRepository->select()->load('profile')->fetchData();\n\n$cacheStore->set('user-data', $userData);\n```\n\n----------------------------------------\n\nTITLE: Persisting Related Entities\nDESCRIPTION: Demonstrates how to persist related entities using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Fetching All Results as an Array\nDESCRIPTION: Demonstrates how to fetch all query results at once as an array using the fetchAll method, which is convenient for smaller result sets.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nforeach($select->fetchAll() as $row) {\n    print_r($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Cascade Persistence in Cycle ORM EntityManager\nDESCRIPTION: These snippets demonstrate how to control the cascade persistence behavior in Cycle ORM. They show how to explicitly enable or disable cascading for related entities when persisting an entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\EntityManager;\n\n$manager = new EntityManager($orm);\n$manager->persist($user, cascade: true);\n$manager->run();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\EntityManager;\n\n$manager = new EntityManager($orm);\n$manager->persist($user, cascade: false);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Using Where Array in Delete Query with Cycle ORM\nDESCRIPTION: Demonstrates how to specify where conditions in a delete query using an array. This example deletes records where 'id' is greater than 1000.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$db->table('test')\n    ->delete([\n        'id' => ['>' => 1000]\n    ])\n    ->run();\n```\n\n----------------------------------------\n\nTITLE: Creating Database Indexes in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to create simple and compound indexes on database tables using Cycle ORM's schema builder. Shows both direct index creation and column-based index declaration methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$schema = $database->table('other_table')->schema();\n\n$schema->primary('id');\n$schema->string('name', 64)->nullable(false);\n\n$schema->string('email');\n\n$schema->index(['email']); //Simple index\n$schema->column('email')->index(); //You can also use alternative declaration for simple indexes\n\n$schema->index(['name', 'email']); //Compound index\n\n$schema->save();\n```\n\n----------------------------------------\n\nTITLE: Basic Has Many Relation Definition in PHP\nDESCRIPTION: Demonstrates the basic setup of a Has Many relation using PHP attributes/annotations. Shows how to define a one-to-many relationship between User and Post entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[HasMany(target: Post::class)]\n    private array $posts;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection Options in PHP\nDESCRIPTION: Shows two different ways to configure PostgreSQL connections: TCP and DSN-based. Both options allow connecting to PostgreSQL databases with control over connection parameters.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'postgres' => new Config\\PostgresDriverConfig(\n    connection: new Config\\Postgres\\TcpConnectionConfig(\n        database: 'spiral',\n        host: '127.0.0.1',\n        port: 5432,\n        user: 'spiral',\n        password: '',\n    ),\n    schema: 'public',\n    queryCache: true,\n),\n\n'postgres_dsn' => new Config\\PostgresDriverConfig(\n    connection: new Config\\Postgres\\DsnConnectionConfig(\n        dsn: 'pgsql:host=127.0.0.1;port=5432;dbname=spiral',\n        user:'spiral',\n        password: '',\n    ),\n    queryCache: true\n),\n```\n\n----------------------------------------\n\nTITLE: Combined Loading and Filtering in PHP\nDESCRIPTION: Shows how to combine relation loading with filtering conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->load('posts', [\n        'where' => ['published' => true]\n    ])\n    ->with('posts')->where('posts.flagged', true);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Operators with Array Syntax\nDESCRIPTION: Shows how to specify custom comparison operators when using array syntax for WHERE conditions, including handling of array parameters.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    'id'     => ['in' => new Parameter([1, 2, 3])],\n    'status' => ['like' => 'active']\n]);\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results with orderBy\nDESCRIPTION: Demonstrates how to apply sorting to query results using the orderBy method. The example shows sorting by the 'id' column in descending order.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n//We have a join, so table name is mandatory\n$select\n    ->orderBy('test.id', SelectQuery::SORT_DESC);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection Options in PHP\nDESCRIPTION: Shows three different ways to configure SQLite connections: in-memory, file-based, and DSN-based. This provides flexibility in how SQLite databases are accessed.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'sqlite_memory' => new Config\\SQLiteDriverConfig(\n    connection: new Config\\SQLite\\MemoryConnectionConfig(),\n    queryCache: true,\n),\n\n'sqlite_file' => new Config\\SQLiteDriverConfig(\n    connection: new Config\\SQLite\\FileConnectionConfig(\n        database:  __DIR__.'./runtime/database.sqlite'\n    ),\n    queryCache: true,\n),\n\n'sqlite_dsn' => new Config\\SQLiteDriverConfig(\n    connection: new Config\\SQLite\\DsnConnectionConfig(\n        dsn: 'sqlite:runtime/database.db',\n    ),\n    queryCache: true,\n),\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Typecast to Entity Column in Cycle ORM with Attributes\nDESCRIPTION: Demonstrates how to assign a custom typecast callable to an entity column using the Column attribute. This example shows how to connect a UUID wrapper to a field.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private $id;\n\n    #[Column(type: 'string', typecast: [Uuid::class, 'castValue'])]\n    private Uuid $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Select Columns and Query Execution\nDESCRIPTION: Demonstrates various ways to specify columns and execute select queries including iteration and fetching all results.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$db->users->select()->columns('name')->fetchAll();\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach($select->getIterator() as $row) {\n    print_r($row);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach($select->fetchAll() as $row) {\n    print_r($row);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprint_r(\n    $db->users->select()->columns('name')->sqlStatement()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Query Class\nDESCRIPTION: Demonstrates how to extend ActiveQuery with common query methods like filtering by active status and sorting by creation time.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n * @extends ActiveQuery<User>\n */\nclass CommonQuery extends ActiveQuery\n{\n    public function active(bool $state = true): static\n    {\n        return $this->where(['active' => $state]);\n    }\n\n    public function sortByCreateTime(bool $newestFirst = true): static\n    {\n        return $this->orderBy(['created_at' => $newestFirst ? 'DESC' : 'ASC']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Processing with Cycle ORM in PHP\nDESCRIPTION: Demonstrates batch data processing using pagination and entity manager. This approach processes large datasets in smaller chunks while managing memory correctly by creating a fresh entity manager for each batch.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/daemonizing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)->select();\nfor ($i = 0; $i < 100; $i++) {\n    $users = $users->offset($i * 1000)->limit(1000)->fetchAll();\n\n    $manager = new \\Cycle\\ORM\\EntityManager($orm);\n    foreach ($users as $user) {\n        // Do something with user\n        $user->ban();\n        $manager->persist($user);\n    }\n    \n    $manager->run();\n}\n\n$manager->clean(cleanHeap: true);\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Wrapper Class for Column Typecasting in PHP\nDESCRIPTION: Creates a custom UUID wrapper class with a castValue method to transform string values into UUID objects, demonstrating how to implement a column wrapper for Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Ramsey\\Uuid\\Uuid as UuidBody;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Cycle\\Database\\DatabaseInterface;\n\nfinal class Uuid\n{\n    private function __construct(\n        private UuidInterface $uuid;\n    ) {\n    }\n\n    public function __toString(): string\n    {\n        return $this->uuid->toString();\n    }\n\n    public static function create(): static\n    {\n        return new static(\n            UuidBody::uuid4()\n        );\n    }\n\n    public static function castValue(string $value, DatabaseInterface $db): static\n    {\n        return new static(\n            UuidBody::fromString($value)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Table Aliases in Join Conditions\nDESCRIPTION: Demonstrates using table aliases in join conditions and selecting columns with aliases. Two equivalent approaches are shown for declaring the alias.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')\n    ->select(['test.*', 'uu.name as user_name'])\n    ->innerJoin('users', 'uu')\n    ->onWhere('uu.name', 'Anton');\n```\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')\n    ->select(['test.*', 'uu.name as user_name'])\n    ->innerJoin('users as uu')\n    ->onWhere('uu.name', 'Anton');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `uu`.`name` as `user_name`\nFROM `primary_test`\n         INNER JOIN `primary_users` as `uu`\n                    ON `uu`.`id` = `primary_test`.`id` AND `uu`.`name` = 'Anton'\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Connection Options in PHP\nDESCRIPTION: Shows two different ways to configure SQL Server connections: TCP and DSN-based. These options provide flexibility when connecting to Microsoft SQL Server databases.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'sqlServer' => new Config\\SQLServerDriverConfig(\n    connection: new Config\\SQLServer\\TcpConnectionConfig(\n        database: 'spiral',\n        host: '127.0.0.1',\n        port: 5432,\n        user: 'spiral',\n        password: '',\n    ),\n    queryCache: true,\n),\n\n'sqlServer_dsn' => new Config\\SQLServerDriverConfig(\n    connection: new Config\\SQLServer\\DsnConnectionConfig(\n        dsn: 'sqlsrv:Server=127.0.0.1,1521;Database=spiral',\n        user:'spiral',\n        password: '',\n    ),\n    queryCache: true,\n),\n```\n\n----------------------------------------\n\nTITLE: Defining a UserRepository Interface in PHP\nDESCRIPTION: Example of creating a repository interface that defines the contract for user data access operations, including methods for finding users by email, filtering by active status, and including related posts.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-repository.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface UserRepositoryInterface\n{\n    public function getByEmail(string $email): User;\n\n    public function whereActive(bool $active = true): static;\n\n    public function withPosts(): static;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Related Data with Explicit Join\nDESCRIPTION: Shows how to filter entities based on related data using explicit table joins in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/belongs-to.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$posts = $orm->getRepository(Post::class)\n    ->select()\n    ->with('user')->where('user.status', 'active')\n    ->fetchAll();\n\nprint_r($posts);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Keys via Schema in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to define composite primary keys and relations using Schema configuration in Cycle ORM. Shows setup for primary keys and relation keys in the schema array structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/composite-pk.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    User::class => [\n        // ...\n        Schema::PRIMARY_KEY => ['key1', 'key2'],                                // <===\n        Schema::COLUMNS => [\n            'key1' => 'field1',\n            'key2' => 'field2',\n            // ...\n        ],\n        Schema::RELATIONS => [\n            'posts' => [\n                Relation::TYPE => Relation::HAS_MANY,\n                Relation::TARGET => Post::class,\n                Relation::SCHEMA => [\n                    Relation::CASCADE => true,\n                    Relation::INNER_KEY => ['key1', 'key2'],                    // <===\n                    Relation::OUTER_KEY => ['parent_key1', 'parent_key2'],      // <===\n                    Relation::ORDER_BY => ['key1' => 'asc', 'key2' => 'asc'],\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SELECT Query with Named Parameters in PHP using Cycle ORM\nDESCRIPTION: This example illustrates how to execute a raw SELECT query using named parameters. It uses the query method of the database object with a key-value array for parameter binding.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/direct-database-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$result = $db->query('SELECT * FROM users WHERE id = :id', [\n  ':id' => 1\n]);\nprint_r($result->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Left Join in Cycle Database Query Builder\nDESCRIPTION: Demonstrates how to perform a basic left join operation by selecting columns from the 'test' table and joining the 'users' table with an alias. The join is based on matching ID columns.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')\n    ->select(['test.*', 'u.name as u']);\n\n$select->leftJoin('users', 'u')\n    ->on('users.id', 'test.id');\n```\n\nLANGUAGE: sql\nCODE:\n```\n SELECT `x_test`.*,\n        `u`.`name` AS `u`\n FROM `x_test`\n          LEFT JOIN `x_users` AS `u`\n                    ON `x_users`.`id` = `x_test`.`id`\n```\n\n----------------------------------------\n\nTITLE: Transferring Child Entities Between Parents\nDESCRIPTION: Demonstrates how to transfer an Address entity from one User to another while maintaining database consistency.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$u1 = $orm->getRespository(User::class)->select()->load('address')->wherePK(1)->fetchOne();\n\n$u2 = new User();\n$u2->setAddress($u1->getAddress());\n$u1->setAddress(null);\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($u1);\n$manager->persist($u2);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Querying Related Entities with Simple Condition in PHP\nDESCRIPTION: Example of querying entities with a condition on related entity using distinct option.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$select->distinct()->where('posts.published', true);\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities by External Relations in PHP using Cycle ORM\nDESCRIPTION: This code snippet demonstrates how to filter selected results based on values of related entities in external sources using Cycle ORM. It uses a generator function to minimize memory allocation and the ORM\\Iterator for efficient data processing.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/limitations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\nfunction filterByExternal(ORM\\Select $select, $value) {\n    foreach($select->load('external')->fetchData() as $item) {\n        if ($line['external']['value'] == $item) {\n            yield $item;\n        }\n    }\n}\n\n// ...\n\nforeach (new ORM\\Iterator($orm, User::class, filterByExternal($select, $value)) as $user) {\n    print_r($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Nested Query Results in Cycle ORM\nDESCRIPTION: Example of comparing a nested query's return value in a WHERE condition. This demonstrates checking if there are more than one record matching certain criteria.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$select->where(\n    $database->select('COUNT(*)')->from('test')->where('id', 'BETWEEN', 10, 100),\n    '>',\n    1\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE (SELECT COUNT(*)\n       FROM `primary_test`\n       WHERE `id` BETWEEN 10 AND 100) > 1\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Queries in Cycle ORM\nDESCRIPTION: Example of using nested queries in WHERE IN conditions. This demonstrates how to find records where the ID is in a range specified by a subquery.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$select = $database->select()->from('test')->columns(['id', 'status', 'name']);\n\n$select->where(\n    'id',\n    'IN',\n    $database->select('id')->from('test')->where('id', 'BETWEEN', 10, 100)\n);\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` IN (SELECT `id`\n               FROM `primary_test`\n               WHERE `id` BETWEEN 10 AND 100)\n```\n\n----------------------------------------\n\nTITLE: Storing Related Entities in Cycle ORM\nDESCRIPTION: Example of persisting a User entity together with its related Address entity using Cycle ORM's EntityManager. The ORM will automatically handle the relationship and generate appropriate SQL.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$address = new Address(city: \"New York\");\n\n$user = new User(name: \"Antony\");\n$user->setAddress($address);\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom UserQuery ActiveQuery Class in PHP\nDESCRIPTION: Implementation of a custom ActiveQuery class for User entities that adds specialized query methods for filtering active users and including related posts data.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-repository.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @extends ActiveRepository<User>\n */\nclass UserQuery extends ActiveQuery\n{\n    // ...\n\n    public function active(bool $active = true): static { ... }\n\n    public function withPosts(): static { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions for Single Field\nDESCRIPTION: Demonstrates how to apply multiple conditions to a single field using array syntax, allowing for complex filtering on one column.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    'id' => [\n        'not in' => [10, 20, 30],\n        '<'  => 100\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Joined Table Inheritance with Schema Definitions in Cycle ORM\nDESCRIPTION: This example shows how to configure Joined Table Inheritance without using attributes by manually defining the schema array. The PARENT and PARENT_KEY constants from SchemaInterface are used to specify inheritance relationships and connection keys.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/joined-table-inheritance.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\SchemaInterface;\n\n$schema = [\n    'person' => [\n        ...\n    ],\n    'employee' => [\n        ...,\n        SchemaInterface::PARENT => Person::class,\n        SchemaInterface::PARENT_KEY => 'id',\n    ],\n    'customer' => [\n        ...,\n        SchemaInterface::PARENT => Person::class,\n        SchemaInterface::PARENT_KEY => 'fooId',\n    ],\n    'executive' => [\n        ...,\n        SchemaInterface::PARENT => Person::class,\n        SchemaInterface::PARENT_KEY => 'id',\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Transaction Management in Active Record\nDESCRIPTION: Shows how to use transactions with Active Record entities, including nested transactions and rollback handling.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nActiveRecord::transact(\n    function () use ($user, $account, $post) {\n        $dbal->query('DELETE FROM users');\n\n        // Will be executed in a nested transaction\n        $user->save();\n        // Will be executed in a nested transaction\n        $account->save();\n        // Will be executed in a nested transaction\n        $post->delete();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Where Conditions to Select Query\nDESCRIPTION: Demonstrates how to add simple WHERE conditions to a Select query using the where method with column name, comparison operator, and value parameters.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->select()\n    ->from('test')\n    ->columns(['id', 'status', 'name']);\n\n$select->where('status', '=', 'active');\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Compilation with Migration Generation in PHP\nDESCRIPTION: Comprehensive setup for schema compilation including migration generation. This configuration includes entity registration, relation generation, and migration file creation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/sync-schema.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\nuse Cycle\\Annotated;\nuse Cycle\\Schema\\Generator\\Migrations\\GenerateMigrations;\n\n$schema = (new Schema\\Compiler())->compile(new Schema\\Registry($dbal), [\n    new Schema\\Generator\\ResetTables(),             // re-declared table schemas (remove columns)\n    new Annotated\\Embeddings($classLocator),        // register embeddable entities\n    new Annotated\\Entities($classLocator),          // register annotated entities\n    new Annotated\\TableInheritance(),               // register STI/JTI\n    new Annotated\\MergeColumns(),                   // register columns from attributes\n    new Schema\\Generator\\GenerateRelations(),       // generate entity relations\n    new Schema\\Generator\\GenerateModifiers(),       // generate changes from schema modifiers\n    new Schema\\Generator\\ValidateEntities(),        // make sure all entity schemas are correct\n    new Schema\\Generator\\RenderTables(),            // declare table schemas\n    new Schema\\Generator\\RenderRelations(),         // declare relation keys and indexes\n    new Schema\\Generator\\RenderModifiers(),         // render all schema modifiers\n    new Schema\\Generator\\ForeignKeys(),             // Define foreign key constraints\n    new Annotated\\MergeIndexes(),                   // register indexes from attributes\n    new GenerateMigrations($migrator->getRepository(), $migrator->getConfig()),  // generate migrations\n    new Schema\\Generator\\GenerateTypecast(),        // typecast non string columns\n]);\n```\n\n----------------------------------------\n\nTITLE: JSON Column Querying in Cycle DBAL\nDESCRIPTION: Examples of querying JSON column types using whereJson, whereJsonContains, and related methods for complex JSON data operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = $db\n    ->select()\n    ->from('test')\n    ->whereJson('settings->notifications->type', 'sms')\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Database Logger in PHP\nDESCRIPTION: Shows how to set up a global logger for all database drivers using DatabaseManager. The logger will be applied to all database operations across all configured drivers.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/profiling.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$dbal = new DatabaseManager(\n    new DatabaseConfig(...)\n);\n\n$dbal->setLogger($myLogger);\n```\n\n----------------------------------------\n\nTITLE: Exchanging Column Identifiers Between Queries in Cycle ORM\nDESCRIPTION: Example of using Expression to reference columns from the parent query in a nested query. This demonstrates a correlated subquery that compares values between tables.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$select = $database->select()->from('test')->columns(['id', 'status', 'name']);\n\n$select->where(\n    $database->select('name')->from('users')->where(\n        'id', '=', new \\Cycle\\Database\\Injection\\Expression('test.id')\n    )->where('id', '!=', 100),\n    'Anton'\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE (SELECT `name`\n       FROM `primary_users`\n       WHERE `id` = `primary_test`.`id`\n         AND `id` != 100) = 'Anton'\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Where Conditions\nDESCRIPTION: Shows how to create grouped WHERE conditions using a closure, which allows for more complex query logic with proper precedence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->where('id', 1)\n    ->where(\n        static function (SelectQuery $select) {\n            $select\n                ->where('status', 'active')\n                ->orWhere('id', 10);\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with Column Annotations\nDESCRIPTION: Basic entity declaration for a User class with id and name properties using PHP 8 attributes for Cycle ORM mapping. The class includes constructor, getter methods, and type declarations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    public function __construct(\n        #[Column(type: 'int')]\n        private int $id,\n\n        #[Column(type: 'string')]\n        private string $name,\n    ) {}\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the query() Method in ActiveRecord\nDESCRIPTION: Shows how the query() method is implemented in ActiveRecord to provide ActiveQuery capabilities to entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic static function query(): ActiveQuery\n{\n    return new ActiveQuery(static::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating with Relations in Cycle ORM (PHP)\nDESCRIPTION: Illustrates how to paginate a Select query that includes relations like hasMany or manyToMany. It emphasizes the need to use distinct() when joining relations to ensure correct pagination results.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select()->orderBy('id', 'DESC');\n\n$select->distinct()->with('posts');\n\n// 10 results per page\n$paginator = new \\Spiral\\Pagination\\Paginator(10);\n$paginator->paginate($select);\n\nprint_r($select->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Fetching Entity Data with Promise Mapper\nDESCRIPTION: Example of fetching entity data showing both eager and lazy loading behavior, including accessing related entities and their properties.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/promise-mapper.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository('user')->findByPK(1);\n\n// $user->posts contains an array because of eager loading\nforeach ($user->posts as $post) {\n    // ...\n}\n\n// $user->tags contains Cycle\\ORM\\Reference\\Promise object because of lazy loading\n$tags = $user->tags->fetch();\nforeach ($tags as $post) {\n    // ...\n}\n\n$post = $orm->getRepository('post')->findByPK(1);\n\n// $post->user contains Cycle\\ORM\\Reference\\Promise object because of lazy loading\n$userId = $post->user->fetch()->id;\n\n// $post->tag contains Tag object because of eager loading\n$tagName = $post->tag->name;\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered-Time UUID (Version 6)\nDESCRIPTION: Example of implementing UUID v6 in an entity class using ordered-time generation with node and clock sequence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid6;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\n#[Entity]\n#[Uuid6(field: 'uuid', node: '00000fffffff', clockSeq: 0xffff, nullable: false)]\nclass User\n{\n    #[Column(type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Using UpdateQuery Builder in Cycle ORM\nDESCRIPTION: Example of creating and executing an update query. This demonstrates updating the name column for records with ID less than 10.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$update = $db->table('test')->update([\n    'name' => 'Abc'\n]);\n\n$update->where('id', '<', 10)->run();\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `primary_test`\nSET `name` = 'Abc'\nWHERE `id` < 10\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Where Groups with Array Syntax\nDESCRIPTION: Demonstrates how to create the same complex WHERE conditions using array syntax with @or and @and groups.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    '@or' => [\n        [\n            'id'   => ['between' => [10, 100]],\n            'name' => 'Anton'\n        ],\n        ['status' => 'disabled']\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Using SQL Expression in WHERE Clause with Cycle ORM\nDESCRIPTION: Example of using Expression to compare a complex computed value with a user parameter. This snippet compares the result of the DAYOFYEAR function with the value 255.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$select->where(new \\Cycle\\Database\\Injection\\Expression(\"DAYOFYEAR(concat('2015-09-', id))\"), 255);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `x_users`\nWHERE DAYOFYEAR(concat('2015-09-', `id`)) = 255\n```\n\n----------------------------------------\n\nTITLE: Analyzing Table Column Details in PHP\nDESCRIPTION: Demonstrates comprehensive inspection of table columns, including their names, types (both database-specific and abstract), constraints, default values, and other properties.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nforeach ($schema->getColumns() as $column) {\n    print_r($column->getName());\n\n    print_r($column->getType());          //Internal database type\n    print_r($column->abstractType());     //Abstract type like string, bigInt, enum, text and etc.\n    print_r($column->phpType());          //PHP type: int, float, string, bool\n\n    print_r($column->getDefaultValue());  //Can be instance of SqlFragment\n\n    print_r($column->getSize());          //Only for strings and decimal values\n\n    print_r($column->getPrecision());     //Decimals only\n    print_r($column->getScale());         //Decimals only\n\n    print_r($column->isNullable());\n    print_r($column->getEnumValues());    //Only for enums\n\n    print_r($column->getConstraints());\n\n    print_r($column->sqlStatement());     //Column creation syntax\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullable Columns in Schema\nDESCRIPTION: Examples of setting columns as NOT NULL and combining NOT NULL constraints with default values to handle non-empty tables.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$schema->string('name', 64)->nullable(false);\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema->integer('new_column')->nullable(false)->defaultValue(0);\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities with JOIN\nDESCRIPTION: Example of retrieving users with their related addresses using the load() method. By default, Cycle ORM uses LEFT JOIN to load hasOne relations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $orm->getRepository(User::class)\n    ->select()\n    ->load('address')\n    ->fetchAll();\n\nforeach ($result as $user) {\n    print_r($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Queries in Cycle DBAL\nDESCRIPTION: Shows how to create complex nested queries using QueryBuilder instances as FragmentInterface implementations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->select()\n    ->from('test')\n    ->columns(['id', 'status', 'name']);\n\n$select->where(\n    'id',\n    'IN',\n    $database->select('id')\n        ->from('test')\n        ->where('id', 'BETWEEN', 10, 100)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` IN (SELECT `id`\n               FROM `primary_test`\n               WHERE `id` BETWEEN 10 AND 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Relations in Cycle ORM - PHP\nDESCRIPTION: Shows how to define relationships between entities, specifically a HasOne relationship between User and Profile entities. Includes complete schema configuration for both entities with relation definitions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/manual.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Relation;\nuse Cycle\\ORM\\Mapper\\Mapper;\n\n$orm = $orm->with(schema: new Schema([\n   'user' => [\n      Schema::ENTITY => User::class,\n      Schema::MAPPER => Mapper::class,\n      Schema::DATABASE => 'default',\n      Schema::TABLE => 'user',\n      Schema::PRIMARY_KEY => 'id',\n      Schema::COLUMNS => ['id', 'email', 'balance'],\n      Schema::RELATIONS => [\n          'profile' => [\n              Relation::TYPE => Relation::HAS_ONE,\n              Relation::TARGET => 'profile',\n              Relation::SCHEMA => [\n                  Relation::CASCADE  => true,\n                  Relation::INNER_KEY => 'id',\n                  Relation::OUTER_KEY => 'user_id',\n              ],\n          ]\n      ]\n  ],\n  'profile' => [\n      Schema::ENTITY => Profile::class,\n      Schema::MAPPER => Mapper::class,\n      Schema::DATABASE => 'default',\n      Schema::TABLE => 'profile',\n      Schema::PRIMARY_KEY => 'id',\n      Schema::COLUMNS => ['id', 'user_id', 'image'],\n      Schema::RELATIONS => []\n  ],\n]));\n```\n\n----------------------------------------\n\nTITLE: Removing Child Object from Has One Relation\nDESCRIPTION: Shows how to remove a child object by setting the relation property to null.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user->setAddress(null);\n```\n\n----------------------------------------\n\nTITLE: Pre-filtering Data in Generator Mode with Cycle ORM\nDESCRIPTION: This snippet shows how to filter selection results using external data in generator mode prior to model instantiation, which helps optimize memory usage. It demonstrates filtering before entity instantiation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/iterator.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\nfunction filterByExternal(ORM\\Select $select, $value): \\Generator\n{\n    foreach($select->load('external')->fetchData() as $item) {\n        if ($line['external']['value'] == $item) {\n            yield $item;\n        }\n    }\n}\n\n// ...\n\nforeach (ORM\\Iterator::createWithOrm($orm, User::class, filterByExternal($select, $value)) as $user) {\n    print_r($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary Storage for UUID with ValueInterface in Cycle ORM\nDESCRIPTION: Creates an advanced UUID wrapper that implements ValueInterface to store UUID values as binary in the database, with custom serialization and deserialization logic.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Ramsey\\Uuid\\Uuid as UuidBody;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Cycle\\Database\\DatabaseInterface;\nuse Cycle\\Database\\Injection\\ValueInterface;\n\nclass Uuid implements ValueInterface\n{\n    private function __construct(\n        private UuidInterface $uuid;\n    ) {\n    }\n    \n    public function rawValue(): string\n    {\n        return $this->uuid->getBytes();\n    }\n\n    public function rawType(): int\n    {\n        return \\PDO::PARAM_LOB;\n    }\n\n    public function __toString(): string\n    {\n        return $this->uuid->toString();\n    }\n\n    public static function create(): static\n    {\n        return new static(\n            UuidBody::uuid4()\n        );\n    }\n\n    public static function castValue(string $value, DatabaseInterface $db): static\n    {\n        if (is_resource($value)) {\n            // postgres\n            $value = fread($value, 16);\n        }\n\n        return new static(\n            UuidBody::fromBytes($value)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Status Update via Repository and EntityManager\nDESCRIPTION: Shows a service class that uses a UserRepository to find a user by ID and then updates their status. This method can be tested by mocking both the repository and entity manager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyService\n{\n    public function __construct(\n        private UserRepository $users\n    ) {\n    }\n\n    public function disableUser(int $id, \\Cycle\\ORM\\EntityManagerInterface $entityManager): void\n    {\n        $user = $this->users->findByPK($id);\n        $user->status = 'disabled';\n        $entityManager->persist($user)->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Entity Update Event in Cycle ORM\nDESCRIPTION: Demonstrates implementation of an OnUpdate event listener that updates the 'updated_at' timestamp when an entity is modified.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/events.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\n\npublic function onUpdate(Command\\OnUpdate $event): void\n{\n    $event->state->register('updated_at', new \\DateTimeImmutable());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a simple RootNode parser in Cycle ORM\nDESCRIPTION: Demonstrates the basic usage of RootNode to parse query results into structured data. It defines column names and primary keys, then iterates through query results to build the data structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\StatementInterface;\nuse Cycle\\ORM\\Parser\\RootNode;\n\n$root = new RootNode(\n    ['id', 'balance'], // column names\n    ['id']             // primary keys\n);\n\nforeach ($query->run()->fetchAll(StatementInterface::FETCH_NUM) as $row) {\n    // start from 1st (0) column\n    $root->parseRow(0, $row);\n}\n\nprint_r($root->getResult());\n```\n\n----------------------------------------\n\nTITLE: Using Sluggable Behavior in Entity Class in PHP\nDESCRIPTION: Demonstrates how to apply the Sluggable behavior to an entity class using attributes. Shows the required column definitions and behavior configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/extensions.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\n#[Sluggable(\n    field: 'slug',\n    from: 'title'\n)]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'string')]\n    private string $title;\n\n    #[Column(type: 'string')]\n    private string $slug = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Entity Data with ClasslessMapper in PHP\nDESCRIPTION: Shows how to create and persist a new user entity using the ClasslessMapper. Creates a proxy object and sets its properties before persisting to the database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/classless-mapper.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $this->orm->make('user'); // \\Cycle\\ORM\\ClasslessProxy\\Classless user 0 Cycle ORM Proxy object\n\n$user->email = 'user@site.com';\n$user->balance = 1500;\n\n(new EntityManager($orm))->persist($user)->run();\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent Active Record Entity in PHP\nDESCRIPTION: Shows the fluent approach to defining an Active Record entity with public properties for direct access. Uses attributes for column definitions and includes created timestamp behavior.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Entities;\n\nuse Cycle\\ActiveRecord\\ActiveRecord;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\CreatedAt;\n\n#[CreatedAt(field: 'createdAt')]\n#[Entity(table: 'users')]\nclass User extends ActiveRecord\n{\n    #[Column(type: 'bigInteger', primary: true, typecast: 'int')]\n    public int $id;\n\n    #[Column(type: 'string')]\n    public string $name;\n\n    #[Column(type: 'string', unique: true)]\n    public string $email;\n\n    public \\DatetimeImmutable $createdAt;\n\n    public function __construct(string $name, string $email)\n    {\n        $this->name = $name;\n        $this->email = $email;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Join - Using Closure for Complex Join Logic\nDESCRIPTION: Demonstrates using a closure as the fourth argument to the join method for dynamic and complex join logic. The closure provides direct access to the select query builder instance.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$select->join('LEFT', 'photos', 'pht', static function (\n    \\Cycle\\Database\\Query\\SelectQuery $select,\n    string $boolean,\n    callable $wrapper\n): void {\n    $select\n        ->on('photos.user_id', 'users.id')\n        ->onWhere('photos.type', 'avatar');\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `users`\n         LEFT JOIN `photos` AS `pht`\n                   ON (\n                               `photos`.`user_id` = `users`.`id`\n                           AND\n                               `photos`.`type` = \"avatar\"\n                       )\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in Where Conditions\nDESCRIPTION: Demonstrates how to use the orWhere method to join conditions with OR operator instead of AND.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->where('id', 1)\n    ->orWhere('id', 2)\n    ->orWhere('status', 'active');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Typecast Method in PHP Enum for Cycle ORM\nDESCRIPTION: Demonstrates how to add a custom typecast method to a PHP enum for use with Cycle ORM's column wrapper functionality, allowing more control over the typecasting process.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nenum UserType: string\n{\n    case Guest = 'guest';\n    case User = 'user';\n    case Admin = 'admin';\n\n    public static function typecast(string $value): self\n    {\n        return self::from($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Queries in Update Statement using Cycle ORM\nDESCRIPTION: Demonstrates how to use nested queries in update statements. This example updates the 'name' column with a value selected from another table for records where 'id' is less than 10.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$update = $db->table('test')\n    ->update([\n        'name' => $database\n            ->table('users')\n            ->select('name')\n            ->where('id', 1)\n    ])\n    ->where('id', '<', 10)->run();\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `primary_test`\nSET `name` = (SELECT `name`\n              FROM `primary_users`\n              WHERE `id` = 1)\nWHERE `id` < 10\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Entity Manager\nDESCRIPTION: Example showing proper error handling for database exceptions during persistence\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/entity-manager.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($entity);\ntry {\n    $manager->run();\n} catch (\\Cycle\\Database\\Exception\\StatementException\\ConnectionException $e) {\n    $logger->error($e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pivoted Collections in Many To Many Relations\nDESCRIPTION: Shows how to define and use pivoted collections for accessing pivot entity data in Many To Many relationships.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Relation\\ManyToMany;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Collection\\Pivoted\\PivotedCollection;\n\n#[Entity]\nclass User\n{\n    // ...\n    \n    #[ManyToMany(target: Tag::class, through: UserTag::class, collection: 'doctrine')]\n    public PivotedCollection $tags;\n    \n    public function __construct() \n    {\n        $this->tags = new PivotedCollection();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities with Proxy Relations in PHP\nDESCRIPTION: Example of entity classes using Cycle ORM annotations to define relationships with different loading strategies (eager and lazy). Shows User entity with HasMany relations and Post entity with BelongsTo relations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/proxy-mapper.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\BelongsTo;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[HasMany(target: Post::class, load: 'eager')]\n    public array $posts;\n    \n    #[HasMany(target: Tag::class, load: 'lazy')]\n    public array $tags;\n}\n\n#[Entity]\nclass Post\n{\n    // ...\n\n    #[BelongsTo(target: User::class, load: 'lazy')]\n    public User $user;\n\n    #[BelongsTo(target: Tag::class, load: 'eager')]\n    public Tag $tag;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Column Aliases and Custom Expressions in Cycle ORM\nDESCRIPTION: Example of defining column aliases and using SQL expressions as columns. This allows renaming columns in the result set and including computed values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->select()->from('test')->columns([\n    'id',\n    'status as st',\n    'name',\n    \"CONCAT(test.name, ' ', test.status) as name_and_status\"\n]);\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status` as `st`,\n       `name`,\n       CONCAT(`primary_test`.`name`, ' ', `primary_test`.`status`) as `name_and_status`\nFROM `primary_test`\n```\n\n----------------------------------------\n\nTITLE: Implementing Sluggable Behavior Attribute in PHP\nDESCRIPTION: Defines a Sluggable attribute class that extends BaseModifier to enable slug generation functionality. Configures the behavior with customizable field mappings and connects to a listener class.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/extensions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Schema\\BaseModifier;\nuse Cycle\\ORM\\Entity\\Behavior\\Schema\\RegistryModifier;\nuse Cycle\\Schema\\Registry;\n\n#[\\Attribute(\\Attribute::TARGET_CLASS)]\nfinal class Sluggable extends BaseModifier\n{\n    public function __construct(\n        // Properties should present in your entity with `[#Column(type: 'string')]` attribute\n        private string $field = 'slug',\n        private string $from = 'title'\n    ) {\n    }\n\n    protected function getListenerClass(): string\n    {\n        return SluggableListener::class;\n    }\n\n    protected function getListenerArgs(): array\n    {\n        // Will be passed to the listener constructor\n        return [\n            'field' => $this->field,\n            'from' => $this->from\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Combined Expressions in SQL Repository - PHP\nDESCRIPTION: Shows how to use combined expressions for complex queries in SQL repositories using comparison operators.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findOne([\n  'name'    => 'Antony',\n  'balance' => ['>=' => 100]\n]);\n```\n\n----------------------------------------\n\nTITLE: Extended Active Record Entity with Value Objects\nDESCRIPTION: Demonstrates an extended approach using Value Objects instead of primitive types, with a private constructor and static factory method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[CreatedAt(field: 'createdAt')]\n#[Entity(table: 'users')]\nclass User extends ActiveRecord\n{\n    #[Column(type: 'bigInteger', primary: true, typecast: 'uuid')]\n    public UuidInterface $id;\n\n    #[Column(type: 'string', typecast: UserName::class)]\n    public UserName $name;\n\n    #[Column(type: 'string', unique: true, typecast: UserEmail::class)]\n    public UserEmail $email;\n\n    public \\DatetimeImmutable $createdAt;\n\n    private function __construct() {}\n\n    public static function create(string $name, string $email): static\n    {\n        return static::make([\n            'name' => $name,\n            'email' => $email,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Related Entities in Cycle ORM\nDESCRIPTION: Demonstrates how to persist entities with Belongs To relationships using EntityManager. The example shows creating and saving a Post with an associated User.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/belongs-to.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post();\n$post->setUser(new User(\"Antony\"));\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($post);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Updating an Entity in Cycle ORM\nDESCRIPTION: This SQL snippet represents the typical SQL statement generated by Cycle ORM when updating an entity. It demonstrates how the ORM updates only the changed fields of the entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/crud.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `users`\nSET `name` = \"John\"\nWHERE `id` = 1\n```\n\n----------------------------------------\n\nTITLE: Using Parameters with IN Operator\nDESCRIPTION: Example of using Parameter object for array values in IN condition\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', 'in', new \\Cycle\\Database\\Injection\\Parameter([1,2,3]));\n```\n\n----------------------------------------\n\nTITLE: Defining Has One Relation using PHP Attributes\nDESCRIPTION: Shows how to define a Has One relation between User and Address entities using PHP attributes. The relation is defined using the HasOne attribute with a target class specification.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Relation\\HasOne;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[HasOne(target: Address::class)]\n    public ?Address $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Relations in Cycle ORM\nDESCRIPTION: Shows how to handle nullable Belongs To relationships, including removing a related entity when the relation is configured as nullable.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/belongs-to.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$post = $orm->getRepository(Post::class)->findOne();\n\n$post->setUser(null);\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($post);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Primary Key in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to find an entity using its primary key value. Returns null if no entity is found.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findByPK(1);\n```\n\n----------------------------------------\n\nTITLE: Query Injection Between Entities\nDESCRIPTION: Demonstrates how to inject one query into another for complex cross-entity comparisons.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/complex.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Injection\\Expression;\n\n$users = $orm->getRepository(User::class)->select();\n$orders = $orm->getRepository(Order::class)->select();\n\n// only orders of specific user (fallback to native column name)\n$sumOrders = $orders->where('user_id', new Expression($users->getBuilder()->resolve('id')))->buildQuery();\n\n$sumOrders->columns(new Expression('SUM('. $orders->getBuilder()->resolve('total') .')'));\n\n$users->where(\n    $sumOrders,\n    '>=',\n    new Expression($users->getBuilder()->resolve('balance'))\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ...\n    FROM \"users\" AS \"user\"\nWHERE (\n    SELECT\n    SUM (\"order\".\"total\")\n    FROM \"orders\" AS \"order\"\n    WHERE \"order\".\"user_id\" = \"user\".\"id\"\n    ) >= \"user\".\"balance\"\n```\n\n----------------------------------------\n\nTITLE: Adding HasOne Relation to User Entity\nDESCRIPTION: Updated User entity with a HasOne relationship to the Address entity. This includes the relation annotation, along with getter and setter methods for the address property.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasOne;\n\n#[Entity]\nclass User\n{\n    #[HasOne(target: Address::class)]\n    private ?Address $address;\n\n    // ...\n\n    public function getAddress()\n    {\n        return $this->address;\n    }\n\n    public function setAddress(Address $address): void\n    {\n        $this->address = $address;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key Actions in Cycle ORM - PHP\nDESCRIPTION: Shows how to set up CASCADE actions for foreign key constraints on update and delete operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$foreignKey = $second->foreign('first_id')->references('first', 'id');\n\n$foreignKey->onDelete(\\Cycle\\ORM\\Reference\\ReferenceInterface::CASCADE);\n$foreignKey->onUpdate(\\Cycle\\ORM\\Reference\\ReferenceInterface::CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Single Field in Cycle ORM - PHP\nDESCRIPTION: Shows how to find an entity by searching a specific field value. Field names are automatically mapped to column names.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$entity = $repository->findOne([\n  'name' => 'Antony'\n]);\n```\n\n----------------------------------------\n\nTITLE: Grouping Results in Cycle ORM Queries\nDESCRIPTION: Example of using the groupBy method to group query results. This shows how to count records by status field by grouping results by status.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['status', 'count(*) as count'])->groupBy('status');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `status`,\n       count(*) as `count`\nFROM `primary_test`\nGROUP BY `status`\n```\n\n----------------------------------------\n\nTITLE: Configuring Relations in Schema Builder\nDESCRIPTION: Shows how to configure entity relations using the schema builder, specifically setting up a hasMany relationship.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/dynamic-schema.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$entity->getRelations()->set(\n    'posts',\n    (new \\Cycle\\Schema\\Definition\\Relation())->setTarget('post')->setType('hasMany')\n);\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in PHP\nDESCRIPTION: PHP code to execute all outstanding migrations using the 'migrate' command.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Migrations\\Capsule;\n\n$migrator->run(new Capsule($dbal->database()));\n```\n\n----------------------------------------\n\nTITLE: Using Between Condition in PHP\nDESCRIPTION: Shows how to use between operator in where conditions\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', 'between', 10, 20);\n```\n\n----------------------------------------\n\nTITLE: Defining Belongs To Relation using PHP Annotations\nDESCRIPTION: Shows how to define a Belongs To relation using PHP attributes/annotations. The example demonstrates setting up a relation between Post and User entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/belongs-to.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\BelongsTo;\n\n#[Entity]\nclass Post\n{\n    // ...\n\n    #[BelongsTo(target: User::class)]\n    private User $user;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities with Separate Queries\nDESCRIPTION: Example of retrieving users with their addresses using separate queries instead of JOIN. This uses the OUTER_QUERY method option to force loading the relation with an additional query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$result = $orm->getRepository(User::class)\n    ->select()\n    ->load('address', ['method' => \\Cycle\\ORM\\Select::OUTER_QUERY])\n    ->fetchAll();\n\nforeach ($result as $user) {\n    print_r($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Schema Defaults in Cycle ORM\nDESCRIPTION: This code demonstrates how to configure custom default schema classes for all entities in Cycle ORM. It allows setting custom Repository, Source, Mapper, Scope, and Typecast Handler classes that will be used by default for all entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/default-classes.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Factory;\nuse Cycle\\ORM\\ORM;\nuse Cycle\\ORM\\Schema;\n\n$orm = new ORM(\n    (new Factory($dbal))->withDefaultSchemaClasses([\n        SchemaInterface::REPOSITORY => MyRepository::class,\n        SchemaInterface::SOURCE => MySource::class,\n        SchemaInterface::MAPPER => MyMapper::class,\n        SchemaInterface::SCOPE => MyScope::class,\n        SchemaInterface::TYPECAST_HANDLER => [\n            \\Cycle\\ORM\\Parser\\Typecast::class,\n            UuidTypecast::class,\n        ],\n    ])\n);\n```\n\n----------------------------------------\n\nTITLE: Comparing Columns Using Expressions\nDESCRIPTION: Shows how to create queries that compare two columns using resolved column names and expressions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/complex.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$qb = $select->getBuilder();\n\n// to compare 2 columns\n$select->where(\n    'credits',\n    '>',\n    new \\Cycle\\Database\\Injection\\Expression($qb->resolve('balance'))\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ...\nFROM \"users\" AS \"user\"\nWHERE\n    \"user\".\"credits\"\n    > \"user\".\"balance\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NotDeletedScope in PHP for Cycle ORM\nDESCRIPTION: This snippet demonstrates how to create a scope class that filters out deleted entities by checking if the deleted_at field is null. This scope implements the ScopeInterface from Cycle ORM's Select namespace.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/scope.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Select;\n\nclass NotDeletedScope implements Select\\ScopeInterface\n{\n    public function apply(Select\\QueryBuilder $query)\n    {\n        $query->where('deleted_at', '=', null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Iterator with Individual Services in Cycle ORM\nDESCRIPTION: This example demonstrates how to create an Iterator using individual services instead of the ORM object. This gives more granular control over the Iterator creation process.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/iterator.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$iterator = \\Cycle\\ORM\\Iterator::createWithServices($heap, $schema, $entityFactory, $role, $data);\n```\n\n----------------------------------------\n\nTITLE: Extended Table Configuration with Additional Columns and Indexes\nDESCRIPTION: Shows how to specify additional table columns and indexes at the entity level, including primary key, string columns, and enum types with various index configurations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\n#[Column(name: 'created_at', type: 'datetime')]\n#[Column(name: 'deleted_at', type: 'datetime')]\n#[Index(columns: ['username'], unique: true)]\n#[Index(columns: ['name', 'id DESC'])]\nclass User\n{\n    #[Column(type: 'primary')]\n    protected int $id;\n\n    #[Column(type: 'string(32)')]\n    protected string $username;\n\n    #[Column(type: 'enum(active,disabled)', default: 'active')]\n    protected $status;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Declaration\nDESCRIPTION: Configuring multiple databases with different prefixes using DatabaseManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Driver;\n\n$dbal = new DatabaseManager(new DatabaseConfig([\n    'databases'   => [\n        'primary' => [\n           'driver'  => 'mysql',\n           'prefix'  => 'primary_'\n        ],\n        'secondary'=> [\n            'driver'  => 'mysql',\n            'prefix'  => 'secondary_'\n        ]\n    ],\n    'connections' => [\n        // ...\n    ],\n]));\n\nprint_r($dbal->database('primary'));\n\nprint_r($dbal->database('secondary'));\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Mapper to Entity in PHP\nDESCRIPTION: Shows how to associate a custom mapper with an entity using PHP attributes. The Entity attribute specifies which mapper class should handle the entity's persistence operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/extending.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(mapper: MyMapper::class)]\nclass User\n{\n   //...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Migrations in PHP\nDESCRIPTION: Examples of common migration management tasks including listing available migrations, running all pending migrations, and rolling back the last migration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/sync-schema.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprint_r($migrator->getMigrations());\n```\n\nLANGUAGE: php\nCODE:\n```\nwhile($migrator->run() !== null) { }\n```\n\nLANGUAGE: php\nCODE:\n```\n$migrator->rollback();\n```\n\n----------------------------------------\n\nTITLE: Executing and parsing an external query using collected references\nDESCRIPTION: Demonstrates how to use the collected references to execute a secondary query for related records. This approach uses a WHERE IN condition with the collected references to fetch only relevant child records.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Injection\\Parameter;\nuse Cycle\\Database\\StatementInterface;\n\n$query = $db\n    ->select('o.id', 'o.user_id', 'o.total')\n    ->from('orders as o')\n    ->where('o.user_id', 'in', new Parameter($orders->getReferences()));\n\nforeach ($query->run()->fetchAll(StatementInterface::FETCH_NUM) as $row) {\n    // start from 1st (0) column\n    $orders->parseRow(0, $row);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Many To Many Related Data in PHP\nDESCRIPTION: Demonstrates how to load and access related entities in a Many To Many relationship using the ORM's select and load methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)\n    ->select()\n    ->load('tags')\n    ->fetchAll();\n\nforeach ($users as $u) {\n    print_r($u->getTags()->toArray());\n}\n```\n\n----------------------------------------\n\nTITLE: Low-Level Query Modification\nDESCRIPTION: Shows how to modify the underlying query directly for complex selections and custom column definitions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/complex.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$query = $select->buildQuery();\n\n$query\n    ->columns('id', new \\Cycle\\Database\\Injection\\Expression('SUM(balance)'))\n    ->groupBy('id');\n\nprint_r($query->fetchAll());\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"id\",\n       SUM(\"balance\")\nFROM \"users\" AS \"user\"\nGROUP BY \"id\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Generation Pipeline in PHP\nDESCRIPTION: Demonstrates setting up a complete schema generation pipeline with multiple generators for relations, validation, tables, and typecast generation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/schema-builder.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\n\n$schema = (new Schema\\Compiler())->compile($r, [\n    new Schema\\Generator\\GenerateRelations(), // generate entity relations\n    new Schema\\Generator\\ValidateEntities(),  // make sure all entity schemas are correct\n    new Schema\\Generator\\RenderTables(),      // declare table schemas\n    new Schema\\Generator\\RenderRelations(),   // declare relation keys and indexes\n    new Schema\\Generator\\SyncTables(),        // sync table changes to database\n    new Schema\\Generator\\GenerateTypecast(),  // typecast non string columns\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity-Specific Query Class\nDESCRIPTION: Demonstrates how to create a query class specific to the User entity with additional filtering methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @extends CommonQuery<User>\n */\nclass UserQuery extends CommonQuery\n{\n    public function __construct()\n    {\n        parent::__construct(User::class);\n    }\n\n    public function emailVerified(bool $state = true): static\n    {\n        return $this->where(['email_verified' => $state]);\n    }\n\n    public function subscribtionLevel(Subsctiption $level): static\n    {\n        return $this->where('subscriptionLevel', '>=' , $level->alue);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Has Many Implementation with Collection Methods\nDESCRIPTION: Extended implementation showing a Has Many relation with constructor initialization and collection management methods including add and remove operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[HasMany(target: Post::class)]\n    protected array $posts = [];\n\n    // ...\n\n    public function getPosts(): array\n    {\n        return $this->posts;\n    }\n    \n    public function addPost(Post $post): void\n    {\n        $this->posts[] = $post;\n    }\n    \n    public function removePost(Post $post): void\n    {\n        $this->posts = array_filter($this->posts, static fn(Post $p) => $p !== $post);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Embeddable Entity in PHP using Cycle ORM\nDESCRIPTION: Demonstrates how to create an embeddable Address entity using attributes. Shows the structure with column definitions for country, city, and address fields.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Embeddable;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Embeddable]\nclass Address\n{\n    #[Column(type: 'string')]\n    public string $country;\n\n    #[Column(type: 'string(32)')]\n    public string $city;\n\n    #[Column(type: 'string(100)')]\n    public string $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Queries in Update Values with Cycle ORM\nDESCRIPTION: Example of using a nested query in update values. This demonstrates updating a name column with a value selected from another table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$update = $database->table('test')->update([\n    'name' => $database->table('users')->select('name')->where('id', 1)\n]);\n\n$update->where('id', '<', 10)->run();\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `primary_test`\nSET `name` = (SELECT `name`\n              FROM `primary_users`\n              WHERE `id` = 1)\nWHERE `id` < 10\n```\n\n----------------------------------------\n\nTITLE: Database Aliasing Configuration\nDESCRIPTION: Setting up database aliases to provide multiple access points to physical databases.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Driver;\n\n$dbal = new DatabaseManager(new DatabaseConfig([\n    'aliases'   => [\n        'db'    => 'primary',\n        'other' => 'secondary'\n    ],\n    'databases'   => [\n        // ...\n    ],\n    'connections' => [\n        // ...\n    ],\n]));\n\nprint_r($dbal->database('db'));\n\nprint_r($dbal->database('other'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Database Mapper in PHP\nDESCRIPTION: Creates a custom DatabaseMapper implementation that handles entity creation, hydration, and data extraction.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/about.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\ORMInterface;\nuse Cycle\\ORM\\Mapper\\DatabaseMapper;\n\nfinal class CustomMapper extends DatabaseMapper\n{\n    private string $class;\n\n    public function __construct(ORMInterface $orm, string $role)\n    {\n        parent::__construct($orm, $role);\n\n        // entity class\n        $this->class = $orm->getSchema()->define($role, Schema::ENTITY);\n    }\n\n    /** @inheritdoc */\n    public function init(array $data): object\n    {\n        $class = $this->class;\n        return new $class($data);\n    }\n\n    /** @inheritdoc */\n    public function hydrate(object $entity, array $data): object\n    {\n        $entity->setData($data);\n        return $entity;\n    }\n\n    /** @inheritdoc */\n    public function extract(object $entity): array\n    {\n        return $entity->getData();\n    }\n\n    /**\n     * Get entity columns.\n     */\n    public function fetchFields(object $entity): array\n    {\n        // fetch entity fields and ignore custom columns\n        return array_intersect_key(\n            $this->extract($entity),\n            $this->columns + $this->parentColumns\n        );\n    }\n    \n    public function fetchRelations(object $entity): array\n    {\n        return array_intersect_key(\n            $this->extract($entity),\n            $this->relationMap->getRelations()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Operator in Where Clause\nDESCRIPTION: Demonstrates using a custom comparison operator in where conditions\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$select->where('balance', '>', 100);\n```\n\n----------------------------------------\n\nTITLE: Sorting Related Entities in PHP\nDESCRIPTION: Shows how to sort query results using related entity columns.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$select->orderBy('posts.id', 'DESC');\n```\n\n----------------------------------------\n\nTITLE: Creating a joined query across multiple tables\nDESCRIPTION: Builds a more complex query that joins users and orders tables with aliases. This flat query result will later be transformed into a hierarchical structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query = $db\n    ->select('u.id', 'u.balance', 'o.id', 'o.user_id', 'o.total')\n    ->from('users as u')\n    ->leftJoin('orders as o')->on('o.user_id', 'u.id');\n```\n\n----------------------------------------\n\nTITLE: Execute Insert Query\nDESCRIPTION: Demonstrates how to execute an insert query and get the last inserted ID.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprint_r($insert->run());\n```\n\n----------------------------------------\n\nTITLE: Grouped Where Conditions with OR Operator\nDESCRIPTION: Demonstrates how to use grouped WHERE conditions with OR operator joining the main condition to the group.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->where('id', 1)\n    ->orWhere(\n        static function (SelectQuery $select) {\n            $select\n                ->where('status', 'active')\n                ->andWhere('id', 10);\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Advanced Join Loading in PHP\nDESCRIPTION: Example of combining joining and relation loading with table aliases.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->with('posts', [\n        'as' => 'posts',\n        'where' => ['flagged' => true]\n    ])\n    ->load('posts', ['using' => 'posts']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Schema Synchronization in PHP\nDESCRIPTION: Demonstrates how to set up automatic schema synchronization using SyncTables generator in the schema compiler. This approach is recommended for development environments.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/sync-schema.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\nuse Cycle\\Annotated;\n\n$schema = (new Schema\\Compiler())->compile(new Schema\\Registry($dbal), [\n    ...\n    new Schema\\Generator\\SyncTables(), // sync table changes to database\n    ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Automatic Join in RefersTo Relations\nDESCRIPTION: Shows how Select can automatically join related tables on the first where condition.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)\n    ->select()\n    ->where('lastComment.approved', true)\n    ->fetchAll();\n\nprint_r($users);\n```\n\n----------------------------------------\n\nTITLE: Advanced Join - Combining Array Conditions with Closure\nDESCRIPTION: Shows how to use both array conditions and a closure in a join statement. This approach allows combining static conditions with dynamically generated ones in a single join.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$select->join('LEFT', 'photos', 'pht', [\n    'pht.user_id' => 'users.id',\n    'users.is_admin' => 'pht.is_admin',\n    static function (\n        \\Cycle\\Database\\Query\\SelectQuery $select,\n        string $boolean,\n        callable $wrapper\n    ): void {\n        $select\n            ->on('photos.user_id', 'users.id')\n            ->onWhere('photos.type', 'avatar');\n    }\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `users`\n         LEFT JOIN `photos` AS `pht`\n                   ON (\n                               `pht`.`user_id` = `users`.`id`\n                           AND\n                               `users`.`is_admin` = `pht`.`is_admin`\n                           AND\n                               (`photos`.`user_id` = `users`.`id` AND `photos`.`type` = \"avatar\")\n                       )\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Custom Repository Class in PHP\nDESCRIPTION: Shows how to create a custom repository by extending Cycle\\ORM\\Select\\Repository class.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/repository.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Example\\Repository;\n\nclass UserRepository extends \\Cycle\\ORM\\Select\\Repository\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mapper for Active Record Entities\nDESCRIPTION: Implementation of a custom mapper that extends DatabaseMapper to handle initialization, hydration, and extraction of Active Record entities, preserving their array-based data structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\nclass ARMapper extends ORM\\Mapper\\DatabaseMapper\n{\n    public function init(array $data, string $role = null): object\n    {\n        $class = $this->resolveClass($data, $role);\n\n        return new $class;\n    }\n\n    public function hydrate(object $entity, array $data): object\n    {\n        /** @var Record $entity */\n        $entity->__setData($data);\n\n        return $entity;\n    }\n\n    public function extract(object $entity): array\n    {\n        /** @var Record $entity */\n        return $entity->__getData();\n    }\n\n    public function fetchFields(object $entity): array\n    {\n        return array_intersect_key(\n            $this->extract($entity),\n            array_flip($this->columns)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection\nDESCRIPTION: PHP code for setting up a SQLite database connection using Cycle DatabaseManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\ninclude 'vendor/autoload.php';\n\nuse Cycle\\Database;\nuse Cycle\\Database\\Config;\n\n$dbal = new Database\\DatabaseManager(\n    new Config\\DatabaseConfig([\n        'default' => 'default',\n        'databases' => [\n            'default' => ['connection' => 'sqlite']\n        ],\n        'connections' => [\n            'sqlite' => new Config\\SQLiteDriverConfig(\n                connection: new Config\\SQLite\\MemoryConnectionConfig(),\n                queryCache: true,\n            ),\n        ]\n    ])\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Levels of Self-References\nDESCRIPTION: Demonstrates how to load multiple levels of parent relations in a self-referencing structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$result = $orm->getRepository(Category::class)\n    ->select()\n    ->load('parent.parent.parent.parent') // load 4 parent levels\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Using DISTINCT in Cycle ORM Queries\nDESCRIPTION: Example of using the distinct method to select unique results. This is recommended when loading HAS_MANY or MANY_TO_MANY relations in ORM to avoid duplicate records.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$select->distinct();\n```\n\n----------------------------------------\n\nTITLE: Custom Reference Implementation in PHP\nDESCRIPTION: Shows how to create a custom UserID reference class implementing ReferenceInterface for more convenient reference handling.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/reference.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Reference\\ReferenceInterface;\n\nclass UserID implements ReferenceInterface\n{\n    public function __construct(\n        private int $id\n    ) {\n    }\n\n    public function getRole(): string\n    {\n        return 'user';\n    }\n\n    public function getScope(): array\n    {\n        return ['id' => $this->id];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Notation for Where Conditions\nDESCRIPTION: Shows how to use array notation for specifying multiple conditions\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    'id' => ['in' => new \\Cycle\\Database\\Injection\\Parameter([1, 2, 3])],\n    'status' => ['like' => 'active']\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Pivot Entity Data in Many To Many Relation\nDESCRIPTION: Demonstrates how to create a relationship with custom pivot entity data using setPivot method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$u = new User();\n$u->setName(\"Antony\");\n\n$tag = new Tag(\"tag a\");\n\n$u->tags->add($tag);\n$u->tags->setPivot($tag, new UserTag(new \\DateTimeImmutable()));\n\n$t->persist($u);\n$t->run();\n```\n\n----------------------------------------\n\nTITLE: Using Complex Join Conditions with OR Logic\nDESCRIPTION: Shows how to create a join with multiple ON conditions using OR logic. The example demonstrates chaining on() and orOn() methods to create more complex join conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$select->leftJoin('users')\n    ->on('users.id', 'test.id')\n    ->orOn('users.id', 'test.balance');\n```\n\n----------------------------------------\n\nTITLE: Renaming Schema Elements in Cycle ORM - PHP\nDESCRIPTION: Demonstrates different methods for renaming columns and tables in Cycle ORM schemas.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$schema->string('email')->setName('new_email');\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema->renameColumn('email', 'new_email');\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema->setName('new_table_2');\n$schema->save();\n```\n\n----------------------------------------\n\nTITLE: Using Different Comparison Operators in Where Conditions\nDESCRIPTION: Demonstrates how to use various comparison operators like '>', 'like', and others in WHERE conditions to create more complex queries.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', '>', 10);\n$select->where('status', 'like', 'active');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Select Methods\nDESCRIPTION: Demonstrates how to use the custom finder method to retrieve active users.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/repository.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprint_r($orm->getRepository(\\Example\\User::class)->findActive()->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Initializing Active Record System with Schema\nDESCRIPTION: Code to initialize the Active Record system by configuring the ORM with the generated or manual schema and setting it on the Record base class.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$orm = $orm->with(schema: $schema);\nRecord::setORM($orm);\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Column in PHP Entity\nDESCRIPTION: Demonstrates how to define an enum column type in a Cycle ORM entity using attributes. Shows setting enum options with comma separator and default value.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n    // ...\n\n    #[Column(type: 'enum(active,disabled)', default: 'active')]\n    private string $status;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Keys in Schema\nDESCRIPTION: Shows how to define compound or custom primary keys using setPrimaryKeys() method. Primary keys can only be set during table creation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$schema->primary('id');\n$schema->string('something', 16);\n$schema->setPrimaryKeys(['id', 'something']);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repository Scope in Cycle ORM\nDESCRIPTION: Demonstrates how to use a custom repository scope method to modify repository behavior. This example retrieves the User repository and applies the 'withActive' filter to find all active users.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/chained-repository.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository(User::class);\n\nprint_r($repository->withActive()->findAll());\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Database Tables in PHP\nDESCRIPTION: Shows how to retrieve and iterate through all tables in a database, accessing each table's name. Only returns tables specific to the database prefix if one is defined.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($database->getTables() as $table) {\n    print_r($table->getName());\n}\n```\n\n----------------------------------------\n\nTITLE: Extended UserTag Pivot Entity with DateTime\nDESCRIPTION: Example of extending the pivot entity with additional properties like creation timestamp.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Relation\\ManyToMany;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass UserTag\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'datetime', default: null)]\n    private \\DateTimeInterface $created_at;\n\n    public function __construct(\\DateTimeInterface $d)\n    {\n        $this->created_at = $d;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB-style Where Conditions\nDESCRIPTION: Demonstrates using MongoDB-style syntax for building WHERE conditions with arrays.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    'id' => ['in' => new \\Cycle\\Database\\Injection\\Parameter([1, 2, 3])],\n    'status' => ['like' => 'active']\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE (`id` IN (1, 2, 3) AND `status` LIKE 'active')\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Builder in PHP\nDESCRIPTION: Shows how to access the query builder through the ORM repository\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select();\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Entity Scope in Cycle ORM Repository\nDESCRIPTION: Shows how to disable entity scopes (like soft-delete filters) in specific cases. This example creates a 'withDeleted' method that nullifies the scope, allowing queries to include records that would normally be filtered out.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/chained-repository.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass UserRepository extends \\Cycle\\ORM\\Select\\Repository\n{\n    public function withDeleted(): self\n    {\n        $repository = clone $this;\n        $repository->select->scope(null);\n\n        return $repository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Table Foreign Keys in PHP\nDESCRIPTION: Shows how to retrieve and analyze foreign key relationships, including referenced tables, columns, and deletion/update rules.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nforeach ($schema->getForeigns() as $foreign) {\n    print_r($foreign->getColumn());       //Local column name\n    print_r($foreign->getForeignTable()); //Global table name!\n    print_r($foreign->getForeignKey());\n\n    print_r($foreign->getDeleteRule());   //NO ACTION, CASCADE\n    print_r($foreign->getUpdateRule());   //NO ACTION, CASCADE\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding query() in Entity Class\nDESCRIPTION: Shows how to override the query() method in an entity class to return a custom query instance, enhancing the data access layer.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[Entity(table: 'user')]\nclass User extends ActiveRecord\n{\n    // ...\n\n    /**\n     * @return CommonQuery<static>\n     */\n    public static function query(): CommonQuery\n    {\n        return new CommonQuery(static::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Update Query with Cycle ORM\nDESCRIPTION: Shows how to use Expression instances in update values. This example updates the 'name' column with an uppercase version of its current value for records where 'id' is less than 10.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$update = $db->table('test')\n    ->update([\n        'name' => new \\Cycle\\Database\\Injection\\Expression('UPPER(test.name)')\n    ])\n    ->where('id', '<', 10)\n    ->run();\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `primary_test`\nSET `name` = UPPER(`primary_test`.`name`)\nWHERE `id` < 10\n```\n\n----------------------------------------\n\nTITLE: Simplified Where Condition Syntax\nDESCRIPTION: Shows how to use the simplified syntax for equality conditions where the comparison operator can be omitted.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$select->where('status', 'active');\n```\n\n----------------------------------------\n\nTITLE: Entity Deletion in PHP\nDESCRIPTION: Removes an entity from the database using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$user = /**  */;\n$em->delete($user)->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Relation Preloading\nDESCRIPTION: Shows how to create a custom finder method that preloads related entity data.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/repository.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Select;\n\nclass UserRepository extends Select\\Repository\n{\n    // ...\n\n    public function findActiveUsersLoadAddress(): Select\n    {\n        return $this->findActive()->load('address');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random UUID (Version 4)\nDESCRIPTION: Example of implementing UUID v4 in an entity class using random generation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid4;\nuse Ramsey\\Uuid\\UuidInterface;\n\n#[Entity]\n#[Uuid4(nullable: false)]\nclass User\n{\n    #[Column(field: 'uuid', type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Schema Access in Connection Configuration\nDESCRIPTION: Demonstrates how to configure a PostgreSQL driver to work with multiple schemas beyond the default 'public' schema. This configuration allows the database connection to access tables in 'public', 'private', and the current user's namespace.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/errata.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'postgres' => new Config\\PostgresDriverConfig(\n    connection: new Config\\Postgres\\TcpConnectionConfig(\n        database: 'spiral',\n        host: '127.0.0.1',\n        port: 5432,\n        user: 'spiral',\n        password: '',\n    ),\n    schema: [\n        'public', \n        'private', \n        '$user' // Current user namespace\n    ],\n    queryCache: true,\n),\n```\n\n----------------------------------------\n\nTITLE: Complex Query with Filtered Loading\nDESCRIPTION: Shows how to load related data with specific conditions and generate optimized SQL queries.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT `user`.`id`                   AS `c0`,\n                `user`.`name`                 AS `c1`,\n                `published_posts`.`id`        AS `c2`,\n                `published_posts`.`title`     AS `c3`,\n                `published_posts`.`published` AS `c4`,\n                `published_posts`.`user_id`   AS `c5`,\nFROM `spiral_users` AS `user`\n         INNER JOIN `spiral_posts` AS `published_posts`\n                    ON `published_posts`.`user_id` = `user`.`id`\nWHERE `published_posts`.`published` = true\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration to Update Existing Schema in PHP\nDESCRIPTION: PHP class example of a migration that alters an existing table schema by adding a new column and providing a rollback method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass NewFieldMigration extends Migration\n{\n    public function up()\n    {\n        $this->table('sample_table')\n            ->addColumn('field', 'float')\n            ->update();\n    }\n\n    public function down()\n    {\n        $this->table('sample_table')\n            ->dropColumn('field')\n            ->update();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Entity in Parent Class using Cycle ORM\nDESCRIPTION: Demonstrates how to embed an entity into a parent entity using the #[Embedded] attribute and proper initialization.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column\nuse Cycle\\Annotated\\Annotation\\Relation\\Embedded;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Embedded(target: 'UserCredentials')]\n    public UserCredentials $credentials;\n\n    public function __construct()\n    {\n        $this->credentials = new UserCredentials();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Table Aliases in JOIN Conditions in Cycle ORM\nDESCRIPTION: Example of using table aliases in JOIN conditions. This shows how to reference the joined table using a short alias in the JOIN conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['test.*', 'uu.name as user_name']);\n\n$select->innerJoin('users', 'uu')->onWhere('uu.name', 'Anton');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Methods\nDESCRIPTION: Example of using the custom query methods to fetch filtered and sorted user records.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users = User::query()\n    ->active(false)\n    ->sortByCreateTime(false)\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Records\nDESCRIPTION: Shows how to select only distinct (unique) records using the distinct method. This is particularly useful when loading HAS_MANY or MANY_TO_MANY relations in ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$select->distinct();\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Connection in PHP\nDESCRIPTION: Shows how to obtain database access using either DatabaseManager or entity source in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// via DatabaseManager\n$db = $dbal->database('default');\n\n// via Entity source\n$db = $orm->getSource(User::class)->getDatabase();\n```\n\n----------------------------------------\n\nTITLE: Quick Table Insert\nDESCRIPTION: Demonstrates direct table insertion without creating an InsertQuery builder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$table = $db->table('test');\n\nprint_r($table->insertOne([\n    'time_created' => new \\DateTime(),\n    'name' => 'Anton',\n    'email' => 'test@email.com',\n    'balance' => 800.90\n]));\n```\n\n----------------------------------------\n\nTITLE: Assigning Scope to Entity using PHP Attributes in Cycle ORM\nDESCRIPTION: This code shows how to assign a scope to an entity using PHP attributes with the Cycle Annotated extension. The Entity attribute accepts a scope parameter that takes the class name of the scope to apply.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/scope.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(scope: NotDeletedScope::class)]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveRecord Pattern in Entity Class\nDESCRIPTION: Demonstrates how to implement ActiveRecord-like functionality in an entity class using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/about.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\EntityManager;\n\nclass Entity\n{\n    // ...\n\n    public function save(): void\n    {\n        (new EntityManager(App::getORM()))->persist($this)->run();\n    }\n\n    public function delete(): void\n    {\n        (new EntityManager(App::getORM()))->delete($this)->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger Factory in PHP\nDESCRIPTION: Shows how to create a custom logger factory that provides different loggers based on the driver type. Implements LoggerFactoryInterface to provide conditional logger assignment.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/profiling.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\DatabaseManager;\nuse Cycle\\Database\\Config\\DatabaseConfig;\nuse Cycle\\Database\\LoggerFactoryInterface;\n\nclass CustomLoggerFactory implements LoggerFactoryInterface {\n\n    public function getLogger(DriverInterface $driver = null): LoggerInterface\n    {\n        if ($driver->getType() === 'SQLite') {\n            return new FileLooger();\n        }\n        \n        return new \\Psr\\Log\\NullLogger();\n    }\n}\n\n$dbal = new DatabaseManager(\n    new DatabaseConfig(...), \n    new CustomLoggerFactory()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Address Entity with Column Annotations\nDESCRIPTION: Basic entity declaration for an Address class with id and city properties using PHP 8 attributes for Cycle ORM mapping. The class includes constructor and getter methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass Address\n{\n    public function __construct(\n        #[Column(type: 'primary')]\n        private int $id,\n\n        #[Column(type: 'string')]\n        private string $city,\n    ) {}\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function getCity(): string\n    {\n        return $this->city;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Child Objects Example\nDESCRIPTION: Shows how to add child objects to a Has Many collection and persist them to the database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->addPost(new Post(\"test post\"));\n```\n\n----------------------------------------\n\nTITLE: Adding User Values to JOIN Conditions in Cycle ORM\nDESCRIPTION: Example of using the onWhere method to include user parameter values in JOIN conditions. This demonstrates filtering joined records by a specific name value.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$select->innerJoin('users')->on(['users.id' => 'test.id'])->onWhere('users.name', 'Anton');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `primary_users`.`name` as `user_name`\nFROM `primary_test`\n         INNER JOIN `primary_users`\n                    ON `primary_users`.`id` = `primary_test`.`id` AND `primary_users`.`name` = 'Anton'\n```\n\n----------------------------------------\n\nTITLE: Using Quick Insert Methods with Table Instance\nDESCRIPTION: Demonstrates a simplified approach to inserting data by using the insertOne method directly from the table instance. This method automatically runs the query and returns the last inserted ID.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$table = $db->table('test');\n\nprint_r($table->insertOne([\n    'time_created' => new \\DateTime(),\n    'name'         => 'Anton',\n    'email'        => 'test@email.com',\n    'balance'      => 800.90\n]));\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample User Active Record Entity\nDESCRIPTION: Example of a simple User entity that extends the Record base class, demonstrating how to define table associations through class constants.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Record {\n    public const TABLE = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Load and With Methods in a Query\nDESCRIPTION: Example of combining the load() and with() methods to both filter by and load related entities. This demonstrates how Cycle ORM manages multiple JOINs to the same table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$result = $orm->getRepository(User::class)\n    ->select()\n    ->with('address')->where('address.city', 'New York')\n    ->load('address')\n    ->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Complex Expressions in Select Query using Cycle ORM\nDESCRIPTION: Shows how to use the Expression object to create complex, driver-specific SQL injections with included parameters in a select query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$db->table('test')\n    ->select()\n    ->where(new \\Cycle\\Database\\Injection\\Expression('SUM(column) = ?', $value))\n    ->run();\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Properties in Cycle ORM\nDESCRIPTION: Demonstrates the available properties on event objects that provide access to entity information, mapper, state, and timestamps during lifecycle events.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/events.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Entity role\nprint_r($event->role);      \n\n// Entity mapper\nprint_r($event->mapper);     \n\n// Read only entity object. Change entity property values carefully.\n// Property value changes won't affect persisting data, but will affect next event listeners.\nprint_r($event->entity);    \n\n// Use for changing persisting data. Data from state will be stored to the database\nprint_r($event->state);\n\n// DateTime object shared between all events\nprint_r($event->timestamp); \n\n// Entity state before changes\nprint_r($event->node); \n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for Embedded Entities in Cycle ORM\nDESCRIPTION: Demonstrates how to configure lazy loading for embedded entities and preload them when needed.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column\nuse Cycle\\Annotated\\Annotation\\Relation\\Embedded;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Embedded(target: UserCredentials::class, load: 'lazy')]\n    public UserCredentials $credentials;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Insert Query Construction\nDESCRIPTION: Demonstrates creating a basic insert query using the InsertBuilder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$insert = $db->insert('test');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Select Methods\nDESCRIPTION: Example of implementing a custom finder method in the repository to filter active users.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/repository.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Example\\Repository;\n\nuse Cycle\\ORM\\Select;\n\nclass UserRepository extends Select\\Repository\n{\n    public function findActive(): Select\n    {\n        return $this->select()->where('status', 'active');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Related Objects Separately\nDESCRIPTION: Alternative approach to storing related entities by persisting them separately. Cycle ORM automatically links them together and maintains the proper order of operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($address);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cached Heap in Cycle ORM\nDESCRIPTION: Example of creating a custom heap implementation that integrates with a cache store to provide automatic entity caching functionality.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/caching.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Heap\\HeapInterface;\n\nfinal class CachedHeap implements HeapInterface, \\IteratorAggregate\n{\n    public function __construct(private CacheStore $cacheStore) {}\n    \n    // ...\n}\n\n$orm = $orm->with(heap: new CachedHeap(new CacheStore()))\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Grouped Conditions with AND\nDESCRIPTION: Shows the SQL statement generated for grouped WHERE conditions with AND joining the main condition to the group.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = 1\n  AND (`status` = 'active' OR `id` = 10)\n```\n\n----------------------------------------\n\nTITLE: Single Query Loading Approach - PHP\nDESCRIPTION: Loading categories and related photos using a single query approach with ordering.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$result = $categories->load('photos', [\n     'method' => \\Cycle\\ORM\\Select::SINGLE_QUERY,\n     'load'   => function (\\Cycle\\ORM\\Select\\QueryBuilder $q) {\n         $q->orderBy('@.@.position');  // @ current relation (photos), @.@ current relation pivot (photo_to_category)\n     }\n])->orderBy('id')->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Generator for Active Record Entities\nDESCRIPTION: A schema generator that automatically discovers and configures Record-based entities using class introspection and Cycle ORM Registry.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema\\GeneratorInterface;\nuse Cycle\\Schema\\Registry;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Tokenizer\\ClassesInterface;\n\nclass ARGenerator implements GeneratorInterface\n{\n    /** @var ClassesInterface */\n    private $classLocator;\n\n    public function __construct(ClassesInterface $classLocator)\n    {\n        $this->classLocator = $classLocator;\n    }\n\n    public function run(Registry $registry): Registry\n    {\n        foreach ($this->classLocator->getClasses(Record::class) as $entity) {\n            if ($entity->isAbstract()) {\n                continue;\n            }\n\n            $this->declareEntity($registry, $entity->getName(), $entity->getConstant('TABLE'));\n        }\n\n        return $registry;\n    }\n\n    private function declareEntity(Registry $registry, string $class, string $table)\n    {\n        // see below\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Related Data with Implicit Join\nDESCRIPTION: Demonstrates automatic joining of related tables when filtering entities in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/belongs-to.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$posts = $orm->getRepository(Post::class)\n    ->select()\n    ->where('user.status', 'active')\n    ->fetchAll();\n\nprint_r($posts);\n```\n\n----------------------------------------\n\nTITLE: Handling Entity Delete Event in Cycle ORM\nDESCRIPTION: Shows implementation of an OnDelete event listener that performs authorization check before allowing entity deletion.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/events.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\n\npublic function onDelete(Command\\OnDelete $event): void\n{\n    if (!$event->entity->getAuthor()->hasRole('admin')) {\n        throw new UnauthorizedException('You don\\'t have right to delete this entity.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database with SQLite in Memory\nDESCRIPTION: Shows how to set up a DatabaseManager with SQLite in-memory configuration for testing. This approach allows testing with a real database without affecting production data.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/testing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\nuse Cycle\\Database;\nuse Cycle\\Database\\Config;\n\n$dbal = new Database\\DatabaseManager(\n    new Config\\DatabaseConfig([\n        'default' => 'default',\n        'databases' => [\n            'default' => [\n                'connection' => 'sqlite'\n            ]\n        ],\n        'connections' => [\n            'sqlite' => new Config\\SQLiteDriverConfig(\n                connection: new Config\\SQLite\\MemoryConnectionConfig(),\n                queryCache: true,\n            ),\n        ]\n    ])\n);\n\n$orm = new ORM\\ORM(new ORM\\Factory($dbal));\n\n// you can use already calculated database schema\n$orm = $orm->with(schema: new ORM\\Schema($cachedSchema));\n```\n\n----------------------------------------\n\nTITLE: Creating New ORM Instance with Altered Schema (PHP)\nDESCRIPTION: Shows how to create a new ORM instance with an altered schema using the with method. This allows for schema modification without affecting the original ORM instance.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/schema.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$orm2 = $orm->with(schema: new \\Cycle\\ORM\\Schema([...]));\n```\n\n----------------------------------------\n\nTITLE: Persisting RefersTo Relations\nDESCRIPTION: Shows how to persist an entity with a RefersTo relation using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->addComment(new Comment(\"hello world\"));\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Where Conditions\nDESCRIPTION: Demonstrates how to chain multiple WHERE conditions using fluent syntax, which results in conditions joined with AND operator.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->where('id', 1)\n    ->where('status', 'active');\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with Promise Mapper\nDESCRIPTION: PHP class definition for User entity using Promise Mapper with both eager and lazy loading relations. Shows implementation of HasMany relationships with Posts and Tags.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/promise-mapper.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\nuse Cycle\\ORM\\PromiseMapper\\PromiseMapper;\nuse Cycle\\ORM\\Reference\\ReferenceInterface;\n\n#[Entity(mapper: PromiseMapper::class)]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[HasMany(target: Post::class, collection: 'array', load: 'eager')]\n    public array $posts;\n    \n    #[HasMany(target: Tag::class, collection: 'array', load: 'lazy')]\n    public ReferenceInterface|array $tags;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Schema Definition with StdMapper\nDESCRIPTION: Demonstrates manual schema definition using Schema and Relation constants, including configuration of tables, columns, and relationships.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/dynamic-schema.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Relation;\nuse Cycle\\ORM\\Mapper\\StdMapper;\n\n$orm = $orm->with(schema: new Schema([\n    'user' => [\n        Schema::MAPPER => StdMapper::class,\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'user',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => ['id', 'email', 'balance'],\n        Schema::TYPECAST => ['id' => 'int', 'balance' => 'float'],\n        Schema::RELATIONS => [\n            'comments' => [\n                Relation::TYPE => Relation::HAS_MANY,\n                Relation::TARGET => 'comment',\n                Relation::SCHEMA => [\n                    Relation::CASCADE => true,\n                    Relation::INNER_KEY => 'id',\n                    Relation::OUTER_KEY => 'user_id',\n                ],\n            ],\n        ],\n    ],\n    'comment' => [\n        Schema::MAPPER => StdMapper::class,\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'comment',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => ['id', 'user_id', 'message'],\n        Schema::TYPECAST => ['id' => 'int'],\n        Schema::RELATIONS => [],\n    ],\n]));\n```\n\n----------------------------------------\n\nTITLE: Working with Lazy-Loaded Relations in PHP\nDESCRIPTION: Examples showing incorrect and correct ways to handle lazy-loaded relations, particularly when dealing with array modifications and references.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/proxy-mapper.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$post->tags[] = new Tag(); // Indirect modification of overloaded property Post::$tags has no effect\n$comments = &$post->comments; // Indirect modification of overloaded property Post::$comments has no effect\n\n// Load tags\n$post->tags;\n$post->tags[] = new Tag();\n// Load comments\n$post->comments;\n$comments = &$post->comments;\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Prefix in PHP using DatabaseManager\nDESCRIPTION: Demonstrates how to set up database prefix isolation during initial configuration using DatabaseManager. Uses SQLite connection with a specified table prefix 'my_prefix_' for the default database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/isolation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Cycle\\Database\\DatabaseManager;\nuse Cycle\\Database\\Config;\n\n$dbal = new DatabaseManager(new Config\\DatabaseConfig([\n    'databases'   => [\n        'default' => ['connection' => 'sqlite', 'prefix' => 'my_prefix_'],\n    ],\n    'connections' => [\n        'sqlite' => new Config\\SQLiteDriverConfig(\n            connection: new Config\\SQLite\\MemoryConnectionConfig(),\n            queryCache: true,\n        ),\n    ],\n]));\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Declaration for Active Record Schema Generator\nDESCRIPTION: The declareEntity method that links entities to database tables and automatically extracts column information to create field definitions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema\\Definition;\n\n// ...\n\nprivate function declareEntity(Registry $registry, string $class, string $table)\n{\n    $e = new Definition\\Entity();\n    $e->setRole($class);\n    $e->setClass($class);\n    $e->setMapper(ARMapper::class);\n\n    $registry->register($e);\n    $registry->linkTable($e, 'default', $table);\n\n    $schema = $registry->getTableSchema($e);\n\n    foreach ($schema->getColumns() as $column) {\n        $field = new Definition\\Field();\n        $field->setColumn($column->getName());\n\n        if (in_array($column->getName(), $schema->getPrimaryKeys())) {\n            $field->setPrimary(true);\n        }\n\n        $e->getFields()->set($column->getName(), $field);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with RefersTo Relations\nDESCRIPTION: Examples of filtering entities based on related data using with() and where() conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = $orm->getRepository(User::class)\n    ->select()\n    ->with('lastComment')->where('lastComment.approved', true)\n    ->fetchAll();\n\nprint_r($users);\n```\n\n----------------------------------------\n\nTITLE: Syncing Multiple Related Tables in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to synchronize multiple related tables using the Schema Reflector to handle dependencies correctly.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$schema = $database->table('table_a')->getSchema();\n$schema->primary('id');\n\n$schemaB = $database->table('table_b')->getSchema();\n$schemaB->primary('id');\n$schemaB->integer('a_id');\n$schemaB->foreign('a_id')->references('table_a', 'id');\n\n$r = new \\Cycle\\Database\\Schema\\Reflector();\n$r->addTable($schemaB);\n$r->addTable($schema);\n\n$pool->run();\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations in PHP\nDESCRIPTION: PHP code to set up and run the migration generator. It demonstrates how to register entities and create migrations based on schema changes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema\\Registry;\nuse Cycle\\Schema\\Generator\\Migrations;\nuse Cycle\\Schema\\Definition\\Entity;\nuse Cycle\\Schema\\Generator\\Migrations\\GenerateMigrations;\n\n$registry = new Registry($dbal);\n$registry->register(....);\n\n$generator = new GenerateMigrations($migrator->getRepository(), $migrator->getConfig());\n\n// Migration generator creates set of migrations needed to sync database schema with desired state.\n// Each database will receive it's own migration.\n$generator->run($registry);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity with Typecasted Column from Repository in Cycle ORM\nDESCRIPTION: Demonstrates retrieving an entity from the repository, which automatically wraps the column value using the defined typecast handler.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(User::class)->findOne();\n\nprint_r($user);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Repository through ORM\nDESCRIPTION: Shows how to access the custom repository implementation through the ORM's getRepository method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/repository.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository(\\Example\\User::class);\n\nprint_r($repository::class);\n```\n\n----------------------------------------\n\nTITLE: Using andWhere for Better Readability\nDESCRIPTION: Shows how to use the andWhere method as an alias for where to make the code more readable when chaining multiple conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->where('id', 1)\n    ->andWhere('status', 'active');\n```\n\n----------------------------------------\n\nTITLE: Defining Post Entity with Promise Mapper\nDESCRIPTION: PHP class definition for Post entity using Promise Mapper, demonstrating BelongsTo relationships with both lazy and eager loading configurations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/promise-mapper.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\BelongsTo;\nuse Cycle\\ORM\\PromiseMapper\\PromiseMapper;\nuse Cycle\\ORM\\Reference\\ReferenceInterface;\n\n#[Entity(mapper: PromiseMapper::class)]\nclass Post\n{\n    // ...\n\n    #[BelongsTo(target: User::class, load: 'lazy')]\n    public ReferenceInterface|User $user;\n\n    #[BelongsTo(target: Tag::class, load: 'eager')]\n    public Tag $tag;\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Transactions Manually in PHP\nDESCRIPTION: Example of manually starting a transaction with begin() and rolling it back with rollback() method. This pattern is used when operations need to be aborted and database state preserved.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/transactions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db->begin();\n\n// your queries\n\n$db->rollback();\n```\n\n----------------------------------------\n\nTITLE: Configuring EventDrivenCommandGenerator with Cycle ORM\nDESCRIPTION: Example of creating an ORM object with EventDrivenCommandGenerator to enable entity behaviors. This shows how to integrate the behavior system with a PSR-11 compatible container.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/install.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\ORM;\nuse Cycle\\ORM\\Entity\\Behavior\\EventDrivenCommandGenerator;\n\n// Application container (PSR-11 compatible).\n// https://www.php-fig.org/psr/psr-11/\n$container = new Container();\n$commandGenerator = new EventDrivenCommandGenerator($schema, $container);\n\n$orm = new ORM(\n  factory: $factory, \n  schema: $schema, \n  commandGenerator: $commandGenerator\n);\n```\n\n----------------------------------------\n\nTITLE: Using Schema-Qualified Table Names in Query Builder\nDESCRIPTION: Demonstrates how to reference tables with schema qualifiers in the query builder using dot notation. This allows for precise targeting of tables in specific PostgreSQL schemas.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/errata.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$db = $dbal->database();\n$tables = $db->select()->from('private.users')->...\n```\n\n----------------------------------------\n\nTITLE: Manually Defining Schema for Active Record Entities\nDESCRIPTION: Example of manually creating an ORM schema for Active Record entities without using the automatic schema generator, specifying entity details, database mapping, and relationships.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\n\n$schema = new Schema([\n    'user' => [\n        Schema::ENTITY => User::class,\n        Schema::MAPPER => ARMapper::class,\n        Schema::REPOSITORY => UserRepository::class, // optional, available via User::find()\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'user',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => [\n            'id' => 'id',  // property => column\n            'name' => 'name',\n        ],\n        Schema::TYPECAST => [\n            'id' => 'int',\n        ],\n        Schema::RELATIONS => [],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Advanced Join - Simple Column Relationship\nDESCRIPTION: Demonstrates a simplified approach to creating joins by passing the join type, table name, alias, and join condition as arguments to the join method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$select->join('LEFT', 'photos', 'pht', ['pht.user_id', 'users.id']);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `users`\n         LEFT JOIN `photos` AS `pht`\n                   ON `pht`.`user_id` = `users`.`id`\n```\n\n----------------------------------------\n\nTITLE: Querying Embedded Entities in Cycle ORM\nDESCRIPTION: Shows how to query entities with embedded properties using the repository select interface.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select();\n$select->where('credentials.username', 'john.smith');\n```\n\n----------------------------------------\n\nTITLE: Repository Class Definition with Entity\nDESCRIPTION: Demonstrates how to define a custom repository for an entity using attributes and how to associate it with the entity class.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n #[Entity(repository: Repository\\UserRepository::class)]\nclass User\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Columns - PHP\nDESCRIPTION: Demonstrates how to add new columns to an existing table schema.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$schema = $database->table('new_table')->getSchema();\n\n$schema->primary('id');\n$schema->string('name', 64); //String length 64 characters\n$schema->string('email');    //Default string length is 255 symbols\n$schema->decimal('balance', 10, 2);\n\n$schema->longText('description'); //New type\n$schema->integer('count_visits'); //New column\n\n$schema->save();\n```\n\n----------------------------------------\n\nTITLE: Configuring ORM Factory with Collection Types\nDESCRIPTION: Configuration of Cycle ORM factory with multiple collection types including Array, Doctrine, and Illuminate collections.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/collections.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\n$schema = new ORM\\Schema(...);\n\n$factory = (new ORM\\Factory(\n    dbal: $dbal,\n    defaultCollectionFactory: new ORM\\Collection\\ArrayCollectionFactory    // Default collection factory\n))\n    // requires doctrine/collections package\n    ->withCollectionFactory(\n        'doctrine',                                         // Alias\n         new ORM\\Collection\\DoctrineCollectionFactory,\n         \\Doctrine\\Common\\Collections\\Collection::class    // <= Base collection\n    )\n\n    // requires illuminate/collections package\n    ->withCollectionFactory(\n        'illuminate',\n        new ORM\\Collection\\IlluminateCollectionFactory,\n        \\Illuminate\\Support\\Collection::class\n    );\n\n$orm = new ORM\\ORM(\n    factory: $factory,\n    schema: $schema\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Simple Relations in PHP\nDESCRIPTION: Basic example of loading related entities using the load method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$select->load('posts');\n```\n\n----------------------------------------\n\nTITLE: Loading Related Photos with Ordering - PHP\nDESCRIPTION: Loading categories with related photos ordered by position in the pivot table using multiple queries.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$result = $categories->load('photos', [\n    'load' => function (\\Cycle\\ORM\\Select\\QueryBuilder $q) {\n        $q->orderBy('@.@.position'); // @ current relation (photos), @.@ current relation pivot (photo_to_category)\n    }\n])->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Resetting ORM Heap Between Operations in PHP\nDESCRIPTION: Uses a single ORM instance across multiple operations but resets the heap state after each iteration. This preserves mappers and relations cache while clearing entity state.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/daemonizing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// do something with orm\nwhile ($action = getAction()) {\n    $action();\n\n    $orm->getHeap()->clean();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array-Based JOIN Conditions in Cycle ORM\nDESCRIPTION: Example of using array-based syntax for JOIN conditions with OR logic. This provides an alternative way to express complex join conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$select->leftJoin('users', 'u')->on([\n    '@or' => [\n        ['u.id' => 'test.id'],\n        ['u.id' => 'test.balance']\n    ]\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `primary_users`.`name` as `user_name`\nFROM `primary_test`\n         LEFT JOIN `primary_users`\n                   ON (`primary_users`.`id` = `primary_test`.`id` OR `primary_users`.`id` = `primary_test`.`balance`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Primary Keys in PHP\nDESCRIPTION: Shows how to get the primary key(s) defined for a database table using the schema object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprint_r($schema->getPrimaryKeys());\n```\n\n----------------------------------------\n\nTITLE: Creating a New User with Active Record Pattern\nDESCRIPTION: Example of creating and saving a new User entity using the Active Record pattern, demonstrating property assignment and persistence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->name = 'Antony';\n$user->save();\n\nprint_r($u->id);\n```\n\n----------------------------------------\n\nTITLE: Table and Column Aliases in Cycle DBAL\nDESCRIPTION: Demonstrates how to use table and column aliases in queries, including complex column expressions with concatenation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->select()\n    ->from('test as abc')\n    ->columns([\n        'id',\n        'status',\n        'name'\n    ]);\n\n$select->where('abc.id', '>', 10);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test` as `abc`\nWHERE `abc`.`id` > 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Typecast Handlers\nDESCRIPTION: Examples showing how to set up custom typecast handlers for different entities, including using a single handler class or an array of handlers that will be processed in sequence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/typecasting.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$schema = new Schema([\n    User::class => [\n        // ..\n        Schema::TYPECAST_HANDLER => App\\MyCustomTypecast::class\n    ],\n    Post::class => [\n        // ..\n        Schema::TYPECAST_HANDLER => [\n            \\Cycle\\ORM\\Parser\\Typecast::class,\n            App\\UuidTypecast::class,\n            'carbon_typecast'\n        ]\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining UserTag Pivot Entity in PHP\nDESCRIPTION: Demonstrates the minimal required structure for a pivot entity in a Many To Many relationship with just a primary key definition.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass UserTag\n{\n    #[Column(type: 'primary')]\n    private int $id;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MorphedHasOne Relation in PHP\nDESCRIPTION: Shows how to implement a MorphedHasOne relation using attributes in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/morphed.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\Morphed\\MorphedHasOne;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[MorphedHasOne(target: Image::class)]\n    public $image;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command Chain Sequence in PHP\nDESCRIPTION: Demonstrates how to chain multiple commands together using the Special\\Sequence command. This allows executing additional commands after the main operation completes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/extending.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Command;\nuse Cycle\\ORM\\Heap;\n\npublic function queueCreate(object $entity, Heap\\Node $node, Heap\\State $state): Command\\CommandInterface\n{\n    $cmd = parent::queueCreate($entity, $node, $state);\n\n    $cs = new Command\\Special\\Sequence($cmd);\n    $cs->addCommand(new OurCommand());\n\n    return $cs;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-based UUID (Version 1)\nDESCRIPTION: Example of implementing UUID v1 in an entity class using time-based generation with optional node and clock sequence parameters.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid1;\nuse Ramsey\\Uuid\\UuidInterface;\n\n#[Entity]\n#[Uuid1(field: 'uuid', node: '00000fffffff', clockSeq: 0xffff, nullable: false)]\nclass User\n{\n    #[Column(type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Multiple Sort Orders in Cycle ORM\nDESCRIPTION: Alternative array-based syntax for specifying multiple sort orders. This provides a more compact way to define the same sorting behavior.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Query\\SelectQuery;\n\n$select->orderBy([\n    'test.name' => SelectQuery::SORT_DESC,\n    'test.id'   => SelectQuery::SORT_ASC\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `uu`.`name` as `user_name`\nFROM `primary_test`\n         INNER JOIN `primary_users` as `uu`\n                    ON `uu`.`id` = `primary_test`.`id` AND `uu`.`name` = 'Anton'\nORDER BY `primary_test`.`name` DESC, `primary_test`.`id` ASC\n```\n\n----------------------------------------\n\nTITLE: Related Entity Column Resolution\nDESCRIPTION: Demonstrates how to resolve and compare columns from related entities in complex queries.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/complex.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$select->distinct()\n    ->where('balance', '>', new \\Cycle\\Database\\Injection\\Expression($qb->resolve('orders.total')))\n    ->andWhere('orders.status', 'pending');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT\n...\nFROM \"users\" AS \"user\"\n    INNER JOIN \"orders\" AS \"user_orders\"\n                ON \"user_orders\".\"user_id\" = \"user\".\"id\"\nWHERE \"user\".\"balance\" > \"user_orders\".\"total\" AND \"user_orders\".\"status\" = 'pending'\n```\n\n----------------------------------------\n\nTITLE: Custom Runner Implementation\nDESCRIPTION: Example of implementing a custom runner with logging capabilities\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/entity-manager.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass LogRunner implements RunnerInterface\n{\n    private RunnerInterface $runner;\n\n    public function __construct(\n        private LoggerInterface $logger\n    ) {\n        $this->runner = new \\Cycle\\ORM\\Transaction\\Runner();\n    }\n\n    public function run(CommandInterface $command): void\n    {\n        $this->logger->debug($command);\n        \n        $this->runner->run($command);\n    }\n\n    public function complete(): void\n    {\n        $this->runner->complete();\n    }\n\n    public function rollback(): void\n    {\n        $this->runner->rollback();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a simple database select query in PHP\nDESCRIPTION: Creates a database query to select specific columns from a users table. This is the starting point for demonstrating the Node Parser functionality.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$query = $db->select('id', 'balance')->from('users');\n```\n\n----------------------------------------\n\nTITLE: Finding Users with Active Record Pattern\nDESCRIPTION: Example of retrieving all users from the database using the static find method and repository provided by the Active Record implementation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nforeach (User::find()->findAll() as $user) {\n    print_r($user);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Complex Where Groups\nDESCRIPTION: Shows the SQL statement generated for complex WHERE conditions with nested groups using either closure or array syntax.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE ((`id` BETWEEN 10 AND 100 AND `name` = 'Anton') OR `status` = 'disabled')\n```\n\n----------------------------------------\n\nTITLE: Configuring Migrations in PHP\nDESCRIPTION: PHP code to configure migration settings, including directory, table name, and safety options. It also demonstrates how to initialize the migrator and configure the migration table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Migrations;\n\n$config = new Migrations\\Config\\MigrationConfig([\n    'directory' => __DIR__ . '/../migrations/', // where to store migrations\n    'table'     => 'migrations',                // database table to store migration status\n    'safe'      => true                         // When set to true no confirmation will be requested on migration run.\n]);\n\n$migrator = new Migrations\\Migrator($config, $dbal, new Migrations\\FileRepository($config));\n\n// Init migration table\n$migrator->configure();\n```\n\n----------------------------------------\n\nTITLE: Implementing BelongsToMorphed Relation in PHP\nDESCRIPTION: Demonstrates how to create a BelongsToMorphed relation using attributes in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/morphed.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\Morphed\\BelongsToMorphed;\n\n#[Entity]\nclass Image\n{\n    // ...\n\n    #[BelongsToMorphed(target: ImageHolderInterface::class)]\n    public ImageHolderInterface $imageHolder;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Loading Related Entities with Separate Queries\nDESCRIPTION: The SQL queries generated when loading related entities using the OUTER_QUERY method. This produces two separate queries: one for users and one for addresses.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".\"id\"   AS \"c0\",\n       \"user\".\"name\" AS \"c1\"\nFROM \"users\" AS \"user\";\n\nSELECT \"user_address\".\"id\"      AS \"c0\",\n       \"user_address\".\"city\"    AS \"c1\",\n       \"user_address\".\"user_id\" AS \"c2\"\nFROM \"addresses\" AS \"user_address\"\nWHERE \"user_address\".\"user_id\" IN (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n```\n\n----------------------------------------\n\nTITLE: Using Array-Based Where Conditions in Joins\nDESCRIPTION: Demonstrates how to use array-based where conditions with OR logic in a left join. This approach allows for more structured and complex join conditions using arrays.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$select->leftJoin('users', 'u')->on([\n    '@or' => [\n        ['u.id' => 'test.id'],\n        ['u.id' => 'test.balance']\n    ]\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `primary_users`.`name` as `user_name`\nFROM `primary_test`\n         LEFT JOIN `primary_users`\n                   ON (`primary_users`.`id` = `primary_test`.`id` OR `primary_users`.`id` = `primary_test`.`balance`)\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Names in Cycle ORM Entity Mapping\nDESCRIPTION: This example illustrates how to map an entity property to a database column with a different name using the 'name' option in the #[Column] attribute of Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'string', name: 'username')]\n    private string $login;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entity-Specific Query Methods\nDESCRIPTION: Example of using methods from both CommonQuery and UserQuery classes to create a complex query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = User::query()\n    ->active(false)\n    ->emailVerified(true)\n    ->subscribtionLevel(Subsctiption::Any)\n    ->fetchAll();\n\n$mailer->sendReminder($users);\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Reference Tree\nDESCRIPTION: Shows how to create a tree structure using self-referencing categories.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$category1 = new Category(\"A\");\n$category2 = new Category(\"A\");\n$category2->parent = $category1;\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($category1);\n$manager->persist($category2);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Keys using Attributes in Cycle ORM - PHP\nDESCRIPTION: Shows how to define composite primary keys using PHP 8 attributes in entity classes. Includes examples of column and relation definitions with composite keys.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/composite-pk.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass Pivot\n{\n    #[Column(type: 'int', primary: true)]\n    private int $postId;\n\n    #[Column(type: 'int', primary: true)]\n    private int $tagId;\n}\n\n#[Entity]\nclass Tag\n{\n    #[HasMany(target: Pivot::class, outerKey: ['parent_key1', 'parent_key2'])]\n    private array $posts;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema with ClasslessMapper in PHP\nDESCRIPTION: Demonstrates how to configure a schema for a user entity using ClasslessMapper. Includes column definitions, primary key settings, and type casting configurations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/classless-mapper.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Mapper\\ClasslessMapper;\n\n$orm = $orm->with(schema: new Schema([\n   'user' => [\n      Schema::MAPPER => ClasslessMapper::class,\n      Schema::DATABASE => 'default',\n      Schema::TABLE => 'user',\n      Schema::PRIMARY_KEY => 'id',\n      Schema::COLUMNS => [\n          // property => column\n          'id' => 'id',\n          'email' => 'email',\n          'balance' => 'balance'\n      ],\n      Schema::TYPECAST => [\n          'id' => 'int',\n          'balance' => 'float'\n      ],\n      Schema::RELATIONS   => []\n  ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE Queries with Cycle ORM's DBAL in PHP\nDESCRIPTION: This snippet illustrates how to execute a DELETE statement using the DBAL's execute method. It shows how to pass parameters and obtain the number of affected rows.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/access.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$db = $dbal->database();\n\nprint_r(\n    $db->execute(\n        'DELETE FROM users WHERE id > ?',\n        [\n            1\n        ]\n    ) // number of affected rows \n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions on Single Field\nDESCRIPTION: Shows how to apply multiple conditions to a single field using array notation\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    'id' => ['>' => 10, '<' => 100]\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Entity with Array Collection\nDESCRIPTION: Example of defining a User entity with a posts relation using the default array collection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/collections.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[HasMany(target: Post::class)]\n    public array $posts;\n}\n```\n\n----------------------------------------\n\nTITLE: Container Configuration for Collection Factory\nDESCRIPTION: Example of configuring collection factory with dependency injection container.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/collections.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\n$orm = new ORM\\ORM(...);\n\n$container = new Container();\n$container->bindSingleton(ORM\\ORMInterface::class, $orm);\n\n$factory = $orm->getFactory()\n    ->withCollectionFactory(\n        'doctrine',\n         new ORM\\Collection\\DoctrineCollectionFactory,\n          \\Doctrine\\Common\\Collections\\Collection::class\n    );\n\n$orm = $orm->with(factory: $factory);\n\n$container->bindSingleton(ORM\\ORMInterface::class, $orm);\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Posts with Comments\nDESCRIPTION: SQL query generated for fetching posts with comments.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT \"user_posts\".\"id\"      AS \"c0\",\n                \"user_posts\".\"user_id\" AS \"c1\",\n                \"user_posts\".\"title\"   AS \"c2\"\nFROM \"post\" AS \"user_posts\"\n         INNER JOIN \"comment\" AS \"user_posts_comments\"\n                    ON \"user_posts_comments\".\"post_id\" = \"user_posts\".\"id\"\nWHERE \"user_posts\".\"user_id\" IN (1, 2)\n  AND (\"user_posts_comments\".\"id\" IS NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: Using Between Operator in Where Conditions\nDESCRIPTION: Shows how to use the BETWEEN operator in WHERE conditions by providing a range with two values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', 'between', 10, 20);\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with BelongsTo Relationship in PHP\nDESCRIPTION: Example showing how to define a Post entity with a BelongsTo relationship to a User entity using PHP attributes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/reference.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#[Entity]\nclass Post\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[BelongsTo(target: User::class)]\n    private $user;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Indexes in Cycle ORM - PHP\nDESCRIPTION: Shows how to create unique indexes on single and multiple columns using Cycle ORM's schema builder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$schema->column('email')->unique(); //Simple unique index\n$schema->index(['name', 'email'])->unique(true);  //Compound unique index\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Entity after Schema Update\nDESCRIPTION: Demonstrates how to use the embedded entity after schema update by setting values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->address->country = 'USA';\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Cycle ORM Attributes for Entity Property Mapping in PHP\nDESCRIPTION: This code snippet shows how to use multiple Cycle ORM attributes simultaneously when defining entity properties. It demonstrates the use of the Cycle namespace alias for more concise attribute declarations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation as Cycle;\n\n#[Cycle\\Entity]\nclass User\n{\n    #[Cycle\\Column(type: 'primary')]\n    private int $id;\n}\n```\n\n----------------------------------------\n\nTITLE: Value Object Implementation Example\nDESCRIPTION: Shows implementation of a Value Object class (UserName) with validation and typecast support for use with Active Record entities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Stringable interface is used to provide a string value for Database\nclass UserName implements \\Stringable\n{\n    // ... constructor and __toString method\n\n    // Will be used by the User\n    public static function create(string $value): self\n    {\n        self::validate($value);\n        return new self($value);\n    }\n\n    // Will be used by ORM that's why validation is not needed\n    public static function typecast(string $value): self\n    {\n        return new self($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Embeddable Entity in PHP using Cycle ORM\nDESCRIPTION: Shows how to create an embeddable entity using the #[Embeddable] attribute with column definitions for username and password fields.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Embeddable;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Embeddable]\nclass UserCredentials\n{\n    #[Column(type: 'string(255)')]\n    public string $username;\n\n    #[Column(type: 'string')]\n    public string $password;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Embedded Entity\nDESCRIPTION: Demonstrates how to query an embedded entity using where conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select();\n$select->where('address.country', 'USA');\n```\n\n----------------------------------------\n\nTITLE: Setting up external queries with linked nodes\nDESCRIPTION: Demonstrates how to use linkNode instead of joinNode to prepare for external queries. This approach collects references to be used in subsequent queries rather than processing joined data directly.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Parser;\nuse Cycle\\Database\\StatementInterface;\n\n$query = $db->select('u.id', 'u.balance')->from('users as u');\n\n$root = new Parser\\RootNode(\n    ['id', 'balance'], ['id']\n);\n\n$orders = new Parser\\ArrayNode(\n    ['id', 'user_id', 'total'], // column names\n    ['id'],                     // primary keys\n    ['user_id'],                // inner keys\n    ['id']                      // outer keys (user.id)\n);\n\n// notice the change\n$root->linkNode('orders', $orders);\n\nforeach ($query->run()->fetchAll(StatementInterface::FETCH_NUM) as $row) {\n    // start from 1st (0) column\n    $root->parseRow(0, $row);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Optimized Query with Shared Join\nDESCRIPTION: The SQL query generated when reusing the same JOIN for both filtering and loading. This eliminates the redundant JOIN and simplifies the query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".\"id\"              AS \"c0\",\n       \"user\".\"name\"            AS \"c1\",\n       \"user_address\".\"id\"      AS \"c2\",\n       \"user_address\".\"city\"    AS \"c3\",\n       \"user_address\".\"user_id\" AS \"c4\",\n       \"user_address\".\"id\"      AS \"c5\",\n       \"user_address\".\"city\"    AS \"c6\",\n       \"user_address\".\"user_id\" AS \"c7\"\nFROM \"users\" AS \"user\"\n         INNER JOIN \"addresses\" AS \"user_address\"\n                    ON \"user_address\".\"user_id\" = \"user\".\"id\"\nWHERE \"user_address\".\"city\" = 'New York';\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Implementation for Polymorphic Relations in PHP\nDESCRIPTION: Example showing how to define entities that implement a common interface for polymorphic relations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/morphed.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass User implements ImageHolderInterface\n{\n    // ...\n}\n\n#[Entity]\nclass Post implements ImageHolderInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Name-based MD5 UUID (Version 3)\nDESCRIPTION: Example of implementing UUID v3 in an entity class using MD5 hash of namespace and name.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid3;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\n#[Entity]\n#[Uuid3(field: 'uuid', namespace: Uuid::NAMESPACE_URL, name: 'https://example.com/foo', nullable: false)]\nclass User\n{\n    #[Column(type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefersTo Relation in PHP Entity Class\nDESCRIPTION: Demonstrates how to define a RefersTo relation in a User entity class with annotations, including a relation to the last comment and a collection of comments.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\RefersTo;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[RefersTo(target: Comment::class)]\n    private ?Comment $lastComment;\n\n    #[HasMany(target: Comment::class)]\n    public array $comments;\n\n    // ...\n\n    public function addComment(Comment $c): void\n    {\n        $this->lastComment = $c;\n        $this->comments[] = $c;\n    }\n    \n    public function removeLastComment(): void\n    {\n        $this->lastComment = null;\n    }\n    \n    public function getLastComment(): ?Comment\n    {\n        return $this->lastComment;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Collection Factory Implementation\nDESCRIPTION: Example of implementing a custom collection factory by implementing CollectionFactoryInterface.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/collections.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Collection\\CollectionFactoryInterface;\n\nclass ArrayCollectionFactory implements CollectionFactoryInterface\n{\n    public function withCollectionClass(string $class): static\n    {\n        // Do nothing\n        return $this;\n    }\n\n    public function collect(iterable $data): array\n    {\n        return match (true) {\n            \\is_array($data) => $data,\n            $data instanceof \\Traversable => \\iterator_to_array($data),\n            default => throw new CollectionFactoryException('Unsupported iterable type.'),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Table Schema in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to reset a table schema to allow complete redefinition.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$schema->setState(null);\n```\n\n----------------------------------------\n\nTITLE: Entity Creation and Persistence in PHP\nDESCRIPTION: Creates and persists a new User entity using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$user = new \\Example\\User(\"Antony\");\n$em->persist($user)->run();\n```\n\n----------------------------------------\n\nTITLE: Entity Creation and Persistence Examples\nDESCRIPTION: Demonstrates various methods for creating and persisting Active Record entities, including using make() method and save operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = User::make([\n    'name' => $name,\n    'email' => $email,\n]);\n\n$result = $user->save();\n\n// Check if the operation was successful\n$result->isSuccess();\n\n$user->saveOrFail();\n```\n\n----------------------------------------\n\nTITLE: Assigning Enum Typecast to Entity Column in Cycle ORM\nDESCRIPTION: Shows how to configure a column to use PHP's backed enum for typecasting, converting string values from the database into enum instances.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private $id;\n\n    #[Column(type: 'string', typecast: UserType::class)]\n    private UserType $type;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Schema in PHP\nDESCRIPTION: Shows how to compile the schema registry into a usable ORM schema object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/schema-builder.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$schema = (new \\Cycle\\Schema\\Compiler())->compile($r);\n\n$orm = $orm->with(schema: new \\Cycle\\ORM\\Schema($schema));\n```\n\n----------------------------------------\n\nTITLE: Generating Schema for Active Record Entities\nDESCRIPTION: Code to compile the ORM mapping schema using the custom ARGenerator and built-in Cycle ORM generators for entity validation and type casting.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$finder = (new \\Symfony\\Component\\Finder\\Finder())->files()->in(['src-directory']);\n$classLocator = new \\Spiral\\Tokenizer\\ClassLocator($finder);\n\n$schema = (new \\Cycle\\Schema\\Compiler())->compile(\n    new \\Cycle\\Schema\\Registry($orm->getFactory()),\n    [\n        new ARGenerator($classLocator),\n        new \\Cycle\\Schema\\Generator\\ValidateEntities(),\n        new \\Cycle\\Schema\\Generator\\GenerateTypecast()\n    ]\n);\n\n$schema = new Schema($schema);\n```\n\n----------------------------------------\n\nTITLE: Executing Direct SQL Query in PHP\nDESCRIPTION: Demonstrates how to execute a direct SQL query using the database instance. This example fetches all rows from the 'users' table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$dbal->database('default')->table('users')->select()->fetchAll();\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined Schema Properties in PHP\nDESCRIPTION: Shows how to configure default schema properties including custom mappers, repositories, sources, and typecast handlers.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/schema-builder.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\nuse Cycle\\ORM\\SchemaInterface;\n\n$schema = (new Schema\\Compiler())->compile($r, [/* ... */], [\n    SchemaInterface::MAPPER => CustomMapper::class,\n    SchemaInterface::REPOSITORY => CustomRepository::class,\n    SchemaInterface::SOURCE => CustomSource::class,\n    SchemaInterface::SCOPE => null,\n    SchemaInterface::TYPECAST_HANDLER => [\n        \\Cycle\\ORM\\Parser\\Typecast::class,\n        CustomJsonTypecastHandler::class,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Update Values with Cycle ORM\nDESCRIPTION: Example of using Expression in update values. This demonstrates updating a name column with the uppercase version of its current value.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$update = $database->table('test')->update([\n    'name' => new \\Cycle\\Database\\Injection\\Expression('UPPER(test.name)')\n]);\n\n$update->where('id', '<', 10)->run();\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `primary_test`\nSET `name` = UPPER(`primary_test`.`name`)\nWHERE `id` < 10\n```\n\n----------------------------------------\n\nTITLE: Insert Query with Values\nDESCRIPTION: Shows how to add values to an insert query including different data types like DateTime, strings and numbers.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$insert = $db->insert('test');\n\n$insert->values([\n    'time_created' => new \\DateTime(),\n    'name' => 'Anton',\n    'email' => 'test@email.com',\n    'balance' => 800.90\n]);\n```\n\n----------------------------------------\n\nTITLE: Cloning ORM Instance with New Heap in PHP\nDESCRIPTION: Creates a separate ORM instance with its own Heap to avoid memory leaks in long-running applications. Each cloned ORM will have an isolated state that will be garbage collected by PHP after use.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/daemonizing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// you can also use scope specific factory and other options\n$orm = $orm->with(heap: new \\Cycle\\ORM\\Heap\\Heap());\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple Columns with Expression in Cycle ORM\nDESCRIPTION: Example of using Expression to concatenate multiple columns in a WHERE condition. This demonstrates comparing a concatenated string of ID and status with a specific value.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$select->where(new \\Cycle\\Database\\Injection\\Expression(\"CONCAT(id, '-', status)\"), '1-active');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE CONCAT(`id`, '-', `status`) = '1-active'\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Reader/Builder in PHP\nDESCRIPTION: Demonstrates how to access the AbstractTable schema object for each table, which provides detailed information about the table structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach ($database->getTables() as $table) {\n    print_r($table->getSchema());\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting GroupActions within Transact Method\nDESCRIPTION: Shows how to properly nest groupActions() inside a transact() call to handle both immediate database operations and grouped entity operations while managing transaction modes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nUser::transact(function (DatabaseInterface $dbal) use ($user, $account, $post): void {\n    $dbal->query('DELETE FROM users');\n\n    User::groupActions(function () use ($user, $account, $post) {\n        $user->save();\n        $account->save();\n        $post->delete();\n    }, TransactionMode::Current);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Backed Enum for Typecasting in PHP\nDESCRIPTION: Creates a string-backed enum for user types that can be used with Cycle ORM's typecast feature to convert database values to enum instances.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nenum UserType: string\n{\n    case Guest = 'guest';\n    case User = 'user';\n    case Admin = 'admin';\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Table Indexes in PHP\nDESCRIPTION: Demonstrates how to access and examine all indexes on a table, including their names, columns, and uniqueness property.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nforeach ($schema->getIndexes() as $index) {\n    print_r($index->getName());\n    print_r($index->getColumns());\n    print_r($index->isUnique());\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Output for OR Conditions\nDESCRIPTION: Shows the SQL statement generated when chaining WHERE conditions with OR operator.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = 1\n   OR `id` = 2\n   OR `status` = 'active'\n```\n\n----------------------------------------\n\nTITLE: Loading Related Data in Has One Relation\nDESCRIPTION: Demonstrates how to load related Address data when querying for a User entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(User::class)\n    ->select()\n    ->load('address')\n    ->wherePK(1)\n    ->fetchOne();\n\nprint_r($user->getAddress());\n```\n\n----------------------------------------\n\nTITLE: Using Custom Enum Typecast Method in Entity Column Definition\nDESCRIPTION: Shows how to configure an entity column to use a custom typecast method from an enum class, demonstrating the automatic conversion of the typecast option to a callable.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private $id;\n\n    #[Column(\n        type: 'string',\n        typecast: UserType::class // will be converted to [UserType::class, 'typecast']\n    )]\n    private UserType $type;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Embeddable Entity with Column Prefix in Cycle ORM\nDESCRIPTION: Shows how to create an embeddable entity with a custom column prefix using the columnPrefix option.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Embeddable;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Embeddable(columnPrefix: 'credentials_')]\nclass UserCredentials\n{\n    #[Column(type: 'string(255)')]\n    public string $username;\n\n    #[Column(type: 'string')]\n    public string $password;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database with Table Prefix in PHP\nDESCRIPTION: Shows how to set up a database connection with a table prefix, which will be applied to all queries. This is useful for logically separating databases within a single connection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'default' => [\n  'connection' => 'sqlite',\n  'prefix'     => 'secondary_'\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Types with Arguments in Cycle ORM\nDESCRIPTION: This snippet demonstrates how to specify column types with additional arguments such as length, enum values, and decimal precision using Cycle ORM's #[Column] attribute.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'string(32)')]\n    private string $login;\n\n    #[Column(type: 'enum(active,disabled)')]\n    private string $status;\n\n    #[Column(type: 'decimal(5,5)')]\n    private $balance;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Typecast with Entity Definition\nDESCRIPTION: Example of how to use typecast attributes in an entity class definition, associating properties with specific typecast handlers for proper data conversion.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/typecasting.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Ramsey\\Uuid\\UuidInterface;\n\n#[Entity(\n    typecast: [\n        \\Cycle\\ORM\\Parser\\Typecast::class,\n        App\\UuidTypecast::class,\n        'carbon_typecast'\n    ]\n)]\nclass User\n{\n    #[Cycle\\Column(type: 'string', typecast: 'uuid')]\n    public UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Has Many Relation with Preset Conditions\nDESCRIPTION: Shows how to define a Has Many relation with preset filtering conditions in the entity definition.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-many.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[HasMany(target: Post::class, where: ['published' => true])]\n    protected array $posts = [];\n\n    // ...\n\n    public function getPosts(): array\n    {\n        return $this->posts;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Schema - PHP\nDESCRIPTION: Shows how to obtain a table schema instance using Cycle/Database. Demonstrates checking schema existence.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function indexAction(\\Cycle\\Database\\Database $database)\n{\n    $schema = $database->table('new_table')->getSchema();\n\n    // Schema is supposed to be empty\n    print_r($schema);\n    print_r($schema->exists());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns - PHP Short Form\nDESCRIPTION: Shows the condensed syntax for defining table columns, including datetime with precision specification.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$schema = $database->table('new_table')->getSchema();\n\n$schema->primary('id');\n$schema->string('name', 64); // String length 64 characters\n$schema->string('email');    // Default string length is 255 symbols\n$schema->decimal('balance', 10, 2);\n$schema->text('description');\n$schema->datetime('created_at', 6); // DateTime field with precision\n```\n\n----------------------------------------\n\nTITLE: Retrieving final structured result from the root node\nDESCRIPTION: Shows how to get the complete hierarchical result after parsing both primary and related data. The linked node automatically mounts parsed entities to the root node.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprint_r($root->getResult();\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Basic Where Condition\nDESCRIPTION: Shows the SQL statement generated by a basic WHERE condition, demonstrating how query parameters are handled.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `status` = 'active'\n```\n\n----------------------------------------\n\nTITLE: Accessing collected references from linked nodes\nDESCRIPTION: Shows how to retrieve the references collected by a linked node after parsing the root records. These references will be used to query related data.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// only populated after parsing all the rows by the root node\nprint_r($orders->getReferences());\n```\n\n----------------------------------------\n\nTITLE: Implementing Name-based SHA-1 UUID (Version 5)\nDESCRIPTION: Example of implementing UUID v5 in an entity class using SHA-1 hash of namespace and name.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid5;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\n#[Entity]\n#[Uuid5(field: 'uuid', namespace: Uuid::NAMESPACE_URL, name: 'https://example.com/foo', nullable: false)]\nclass User\n{\n    #[Column(type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: User Entity with Primary Key Definition\nDESCRIPTION: Demonstrates defining a simple User entity with a primary key column using Cycle ORM attributes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Database Instance Creation\nDESCRIPTION: Creating a Database instance manually with separate read and write drivers without using DatabaseManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Driver;\nuse Cycle\\Database\\Config;\n\n$writeDriver = Driver\\SQLite\\SQLiteDriver::create(\n    new Config\\MemoryConnectionConfig()\n);\n\n$readDriver = Driver\\SQLite\\SQLiteDriver::create(\n    new Config\\TempFileConnectionConfig()\n);\n       \n$db = new Database\\Database(\n   name: 'name',\n   prefix: '',\n   driver: $writeDriver,\n   readDriver: $readDriver // read only driver (optional)\n);\n\nprint_r($db->getTables());\n```\n\n----------------------------------------\n\nTITLE: Checking Table Existence in Database with PHP\nDESCRIPTION: Demonstrates how to verify if a specific table exists in the database using the hasTable method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/introspection.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ($database->hasTable('users')) {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Join - Grouped OR Conditions\nDESCRIPTION: Shows how to create a join with grouped OR conditions, including both column relationships and parameter values. This example demonstrates using the @or operator in join conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$select->join('LEFT', 'photos', 'pht', [\n    '@or' => [\n        ['pht.user_id' => 'users.id'],\n        ['users.is_admin' => new Parameter(true)]\n    ],\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `users`\n         LEFT JOIN `photos` AS `pht`\n                   ON (\n                               `pht`.`user_id` = `users`.`id`\n                           OR\n                               `users`.`is_admin` = true\n                       )\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Files Migration Strategy in PHP\nDESCRIPTION: PHP code showing how to use the MultipleFilesStrategy for generating migrations. This strategy creates separate migration files for each table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema\\Generator\\Migrations\\GenerateMigrations;\nuse Cycle\\Schema\\Generator\\Migrations\\Strategy\\MultipleFilesStrategy;\nuse Cycle\\Schema\\Generator\\Migrations\\NameBasedOnChangesGenerator;\n\n$generator = new GenerateMigrations(\n    $migrator->getRepository(),\n    $migrator->getConfig(),\n    new MultipleFilesStrategy($migrator->getConfig(), new NameBasedOnChangesGenerator())\n);\n```\n\n----------------------------------------\n\nTITLE: Saving Schema Changes - PHP\nDESCRIPTION: Shows how to persist schema changes to the database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$schema->save();\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Creation SQL\nDESCRIPTION: Example of generated MySQL SQL for table creation including various column types.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `primary_new_table`\n(\n    `id`          int (11) NOT NULL AUTO_INCREMENT,\n    `name`        varchar(64) NULL,\n    `email`       varchar(255) NULL,\n    `balance`     decimal(10, 2) NULL,\n    `description` text NULL,\n    PRIMARY KEY (`id`)\n) ENGINE = InnoDB\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Value Forwarding in PHP\nDESCRIPTION: Shows how to forward values between chained commands, specifically handling primary key forwarding after INSERT operations. Uses command context waiting and value forwarding mechanisms.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/extending.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Commande;\nuse Cycle\\ORM\\Heap;\nuse Cycle\\ORM\\Command\\Database\\Insert;\n\npublic function queueCreate(object $entity, Heap\\Node $node, Heap\\State $state): Commande\\CommandInterface\n{\n    $cmd = parent::queueCreate($entity, $node, $state);\n    $our = new OurCommand();\n\n    // wait for cmd_id value or fail\n    $our->waitContext('cmd_id', true);\n\n    // send lastID value as cmd_id to $our command\n    $cmd->forward(Insert::INSERT_ID, $our, 'cmd_id');\n\n    $cs = new Command\\Special\\Sequence($cmd);\n    $cs->addCommand($our);\n\n    return $cs;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration System in PHP\nDESCRIPTION: Sets up the migration system configuration including migration directory and database table settings. This is required before generating schema migrations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/sync-schema.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Migrations;\n\n$config = new Migrations\\Config\\MigrationConfig([\n    'directory' => __DIR__ . '/../migrations/',  // where to store migrations\n    'table' => 'migrations'                      // database table to store migration status\n]);\n\n$migrator = new Migrations\\Migrator($config, $dbal, new Migrations\\FileRepository($config));\n\n// Init migration table\n$migrator->configure();\n```\n\n----------------------------------------\n\nTITLE: Querying STI Entities in CycleORM\nDESCRIPTION: Shows how to query entities in a Single Table Inheritance setup, demonstrating that queries will return all child entity types.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/single-table-inheritance.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// persons, employees and customers will be returned\n$people = $orm->getRepository(Person::class)->findAll();\n```\n\n----------------------------------------\n\nTITLE: Using SQL Fragment in WHERE Clause with Cycle ORM\nDESCRIPTION: Example of using Fragment to include raw SQL in a query without escaping. This snippet compares an ID column with the DAYOFYEAR function result.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n//255\n$select->where('id', '=', new \\Cycle\\Database\\Injection\\Fragment(\"DAYOFYEAR('2015-09-12')\"));\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = DAYOFYEAR('2015-09-12')\n```\n\n----------------------------------------\n\nTITLE: Loading RefersTo Relations\nDESCRIPTION: Shows how to load related data using the Select object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(User::class)\n    ->select()\n    ->load('lastComment')\n    ->wherePK(1)\n    ->fetchOne();\n\nprint_r($user->getLastComment());\n```\n\n----------------------------------------\n\nTITLE: Configuring an Entity with EventListener in Cycle ORM (PHP)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to a Comment entity using the EventListener attribute. The entity is defined with primary key, parentId and body fields using Column annotations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/event-listener.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior;\n\n#[Entity]\n#[Behavior\\EventListener(\n    listener: CommentListener::class\n)]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    public int $id;\n    \n    #[Column(type: 'int')]\n    public ?int $parentId = null;\n    \n    #[Column(type: 'string')]\n    public int $body;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Repository by Role Name in Cycle ORM - PHP\nDESCRIPTION: Shows how to get a repository instance using entity role name instead of class name.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/repository/select.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$r = $orm->getRepository(\"user\");\n```\n\n----------------------------------------\n\nTITLE: Querying Records with Composite Keys in Cycle ORM - PHP\nDESCRIPTION: Example of how to query records using composite primary keys in Cycle ORM. Shows how to use findByPK method with multiple key values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/composite-pk.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository(Pivot::class);\n\n$pivot = $repository->findByPK([\n    1, // post id\n    1 // tag id\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Schema in Different PostgreSQL Schemas\nDESCRIPTION: Shows how to declare and create table schemas in different PostgreSQL schemas. Examples include creating tables in the default schema, private schema, test schema, and current user schema.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/errata.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// will be used the first schema from config (public)\n$schema1 = $dbal->database()->table('users')->getSchema();\n$schema1->column('id')->primary();\n$schema1->save();\n\n// private\n$schema = $dbal->database()->table('private.users')->getSchema();\n$schema->column('id')->primary();\n$schema->save();\n\n// test\n$schema2 = $dbal->database()->table('test.users')->getSchema();\n$schema2->column('id')->primary();\n$schema2->save();\n\n// Current user schema\n$schema2 = $dbal->database()->table('$user.users')->getSchema();\n$schema2->column('id')->primary();\n$schema2->save();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types in DBAL Schema\nDESCRIPTION: Demonstrates how to define enum column types in the database schema. Enums are natively supported in MySQL and emulated using string type with constraints in other DBMS.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$schema->column('status')->enum(['active', 'disabled']);\n\n//Alternative definition\n$schema->enum('statusB', ['active', 'disabled']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Builder Pipeline\nDESCRIPTION: Example configuration for schema builder pipeline including new STI/JTI generators and schema modifiers support.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/upgrade.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[\n    new Schema\\Generator\\ResetTables(),\n    new Annotated\\Embeddings($classLocator),\n    new Annotated\\Entities($classLocator),\n    new Annotated\\TableInheritance(),               // <------ register STI/JTI\n    new Annotated\\MergeColumns(),\n    new Schema\\Generator\\GenerateRelations(),\n    new Schema\\Generator\\GenerateModifiers(),       // <----- generate changes from schema modifiers\n    new Schema\\Generator\\ValidateEntities(),\n    new Schema\\Generator\\RenderTables(),\n    new Schema\\Generator\\RenderRelations()\n    new Schema\\Generator\\RenderModifiers(),         // <----- render all schema modifiers\n    new Schema\\Generator\\ForeignKeys(),             // Since cycle/schema-builder v2.6.0. Define foreign key constraints\n    new Annotated\\MergeIndexes(),\n    new Schema\\Generator\\SyncTables(),              // Not for production\n    new Schema\\Generator\\GenerateTypecast(),\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching StdClass Entity Data in Cycle ORM\nDESCRIPTION: Demonstrates how to retrieve a user entity by primary key using the repository pattern, returning a StdClass object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/std-mapper.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository('user');\n\n$user = $repository->findByPK(1);\n\nvar_dump($user); // stdClass object\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Values in Cycle ORM Entity Mapping\nDESCRIPTION: This example shows how to set a default value for a column using the 'default' option in the #[Column] attribute of Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'enum(active,disabled)', default: 'active')]\n    private string $status;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Entities in Cycle ORM (PHP)\nDESCRIPTION: Shows how to retrieve multiple entities that match specified criteria.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/select.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nforeach($repository->findAll(['status' => 'active']) as $e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cycle ORM's With Method\nDESCRIPTION: Example showing how to use the new 'with' method to configure ORM components instead of deprecated withFactory, withSchema, and withHeap methods.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/upgrade.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$orm = new \\Cycle\\ORM\\ORM(...);\n\n$orm->with(\n    schema: new \\Cycle\\ORM\\Schema(...),\n    factory: new \\Cycle\\ORM\\Factory(...),\n    heap: new \\Cycle\\ORM\\Heap\\Heap(...)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key References in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to create foreign key constraints between tables using Cycle ORM's schema builder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$second->integer('first_id');\n$second->foreign('first_id')->references('first', 'id');\n```\n\n----------------------------------------\n\nTITLE: Associating Custom Repository with Entity in Cycle ORM Schema\nDESCRIPTION: This code snippet demonstrates how to manually associate a custom repository with an entity in the Cycle ORM schema. It defines the schema for a User entity and specifies the custom UserPersistRepository.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/persist-repository.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Mapper\\Mapper;\n\n$orm = $orm->with(schema: new Schema([\n    User::class => [\n        Schema::ROLE => 'user',\n        Schema::MAPPER => Mapper::class,\n        Schema::REPOSITORY => UserPersistRepository::class,\n        Schema::DATABASE => 'default',\n        Schema::TABLE => 'user',\n        Schema::PRIMARY_KEY => 'id',\n        Schema::COLUMNS => ['id', 'email'],\n        Schema::RELATIONS => [],\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Definition with StdMapper in PHP\nDESCRIPTION: Demonstrates how to create an entity definition using Schema Builder with StdMapper, including setting up primary fields and registering the entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/dynamic-schema.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Let's create a new entity definition object.\n$e = new Entity();\n$e->setRole('user');\n$e->setMapper(\\Cycle\\ORM\\Mapper\\StdMapper::class);\n\n\n// Declare primary field for the entity.\n$field = (new \\Cycle\\Schema\\Definition\\Field())\n    ->setType('primary')\n    ->setColumn('id')\n    ->setPrimary(true);\n\n$entity->getFields()->set('id', $field);\n\n\n// Add entity definition into registry.\n$registry = new \\Cycle\\Schema\\Registry($this->dbal);\n$registry->register($e)->linkTable($e, 'default', 'user');\n\n\n// Compile the ORM schema.\n$schema = (new \\Cycle\\Schema\\Compiler())->compile($r, []);\n\nprint_r($schema);\n\n$orm = $orm->with(schema: new \\Cycle\\ORM\\Schema($schema));\n```\n\n----------------------------------------\n\nTITLE: Using Schema Comparator in Cycle ORM - PHP\nDESCRIPTION: Shows how to access and use the schema comparator to analyze schema changes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nprint_r($schema->getComparator()->addedColumns());\n```\n\n----------------------------------------\n\nTITLE: Querying JTI Entities in Cycle ORM\nDESCRIPTION: This example demonstrates how to query entities in a Joined Table Inheritance hierarchy. When querying the parent entity's repository, all child entities will also be returned in the result set.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/joined-table-inheritance.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// persons, employees and customers will be returned\n$people = $orm->getRepository(Person::class)->findAll();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Schema Columns\nDESCRIPTION: Shows how to set and modify default values for enum and other column types. Includes examples of setting and removing default values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$schema->column('status')->enum(['active', 'disabled'])->defaultValue('disabled');\n$schema->enum('status_b', ['active', 'disabled'])->defaultValue('active');\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema->enum('statusB', ['active', 'disabled'])->defaultValue(null);\n```\n\n----------------------------------------\n\nTITLE: Associating Repository with Entity using Attributes\nDESCRIPTION: Demonstrates how to associate a custom repository with an entity using the Cycle\\Entity attribute.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/repository.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Example;\n\nuse Cycle\\Annotated\\Annotation as Cycle;\n\n#[Cycle\\Entity(repository: Example\\Repository\\UserRepository::class)]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-based STI Configuration in CycleORM\nDESCRIPTION: Demonstrates how to configure Single Table Inheritance using schema definition without attributes, defining children and discriminator segments for the root entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/single-table-inheritance.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\SchemaInterface;\n\n$schema = [\n    'person' => [\n        ...,\n        SchemaInterface::CHILDREN => [\n            // discriminator value => Entity class\n            'employee' => Employee::class,\n            'foo_customer' => Customer::class,\n            'ceo' => Ceo::class,\n        ],\n        SchemaInterface::DISCRIMINATOR => 'type'\n    ],\n    'employee' => [\n        ...,\n        SchemaInterface::ENTITY => Employee::class,\n    ],\n    'customer' => [\n        ...,\n        SchemaInterface::ENTITY => Customer::class,\n    ],\n    'ceo' => [\n        ...,\n        SchemaInterface::ENTITY => Ceo::class,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Filtering by Related Entity\nDESCRIPTION: The SQL query generated when filtering users by conditions on their related address entities. This uses INNER JOIN to connect to the addresses table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".\"id\"              AS \"c0\",\n       \"user\".\"name\"            AS \"c1\",\n       \"user_address\".\"id\"      AS \"c2\",\n       \"user_address\".\"city\"    AS \"c3\",\n       \"user_address\".\"user_id\" AS \"c4\"\nFROM \"users\" AS \"user\"\n         INNER JOIN \"addresses\" AS \"user_address\"\n                    ON \"user_address\".\"user_id\" = \"user\".\"id\"\nWHERE \"user_address\".\"city\" = 'New York';\n```\n\n----------------------------------------\n\nTITLE: Removing RefersTo Reference\nDESCRIPTION: Demonstrates how to remove a RefersTo relation reference.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->removeLastComment();;\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Adding Data Storage and Access Methods to Active Record Base Class\nDESCRIPTION: Implements private data storage with getter and setter methods to store entity properties in an array format, avoiding hydration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class Record\n{\n    private array $data = [];\n\n    public function __construct(array $data = [])\n    {\n        $this->__setData($data);\n    }\n\n    public function __setData(array $data): void\n    {\n        $this->data = $data;\n    }\n\n    public function __getData(): array\n    {\n        return $this->data;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Where Conditions\nDESCRIPTION: Demonstrates MongoDB-style array syntax for WHERE conditions, which provides a more concise way to specify multiple conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$select->where([\n    'id'     => 1,\n    'status' => 'active'\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable UUID\nDESCRIPTION: Example of implementing a nullable UUID field with disabled auto-generation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid4;\nuse Ramsey\\Uuid\\UuidInterface;\n\n#[Entity]\n#[Uuid4(field: 'token', nullable: true)]\nclass User\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'uuid', nullable: true)]\n    private ?UuidInterface $token = null\n}\n```\n\n----------------------------------------\n\nTITLE: Post Entity with Foreign Key Definition\nDESCRIPTION: Shows how to define a foreign key relationship to the User entity using the ForeignKey attribute with cascade action.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\ForeignKey;\n\n#[Entity]\nclass Post\n{\n    // ...\n    #[Column(type: 'integer')]\n    #[ForeignKey(target: User::class, action: 'CASCADE')]\n    private int $userId;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SELECT Query in PHP with Cycle ORM\nDESCRIPTION: This snippet shows how to execute a raw SELECT query using the query method of the database object. It demonstrates using positional parameters in the SQL statement.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/direct-database-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$result = $db->query('SELECT * FROM users WHERE id = ?', [1]);\nprint_r($result->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Updating Entity to Use Custom Query Class\nDESCRIPTION: Shows how to update the User entity to use the UserQuery class for more specific query functionality.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-query.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[Entity(table: 'user')]\nclass User extends ActiveRecord\n{\n    // ...\n\n    public static function query(): UserQuery\n    {\n        return new UserQuery();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Repository for Entity in PHP\nDESCRIPTION: Demonstrates how to assign a custom repository class to an entity using the repository option in the Entity attribute. This allows for specialized query handling for the entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(repository: Repository\\UserRepository::class)]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Entity Data with ClasslessMapper in PHP\nDESCRIPTION: Demonstrates how to retrieve entity data using the repository pattern with ClasslessMapper. Shows finding an entity by its primary key.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/classless-mapper.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$repository = $orm->getRepository('user');\n\n$user = $repository->findByPK(1);\n\nvar_dump($user); // \\Cycle\\ORM\\ClasslessProxy\\Classless user 0 Cycle ORM Proxy object\n```\n\n----------------------------------------\n\nTITLE: Executing Delete Query with Conditions in PHP using Cycle ORM\nDESCRIPTION: Shows how to use the 'delete' method to create and execute a delete query with conditions. This example deletes records where 'id' is less than 1000.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$db->table('test')\n    ->delete()\n    ->where('id', '<', 1000)\n    ->run();\n```\n\n----------------------------------------\n\nTITLE: Setting Driver-Specific Logger in PHP\nDESCRIPTION: Demonstrates how to configure a logger for a specific database driver. This allows for different logging implementations for different database connections.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/profiling.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$driver = $dbal->database('default')->getDriver();\n$driver->setLogger($myLogger);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Reference Implementation in PHP\nDESCRIPTION: Example showing how to use the custom UserID reference class when creating a new Post entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/reference.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post();\n$post->user = new UserID(1);\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($post)->run();\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Storing Related Entities\nDESCRIPTION: The SQL commands generated by Cycle ORM when persisting a User with a related Address. The ORM automatically inserts the foreign key (user_id) in the addresses table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"users\" (\"name\")\nVALUES ('Antony');\n\nINSERT INTO \"addresses\" (\"city\", \"user_id\")\nVALUES ('New York', 15);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mapper with CRUD Hooks in PHP\nDESCRIPTION: Example showing how to extend the base Mapper class to add custom logic for create, update and delete operations. Each method allows intercepting and modifying the commands before they are executed.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/extending.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Command\\CommandInterface;\nuse Cycle\\ORM\\Mapper\\Mapper;\nuse Cycle\\ORM\\Heap\\Node;\nuse Cycle\\ORM\\Heap\\State;\n\nclass MyMapper extends Mapper\n{\n    public function queueCreate(object $entity, Node $node, State $state): CommandInterface\n    {\n        $cmd = parent::queueCreate($entity, $node, $state);\n        \n        // do something\n        \n        return $cmd;\n    }\n\n    public function queueUpdate(object $entity, Node $node, State $state): CommandInterface\n    {\n        $cmd = parent::queueUpdate($entity, $node, $state);\n        \n        // do something\n        \n        return $cmd;\n    }\n\n    public function queueDelete(object $entity, Node $node, State $state): CommandInterface\n    {\n        $cmd = parent::queueDelete($entity, $node, $state);\n        \n        // do something\n        \n        return $cmd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Sort Orders in Cycle ORM\nDESCRIPTION: Example of specifying multiple sort orders in a query. This shows how to sort by name descending and ID ascending using multiple method calls.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Query\\SelectQuery;\n\n$select->orderBy(\n    'test.name', SelectQuery::SORT_DESC\n)->orderBy(\n    'test.id', SelectQuery::SORT_ASC\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Typecast Handler\nDESCRIPTION: Example showing how to set up a Schema with a null typecast handler, which will use the default Cycle\\ORM\\Parser\\Typecast handler.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/typecasting.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$schema = new Schema([\n    User::class => [\n        // ..\n        Schema::TYPECAST_HANDLER => //...\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using SQL Fragments in Cycle DBAL Queries\nDESCRIPTION: Demonstrates how to include raw SQL code in queries using Fragment class to bypass escaping. Shows DAYOFYEAR function usage example.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Injection\\Fragment;\n\n//255\n$select->where('id', '=', new Fragment(\"DAYOFYEAR('2015-09-12')\"));\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = DAYOFYEAR('2015-09-12')\n```\n\n----------------------------------------\n\nTITLE: Querying Active Record Entities\nDESCRIPTION: Shows examples of querying Active Record entities using the query builder, including filtering and relationship loading.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-entity.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Query all the dog people\n$dogsGuys = User::query()\n    ->where('likes_dogs', true)\n    ->fetchAll();\n\n// Query 10 users who have a dog named Rex\n$rexOwners = User::query()\n    ->load('pet', ['where' => ['type' => 'dog', 'name' => 'Rex']])\n    ->limit(10)\n    ->fetchAll();\n\n// Query user by id\n$user = User::findByPK($id);\n```\n\n----------------------------------------\n\nTITLE: Setting Database Prefix at Runtime in PHP\nDESCRIPTION: Shows how to set a database prefix dynamically at runtime using the withPrefix method. This allows for flexible prefix isolation after the database connection is established.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/isolation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db = $dbal->database();\nprint_r($db->withPrefix('my_db_prefix')->getTables());\n```\n\n----------------------------------------\n\nTITLE: Updating Entity with Custom Typecasted Column in Cycle ORM\nDESCRIPTION: Shows how to update an entity with a typecasted column by creating a new wrapper object and persisting the entity changes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getRepository(User::class)->findOne();\n$user->uuid = Uuid::create();\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Persisting StdClass Entity Data in Cycle ORM\nDESCRIPTION: Shows how to create and persist a new user entity using StdClass objects with Entity Manager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/std-mapper.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $this->orm->make('user'); // stdClass object\n\n$user->email = 'user@site.com';\n$user->balance = 1500;\n\n(new EntityManager($orm))->persist($user)->run();\n```\n\n----------------------------------------\n\nTITLE: User Entity with Attributes\nDESCRIPTION: Enhanced User entity class with Cycle ORM attributes for mapping.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Example;\n\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: \"primary\")]\n    private int $id;\n\n    public function __construct(\n        #[Column(type: \"string\")]\n        private string $name,\n    ) {\n    }\n\n    // getters and setters...\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Loading Related Entities with JOIN\nDESCRIPTION: The SQL query generated by Cycle ORM when loading users with their addresses using a LEFT JOIN. This approach fetches all data in a single query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".\"id\"                AS \"c0\",\n       \"user\".\"name\"              AS \"c1\",\n       \"l_user_address\".\"id\"      AS \"c2\",\n       \"l_user_address\".\"city\"    AS \"c3\",\n       \"l_user_address\".\"user_id\" AS \"c4\"\nFROM \"users\" AS \"user\"\n         LEFT JOIN \"addresses\" AS \"l_user_address\"\n                   ON \"l_user_address\".\"user_id\" = \"user\".\"id\";\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing RefersTo Relations\nDESCRIPTION: Demonstrates how to create self-referencing relations using RefersTo annotation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/refers-to.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Relation\\RefersTo;\n\n#[Entity]\nclass Category\n{\n     #[Column(type: 'primary')]\n    public int $id;\n\n     #[RefersTo(target: Category::class)]\n    public ?Category $parent;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Entity in Parent Class using Cycle ORM\nDESCRIPTION: Shows how to embed the Address entity into a User entity using the Embedded attribute.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Relation\\Embedded;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Embedded(target: Address::class)]\n    public Address $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Where Groups\nDESCRIPTION: Shows how to create grouped WHERE conditions using closures and boolean operators.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', 1)->where(function (\\Cycle\\ORM\\Select\\QueryBuilder $select) {\n    $select->where('status', 'active')->orWhere('id', 10);\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = 1\n  AND (`status` = 'active' OR `id` = 10)\n```\n\n----------------------------------------\n\nTITLE: Advanced Join - Combining Simple and Grouped Conditions\nDESCRIPTION: Shows how to combine simple join conditions with grouped conditions in a single join statement. The example demonstrates a complex join with multiple AND and OR conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$select->join('LEFT', 'photos', 'pht', [\n    'pht.user_id' => 'admins.id',\n    'users.is_admin' => 'pht.is_admin',\n    '@or' => [\n        [\n            'users.name' => new Parameter('Anton'),\n            'users.is_admin' => 'pht.is_admin',\n        ],\n        [\n            'users.status' => new Parameter('disabled'),\n        ],\n    ],\n]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `users`\n         LEFT JOIN `photos` AS `pht`\n                   ON (\n                               `pht`.`user_id` = `users`.`id`\n                           AND\n                               `users`.`is_admin` = true\n                           AND (\n                                       (`users`.`name` = \"Anton\" AND `users`.`is_admin` = `pht`.`is_admin`)\n                                       OR\n                                       `users`.`status` = \"disabled\"\n                                   )\n                       )\n```\n\n----------------------------------------\n\nTITLE: Loading Posts with Comments Filter in PHP\nDESCRIPTION: Shows how to load posts filtered by presence of comments using two different approaches.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users->load('posts', [\n    'where' => ['comments.id' => ['!=' => null]]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users->load('posts', [\n    'where' => function($qb) {\n        $qb->distinct()->where('comments.id', '!=', null);\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Pipeline for Annotated Entities in Cycle ORM (PHP)\nDESCRIPTION: This code snippet demonstrates how to set up the complete compiler pipeline for Cycle ORM with annotated entities support. It includes class locator configuration, schema compilation, and various generators for handling annotated entities, embeddables, inheritance, relations, and database synchronization.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/prerequisites.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\nuse Cycle\\Annotated;\nuse Spiral\\Tokenizer;\n\n// Class locator\n$classLocator = (new Tokenizer\\Tokenizer(new Tokenizer\\Config\\TokenizerConfig([\n    'directories' => ['src/'],\n])))->classLocator();\n\n$schema = (new Schema\\Compiler())->compile(new Schema\\Registry($dbal), [\n    new Schema\\Generator\\ResetTables(),             // re-declared table schemas (remove columns)\n    new Annotated\\Embeddings($classLocator),        // register embeddable entities\n    new Annotated\\Entities($classLocator),          // register annotated entities\n    new Annotated\\TableInheritance(),               // register STI/JTI\n    new Annotated\\MergeColumns(),                   // register columns from attributes\n    new Schema\\Generator\\GenerateRelations(),       // generate entity relations\n    new Schema\\Generator\\GenerateModifiers(),       // generate changes from schema modifiers\n    new Schema\\Generator\\ValidateEntities(),        // make sure all entity schemas are correct\n    new Schema\\Generator\\RenderTables(),            // declare table schemas\n    new Schema\\Generator\\RenderRelations(),         // declare relation keys and indexes\n    new Schema\\Generator\\RenderModifiers(),         // render all schema modifiers\n    new Schema\\Generator\\ForeignKeys(),             // Define foreign key constraints\n    new Annotated\\MergeIndexes(),                   // register indexes from attributes\n    new Schema\\Generator\\SyncTables(),              // sync table changes to database\n    new Schema\\Generator\\GenerateTypecast(),        // typecast non string columns\n]);\n\n$orm = $orm->with(schema: new \\Cycle\\ORM\\Schema($schema));\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Between Operator\nDESCRIPTION: Shows the SQL statement generated when using the BETWEEN operator in a WHERE condition.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` BETWEEN 10 AND 20\n```\n\n----------------------------------------\n\nTITLE: Resolving Column Names in Cycle Query Builder\nDESCRIPTION: Demonstrates how to access and use the QueryBuilder to resolve actual column names from entity property names.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/complex.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$qb = $select->getBuilder();\n\nprint_r($qb->resolve('id')); // table.column_name\n```\n\n----------------------------------------\n\nTITLE: Checking Table Existence in Different PostgreSQL Schemas\nDESCRIPTION: Demonstrates how to check if a table exists in different PostgreSQL schemas using the hasTable method. Examples include checking tables in the private schema, test schema, current user schema, and default schema.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/errata.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$db = $dbal->database();\n\n$db->hasTable('private.users'); // true\n\n$db->hasTable('test.users'); // true\n\n// Current user schema\n$db->hasTable('$user.users'); // true\n\n// will be used the first schema from config (public)\n$db->hasTable('users'); // true\n// ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Class Locator in PHP\nDESCRIPTION: Sets up the ClassLocator using Symfony Finder to detect entity classes in the specified directory.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$finder = (new \\Symfony\\Component\\Finder\\Finder())->files()->in([__DIR__]);\n$classLocator = new \\Spiral\\Tokenizer\\ClassLocator($finder);\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Iterator with Custom Data in Cycle ORM\nDESCRIPTION: This example shows how to manually create an Iterator with custom data. This approach allows using any custom data source or raw SQL query as input for entity instantiation.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/iterator.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    ['id' => 1, 'name' => 'Antony'],\n    ['id' => 2, 'name' => 'John']\n];\n\n$iterator =  \\Cycle\\ORM\\Iterator::createWithOrm($orm, 'user', $data);\n```\n\n----------------------------------------\n\nTITLE: Implementing DCE Security UUID (Version 2)\nDESCRIPTION: Example of implementing UUID v2 in an entity class using DCE security with domain and local identifier parameters.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Uuid\\Uuid2;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\n#[Entity]\n#[Uuid2(\n    field: 'uuid',\n    localDomain: Uuid::DCE_DOMAIN_PERSON,\n    localIdentifier: '12345678',\n    node: '00000fffffff',\n    clockSeq: 0xffff,\n    nullable: false\n)]\nclass User\n{\n    #[Column(type: 'uuid', primary: true)]\n    private UuidInterface $uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Lazy Embedded Entity\nDESCRIPTION: Demonstrates how to explicitly load a lazy embedded entity using the load method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select();\n$select->where('address.country', 'USA');\n\nprint_r($select->load('address')->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Using Table Aliases in Cycle ORM Queries\nDESCRIPTION: Example of defining table aliases in queries. This makes complex queries more readable and allows referencing tables with shorter names in the query conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->select()->from('test as abc')->columns([\n    'id',\n    'status',\n    'name'\n]);\n\n$select->where('abc.id', '>', 10);\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test` as `abc`\nWHERE `abc`.`id` > 10\n```\n\n----------------------------------------\n\nTITLE: Installing Cycle ORM via Composer\nDESCRIPTION: This command installs the Cycle ORM Active Record package using Composer. It's the preferred method for adding Cycle ORM to your PHP project.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/active-record\n```\n\n----------------------------------------\n\nTITLE: Entity with Doctrine Collection Implementation\nDESCRIPTION: Example of User entity implementation with Doctrine ArrayCollection, showing constructor initialization.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/collections.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\HasMany;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[HasMany(target: Post::class, collection: 'doctrine')]\n    public ArrayCollection $posts;\n\n    public function __construct()\n    {\n        $this->posts = new ArrayCollection();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Annotation in PHP\nDESCRIPTION: The simplest way to mark a class as a domain entity using the #[Entity] attribute in Cycle ORM. This allows the ORM to automatically handle table naming based on the class name.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing joined query results with nested nodes\nDESCRIPTION: Shows how to create a hierarchical data structure from a joined query by using RootNode and ArrayNode. The ArrayNode is used to define the relationship between parent and child records based on key mappings.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/node-parser.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Parser;\nuse Cycle\\Database\\StatementInterface;\n\n$root = new Parser\\RootNode(\n    ['id', 'balance'], ['id']\n);\n\n$root->joinNode('orders', new Parser\\ArrayNode(\n    ['id', 'user_id', 'total'], // column names\n    ['id'],                     // primary keys\n    ['user_id'],                // inner keys\n    ['id']                      // outer keys (user.id)\n));\n\nforeach ($query->run()->fetchAll(StatementInterface::FETCH_NUM) as $row) {\n    // start from 1st (0) column\n    $root->parseRow(0, $row);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MorphedHasMany Relation in PHP\nDESCRIPTION: Demonstrates how to create a MorphedHasMany relation using attributes in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/morphed.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\Morphed\\MorphedHasMany;\n\n#[Entity]\nclass User\n{\n    // ...\n\n    #[MorphedHasMany(target: Image::class)]\n    public $images;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Iterator with Raw Data and Type Casting in Cycle ORM\nDESCRIPTION: This snippet shows how to create an Iterator with raw data that requires type casting. The typecast parameter must be set to true when working with raw data collections.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/iterator.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$iterator = \\Cycle\\ORM\\Iterator::createWithOrm($orm, 'user', $rawData, typecast: true);\n```\n\n----------------------------------------\n\nTITLE: Basic Category Selection in Cycle ORM - PHP\nDESCRIPTION: Simple category repository selection using Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$categories = $orm->getRepository('category')->select();\n```\n\n----------------------------------------\n\nTITLE: Advanced Where Conditions\nDESCRIPTION: Demonstrates complex where conditions including between operators and multiple conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', 'between', 10, 20);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` BETWEEN 10 AND 20\n```\n\n----------------------------------------\n\nTITLE: Parameter Binding in Queries\nDESCRIPTION: Shows how to use the Parameter class for dynamic value binding in queries.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->select()->from('test')->columns(['id', 'status', 'name']);\n\n$select->where('id', $id = new \\Cycle\\Database\\Injection\\Parameter(null));\n\n//Bing new parameter value\n$id->setValue(15);\n\nforeach ($select as $row) {\n    print_r($row);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootloaders in Spiral Framework\nDESCRIPTION: This snippet shows how to update the Bootloader list in a Spiral Framework application to include Cycle ORM and Active Record components. It's necessary for proper initialization of the ORM within the framework.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Kernel extends \\Spiral\\Framework\\Kernel\n{\n    public function defineBootloaders(): array\n    {\n        return [\n            // ...\n\n            // ORM\n            CycleBridge\\SchemaBootloader::class,\n            CycleBridge\\CycleOrmBootloader::class,\n            CycleBridge\\AnnotatedBootloader::class,\n\n            // ActiveRecord\n            ActiveRecordBootloader::class,\n\n            // ...\n        ];\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Table Aliases in Cycle ORM\nDESCRIPTION: Alternative syntax for specifying table aliases directly in the table name. This demonstrates the AS syntax for table aliases in the JOIN statement.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$select = $db->table('test')->select(['test.*', 'uu.name as user_name']);\n\n$select->innerJoin('users as uu')->onWhere('uu.name', 'Anton');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `uu`.`name` as `user_name`\nFROM `primary_test`\n         INNER JOIN `primary_users` as `uu`\n                    ON `uu`.`id` = `primary_test`.`id` AND `uu`.`name` = 'Anton'\n```\n\n----------------------------------------\n\nTITLE: Unsafe Expression Usage - PHP\nDESCRIPTION: Example showing incorrect usage of user input in Expression wrapper that could lead to SQL injection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/security.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users->where($name, '=', new \\Cycle\\Database\\Injection\\Expression(\"CONCAT($userValue)\")); // possible SQL injection\n```\n\n----------------------------------------\n\nTITLE: Custom Discriminator Value in CycleORM STI\nDESCRIPTION: Shows how to customize the discriminator value for a child entity using the SingleTable attribute.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/single-table-inheritance.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#[Entity]\n#[SingleTable(value: 'super_customer')] // discriminator value: super_customer\nclass Customer extends Person\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Entities with EntityManager in Cycle ORM\nDESCRIPTION: Example of persisting an entity with embedded properties using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$u = new User();\n$u->credentials->username = 'username';\n$u->credentials->password = 'password';\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($u);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Collection Factory in Cycle ORM\nDESCRIPTION: Example of setting up Doctrine Collection Factory as the default collection factory in Cycle ORM Factory object.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/upgrade.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\n$factory = (new ORM\\Factory(\n    dbal: $dbal,\n    defaultCollectionFactory: new ORM\\Collection\\DoctrineCollectionFactory\n));\n```\n\n----------------------------------------\n\nTITLE: Repository with Column and Index Definitions\nDESCRIPTION: Shows how to add column and index definitions directly in a repository class using attributes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n#[Column(name: 'created_at', type: 'datetime')]\n#[Index(columns: ['created_at'])]\nclass UserRepository extends \\Cycle\\ORM\\Select\\Repository\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns - PHP Long Form\nDESCRIPTION: Demonstrates how to define table columns using the verbose method syntax, including primary key, string, decimal and text columns.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$schema = $database->table('new_table')->getSchema();\n\n$schema->column('id')->primary();\n$schema->column('name')->string(64); // String length 64 characters\n$schema->column('email')->string();  // Default string length is 255 symbols\n$schema->column('balance')->decimal(10, 2);\n$schema->column('description')->text();\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Columns in Cycle ORM Entity Mapping\nDESCRIPTION: This snippet illustrates how to define a nullable column in a Cycle ORM entity, which is useful when adding new columns to existing tables without specifying a default value.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    protected int $id;\n\n    #[Column(type: 'string(64)', nullable: true)]\n    protected ?string $password = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Results in Cycle ORM Select (PHP)\nDESCRIPTION: Shows how to count the total number of records in a Select instance using the Countable interface. This is useful for pagination to determine the total number of pages.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprint_r($select->count());\n```\n\n----------------------------------------\n\nTITLE: Dropping Schema Elements in Cycle ORM - PHP\nDESCRIPTION: Shows how to remove columns, indexes, and entire tables using Cycle ORM's schema builder.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$schema->dropColumn('new_email');\n$schema->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema->declareDropped();\n$schema->save();\n```\n\n----------------------------------------\n\nTITLE: Setting Container for Cycle ORM in Custom Frameworks\nDESCRIPTION: This code demonstrates how to set up a PSR-11 compatible container for Cycle ORM in frameworks that don't have built-in support. It's essential for resolving dependencies in custom implementations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Cycle\\ActiveRecord\\Facade::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Custom Entity Schema Definition in PHP\nDESCRIPTION: Demonstrates manual entity schema definition for the User entity with explicit mapping configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\nuse Cycle\\ORM\\Mapper\\Mapper;\n\n$dbal = /** ... */;\n\n$orm = new ORM\\ORM(new ORM\\Factory($dbal), new ORM\\Schema([\n    'user' => [\n        ORM\\Schema::MAPPER => Mapper::class,\n        ORM\\Schema::ENTITY => User::class,\n        ORM\\Schema::DATABASE => 'default',\n        ORM\\Schema::TABLE => 'users',\n        ORM\\Schema::PRIMARY_KEY => 'id',\n        ORM\\Schema::COLUMNS => [\n            'id' => 'id',\n            'name' => 'name',\n        ],\n        ORM\\Schema::TYPECAST => [\n            'id' => 'int',\n        ],\n        ORM\\Schema::RELATIONS => [],\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for Embedded Entity\nDESCRIPTION: Shows how to configure lazy loading for embedded entities using the load option.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Relation\\Embedded;\n\n#[Entity]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Embedded(target: Address:class, load: 'lazy')]\n    public Address $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Persisting Entity with Custom UUID Column in Cycle ORM\nDESCRIPTION: Shows how to create a new entity instance with a custom UUID wrapper field and persist it to the database using Cycle ORM's EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/column-wrappers.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = new User();\n$user->uuid = Uuid::create();\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: Custom Generator Interface in PHP\nDESCRIPTION: Shows the interface definition for creating custom schema generators.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/schema-builder.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Cycle\\Schema;\n\ninterface GeneratorInterface\n{\n    /**\n     * Run generator over given registry.\n     */\n    public function run(Registry $registry): Registry;\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Class Definition with Custom Mapper in PHP\nDESCRIPTION: Shows how to define an entity class using attributes to specify the custom mapper and column configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/about.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Entity(\n    mapper: CustomMapper::class\n)]\n#[Column(type: 'string', name: 'id', property: 'id')]\nclass User extends Entity\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Default Schema Configuration Values in Cycle ORM\nDESCRIPTION: This code shows the default configuration values for schema classes in Cycle ORM. These are the classes that will be used if custom defaults are not provided when instantiating the ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/default-classes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    SchemaInterface::REPOSITORY => \\Cycle\\ORM\\Select\\Repository::class,\n    SchemaInterface::SOURCE => \\Cycle\\ORM\\Select\\Source::class,\n    SchemaInterface::MAPPER => \\Cycle\\ORM\\Mapper\\Mapper::class,\n    SchemaInterface::SCOPE => null,\n    SchemaInterface::TYPECAST_HANDLER => null,\n]\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Array Syntax Where\nDESCRIPTION: Shows the SQL statement generated when using array syntax for WHERE conditions, which results in conditions joined with AND.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE (`id` = 1 AND `status` = 'active')\n```\n\n----------------------------------------\n\nTITLE: Verifying Class Detection in PHP\nDESCRIPTION: Prints detected classes to verify ClassLocator configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprint_r($classLocator->getClasses());\n```\n\n----------------------------------------\n\nTITLE: Using the UserRepository in Application Code in PHP\nDESCRIPTION: Example showing how to instantiate and use the UserRepository for typical operations such as retrieving a user by email and finding active users with their related posts.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/active-record/active-repository.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$repository = new UserRepository();\n$user = $repository->getByEmail($email);\n\n$activeUsers = $repository\n    ->whereActive()\n    ->withPosts()\n    ->findAll();\n```\n\n----------------------------------------\n\nTITLE: Configuring Database at Runtime in PHP\nDESCRIPTION: Shows how to configure a database connection at runtime rather than through configuration. This approach is useful for testing with database mocks or dynamic configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/connect.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database;\nuse Cycle\\Database\\Config;\n\n$dbal->addDatabase(new Database\\Database(\n  'name',\n  'prefix_',\n  new Database\\Driver\\SQLite\\SQLiteDriver(\n    new Config\\PostgresDriverConfig(\n        connection: new Config\\Postgres\\TcpConnectionConfig(\n            database: 'spiral',\n            host: '127.0.0.1',\n            port: 5432,\n            user: 'spiral',\n            password: '',\n        ),\n        schema: 'public',\n        queryCache: true,\n    )\n  )\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Information with Schema Namespaces\nDESCRIPTION: Shows how to get table information including schema names in PostgreSQL using the getTables method. The examples demonstrate accessing both table names and full names with schema qualifiers.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/errata.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$db = $dbal->database();\n$tables = $db->getTables();\n\n$tables[0]->getName(); // users\n$tables[0]->getFullName(); // private.users\n\n$tables[1]->getName(); // users\n$tables[1]->getFullName(); // private.users\n\n$tables[2]->getName(); // users\n$tables[2]->getFullName(); // spiral.users - current user namespace for user with username 'spiral'\n\n// table with schema 'test' will be ignored. It doesn't present in connection config schema list\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Current Version Schema Compilation in PHP\nDESCRIPTION: Configures and compiles the ORM schema using the current version's approach with separate entity and embedding locators.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\nuse Cycle\\Annotated;\nuse Cycle\\Annotated\\Locator\\TokenizerEmbeddingLocator;\nuse Cycle\\Annotated\\Locator\\TokenizerEntityLocator;\n\n$embeddingLocator = new TokenizerEmbeddingLocator($classLocator);\n$entityLocator = new TokenizerEntityLocator($classLocator);\n\n$schema = (new Schema\\Compiler())->compile(new Schema\\Registry($dbal), [\n    new Schema\\Generator\\ResetTables(),\n    new Annotated\\Embeddings($embeddingLocator),\n    new Annotated\\Entities($entityLocator),\n    new Annotated\\TableInheritance(),\n    new Annotated\\MergeColumns(),\n    new Schema\\Generator\\GenerateRelations(),\n    new Schema\\Generator\\GenerateModifiers(),\n    new Schema\\Generator\\ValidateEntities(),\n    new Schema\\Generator\\RenderTables(),\n    new Schema\\Generator\\RenderRelations(),\n    new Schema\\Generator\\RenderModifiers(),\n    new Schema\\Generator\\ForeignKeys(),\n    new Annotated\\MergeIndexes(),\n    new Schema\\Generator\\SyncTables(),\n    new Schema\\Generator\\GenerateTypecast(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Closure for Where Conditions\nDESCRIPTION: Demonstrates using a closure to define multiple where conditions\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$select->where(function(\\Cycle\\ORM\\Select\\QueryBuilder $select) {\n    $select->where('id', 'in', new \\Cycle\\Database\\Injection\\Parameter([1, 2, 3]));\n    $select->where('status', 'like', 'active');\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Index Uniqueness in Cycle ORM - PHP\nDESCRIPTION: Demonstrates how to modify an existing index to make it non-unique in Cycle ORM.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$schema->index(['name', 'email'])->unique(false);\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema with StdMapper in Cycle ORM\nDESCRIPTION: Demonstrates how to configure an ORM schema using StdMapper for a user entity. Includes column mapping, primary key definition, and type casting configuration.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/std-mapper.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\Schema;\nuse Cycle\\ORM\\Mapper\\StdMapper;\n\n$orm = $orm->with(schema: new Schema([\n   'user' => [\n      Schema::MAPPER => StdMapper::class,\n      Schema::DATABASE => 'default',\n      Schema::TABLE => 'user',\n      Schema::PRIMARY_KEY => 'id',\n      Schema::COLUMNS => [\n          // property => column\n          'id' => 'id',\n          'email' => 'email',\n          'balance' => 'balance'\n      ],\n     Schema::TYPECAST => [\n          'id' => 'int',\n          'balance' => 'float'\n      ],\n      Schema::RELATIONS   => []\n  ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for User Query\nDESCRIPTION: SQL query generated for fetching user data.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/relations.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".\"id\"      AS \"c0\",\n       \"user\".\"email\"   AS \"c1\",\n       \"user\".\"balance\" AS \"c2\"\nFROM \"user\" AS \"user\"\n```\n\n----------------------------------------\n\nTITLE: Legacy (3.x) Schema Compilation in PHP\nDESCRIPTION: Compiles the ORM schema using the 3.x version approach with direct classLocator usage.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema;\nuse Cycle\\Annotated;\n\n$dbal = /** ... */;\n\n$schema = (new Schema\\Compiler())->compile(new Schema\\Registry($dbal), [\n    new Schema\\Generator\\ResetTables(),\n    new Annotated\\Embeddings($classLocator),\n    new Annotated\\Entities($classLocator),\n    new Annotated\\TableInheritance(),\n    new Annotated\\MergeColumns(),\n    new Schema\\Generator\\GenerateRelations(),\n    new Schema\\Generator\\GenerateModifiers(),\n    new Schema\\Generator\\ValidateEntities(),\n    new Schema\\Generator\\RenderTables(),\n    new Schema\\Generator\\RenderRelations(),\n    new Schema\\Generator\\RenderModifiers(),\n    new Schema\\Generator\\ForeignKeys(),\n    new Annotated\\MergeIndexes(),\n    new Schema\\Generator\\SyncTables(),\n    new Schema\\Generator\\GenerateTypecast(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Persisting Has One Relation\nDESCRIPTION: Shows how to persist a User entity with its related Address entity using EntityManager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/has-one.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($user);\n$manager->run();\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Grouped Conditions with OR\nDESCRIPTION: Shows the SQL statement generated for grouped WHERE conditions with OR joining the main condition to the group.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = 1\n   OR (`status` = 'active' AND `id` = 10)\n```\n\n----------------------------------------\n\nTITLE: Installing Cycle Database Component\nDESCRIPTION: Command to install the Cycle database component via Composer.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/database\n```\n\n----------------------------------------\n\nTITLE: Running the full Cycle ORM test suite\nDESCRIPTION: Command to execute the complete test suite for Cycle ORM using PHPUnit. This runs all available tests to ensure comprehensive coverage.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: SQL Output of Schema Update Migration\nDESCRIPTION: SQL output showing the process of executing a migration that updates an existing schema, including various database operations and status updates.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'my_migration'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'new_field'\n[MySQLDriver] Begin transaction\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'sample_table'\n[MySQLDriver] SHOW FULL COLUMNS FROM `sample_table`\n[MySQLDriver] SHOW INDEXES FROM `sample_table`\n[MySQLDriver] SELECT * FROM `information_schema`.`referential_constraints` WHERE `constraint_schema` = 'sample_2' AND `table_name` = 'sample_table'\n[MySQLDriver] SHOW INDEXES FROM `sample_table`\n[MySQLDriver] SHOW TABLE STATUS WHERE `Name` = 'sample_table'\n[MySQLDriver] ALTER TABLE `sample_table` ADD COLUMN `field` float NOT NULL\n[MySQLDriver] Commit transaction\n[MySQLDriver] INSERT INTO `migrations` (`migration`, `time_executed`)\nVALUES ('new_field', '2017-04-01 16:23:36')\n[MySQLDriver] Given insert ID: 4\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'new_field'\nMigration new_field was successfully executed.\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'my_migration'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'new_field'\n```\n\n----------------------------------------\n\nTITLE: Executing DeleteQuery with Where Array in PHP\nDESCRIPTION: This snippet shows an alternative way to specify delete conditions using an array in the 'delete' method. It deletes records from the 'test' table where the 'id' is greater than 1000.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$db->table('test')->delete([\n    'id' => ['>' => 1000]\n])->run();\n```\n\n----------------------------------------\n\nTITLE: SQL Output for AND Conditions\nDESCRIPTION: Shows the SQL statement generated when chaining multiple WHERE conditions with AND operator.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE `id` = 1\n  AND `status` = 'active'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Table Creation SQL\nDESCRIPTION: Example of generated PostgreSQL SQL for table creation with equivalent column types.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"secondary_new_table\"\n(\n    \"id\"          serial NOT NULL,\n    \"name\"        character varying(64) NULL,\n    \"email\"       character varying(255) NULL,\n    \"balance\"     numeric(10, 2) NULL,\n    \"description\" text NULL,\n    PRIMARY KEY (\"id\")\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Cycle Annotated Package\nDESCRIPTION: Command to install the Cycle annotated package for PHP attribute support.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require cycle/annotated\n```\n\n----------------------------------------\n\nTITLE: Entity Update Operation in PHP\nDESCRIPTION: Updates an existing entity's properties and persists changes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$user = /**  */;\n$user->setName(\"John\");\n\n$em->persist($user)->run();\nprint_r($user);\n```\n\n----------------------------------------\n\nTITLE: Select Query Builder Initialization\nDESCRIPTION: Shows different ways to initialize a SelectQuery builder from database or table instances.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function indexAction(\\Cycle\\Database\\Database $database)\n{\n    $select = $database->table('test')->select();\n    $select = $database->select()->from('test');\n\n    // Alternative\n    $select = $database->test->select();\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Hook for Multiple Events in PHP\nDESCRIPTION: Example of implementing a single event handler for multiple events using an array of event types. This demonstrates how to handle both OnCreate and AfterCreate events with conditional logic in a single method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\ORM\\Entity\\Behavior\\Event\\Mapper\\Command;\nuse Cycle\\ORM\\Entity\\Behavior;\n\n#[Entity]\n#[Behavior\\Hook(\n    callable: [Comment::class, 'events'], \n    events: [Command\\OnCreate::class, Command\\AfterCreate::class]\n)]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    public int $id;\n    \n    public static function events(Command\\OnCreate|Command\\AfterCreate $event): void\n    {\n        if ($event instanceof Command\\OnCreate) {\n            // do something before comment created\n        }\n        \n        if ($event instanceof Command\\AfterCreate) {\n            // do something when comment created\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker containers for Cycle ORM testing\nDESCRIPTION: Instructions for starting Docker containers required for testing the Cycle ORM engine locally. This is the first step in the testing process after downloading the repository.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tests\ndocker-composer up\n```\n\n----------------------------------------\n\nTITLE: Installing Schema Migrations Generator\nDESCRIPTION: Command to install the Cycle schema migrations generator package using Composer.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/schema-migrations-generator\n```\n\n----------------------------------------\n\nTITLE: Loading Lazy Embedded Entities in Cycle ORM\nDESCRIPTION: Shows how to explicitly load lazy embedded entities using the load() method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select();\n$select->where('credentials.username', 'username');\n\nprint_r($select->load('credentials')->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Entity in PHP\nDESCRIPTION: Shows the implementation of the Tag entity with primary key and name properties, including constructor and getter method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Relation\\ManyToMany;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass Tag\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    #[Column(type: 'string')]\n    private string $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unpacking Cached Entity Data with Cycle ORM Iterator\nDESCRIPTION: Shows how to restore cached entity data using the Cycle\\ORM\\Iterator object to recreate entity instances from cached data.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/caching.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userData = $cacheStore->get('user-data');\n\n$users = Iterator::createWithOrm($orm, User::class, $userData);\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Custom Operators\nDESCRIPTION: Shows the SQL statement generated when using custom operators with array syntax for WHERE conditions.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE (`id` IN (1, 2, 3) AND `status` LIKE 'active')\n```\n\n----------------------------------------\n\nTITLE: Alter Table SQL\nDESCRIPTION: Example of generated SQL for modifying existing table structure.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `primary_new_table` CHANGE `description` `description` longtext NULL;\nALTER TABLE `primary_new_table`\n    ADD COLUMN `count_visits` int (11) NULL;\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package with Composer\nDESCRIPTION: Command to install the cycle/entity-behavior-uuid package using Composer package manager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/uuid.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/entity-behavior-uuid\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Schema in Cycle ORM - PHP\nDESCRIPTION: Basic example of creating a custom schema instance for Cycle ORM. Shows how to initialize a Schema object with custom mappings.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/manual.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$orm = $orm->with(schema: new \\Cycle\\ORM\\Schema([\n    // ... schema ...\n]));\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Where Condition in PHP\nDESCRIPTION: Shows basic usage of the where clause in query builder\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$select->where('status', 'active');\n```\n\n----------------------------------------\n\nTITLE: Running a targeted test suite for SQLite driver\nDESCRIPTION: Command to run a specific subset of tests for the SQLite driver in Cycle ORM. This provides a quicker testing option focused on a particular database driver.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/phpunit tests/ORM/Functional/Driver/SQLite\n```\n\n----------------------------------------\n\nTITLE: PHP Version Requirement\nDESCRIPTION: Specifies the minimum required PHP version for Cycle ORM\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/semver.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n≥ 8.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Cycle Migrations Package\nDESCRIPTION: Command to install the Cycle migrations package using Composer.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/migrations\n```\n\n----------------------------------------\n\nTITLE: Related Photos Loading Query - SQL\nDESCRIPTION: SQL query generated for loading related photos with ordering through pivot table.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"l_category_photos_pivot\".\"id\"          AS \"c0\",\n       \"l_category_photos_pivot\".\"position\"    AS \"c1\",\n       \"l_category_photos_pivot\".\"photo_id\"    AS \"c2\",\n       \"l_category_photos_pivot\".\"category_id\" AS \"c3\",\n       \"category_photos\".\"id\"                  AS \"c4\",\n       \"category_photos\".\"url\"                 AS \"c5\"\nFROM \"photos\" AS \"category_photos\"\n         INNER JOIN \"photo_category_positions\" AS \"l_category_photos_pivot\"\n                    ON \"l_category_photos_pivot\".\"photo_id\" = \"category_photos\".\"id\"\nWHERE \"l_category_photos_pivot\".\"category_id\" IN (1, 2, 3, 4)\nORDER BY \"l_category_photos_pivot\".\"position\" ASC\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedded Entity in Constructor\nDESCRIPTION: Shows how to properly initialize an embedded entity in the parent class constructor.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    $this->address = new Address();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Entity Class\nDESCRIPTION: Simple PHP class defining a User entity without attributes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Example;\n\nclass User\n{\n    private int $id;\n\n    public function __construct(\n        private string $name,\n    ) {\n    }\n\n    // getters and setters...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Reference in PHP\nDESCRIPTION: Demonstrates how to create a new Post entity using a Reference object instead of an actual User entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/reference.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post();\n$post->user = new \\Cycle\\ORM\\Reference\\Reference('user', ['id' => 1]);\n\n$manager = new \\Cycle\\ORM\\EntityManager($orm);\n$manager->persist($post)->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Active Record Functionality in PHP with Cycle ORM\nDESCRIPTION: Demonstrates the initial implementation of the base Record class with static ORM access and core methods for save, delete, and find operations.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/active-record.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM;\n\nabstract class Record\n{\n    private static ORM\\ORMInterface $orm;\n\n    public function save(bool $saveChildren = true): ORM\\Transaction\\StateInterface\n    {\n        $manager = new ORM\\EntityManager(self::getORM());\n\n        return $manager->persist($this, $saveChildren)->run();\n    }\n\n    public function delete(): ORM\\Transaction\\StateInterface\n    {\n        $manager = new ORM\\EntityManager(self::getORM());\n\n        return $manager->delete($this)->run();\n    }\n\n    public static function find(): ORM\\RepositoryInterface\n    {\n        return self::getORM()->getRepository(static::class);\n    }\n\n    public static function getORM(): ORM\\ORMInterface\n    {\n        return self::$orm;\n    }\n\n    public static function setORM(ORM\\ORMInterface $orm): void\n    {\n        self::$orm = $orm;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Number Display in Markdown\nDESCRIPTION: Displays the current version number of Cycle ORM in markdown format\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/semver.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n2.*\n```\n\n----------------------------------------\n\nTITLE: Installing Promise Mapper via Composer\nDESCRIPTION: Command to install the cycle/orm-promise-mapper package using Composer package manager.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/promise-mapper.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/orm-promise-mapper\n```\n\n----------------------------------------\n\nTITLE: Using Expressions with Database Prefixes in Cycle ORM\nDESCRIPTION: Example demonstrating how expressions handle database table prefixes automatically. This is useful when your database has non-empty table prefixes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$select->where(new \\Cycle\\Database\\Injection\\Expression(\"CONCAT(test.id, '-', test.status)\"), '1-active');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id`,\n       `status`,\n       `name`\nFROM `primary_test`\nWHERE CONCAT(`primary_test`.`id`, '-', `primary_test`.`status`) = '1-active'\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Joins with OR Conditions in Cycle ORM\nDESCRIPTION: Example of creating more complex JOIN conditions with OR logic. This demonstrates joining on either matching ID or matching balance values.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/extended.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$select->leftJoin('users')->on('users.id', 'test.id')->orOn('users.id', 'test.balance');\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Combined Load and With\nDESCRIPTION: The SQL query generated when both filtering by and loading related entities. This creates separate aliases for the same table in different JOIN clauses.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/basic/relation.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".\"id\"                AS \"c0\",\n       \"user\".\"name\"              AS \"c1\",\n       \"l_user_address\".\"id\"      AS \"c2\",\n       \"l_user_address\".\"city\"    AS \"c3\",\n       \"l_user_address\".\"user_id\" AS \"c4\",\n       \"user_address\".\"id\"        AS \"c5\",\n       \"user_address\".\"city\"      AS \"c6\",\n       \"user_address\".\"user_id\"   AS \"c7\"\nFROM \"users\" AS \"user\"\n         LEFT JOIN \"addresses\" AS \"l_user_address\"\n                   ON \"l_user_address\".\"user_id\" = \"user\".\"id\"\n         INNER JOIN \"addresses\" AS \"user_address\"\n                    ON \"user_address\".\"user_id\" = \"user\".\"id\"\nWHERE \"user_address\".\"city\" = 'New York';\n```\n\n----------------------------------------\n\nTITLE: Single Query SQL Output - SQL\nDESCRIPTION: SQL query generated for the single query approach loading both categories and photos.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"category\".\"id\"                           AS \"c0\",\n       \"category\".\"title\"                        AS \"c1\",\n       \"l_l_category_photos_pivot\".\"id\"          AS \"c2\",\n       \"l_l_category_photos_pivot\".\"position\"    AS \"c3\",\n       \"l_l_category_photos_pivot\".\"photo_id\"    AS \"c4\",\n       \"l_l_category_photos_pivot\".\"category_id\" AS \"c5\",\n       \"l_category_photos\".\"id\"                  AS \"c6\",\n       \"l_category_photos\".\"url\"                 AS \"c7\"\nFROM \"categories\" AS \"category\"\n         LEFT JOIN \"photo_category_positions\" AS \"l_l_category_photos_pivot\"\n                   ON \"l_l_category_photos_pivot\".\"category_id\" = \"category\".\"id\"\n         INNER JOIN \"photos\" AS \"l_category_photos\"\n                    ON \"l_category_photos\".\"id\" = \"l_l_category_photos_pivot\".\"photo_id\"\nORDER BY \"category\".\"id\" ASC, \"l_l_category_photos_pivot\".\"position\" ASC\n```\n\n----------------------------------------\n\nTITLE: Composer Autoload Configuration\nDESCRIPTION: JSON configuration for PSR-4 autoloading in composer.json.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n  \"psr-4\": {\n    \"Example\\\\\": \"src/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Embedded Entities Separately in Cycle ORM\nDESCRIPTION: Demonstrates how to query embedded entities separately from their parent entities using role-based repository access.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/embedded.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$orm->getRepository(\"user:credentials\")->findAll();\n```\n\n----------------------------------------\n\nTITLE: Iterating over Select Results in Cycle ORM using PHP\nDESCRIPTION: This snippet demonstrates the default usage of the Iterator object that's returned from the getIterator method of the Cycle\\ORM\\Select class.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/iterator.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository('user')->select();\n\nforeach ($select as $user) {\n    print_r($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Foreign Key SQL for MySQL - SQL\nDESCRIPTION: Shows the SQL statements generated by Cycle ORM's DBAL for creating foreign key constraints in MySQL.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/declaration.md#2025-04-20_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `primary_second`\n    ADD COLUMN `first_id` int (11) NULL;\nALTER TABLE `primary_second`\n    ADD CONSTRAINT `primary_second_foreign_first_id_55f205f594a3a` FOREIGN KEY (`first_id`) REFERENCES `primary_first` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Installing Cycle Entity Behavior Package\nDESCRIPTION: Command to install the cycle/entity-behavior package via Composer.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/entity-behaviors/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require cycle/entity-behavior\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Entity Class in PHP\nDESCRIPTION: Defines a basic Entity class with data storage and access methods using an array property.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/mapper/about.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Entity\n{\n    public function __construct(\n        private array $data = []\n    ) {\n    }\n\n    public function setData(array $data): void\n    {\n        $this->data = $data;\n    }\n\n    public function getData(): array\n    {\n        return $this->data;\n    }\n\n    public function __get($name)\n    {\n        return $this->data[$name] ?? null;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Parameter Usage in PHP\nDESCRIPTION: Shows how to use parameters that can be set after query building\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/basic.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$select->where('id', $id = new \\Cycle\\Database\\Injection\\Parameter(null));\n\n$id->setValue(10);\n\nprint_r($select->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Defining Column Prefix for Embedded Entity\nDESCRIPTION: Shows how to define a custom column prefix for embedded entity fields using the columnPrefix option.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Embeddable;\nuse Cycle\\Annotated\\Annotation\\Column;\n\n#[Embeddable(columnPrefix: 'address_')]\nclass Address\n{\n    #[Column(type: 'string')]\n    public string $country;\n\n    #[Column(type: 'string')]\n    public string $city;\n\n    #[Column(type: 'string')]\n    public string $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Iterator in Cycle ORM\nDESCRIPTION: Example of creating an Iterator object using the new static createWithOrm method.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/upgrade.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$iterator =  \\Cycle\\ORM\\Iterator::createWithOrm($orm, 'user', $data);\n```\n\n----------------------------------------\n\nTITLE: Querying Embedded Entity Separately\nDESCRIPTION: Shows how to query an embedded entity separately from its parent using the entity role.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/embeddings.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$orm->getRepository(\"user:address\")->findAll();\n```\n\n----------------------------------------\n\nTITLE: Checking Entity Existence in Cycle ORM Heap\nDESCRIPTION: Example of checking if an entity exists in the ORM heap using the find method, which is useful for preventing duplicate entity loading.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/caching.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $orm->getHeap()->find(User::class, ['id' => 1]);\n\nif ($user !== null) {\n    // Do something \n}\n```\n\n----------------------------------------\n\nTITLE: Entity Debugging Output in PHP\nDESCRIPTION: Prints entity data for debugging purposes.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nprint_r($user);\n```\n\n----------------------------------------\n\nTITLE: Initializing Schema Registry in PHP\nDESCRIPTION: Creates a new Registry object for schema definition using the DBAL connection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/schema/schema-builder.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$registry = new \\Cycle\\Schema\\Registry($dbal);\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema in Cycle ORM (PHP)\nDESCRIPTION: Demonstrates how to access the schema from an initiated ORM instance using the getSchema method. It shows printing the table associated with an entity.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/schema.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// print the table associated with the entity\nprint_r($orm->getSchema()->define(User::class, \\Cycle\\ORM\\SchemaInterface::TABLE));\n```\n\n----------------------------------------\n\nTITLE: Category Selection Query - SQL\nDESCRIPTION: SQL query generated for selecting categories.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/relation/many-to-many.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"category\".\"id\"    AS \"c0\",\n       \"category\".\"title\" AS \"c1\"\nFROM \"categories\" AS \"category\"\n```\n\n----------------------------------------\n\nTITLE: Including Composer Autoloader\nDESCRIPTION: Basic PHP script to include the Composer autoloader.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/intro/install.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\ninclude 'vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical documentation structure using markdown links organized into major sections including installation, basic usage, relations, advanced features and internals.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Getting Started\n  * [About Cycle ORM](/docs/en/intro/about.md)\n  * [**Installation**](/docs/en/intro/install.md)\n  * [Integrations](/docs/en/intro/integrations.md)\n  * [Upgrade Guide](/docs/en/intro/upgrade.md)\n  * [Contributing](contributing.md)\n    * [Issue with Test Case](issue-test-case.md)\n  * [Versioning](/docs/en/intro/semver.md)\n  * [LICENSE](license.md)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Test Table in PHP\nDESCRIPTION: Creates a sample table schema with various column types including primary key, datetime, enum, string, double, and JSON fields. This schema is used throughout the examples to demonstrate query building capabilities.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Database;\n\n$schema = $dbal->database()->table('test')->getSchema();\n\n$schema->primary('id');\n$schema->datetime('time_created');\n$schema->enum('status', ['active', 'disabled'])->defaultValue('active');\n$schema->string('name', 64);\n$schema->string('email');\n$schema->double('balance');\n$schema->json('settings')->nullable();\n$schema->save();\n```\n\n----------------------------------------\n\nTITLE: SQL Output of Migration Execution\nDESCRIPTION: SQL output showing the process of rolling back and executing migrations, including various database operations and status updates.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nRolling back executed migration(s)...\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'my_migration'\n[MySQLDriver] Begin transaction\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'sample_table'\n[MySQLDriver] SHOW FULL COLUMNS FROM `sample_table`\n[MySQLDriver] SHOW INDEXES FROM `sample_table`\n[MySQLDriver] SELECT * FROM `information_schema`.`referential_constraints` WHERE `constraint_schema` = 'sample_2' AND `table_name` = 'sample_table'\n[MySQLDriver] SHOW INDEXES FROM `sample_table`\n[MySQLDriver] SHOW TABLE STATUS WHERE `Name` = 'sample_table'\n[MySQLDriver] DROP TABLE `sample_table`\n[MySQLDriver] Commit transaction\n[MySQLDriver] DELETE FROM `migrations`\nWHERE `migration` = 'my_migration'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'my_migration'\nMigration my_migration was successfully rolled back.\n\nExecuting outstanding migration(s)...\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'migrations'\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'my_migration'\n[MySQLDriver] Begin transaction\n[MySQLDriver] SELECT COUNT(*) FROM `information_schema`.`tables` WHERE `table_schema` = 'sample_2' AND `table_name` = 'sample_table'\n[MySQLDriver] CREATE TABLE `sample_table` (\n    `id` int (11) NOT NULL AUTO_INCREMENT,\n    `name` varchar (255) NOT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE InnoDB\n[MySQLDriver] Commit transaction\n[MySQLDriver] INSERT INTO `migrations` (`migration`, `time_executed`)\nVALUES ('my_migration', '2017-04-01 16:12:21')\n[MySQLDriver] Given insert ID: 2\n[MySQLDriver] SELECT\n`id`, `time_executed`\nFROM `migrations`\nWHERE `migration` = 'my_migration'\nMigration my_migration was successfully executed.\n```\n\n----------------------------------------\n\nTITLE: Paginating User Select in Cycle ORM (PHP)\nDESCRIPTION: Demonstrates how to paginate a simple User select query using Cycle ORM and Spiral Pagination. It creates a Select object, initializes a Paginator with 10 results per page, and applies pagination to the select query.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$select = $orm->getRepository(User::class)->select()->orderBy('id', 'DESC');\n\n// 10 results per page\n$paginator = new \\Spiral\\Pagination\\Paginator(10);\n$paginator->paginate($select);\n\nprint_r($select->fetchAll());\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Case with SQLite Driver\nDESCRIPTION: Command to execute a specific test case (Case42) using the SQLite driver in PHPUnit. This allows testing issues locally with better performance when database driver specifics are not relevant.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/issue-test-case.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit --group driver-sqlite --filter Case42\n```\n\n----------------------------------------\n\nTITLE: Customizing Entity Properties in PHP\nDESCRIPTION: Example of customizing entity properties like role, database, and table name using the Entity attribute options. This allows for explicit control over how the entity is mapped to the database.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/annotated/entity.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(role: 'user', database: 'database', table: 'user_table')]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Parameter Binding in Expressions - PHP\nDESCRIPTION: Proper way to handle user input in Expression wrapper using parameter binding to prevent SQL injection.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/security.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$value = new \\Spiral\\Database\\Injection\\Parameter($userValue);\n$concat = new \\Spiral\\Database\\Injection\\Expression(\"CONCAT(?)\", $value);\n// or\n$concat = new \\Spiral\\Database\\Injection\\Expression(\"CONCAT(?)\", $userValue); // it will be wrapped in Parameter class automatically.\n\n$users->where($name, '=', $concat);\n```\n\n----------------------------------------\n\nTITLE: Adding Order to User with EntityManager\nDESCRIPTION: Demonstrates a service method that adds an Order to a User's collection and persists the changes using the EntityManagerInterface. This method can be tested by mocking the EntityManagerInterface.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/advanced/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function addOrder(User $user, Order $order, \\Cycle\\ORM\\EntityManagerInterface $entityManager)\n{\n    $user->orders->add($order);\n    $entityManager->persist($user)->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Array Parameter Handling - PHP\nDESCRIPTION: Examples showing incorrect and correct ways to handle array parameters in queries using Parameter wrapper.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/query-builder/security.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users->where($id, 'IN', [1, 2, 3]); // compile exception\n$users->where($id, 'IN', new \\Cycle\\Database\\Injection\\Parameter([1, 2, 3])); // valid approach\n```\n\n----------------------------------------\n\nTITLE: Multiple Sorting Criteria with Array Syntax\nDESCRIPTION: Demonstrates using array syntax to specify multiple sorting criteria in a single orderBy call. The approach is equivalent to chaining multiple orderBy calls.\nSOURCE: https://github.com/cycle/docs/blob/2.x/docs/en/database/query-builders.md#2025-04-20_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$select\n    ->orderBy([\n        'test.name' => SelectQuery::SORT_DESC,\n        'test.id'   => SelectQuery::SORT_ASC\n    ]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `primary_test`.*,\n       `uu`.`name` as `user_name`\nFROM `primary_test`\n         INNER JOIN `primary_users` as `uu`\n                    ON `uu`.`id` = `primary_test`.`id` AND `uu`.`name` = 'Anton'\nORDER BY `primary_test`.`name` DESC, `primary_test`.`id` ASC\n```"
  }
]