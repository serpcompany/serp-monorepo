[
  {
    "owner": "terraform-aws-modules",
    "repo": "terraform-aws-vpc",
    "content": "TITLE: Creating AWS VPC with Terraform Module\nDESCRIPTION: Basic usage example of the AWS VPC Terraform module. It creates a VPC with public and private subnets across three availability zones, and enables NAT and VPN gateways.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"eu-west-1a\", \"eu-west-1b\", \"eu-west-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = true\n  enable_vpn_gateway = true\n\n  tags = {\n    Terraform = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPC using terraform-aws-modules/vpc Module with IPAM CIDR - HCL\nDESCRIPTION: This module block provisions a VPC using the terraform-aws-modules/vpc/aws Terraform module with a CIDR allocated from AWS IPAM. It references all local variables and data sources, including the list of availability zones, previewed CIDR, and derived private and public subnet CIDRs. Dependencies are the AWS provider, the referenced IPAM pool, and the terraform-aws-modules/vpc/aws public module. Required inputs include the VPC name, IPAM pool ID, availability zones, and subnet CIDRs. The module outputs various VPC attributes; configuration is parameterized and suitable for managed IP address allocation.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc_cidr_from_ipam\" {\n  source            = \"terraform-aws-modules/vpc/aws\"\n  name              = \"vpc-cidr-from-ipam\"\n  ipv4_ipam_pool_id = data.aws_vpc_ipam_pool.ipv4_example.id\n  azs               = local.azs\n  cidr              = data.aws_vpc_ipam_preview_next_cidr.previewed_cidr.cidr\n  private_subnets   = local.private_subnets\n  public_subnets    = local.public_subnets\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Input Variables for AWS VPC Module - Terraform - HCL\nDESCRIPTION: This code snippet defines input variables for a Terraform AWS VPC module. It specifies variable names, descriptions, types (such as list(string), map(string), object), default values, and whether each variable is required. These variables control options for subnets, DNS, DHCP, flow logs, NAT gateways, tagging, and more. Inputs are expected as HCL-compatible values, with some variables constrained by valid value sets, and some requiring a matching length with related subnet lists. The output serves as interface contracts for module consumers, ensuring customizable yet validated configuration across AWS VPC resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n| <a name=\\\"input_elasticache_subnet_ipv6_prefixes\\\"></a> [elasticache\\_subnet\\_ipv6\\_prefixes](#input\\_elasticache\\_subnet\\_ipv6\\_prefixes) | Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list | `list(string)` | `[]` | no |\n| <a name=\\\"input_elasticache_subnet_names\\\"></a> [elasticache\\_subnet\\_names](#input\\_elasticache\\_subnet\\_names) | Explicit values to use in the Name tag on elasticache subnets. If empty, Name tags are generated | `list(string)` | `[]` | no |\n| <a name=\\\"input_elasticache_subnet_private_dns_hostname_type_on_launch\\\"></a> [elasticache\\_subnet\\_private\\_dns\\_hostname\\_type\\_on\\_launch](#input\\_elasticache\\_subnet\\_private\\_dns\\_hostname\\_type\\_on\\_launch) | The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name` | `string` | `null` | no |\n| <a name=\\\"input_elasticache_subnet_suffix\\\"></a> [elasticache\\_subnet\\_suffix](#input\\_elasticache\\_subnet\\_suffix) | Suffix to append to elasticache subnets name | `string` | \\\"elasticache\\\" | no |\n| <a name=\\\"input_elasticache_subnet_tags\\\"></a> [elasticache\\_subnet\\_tags](#input\\_elasticache\\_subnet\\_tags) | Additional tags for the elasticache subnets | `map(string)` | `{}` | no |\n| <a name=\\\"input_elasticache_subnets\\\"></a> [elasticache\\_subnets](#input\\_elasticache\\_subnets) | A list of elasticache subnets inside the VPC | `list(string)` | `[]` | no |\n| <a name=\\\"input_enable_dhcp_options\\\"></a> [enable\\_dhcp\\_options](#input\\_enable\\_dhcp\\_options) | Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type | `bool` | `false` | no |\n| <a name=\\\"input_enable_dns_hostnames\\\"></a> [enable\\_dns\\_hostnames](#input\\_enable\\_dns\\_hostnames) | Should be true to enable DNS hostnames in the VPC | `bool` | `true` | no |\n| <a name=\\\"input_enable_dns_support\\\"></a> [enable\\_dns\\_support](#input\\_enable\\_dns\\_support) | Should be true to enable DNS support in the VPC | `bool` | `true` | no |\n| <a name=\\\"input_enable_flow_log\\\"></a> [enable\\_flow\\_log](#input\\_enable\\_flow\\_log) | Whether or not to enable VPC Flow Logs | `bool` | `false` | no |\n| <a name=\\\"input_enable_ipv6\\\"></a> [enable\\_ipv6](#input\\_enable\\_ipv6) | Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block | `bool` | `false` | no |\n| <a name=\\\"input_enable_nat_gateway\\\"></a> [enable\\_nat\\_gateway](#input\\_enable\\_nat\\_gateway) | Should be true if you want to provision NAT Gateways for each of your private networks | `bool` | `false` | no |\n| <a name=\\\"input_enable_network_address_usage_metrics\\\"></a> [enable\\_network\\_address\\_usage\\_metrics](#input\\_enable\\_network\\_address\\_usage\\_metrics) | Determines whether network address usage metrics are enabled for the VPC | `bool` | `null` | no |\n| <a name=\\\"input_enable_public_redshift\\\"></a> [enable\\_public\\_redshift](#input\\_enable\\_public\\_redshift) | Controls if redshift should have public routing table | `bool` | `false` | no |\n| <a name=\\\"input_enable_vpn_gateway\\\"></a> [enable\\_vpn\\_gateway](#input\\_enable\\_vpn\\_gateway) | Should be true if you want to create a new VPN Gateway resource and attach it to the VPC | `bool` | `false` | no |\n| <a name=\\\"input_external_nat_ip_ids\\\"></a> [external\\_nat\\_ip\\_ids](#input\\_external\\_nat\\_ip\\_ids) | List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse\\_nat\\_ips) | `list(string)` | `[]` | no |\n| <a name=\\\"input_external_nat_ips\\\"></a> [external\\_nat\\_ips](#input\\_external\\_nat\\_ips) | List of EIPs to be used for `nat_public_ips` output (used in combination with reuse\\_nat\\_ips and external\\_nat\\_ip\\_ids) | `list(string)` | `[]` | no |\n| <a name=\\\"input_flow_log_cloudwatch_iam_role_arn\\\"></a> [flow\\_log\\_cloudwatch\\_iam\\_role\\_arn](#input\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn) | The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow\\_log\\_destination\\_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided | `string` | `\"\"` | no |\n| <a name=\\\"input_flow_log_cloudwatch_iam_role_conditions\\\"></a> [flow\\_log\\_cloudwatch\\_iam\\_role\\_conditions](#input\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_conditions) | Additional conditions of the CloudWatch role assumption policy | <pre>list(object({<br/>    test     = string<br/>    variable = string<br/>    values   = list(string)<br/>  }))</pre> | `[]` | no |\n| <a name=\\\"input_flow_log_cloudwatch_log_group_class\\\"></a> [flow\\_log\\_cloudwatch\\_log\\_group\\_class](#input\\_flow\\_log\\_cloudwatch\\_log\\_group\\_class) | Specified the log class of the log group. Possible values are: STANDARD or INFREQUENT\\_ACCESS | `string` | `null` | no |\n| <a name=\\\"input_flow_log_cloudwatch_log_group_kms_key_id\\\"></a> [flow\\_log\\_cloudwatch\\_log\\_group\\_kms\\_key\\_id](#input\\_flow\\_log\\_cloudwatch\\_log\\_group\\_kms\\_key\\_id) | The ARN of the KMS Key to use when encrypting log data for VPC flow logs | `string` | `null` | no |\n| <a name=\\\"input_flow_log_cloudwatch_log_group_name_prefix\\\"></a> [flow\\_log\\_cloudwatch\\_log\\_group\\_name\\_prefix](#input\\_flow\\_log\\_cloudwatch\\_log\\_group\\_name\\_prefix) | Specifies the name prefix of CloudWatch Log Group for VPC flow logs | `string` | `\"/aws/vpc-flow-log/\"` | no |\n| <a name=\\\"input_flow_log_cloudwatch_log_group_name_suffix\\\"></a> [flow\\_log\\_cloudwatch\\_log\\_group\\_name\\_suffix](#input\\_flow\\_log\\_cloudwatch\\_log\\_group\\_name\\_suffix) | Specifies the name suffix of CloudWatch Log Group for VPC flow logs | `string` | `\"\"` | no |\n| <a name=\\\"input_flow_log_cloudwatch_log_group_retention_in_days\\\"></a> [flow\\_log\\_cloudwatch\\_log\\_group\\_retention\\_in\\_days](#input\\_flow\\_log\\_cloudwatch\\_log\\_group\\_retention\\_in\\_days) | Specifies the number of days you want to retain log events in the specified log group for VPC flow logs | `number` | `null` | no |\n| <a name=\\\"input_flow_log_cloudwatch_log_group_skip_destroy\\\"></a> [flow\\_log\\_cloudwatch\\_log\\_group\\_skip\\_destroy](#input\\_flow\\_log\\_cloudwatch\\_log\\_group\\_skip\\_destroy) | Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the Terraform state | `bool` | `false` | no |\n| <a name=\\\"input_flow_log_deliver_cross_account_role\\\"></a> [flow\\_log\\_deliver\\_cross\\_account\\_role](#input\\_flow\\_log\\_deliver\\_cross\\_account\\_role) | (Optional) ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts. | `string` | `null` | no |\n| <a name=\\\"input_flow_log_destination_arn\\\"></a> [flow\\_log\\_destination\\_arn](#input\\_flow\\_log\\_destination\\_arn) | The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create\\_flow\\_log\\_cloudwatch\\_log\\_group is set to false this argument must be provided | `string` | `\"\"` | no |\n| <a name=\\\"input_flow_log_destination_type\\\"></a> [flow\\_log\\_destination\\_type](#input\\_flow\\_log\\_destination\\_type) | Type of flow log destination. Can be s3, kinesis-data-firehose or cloud-watch-logs | `string` | `\"cloud-watch-logs\"` | no |\n| <a name=\\\"input_flow_log_file_format\\\"></a> [flow\\_log\\_file\\_format](#input\\_flow\\_log\\_file\\_format) | (Optional) The format for the flow log. Valid values: `plain-text`, `parquet` | `string` | `null` | no |\n| <a name=\\\"input_flow_log_hive_compatible_partitions\\\"></a> [flow\\_log\\_hive\\_compatible\\_partitions](#input\\_flow\\_log\\_hive\\_compatible\\_partitions) | (Optional) Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3 | `bool` | `false` | no |\n| <a name=\\\"input_flow_log_log_format\\\"></a> [flow\\_log\\_log\\_format](#input\\_flow\\_log\\_log\\_format) | The fields to include in the flow log record, in the order in which they should appear | `string` | `null` | no |\n| <a name=\\\"input_flow_log_max_aggregation_interval\\\"></a> [flow\\_log\\_max\\_aggregation\\_interval](#input\\_flow\\_log\\_max\\_aggregation\\_interval) | The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: `60` seconds or `600` seconds | `number` | `600` | no |\n| <a name=\\\"input_flow_log_per_hour_partition\\\"></a> [flow\\_log\\_per\\_hour\\_partition](#input\\_flow\\_log\\_per\\_hour\\_partition) | (Optional) Indicates whether to partition the flow log per hour. This reduces the cost and response time for queries | `bool` | `false` | no |\n| <a name=\\\"input_flow_log_traffic_type\\\"></a> [flow\\_log\\_traffic\\_type](#input\\_flow\\_log\\_traffic\\_type) | The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL | `string` | `\"ALL\"` | no |\n| <a name=\\\"input_igw_tags\\\"></a> [igw\\_tags](#input\\_igw\\_tags) | Additional tags for the internet gateway | `map(string)` | `{}` | no |\n| <a name=\\\"input_instance_tenancy\\\"></a> [instance\\_tenancy](#input\\_instance\\_tenancy) | A tenancy option for instances launched into the VPC | `string` | `\"default\"` | no |\n| <a name=\\\"input_intra_acl_tags\\\"></a> [intra\\_acl\\_tags](#input\\_intra\\_acl\\_tags) | Additional tags for the intra subnets network ACL | `map(string)` | `{}` | no |\n| <a name=\\\"input_intra_dedicated_network_acl\\\"></a> [intra\\_dedicated\\_network\\_acl](#input\\_intra\\_dedicated\\_network\\_acl) | Whether to use dedicated network ACL (not default) and custom rules for intra subnets | `bool` | `false` | no |\n```\n\n----------------------------------------\n\nTITLE: Calculating Subnet CIDRs and Availability Zones with Terraform Locals - HCL\nDESCRIPTION: This block defines local variables to calculate subnet CIDRs from the previewed IPAM allocation using Terraform's cidrsubnets and formatlist functions. It partitions the main previewed CIDR into subnets for private and public network segments and prepares a list of availability zones based on the current region. Dependencies include the data source outputs from IPAM preview and current region. Inputs are dynamically referenced from other resources, with outputs used as arguments for module configuration. Only internal logic is affected; no AWS resource is created.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  partition       = cidrsubnets(data.aws_vpc_ipam_preview_next_cidr.previewed_cidr.cidr, 2, 2)\n  private_subnets = cidrsubnets(local.partition[0], 2, 2)\n  public_subnets  = cidrsubnets(local.partition[1], 2, 2)\n  azs             = formatlist(\"${data.aws_region.current.name}%s\", [\"a\", \"b\"])\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform VPC Infrastructure - Bash\nDESCRIPTION: This snippet provides the step-by-step bash commands required to initialize, plan, and apply a Terraform configuration for deploying a complete AWS VPC. It assumes that Terraform is installed and that the working directory contains the appropriate configuration files. Key commands include 'terraform init' for initializing the working directory, 'terraform plan' for reviewing resources to be created or modified, and 'terraform apply' for provisioning the defined infrastructure. Users should be aware that running this configuration may incur AWS costs, and 'terraform destroy' can be used for teardown.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/complete/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\\nterraform plan\\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current AWS Region Data with Terraform - HCL\nDESCRIPTION: This snippet uses the aws_region data source to retrieve information about the currently configured AWS region for the provider. This resource requires that the AWS provider is properly initialized. Its output is typically used for constructing region-based resource names, or ensuring resources are provisioned in the proper location. It returns the region name and related metadata, taking no input parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_region\" \"current\" {}\n\n```\n\n----------------------------------------\n\nTITLE: Allocating External NAT Gateway IPs for AWS VPC\nDESCRIPTION: Example of allocating external Elastic IPs for NAT Gateways in an AWS VPC. This allows for reusing the same IPs even after VPC destruction and recreation.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_eip\" \"nat\" {\n  count = 3\n\n  vpc = true\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  # The rest of arguments are omitted for brevity\n\n  enable_nat_gateway  = true\n  single_nat_gateway  = false\n  reuse_nat_ips       = true                    # <= Skip creation of EIPs for the NAT Gateways\n  external_nat_ip_ids = \"${aws_eip.nat.*.id}\"   # <= IPs specified here as input to the module\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Block Public Access Options - HCL\nDESCRIPTION: This HCL snippet defines a map for VPC Block Public Access options within the Terraform AWS VPC module configuration. The key parameter `internet_gateway_block_mode` controls the blocking behavior for public access, with allowed values being 'block-bidirectional', 'block-ingress', and 'off'. No external dependencies are required beyond the standard module and provider versions; this block must be integrated into the root module for effect.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/block-public-access/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvpc_block_public_access_options = {\n    internet_gateway_block_mode = \"block-bidirectional\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intra Subnet Inbound/Outbound ACL Rules - Terraform - HCL\nDESCRIPTION: This code snippet illustrates the default structure for defining inbound and outbound network ACL rules for intra or outpost subnets in the VPC using HCL syntax. Each rule is provided as a map with keys like \\\"cidr_block\\\", \\\"from_port\\\", \\\"to_port\\\", \\\"protocol\\\", \\\"rule_action\\\", and \\\"rule_number\\\". Inputs are typically passed as a list of maps to the Terraform module variable and default to one rule allowing all traffic (as specified). Expected input is a list of maps, each representing a single ACL rule; outputs are applied by the Terraform resource configuration to control subnet ACLs. This format is flexible but limited by AWS ACL constraints and the Terraform provider.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n[\\n  {\\n    \\\"cidr_block\\\": \\\"0.0.0.0/0\\\",\\n    \\\"from_port\\\": 0,\\n    \\\"protocol\\\": \\\"-1\\\",\\n    \\\"rule_action\\\": \\\"allow\\\",\\n    \\\"rule_number\\\": 100,\\n    \\\"to_port\\\": 0\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Defining VPC-level Block Public Access Exclusions - HCL\nDESCRIPTION: This snippet configures exclusions from VPC Block Public Access enforcement at the VPC level using the `vpc_block_public_access_exclusions` map. The parameter `exclude_vpc` must be true to apply exclusion at this level, while `internet_gateway_exclusion_mode` determines the direction of allowed traffic. This configuration requires integration into the Terraform module and operates alongside other VPC block options.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/block-public-access/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  vpc_block_public_access_exclusions = {\n    exclude_vpc = {\n        exclude_vpc                     = true\n        internet_gateway_exclusion_mode = \"allow-bidirectional\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Next CIDR from IPAM Pool with Terraform - HCL\nDESCRIPTION: This snippet uses the aws_vpc_ipam_preview_next_cidr data source to preview the next available CIDR range from a specified IPAM pool and netmask length. It is dependent on the data.aws_vpc_ipam_pool.ipv4_example.id variable, meaning the IPAM pool must already exist and be referenced in the configuration. The output is a provisional CIDR block that can be used for further subnetting or VPC creation. No additional input is needed besides the pool ID and desired netmask length, and it does not modify resources in AWS.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_vpc_ipam_preview_next_cidr\" \"previewed_cidr\" {\n  ipam_pool_id   = data.aws_vpc_ipam_pool.ipv4_example.id\n  netmask_length = 24\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Subnet-level Block Public Access Exclusions - HCL\nDESCRIPTION: This HCL example demonstrates subnet-level exclusions from VPC Block Public Access policies. Each map entry (e.g., 'exclude_subnet_private1') specifies the subnet to exclude via 'exclude_subnet', its type, index in the subnet list, and exclusion mode. This requires subnet indices to match those in the corresponding subnet lists and must be coordinated so that only relevant subnets are exempted.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/block-public-access/README.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n  vpc_block_public_access_exclusions = {\n    exclude_subnet_private1 = {\n        exclude_subnet                  = true\n        subnet_type                     = \"private\"\n        subnet_index                    = 1\n        internet_gateway_exclusion_mode = \"allow-egress\"\n    }\n    exclude_subnet_private2 = {\n        exclude_subnet                  = true\n        subnet_type                     = \"private\"\n        subnet_index                    = 2\n        internet_gateway_exclusion_mode = \"allow-egress\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated VPC Endpoint Route Table Associations with terraform state rm - Shell\nDESCRIPTION: This shell snippet shows how to remove obsolete route table association resources from Terraform's state using 'terraform state rm'. This is required after upgrading, because these associations are now managed automatically via the VPC endpoint sub-module. Execute a 'state rm' for each route table association resource (for different subnets/endpoints) you need to remove from the state. Ensure resource identifiers are accurate to prevent accidental removal.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/UPGRADE-3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform state rm 'module.vpc.aws_vpc_endpoint_route_table_association.intra_dynamodb[0]'\nterraform state rm 'module.vpc.aws_vpc_endpoint_route_table_association.private_dynamodb[0]'\nterraform state rm 'module.vpc.aws_vpc_endpoint_route_table_association.public_dynamodb[0]'\n...\n```\n\n----------------------------------------\n\nTITLE: Default Network ACL Rules Configuration for Database Subnets in AWS VPC Module\nDESCRIPTION: Default inbound network ACL rules configuration for database subnets that allows all traffic from any source. This configuration is used when database_dedicated_network_acl is set to true.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\n[{\n  \"cidr_block\": \"0.0.0.0/0\",\n  \"from_port\": 0,\n  \"protocol\": \"-1\",\n  \"rule_action\": \"allow\",\n  \"rule_number\": 100,\n  \"to_port\": 0\n}]\n```\n\n----------------------------------------\n\nTITLE: Default Network ACL Rules Configuration for Database Outbound Traffic in AWS VPC Module\nDESCRIPTION: Default outbound network ACL rules configuration for database subnets that allows all outbound traffic to any destination. This configuration is used when database_dedicated_network_acl is set to true.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\n[{\n  \"cidr_block\": \"0.0.0.0/0\",\n  \"from_port\": 0,\n  \"protocol\": \"-1\",\n  \"rule_action\": \"allow\",\n  \"rule_number\": 100,\n  \"to_port\": 0\n}]\n```\n\n----------------------------------------\n\nTITLE: Default Network ACL Egress Rules Configuration in Terraform\nDESCRIPTION: Default network ACL egress rules configuration that allows all outbound IPv4 and IPv6 traffic through ports 0-0 with rule numbers 100 and 101\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  {\n    \"action\": \"allow\",\n    \"cidr_block\": \"0.0.0.0/0\",\n    \"from_port\": 0,\n    \"protocol\": \"-1\",\n    \"rule_no\": 100,\n    \"to_port\": 0\n  },\n  {\n    \"action\": \"allow\",\n    \"from_port\": 0,\n    \"ipv6_cidr_block\": \"::/0\",\n    \"protocol\": \"-1\",\n    \"rule_no\": 101,\n    \"to_port\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Default Network ACL Ingress Rules Configuration in Terraform\nDESCRIPTION: Default network ACL ingress rules configuration that allows all inbound IPv4 and IPv6 traffic through ports 0-0 with rule numbers 100 and 101\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  {\n    \"action\": \"allow\",\n    \"cidr_block\": \"0.0.0.0/0\",\n    \"from_port\": 0,\n    \"protocol\": \"-1\",\n    \"rule_no\": 100,\n    \"to_port\": 0\n  },\n  {\n    \"action\": \"allow\",\n    \"from_port\": 0,\n    \"ipv6_cidr_block\": \"::/0\",\n    \"protocol\": \"-1\",\n    \"rule_no\": 101,\n    \"to_port\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Elasticache Inbound ACL Rules Configuration in Terraform\nDESCRIPTION: Elasticache subnet inbound network ACL rules allowing all inbound traffic from any IP address through all ports\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  {\n    \"cidr_block\": \"0.0.0.0/0\",\n    \"from_port\": 0,\n    \"protocol\": \"-1\",\n    \"rule_action\": \"allow\",\n    \"rule_number\": 100,\n    \"to_port\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Elasticache Outbound ACL Rules Configuration in Terraform\nDESCRIPTION: Elasticache subnet outbound network ACL rules allowing all outbound traffic to any IP address through all ports\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  {\n    \"cidr_block\": \"0.0.0.0/0\",\n    \"from_port\": 0,\n    \"protocol\": \"-1\",\n    \"rule_action\": \"allow\",\n    \"rule_number\": 100,\n    \"to_port\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Redshift Subnet Inbound ACL Rules - Terraform - Terraform\nDESCRIPTION: Specifies default inbound network ACL rules for Redshift subnets within the VPC. The example demonstrates an ACL rule permitting all inbound traffic from any source. Dependencies include a VPC and Redshift subnet setup. Key parameters: 'cidr_block' defines the source range, 'from_port'/'to_port' and 'protocol' control allowed traffic, 'rule_action' is the action (e.g., allow), and 'rule_number' sets the rule's order. Input is a list of map objects, output is a value suitable for module input.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_15\n\nLANGUAGE: terraform\nCODE:\n```\n[\n  {\n    \"cidr_block\": \"0.0.0.0/0\",\n    \"from_port\": 0,\n    \"protocol\": \"-1\",\n    \"rule_action\": \"allow\",\n    \"rule_number\": 100,\n    \"to_port\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Redshift Subnet Outbound ACL Rules - Terraform - Terraform\nDESCRIPTION: Specifies default outbound network ACL rules for Redshift subnets within the VPC. The provided example allows all outbound traffic to any destination. The dependency is an existing VPC with Redshift subnets. Key parameters include 'cidr_block' for destination, port and protocol fields, 'rule_action' for permit/deny, and 'rule_number' for evaluation order. Takes a list of map objects as input for module consumption.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_16\n\nLANGUAGE: terraform\nCODE:\n```\n[\n  {\n    \"cidr_block\": \"0.0.0.0/0\",\n    \"from_port\": 0,\n    \"protocol\": \"-1\",\n    \"rule_action\": \"allow\",\n    \"rule_number\": 100,\n    \"to_port\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configurations with IPAM Pool - Bash\nDESCRIPTION: This Bash snippet demonstrates the step-by-step CLI process for initializing the Terraform configuration, generating a plan, applying resources in sequence for VPC and IPAM pool provisioning, and ensuring that the CIDR preview occurs before final resource creation. Prerequisites include a pre-existing IPAM pool and a fully configured Terraform AWS provider. Key commands are 'terraform init', 'terraform plan', and targeted/apply commands with proper order to respect AWS dependencies. Inputs involve no variable parameters in these commands; the output is the provisioned AWS infrastructure.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipam/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\\n$ terraform plan\\n$ terraform apply -target=aws_vpc_ipam_preview_next_cidr.this # CIDR pool must exist before assigning CIDR from pool\\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Destroying VPC and Associated Resources Managed by IPAM Pool - Bash\nDESCRIPTION: This Bash snippet details the correct sequence for tearing down infrastructure created with Terraform, specifically targeting the VPC module before a general destroy to resolve resource dependencies between VPCs and IPAM pool allocations. The process ensures that resources which require manual destruction (due to AWS/IPAM constraints) are removed in the right order. There are no external script dependencies beyond Terraform; key outputs are the teardown of costly AWS network resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipam/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy -target=module.vpc # destroy VPC that uses the IPAM pool CIDR first\\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Documenting Terraform VPC Module Outputs | Markdown\nDESCRIPTION: This Markdown snippet enumerates and explains each output variable produced by the terraform-aws-vpc module. It requires proper Terraform module initialization and outputs configuration in the underlying .tf files. Each table row captures the output variable's purpose (e.g., IDs, ARNs, CIDR blocks), and may include AWS resource context (e.g., subnets, route tables, ACLs). Inputs are module execution results, and outputs are human-readable descriptions mapped to each Terraform output. The file does not contain executable code but serves as structured documentation; modifications should keep variable names and explanations synchronized with the module.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipam/README.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| <a name=\\\"output_private_network_acl_arn\\\"></a> [private\\_network\\_acl\\_arn](#output\\_private\\_network\\_acl\\_arn) | ARN of the private network ACL |\n| <a name=\\\"output_private_network_acl_id\\\"></a> [private\\_network\\_acl\\_id](#output\\_private\\_network\\_acl\\_id) | ID of the private network ACL |\n| <a name=\\\"output_private_route_table_association_ids\\\"></a> [private\\_route\\_table\\_association\\_ids](#output\\_private\\_route\\_table\\_association\\_ids) | List of IDs of the private route table association |\n| <a name=\\\"output_private_route_table_ids\\\"></a> [private\\_route\\_table\\_ids](#output\\_private\\_route\\_table\\_ids) | List of IDs of private route tables |\n| <a name=\\\"output_private_subnet_arns\\\"></a> [private\\_subnet\\_arns](#output\\_private\\_subnet\\_arns) | List of ARNs of private subnets |\n| <a name=\\\"output_private_subnets\\\"></a> [private\\_subnets](#output\\_private\\_subnets) | List of IDs of private subnets |\n| <a name=\\\"output_private_subnets_cidr_blocks\\\"></a> [private\\_subnets\\_cidr\\_blocks](#output\\_private\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of private subnets |\n| <a name=\\\"output_private_subnets_ipv6_cidr_blocks\\\"></a> [private\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_private\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of private subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_public_internet_gateway_ipv6_route_id\\\"></a> [public\\_internet\\_gateway\\_ipv6\\_route\\_id](#output\\_public\\_internet\\_gateway\\_ipv6\\_route\\_id) | ID of the IPv6 internet gateway route |\n| <a name=\\\"output_public_internet_gateway_route_id\\\"></a> [public\\_internet\\_gateway\\_route\\_id](#output\\_public\\_internet\\_gateway\\_route\\_id) | ID of the internet gateway route |\n| <a name=\\\"output_public_network_acl_arn\\\"></a> [public\\_network\\_acl\\_arn](#output\\_public\\_network\\_acl\\_arn) | ARN of the public network ACL |\n| <a name=\\\"output_public_network_acl_id\\\"></a> [public\\_network\\_acl\\_id](#output\\_public\\_network\\_acl\\_id) | ID of the public network ACL |\n| <a name=\\\"output_public_route_table_association_ids\\\"></a> [public\\_route\\_table\\_association\\_ids](#output\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public route table association |\n| <a name=\\\"output_public_route_table_ids\\\"></a> [public\\_route\\_table\\_ids](#output\\_public\\_route\\_table\\_ids) | List of IDs of public route tables |\n| <a name=\\\"output_public_subnet_arns\\\"></a> [public\\_subnet\\_arns](#output\\_public\\_subnet\\_arns) | List of ARNs of public subnets |\n| <a name=\\\"output_public_subnets\\\"></a> [public\\_subnets](#output\\_public\\_subnets) | List of IDs of public subnets |\n| <a name=\\\"output_public_subnets_cidr_blocks\\\"></a> [public\\_subnets\\_cidr\\_blocks](#output\\_public\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of public subnets |\n| <a name=\\\"output_public_subnets_ipv6_cidr_blocks\\\"></a> [public\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_public\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of public subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_redshift_network_acl_arn\\\"></a> [redshift\\_network\\_acl\\_arn](#output\\_redshift\\_network\\_acl\\_arn) | ARN of the redshift network ACL |\n| <a name=\\\"output_redshift_network_acl_id\\\"></a> [redshift\\_network\\_acl\\_id](#output\\_redshift\\_network\\_acl\\_id) | ID of the redshift network ACL |\n| <a name=\\\"output_redshift_public_route_table_association_ids\\\"></a> [redshift\\_public\\_route\\_table\\_association\\_ids](#output\\_redshift\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public redshift route table association |\n| <a name=\\\"output_redshift_route_table_association_ids\\\"></a> [redshift\\_route\\_table\\_association\\_ids](#output\\_redshift\\_route\\_table\\_association\\_ids) | List of IDs of the redshift route table association |\n| <a name=\\\"output_redshift_route_table_ids\\\"></a> [redshift\\_route\\_table\\_ids](#output\\_redshift\\_route\\_table\\_ids) | List of IDs of redshift route tables |\n| <a name=\\\"output_redshift_subnet_arns\\\"></a> [redshift\\_subnet\\_arns](#output\\_redshift\\_subnet\\_arns) | List of ARNs of redshift subnets |\n| <a name=\\\"output_redshift_subnet_group\\\"></a> [redshift\\_subnet\\_group](#output\\_redshift\\_subnet\\_group) | ID of redshift subnet group |\n| <a name=\\\"output_redshift_subnets\\\"></a> [redshift\\_subnets](#output\\_redshift\\_subnets) | List of IDs of redshift subnets |\n| <a name=\\\"output_redshift_subnets_cidr_blocks\\\"></a> [redshift\\_subnets\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of redshift subnets |\n| <a name=\\\"output_redshift_subnets_ipv6_cidr_blocks\\\"></a> [redshift\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of redshift subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_this_customer_gateway\\\"></a> [this\\_customer\\_gateway](#output\\_this\\_customer\\_gateway) | Map of Customer Gateway attributes |\n| <a name=\\\"output_vgw_arn\\\"></a> [vgw\\_arn](#output\\_vgw\\_arn) | The ARN of the VPN Gateway |\n| <a name=\\\"output_vgw_id\\\"></a> [vgw\\_id](#output\\_vgw\\_id) | The ID of the VPN Gateway |\n| <a name=\\\"output_vpc_arn\\\"></a> [vpc\\_arn](#output\\_vpc\\_arn) | The ARN of the VPC |\n| <a name=\\\"output_vpc_cidr_block\\\"></a> [vpc\\_cidr\\_block](#output\\_vpc\\_cidr\\_block) | The CIDR block of the VPC |\n| <a name=\\\"output_vpc_enable_dns_hostnames\\\"></a> [vpc\\_enable\\_dns\\_hostnames](#output\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the VPC has DNS hostname support |\n| <a name=\\\"output_vpc_enable_dns_support\\\"></a> [vpc\\_enable\\_dns\\_support](#output\\_vpc\\_enable\\_dns\\_support) | Whether or not the VPC has DNS support |\n| <a name=\\\"output_vpc_flow_log_cloudwatch_iam_role_arn\\\"></a> [vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn](#output\\_vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn) | The ARN of the IAM role used when pushing logs to Cloudwatch log group |\n| <a name=\\\"output_vpc_flow_log_destination_arn\\\"></a> [vpc\\_flow\\_log\\_destination\\_arn](#output\\_vpc\\_flow\\_log\\_destination\\_arn) | The ARN of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_destination_type\\\"></a> [vpc\\_flow\\_log\\_destination\\_type](#output\\_vpc\\_flow\\_log\\_destination\\_type) | The type of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_id\\\"></a> [vpc\\_flow\\_log\\_id](#output\\_vpc\\_flow\\_log\\_id) | The ID of the Flow Log resource |\n| <a name=\\\"output_vpc_id\\\"></a> [vpc\\_id](#output\\_vpc\\_id) | The ID of the VPC |\n| <a name=\\\"output_vpc_instance_tenancy\\\"></a> [vpc\\_instance\\_tenancy](#output\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within VPC |\n| <a name=\\\"output_vpc_ipv6_association_id\\\"></a> [vpc\\_ipv6\\_association\\_id](#output\\_vpc\\_ipv6\\_association\\_id) | The association ID for the IPv6 CIDR block |\n| <a name=\\\"output_vpc_ipv6_cidr_block\\\"></a> [vpc\\_ipv6\\_cidr\\_block](#output\\_vpc\\_ipv6\\_cidr\\_block) | The IPv6 CIDR block |\n| <a name=\\\"output_vpc_main_route_table_id\\\"></a> [vpc\\_main\\_route\\_table\\_id](#output\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with this VPC |\n| <a name=\\\"output_vpc_owner_id\\\"></a> [vpc\\_owner\\_id](#output\\_vpc\\_owner\\_id) | The ID of the AWS account that owns the VPC |\n| <a name=\\\"output_vpc_secondary_cidr_blocks\\\"></a> [vpc\\_secondary\\_cidr\\_blocks](#output\\_vpc\\_secondary\\_cidr\\_blocks) | List of secondary CIDR blocks of the VPC |\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform CLI for VPC Deployment - Bash\nDESCRIPTION: This Bash snippet summarizes the commands required to initialize, plan, and apply a Terraform run for provisioning a VPC with IPv6 enabled. The snippet presumes the existence of valid Terraform configuration files in the project directory, AWS credentials properly configured, and all prerequisites installed. It demonstrates the basic workflow for deploying and managing cloud infrastructure using Terraform CLI, accepting no parameters directly but relying on configuration files present. The standard outputs include initialization logs, plan diff summaries, and apply confirmations, with potential for costs incurred if infrastructure is actually deployed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipv6-dualstack/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: VPC Module Output Variables Table\nDESCRIPTION: Markdown table documenting all output variables available from the AWS VPC Terraform module. Each row contains the output variable name and its corresponding description.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipv6-dualstack/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description |\n|------|-------------|\n| <a name=\"output_cgw_arns\"></a> [cgw_arns](#output_cgw_arns) | List of ARNs of Customer Gateway |\n| <a name=\"output_cgw_ids\"></a> [cgw_ids](#output_cgw_ids) | List of IDs of Customer Gateway |\n| <a name=\"output_database_internet_gateway_route_id\"></a> [database_internet_gateway_route_id](#output_database_internet_gateway_route_id) | ID of the database internet gateway route |\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Workflow for AWS VPC Module - Bash\nDESCRIPTION: This snippet provides the essential Bash commands to initialize, plan, and apply a Terraform configuration for deploying an IPv6-only AWS VPC. It assumes that Terraform is installed and configured with the appropriate AWS credentials. Users can run these commands sequentially in their shell to create the infrastructure, and are reminded to destroy resources using `terraform destroy` when they are no longer needed to avoid incurring costs.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipv6-only/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Documenting VPC Output Variables - Markdown\nDESCRIPTION: This Markdown snippet consists of a table listing output variables from the terraform-aws-vpc Terraform module, providing variable names and human-readable descriptions for each. It does not require software dependencies and is intended for documentation purposes, not programmatic use. The table columns detail the variable's key or reference, often linking to further module documentation, and a concise explanation, helping users identify available outputs and their meanings; no parameters or code execution is involved.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/ipv6-only/README.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| <a name=\\\"output_private_network_acl_arn\\\"></a> [private\\_network\\_acl\\_arn](#output\\_private\\_network\\_acl\\_arn) | ARN of the private network ACL |\n| <a name=\\\"output_private_network_acl_id\\\"></a> [private\\_network\\_acl\\_id](#output\\_private\\_network\\_acl\\_id) | ID of the private network ACL |\n| <a name=\\\"output_private_route_table_association_ids\\\"></a> [private\\_route\\_table\\_association\\_ids](#output\\_private\\_route\\_table\\_association\\_ids) | List of IDs of the private route table association |\n| <a name=\\\"output_private_route_table_ids\\\"></a> [private\\_route\\_table\\_ids](#output\\_private\\_route\\_table\\_ids) | List of IDs of private route tables |\n| <a name=\\\"output_private_subnet_arns\\\"></a> [private\\_subnet\\_arns](#output\\_private\\_subnet\\_arns) | List of ARNs of private subnets |\n| <a name=\\\"output_private_subnets\\\"></a> [private\\_subnets](#output\\_private\\_subnets) | List of IDs of private subnets |\n| <a name=\\\"output_private_subnets_cidr_blocks\\\"></a> [private\\_subnets\\_cidr\\_blocks](#output\\_private\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of private subnets |\n| <a name=\\\"output_private_subnets_ipv6_cidr_blocks\\\"></a> [private\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_private\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of private subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_public_internet_gateway_ipv6_route_id\\\"></a> [public\\_internet\\_gateway\\_ipv6\\_route\\_id](#output\\_public\\_internet\\_gateway\\_ipv6\\_route\\_id) | ID of the IPv6 internet gateway route |\n| <a name=\\\"output_public_internet_gateway_route_id\\\"></a> [public\\_internet\\_gateway\\_route\\_id](#output\\_public\\_internet\\_gateway\\_route\\_id) | ID of the internet gateway route |\n| <a name=\\\"output_public_network_acl_arn\\\"></a> [public\\_network\\_acl\\_arn](#output\\_public\\_network\\_acl\\_arn) | ARN of the public network ACL |\n| <a name=\\\"output_public_network_acl_id\\\"></a> [public\\_network\\_acl\\_id](#output\\_public\\_network\\_acl\\_id) | ID of the public network ACL |\n| <a name=\\\"output_public_route_table_association_ids\\\"></a> [public\\_route\\_table\\_association\\_ids](#output\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public route table association |\n| <a name=\\\"output_public_route_table_ids\\\"></a> [public\\_route\\_table\\_ids](#output\\_public\\_route\\_table\\_ids) | List of IDs of public route tables |\n| <a name=\\\"output_public_subnet_arns\\\"></a> [public\\_subnet\\_arns](#output\\_public\\_subnet\\_arns) | List of ARNs of public subnets |\n| <a name=\\\"output_public_subnets\\\"></a> [public\\_subnets](#output\\_public\\_subnets) | List of IDs of public subnets |\n| <a name=\\\"output_public_subnets_cidr_blocks\\\"></a> [public\\_subnets\\_cidr\\_blocks](#output\\_public\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of public subnets |\n| <a name=\\\"output_public_subnets_ipv6_cidr_blocks\\\"></a> [public\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_public\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of public subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_redshift_network_acl_arn\\\"></a> [redshift\\_network\\_acl\\_arn](#output\\_redshift\\_network\\_acl\\_arn) | ARN of the redshift network ACL |\n| <a name=\\\"output_redshift_network_acl_id\\\"></a> [redshift\\_network\\_acl\\_id](#output\\_redshift\\_network\\_acl\\_id) | ID of the redshift network ACL |\n| <a name=\\\"output_redshift_public_route_table_association_ids\\\"></a> [redshift\\_public\\_route\\_table\\_association\\_ids](#output\\_redshift\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public redshift route table association |\n| <a name=\\\"output_redshift_route_table_association_ids\\\"></a> [redshift\\_route\\_table\\_association\\_ids](#output\\_redshift\\_route\\_table\\_association\\_ids) | List of IDs of the redshift route table association |\n| <a name=\\\"output_redshift_route_table_ids\\\"></a> [redshift\\_route\\_table\\_ids](#output\\_redshift\\_route\\_table\\_ids) | List of IDs of redshift route tables |\n| <a name=\\\"output_redshift_subnet_arns\\\"></a> [redshift\\_subnet\\_arns](#output\\_redshift\\_subnet\\_arns) | List of ARNs of redshift subnets |\n| <a name=\\\"output_redshift_subnet_group\\\"></a> [redshift\\_subnet\\_group](#output\\_redshift\\_subnet\\_group) | ID of redshift subnet group |\n| <a name=\\\"output_redshift_subnets\\\"></a> [redshift\\_subnets](#output\\_redshift\\_subnets) | List of IDs of redshift subnets |\n| <a name=\\\"output_redshift_subnets_cidr_blocks\\\"></a> [redshift\\_subnets\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of redshift subnets |\n| <a name=\\\"output_redshift_subnets_ipv6_cidr_blocks\\\"></a> [redshift\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of redshift subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_this_customer_gateway\\\"></a> [this\\_customer\\_gateway](#output\\_this\\_customer\\_gateway) | Map of Customer Gateway attributes |\n| <a name=\\\"output_vgw_arn\\\"></a> [vgw\\_arn](#output\\_vgw\\_arn) | The ARN of the VPN Gateway |\n| <a name=\\\"output_vgw_id\\\"></a> [vgw\\_id](#output\\_vgw\\_id) | The ID of the VPN Gateway |\n| <a name=\\\"output_vpc_arn\\\"></a> [vpc\\_arn](#output\\_vpc\\_arn) | The ARN of the VPC |\n| <a name=\\\"output_vpc_cidr_block\\\"></a> [vpc\\_cidr\\_block](#output\\_vpc\\_cidr\\_block) | The CIDR block of the VPC |\n| <a name=\\\"output_vpc_enable_dns_hostnames\\\"></a> [vpc\\_enable\\_dns\\_hostnames](#output\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the VPC has DNS hostname support |\n| <a name=\\\"output_vpc_enable_dns_support\\\"></a> [vpc\\_enable\\_dns\\_support](#output\\_vpc\\_enable\\_dns\\_support) | Whether or not the VPC has DNS support |\n| <a name=\\\"output_vpc_flow_log_cloudwatch_iam_role_arn\\\"></a> [vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn](#output\\_vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn) | The ARN of the IAM role used when pushing logs to Cloudwatch log group |\n| <a name=\\\"output_vpc_flow_log_destination_arn\\\"></a> [vpc\\_flow\\_log\\_destination\\_arn](#output\\_vpc\\_flow\\_log\\_destination\\_arn) | The ARN of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_destination_type\\\"></a> [vpc\\_flow\\_log\\_destination\\_type](#output\\_vpc\\_flow\\_log\\_destination\\_type) | The type of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_id\\\"></a> [vpc\\_flow\\_log\\_id](#output\\_vpc\\_flow\\_log\\_id) | The ID of the Flow Log resource |\n| <a name=\\\"output_vpc_id\\\"></a> [vpc\\_id](#output\\_vpc\\_id) | The ID of the VPC |\n| <a name=\\\"output_vpc_instance_tenancy\\\"></a> [vpc\\_instance\\_tenancy](#output\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within VPC |\n| <a name=\\\"output_vpc_ipv6_association_id\\\"></a> [vpc\\_ipv6\\_association\\_id](#output\\_vpc\\_ipv6\\_association\\_id) | The association ID for the IPv6 CIDR block |\n| <a name=\\\"output_vpc_ipv6_cidr_block\\\"></a> [vpc\\_ipv6\\_cidr\\_block](#output\\_vpc\\_ipv6\\_cidr\\_block) | The IPv6 CIDR block |\n| <a name=\\\"output_vpc_main_route_table_id\\\"></a> [vpc\\_main\\_route\\_table\\_id](#output\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with this VPC |\n| <a name=\\\"output_vpc_owner_id\\\"></a> [vpc\\_owner\\_id](#output\\_vpc\\_owner\\_id) | The ID of the AWS account that owns the VPC |\n| <a name=\\\"output_vpc_secondary_cidr_blocks\\\"></a> [vpc\\_secondary\\_cidr\\_blocks](#output\\_vpc\\_secondary\\_cidr\\_blocks) | List of secondary CIDR blocks of the VPC |\n```\n\n----------------------------------------\n\nTITLE: Running Terraform AWS VPC Example in Bash\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for AWS VPC. The example shows the standard workflow for deploying infrastructure with Terraform.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/issues/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Running Terraform CLI for Default VPC Management - Bash\nDESCRIPTION: This bash snippet demonstrates the typical workflow for managing the default AWS VPC using Terraform: initializing the working directory, reviewing the execution plan, and applying the configuration. Dependencies include installed versions of Terraform (>=1.0) and the AWS provider (>=5.46). The snippet requires proper AWS credentials to be configured in the environment, and is expected to be executed in a directory containing the appropriate Terraform configuration files. Limitation: No actual VPC creation/destruction—only management of the default VPC.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/manage-default-vpc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Documenting Terraform VPC Outputs - Markdown Table - Markdown\nDESCRIPTION: Documents all Terraform output variables from the VPC module in a Markdown table format. No code logic is implemented; instead, output variable names are hyperlinked and described for quick reference. There are no functional dependencies or parameters, as this is structured documentation intended for users of the module's outputs.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/manage-default-vpc/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| <a name=\\\"output_private_network_acl_arn\\\"></a> [private\\_network\\_acl\\_arn](#output\\_private\\_network\\_acl\\_arn) | ARN of the private network ACL |\n| <a name=\\\"output_private_network_acl_id\\\"></a> [private\\_network\\_acl\\_id](#output\\_private\\_network\\_acl\\_id) | ID of the private network ACL |\n| <a name=\\\"output_private_route_table_association_ids\\\"></a> [private\\_route\\_table\\_association\\_ids](#output\\_private\\_route\\_table\\_association\\_ids) | List of IDs of the private route table association |\n| <a name=\\\"output_private_route_table_ids\\\"></a> [private\\_route\\_table\\_ids](#output\\_private\\_route\\_table\\_ids) | List of IDs of private route tables |\n| <a name=\\\"output_private_subnet_arns\\\"></a> [private\\_subnet\\_arns](#output\\_private\\_subnet\\_arns) | List of ARNs of private subnets |\n| <a name=\\\"output_private_subnets\\\"></a> [private\\_subnets](#output\\_private\\_subnets) | List of IDs of private subnets |\n| <a name=\\\"output_private_subnets_cidr_blocks\\\"></a> [private\\_subnets\\_cidr\\_blocks](#output\\_private\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of private subnets |\n| <a name=\\\"output_private_subnets_ipv6_cidr_blocks\\\"></a> [private\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_private\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of private subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_public_internet_gateway_ipv6_route_id\\\"></a> [public\\_internet\\_gateway\\_ipv6\\_route\\_id](#output\\_public\\_internet\\_gateway\\_ipv6\\_route\\_id) | ID of the IPv6 internet gateway route |\n| <a name=\\\"output_public_internet_gateway_route_id\\\"></a> [public\\_internet\\_gateway\\_route\\_id](#output\\_public\\_internet\\_gateway\\_route\\_id) | ID of the internet gateway route |\n| <a name=\\\"output_public_network_acl_arn\\\"></a> [public\\_network\\_acl\\_arn](#output\\_public\\_network\\_acl\\_arn) | ARN of the public network ACL |\n| <a name=\\\"output_public_network_acl_id\\\"></a> [public\\_network\\_acl\\_id](#output\\_public\\_network\\_acl\\_id) | ID of the public network ACL |\n| <a name=\\\"output_public_route_table_association_ids\\\"></a> [public\\_route\\_table\\_association\\_ids](#output\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public route table association |\n| <a name=\\\"output_public_route_table_ids\\\"></a> [public\\_route\\_table\\_ids](#output\\_public\\_route\\_table\\_ids) | List of IDs of public route tables |\n| <a name=\\\"output_public_subnet_arns\\\"></a> [public\\_subnet\\_arns](#output\\_public\\_subnet\\_arns) | List of ARNs of public subnets |\n| <a name=\\\"output_public_subnets\\\"></a> [public\\_subnets](#output\\_public\\_subnets) | List of IDs of public subnets |\n| <a name=\\\"output_public_subnets_cidr_blocks\\\"></a> [public\\_subnets\\_cidr\\_blocks](#output\\_public\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of public subnets |\n| <a name=\\\"output_public_subnets_ipv6_cidr_blocks\\\"></a> [public\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_public\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of public subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_redshift_network_acl_arn\\\"></a> [redshift\\_network\\_acl\\_arn](#output\\_redshift\\_network\\_acl\\_arn) | ARN of the redshift network ACL |\n| <a name=\\\"output_redshift_network_acl_id\\\"></a> [redshift\\_network\\_acl\\_id](#output\\_redshift\\_network\\_acl\\_id) | ID of the redshift network ACL |\n| <a name=\\\"output_redshift_public_route_table_association_ids\\\"></a> [redshift\\_public\\_route\\_table\\_association\\_ids](#output\\_redshift\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public redshift route table association |\n| <a name=\\\"output_redshift_route_table_association_ids\\\"></a> [redshift\\_route\\_table\\_association\\_ids](#output\\_redshift\\_route\\_table\\_association\\_ids) | List of IDs of the redshift route table association |\n| <a name=\\\"output_redshift_route_table_ids\\\"></a> [redshift\\_route\\_table\\_ids](#output\\_redshift\\_route\\_table\\_ids) | List of IDs of redshift route tables |\n| <a name=\\\"output_redshift_subnet_arns\\\"></a> [redshift\\_subnet\\_arns](#output\\_redshift\\_subnet\\_arns) | List of ARNs of redshift subnets |\n| <a name=\\\"output_redshift_subnet_group\\\"></a> [redshift\\_subnet\\_group](#output\\_redshift\\_subnet\\_group) | ID of redshift subnet group |\n| <a name=\\\"output_redshift_subnets\\\"></a> [redshift\\_subnets](#output\\_redshift\\_subnets) | List of IDs of redshift subnets |\n| <a name=\\\"output_redshift_subnets_cidr_blocks\\\"></a> [redshift\\_subnets\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of redshift subnets |\n| <a name=\\\"output_redshift_subnets_ipv6_cidr_blocks\\\"></a> [redshift\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of redshift subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_this_customer_gateway\\\"></a> [this\\_customer\\_gateway](#output\\_this\\_customer\\_gateway) | Map of Customer Gateway attributes |\n| <a name=\\\"output_vgw_arn\\\"></a> [vgw\\_arn](#output\\_vgw\\_arn) | The ARN of the VPN Gateway |\n| <a name=\\\"output_vgw_id\\\"></a> [vgw\\_id](#output\\_vgw\\_id) | The ID of the VPN Gateway |\n| <a name=\\\"output_vpc_arn\\\"></a> [vpc\\_arn](#output\\_vpc\\_arn) | The ARN of the VPC |\n| <a name=\\\"output_vpc_cidr_block\\\"></a> [vpc\\_cidr\\_block](#output\\_vpc\\_cidr\\_block) | The CIDR block of the VPC |\n| <a name=\\\"output_vpc_enable_dns_hostnames\\\"></a> [vpc\\_enable\\_dns\\_hostnames](#output\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the VPC has DNS hostname support |\n| <a name=\\\"output_vpc_enable_dns_support\\\"></a> [vpc\\_enable\\_dns\\_support](#output\\_vpc\\_enable\\_dns\\_support) | Whether or not the VPC has DNS support |\n| <a name=\\\"output_vpc_flow_log_cloudwatch_iam_role_arn\\\"></a> [vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn](#output\\_vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn) | The ARN of the IAM role used when pushing logs to Cloudwatch log group |\n| <a name=\\\"output_vpc_flow_log_destination_arn\\\"></a> [vpc\\_flow\\_log\\_destination\\_arn](#output\\_vpc\\_flow\\_log\\_destination\\_arn) | The ARN of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_destination_type\\\"></a> [vpc\\_flow\\_log\\_destination\\_type](#output\\_vpc\\_flow\\_log\\_destination\\_type) | The type of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_id\\\"></a> [vpc\\_flow\\_log\\_id](#output\\_vpc\\_flow\\_log\\_id) | The ID of the Flow Log resource |\n| <a name=\\\"output_vpc_id\\\"></a> [vpc\\_id](#output\\_vpc\\_id) | The ID of the VPC |\n| <a name=\\\"output_vpc_instance_tenancy\\\"></a> [vpc\\_instance\\_tenancy](#output\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within VPC |\n| <a name=\\\"output_vpc_ipv6_association_id\\\"></a> [vpc\\_ipv6\\_association\\_id](#output\\_vpc\\_ipv6\\_association\\_id) | The association ID for the IPv6 CIDR block |\n| <a name=\\\"output_vpc_ipv6_cidr_block\\\"></a> [vpc\\_ipv6\\_cidr\\_block](#output\\_vpc\\_ipv6\\_cidr\\_block) | The IPv6 CIDR block |\n| <a name=\\\"output_vpc_main_route_table_id\\\"></a> [vpc\\_main\\_route\\_table\\_id](#output\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with this VPC |\n| <a name=\\\"output_vpc_owner_id\\\"></a> [vpc\\_owner\\_id](#output\\_vpc\\_owner\\_id) | The ID of the AWS account that owns the VPC |\n| <a name=\\\"output_vpc_secondary_cidr_blocks\\\"></a> [vpc\\_secondary\\_cidr\\_blocks](#output\\_vpc\\_secondary\\_cidr\\_blocks) | List of secondary CIDR blocks of the VPC |\n```\n\n----------------------------------------\n\nTITLE: Running Terraform to Deploy AWS VPC Infrastructure - Terraform/Bash\nDESCRIPTION: Provides a sequence of Bash commands for initializing, planning, and applying a Terraform configuration that sets up an AWS VPC with network ACLs. Requires Terraform CLI and a valid AWS provider configuration as prerequisites. Key commands include 'terraform init' to initialize configuration, 'terraform plan' to preview changes, and 'terraform apply' to deploy the resources. The workflow supports optional teardown using 'terraform destroy' and assumes the user has appropriate AWS credentials and access rights.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/network-acls/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Listing Terraform AWS VPC Module Outputs - Markdown\nDESCRIPTION: This Markdown code block defines a table listing all outputs of the Terraform AWS VPC module. It requires no dependencies, though it references the module's underlying Terraform outputs. Each row in the table lists the output variable, a Markdown anchor, and a description of its purpose. Inputs are not required; the table is intended for documentation only, and readers interpret the content for further technical reference.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/network-acls/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Outputs\n\n| Name | Description |\n|------|-------------|\n| <a name=\"output_cgw_arns\"></a> [cgw\\_arns](#output\\_cgw\\_arns) | List of ARNs of Customer Gateway |\n| <a name=\"output_cgw_ids\"></a> [cgw\\_ids](#output\\_cgw\\_ids) | List of IDs of Customer Gateway |\n| <a name=\"output_database_internet_gateway_route_id\"></a> [database\\_internet\\_gateway\\_route\\_id](#output\\_database\\_internet\\_gateway\\_route\\_id) | ID of the database internet gateway route |\n| <a name=\"output_database_ipv6_egress_route_id\"></a> [database\\_ipv6\\_egress\\_route\\_id](#output\\_database\\_ipv6\\_egress\\_route\\_id) | ID of the database IPv6 egress route |\n| <a name=\"output_database_nat_gateway_route_ids\"></a> [database\\_nat\\_gateway\\_route\\_ids](#output\\_database\\_nat\\_gateway\\_route\\_ids) | List of IDs of the database nat gateway route |\n| <a name=\"output_database_network_acl_arn\"></a> [database\\_network\\_acl\\_arn](#output\\_database\\_network\\_acl\\_arn) | ARN of the database network ACL |\n| <a name=\"output_database_network_acl_id\"></a> [database\\_network\\_acl\\_id](#output\\_database\\_network\\_acl\\_id) | ID of the database network ACL |\n| <a name=\"output_database_route_table_association_ids\"></a> [database\\_route\\_table\\_association\\_ids](#output\\_database\\_route\\_table\\_association\\_ids) | List of IDs of the database route table association |\n| <a name=\"output_database_route_table_ids\"></a> [database\\_route\\_table\\_ids](#output\\_database\\_route\\_table\\_ids) | List of IDs of database route tables |\n| <a name=\"output_database_subnet_arns\"></a> [database\\_subnet\\_arns](#output\\_database\\_subnet\\_arns) | List of ARNs of database subnets |\n| <a name=\"output_database_subnet_group\"></a> [database\\_subnet\\_group](#output\\_database\\_subnet\\_group) | ID of database subnet group |\n| <a name=\"output_database_subnet_group_name\"></a> [database\\_subnet\\_group\\_name](#output\\_database\\_subnet\\_group\\_name) | Name of database subnet group |\n| <a name=\"output_database_subnets\"></a> [database\\_subnets](#output\\_database\\_subnets) | List of IDs of database subnets |\n| <a name=\"output_database_subnets_cidr_blocks\"></a> [database\\_subnets\\_cidr\\_blocks](#output\\_database\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of database subnets |\n| <a name=\"output_database_subnets_ipv6_cidr_blocks\"></a> [database\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_database\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of database subnets in an IPv6 enabled VPC |\n| <a name=\"output_default_network_acl_id\"></a> [default\\_network\\_acl\\_id](#output\\_default\\_network\\_acl\\_id) | The ID of the default network ACL |\n| <a name=\"output_default_route_table_id\"></a> [default\\_route\\_table\\_id](#output\\_default\\_route\\_table\\_id) | The ID of the default route table |\n| <a name=\"output_default_security_group_id\"></a> [default\\_security\\_group\\_id](#output\\_default\\_security\\_group\\_id) | The ID of the security group created by default on VPC creation |\n| <a name=\"output_default_vpc_arn\"></a> [default\\_vpc\\_arn](#output\\_default\\_vpc\\_arn) | The ARN of the Default VPC |\n| <a name=\"output_default_vpc_cidr_block\"></a> [default\\_vpc\\_cidr\\_block](#output\\_default\\_vpc\\_cidr\\_block) | The CIDR block of the Default VPC |\n| <a name=\"output_default_vpc_default_network_acl_id\"></a> [default\\_vpc\\_default\\_network\\_acl\\_id](#output\\_default\\_vpc\\_default\\_network\\_acl\\_id) | The ID of the default network ACL of the Default VPC |\n| <a name=\"output_default_vpc_default_route_table_id\"></a> [default\\_vpc\\_default\\_route\\_table\\_id](#output\\_default\\_vpc\\_default\\_route\\_table\\_id) | The ID of the default route table of the Default VPC |\n| <a name=\"output_default_vpc_default_security_group_id\"></a> [default\\_vpc\\_default\\_security\\_group\\_id](#output\\_default\\_vpc\\_default\\_security\\_group\\_id) | The ID of the security group created by default on Default VPC creation |\n| <a name=\"output_default_vpc_enable_dns_hostnames\"></a> [default\\_vpc\\_enable\\_dns\\_hostnames](#output\\_default\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the Default VPC has DNS hostname support |\n| <a name=\"output_default_vpc_enable_dns_support\"></a> [default\\_vpc\\_enable\\_dns\\_support](#output\\_default\\_vpc\\_enable\\_dns\\_support) | Whether or not the Default VPC has DNS support |\n| <a name=\"output_default_vpc_id\"></a> [default\\_vpc\\_id](#output\\_default\\_vpc\\_id) | The ID of the Default VPC |\n| <a name=\"output_default_vpc_instance_tenancy\"></a> [default\\_vpc\\_instance\\_tenancy](#output\\_default\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within Default VPC |\n| <a name=\"output_default_vpc_main_route_table_id\"></a> [default\\_vpc\\_main\\_route\\_table\\_id](#output\\_default\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with the Default VPC |\n| <a name=\"output_dhcp_options_id\"></a> [dhcp\\_options\\_id](#output\\_dhcp\\_options\\_id) | The ID of the DHCP options |\n| <a name=\"output_egress_only_internet_gateway_id\"></a> [egress\\_only\\_internet\\_gateway\\_id](#output\\_egress\\_only\\_internet\\_gateway\\_id) | The ID of the egress only Internet Gateway |\n| <a name=\"output_elasticache_network_acl_arn\"></a> [elasticache\\_network\\_acl\\_arn](#output\\_elasticache\\_network\\_acl\\_arn) | ARN of the elasticache network ACL |\n| <a name=\"output_elasticache_network_acl_id\"></a> [elasticache\\_network\\_acl\\_id](#output\\_elasticache\\_network\\_acl\\_id) | ID of the elasticache network ACL |\n| <a name=\"output_elasticache_route_table_association_ids\"></a> [elasticache\\_route\\_table\\_association\\_ids](#output\\_elasticache\\_route\\_table\\_association\\_ids) | List of IDs of the elasticache route table association |\n| <a name=\"output_elasticache_route_table_ids\"></a> [elasticache\\_route\\_table\\_ids](#output\\_elasticache\\_route\\_table\\_ids) | List of IDs of elasticache route tables |\n| <a name=\"output_elasticache_subnet_arns\"></a> [elasticache\\_subnet\\_arns](#output\\_elasticache\\_subnet\\_arns) | List of ARNs of elasticache subnets |\n| <a name=\"output_elasticache_subnet_group\"></a> [elasticache\\_subnet\\_group](#output\\_elasticache\\_subnet\\_group) | ID of elasticache subnet group |\n| <a name=\"output_elasticache_subnet_group_name\"></a> [elasticache\\_subnet\\_group\\_name](#output\\_elasticache\\_subnet\\_group\\_name) | Name of elasticache subnet group |\n| <a name=\"output_elasticache_subnets\"></a> [elasticache\\_subnets](#output\\_elasticache\\_subnets) | List of IDs of elasticache subnets |\n| <a name=\"output_elasticache_subnets_cidr_blocks\"></a> [elasticache\\_subnets\\_cidr\\_blocks](#output\\_elasticache\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of elasticache subnets |\n| <a name=\"output_elasticache_subnets_ipv6_cidr_blocks\"></a> [elasticache\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_elasticache\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of elasticache subnets in an IPv6 enabled VPC |\n| <a name=\"output_igw_arn\"></a> [igw\\_arn](#output\\_igw\\_arn) | The ARN of the Internet Gateway |\n| <a name=\"output_igw_id\"></a> [igw\\_id](#output\\_igw\\_id) | The ID of the Internet Gateway |\n| <a name=\"output_intra_network_acl_arn\"></a> [intra\\_network\\_acl\\_arn](#output\\_intra\\_network\\_acl\\_arn) | ARN of the intra network ACL |\n| <a name=\"output_intra_network_acl_id\"></a> [intra\\_network\\_acl\\_id](#output\\_intra\\_network\\_acl\\_id) | ID of the intra network ACL |\n| <a name=\"output_intra_route_table_association_ids\"></a> [intra\\_route\\_table\\_association\\_ids](#output\\_intra\\_route\\_table\\_association\\_ids) | List of IDs of the intra route table association |\n| <a name=\"output_intra_route_table_ids\"></a> [intra\\_route\\_table\\_ids](#output\\_intra\\_route\\_table\\_ids) | List of IDs of intra route tables |\n| <a name=\"output_intra_subnet_arns\"></a> [intra\\_subnet\\_arns](#output\\_intra\\_subnet\\_arns) | List of ARNs of intra subnets |\n| <a name=\"output_intra_subnets\"></a> [intra\\_subnets](#output\\_intra\\_subnets) | List of IDs of intra subnets |\n| <a name=\"output_intra_subnets_cidr_blocks\"></a> [intra\\_subnets\\_cidr\\_blocks](#output\\_intra\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of intra subnets |\n| <a name=\"output_intra_subnets_ipv6_cidr_blocks\"></a> [intra\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_intra\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of intra subnets in an IPv6 enabled VPC |\n| <a name=\"output_nat_ids\"></a> [nat\\_ids](#output\\_nat\\_ids) | List of allocation ID of Elastic IPs created for AWS NAT Gateway |\n| <a name=\"output_nat_public_ips\"></a> [nat\\_public\\_ips](#output\\_nat\\_public\\_ips) | List of public Elastic IPs created for AWS NAT Gateway |\n| <a name=\"output_natgw_ids\"></a> [natgw\\_ids](#output\\_natgw\\_ids) | List of NAT Gateway IDs |\n| <a name=\"output_outpost_network_acl_arn\"></a> [outpost\\_network\\_acl\\_arn](#output\\_outpost\\_network\\_acl\\_arn) | ARN of the outpost network ACL |\n| <a name=\"output_outpost_network_acl_id\"></a> [outpost\\_network\\_acl\\_id](#output\\_outpost\\_network\\_acl\\_id) | ID of the outpost network ACL |\n| <a name=\"output_outpost_subnet_arns\"></a> [outpost\\_subnet\\_arns](#output\\_outpost\\_subnet\\_arns) | List of ARNs of outpost subnets |\n| <a name=\"output_outpost_subnets\"></a> [outpost\\_subnets](#output\\_outpost\\_subnets) | List of IDs of outpost subnets |\n| <a name=\"output_outpost_subnets_cidr_blocks\"></a> [outpost\\_subnets\\_cidr\\_blocks](#output\\_outpost\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of outpost subnets |\n| <a name=\"output_outpost_subnets_ipv6_cidr_blocks\"></a> [outpost\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_outpost\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of outpost subnets in an IPv6 enabled VPC |\n| <a name=\"output_private_ipv6_egress_route_ids\"></a> [private\\_ipv6\\_egress\\_route\\_ids](#output\\_private\\_ipv6\\_egress\\_route\\_ids) | List of IDs of the ipv6 egress route |\n| <a name=\"output_private_nat_gateway_route_ids\"></a> [private\\_nat\\_gateway\\_route\\_ids](#output\\_private\\_nat\\_gateway\\_route\\_ids) | List of IDs of the private nat gateway route |\n```\n\n----------------------------------------\n\nTITLE: Documenting Output Variables for Terraform AWS VPC Module - Markdown\nDESCRIPTION: This Markdown snippet provides a table listing all output variables made available by the terraform-aws-vpc module. Each table row presents an output name with an anchor, allowing for convenient linking and navigation within larger documentation. The table is intended for end users of the module, requiring no external dependencies but assumes familiarity with Terraform terminology. Inputs are not required; the outputs correspond to resources declared in the associated Terraform module, and the snippet's main limitation is that it is static—any module changes must be reflected manually here.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/network-acls/README.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n| <a name=\\\"output_private_network_acl_arn\\\"></a> [private\\_network\\_acl\\_arn](#output\\_private\\_network\\_acl\\_arn) | ARN of the private network ACL |\n| <a name=\\\"output_private_network_acl_id\\\"></a> [private\\_network\\_acl\\_id](#output\\_private\\_network\\_acl\\_id) | ID of the private network ACL |\n| <a name=\\\"output_private_route_table_association_ids\\\"></a> [private\\_route\\_table\\_association\\_ids](#output\\_private\\_route\\_table\\_association\\_ids) | List of IDs of the private route table association |\n| <a name=\\\"output_private_route_table_ids\\\"></a> [private\\_route\\_table\\_ids](#output\\_private\\_route\\_table\\_ids) | List of IDs of private route tables |\n| <a name=\\\"output_private_subnet_arns\\\"></a> [private\\_subnet\\_arns](#output\\_private\\_subnet\\_arns) | List of ARNs of private subnets |\n| <a name=\\\"output_private_subnets\\\"></a> [private\\_subnets](#output\\_private\\_subnets) | List of IDs of private subnets |\n| <a name=\\\"output_private_subnets_cidr_blocks\\\"></a> [private\\_subnets\\_cidr\\_blocks](#output\\_private\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of private subnets |\n| <a name=\\\"output_private_subnets_ipv6_cidr_blocks\\\"></a> [private\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_private\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of private subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_public_internet_gateway_ipv6_route_id\\\"></a> [public\\_internet\\_gateway\\_ipv6\\_route\\_id](#output\\_public\\_internet\\_gateway\\_ipv6\\_route\\_id) | ID of the IPv6 internet gateway route |\n| <a name=\\\"output_public_internet_gateway_route_id\\\"></a> [public\\_internet\\_gateway\\_route\\_id](#output\\_public\\_internet\\_gateway\\_route\\_id) | ID of the internet gateway route |\n| <a name=\\\"output_public_network_acl_arn\\\"></a> [public\\_network\\_acl\\_arn](#output\\_public\\_network\\_acl\\_arn) | ARN of the public network ACL |\n| <a name=\\\"output_public_network_acl_id\\\"></a> [public\\_network\\_acl\\_id](#output\\_public\\_network\\_acl\\_id) | ID of the public network ACL |\n| <a name=\\\"output_public_route_table_association_ids\\\"></a> [public\\_route\\_table\\_association\\_ids](#output\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public route table association |\n| <a name=\\\"output_public_route_table_ids\\\"></a> [public\\_route\\_table\\_ids](#output\\_public\\_route\\_table\\_ids) | List of IDs of public route tables |\n| <a name=\\\"output_public_subnet_arns\\\"></a> [public\\_subnet\\_arns](#output\\_public\\_subnet\\_arns) | List of ARNs of public subnets |\n| <a name=\\\"output_public_subnets\\\"></a> [public\\_subnets](#output\\_public\\_subnets) | List of IDs of public subnets |\n| <a name=\\\"output_public_subnets_cidr_blocks\\\"></a> [public\\_subnets\\_cidr\\_blocks](#output\\_public\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of public subnets |\n| <a name=\\\"output_public_subnets_ipv6_cidr_blocks\\\"></a> [public\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_public\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of public subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_redshift_network_acl_arn\\\"></a> [redshift\\_network\\_acl\\_arn](#output\\_redshift\\_network\\_acl\\_arn) | ARN of the redshift network ACL |\n| <a name=\\\"output_redshift_network_acl_id\\\"></a> [redshift\\_network\\_acl\\_id](#output\\_redshift\\_network\\_acl\\_id) | ID of the redshift network ACL |\n| <a name=\\\"output_redshift_public_route_table_association_ids\\\"></a> [redshift\\_public\\_route\\_table\\_association\\_ids](#output\\_redshift\\_public\\_route\\_table\\_association\\_ids) | List of IDs of the public redshift route table association |\n| <a name=\\\"output_redshift_route_table_association_ids\\\"></a> [redshift\\_route\\_table\\_association\\_ids](#output\\_redshift\\_route\\_table\\_association\\_ids) | List of IDs of the redshift route table association |\n| <a name=\\\"output_redshift_route_table_ids\\\"></a> [redshift\\_route\\_table\\_ids](#output\\_redshift\\_route\\_table\\_ids) | List of IDs of redshift route tables |\n| <a name=\\\"output_redshift_subnet_arns\\\"></a> [redshift\\_subnet\\_arns](#output\\_redshift\\_subnet\\_arns) | List of ARNs of redshift subnets |\n| <a name=\\\"output_redshift_subnet_group\\\"></a> [redshift\\_subnet\\_group](#output\\_redshift\\_subnet\\_group) | ID of redshift subnet group |\n| <a name=\\\"output_redshift_subnets\\\"></a> [redshift\\_subnets](#output\\_redshift\\_subnets) | List of IDs of redshift subnets |\n| <a name=\\\"output_redshift_subnets_cidr_blocks\\\"></a> [redshift\\_subnets\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of redshift subnets |\n| <a name=\\\"output_redshift_subnets_ipv6_cidr_blocks\\\"></a> [redshift\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_redshift\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of redshift subnets in an IPv6 enabled VPC |\n| <a name=\\\"output_this_customer_gateway\\\"></a> [this\\_customer\\_gateway](#output\\_this\\_customer\\_gateway) | Map of Customer Gateway attributes |\n| <a name=\\\"output_vgw_arn\\\"></a> [vgw\\_arn](#output\\_vgw\\_arn) | The ARN of the VPN Gateway |\n| <a name=\\\"output_vgw_id\\\"></a> [vgw\\_id](#output\\_vgw\\_id) | The ID of the VPN Gateway |\n| <a name=\\\"output_vpc_arn\\\"></a> [vpc\\_arn](#output\\_vpc\\_arn) | The ARN of the VPC |\n| <a name=\\\"output_vpc_cidr_block\\\"></a> [vpc\\_cidr\\_block](#output\\_vpc\\_cidr\\_block) | The CIDR block of the VPC |\n| <a name=\\\"output_vpc_enable_dns_hostnames\\\"></a> [vpc\\_enable\\_dns\\_hostnames](#output\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the VPC has DNS hostname support |\n| <a name=\\\"output_vpc_enable_dns_support\\\"></a> [vpc\\_enable\\_dns\\_support](#output\\_vpc\\_enable\\_dns\\_support) | Whether or not the VPC has DNS support |\n| <a name=\\\"output_vpc_flow_log_cloudwatch_iam_role_arn\\\"></a> [vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn](#output\\_vpc\\_flow\\_log\\_cloudwatch\\_iam\\_role\\_arn) | The ARN of the IAM role used when pushing logs to Cloudwatch log group |\n| <a name=\\\"output_vpc_flow_log_destination_arn\\\"></a> [vpc\\_flow\\_log\\_destination\\_arn](#output\\_vpc\\_flow\\_log\\_destination\\_arn) | The ARN of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_destination_type\\\"></a> [vpc\\_flow\\_log\\_destination\\_type](#output\\_vpc\\_flow\\_log\\_destination\\_type) | The type of the destination for VPC Flow Logs |\n| <a name=\\\"output_vpc_flow_log_id\\\"></a> [vpc\\_flow\\_log\\_id](#output\\_vpc\\_flow\\_log\\_id) | The ID of the Flow Log resource |\n| <a name=\\\"output_vpc_id\\\"></a> [vpc\\_id](#output\\_vpc\\_id) | The ID of the VPC |\n| <a name=\\\"output_vpc_instance_tenancy\\\"></a> [vpc\\_instance\\_tenancy](#output\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within VPC |\n| <a name=\\\"output_vpc_ipv6_association_id\\\"></a> [vpc\\_ipv6\\_association\\_id](#output\\_vpc\\_ipv6\\_association\\_id) | The association ID for the IPv6 CIDR block |\n| <a name=\\\"output_vpc_ipv6_cidr_block\\\"></a> [vpc\\_ipv6\\_cidr\\_block](#output\\_vpc\\_ipv6\\_cidr\\_block) | The IPv6 CIDR block |\n| <a name=\\\"output_vpc_main_route_table_id\\\"></a> [vpc\\_main\\_route\\_table\\_id](#output\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with this VPC |\n| <a name=\\\"output_vpc_owner_id\\\"></a> [vpc\\_owner\\_id](#output\\_vpc\\_owner\\_id) | The ID of the AWS account that owns the VPC |\n| <a name=\\\"output_vpc_secondary_cidr_blocks\\\"></a> [vpc\\_secondary\\_cidr\\_blocks](#output\\_vpc\\_secondary\\_cidr\\_blocks) | List of secondary CIDR blocks of the VPC |\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Initialization, Planning, and Apply Workflow - Bash\nDESCRIPTION: This Bash script snippet demonstrates the sequence of commands required to initialize, plan, and apply a Terraform configuration to provision AWS VPC infrastructure. Dependencies include the Terraform CLI and a valid Terraform configuration file in the current directory. The commands 'terraform init', 'terraform plan', and 'terraform apply' prepare the working directory, preview changes, and deploy resources, respectively. It assumes valid AWS credentials are configured and that costs may be incurred for created resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/outpost/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands for VPC Creation\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the changes to create the VPC resources. It's important to note that this may incur costs for AWS resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/secondary-cidr-blocks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Requirements and Provider Configuration\nDESCRIPTION: This snippet defines the required versions for Terraform and the AWS provider. It specifies that Terraform version 1.0 or higher and AWS provider version 5.46 or higher are needed for this configuration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/secondary-cidr-blocks/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n## Requirements\n\n| Name | Version |\n|------|----------|\n| <a name=\"requirement_terraform\"></a> [terraform](#requirement\\_terraform) | >= 1.0 |\n| <a name=\"requirement_aws\"></a> [aws](#requirement\\_aws) | >= 5.46 |\n\n## Providers\n\n| Name | Version |\n|------|----------|\n| <a name=\"provider_aws\"></a> [aws](#provider\\_aws) | >= 5.46 |\n```\n\n----------------------------------------\n\nTITLE: Terraform Module and Resource Configuration\nDESCRIPTION: This section defines the VPC module sourced from the parent directory and references an AWS data source for availability zones. It demonstrates how to use the VPC module and integrate AWS resources in the configuration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/secondary-cidr-blocks/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n## Modules\n\n| Name | Source | Version |\n|------|--------|----------|\n| <a name=\"module_vpc\"></a> [vpc](#module\\_vpc) | ../../ | n/a |\n\n## Resources\n\n| Name | Type |\n|------|------|\n| [aws_availability_zones.available](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/availability_zones) | data source |\n\n## Inputs\n\nNo inputs.\n```\n\n----------------------------------------\n\nTITLE: Initializing and Deploying Terraform AWS VPC Configuration\nDESCRIPTION: Basic Terraform commands to initialize, plan, and apply the VPC configuration. These commands set up the VPC infrastructure in AWS according to the defined specifications.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/separate-route-tables/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Documenting VPC Module Outputs in Markdown\nDESCRIPTION: This markdown table lists all the outputs from the AWS VPC Terraform module, including their names and descriptions. It covers various VPC components such as subnets, route tables, network ACLs, and gateways.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/separate-route-tables/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description |\n|------|-------------|\n| <a name=\"output_cgw_arns\"></a> [cgw\\_arns](#output\\_cgw\\_arns) | List of ARNs of Customer Gateway |\n| <a name=\"output_cgw_ids\"></a> [cgw\\_ids](#output\\_cgw\\_ids) | List of IDs of Customer Gateway |\n| <a name=\"output_database_internet_gateway_route_id\"></a> [database\\_internet\\_gateway\\_route\\_id](#output\\_database\\_internet\\_gateway\\_route\\_id) | ID of the database internet gateway route |\n| <a name=\"output_database_ipv6_egress_route_id\"></a> [database\\_ipv6\\_egress\\_route\\_id](#output\\_database\\_ipv6\\_egress\\_route\\_id) | ID of the database IPv6 egress route |\n| <a name=\"output_database_nat_gateway_route_ids\"></a> [database\\_nat\\_gateway\\_route\\_ids](#output\\_database\\_nat\\_gateway\\_route\\_ids) | List of IDs of the database nat gateway route |\n| <a name=\"output_database_network_acl_arn\"></a> [database\\_network\\_acl\\_arn](#output\\_database\\_network\\_acl\\_arn) | ARN of the database network ACL |\n| <a name=\"output_database_network_acl_id\"></a> [database\\_network\\_acl\\_id](#output\\_database\\_network\\_acl\\_id) | ID of the database network ACL |\n| <a name=\"output_database_route_table_association_ids\"></a> [database\\_route\\_table\\_association\\_ids](#output\\_database\\_route\\_table\\_association\\_ids) | List of IDs of the database route table association |\n| <a name=\"output_database_route_table_ids\"></a> [database\\_route\\_table\\_ids](#output\\_database\\_route\\_table\\_ids) | List of IDs of database route tables |\n| <a name=\"output_database_subnet_arns\"></a> [database\\_subnet\\_arns](#output\\_database\\_subnet\\_arns) | List of ARNs of database subnets |\n| <a name=\"output_database_subnet_group\"></a> [database\\_subnet\\_group](#output\\_database\\_subnet\\_group) | ID of database subnet group |\n| <a name=\"output_database_subnet_group_name\"></a> [database\\_subnet\\_group\\_name](#output\\_database\\_subnet\\_group\\_name) | Name of database subnet group |\n| <a name=\"output_database_subnets\"></a> [database\\_subnets](#output\\_database\\_subnets) | List of IDs of database subnets |\n| <a name=\"output_database_subnets_cidr_blocks\"></a> [database\\_subnets\\_cidr\\_blocks](#output\\_database\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of database subnets |\n| <a name=\"output_database_subnets_ipv6_cidr_blocks\"></a> [database\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_database\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of database subnets in an IPv6 enabled VPC |\n| <a name=\"output_default_network_acl_id\"></a> [default\\_network\\_acl\\_id](#output\\_default\\_network\\_acl\\_id) | The ID of the default network ACL |\n| <a name=\"output_default_route_table_id\"></a> [default\\_route\\_table\\_id](#output\\_default\\_route\\_table\\_id) | The ID of the default route table |\n| <a name=\"output_default_security_group_id\"></a> [default\\_security\\_group\\_id](#output\\_default\\_security\\_group\\_id) | The ID of the security group created by default on VPC creation |\n| <a name=\"output_default_vpc_arn\"></a> [default\\_vpc\\_arn](#output\\_default\\_vpc\\_arn) | The ARN of the Default VPC |\n| <a name=\"output_default_vpc_cidr_block\"></a> [default\\_vpc\\_cidr\\_block](#output\\_default\\_vpc\\_cidr\\_block) | The CIDR block of the Default VPC |\n| <a name=\"output_default_vpc_default_network_acl_id\"></a> [default\\_vpc\\_default\\_network\\_acl\\_id](#output\\_default\\_vpc\\_default\\_network\\_acl\\_id) | The ID of the default network ACL of the Default VPC |\n| <a name=\"output_default_vpc_default_route_table_id\"></a> [default\\_vpc\\_default\\_route\\_table\\_id](#output\\_default\\_vpc\\_default\\_route\\_table\\_id) | The ID of the default route table of the Default VPC |\n| <a name=\"output_default_vpc_default_security_group_id\"></a> [default\\_vpc\\_default\\_security\\_group\\_id](#output\\_default\\_vpc\\_default\\_security\\_group\\_id) | The ID of the security group created by default on Default VPC creation |\n| <a name=\"output_default_vpc_enable_dns_hostnames\"></a> [default\\_vpc\\_enable\\_dns\\_hostnames](#output\\_default\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the Default VPC has DNS hostname support |\n| <a name=\"output_default_vpc_enable_dns_support\"></a> [default\\_vpc\\_enable\\_dns\\_support](#output\\_default\\_vpc\\_enable\\_dns\\_support) | Whether or not the Default VPC has DNS support |\n| <a name=\"output_default_vpc_id\"></a> [default\\_vpc\\_id](#output\\_default\\_vpc\\_id) | The ID of the Default VPC |\n| <a name=\"output_default_vpc_instance_tenancy\"></a> [default\\_vpc\\_instance\\_tenancy](#output\\_default\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within Default VPC |\n| <a name=\"output_default_vpc_main_route_table_id\"></a> [default\\_vpc\\_main\\_route\\_table\\_id](#output\\_default\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with the Default VPC |\n| <a name=\"output_dhcp_options_id\"></a> [dhcp\\_options\\_id](#output\\_dhcp\\_options\\_id) | The ID of the DHCP options |\n| <a name=\"output_egress_only_internet_gateway_id\"></a> [egress\\_only\\_internet\\_gateway\\_id](#output\\_egress\\_only\\_internet\\_gateway\\_id) | The ID of the egress only Internet Gateway |\n| <a name=\"output_elasticache_network_acl_arn\"></a> [elasticache\\_network\\_acl\\_arn](#output\\_elasticache\\_network\\_acl\\_arn) | ARN of the elasticache network ACL |\n| <a name=\"output_elasticache_network_acl_id\"></a> [elasticache\\_network\\_acl\\_id](#output\\_elasticache\\_network\\_acl\\_id) | ID of the elasticache network ACL |\n| <a name=\"output_elasticache_route_table_association_ids\"></a> [elasticache\\_route\\_table\\_association\\_ids](#output\\_elasticache\\_route\\_table\\_association\\_ids) | List of IDs of the elasticache route table association |\n| <a name=\"output_elasticache_route_table_ids\"></a> [elasticache\\_route\\_table\\_ids](#output\\_elasticache\\_route\\_table\\_ids) | List of IDs of elasticache route tables |\n| <a name=\"output_elasticache_subnet_arns\"></a> [elasticache\\_subnet\\_arns](#output\\_elasticache\\_subnet\\_arns) | List of ARNs of elasticache subnets |\n| <a name=\"output_elasticache_subnet_group\"></a> [elasticache\\_subnet\\_group](#output\\_elasticache\\_subnet\\_group) | ID of elasticache subnet group |\n| <a name=\"output_elasticache_subnet_group_name\"></a> [elasticache\\_subnet\\_group\\_name](#output\\_elasticache\\_subnet\\_group\\_name) | Name of elasticache subnet group |\n| <a name=\"output_elasticache_subnets\"></a> [elasticache\\_subnets](#output\\_elasticache\\_subnets) | List of IDs of elasticache subnets |\n| <a name=\"output_elasticache_subnets_cidr_blocks\"></a> [elasticache\\_subnets\\_cidr\\_blocks](#output\\_elasticache\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of elasticache subnets |\n| <a name=\"output_elasticache_subnets_ipv6_cidr_blocks\"></a> [elasticache\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_elasticache\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of elasticache subnets in an IPv6 enabled VPC |\n| <a name=\"output_igw_arn\"></a> [igw\\_arn](#output\\_igw\\_arn) | The ARN of the Internet Gateway |\n| <a name=\"output_igw_id\"></a> [igw\\_id](#output\\_igw\\_id) | The ID of the Internet Gateway |\n| <a name=\"output_intra_network_acl_arn\"></a> [intra\\_network\\_acl\\_arn](#output\\_intra\\_network\\_acl\\_arn) | ARN of the intra network ACL |\n| <a name=\"output_intra_network_acl_id\"></a> [intra\\_network\\_acl\\_id](#output\\_intra\\_network\\_acl\\_id) | ID of the intra network ACL |\n| <a name=\"output_intra_route_table_association_ids\"></a> [intra\\_route\\_table\\_association\\_ids](#output\\_intra\\_route\\_table\\_association\\_ids) | List of IDs of the intra route table association |\n| <a name=\"output_intra_route_table_ids\"></a> [intra\\_route\\_table\\_ids](#output\\_intra\\_route\\_table\\_ids) | List of IDs of intra route tables |\n| <a name=\"output_intra_subnet_arns\"></a> [intra\\_subnet\\_arns](#output\\_intra\\_subnet\\_arns) | List of ARNs of intra subnets |\n| <a name=\"output_intra_subnets\"></a> [intra\\_subnets](#output\\_intra\\_subnets) | List of IDs of intra subnets |\n| <a name=\"output_intra_subnets_cidr_blocks\"></a> [intra\\_subnets\\_cidr\\_blocks](#output\\_intra\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of intra subnets |\n| <a name=\"output_intra_subnets_ipv6_cidr_blocks\"></a> [intra\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_intra\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of intra subnets in an IPv6 enabled VPC |\n| <a name=\"output_nat_ids\"></a> [nat\\_ids](#output\\_nat\\_ids) | List of allocation ID of Elastic IPs created for AWS NAT Gateway |\n| <a name=\"output_nat_public_ips\"></a> [nat\\_public\\_ips](#output\\_nat\\_public\\_ips) | List of public Elastic IPs created for AWS NAT Gateway |\n| <a name=\"output_natgw_ids\"></a> [natgw\\_ids](#output\\_natgw\\_ids) | List of NAT Gateway IDs |\n| <a name=\"output_outpost_network_acl_arn\"></a> [outpost\\_network\\_acl\\_arn](#output\\_outpost\\_network\\_acl\\_arn) | ARN of the outpost network ACL |\n| <a name=\"output_outpost_network_acl_id\"></a> [outpost\\_network\\_acl\\_id](#output\\_outpost\\_network\\_acl\\_id) | ID of the outpost network ACL |\n| <a name=\"output_outpost_subnet_arns\"></a> [outpost\\_subnet\\_arns](#output\\_outpost\\_subnet\\_arns) | List of ARNs of outpost subnets |\n| <a name=\"output_outpost_subnets\"></a> [outpost\\_subnets](#output\\_outpost\\_subnets) | List of IDs of outpost subnets |\n| <a name=\"output_outpost_subnets_cidr_blocks\"></a> [outpost\\_subnets\\_cidr\\_blocks](#output\\_outpost\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of outpost subnets |\n| <a name=\"output_outpost_subnets_ipv6_cidr_blocks\"></a> [outpost\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_outpost\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of outpost subnets in an IPv6 enabled VPC |\n| <a name=\"output_private_ipv6_egress_route_ids\"></a> [private\\_ipv6\\_egress\\_route\\_ids](#output\\_private\\_ipv6\\_egress\\_route\\_ids) | List of IDs of the ipv6 egress route |\n| <a name=\"output_private_nat_gateway_route_ids\"></a> [private\\_nat\\_gateway\\_route\\_ids](#output\\_private\\_nat\\_gateway\\_route\\_ids) | List of IDs of the private nat gateway route |\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for AWS VPC Deployment - Bash\nDESCRIPTION: This Bash code block demonstrates the initialization, planning, and application phases for Terraform, targeting the deployment of AWS VPC resources. No additional dependencies are needed beyond Terraform and a configured AWS provider. Users must run these commands in the example directory: 'terraform init' to initialize the working directory, 'terraform plan' to create an execution plan, and 'terraform apply' to deploy the described infrastructure. Key parameters, such as provider configuration and backend setup, are determined outside of this snippet. Inputs and outputs are managed via Terraform and are not explicitly included here.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/simple/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\\n$ terraform plan\\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Describing Output Variables for Terraform AWS VPC Module - Markdown\nDESCRIPTION: This snippet is a markdown table listing the exported output variables from the terraform-aws-vpc module, each accompanied by a brief description. There are no code execution requirements; the content is intended for documentation and reference, helping users of the module understand what resources and attributes will be available after applying the Terraform configuration. Inputs are not required, and outputs are purely reference material; key limitations are that this file is only documentation and not functional code.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/simple/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Outputs\\n\\n| Name | Description |\\n|------|-------------|\\n| <a name=\\\"output_cgw_arns\\\"></a> [cgw\\_arns](#output\\_cgw\\_arns) | List of ARNs of Customer Gateway |\\n| <a name=\\\"output_cgw_ids\\\"></a> [cgw\\_ids](#output\\_cgw\\_ids) | List of IDs of Customer Gateway |\\n| <a name=\\\"output_database_internet_gateway_route_id\\\"></a> [database\\_internet\\_gateway\\_route\\_id](#output\\_database\\_internet\\_gateway\\_route\\_id) | ID of the database internet gateway route |\\n| <a name=\\\"output_database_ipv6_egress_route_id\\\"></a> [database\\_ipv6\\_egress\\_route\\_id](#output\\_database\\_ipv6\\_egress\\_route\\_id) | ID of the database IPv6 egress route |\\n| <a name=\\\"output_database_nat_gateway_route_ids\\\"></a> [database\\_nat\\_gateway\\_route\\_ids](#output\\_database\\_nat\\_gateway\\_route\\_ids) | List of IDs of the database nat gateway route |\\n| <a name=\\\"output_database_network_acl_arn\\\"></a> [database\\_network\\_acl\\_arn](#output\\_database\\_network\\_acl\\_arn) | ARN of the database network ACL |\\n| <a name=\\\"output_database_network_acl_id\\\"></a> [database\\_network\\_acl\\_id](#output\\_database\\_network\\_acl\\_id) | ID of the database network ACL |\\n| <a name=\\\"output_database_route_table_association_ids\\\"></a> [database\\_route\\_table\\_association\\_ids](#output\\_database\\_route\\_table\\_association\\_ids) | List of IDs of the database route table association |\\n| <a name=\\\"output_database_route_table_ids\\\"></a> [database\\_route\\_table\\_ids](#output\\_database\\_route\\_table\\_ids) | List of IDs of database route tables |\\n| <a name=\\\"output_database_subnet_arns\\\"></a> [database\\_subnet\\_arns](#output\\_database\\_subnet\\_arns) | List of ARNs of database subnets |\\n| <a name=\\\"output_database_subnet_group\\\"></a> [database\\_subnet\\_group](#output\\_database\\_subnet\\_group) | ID of database subnet group |\\n| <a name=\\\"output_database_subnet_group_name\\\"></a> [database\\_subnet\\_group\\_name](#output\\_database\\_subnet\\_group\\_name) | Name of database subnet group |\\n| <a name=\\\"output_database_subnets\\\"></a> [database\\_subnets](#output\\_database\\_subnets) | List of IDs of database subnets |\\n| <a name=\\\"output_database_subnets_cidr_blocks\\\"></a> [database\\_subnets\\_cidr\\_blocks](#output\\_database\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of database subnets |\\n| <a name=\\\"output_database_subnets_ipv6_cidr_blocks\\\"></a> [database\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_database\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of database subnets in an IPv6 enabled VPC |\\n| <a name=\\\"output_default_network_acl_id\\\"></a> [default\\_network\\_acl\\_id](#output\\_default\\_network\\_acl\\_id) | The ID of the default network ACL |\\n| <a name=\\\"output_default_route_table_id\\\"></a> [default\\_route\\_table\\_id](#output\\_default\\_route\\_table\\_id) | The ID of the default route table |\\n| <a name=\\\"output_default_security_group_id\\\"></a> [default\\_security\\_group\\_id](#output\\_default\\_security\\_group\\_id) | The ID of the security group created by default on VPC creation |\\n| <a name=\\\"output_default_vpc_arn\\\"></a> [default\\_vpc\\_arn](#output\\_default\\_vpc\\_arn) | The ARN of the Default VPC |\\n| <a name=\\\"output_default_vpc_cidr_block\\\"></a> [default\\_vpc\\_cidr\\_block](#output\\_default\\_vpc\\_cidr\\_block) | The CIDR block of the Default VPC |\\n| <a name=\\\"output_default_vpc_default_network_acl_id\\\"></a> [default\\_vpc\\_default\\_network\\_acl\\_id](#output\\_default\\_vpc\\_default\\_network\\_acl\\_id) | The ID of the default network ACL of the Default VPC |\\n| <a name=\\\"output_default_vpc_default_route_table_id\\\"></a> [default\\_vpc\\_default\\_route\\_table\\_id](#output\\_default\\_vpc\\_default\\_route\\_table\\_id) | The ID of the default route table of the Default VPC |\\n| <a name=\\\"output_default_vpc_default_security_group_id\\\"></a> [default\\_vpc\\_default\\_security\\_group\\_id](#output\\_default\\_vpc\\_default\\_security\\_group\\_id) | The ID of the security group created by default on Default VPC creation |\\n| <a name=\\\"output_default_vpc_enable_dns_hostnames\\\"></a> [default\\_vpc\\_enable\\_dns\\_hostnames](#output\\_default\\_vpc\\_enable\\_dns\\_hostnames) | Whether or not the Default VPC has DNS hostname support |\\n| <a name=\\\"output_default_vpc_enable_dns_support\\\"></a> [default\\_vpc\\_enable\\_dns\\_support](#output\\_default\\_vpc\\_enable\\_dns\\_support) | Whether or not the Default VPC has DNS support |\\n| <a name=\\\"output_default_vpc_id\\\"></a> [default\\_vpc\\_id](#output\\_default\\_vpc\\_id) | The ID of the Default VPC |\\n| <a name=\\\"output_default_vpc_instance_tenancy\\\"></a> [default\\_vpc\\_instance\\_tenancy](#output\\_default\\_vpc\\_instance\\_tenancy) | Tenancy of instances spin up within Default VPC |\\n| <a name=\\\"output_default_vpc_main_route_table_id\\\"></a> [default\\_vpc\\_main\\_route\\_table\\_id](#output\\_default\\_vpc\\_main\\_route\\_table\\_id) | The ID of the main route table associated with the Default VPC |\\n| <a name=\\\"output_dhcp_options_id\\\"></a> [dhcp\\_options\\_id](#output\\_dhcp\\_options\\_id) | The ID of the DHCP options |\\n| <a name=\\\"output_egress_only_internet_gateway_id\\\"></a> [egress\\_only\\_internet\\_gateway\\_id](#output\\_egress\\_only\\_internet\\_gateway\\_id) | The ID of the egress only Internet Gateway |\\n| <a name=\\\"output_elasticache_network_acl_arn\\\"></a> [elasticache\\_network\\_acl\\_arn](#output\\_elasticache\\_network\\_acl\\_arn) | ARN of the elasticache network ACL |\\n| <a name=\\\"output_elasticache_network_acl_id\\\"></a> [elasticache\\_network\\_acl\\_id](#output\\_elasticache\\_network\\_acl\\_id) | ID of the elasticache network ACL |\\n| <a name=\\\"output_elasticache_route_table_association_ids\\\"></a> [elasticache\\_route\\_table\\_association\\_ids](#output\\_elasticache\\_route\\_table\\_association\\_ids) | List of IDs of the elasticache route table association |\\n| <a name=\\\"output_elasticache_route_table_ids\\\"></a> [elasticache\\_route\\_table\\_ids](#output\\_elasticache\\_route\\_table\\_ids) | List of IDs of elasticache route tables |\\n| <a name=\\\"output_elasticache_subnet_arns\\\"></a> [elasticache\\_subnet\\_arns](#output\\_elasticache\\_subnet\\_arns) | List of ARNs of elasticache subnets |\\n| <a name=\\\"output_elasticache_subnet_group\\\"></a> [elasticache\\_subnet\\_group](#output\\_elasticache\\_subnet\\_group) | ID of elasticache subnet group |\\n| <a name=\\\"output_elasticache_subnet_group_name\\\"></a> [elasticache\\_subnet\\_group\\_name](#output\\_elasticache\\_subnet\\_group\\_name) | Name of elasticache subnet group |\\n| <a name=\\\"output_elasticache_subnets\\\"></a> [elasticache\\_subnets](#output\\_elasticache\\_subnets) | List of IDs of elasticache subnets |\\n| <a name=\\\"output_elasticache_subnets_cidr_blocks\\\"></a> [elasticache\\_subnets\\_cidr\\_blocks](#output\\_elasticache\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of elasticache subnets |\\n| <a name=\\\"output_elasticache_subnets_ipv6_cidr_blocks\\\"></a> [elasticache\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_elasticache\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of elasticache subnets in an IPv6 enabled VPC |\\n| <a name=\\\"output_igw_arn\\\"></a> [igw\\_arn](#output\\_igw\\_arn) | The ARN of the Internet Gateway |\\n| <a name=\\\"output_igw_id\\\"></a> [igw\\_id](#output\\_igw\\_id) | The ID of the Internet Gateway |\\n| <a name=\\\"output_intra_network_acl_arn\\\"></a> [intra\\_network\\_acl\\_arn](#output\\_intra\\_network\\_acl\\_arn) | ARN of the intra network ACL |\\n| <a name=\\\"output_intra_network_acl_id\\\"></a> [intra\\_network\\_acl\\_id](#output\\_intra\\_network\\_acl\\_id) | ID of the intra network ACL |\\n| <a name=\\\"output_intra_route_table_association_ids\\\"></a> [intra\\_route\\_table\\_association\\_ids](#output\\_intra\\_route\\_table\\_association\\_ids) | List of IDs of the intra route table association |\\n| <a name=\\\"output_intra_route_table_ids\\\"></a> [intra\\_route\\_table\\_ids](#output\\_intra\\_route\\_table\\_ids) | List of IDs of intra route tables |\\n| <a name=\\\"output_intra_subnet_arns\\\"></a> [intra\\_subnet\\_arns](#output\\_intra\\_subnet\\_arns) | List of ARNs of intra subnets |\\n| <a name=\\\"output_intra_subnets\\\"></a> [intra\\_subnets](#output\\_intra\\_subnets) | List of IDs of intra subnets |\\n| <a name=\\\"output_intra_subnets_cidr_blocks\\\"></a> [intra\\_subnets\\_cidr\\_blocks](#output\\_intra\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of intra subnets |\\n| <a name=\\\"output_intra_subnets_ipv6_cidr_blocks\\\"></a> [intra\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_intra\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of intra subnets in an IPv6 enabled VPC |\\n| <a name=\\\"output_nat_ids\\\"></a> [nat\\_ids](#output\\_nat\\_ids) | List of allocation ID of Elastic IPs created for AWS NAT Gateway |\\n| <a name=\\\"output_nat_public_ips\\\"></a> [nat\\_public\\_ips](#output\\_nat\\_public\\_ips) | List of public Elastic IPs created for AWS NAT Gateway |\\n| <a name=\\\"output_natgw_ids\\\"></a> [natgw\\_ids](#output\\_natgw\\_ids) | List of NAT Gateway IDs |\\n| <a name=\\\"output_outpost_network_acl_arn\\\"></a> [outpost\\_network\\_acl\\_arn](#output\\_outpost\\_network\\_acl\\_arn) | ARN of the outpost network ACL |\\n| <a name=\\\"output_outpost_network_acl_id\\\"></a> [outpost\\_network\\_acl\\_id](#output\\_outpost\\_network\\_acl\\_id) | ID of the outpost network ACL |\\n| <a name=\\\"output_outpost_subnet_arns\\\"></a> [outpost\\_subnet\\_arns](#output\\_outpost\\_subnet\\_arns) | List of ARNs of outpost subnets |\\n| <a name=\\\"output_outpost_subnets\\\"></a> [outpost\\_subnets](#output\\_outpost\\_subnets) | List of IDs of outpost subnets |\\n| <a name=\\\"output_outpost_subnets_cidr_blocks\\\"></a> [outpost\\_subnets\\_cidr\\_blocks](#output\\_outpost\\_subnets\\_cidr\\_blocks) | List of cidr\\_blocks of outpost subnets |\\n| <a name=\\\"output_outpost_subnets_ipv6_cidr_blocks\\\"></a> [outpost\\_subnets\\_ipv6\\_cidr\\_blocks](#output\\_outpost\\_subnets\\_ipv6\\_cidr\\_blocks) | List of IPv6 cidr\\_blocks of outpost subnets in an IPv6 enabled VPC |\\n| <a name=\\\"output_private_ipv6_egress_route_ids\\\"></a> [private\\_ipv6\\_egress\\_route\\_ids](#output\\_private\\_ipv6\\_egress\\_route\\_ids) | List of IDs of the ipv6 egress route |\\n| <a name=\\\"output_private_nat_gateway_route_ids\\\"></a> [private\\_nat\\_gateway\\_route\\_ids](#output\\_private\\_nat\\_gateway\\_route\\_ids) | List of IDs of the private nat gateway route |\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands for VPC with Flow Logs\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the defined infrastructure changes for the VPC with Flow Logs configuration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/vpc-flow-logs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating AWS VPC Endpoints with Terraform\nDESCRIPTION: Example configuration for creating multiple VPC endpoints including S3, DynamoDB, SNS, and SQS. Demonstrates both interface and gateway endpoint configurations with custom subnet assignments, security groups, and DNS settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/modules/vpc-endpoints/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"endpoints\" {\n  source = \"terraform-aws-modules/vpc/aws//modules/vpc-endpoints\"\n\n  vpc_id             = \"vpc-12345678\"\n  security_group_ids = [\"sg-12345678\"]\n\n  endpoints = {\n    s3 = {\n      # interface endpoint\n      service             = \"s3\"\n      tags                = { Name = \"s3-vpc-endpoint\" }\n    },\n    dynamodb = {\n      # gateway endpoint\n      service         = \"dynamodb\"\n      route_table_ids = [\"rt-12322456\", \"rt-43433343\", \"rt-11223344\"]\n      tags            = { Name = \"dynamodb-vpc-endpoint\" }\n    },\n    sns = {\n      service               = \"sns\"\n      subnet_ids            = [\"subnet-12345678\", \"subnet-87654321\"]\n      subnet_configurations = [\n        {\n          ipv4      = \"10.8.34.10\"\n          subnet_id = \"subnet-12345678\"\n        },\n        {\n          ipv4      = \"10.8.35.10\"\n          subnet_id = \"subnet-87654321\"\n        }\n      ]\n      tags = { Name = \"sns-vpc-endpoint\" }\n    },\n    sqs = {\n      service             = \"sqs\"\n      private_dns_enabled = true\n      security_group_ids  = [\"sg-987654321\"]\n      subnet_ids          = [\"subnet-12345678\", \"subnet-87654321\"]\n      tags                = { Name = \"sqs-vpc-endpoint\" }\n    },\n  }\n\n  tags = {\n    Owner       = \"user\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Terraform VPC Endpoint State with terraform state mv - Shell\nDESCRIPTION: This snippet demonstrates how to move the Terraform state for existing VPC endpoint resources from the main module to the new sub-module structure using the 'terraform state mv' command. It is used during module upgrade to preserve state without recreating resources. Each command moves state for a specific VPC endpoint resource; all endpoints previously configured must be migrated. Ensure you replace resource names appropriately for your endpoints.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/UPGRADE-3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform state mv 'module.vpc.aws_vpc_endpoint.ssm[0]' 'module.vpc_endpoints.aws_vpc_endpoint.this[\"ssm\"]'\nterraform state mv 'module.vpc.aws_vpc_endpoint.ssmmessages[0]' 'module.vpc_endpoints.aws_vpc_endpoint.this[\"ssmmessages\"]'\nterraform state mv 'module.vpc.aws_vpc_endpoint.ec2[0]' 'module.vpc_endpoints.aws_vpc_endpoint.this[\"ec2\"]'\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Removed Variables in Terraform AWS VPC Module\nDESCRIPTION: This snippet lists the variables that have been removed in the v4.x upgrade of the Terraform AWS VPC module. It includes variables related to IPv6 address assignment and ClassicLink, which are no longer supported.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/UPGRADE-4.0.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `assign_ipv6_address_on_creation` has been removed; use the respective subnet type equivalent instead (i.e. - `public_subnet_assign_ipv6_address_on_creation`)\n- `enable_classiclink` has been removed; it is no longer supported by AWS https://github.com/hashicorp/terraform/issues/31730\n- `enable_classiclink_dns_support` has been removed; it is no longer supported by AWS https://github.com/hashicorp/terraform/issues/31730\n```\n\n----------------------------------------\n\nTITLE: Listing Added Variables in Terraform AWS VPC Module\nDESCRIPTION: This snippet enumerates the new variables added in the v4.x upgrade of the Terraform AWS VPC module. It includes variables for VPC configuration and subnet-specific settings related to DNS and IPv6.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/UPGRADE-4.0.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- VPC\n  - `ipv6_cidr_block_network_border_group`\n  - `enable_network_address_usage_metrics`\n- Subnets\n  - `*_subnet_enable_dns64` for each subnet type\n  - `*_subnet_enable_resource_name_dns_aaaa_record_on_launch` for each subnet type\n  - `*_subnet_enable_resource_name_dns_a_record_on_launch` for each subnet type\n  - `*_subnet_ipv6_native` for each subnet type\n  - `*_subnet_private_dns_hostname_type_on_launch` for each subnet type\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration - Bash\nDESCRIPTION: This snippet lists the basic Terraform CLI commands needed to initialize the working directory, review the plan, and apply the Terraform configuration for the VPC. Dependencies include Terraform (>= 1.0) and AWS CLI credentials set up for resource creation. The sequence expects a Terraform configuration in the directory and may incur AWS service charges; resources can be destroyed by running `terraform destroy` when no longer needed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/block-public-access/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Verifying VPC Block Public Access Options via AWS CLI - Bash\nDESCRIPTION: This bash command uses AWS CLI to query the configuration of VPC block public access options in a specific AWS region. Prerequisites include AWS CLI installed and configured with appropriate credentials; the output informs the user of the current enforcement settings on VPCs. The region `eu-west-1` is used as an example but can be changed as needed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/block-public-access/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 --region eu-west-1 describe-vpc-block-public-access-options\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Verifying VPC Block Public Access Exclusions via CLI - Bash\nDESCRIPTION: This two-step process retrieves exclusion IDs from Terraform output and then queries detailed exclusion configuration using AWS CLI. The first command outputs the exclusions managed by Terraform; the second uses the specific exclusion ID to verify its status on AWS. Both commands require the AWS CLI, Terraform CLI, and valid local configuration and authentication.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/block-public-access/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraform output vpc_block_public_access_exclusions\n\naws ec2 --region eu-west-1 describe-vpc-block-public-access-exclusions --exclusion-ids exclusion-id\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS VPC Resources - Markdown Table - Markdown\nDESCRIPTION: This Markdown snippet documents a comprehensive inventory of AWS resources managed by the terraform-aws-vpc module, using a table format. No dependencies are required for this snippet beyond Markdown rendering support. Each entry links a Terraform resource symbolic name to its type and documentation, aiding users in quickly locating definitions and understanding module scope. The input is a static Markdown table, and the output is the rendered resource list in viewers that support Markdown; no dynamic logic is present. No constraints except standard Markdown parsing.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/README.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Resources\n\n| Name | Type |\n|------|------|\n| [aws_cloudwatch_log_group.flow_log](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_group) | resource |\n| [aws_customer_gateway.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/customer_gateway) | resource |\n| [aws_db_subnet_group.database](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_subnet_group) | resource |\n| [aws_default_network_acl.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl) | resource |\n| [aws_default_route_table.default](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table) | resource |\n| [aws_default_security_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group) | resource |\n| [aws_default_vpc.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc) | resource |\n| [aws_egress_only_internet_gateway.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/egress_only_internet_gateway) | resource |\n| [aws_eip.nat](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip) | resource |\n| [aws_elasticache_subnet_group.elasticache](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_subnet_group) | resource |\n| [aws_flow_log.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/flow_log) | resource |\n| [aws_iam_policy.vpc_flow_log_cloudwatch](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_policy) | resource |\n| [aws_iam_role.vpc_flow_log_cloudwatch](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role) | resource |\n| [aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_role_policy_attachment) | resource |\n| [aws_internet_gateway.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/internet_gateway) | resource |\n| [aws_nat_gateway.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/nat_gateway) | resource |\n| [aws_network_acl.database](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl.elasticache](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl.intra](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl.outpost](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl.private](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl.public](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl.redshift](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl) | resource |\n| [aws_network_acl_rule.database_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.database_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.elasticache_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.elasticache_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.intra_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.intra_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.outpost_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.outpost_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.private_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.private_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.public_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.public_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.redshift_inbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_network_acl_rule.redshift_outbound](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl_rule) | resource |\n| [aws_redshift_subnet_group.redshift](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/redshift_subnet_group) | resource |\n| [aws_route.database_dns64_nat_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.database_internet_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.database_ipv6_egress](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.database_nat_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.private_dns64_nat_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.private_ipv6_egress](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.private_nat_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.public_internet_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route.public_internet_gateway_ipv6](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route) | resource |\n| [aws_route_table.database](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table) | resource |\n| [aws_route_table.elasticache](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table) | resource |\n| [aws_route_table.intra](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table) | resource |\n| [aws_route_table.private](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table) | resource |\n| [aws_route_table.public](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table) | resource |\n| [aws_route_table.redshift](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table) | resource |\n| [aws_route_table_association.database](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.elasticache](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.intra](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.outpost](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.private](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.public](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.redshift](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_route_table_association.redshift_public](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association) | resource |\n| [aws_subnet.database](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_subnet.elasticache](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_subnet.intra](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_subnet.outpost](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_subnet.private](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_subnet.public](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_subnet.redshift](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet) | resource |\n| [aws_vpc.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc) | resource |\n| [aws_vpc_block_public_access_exclusion.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_block_public_access_exclusion) | resource |\n| [aws_vpc_block_public_access_options.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_block_public_access_options) | resource |\n```\n\n----------------------------------------\n\nTITLE: AWS VPC Module Version Update - v2.71.0\nDESCRIPTION: Contains release notes and changes for version 2.71.0 of the terraform-aws-vpc module. The changes include updates to AWS provider requirements, new VPC endpoints, bug fixes for DMS endpoints, and additional VPC configuration options.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [v2.71.0] - 2021-02-20\n\n- chore: update documentation based on latest `terraform-docs`\n- feat: Upgraded minimum required versions of AWS provider to 3.10\n- fix: Specify an endpoint type for S3 VPC endpoint\n- fix: Fixed wrong count in DMS endpoint\n- feat: Adding VPC endpoint for DMS\n- fix: Adding missing RDS endpoint to output.tf\n```"
  }
]