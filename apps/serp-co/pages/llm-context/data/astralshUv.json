[
  {
    "owner": "astral-sh",
    "repo": "uv",
    "content": "TITLE: Defining Project Metadata in pyproject.toml - TOML\nDESCRIPTION: This snippet provides a minimal pyproject.toml file used to define the project's name and version, required by uv to identify the project root. No external dependencies are specified, but this structure is the foundation for further configuration needed to manage builds and dependencies. The project metadata must include at least a [project] table with name and version fields, resulting in a valid TOML file that can be used by uv and other Python tooling.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/layout.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"example\"\nversion = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies from pyproject.toml using uv pip compile\nDESCRIPTION: Compiles dependencies declared in `pyproject.toml` and writes the locked versions to `requirements.txt` using the `uv pip compile` command. The `-o` flag specifies the output file where the resolved, pinned dependencies will be stored.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile pyproject.toml -o requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Declaring Mandatory Dependencies in pyproject.toml (TOML)\nDESCRIPTION: Defines core project dependencies within the `[project]` table of a `pyproject.toml` file. This snippet shows how to list required packages like `httpx` and specify version constraints like `ruff>=0.3.0` under the `dependencies` key.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/dependencies.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\ndependencies = [\n  \"httpx\",\n  \"ruff>=0.3.0\"\n]\n```\n\n----------------------------------------\n\nTITLE: Syncing Environment with requirements.txt using uv pip sync\nDESCRIPTION: Installs packages specified in `requirements.txt` and removes any packages currently installed in the environment that are not listed in the file. This ensures the environment exactly matches the lockfile contents using `uv pip sync`, providing reproducibility.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip sync requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with uv tool run (Console)\nDESCRIPTION: This command shows the explicit form `uv tool run`, which is functionally identical to `uvx`. It runs the specified tool (`ruff`) in a temporary environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool run ruff\n```\n\n----------------------------------------\n\nTITLE: Adding Flask and Running it with uv run (Console)\nDESCRIPTION: This example first adds the 'flask' package as a dependency using `uv add`. It then uses `uv run` to execute the `flask run` command with specific arguments (`-p 3000`) within the project's managed environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv add flask\n$ uv run -- flask run -p 3000\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with uv - Console\nDESCRIPTION: This snippet demonstrates how to use the 'uv' command-line tool to create a new Python virtual environment with a specified interpreter version (3.11.6). The '--python' flag determines which Python version is used for the environment. The 'uv venv' command will automatically install and select the appropriate Python binary if not found locally. Prerequisites include having 'uv' installed and available in the system's PATH. No code dependencies apart from the CLI tool are required; the expected outcome is a new virtual environment set up with the requested Python version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv --python 3.11.6\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Virtual Environment with uv (Console)\nDESCRIPTION: This command uses `uv` to create a Python virtual environment in the default location, which is a directory named `.venv` in the current working directory. This isolates project dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv\n```\n\n----------------------------------------\n\nTITLE: Running the Latest Tool Version using uvx (Console)\nDESCRIPTION: This command uses the `command@latest` syntax with `uvx` to ensure the latest available version of the tool (`ruff`) is run. The `check` argument is passed to the `ruff` command.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff@latest check\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing a Python Project (uv CLI, Console)\nDESCRIPTION: This multi-step snippet demonstrates typical uv project management: initializing a project, adding dependencies, running commands, creating lockfiles, and syncing environments. It requires uv to be installed and assumes the user is in a Unix-like shell or terminal. The commands cover initialization, dependency management, and basic linters usage within an isolated environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv init example\\nInitialized project `example` at `/home/user/example`\\n\\n$ cd example\\n\\n$ uv add ruff\\nCreating virtual environment at: .venv\\nResolved 2 packages in 170ms\\n   Built example @ file:///home/user/example\\nPrepared 2 packages in 627ms\\nInstalled 2 packages in 1ms\\n + example==0.1.0 (from file:///home/user/example)\\n + ruff==0.5.0\\n\\n$ uv run ruff check\\nAll checks passed!\\n\\n$ uv lock\\nResolved 2 packages in 0.33ms\\n\\n$ uv sync\\nResolved 2 packages in 0.70ms\\nAudited 1 package in 0.02ms\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Python Projects with uv - Console\nDESCRIPTION: This multi-part shell session demonstrates initializing a new project, adding dependencies, running tools, locking requirements, and syncing packages using uv's project management commands. Dependencies include an installed uv tool and access to Python. Inputs are shell commands and package names; outputs include project creation, virtual environment setup, dependency installation, tool execution, and lockfile management.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv init example\nInitialized project `example` at `/home/user/example`\n\n$ cd example\n\n$ uv add ruff\nCreating virtual environment at: .venv\nResolved 2 packages in 170ms\n   Built example @ file:///home/user/example\nPrepared 2 packages in 627ms\nInstalled 2 packages in 1ms\n + example==0.1.0 (from file:///home/user/example)\n + ruff==0.5.4\n\n$ uv run ruff check\nAll checks passed!\n\n$ uv lock\nResolved 2 packages in 0.33ms\n\n$ uv sync\nResolved 2 packages in 0.70ms\nAudited 1 package in 0.02ms\n```\n\n----------------------------------------\n\nTITLE: Dockerizing a FastAPI Project with uv - Dockerfile\nDESCRIPTION: Offers a production-ready Dockerfile example to containerize a FastAPI project using uv for dependency installation. The script uses the python:3.12-slim base image, installs uv, copies the application, synchronizes dependencies with 'uv sync', and sets the CMD to run the FastAPI application. Assumes that all necessary files are present in the build context and that the fastapi executable is available in the virtual environment. Adjust for custom application entrypoints as needed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.12-slim\\n\\n# Install uv.\\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/\\n\\n# Copy the application into the container.\\nCOPY . /app\\n\\n# Install the application dependencies.\\nWORKDIR /app\\nRUN uv sync --frozen --no-cache\\n\\n# Run the application.\\nCMD [\"/app/.venv/bin/fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\", \"--host\", \"0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Explicitly Syncing Environment with uv sync (Console)\nDESCRIPTION: Manually synchronizes the project's virtual environment by installing packages specified in the `uv.lock` file. This ensures the environment matches the locked dependencies. By default, it performs an 'exact' sync, removing extraneous packages, and installs the project editable.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync\n```\n\n----------------------------------------\n\nTITLE: Explicitly Creating/Updating Lockfile with uv lock (Console)\nDESCRIPTION: Manually triggers the dependency resolution process to create or update the `uv.lock` file based on the current project dependencies specified in `pyproject.toml`. Although often automatic, this command allows explicit control.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv lock\n```\n\n----------------------------------------\n\nTITLE: Running the Default Main Script with uv run (Console)\nDESCRIPTION: Executes the `main.py` script located in the project's root directory using `uv run`. This command ensures the project's environment is synchronized before running the script.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv run main.py\nHello from hello-world!\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Virtual Environment with uv (Console)\nDESCRIPTION: This command uses `uv` to create a Python virtual environment with a specific name or path, in this case, `my-name`. This allows for custom naming or locating the environment outside the default `.venv` directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv my-name\n```\n\n----------------------------------------\n\nTITLE: Installing a Python Version with Version Constraints with uv - Console\nDESCRIPTION: This snippet shows how to install a Python version using constraints (e.g., '>=3.8,<3.10') with the 'uv python install' command. uv will select the latest version satisfying these version specifiers and install it as a managed interpreter. The argument must be quoted to avoid shell interpretation of special characters. This approach is useful for projects that require a compatible range rather than a single version number. Requires 'uv' to be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install '>=3.8,<3.10'\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Python Versions with uv\nDESCRIPTION: Shows how to install multiple specific Python versions (e.g., 3.11 and 3.12) in a single command by listing the version numbers after `uv python install`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.11 3.12\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Tool Version with uv tool install (console)\nDESCRIPTION: Command to install a specific version (`0.5.0`) of the `ruff` tool using `uv tool install`. This creates a persistent isolated environment for the tool in the uv tools directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install ruff==0.5.0\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Python Versions with uv - Console\nDESCRIPTION: This snippet demonstrates installing several Python versions (3.9, 3.10, 3.11) simultaneously by passing each version as an argument to 'uv python install'. The tool will handle each specified version, ensuring that all are downloaded and installed in the managed environment. This is beneficial for projects supporting/testing against multiple Python interpreters. Prerequisite: 'uv' installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.9 3.10 3.11\n```\n\n----------------------------------------\n\nTITLE: Applying Constraints during Locking using uv pip compile\nDESCRIPTION: Compiles dependencies from `requirements.in`, applying the version constraints specified in `constraints.txt` during resolution, using the `--constraint` flag with `uv pip compile`. This helps enforce specific version limits across the dependency tree.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile requirements.in --constraint constraints.txt\n```\n\n----------------------------------------\n\nTITLE: Manually Syncing and Running Commands (macOS/Linux Console)\nDESCRIPTION: Shows the manual workflow on macOS and Linux for ensuring the environment is up-to-date (`uv sync`), activating the virtual environment (`source .venv/bin/activate`), and then running commands like `flask run` or executing a Python script directly.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync\n$ source .venv/bin/activate\n$ flask run -p 3000\n$ python example.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environments with Specific Versions Using uv - Console\nDESCRIPTION: Shows creating a new virtual environment specifying a Python version, along with running a Python interpreter for a particular implementation/version (such as PyPy) using uv. Requires previously installed Python versions. Inputs are Python version specifiers; outputs are environment setup and interactive Python shell.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv --python 3.12.0\nUsing CPython 3.12.0\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n\n$ uv run --python pypy@3.8 -- python\nPython 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)\n[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>>\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Python Script with uv run (Console)\nDESCRIPTION: Executes the custom Python script `example.py` using `uv run`. This ensures the script runs within the project's virtual environment where its dependencies (like 'flask' from the previous example) are available.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uv run example.py\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool Package with Multiple Executables (Console)\nDESCRIPTION: This command installs the `httpie` package using `uv tool install`. This installs all executables provided by the package (e.g., `http`, `https`, `httpie`) into the persistent tool environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install httpie\n```\n\n----------------------------------------\n\nTITLE: Running Defined Scripts using uv run\nDESCRIPTION: Demonstrates how to execute a command-line script (e.g., `hello`) defined in `pyproject.toml` using the `uv run` command from the console. This command invokes the associated Python function within the project's environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv run hello\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Packages using uv pip Console Commands\nDESCRIPTION: These code snippets illustrate various ways to install Python packages using the uv pip CLI tool. They cover standard installations, installation with extras, multiple packages, applying version constraints, installing from local directories or GitHub (with specific refs), and installing editable packages. No additional Python code dependencies are assumed; commands are meant to be run in a terminal with uv installed, and depend on having the appropriate project and network access. Key parameters include package names, extra dependencies, version specifiers, local directories or file paths, and GitHub repository references.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/packages.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install flask\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install \"flask[dotenv]\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install flask ruff\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install 'ruff>=0.2.0'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install 'ruff==0.3.0'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install \"ruff @ ./projects/ruff\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install \"git+https://github.com/astral-sh/ruff\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ # Install a tag\n$ uv pip install \"git+https://github.com/astral-sh/ruff@v0.2.0\"\n\n$ # Install a commit\n$ uv pip install \"git+https://github.com/astral-sh/ruff@1fadefa67b26508cc59cf38e6130bde2243c929d\"\n\n$ # Install a branch\n$ uv pip install \"git+https://github.com/astral-sh/ruff@main\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -e .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -e \"ruff @ ./project/ruff\"\n```\n\n----------------------------------------\n\nTITLE: Providing Dependency Metadata Overrides (uv, TOML)\nDESCRIPTION: Accepts a list of static metadata dictionaries for specific dependencies, enabling the resolver to avoid source or registry queries for those dependencies. Each item must include at least the 'name' field, with optional 'version', 'requires-dist', 'requires-python', and 'provides-extras'. To be set under [tool.uv] or as a top-level list in uv.toml. Useful in monorepos, constrained environments, or to override registry data. Input is a list of dicts; output affects dependency resolution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ndependency-metadata = [\n    { name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \">=3.6\" },\n]\n```\n\nLANGUAGE: toml\nCODE:\n```\ndependency-metadata = [\n    { name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \">=3.6\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring `python-version` for uv pip in TOML\nDESCRIPTION: Sets the `python-version` option for `uv pip` resolution. This specifies the minimum Python version (e.g., `3.8`, `3.8.17`) that the resolved requirements should support. Affects dependency selection based on Python version compatibility markers. If patch is omitted, `.0` is assumed. The default value is `None` (use the target interpreter's version).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_113\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\npython-version = \"3.8\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\npython-version = \"3.8\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Packaged Application Project - Shell/Console\nDESCRIPTION: This shell/console snippet shows how to create a packaged Python application using the `--package` flag with `uv init`. The `tree` output displays the resulting directory layout, with code placed in the `src` directory under a namespaced package directory. The command expects `uv` to be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv init --package example-pkg\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tree example-pkg\nexample-pkg\n├── .python-version\n├── README.md\n├── pyproject.toml\n└── src\n    └── example_pkg\n        └── __init__.py\n```\n\n----------------------------------------\n\nTITLE: Using uv as a Drop-in Replacement for pip (uv CLI, Console)\nDESCRIPTION: This set of examples illustrates using uv as a replacement for pip and associated tools, compiling requirements files, creating virtual environments, and syncing locked requirements. The commands mimic familiar pip workflows but are executed much faster. Prerequisites are uv, the relevant requirements files, and Python.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile docs/requirements.in \\\\n   --universal \\\\n   --output-file docs/requirements.txt\\nResolved 43 packages in 12ms\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv\\nUsing Python 3.12.3\\nCreating virtual environment at: .venv\\nActivate with: source .venv/bin/activate\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip sync docs/requirements.txt\\nResolved 43 packages in 11ms\\nInstalled 43 packages in 208ms\\n + babel==2.15.0\\n + black==24.4.2\\n + certifi==2024.7.4\\n ...\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Python Version with uv\nDESCRIPTION: Demonstrates how to install a specific version of Python, in this case, version 3.12, using the `uv python install` command followed by the desired version number.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Installed Tools (Console)\nDESCRIPTION: This command uses `uv tool upgrade --all` to check for and install updates for all tools currently managed by `uv tool install`, respecting their individual installation constraints.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade --all\n```\n\n----------------------------------------\n\nTITLE: Triggering Automatic Python Download with uvx\nDESCRIPTION: Demonstrates `uv`'s automatic download capability. If Python 3.12 is required for a command executed via `uvx` (using `python@3.12`) and is not already installed, `uv` will automatically download and install it before running the specified command.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uvx python@3.12 -c \"print('hello world')\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Project for VS Code Jupyter Integration (Console)\nDESCRIPTION: Initializes a new `uv` project named 'project', changes into the project directory, adds `ipykernel` as a development dependency (required by VS Code's Jupyter extension), and opens the project folder in VS Code using the `code` command-line tool. This sequence prepares a project for use with Jupyter notebooks within the VS Code editor.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# Create a project.\n$ uv init project\n\n# Move into the project directory.\n$ cd project\n\n# Add ipykernel as a dev dependency.\n$ uv add --dev ipykernel\n\n# Open the project in VS Code.\n$ code .\n```\n\n----------------------------------------\n\nTITLE: Complete Project Structure After Running a uv Command (Text)\nDESCRIPTION: Shows the extended project structure after a `uv` command (like `uv run`, `uv sync`, or `uv lock`) has been executed. It includes the virtual environment directory (`.venv`) and the lock file (`uv.lock`) in addition to the initially created files.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .venv\n│   ├── bin\n│   ├── lib\n│   └── pyvenv.cfg\n├── .python-version\n├── README.md\n├── main.py\n├── pyproject.toml\n└── uv.lock\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from Files and Groups using uv pip Console Commands\nDESCRIPTION: This set of code snippets explains how to use uv pip to install multiple dependencies from files like requirements.txt or pyproject.toml, as well as specifying extras and dependency groups. The commands demonstrate file-based installs, handling extras or all extras, and group-based installation with options to specify project directories or target files for groups. Prerequisites include having the listed files or group configurations in the indicated locations. Users should ensure valid syntax for group and extra flags and that project files are properly structured.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/packages.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r requirements.txt\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r pyproject.toml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r pyproject.toml --extra foo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r pyproject.toml --all-extras\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install --group foo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install --project some/path/ --group foo --group bar\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages with uv pip (Requirements Format)\nDESCRIPTION: Lists all packages installed in the current Python environment using the `uv pip freeze` command. The output is formatted like a `requirements.txt` file, showing package names pinned to their specific installed versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/inspection.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip freeze\n```\n\n----------------------------------------\n\nTITLE: Adding ipykernel as a Development Dependency (Console)\nDESCRIPTION: Adds the `ipykernel` package as a development dependency to the current `uv` project. This is a prerequisite for creating a dedicated Jupyter kernel for the project, allowing notebooks to run directly within the project's isolated environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv add --dev ipykernel\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies with Exact Versions\nDESCRIPTION: Specifies the exact versions of required Python packages for the /astral-sh/uv project using the requirements.txt format. Each line follows the 'package==version' pattern, which is used by package managers like pip or uv to install these specific versions, ensuring environment reproducibility.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/airflow2-constraints.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadal==1.2.7\nalembic==1.8.1\namqp==5.1.1\nanyio==3.6.1\napache-airflow==2.3.4\napache-airflow-providers-amazon==5.0.0\napache-airflow-providers-celery==3.0.0\napache-airflow-providers-cncf-kubernetes==4.3.0\napache-airflow-providers-common-sql==1.1.0\napache-airflow-providers-docker==3.1.0\napache-airflow-providers-elasticsearch==4.2.0\napache-airflow-providers-ftp==3.1.0\napache-airflow-providers-google==8.3.0\napache-airflow-providers-grpc==3.0.0\napache-airflow-providers-hashicorp==3.1.0\napache-airflow-providers-http==4.0.0\napache-airflow-providers-imap==3.0.0\napache-airflow-providers-microsoft-azure==4.2.0\napache-airflow-providers-mysql==3.2.0\napache-airflow-providers-odbc==3.1.1\napache-airflow-providers-postgres==5.2.0\napache-airflow-providers-redis==3.0.0\napache-airflow-providers-sendgrid==3.0.0\napache-airflow-providers-sftp==4.0.0\napache-airflow-providers-slack==5.1.0\napache-airflow-providers-sqlite==3.2.0\napache-airflow-providers-ssh==3.1.0\napispec==3.3.2\nargcomplete==2.0.0\nasn1crypto==1.5.1\nattrs==22.1.0\nAuthlib==0.15.5\nazure-batch==12.0.0\nazure-common==1.1.28\nazure-core==1.25.0\nazure-cosmos==4.3.0\nazure-datalake-store==0.0.52\nazure-identity==1.10.0\nazure-keyvault-secrets==4.5.1\nazure-kusto-data==0.0.45\nazure-mgmt-containerinstance==1.5.0\nazure-mgmt-core==1.3.2\nazure-mgmt-datafactory==1.1.0\nazure-mgmt-datalake-nspkg==3.0.1\nazure-mgmt-datalake-store==0.5.0\nazure-mgmt-nspkg==3.0.2\nazure-mgmt-resource==21.1.0\nazure-nspkg==3.0.2\nazure-servicebus==7.8.0\nazure-storage-blob==12.8.1\nazure-storage-common==2.1.0\nazure-storage-file==2.1.0\nBabel==2.10.3\nbcrypt==3.2.2\nbeautifulsoup4==4.11.1\nbilliard==3.6.4.0\nblinker==1.5\nboto3==1.24.56\nbotocore==1.27.56\ncachelib==0.9.0\ncachetools==4.2.2\ncattrs==22.1.0\ncelery==5.2.7\ncertifi==2022.6.15\ncffi==1.15.1\ncharset-normalizer==2.0.12\nclick==8.1.3\nclick-didyoumean==0.3.0\nclick-plugins==1.1.1\nclick-repl==0.2.0\nclickclick==20.10.2\ncloudpickle==2.1.0\ncolorama==0.4.5\ncolorlog==4.8.0\ncommonmark==0.9.1\nconnexion==2.14.0\ncron_descriptor==1.2.31\ncroniter==1.3.5\ncryptography==36.0.2\ndask==2022.8.0\ndb-dtypes==1.0.3\ndecorator==5.1.1\nDeprecated==1.2.13\ndill==0.3.1.1\ndistlib==0.3.5\ndistributed==2022.8.0\ndnspython==2.2.1\ndocker==6.1.3\ndocutils==0.19\nelasticsearch==7.13.4\nelasticsearch-dbapi==0.2.9\nelasticsearch-dsl==7.4.0\nemail-validator==1.2.1\neventlet==0.33.1\nexceptiongroup==1.0.0rc8\nfilelock==3.8.0\nFlask==2.2.2\nFlask-AppBuilder==4.1.3\nFlask-Babel==2.0.0\nFlask-Caching==2.0.1\nFlask-JWT-Extended==4.4.4\nFlask-Login==0.6.2\nFlask-Session==0.4.0\nFlask-SQLAlchemy==2.5.1\nFlask-WTF==0.15.1\nflower==1.2.0\nfsspec==2022.7.1\nfuture==0.18.2\ngevent==21.12.0\ngoogle-ads==18.0.0\ngoogle-api-core==2.8.2\ngoogle-api-python-client==1.12.11\ngoogle-auth==2.10.0\ngoogle-auth-httplib2==0.1.0\ngoogle-auth-oauthlib==0.5.2\ngoogle-cloud-aiplatform==1.16.1\ngoogle-cloud-appengine-logging==1.1.3\ngoogle-cloud-audit-log==0.2.4\ngoogle-cloud-automl==2.8.0\ngoogle-cloud-bigquery==2.34.4\ngoogle-cloud-bigquery-datatransfer==3.7.0\ngoogle-cloud-bigquery-storage==2.14.1\ngoogle-cloud-bigtable==1.7.2\ngoogle-cloud-build==3.9.0\ngoogle-cloud-container==2.11.1\ngoogle-cloud-core==2.3.2\ngoogle-cloud-datacatalog==3.9.0\ngoogle-cloud-dataform==0.2.0\ngoogle-cloud-dataplex==1.1.0\ngoogle-cloud-dataproc==5.0.0\ngoogle-cloud-dataproc-metastore==1.6.0\ngoogle-cloud-dlp==1.0.2\ngoogle-cloud-kms==2.12.0\ngoogle-cloud-language==1.3.2\ngoogle-cloud-logging==3.2.1\ngoogle-cloud-memcache==1.4.1\ngoogle-cloud-monitoring==2.11.0\ngoogle-cloud-orchestration-airflow==1.4.1\ngoogle-cloud-os-login==2.7.1\ngoogle-cloud-pubsub==2.13.5\ngoogle-cloud-redis==2.9.0\ngoogle-cloud-resource-manager==1.6.0\ngoogle-cloud-secret-manager==1.0.2\ngoogle-cloud-spanner==1.19.3\ngoogle-cloud-speech==1.3.4\ngoogle-cloud-storage==1.44.0\ngoogle-cloud-tasks==2.10.1\ngoogle-cloud-texttospeech==1.0.3\ngoogle-cloud-translate==1.7.2\ngoogle-cloud-videointelligence==1.16.3\ngoogle-cloud-vision==1.0.2\ngoogle-cloud-workflows==1.7.1\ngoogle-crc32c==1.3.0\ngoogle-resumable-media==2.3.3\ngoogleapis-common-protos==1.56.4\ngraphviz==0.20.1\ngreenlet==1.1.2\ngrpc-google-iam-v1==0.12.4\ngrpcio==1.47.0\ngrpcio-gcp==0.2.2\ngrpcio-status==1.47.0\ngunicorn==20.1.0\nh11==0.12.0\nHeapDict==1.0.1\nhttpcore==0.15.0\nhttplib2==0.20.4\nhttpx==0.23.0\nhumanize==4.3.0\nhvac==1.1.1\nidna==3.3\ninflection==0.5.1\nisodate==0.6.1\nitsdangerous==2.1.2\nJinja2==3.1.2\njmespath==0.10.0\njson-merge-patch==0.2\njsonpath-ng==1.5.3\njsonschema==4.13.0\nkombu==5.2.4\nkubernetes==23.6.0\nlazy-object-proxy==1.7.1\nldap3==2.9.1\nlinkify-it-py==2.0.0\nlocket==1.0.0\nlockfile==0.12.2\nlooker-sdk==22.10.0\nlxml==4.9.1\nMako==1.2.1\nMarkdown==3.4.1\nmarkdown-it-py==2.1.0\nMarkupSafe==2.1.1\nmarshmallow==3.17.0\nmarshmallow-enum==1.5.1\nmarshmallow-oneofschema==3.0.1\nmarshmallow-sqlalchemy==0.26.1\nmdit-py-plugins==0.3.0\nmdurl==0.1.2\nmsal==1.18.0\nmsal-extensions==1.0.0\nmsgpack==1.0.4\nmsrest==0.7.1\nmsrestazure==0.6.4\nmypy-boto3-appflow==1.24.36.post1\nmypy-boto3-rds==1.24.54\nmypy-boto3-redshift-data==1.24.36.post1\nmysql-connector-python==8.0.30\nmysqlclient==2.1.1\nnumpy==1.22.4\noauthlib==3.2.0\npackaging==21.3\npandas==1.4.3\npandas-gbq==0.17.8\nparamiko==2.11.0\npartd==1.3.0\npathspec==0.9.0\npendulum==2.1.2\nplatformdirs==2.5.2\npluggy==1.0.0\nply==3.11\nportalocker==2.5.1\nprison==0.2.1\nprometheus-client==0.14.1\nprompt-toolkit==3.0.30\nproto-plus==1.19.6\nprotobuf==3.20.0\npsutil==5.9.1\npsycopg2-binary==2.9.3\npyarrow==6.0.1\npyasn1==0.4.8\npyasn1-modules==0.2.8\npycparser==2.21\npydata-google-auth==1.4.0\nPygments==2.13.0\nPyJWT==2.4.0\nPyNaCl==1.5.0\npyodbc==4.0.34\npyOpenSSL==22.0.0\npyparsing==3.0.9\npyrsistent==0.18.1\npython-daemon==2.3.1\npython-dateutil==2.8.2\npython-http-client==3.3.7\npython-ldap==3.4.2\npython-nvd3==0.15.0\npython-slugify==6.1.2\npytz==2022.1\npytzdata==2020.1\nPyYAML==6.0\nredis==3.5.3\nredshift-connector==2.0.908\nrequests==2.28.0\nrequests-oauthlib==1.3.1\nrequests-toolbelt==0.9.1\nrfc3986==1.5.0\nrich==12.5.1\nrsa==4.9\ns3transfer==0.6.0\nscramp==1.4.1\nsendgrid==6.9.7\nsetproctitle==1.3.2\nsix==1.16.0\nslack-sdk==3.18.1\nsniffio==1.2.0\nsortedcontainers==2.4.0\nsoupsieve==2.3.2.post1\nSQLAlchemy==1.4.27\nsqlalchemy-bigquery==1.4.4\nSQLAlchemy-JSONField==1.0.0\nsqlalchemy-redshift==0.8.11\nSQLAlchemy-Utils==0.38.3\nsqlparse==0.4.2\nsshtunnel==0.4.0\nstarkbank-ecdsa==2.0.3\nstatsd==3.3.0\nswagger-ui-bundle==0.0.9\ntabulate==0.8.10\ntblib==1.7.0\ntenacity==8.0.1\ntermcolor==1.1.0\ntext-unidecode==1.3\ntoolz==0.12.0\ntornado==6.1\ntyping_extensions==4.3.0\nuamqp==1.6.0\nuc-micro-py==1.0.1\nunicodecsv==0.14.1\nuritemplate==3.0.1\nurllib3==1.26.11\nvine==5.0.0\nvirtualenv==20.16.3\nwatchtower==2.0.1\nwcwidth==0.2.5\nwebsocket-client==1.3.3\nWerkzeug==2.2.2\nwrapt==1.14.1\nWTForms==2.3.3\nzict==2.2.0\nzope.event==4.5.0\nzope.interface==5.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Patch Version of Python with uv - Console\nDESCRIPTION: This snippet uses 'uv python install' to install the newest patch release for the specified Python minor version (3.12). When the patch release is omitted, uv will automatically select and install the latest available version within that minor family (e.g., 3.12.x). This is useful when only the most up-to-date stable release within a version branch is desired. Requires 'uv' installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12\n```\n\n----------------------------------------\n\nTITLE: Self-updating uv Installation (Bash)\nDESCRIPTION: This snippet lets users update their uv installation to the latest version using the CLI. Requires a standalone installer-based installation of uv. The command checks for and applies any available updates.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv self update\n```\n\n----------------------------------------\n\nTITLE: Triggering Automatic Python Download with uv venv\nDESCRIPTION: Shows that `uv` will automatically download and install the latest Python version if no Python installations are found on the system when attempting to create a virtual environment using `uv venv`. This ensures a Python interpreter is available for the new environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv\n```\n\n----------------------------------------\n\nTITLE: Defining Build Constraints and Hashes in a Text File\nDESCRIPTION: Illustrates the content format for a constraints file (e.g., `constraints.txt`). This file specifies exact versions and corresponding secure hashes (SHA256 in this example) for build-time dependencies. Using such a file with `uv build --build-constraint` ensures reproducible builds by pinning dependency versions and verifying their integrity.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/build.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsetuptools==68.2.2 --hash=sha256:b454a35605876da60632df1a60f736524eb73cc47bbc9f3f1ef1b644de74fd2a\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Packages using uv pip Console Commands\nDESCRIPTION: These examples show how to remove installed Python packages using the uv pip CLI utility. You can uninstall single or multiple packages by specifying package names as arguments. No other dependencies are required beyond uv being installed. The primary parameters are the names of one or more installed packages to be removed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/packages.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip uninstall flask\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip uninstall flask ruff\n```\n\n----------------------------------------\n\nTITLE: Separating Build Dependencies using Optional Dependencies in pyproject.toml (TOML)\nDESCRIPTION: Illustrates structuring `pyproject.toml` to manage build dependencies for packages installed without build isolation (like `cchardet`). It separates build tools (`setuptools`, `cython`) into a `build` extra and the target package (`cchardet`) into a `compile` extra under `[project.optional-dependencies]`, facilitating a two-step installation process. The `tool.uv.no-build-isolation-package` setting remains crucial for disabling isolation for `cchardet`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = []\n\n[project.optional-dependencies]\nbuild = [\"setuptools\", \"cython\"]\ncompile = [\"cchardet\"]\n\n[tool.uv]\nno-build-isolation-package = [\"cchardet\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with Extras using --from with uvx (Console)\nDESCRIPTION: This command demonstrates using the `--from` option with `uvx` to install a tool (`mypy`) with specific extras (`faster-cache`, `reports`). Arguments (`--xml-report mypy_report`) are passed to the `mypy` command.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from 'mypy[faster-cache,reports]' mypy --xml-report mypy_report\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Specific Dependency with uv lock --upgrade-package (Console)\nDESCRIPTION: Updates the `uv.lock` file by upgrading only the specified package (`<package>`) to the latest version allowed by the project's constraints. Other locked dependencies remain at their currently locked versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv lock --upgrade-package <package>\n```\n\n----------------------------------------\n\nTITLE: Installing Python CLI Tools with uv - Console\nDESCRIPTION: Shows installation of a Python-based CLI tool using 'uv tool install', followed by usage of the installed executable. Requires uv and a compatible environment. Input is the installation command; output is tool installation and a version check.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install ruff\nResolved 1 package in 6ms\nInstalled 1 package in 2ms\n + ruff==0.5.4\nInstalled 1 executable: ruff\n\n$ ruff --version\nruff 0.5.4\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies and Constraints\nDESCRIPTION: This configuration snippet specifies Python package requirements. The `-c constraints-b.txt` line includes version constraints from an external file, ensuring dependency versions align with those specified in `constraints-b.txt`. The `django-debug-toolbar<2.2` line defines a direct dependency requirement for the `django-debug-toolbar` package, restricting it to versions strictly less than 2.2. This format is typically processed by Python package installers like pip or uv.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/constraints-a.txt#_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n-c constraints-b.txt\ndjango-debug-toolbar<2.2\n```\n\n----------------------------------------\n\nTITLE: Installing Default Python Executables with uv (Preview) - Console\nDESCRIPTION: This snippet demonstrates the installation of 'python' and 'python3' executables for a specific Python version (3.12) using 'uv python install' with both '--default' and '--preview' flags. This operation will update or create the standard symlinked executables in '~/.local/bin', enabling easy access to the managed Python version. Existing managed executables may be overwritten, but non-managed ones are preserved unless '--force' is used.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12 --default --preview\n```\n\n----------------------------------------\n\nTITLE: Re-installing a Tool to Update Version Constraints (Console)\nDESCRIPTION: This command uses `uv tool install` again for an already installed tool (`ruff`), but with a new version constraint (`>=0.4`). This effectively replaces the old constraints and installs/upgrades `ruff` according to the new requirement.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install ruff>=0.4\n```\n\n----------------------------------------\n\nTITLE: Compiling Platform-Independent Requirements File with uv pip - Console\nDESCRIPTION: Shows using uv's pip interface to compile a requirements.in file into a universal requirements.txt, supporting reproducible installations. Requires source and target file paths. Input is the uv pip command; output is dependency resolution results.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile docs/requirements.in \\\n   --universal \\\n   --output-file docs/requirements.txt\nResolved 43 packages in 12ms\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Project Directory Structure - Shell/Console\nDESCRIPTION: This snippet illustrates how to use the shell to run the `uv init` command, which scaffolds the basic directory layout for a new Python application project. The command creates necessary files such as `pyproject.toml`, `main.py`, a Python version pin file, and a README. There are no prerequisites aside from having `uv` installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv init example-app\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tree example-app\nexample-app\n├── .python-version\n├── README.md\n├── main.py\n└── pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies using uv sync (Console)\nDESCRIPTION: Example command using `uv sync --extra build` to install dependencies listed under the `build` optional dependency group defined in `pyproject.toml`. This step is required before installing packages (like `cchardet` in the example) that need these build tools present in the environment and have build isolation disabled.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv sync --extra build\n + cython==3.0.11\n + foo==0.1.0 (from file:///Users/crmarsh/workspace/uv/foo)\n + setuptools==73.0.1\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Python with uv\nDESCRIPTION: This command installs the latest available Python version managed by `uv`. It utilizes distributions from the Astral `python-build-standalone` project as official distributable binaries are not published by Python itself. Once installed, this Python version will be used automatically by subsequent `uv` commands.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install\n```\n\n----------------------------------------\n\nTITLE: Upgrading an Installed Tool Environment with uv tool upgrade (console)\nDESCRIPTION: Command to upgrade all packages within the isolated environment for the installed tool `black`. It respects the version constraints specified during the initial installation.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade black\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Entry Points in TOML\nDESCRIPTION: Registers a package (`example_plugin_a`) as a plugin under the group `example.plugins` within the `pyproject.toml` file using the `[project.entry-points.'<group>']` table. This allows the main application (`example`) to discover and load the plugin. Requires a build system.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project.entry-points.'example.plugins']\na = \"example_plugin_a\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Tools with Version Specifiers using uv tool install (console)\nDESCRIPTION: Examples of using `uv tool install` with version specifiers like `@latest` to install the newest version or `@0.6.0` to install a specific version of the `ruff` tool.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install ruff@latest\n$ uv tool install ruff@0.6.0\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool from a Git Repository (Console)\nDESCRIPTION: This command uses `uv tool install` to install a tool directly from a Git repository URL. The specified package will be installed persistently.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install git+https://github.com/httpie/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Extras with uv sync while Retaining Dependencies (Console)\nDESCRIPTION: Demonstrates a two-step `uv sync` process to install both build dependencies and the target package without removing the build dependencies. Running `uv sync --extra build` first installs the build tools. Then, running `uv sync --extra build --extra compile` installs the target package while ensuring the build dependencies are also included and retained in the environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv sync --extra build\n$ uv sync --extra build --extra compile\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a uv Workspace with Members and Sources in pyproject.toml\nDESCRIPTION: This TOML snippet demonstrates how to configure a `uv` workspace root in `pyproject.toml`. It defines the project metadata, specifies workspace members using glob patterns under `[tool.uv.workspace].members` (e.g., `packages/*`), excludes specific directories (`packages/seeds`), and declares a dependency (`bird-feeder`) that should be sourced from within the workspace using `[tool.uv.sources]` by setting `workspace = true`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/workspaces.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm>=4,<5\"]\n\n[tool.uv.sources]\nbird-feeder = { workspace = true }\n\n[tool.uv.workspace]\nmembers = [\"packages/*\"]\nexclude = [\"packages/seeds\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Tool from a Specific Git Tag using uvx (Console)\nDESCRIPTION: This command shows how to run a tool (`httpie`) using `uvx` and `--from`, specifying a particular Git tag (`3.2.4`) within the repository URL.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from git+https://github.com/httpie/cli@3.2.4 httpie\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Isolation for a Package in pyproject.toml (TOML)\nDESCRIPTION: Demonstrates configuring `uv` within `pyproject.toml` to disable PEP 517 build isolation for the `cchardet` package. This is necessary for packages incompatible with isolated builds, often due to heavy or legacy build systems. The `no-build-isolation-package` list under the `[tool.uv]` section specifies such packages.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = [\"cchardet\"]\n\n[tool.uv]\nno-build-isolation-package = [\"cchardet\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Including Extras/Optional Dependencies via 'extra' in uv Pip - TOML\nDESCRIPTION: Shows how to specify which extras/optional dependencies should be included by setting the 'extra' array of strings. Only applies to pyproject.toml, setup.py, and setup.cfg sources. This enables install-time selection of features or dependency sets for a project.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_84\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nextra = [\"dev\", \"docs\"]\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nextra = [\"dev\", \"docs\"]\n\n```\n\n----------------------------------------\n\nTITLE: Running a Tool from a Specific Git Commit using uvx (Console)\nDESCRIPTION: This command uses `uvx` and `--from` to run a tool (`httpie`) from a precise Git commit hash (`2843b87`) specified in the repository URL.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from git+https://github.com/httpie/cli@2843b87 httpie\n```\n\n----------------------------------------\n\nTITLE: Defining Conflicting Optional Dependencies in pyproject.toml (TOML)\nDESCRIPTION: Example `pyproject.toml` snippet defining two optional dependency extras, `extra1` and `extra2`, under `[project.optional-dependencies]`. These extras conflict because they require different, incompatible versions of the `numpy` package (`2.1.2` vs `2.0.0`). Without further configuration, `uv` would fail to resolve these dependencies if both extras were requested or considered together.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project.optional-dependencies]\nextra1 = [\"numpy==2.1.2\"]\nextra2 = [\"numpy==2.0.0\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing uv Using curl - Console\nDESCRIPTION: This snippet shows how to install uv on macOS and Linux using a single-line curl command that fetches and runs a shell installer script. No prerequisites other than curl and sh are required. The input is the curl command, and the output is the installation of uv in the environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Python Versions with UV_PYTHON Environment Variable (YAML)\nDESCRIPTION: Describes an alternative method where the UV_PYTHON environment variable is used to control the Python version for each job within a matrix build. Dependencies: the appropriate runner and an environment matrix. This approach can be used if not relying on astral-sh/setup-uv's python-version option.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\\n  build:\\n    name: continuous-integration\\n    runs-on: ubuntu-latest\\n    strategy:\\n      matrix:\\n        python-version:\\n          - \"3.10\"\\n          - \"3.11\"\\n          - \"3.12\"\\n    env:\\n      UV_PYTHON: ${{ matrix.python-version }}\\n    steps:\\n      - uses: actions/checkout@v4\n```\n\n----------------------------------------\n\nTITLE: Installing uv via pipx (Bash)\nDESCRIPTION: This example demonstrates installing uv globally with pipx, which provides isolated Python environments for CLI tools. pipx is required as a prerequisite. After installation, uv will be available as a global command.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Or pipx.\\npipx install uv\n```\n\n----------------------------------------\n\nTITLE: Configuring Limited Resolution Environments for macOS/Linux in pyproject.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to use the `[tool.uv.environments]` setting within a `pyproject.toml` file to constrain `uv`'s universal resolver. It specifies that the dependency resolution should only consider macOS (`sys_platform == 'darwin'`) and Linux (`sys_platform == 'linux'`) environments, effectively excluding Windows and other platforms from the universal lockfile generation. This is useful for projects that only target these specific operating systems. The entries must be disjoint environment markers.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nenvironments = [\n    \"sys_platform == 'darwin'\",\n    \"sys_platform == 'linux'\",\n]\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Python Virtual Environment (Console)\nDESCRIPTION: This command deactivates the currently active Python virtual environment in the shell. It restores the shell's environment variables (like `PATH`) to their state before the environment was activated, effectively exiting the isolated environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with uv run using Console\nDESCRIPTION: Demonstrates using the `uv run` command to execute a Python script while loading environment variables from a `.env` file. The first command creates a simple `.env` file. The second command uses `uv run --env-file .env` to specify the file containing environment variables, then runs a Python command-line script (`python -c '...'`) that accesses the loaded variable (`MY_VAR`) using `os.getenv`. This requires Python and the `uv` tool to be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/files.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"MY_VAR='Hello, world!'\" > .env\n$ uv run --env-file .env -- python -c 'import os; print(os.getenv(\"MY_VAR\"))'\nHello, world!\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Conflicting Extras in TOML\nDESCRIPTION: Shows how to define conflicting extras (`extra1` and `extra2`) using the `conflicts` key in `pyproject.toml` under `[tool.uv]`. This tells `uv` that these extras are mutually exclusive and should be resolved in different forks to avoid dependency incompatibilities, failing installation if both are activated.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\n# Require that `package[extra1]` and `package[extra2]` are resolved\n# in different forks so that they cannot conflict with one another.\nconflicts = [\n    [\n        { extra = \"extra1\" },\n        { extra = \"extra2\" },\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Running a Legacy Windows Script without Extension with uv tool run (Console)\nDESCRIPTION: This command shows that `uv tool run` (or `uvx`) can automatically find and execute legacy Windows scripts (`.ps1`, `.cmd`, `.bat`) even without specifying the file extension. It runs the `nuitka` script from the specified package version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool run --from nuitka==2.6.7 nuitka --version\n```\n\n----------------------------------------\n\nTITLE: Defining a Flat Index in uv Configuration (TOML)\nDESCRIPTION: Declares a flat package index in uv using 'format = \"flat\"' in pyproject.toml, for referencing local directories or HTML indexes of distribution files. Flat indexes support package pinning and explicit source configuration. Requires the specified path/URL to contain accessible distribution files.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"example\"\nurl = \"/path/to/directory\"\nformat = \"flat\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Dependency Groups in TOML\nDESCRIPTION: Demonstrates setting the `default-groups` key in `pyproject.toml` under `[tool.uv]` to specify which dependency groups (in this case, `docs`) should be installed by default with commands like `uv run` or `uv sync`. The default value is `[\"dev\"]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ndefault-groups = [\"docs\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Project-Specific Jupyter Kernel (Console)\nDESCRIPTION: Creates and installs a Jupyter kernel specification named 'project' for the current user. This kernel is linked to the Python interpreter within the project's virtual environment (specified by `--env VIRTUAL_ENV $(pwd)/.venv`). This requires `ipykernel` to be installed and relies on the `VIRTUAL_ENV` environment variable being set or the path being explicitly provided.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv run ipython kernel install --user --env VIRTUAL_ENV $(pwd)/.venv --name=project\n```\n\n----------------------------------------\n\nTITLE: Initial Project Structure Created by uv init (Text)\nDESCRIPTION: Illustrates the basic file structure generated by the `uv init` command. It includes a `.python-version` file, a `README.md`, a sample `main.py`, and the core `pyproject.toml` configuration file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .python-version\n├── README.md\n├── main.py\n└── pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Forcing Latest Tool Version Run with uvx (console)\nDESCRIPTION: Illustrates using the `@latest` suffix with `uvx` to ensure the absolute latest version of the `ruff` tool is fetched and run, refreshing the cache if necessary.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff@latest --version\n0.6.2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Group Exclusion Precedence in uv sync (Console)\nDESCRIPTION: Illustrates that exclusion flags for dependency groups take precedence over inclusion flags during synchronization. In this command, `--no-group foo` overrides `--group foo`, meaning the 'foo' group will not be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync --no-group foo --group foo\n```\n\n----------------------------------------\n\nTITLE: Running and Installing Tools with uv (uv CLI, Console)\nDESCRIPTION: These examples illustrate running a tool in an ephemeral environment using uvx and installing a tool for persistent CLI usage. They require uv to be installed and internet access for package downloads. Outputs include package installations, ASCII art, and version checks.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uvx pycowsay 'hello world!'\\nResolved 1 package in 167ms\\nInstalled 1 package in 9ms\\n + pycowsay==0.0.0.2\\n  \"\"\"\\n\\n  ------------\\n< hello world! >\\n  ------------\\n   \\   ^__^\\n    \\  (oo)\\_______\\n       (__)\\       )\\/\\n           ||----w |\\n           ||     ||\\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install ruff\\nResolved 1 package in 6ms\\nInstalled 1 package in 2ms\\n + ruff==0.5.0\\nInstalled 1 executable: ruff\\n\\n$ ruff --version\\nruff 0.5.0\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Installed Dependencies Using uv pip sync - Console\nDESCRIPTION: Demonstrates synchronizing the project's installed dependencies to match the locked requirements using uv pip sync. Requires a requirements.txt file generated by uv or pip-tools. Input is the command with the requirements file; output is install logs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip sync docs/requirements.txt\nResolved 43 packages in 11ms\nInstalled 43 packages in 208ms\n + babel==2.15.0\n + black==24.4.2\n + certifi==2024.7.4\n ...\n```\n\n----------------------------------------\n\nTITLE: Auto-generated requirements.txt After Compiling with uv (Python requirements file)\nDESCRIPTION: This requirements.txt file is an example output produced by uv after compiling a requirements.in that specifies 'flask>=2.0.0'. It includes all direct and transitive dependencies, their pinned versions, and comments indicating provenance. The file is ordered and formatted to clearly show dependency relationships. Inputs are requirements.in, and the output is a full, resolved list for reproducible installs; limitations depend on the accuracy of the upstream dependency graph.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nblinker==1.7.0\n    # via flask\nclick==8.1.7\n    # via flask\nflask==3.0.0\nitsdangerous==2.1.2\n    # via flask\njinja2==3.1.2\n    # via flask\nmarkupsafe==2.1.3\n    # via\n    #   jinja2\n    #   werkzeug\nwerkzeug==3.0.1\n    # via flask\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool Persistently with uv tool install (Console)\nDESCRIPTION: This command uses `uv tool install` to install a Python package (`ruff`) as a tool into a persistent, isolated environment managed by `uv`. The tool's executables are added to the PATH if configured.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install ruff\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in requirements.in for UV Resolution\nDESCRIPTION: Example `requirements.in` file specifying `starlette` and `fastapi` as direct dependencies. This file serves as input for dependency resolution tools like `uv pip compile` to generate a locked requirements file, demonstrating how different resolution strategies handle potential conflicts.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compatibility.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"requirements.in\"\nstarlette\nfastapi\n```\n```\n\n----------------------------------------\n\nTITLE: Allowing Modification of Externally Managed Python Installations in uv - TOML\nDESCRIPTION: Enables uv to modify an EXTERNALLY-MANAGED Python installation, typically for use in CI environments. The 'break-system-packages' option should be set to 'true' as a boolean, placed under the relevant TOML section. Usage is discouraged outside of automation scenarios due to possible system conflicts.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_73\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nbreak-system-packages = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nbreak-system-packages = true\n\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Lab after Kernel Creation (Console)\nDESCRIPTION: Starts the Jupyter Lab server using `uv run` after a project-specific kernel has been created. Users can then select the newly created kernel (e.g., 'project') when creating or opening notebooks to ensure code executes within the project's `uv`-managed environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with jupyter jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Example Resolved Dependencies (Prioritizing Latest Starlette) using UV\nDESCRIPTION: An example `requirements.txt` file generated by `uv pip compile` from the `requirements.in`. This resolution outcome prioritizes the latest `starlette` version (`0.37.2`), which consequently requires using an older compatible `fastapi` version (`0.1.17`) due to dependency constraints imposed by `fastapi`. This illustrates one possible valid resolution set.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compatibility.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"requirements.txt\"\n# This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nannotated-types==0.6.0\n    # via pydantic\nanyio==4.3.0\n    # via starlette\nfastapi==0.1.17\nidna==3.6\n    # via anyio\npydantic==2.6.3\n    # via fastapi\npydantic-core==2.16.3\n    # via pydantic\nsniffio==1.3.1\n    # via anyio\nstarlette==0.37.2\n    # via fastapi\ntyping-extensions==4.10.0\n    # via\n    #   pydantic\n    #   pydantic-core\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment Using uv - Console\nDESCRIPTION: Illustrates creating a virtual environment in the current directory with uv. Requires at least one available Python interpreter. Input is a shell command; output is creation confirmation and environment activation instructions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv\nUsing CPython 3.12.3\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Emitting Index URLs in uv Pip Compile Output - TOML\nDESCRIPTION: Shows how to enable inclusion of '--index-url' and '--extra-index-url' entries in generated requirement files by setting 'emit-index-url = true' under the relevant table in the TOML configuration. This ensures any custom indices are preserved for downstream builds.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_81\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nemit-index-url = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nemit-index-url = true\n\n```\n\n----------------------------------------\n\nTITLE: Specifying an Editable Local Python Package with Extras\nDESCRIPTION: Specifies the 'black' package as an editable installation from the relative path `./scripts/packages/black_editable`, additionally requesting the optional 'dev' extras. This installs the package along with its specified development dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/bare-url.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n./scripts/packages/black_editable[dev]\n```\n\n----------------------------------------\n\nTITLE: Running a Legacy Windows Script (.cmd) with uv tool run (Console)\nDESCRIPTION: This command demonstrates running a specific legacy Windows script (`nuitka.cmd`) provided by a package (`nuitka==2.6.7`) using `uv tool run --from`. The `--version` argument is passed to the script.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool run --from nuitka==2.6.7 nuitka.cmd --version\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Python Implementation with uv - Console\nDESCRIPTION: This snippet shows how to install a non-standard Python implementation (e.g., PyPy) using the 'uv python install' command by specifying the implementation name. uv supports popular alternatives such as PyPy and will handle downloading and configuring the interpreter appropriately. This functionality is helpful for developers needing to test code across different Python runtimes. Only 'uv' needs to be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install pypy\n```\n\n----------------------------------------\n\nTITLE: Building with uv Using Constraints and Hash Verification\nDESCRIPTION: Shows how to invoke `uv build` using a constraints file via the `--build-constraint` option and enforcing hash verification with `--require-hashes`. This command builds the project while ensuring that the build dependencies specified in `constraints.txt` are used at the exact versions listed and that their downloaded distributions match the provided hashes, leading to a secure and reproducible build process.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/build.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv build --build-constraint constraints.txt --require-hashes\n```\n\n----------------------------------------\n\nTITLE: Installing a Python Executable with uv (Preview) - Console\nDESCRIPTION: This snippet illustrates installing a version-specific Python executable (3.12) into the user’s PATH using 'uv python install' with the '--preview' option. The resulting binary, such as 'python3.12', will be placed in '~/.local/bin'. The '--preview' flag enables experimental functionality and the command is currently subject to change. The user should ensure that '~/.local/bin' is part of their PATH to invoke the new executable directly.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12 --preview\n```\n\n----------------------------------------\n\nTITLE: Setting up Standalone Jupyter with uv (macOS/Linux)\nDESCRIPTION: Creates a new seeded virtual environment using `uv venv --seed`, installs `pydantic` and `jupyterlab` into it using `uv pip install`, and then starts Jupyter Lab directly from the virtual environment's `bin` directory. This setup is for using Jupyter with `uv` outside of a defined project structure.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv --seed\n$ uv pip install pydantic\n$ uv pip install jupyterlab\n$ .venv/bin/jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with Specific Versioned Extra Dependencies (console)\nDESCRIPTION: Shows how to specify a particular version (`<version>`) for an extra dependency (`<extra-package>`) when using `uvx --with`. Package resolution will fail if the requested version conflicts with the tool's requirements.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --with <extra-package>==<version> <tool-package>\n```\n\n----------------------------------------\n\nTITLE: Managing Python Versions with uv (uv CLI, Console)\nDESCRIPTION: These examples demonstrate installing and switching Python versions using uv. They require uv, administrative or user-level permission to install interpreters, and internet connectivity. Outputs detail the search, installation, and environment setup procedures.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.10 3.11 3.12\\nSearching for Python versions matching: Python 3.10\\nSearching for Python versions matching: Python 3.11\\nSearching for Python versions matching: Python 3.12\\nInstalled 3 versions in 3.42s\\n + cpython-3.10.14-macos-aarch64-none\\n + cpython-3.11.9-macos-aarch64-none\\n + cpython-3.12.4-macos-aarch64-none\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv --python 3.12.0\\nUsing Python 3.12.0\\nCreating virtual environment at: .venv\\nActivate with: source .venv/bin/activate\\n\\n$ uv run --python pypy@3.8 -- python --version\\nPython 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)\\n[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin\\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\\n>>>>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv python pin 3.11\\nPinned `.python-version` to `3.11`\n```\n\n----------------------------------------\n\nTITLE: Listing Python Installations with uv\nDESCRIPTION: The `uv python list` command displays information about available and installed Python versions. It helps users see which Python distributions can be installed and which ones are already managed by `uv` on the system.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list\n```\n\n----------------------------------------\n\nTITLE: Building a Package with uv (Console)\nDESCRIPTION: This command demonstrates the basic usage of `uv build` in the console. When executed, it builds the Python project located in the current working directory into source and binary distributions (e.g., `.tar.gz` and `.whl` files). The resulting artifacts are placed in a `dist/` subdirectory by default. Optional arguments can specify a different source directory or target a specific package within a workspace.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv build\n```\n\n----------------------------------------\n\nTITLE: Updating Python Executable Links with uv (Preview) - Console\nDESCRIPTION: This sequence of snippets showcases how uv manages executable symlinks in '~/.local/bin' to always point to the newest patch version of a Python minor release. Each invocation of 'uv python install' with a different patch version and the '--preview' flag updates 'python3.12' only if the new version matches the latest available. The first command installs 3.12.7, subsequent installs of older versions do not update the executable, while newer patch versions will update it.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12.7 --preview  # Adds `python3.12` to `~/.local/bin`\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12.6 --preview  # Does not update `python3.12`\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12.8 --preview  # Updates `python3.12` to point to 3.12.8\n```\n\n----------------------------------------\n\nTITLE: Example Python Script Requiring a Project Dependency (Python)\nDESCRIPTION: A simple Python script (`example.py`) that imports the 'flask' package, which is assumed to be a project dependency managed by `uv`. It then prints a message.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Require a project dependency\nimport flask\n\nprint(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Adding FastAPI Dependency with uv - Console\nDESCRIPTION: Shows the command to add FastAPI as a dependency to the project, specifically requesting the 'standard' optional extras for richer functionality. This step updates the generated pyproject.toml file to include FastAPI and its standard extra dependencies for a fuller experience. Prerequisite: a pyproject.toml must exist in the directory, typically created by 'uv init --app'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv add fastapi --extra standard\n```\n\n----------------------------------------\n\nTITLE: Using Additional --bare Options via Shell - Shell/Console\nDESCRIPTION: This shell snippet demonstrates the use of additional options in combination with the `--bare` flag when initializing a project. This includes specifying the project description, author from git, version control initialization, and Python version pin file. Prerequisites include git installed if using `--author-from git` and `--vcs git`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ uv init example --bare --description \"Hello world\" --author-from git --vcs git --python-pin\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-extra` for uv pip in TOML\nDESCRIPTION: Sets the `no-extra` option for `uv pip` commands. This allows excluding specified optional dependencies when the `all-extras` option is also enabled. The default value is an empty list (`[]`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_101\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nall-extras = true\nno-extra = [\"dev\", \"docs\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nall-extras = true\nno-extra = [\"dev\", \"docs\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring offline mode in uv with TOML\nDESCRIPTION: Sets the 'offline' boolean flag for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. When true, uv disables all network access and relies exclusively on locally cached data and available files. The default value is false.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_55\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\noffline = true\n```\n\nLANGUAGE: toml\nCODE:\n```\noffline = true\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI App with uv - Console\nDESCRIPTION: Details the uv command for running the FastAPI development server within the managed environment. This command resolves and locks dependencies, creates a virtual environment if necessary, and launches the FastAPI app via the CLI. It assumes that FastAPI and uv are properly installed, and the relevant runner script or entry point is accessible from the configured virtual environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv run fastapi dev\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Python Versions with uv - Console\nDESCRIPTION: This snippet shows how to use 'uv python list' to display all installed and available Python interpreter versions managed or discovered by uv. This command scans managed installations and system interpreters, providing a summary of what's available for use.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list\n```\n\n----------------------------------------\n\nTITLE: Examples of Editable Dependency Specifications in Requirements Files\nDESCRIPTION: These lines showcase different syntaxes for defining editable dependencies (`-e`) in Python requirements files, potentially for the 'uv' tool. Examples include specifying extras like `[d,dev]` (with and without spaces, noting `pip` disallows spaces), using environment markers like `python_version >= \\\"3.9\\\" and os_name == \\\"posix\\\"` for conditional installation, and adding inline comments using `#`. An example with unterminated extras is also shown. This syntax is typically used in files like `requirements.txt`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/editable.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n# OK (standard)\n-e ./editable[d,dev]\n\n# OK (whitespace between extras; disallowed by pip)\n-e ./editable[d, dev]\n\n# OK\n-e ./editable[d,dev] ; python_version >= \"3.9\" and os_name == \"posix\"\n\n# OK (whitespace between extras; disallowed by pip)\n-e ./editable[d, dev] ; python_version >= \"3.9\" and os_name == \"posix\"\n\n# OK\n-e ./editable ; python_version >= \"3.9\" and os_name == \"posix\"\n\n# OK (unterminated)\n-e ./editable[d\n\n# OK\n-e ./editable # comment\n\n# OK\n-e ./editable #comment\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Docker Container Locally - Console\nDESCRIPTION: Explains how to start the built FastAPI application Docker container, mapping port 80 inside the container to port 8000 on the local machine for browser access. This is useful for local development or validation prior to cloud deployment. Prerequisites include a previously built Docker image named 'fastapi-app'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 8000:80 fastapi-app\n```\n\n----------------------------------------\n\nTITLE: Viewing Python Versions for All Platforms with uv - Console\nDESCRIPTION: This snippet uses the 'uv python list' command with '--all-platforms' to show Python versions available for every supported operating system, not just the current one. This can be helpful for multi-platform testing and ensuring cross-platform compatibility of Python applications.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list --all-platforms\n```\n\n----------------------------------------\n\nTITLE: Verifying Installed Tool Version and uvx Default (console)\nDESCRIPTION: Demonstrates checking the version of the installed `ruff` tool directly and via `uvx`. After installing a specific version with `uv tool install`, `uvx` defaults to using that installed version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ruff --version\nruff 0.5.0\n$ uvx ruff --version\nruff 0.5.0\n```\n\n----------------------------------------\n\nTITLE: Running the Latest Cached Tool Version with uvx (console)\nDESCRIPTION: Shows running `ruff` with `uvx` without specifying a version. If a specific version was previously run, `uvx` uses the latest available version on the *first* invocation, but subsequent invocations use the cached version unless `@latest` or a specific version is requested.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff --version\nruff 0.6.2\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Python Version with uv - Console\nDESCRIPTION: This snippet shows how to install a specific Python version (3.12.3) using the 'uv python install' command. The command downloads and sets up the given version as a managed interpreter in uv's install directory. Dependencies include having 'uv' installed; no additional arguments are required. The command installs the precise patch version specified and is intended for cases where an exact Python version is required, either for project compatibility or reproducibility.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.12.3\n```\n\n----------------------------------------\n\nTITLE: Running Project-provided and External Commands via uv (Shell, console)\nDESCRIPTION: Shows examples of running both a project-provided CLI tool and an external Bash script with access to the project environment via 'uv run'. The first command assumes 'example-cli' is available in the project; the second runs a shell script needing project dependencies. Dependencies: the specified CLI/script must exist and uv must be installed. Input: command string; Output: dependent on the invoked script/tool.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/run.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv run example-cli foo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run bash scripts/foo.sh\n```\n\n----------------------------------------\n\nTITLE: Installing uv on Windows using PowerShell - Remote Script - powershell\nDESCRIPTION: Installs 'uv' on Windows using PowerShell by downloading and executing the installer script. Requires PowerShell and likely an internet connection. Execution policy must allow script execution or use ByPass. Input: URL only. Output: 'uv' binary installed in user's environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$ powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring target `python` interpreter for uv pip in TOML\nDESCRIPTION: Sets the `python` option, specifying the target Python interpreter for package installation. Supports version strings (e.g., `3.10`), executable names (`python3.10`), or full paths. By default, `uv` uses the active virtual environment. This is useful for CI or automated workflows. The default value is `None`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_111\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\npython = \"3.10\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\npython = \"3.10\"\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Tool Version with uvx (console)\nDESCRIPTION: Demonstrates using `uvx` (alias for `uv tool run`) to execute a specific version (`0.6.0`) of the `ruff` tool. The output shows the version reported by the tool. `uvx` installs the tool in a temporary cached environment if not already present.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff@0.6.0 --version\nruff 0.6.0\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Locked Dependencies with uv lock --upgrade (Console)\nDESCRIPTION: Updates the `uv.lock` file by upgrading all dependencies to the latest versions allowed by the constraints specified in the project's `pyproject.toml`. This command re-resolves dependencies to find newer compatible versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv lock --upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Library API Function - Python\nDESCRIPTION: This code snippet shows a minimalistic Python library API function inside the package's `__init__.py`. The `hello` function returns a greeting string, forming a testable and importable module API. There are no external dependencies, and it can be imported and executed by consumers.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef hello() -> str:\n    return \"Hello from example-lib!\"\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Script Entry Points in TOML\nDESCRIPTION: Defines a graphical user interface (GUI) script entry point named `hello` in `pyproject.toml` under the `[project.gui-scripts]` table. This maps the command `hello` to the `app` function in the `example` module. On Windows, this runs without a console; on other platforms, it behaves like a regular script. Requires a build system.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project.gui-scripts]\nhello = \"example:app\"\n```\n```\n\n----------------------------------------\n\nTITLE: Finding a System Python Executable (Ignoring Virtual Environments) with uv - Console\nDESCRIPTION: This snippet uses 'uv python find' with '--system' to force uv to ignore virtual environments and only search for system-installed Python interpreters. The command outputs the path to the first system-level Python installation found that meets the requested specification. This is useful when the user does not want to rely on virtual environment interpreters, such as for system-wide tasks.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ uv python find --system\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependency Sources in uv Workspace Root pyproject.toml\nDESCRIPTION: This `pyproject.toml` configuration for a workspace root demonstrates how dependency sources defined using `[tool.uv.sources]` apply globally to all workspace members. Here, `tqdm` is configured to be installed from a specific Git repository. This setting acts as a default for all members unless a specific member overrides the `tqdm` source in its own `tool.uv.sources` table.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/workspaces.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm>=4,<5\"]\n\n[tool.uv.sources]\nbird-feeder = { workspace = true }\ntqdm = { git = \"https://github.com/tqdm/tqdm\" }\n\n[tool.uv.workspace]\nmembers = [\"packages/*\"]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Dependency to a Specific Version with uv lock --upgrade-package (Console)\nDESCRIPTION: Updates the `uv.lock` file by upgrading the specified package (`<package>`) to a specific target version (`<version>`), provided it satisfies the project's constraints. Other dependencies remain unchanged.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv lock --upgrade-package <package>==<version>\n```\n\n----------------------------------------\n\nTITLE: Defining a Version Constraint in a constraints.txt File\nDESCRIPTION: Example content for a `constraints.txt` file, specifying that the `pydantic` package, if installed as a dependency, must be a version less than 2.0. Constraints only affect version selection during resolution; they do not trigger the installation of the constrained package.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npydantic<2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Bare Minimum Project Structure - Shell/Console\nDESCRIPTION: This shell snippet demonstrates initializing a minimal Python project with only a `pyproject.toml` file by using the `--bare` flag. The output (from `tree`) shows there is no README, version pinning, or source files. Suited for simple or ad-hoc project setups.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ uv init example --bare\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tree example-bare\nexample-bare\n└── pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Index Resolution Strategy in TOML\nDESCRIPTION: Sets the strategy `uv` uses when multiple index URLs are defined. `first-index` (default) stops at the first index containing the package to prevent dependency confusion. `unsafe-best-match` searches all indexes and prefers the best version found, potentially across different indexes.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_41\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nindex-strategy = \"unsafe-best-match\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nindex-strategy = \"unsafe-best-match\"\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Docker Image in GitLab CI/CD YAML\nDESCRIPTION: This YAML snippet demonstrates how to define variables for the uv and Python versions, specify a suitable base Docker image with uv preinstalled for use in a GitLab CI/CD job, and configure the linking mode to 'copy' to support GitLab's build directory mounting behavior. The job named 'uv' uses the Astral-provided container image and offers a section for custom uv commands in the script. No specific external dependencies are required other than GitLab CI/CD and Docker image access. Key parameters are 'UV_VERSION', 'PYTHON_VERSION', and 'BASE_LAYER', allowing dynamic configuration of the runner environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/gitlab.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  UV_VERSION: 0.5\n  PYTHON_VERSION: 3.12\n  BASE_LAYER: bookworm-slim\n  # GitLab CI creates a separate mountpoint for the build directory,\n  # so we need to copy instead of using hard links.\n  UV_LINK_MODE: copy\n\nuv:\n  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER\n  script:\n    # your `uv` commands\n\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies from setup.py using uv pip compile\nDESCRIPTION: Compiles dependencies declared in a `setup.py` file and writes the locked versions to `requirements.txt` using `uv pip compile`. This demonstrates support for legacy project formats.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile setup.py -o requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Syncing Project and Running Tests with uv run (YAML)\nDESCRIPTION: Demonstrates using 'uv sync' to install all project dependencies (including extras and dev dependencies) and 'uv run' to execute test commands, such as pytest, in the project environment. Dependencies: uv and Python must be installed in previous steps, project files in place. Expected input: a project with a lockfile. Provides an idiomatic pattern for automated testing.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example\\n\\njobs:\\n  uv-example:\\n    name: python\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv\\n        uses: astral-sh/setup-uv@v5\\n\\n      - name: Install the project\\n        run: uv sync --locked --all-extras --dev\\n\\n      - name: Run tests\\n        # For example, using `pytest`\\n        run: uv run pytest tests\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment using Nushell (Console)\nDESCRIPTION: This command activates the Python virtual environment located at `.venv` specifically for the `Nushell` shell. It uses the `activate.nu` script provided within the virtual environment's scripts directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ use .venv\\Scripts\\activate.nu\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment using csh/tcsh Shell (Console)\nDESCRIPTION: This command activates the Python virtual environment located at `.venv` for `csh` or `tcsh` shells. It sources the `activate.csh` script to adjust the shell environment accordingly.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate.csh\n```\n\n----------------------------------------\n\nTITLE: Configuring trusted publishing in uv with TOML\nDESCRIPTION: Sets the 'trusted-publishing' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This configures behavior related to trusted publishing via GitHub Actions. The default value is 'automatic', which checks but doesn't fail if not configured or permissions are insufficient.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_67\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ntrusted-publishing = \"always\"\n```\n\nLANGUAGE: toml\nCODE:\n```\ntrusted-publishing = \"always\"\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies with Specific Extras using uv pip compile\nDESCRIPTION: Compiles dependencies from `pyproject.toml`, including the optional dependency group named \"foo\" specified with the `--extra` flag, using `uv pip compile`. This is used for locking dependencies required for optional features.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile pyproject.toml --extra foo\n```\n\n----------------------------------------\n\nTITLE: Excluding Workspace Members for uv in TOML\nDESCRIPTION: This snippet configures packages to be excluded from the uv workspace definition within `pyproject.toml`. The `exclude` list under `[tool.uv.workspace]` accepts explicit paths or glob patterns. Packages matching these patterns will be excluded, even if they also match the `members` list. The example shows excluding specific members (`member1`, `path/to/member2`) and a pattern (`libs/*`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.workspace]\nexclude = [\"member1\", \"path/to/member2\", \"libs/*\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Providing an Index via CLI and Environment Variable (Shell)\nDESCRIPTION: Demonstrates two ways to specify a custom package index for uv: via `uv lock --index` in the CLI or by setting the UV_INDEX environment variable before running uv. The snippet shows the correct syntax for providing both index name and URL inline. Dependencies: uv must be installed and accessible on the PATH.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# On the command line.\n$ uv lock --index pytorch=https://download.pytorch.org/whl/cpu\n# Via an environment variable.\n$ UV_INDEX=pytorch=https://download.pytorch.org/whl/cpu uv lock\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Version Constraints or Git URLs (Console)\nDESCRIPTION: Shows examples of adding dependencies with specific requirements using `uv add`. The first command adds 'requests' pinned to version '2.31.0', while the second adds the 'requests' library directly from its GitHub repository.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ # Specify a version constraint\n$ uv add 'requests==2.31.0'\n\n$ # Add a git dependency\n$ uv add git+https://github.com/psf/requests\n```\n\n----------------------------------------\n\nTITLE: Syncing Environment with pyproject.toml using uv pip sync\nDESCRIPTION: Synchronizes the current Python environment based on the dependencies specified in `pyproject.toml`. This command typically requires a lockfile generated from `pyproject.toml` or might implicitly compile it; it ensures the installed packages match the resolved dependencies from the lockfile, removing any extraneous ones.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip sync pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Building Project Distributions with uv build (Console)\nDESCRIPTION: Demonstrates using `uv build` to create distributable package artifacts (a wheel file and a source distribution tarball) for the project. The `ls dist/` command then lists the contents of the `dist/` directory where the built artifacts are placed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ uv build\n$ ls dist/\nhello-world-0.1.0-py3-none-any.whl\nhello-world-0.1.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Wheel with uv_build in TOML\nDESCRIPTION: This snippet configures files to be excluded from the built wheel when using the `uv_build` backend via `pyproject.toml`. The `wheel-exclude` list under `[tool.uv.build-backend]` contains glob patterns. Here, all files ending with `.bin` are excluded from the wheel.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\nwheel-exclude = [\"*.bin\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Project Configuration - TOML\nDESCRIPTION: This `pyproject.toml` snippet illustrates the absolute minimal configuration for a Python project as generated by `uv init --bare`. The configuration omits metadata such as description and authors and lists only name, version, Python version constraint, and dependencies. No build backend is specified.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"example\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = []\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Excludes for uv_build Backend in TOML\nDESCRIPTION: This `pyproject.toml` snippet demonstrates how to disable the default exclusion patterns (`__pycache__`, `*.pyc`, `*.pyo`) when using the `uv_build` backend. By setting `default-excludes` to `false` under `[tool.uv.build-backend]`, these files will not be automatically excluded from the build artifacts.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\ndefault-excludes = false\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling All Extras in uv Pip - TOML\nDESCRIPTION: Demonstrates how to enable all optional dependencies (extras) in uv's pip by setting 'all-extras = true' in either the [tool.uv.pip] or [pip] table within pyproject.toml or uv.toml. No additional dependencies are required, and the value must be a boolean. Used for installations where every optional package should be included.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_70\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nall-extras = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nall-extras = true\n\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies with All Extras using uv pip compile\nDESCRIPTION: Compiles dependencies from `pyproject.toml`, including all optional dependency groups defined within it, using the `--all-extras` flag with `uv pip compile`. This locks dependencies for all optional features defined in the project.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile pyproject.toml --all-extras\n```\n\n----------------------------------------\n\nTITLE: Enabling uv Cache Persistence in GitLab CI Pipeline YAML\nDESCRIPTION: This YAML example details how to persist the uv tool's cache between CI/CD workflow runs in GitLab to improve build performance. The job sets the 'UV_CACHE_DIR' variable, defines a cache key based on the 'uv.lock' file, and specifies paths for cache persistence. In the job script, it executes typical uv commands and runs 'uv cache prune --ci' to clean up the cache at the end of the job. Prerequisites include enabling caching in GitLab and ensuring the use of 'uv.lock' (or alternative key files) for cache invalidation optimization.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/gitlab.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuv-install:\n  variables:\n    UV_CACHE_DIR: .uv-cache\n  cache:\n    - key:\n        files:\n          - uv.lock\n      paths:\n        - $UV_CACHE_DIR\n  script:\n    # Your `uv` commands\n    - uv cache prune --ci\n\n```\n\n----------------------------------------\n\nTITLE: Checking Lockfile Status with uv lock --check (Console)\nDESCRIPTION: Checks if the `uv.lock` file is consistent with the project's metadata (e.g., `pyproject.toml`) without modifying it. Exits with a non-zero status code if the lockfile is outdated. This is equivalent to using the `--locked` flag with other commands like `uv run`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv lock --check\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies (Legacy) in TOML\nDESCRIPTION: Shows the usage of the `dev-dependencies` key in `pyproject.toml` under `[tool.uv]` to list development-specific dependencies like `ruff`. While functional, the documentation notes that using `dependency-groups.dev` is the recommended, standardized approach. Contents are combined with `dependency-groups.dev`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ndev-dependencies = [\"ruff==0.5.0\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring upgrade behavior in uv with TOML\nDESCRIPTION: Sets the 'upgrade' boolean flag for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. When true, uv allows packages to be upgraded, ignoring any pinned versions present in existing lock files or output files. The default value is false.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_68\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nupgrade = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nupgrade = true\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Cache Key for Git Commit Hash in TOML\nDESCRIPTION: Defines `tool.uv.cache-keys` in `pyproject.toml` to invalidate the cache based on changes to `pyproject.toml` or the current Git commit hash. This is useful for projects using tools like `setuptools-scm` where the version depends on Git information. Setting `cache-keys` replaces default behavior, so essential files like `pyproject.toml` must be explicitly included.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { git = { commit = true } }]\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Pre-built Wheel Installation Globally in uv using TOML\nDESCRIPTION: Prevents `uv` from installing any pre-built wheels, forcing packages to be built from source distributions instead. The resolver might still use wheel metadata if available. Default is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_46\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-binary = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-binary = true\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to a Python Script Inline with uv - Console/Python\nDESCRIPTION: Shows how to declare and add dependencies directly to a Python script for isolated execution. The first command writes a short Python script importing and using requests; the second uses uv to add requests as a dependency. Requires uv, Python, and network access. Input is the echo and uv commands; output is updating the script's metadata for sandboxed execution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ echo 'import requests; print(requests.get(\"https://astral.sh\"))' > example.py\n\n$ uv add --script example.py requests\nUpdated `example.py`\n```\n\n----------------------------------------\n\nTITLE: Configuring Limited Resolution Environment for CPython in pyproject.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to limit `uv`'s universal resolution process using the `[tool.uv.environments]` setting in `pyproject.toml`. By specifying `implementation_name == 'cpython'`, the resolver will only consider dependencies compatible with the CPython interpreter, excluding alternative implementations like PyPy or Jython. This ensures the lockfile targets only the standard Python implementation. The entries must be disjoint environment markers.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nenvironments = [\n    \"implementation_name == 'cpython'\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Include and Exclude Directory Globs in TOML\nDESCRIPTION: This TOML code snippet declares lists of paths and patterns for inclusion and exclusion, used to control which files and directories are processed during a traversal. It demonstrates how to configure the \"include\" and \"exclude\" keys using string arrays, with support for literal paths and glob patterns (e.g., wildcards, character ranges) following PEP 639 rules. Expected inputs are arrays of strings; outputs would be filtered sets of directory entries. Used together with Rust or other language code, these patterns help select or exclude paths efficiently.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-globfilter/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ninclude = [\"src\", \"License.txt\", \"resources/icons/*.svg\"]\\nexclude = [\"target\", \"/dist\", \".cache\", \"*.tmp\"]\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with Arguments using uvx (Console)\nDESCRIPTION: This example shows how to pass arguments to the tool being run with `uvx`. Arguments (`hello from uv`) are placed after the tool name (`pycowsay`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uvx pycowsay hello from uv\n\n  -------------\n< hello from uv >\n  -------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n```\n\n----------------------------------------\n\nTITLE: Listing and Running uv CLI Commands (Markdown)\nDESCRIPTION: This snippet shows Markdown inline code usage to illustrate sample uv CLI commands. These command examples demonstrate syntax for managing Python versions, scripts, projects, tools, and packages in the uv ecosystem. The Markdown formatting provides distinct visual highlighting but requires that the uv CLI binary be installed on the system to use the shown commands.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/features.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv python install`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv python list`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv python find`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv python pin`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv python uninstall`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`example.py`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv run`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv add --script`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv remove --script`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`pyproject.toml`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv init`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv add`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv remove`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv sync`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv lock`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv run`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tree`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv build`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv publish`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`ruff`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`black`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uvx`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tool run`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tool install`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tool uninstall`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tool list`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tool update-shell`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`venv`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`virtualenv`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv venv`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`pip`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`pipdeptree`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip install`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip show`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip freeze`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip check`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip list`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip uninstall`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip tree`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`pip-tools`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip compile`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv pip sync`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv cache clean`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv cache prune`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv cache dir`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv tool dir`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv python dir`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`uv self update`\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool with Additional Dependencies (Console)\nDESCRIPTION: This command uses `uv tool install` with the `--with` option to install a main tool (`mkdocs`) along with an additional package (`mkdocs-material`) into the persistent tool environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install mkdocs --with mkdocs-material\n```\n\n----------------------------------------\n\nTITLE: Installing a Package into an Auto-Detected Virtual Environment with uv (Console)\nDESCRIPTION: This command demonstrates installing a package (`ruff`) using `uv pip install`. When run after creating a virtual environment (e.g., with `uv venv`), `uv` automatically detects and uses the `.venv` directory in the current or parent directory, installing the package into that isolated environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ # Install a package in the new virtual environment\n$ uv pip install ruff\n```\n\n----------------------------------------\n\nTITLE: Finding Python Interpreters Quietly with uv (Shell)\nDESCRIPTION: Uses `uv python find -q` to locate available Python interpreters known to `uv`. The `-q` flag affects the output verbosity (as described in v0.3.0 changes, it specifically enables showing the output path). Since v0.3.1, this command respects `.python-version` and `pyproject.toml`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv python find -q\n```\n\n----------------------------------------\n\nTITLE: Running a Persistently Installed Tool (Console)\nDESCRIPTION: This command shows how to run a tool (`ruff`) directly from the shell after it has been installed using `uv tool install`. This works because `uv` adds the tool's installation directory to the system's PATH.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ruff --version\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on macOS/Linux (POSIX Shells) (Console)\nDESCRIPTION: This command activates the Python virtual environment located at `.venv` for POSIX-compliant shells like bash or zsh on macOS and Linux. Activating modifies the shell's environment (e.g., `PATH`) so that commands like `python` and `pip` use the versions within the virtual environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Upgrading uv via Self-Update - console\nDESCRIPTION: Runs 'uv self update' for standalone installer upgrades. Command contacts uv servers to download and install latest version, may modify shell profiles unless INSTALLER_NO_MODIFY_PATH is set. Output: updated uv version. Limitation: available only for standalone installer method.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uv self update\n```\n\n----------------------------------------\n\nTITLE: Configuring prerelease strategy in uv with TOML\nDESCRIPTION: Sets the 'prerelease' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This defines the strategy for handling pre-release package versions during resolution. Possible values include 'disallow', 'allow', 'if-necessary', 'explicit', and 'if-necessary-or-explicit'. The default value is 'if-necessary-or-explicit'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_56\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nprerelease = \"allow\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nprerelease = \"allow\"\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Cache Key for Environment Variables in TOML\nDESCRIPTION: Defines `tool.uv.cache-keys` in `pyproject.toml` to include an environment variable (`MY_ENV_VAR`) alongside `pyproject.toml`. The cache will be invalidated if either `pyproject.toml` changes or the value of the specified environment variable changes between runs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { env = \"MY_ENV_VAR\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Tool Install Directory (Shell/Environment Variable)\nDESCRIPTION: Sets the `UV_TOOL_BIN_DIR` environment variable to specify a custom installation directory for tools installed via `uv tool install`. This configuration option was introduced in uv v0.3.0.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nUV_TOOL_BIN_DIR\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Index URL in pyproject.toml using TOML\nDESCRIPTION: Defines a custom package index within a `pyproject.toml` file using the `[tool.uv.index]` array of tables. The `url` parameter specifies the index location (e.g., a private repository or test PyPI), and `default = true` marks this index as the primary source for `uv` when resolving dependencies within the project. This configuration is automatically detected by `uv` in the project's root or parent directories.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/files.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nurl = \"https://test.pypi.org/simple\"\ndefault = true\n\n```\n\n----------------------------------------\n\nTITLE: Enabling universal requirements resolution with 'universal' in uv config - TOML\nDESCRIPTION: Activates universal dependency resolution by setting 'universal' to true, producing a requirements.txt compatible with multiple platforms and Python implementations. Configured as a boolean under the relevant section, this is useful for creating cross-environment compatible output.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_122\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nuniversal = true\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nuniversal = true\n```\n\n----------------------------------------\n\nTITLE: Avoiding `--raw-sources` misinterpretation with `uv add -r` (Shell)\nDESCRIPTION: Highlights a fix in v0.3.1 that prevents `uv add -r` (intended for requirements files) from being misinterpreted as the unrelated `--raw-sources` flag.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuv add -r\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Python Versions with Matrix and Pinning (YAML)\nDESCRIPTION: Shows how to use a GitHub Actions matrix strategy to test with multiple Python versions, explicitly setting the Python version per job using the python-version input for astral-sh/setup-uv. Dependencies: matrix configuration, setup-uv action, and a compatible runner. Ensures each matrix job runs with the assigned Python version, overriding project-level specifiers.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\\n  build:\\n    name: continuous-integration\\n    runs-on: ubuntu-latest\\n    strategy:\\n      matrix:\\n        python-version:\\n          - \"3.10\"\\n          - \"3.11\"\\n          - \"3.12\"\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv and set the python version\\n        uses: astral-sh/setup-uv@v5\\n        with:\\n          python-version: ${{ matrix.python-version }}\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-deps` for uv pip in TOML\nDESCRIPTION: Sets the `no-deps` option for `uv pip` commands. When set to `true`, package dependencies are ignored, and only packages explicitly listed on the command line are added to the requirements file. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_99\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-deps = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-deps = true\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-emit-package` for uv pip in TOML\nDESCRIPTION: Sets the `no-emit-package` option for `uv pip` commands. This specifies a list of packages to omit from the output resolution, although their dependencies will still be included. It is equivalent to pip-compile's `--unsafe-package` option. The default value is an empty list (`[]`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_100\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-emit-package = [\"ruff\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-emit-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with Additional Dependencies using uvx (Console)\nDESCRIPTION: This command uses the `--with` option with `uvx` to include additional packages (`mkdocs-material`) alongside the main tool (`mkdocs`) in the temporary environment. This is useful for tools with plugins.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --with mkdocs-material mkdocs --help\n```\n\n----------------------------------------\n\nTITLE: Running Latest Version of a Tool Package with uv (Shell)\nDESCRIPTION: Illustrates the pattern `uv tool run package@latest ...` to execute a command provided by a Python package, ensuring the latest version of the package is fetched and used. Support for the `@latest` syntax was added in uv v0.3.0.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv tool run package@latest ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Specific Package with uv lock (Console)\nDESCRIPTION: Demonstrates upgrading a specific package ('requests') to its latest compatible version using `uv lock --upgrade-package`. This command updates the lockfile (`uv.lock`) with the new version while trying to keep other dependencies unchanged.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv lock --upgrade-package requests\n```\n\n----------------------------------------\n\nTITLE: Using pep440_rs to Parse and Compare Python Versions in Rust\nDESCRIPTION: This Rust snippet demonstrates the basic usage of the `pep440_rs` crate. It shows how to parse a Python version string (`\"1.19\"`) into a `Version` object and version specifier strings (`\"==1.*\"`, `\">=1.16, <2.0\"`) into `VersionSpecifier` and a collection of specifiers, respectively. It then uses the `contains` method to check if the parsed version satisfies the conditions defined by the specifiers. Dependencies include the `pep440_rs` crate and `std::str::FromStr`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-pep440/Readme.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nuse pep440_rs::{parse_version_specifiers, Version, VersionSpecifier};\n\nlet version = Version::from_str(\"1.19\").unwrap();\nlet version_specifier = VersionSpecifier::from_str(\"==1.*\").unwrap();\nassert!(version_specifier.contains(&version));\nlet version_specifiers = parse_version_specifiers(\">=1.16, <2.0\").unwrap();\nassert!(version_specifiers.contains(&version));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Provided Metadata using uv sync (Console)\nDESCRIPTION: Shows the command sequence (`uv sync --extra build` followed by `uv sync --extra build --extra compile`) to install `flash-attn` and its build dependencies using the configuration from the previous example. Because metadata was provided and dependencies separated into extras, this two-step `sync` process works without needing manual `uv pip install` for build dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv sync --extra build\n$ uv sync --extra build --extra compile\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Conflicting Dependency Groups using tool.uv.conflicts (TOML)\nDESCRIPTION: Illustrates defining conflicting dependency groups using a hypothetical `[dependency-groups]` table and declaring their conflict using `tool.uv.conflicts`. Similar to conflicting extras, this allows managing mutually exclusive sets of dependencies (`group1`, `group2`) defined outside standard optional dependencies, preventing their simultaneous installation. The syntax uses `{ group = \"group_name\" }` within the `conflicts` list.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[dependency-groups]\ngroup1 = [\"numpy==2.1.2\"]\ngroup2 = [\"numpy==2.0.0\"]\n\n[tool.uv]\nconflicts = [\n    [\n      { group = \"group1\" },\n      { group = \"group2\" },\n    ],\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-strip-extras` for uv pip in TOML\nDESCRIPTION: Sets the `no-strip-extras` option for `uv pip compile`. When `true`, package extras (e.g., `package[extra]`) are included in the output file. By default (`false`), extras are stripped because the required dependencies are already listed directly. Note that output files with extras cannot be used as constraints files. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_105\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-strip-extras = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-strip-extras = true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Compile Command Header for uv Pip Compile - TOML\nDESCRIPTION: Configures a custom header comment for files generated by 'uv pip compile' via the 'custom-compile-command' field. The option accepts a string and is suitable for workflows requiring documentation of custom scripts or wrapper command lines.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_76\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\ncustom-compile-command = \"./custom-uv-compile.sh\"\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\ncustom-compile-command = \"./custom-uv-compile.sh\"\n\n```\n\n----------------------------------------\n\nTITLE: Reinstalling a Tool with New Version Constraints (console)\nDESCRIPTION: Shows how to reinstall the `black` tool using `uv tool install` with new version constraints (`>=24`). This replaces the previous installation and its constraints, effectively upgrading or changing the allowed version range.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install black>=24\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with uvx (Console)\nDESCRIPTION: This command demonstrates the basic usage of `uvx` to run a Python tool (`ruff`) without installing it permanently. `uvx` creates a temporary, isolated environment for the tool execution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff\n```\n\n----------------------------------------\n\nTITLE: Overriding Installed Tool Version with uvx @latest (console)\nDESCRIPTION: Shows how to use `uvx ruff@latest` to run the absolute latest version of `ruff`, ignoring the currently installed version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff@latest --version\n0.6.2\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Cache Key for Git Commit Hash and Tags in TOML\nDESCRIPTION: Extends the `tool.uv.cache-keys` configuration in `pyproject.toml` to invalidate the cache based on changes to `pyproject.toml`, the Git commit hash, or Git tags. Use this when project metadata incorporates Git tag information alongside commit details.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { git = { commit = true, tags = true } }]\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Tool Version Range using --from with uvx (Console)\nDESCRIPTION: This command uses the `--from` option with `uvx` to specify a version range (`>0.2.0,<0.3.0`) for the tool (`ruff`). `uv` will select the latest compatible version within this range.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from 'ruff>0.2.0,<0.3.0' ruff check\n```\n\n----------------------------------------\n\nTITLE: Specifying Pinned Versions for cython and dtlssocket\nDESCRIPTION: This snippet lists the specific versions required for the `cython` (version 0.29.37) and `dtlssocket` (version 0.1.16) Python packages. The comment indicates that `cython` is included because it is a dependency of `dtlssocket`. This file format is used by tools like `pip` and `uv` to install exact package versions, ensuring a reproducible environment. The initial comments indicate the file was auto-generated by `uv`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/dtlssocket.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile scripts/requirements/dtlssocket.in\ncython==0.29.37\n    # via dtlssocket\ndtlssocket==0.1.16\n```\n\n----------------------------------------\n\nTITLE: Forcing Package Reinstallation with uv in TOML\nDESCRIPTION: Configures `tool.uv` in `pyproject.toml` to always rebuild and reinstall the package named `my-package` during every `uv` run, regardless of cache status or changes detected via `cache-keys`. This setting acts as an escape hatch for packages with complex dynamic metadata dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\nreinstall-package = [\"my-package\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Includes for uv_build Backend in TOML\nDESCRIPTION: This snippet configures the `data` setting within the `[tool.uv.build-backend]` section of `pyproject.toml`. It specifies directories whose contents should be included in the wheel's data sections (`headers`, `scripts`, etc.). In this example, files from `include/headers` are mapped to the wheel's `headers` data directory, and files from `bin` are mapped to the `scripts` directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\ndata = { \"headers\": \"include/headers\", \"scripts\": \"bin\" }\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling PowerShell Autocompletion for uv - powershell\nDESCRIPTION: Ensures PowerShell profile exists and appends uv autocompletion loading to it. Input: none, operates on user profile file. Outputs: autocompletion setup; requires a restart of PowerShell to take effect.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\nif (!(Test-Path -Path $PROFILE)) {\n  New-Item -ItemType File -Path $PROFILE -Force\n}\nAdd-Content -Path $PROFILE -Value '(& uv generate-shell-completion powershell) | Out-String | Invoke-Expression'\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Package Index with Explicit Sources in TOML\nDESCRIPTION: Defines a custom package index named 'pytorch' with a specific URL. By setting `explicit = true`, this index will only be used for dependencies explicitly assigned to it using `[tool.uv.sources]`, as shown for the 'torch' package. This allows fine-grained control over where specific packages are fetched from.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_39\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\nexplicit = true\n\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Python Using actions/setup-python with python-version-file (YAML)\nDESCRIPTION: Uses the official actions/setup-python action to install a Python version specified by a .python-version file. This can offer faster builds due to GitHub's Python caching. Dependencies: the setup-python action and a valid .python-version file committed to the repository. Ensures Python matches the pinned project version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example\\n\\njobs:\\n  uv-example:\\n    name: python\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv\\n        uses: astral-sh/setup-uv@v5\\n\\n      - name: \"Set up Python\"\\n        uses: actions/setup-python@v5\\n        with:\\n          python-version-file: \".python-version\"\n```\n\n----------------------------------------\n\nTITLE: Pinning Multiple Platform Versions in requirements.txt (Text / requirements format)\nDESCRIPTION: This example demonstrates pinning different numpy versions in requirements.txt based on python_version environment markers. It's used to ensure compatibility across multiple Python versions/platforms. Each line uses marker syntax as per PEP 508, and such multiline pinning may be auto-generated by uv or hand-edited. Requires a resolver tool that understands environment markers.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nnumpy==1.24.4 ; python_version == \"3.8\"\nnumpy==2.0.2 ; python_version == \"3.9\"\nnumpy==2.2.0 ; python_version >= \"3.10\"\n```\n\n----------------------------------------\n\nTITLE: Creating uv Virtual Environment with Specific Python Version (Shell)\nDESCRIPTION: Uses the `uv venv` command to create a Python virtual environment, explicitly requesting a specific Python version using the `--python` flag. If the requested version is not found locally, `uv` attempts to download it automatically (behavior stabilized in v0.3.0).\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv venv --python <version>\n```\n\n----------------------------------------\n\nTITLE: Using Existing Lockfile without Checks with uv run --frozen (Console)\nDESCRIPTION: Executes a command via `uv run` using the existing lockfile without verifying if it is up-to-date with the project's metadata. This assumes the lockfile is correct and proceeds with the command execution based on its contents.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --frozen ...\n```\n\n----------------------------------------\n\nTITLE: Pinning a Python Version in the Current Directory with uv - Console\nDESCRIPTION: Demonstrates pinning a specific Python version for use in the current project directory using uv. The input is the target version; output is a .python-version config file reference.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv python pin 3.11\nPinned `.python-version` to `3.11`\n```\n\n----------------------------------------\n\nTITLE: Running a Tool from a Specific Git Branch using uvx (Console)\nDESCRIPTION: This command demonstrates running a tool (`httpie`) using `uvx` and `--from`, targeting the latest commit on a specific branch (`master`) of a Git repository.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from git+https://github.com/httpie/cli@master httpie\n```\n\n----------------------------------------\n\nTITLE: Opting in to UV_SYSTEM_PYTHON for a Specific Job (YAML)\nDESCRIPTION: Limits the effect of UV_SYSTEM_PYTHON=1 to a single job. This allows installing requirements into the system Python only for that part of the workflow. Useful in complex workflows with mixed needs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\\n  install_job:\\n    env:\\n      UV_SYSTEM_PYTHON: 1\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Limiting Candidate Packages by Upload Timestamp (uv, TOML)\nDESCRIPTION: Restricts installable package candidates to those uploaded before a specified date or timestamp (RFC 3339 format or date string), supporting use cases requiring reproducible environments. Parameter is a string representation of the cutoff; settable in [tool.uv] or at the top of uv.toml. Requires accurate clock and consistent timestamp formats.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_35\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nexclude-newer = \"2006-12-02\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nexclude-newer = \"2006-12-02\"\n```\n\n----------------------------------------\n\nTITLE: Displaying the Main uv Help Menu (Short)\nDESCRIPTION: Executes the `uv` command with the `--help` flag to display the main, condensed help menu for the tool. This provides a quick overview of available commands and options.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/help.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Root for uv_build Backend in TOML\nDESCRIPTION: This `pyproject.toml` snippet configures the `module-root` directory for the `uv_build` backend. Setting `module-root` to `\"\"` under `[tool.uv.build-backend]` indicates a flat layout where the module directory resides directly in the project root, instead of the default `src` layout.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\nmodule-root = \"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Performing Smoke Test for Windows Trampolines\nDESCRIPTION: Shell commands intended to be run on a Windows machine from the project root to perform a basic smoke test of the trampolines. It cleans the build artifacts, uses `uv` (via `cargo run`) to create a virtual environment, installs the `black` package into it, and then executes `black` using the trampoline mechanism within the virtual environment's Scripts directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo clean\ncargo run venv\ncargo run pip install black\n.venv\\Scripts\\black --version\n```\n\n----------------------------------------\n\nTITLE: Displaying uv Subcommand Help Menu (Short)\nDESCRIPTION: Executes the `uv` command followed by a subcommand (`init` in this example) and the `--help` flag. This displays the condensed help menu specifically for the `init` subcommand.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/help.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv init --help\n```\n\n----------------------------------------\n\nTITLE: Configuring no-index in uv with TOML\nDESCRIPTION: Sets the 'no-index' boolean flag for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. When true, uv ignores all registry indexes (like PyPI) and relies solely on direct URL dependencies or those provided via '--find-links'. The default value is false.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_53\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-index = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-index = true\n```\n\n----------------------------------------\n\nTITLE: Checking the Installed uv Version\nDESCRIPTION: Executes `uv version` to display the currently installed version of the `uv` tool. The output typically includes detailed build information such as commit hash and build date, which is helpful for troubleshooting.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/help.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv version\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Usage in uv using TOML\nDESCRIPTION: Prevents `uv` from reading from or writing to its cache directory. Instead, a temporary directory is used for the duration of the operation. Default is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_52\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-cache = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-cache = true\n```\n\n----------------------------------------\n\nTITLE: Displaying the Main uv Help Menu (Long)\nDESCRIPTION: Executes `uv help` to display the detailed, long-form help menu for the main `uv` command. This version often includes more examples and explanations and may use a pager like `less` or `more`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/help.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv help\n```\n\n----------------------------------------\n\nTITLE: Configuring `index-strategy` for uv pip in TOML\nDESCRIPTION: Determines how `uv` handles package resolution when multiple index URLs are configured (via `index-url` and `extra-index-url`). The default (`\"first-index\"`) uses only the first index where a package is found to prevent dependency confusion. Other options like `\"unsafe-first-match\"` and `\"unsafe-best-match\"` search across all indexes with different prioritization rules. The type is `str`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_90\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nindex-strategy = \"unsafe-best-match\"\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nindex-strategy = \"unsafe-best-match\"\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Version Forking with Requires-Python Constraints - Markdown - English\nDESCRIPTION: This code block exemplifies how UV forks package versions based on the 'requires-python' field in dependency resolution. It shows the resulting resolution for numpy when two versions have different minimum Python requirements. There are no code dependencies; the block is provided for documentation purposes. Inputs are version constraints (e.g., numpy\\u003e=2,\\u003c3) and runtime python_version, and the output is resolved package versions with associated python_version markers. It does not execute code but illustrates the effect of the fork strategy.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/resolver-internals.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nnumpy==2.0.0; python_version \\u003e= \"3.9\" and python_version \\u003c \"3.10\"\nnumpy==2.1.0; python_version \\u003e= \"3.10\"\n```\n```\n\n----------------------------------------\n\nTITLE: Validating provided hashes with 'verify-hashes' in uv config - TOML\nDESCRIPTION: When 'verify-hashes' is set to true, uv will validate the hashes of those requirements in the requirements file that include one, without enforcing that all entries have hashes. This boolean setting is written in the config under the relevant table, increasing supply-chain security for provided hashes.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_125\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nverify-hashes = true\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nverify-hashes = true\n```\n\n----------------------------------------\n\nTITLE: Configuring `fork-strategy` for uv pip in TOML\nDESCRIPTION: Defines the strategy for selecting package versions when multiple Python versions or platforms are involved. The default (`\"requires-python\"`) optimizes for the latest version compatible with each supported Python version. The `\"fewest\"` strategy minimizes the total number of distinct package versions selected across all environments, potentially preferring older versions compatible with more targets. The type is `str`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_87\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nfork-strategy = \"fewest\"\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nfork-strategy = \"fewest\"\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Syncing and Running Commands (Windows PowerShell)\nDESCRIPTION: Shows the manual workflow on Windows (using PowerShell) for syncing the environment (`uv sync`), activating the virtual environment (`source .venv\\Scripts\\activate`), and then running commands like `flask run` or executing a Python script.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nuv sync\nsource .venv\\Scripts\\activate\nflask run -p 3000\npython example.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with a Specific Python Version using uv (Console)\nDESCRIPTION: This command uses `uv` to create a Python virtual environment, requesting a specific Python version (3.11 in this example) using the `--python` flag. `uv` will search for this version on the system or download it if unavailable and configured.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv --python 3.11\n```\n\n----------------------------------------\n\nTITLE: Specifying Pinned Python Dependencies with uv Pip Compile - Text\nDESCRIPTION: This snippet is a requirements file generated by uv's pip compile tool, listing all Python packages and their exact versions required for the project. Comments indicate which packages depend on others, aiding maintainability and transparency of indirect dependencies. The file is intended to be used with pip or compatible tools to install all necessary packages for the project environment; no parameters or runtime execution is involved, and it must be kept in sync with upstream dependencies to avoid version conflicts.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/pdm_2193.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    uv pip compile scripts/requirements/pdm_2193.in\\ncertifi==2023.11.17\\n    # via requests\\ncharset-normalizer==3.3.2\\n    # via requests\\nidna==3.6\\n    # via requests\\nnumpy==1.26.3\\n    # via pandas\\npandas==1.3.5\\npystac==1.9.0\\n    # via pystac-client\\npystac-client==0.6.1\\npython-dateutil==2.7.5\\n    # via\\n    #   pandas\\n    #   pystac\\n    #   pystac-client\\n    #   sat-stac\\npytz==2023.3.post1\\n    # via pandas\\nrequests==2.31.0\\n    # via\\n    #   pystac-client\\n    #   sat-stac\\nsat-stac==0.4.1\\nsix==1.16.0\\n    # via python-dateutil\\nurllib3==2.1.0\\n    # via requests\\n\n```\n\n----------------------------------------\n\nTITLE: Alternative Ways to Check uv Version\nDESCRIPTION: Demonstrates alternative command-line options for checking the `uv` version. `uv --version` provides the same detailed output as `uv version`. `uv -V` provides a shorter version string without build details. `uv pip --version` shows that the version flag can often be used even when invoking a subcommand.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/help.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv --version      # Same output as `uv version`\n$ uv -V             # Will not include the build commit and date\n$ uv pip --version  # Can be used with a subcommand\n```\n\n----------------------------------------\n\nTITLE: Configuring `reinstall` for uv pip install in TOML\nDESCRIPTION: Sets the `reinstall` option for `uv pip install`. When `true`, all specified packages are reinstalled, even if a compatible version is already present in the environment. This option implies `refresh`. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_114\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nreinstall = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nreinstall = true\n```\n\n----------------------------------------\n\nTITLE: Installing C Compiler Dependencies with apt on Shell\nDESCRIPTION: Installs essential C development tools on Debian-based Linux systems using the apt package manager. The command installs the 'build-essential' meta-package, comprising the GCC compiler, libraries, and other tools necessary for Rust projects that depend on C compilation. Must be run with sudo privileges.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Python Versions Using uv and Cargo on Shell\nDESCRIPTION: Runs 'cargo' to execute the uv binary for installing multiple specified Python versions required for testing. Assumes Rust toolchain is installed and uv is present as a cargo subcommand. The storage directory for the Python installs can be set with the UV_PYTHON_INSTALL_DIR environment variable. No arguments after 'install' will prompt installation of all managed Python versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run python install\n```\n\n----------------------------------------\n\nTITLE: Setting 'reinstall-package' in uv config via TOML - TOML\nDESCRIPTION: Defines the 'reinstall-package' key in either a [tool.uv.pip] section of pyproject.toml or a [pip] section of uv.toml to force reinstalls of listed packages each time. This configuration expects a list of strings representing package names to be reinstalled, and is used when certain packages must be refreshed regardless of previous installation state.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_115\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nreinstall-package = [\"ruff\"]\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nreinstall-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Sequence for Resolution-Phase Dependencies using uv (Console)\nDESCRIPTION: Illustrates the manual steps required to install a package like `flash-attn` which needs build dependencies during resolution and has build isolation disabled. It involves creating a virtual environment (`uv venv`), manually installing the required build dependencies (`torch`, `setuptools`) using `uv pip install`, and finally running `uv sync` to install the project dependencies including `flash-attn`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv venv\n$ uv pip install torch setuptools\n$ uv sync\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Python Script in an Isolated Environment with uv - Console\nDESCRIPTION: Demonstrates using uv to run a standalone Python script with dependencies in an isolated, temporary virtual environment. Assumes the script includes inline dependency metadata. Input is the shell command; output is script execution including package installation and HTTP request.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv run example.py\nReading inline script metadata from: example.py\nInstalled 5 packages in 12ms\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Standalone Installer using wget - Shell Script - console\nDESCRIPTION: Shows the alternative command for systems without 'curl', fetching the install script with 'wget' and executing with 'sh'. Requires 'wget' and 'sh'. Input: none. Output: installs 'uv'. Same caveats as above regarding script execution and trust.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ wget -qO- https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Defining a Build Constraint in a build-constraints.txt File\nDESCRIPTION: Example content for a `build-constraints.txt` file, specifying that if `setuptools` is required as a build-time dependency by any package during the build process, version 75.0.0 must be used. Build constraints work similarly to regular constraints but apply only to build dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsetuptools==75.0.0\n```\n\n----------------------------------------\n\nTITLE: Supplying Index Credentials via Environment Variables (sh)\nDESCRIPTION: Presents shell export commands to set environment variables for index authentication (username/password) for a uv index. Variables are based on the uppercase index name, with non-alphanumerics replaced by underscores. No sensitive data is stored in configuration files. Should be executed in a shell managing uv.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nexport UV_INDEX_INTERNAL_PROXY_USERNAME=public\nexport UV_INDEX_INTERNAL_PROXY_PASSWORD=koala\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Index as the Default in uv (TOML)\nDESCRIPTION: Shows how to configure a custom package index as the default in uv using the 'default = true' setting. This removes PyPI as the default index and ensures the specified index has lowest priority unless explicitly overridden. Set in the pyproject.toml and requires valid index name and URL.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\ndefault = true\n```\n\n----------------------------------------\n\nTITLE: Defining Main Application Entrypoint - Python\nDESCRIPTION: This snippet provides boilerplate Python code for the main entrypoint (`main.py`) of the application. It defines a `main` function that prints a greeting, with standard `if __name__ == \"__main__\"` block to ensure it only runs when executed directly. No dependencies are required; this code expects to be invoked via `uv run main.py` or similar.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    print(\"Hello from example-app!\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies from requirements.txt using uv (Shell)\nDESCRIPTION: Demonstrates using `uv add -r requirements.txt` to add dependencies listed in a `requirements.txt` file to the current `uv`-managed project. This feature was introduced in uv v0.3.0.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv add -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing uv with GitHub Actions Setup Action (YAML)\nDESCRIPTION: Shows a minimal example of integrating the astral-sh/setup-uv action into a GitHub Actions workflow to install the uv CLI tool, adding it to PATH for subsequent steps. No version is pinned here. Dependencies: GitHub Actions runner (Ubuntu), actions/checkout, and astral-sh/setup-uv. The workflow will ensure uv is available for later use in the workflow steps.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example\\n\\njobs:\\n  uv-example:\\n    name: python\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv\\n        uses: astral-sh/setup-uv@v5\n```\n\n----------------------------------------\n\nTITLE: Syncing Optional Dependencies (Extras) with uv sync --extra (Console)\nDESCRIPTION: Synchronizes the environment, explicitly including a specified optional dependency group (extra). In this example, the 'foo' extra, defined in `[project.optional-dependencies]`, and its dependencies are installed along with the base dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync --extra foo\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies Generated by uv (Requirements Format)\nDESCRIPTION: This snippet defines the exact versions of Python packages required for a project environment. It was generated by 'uv pip compile' and includes both direct and transitive dependencies, with comments indicating the source of each transitive dependency. Some packages like 'flask' and 'pydantic-extra-types' are sourced directly from URLs or Git repositories.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/all-kinds.txt#_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile scripts/requirements/all-kinds.in\nannotated-types==0.6.0\n    # via pydantic\nasgiref==3.7.2\n    # via django\nblinker==1.7.0\n    # via flask\ncertifi==2023.11.17\n    # via requests\ncffi==1.16.0\n    # via cryptography\ncharset-normalizer==3.3.2\n    # via requests\nclick==8.1.7\n    # via flask\ncryptography==41.0.7\ndefusedxml==0.7.1\n    # via python3-openid\ndjango==5.0.1\n    # via django-allauth\ndjango-allauth==0.51.0\nflask @ https://files.pythonhosted.org/packages/36/42/015c23096649b908c809c69388a805a571a3bea44362fe87e33fc3afa01f/flask-3.0.0-py3-none-any.whl\nidna==3.6\n    # via requests\nitsdangerous==2.1.2\n    # via flask\njinja2==3.1.2\n    # via flask\nmarkupsafe==2.1.3\n    # via\n    #   jinja2\n    #   werkzeug\nnumpy==1.26.3\n    # via pandas\noauthlib==3.2.2\n    # via requests-oauthlib\npandas==2.1.4\npycparser==2.21\n    # via cffi\npydantic==2.5.3\n    # via pydantic-extra-types\npydantic-core==2.14.6\n    # via pydantic\npydantic-extra-types @ git+https://github.com/pydantic/pydantic-extra-types.git@5ebc5bba58605c656a821eed773973725e35cf83\npyjwt==2.8.0\n    # via django-allauth\npython-dateutil==2.8.2\n    # via pandas\npython3-openid==3.2.0\n    # via django-allauth\npytz==2023.3.post1\n    # via pandas\nrequests==2.31.0\n    # via\n    #   django-allauth\n    #   requests-oauthlib\nrequests-oauthlib==1.3.1\n    # via django-allauth\nsix==1.16.0\n    # via python-dateutil\nsqlparse==0.4.4\n    # via django\ntyping-extensions==4.9.0\n    # via\n    #   asgiref\n    #   pydantic\n    #   pydantic-core\ntzdata==2023.4\n    # via pandas\nurllib3==2.1.0\n    # via requests\nwerkzeug @ https://files.pythonhosted.org/packages/0d/cc/ff1904eb5eb4b455e442834dabf9427331ac0fa02853bf83db817a7dd53d/werkzeug-3.0.1.tar.gz\n    # via flask\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages with uv pip (Default Format)\nDESCRIPTION: Lists all packages installed in the current Python environment using the `uv pip list` command. The output is presented in a human-readable table format by default.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/inspection.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip list\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of uv - Shell Script - console\nDESCRIPTION: Demonstrates fetching a particular version of the install script by specifying the version number in the URL. Requires 'curl' and 'sh'. Useful for controlled environments or reproducing builds. Input: version in URL. Output: Installs specified version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/0.6.16/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Specifying tqdm Dependency Version (Requirements Format)\nDESCRIPTION: This line specifies version 4.65.0 of the `tqdm` Python package as a required dependency. The preceding comment notes that this package (and version) was chosen for being small and fast to install. `tqdm` is a library commonly used to display progress bars for iterations in Python scripts.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/small.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# These are small and fast to install\n\ntqdm==4.65.0\n```\n\n----------------------------------------\n\nTITLE: Error Resolving Conflicting Optional Dependencies with uv lock (Console)\nDESCRIPTION: Displays the console output and error message generated by `uv lock` when attempting to resolve a project with the conflicting optional dependencies (`extra1`, `extra2`) defined previously. The error clearly states that the requirements are unsatisfiable due to the incompatible `numpy` versions specified by the two extras.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv lock\n  x No solution found when resolving dependencies:\n  `-> Because myproject[extra2] depends on numpy==2.0.0 and myproject[extra1] depends on numpy==2.1.2, we can conclude that myproject[extra1] and\n      myproject[extra2] are incompatible.\n      And because your project requires myproject[extra1] and myproject[extra2], we can conclude that your projects's requirements are unsatisfiable.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Project as Non-Package (Virtual) in TOML\nDESCRIPTION: Shows how to set the `package` key to `false` in `pyproject.toml` under `[tool.uv]`. This configures the project as a \"virtual\" or non-package project, meaning only its dependencies are installed into the environment, and the project itself is not built or installed (e.g., in editable mode). The default is `true`, implying a standard buildable package.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npackage = false\n```\n\n----------------------------------------\n\nTITLE: Inspecting Windows Installer Script in PowerShell - powershell\nDESCRIPTION: Enables previewing the Windows installer PowerShell script using 'irm' piped to 'more'. Benefits users auditing script contents without executing it. Input: script URL. Output: script content in pager.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$ powershell -c \"irm https://astral.sh/uv/install.ps1 | more\"\n```\n\n----------------------------------------\n\nTITLE: Installing uv via WinGet - Windows Package Manager - console\nDESCRIPTION: Installs 'uv' using WinGet on Windows. Requires installed WinGet. Input: unique package id. Output: uv installer runs and adds uv binary to expected location.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ winget install --id=astral-sh.uv  -e\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-sources` for uv pip in TOML\nDESCRIPTION: Sets the `no-sources` option for `uv pip` dependency resolution. When `true`, the `tool.uv.sources` table is ignored, forcing resolution against standard package metadata rather than local or Git sources. Useful for locking against publishable metadata. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_104\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-sources = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-sources = true\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Resolution Environments in TOML using uv\nDESCRIPTION: Configures `uv` via `pyproject.toml` to mandate that dependency resolution *must* succeed for certain environments. The `tool.uv.required-environments` setting uses PEP 508 markers. This example requires successful resolution for Intel macOS, which is crucial for packages lacking source distributions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\nrequired-environments = [\n    \"sys_platform == 'darwin' and platform_machine == 'x86_64'\",\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Library Project Configuration - TOML\nDESCRIPTION: This snippet is a typical `pyproject.toml` for a Python library generated by `uv init --lib`. It specifies project metadata and the use of a build backend for packaging and distribution. Requires installing `hatchling` and is suitable for projects intended to be distributed on PyPI.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"example-lib\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.11\"\ndependencies = []\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n\n----------------------------------------\n\nTITLE: Testing Package Installation with uv run (Console)\nDESCRIPTION: This command demonstrates how to use `uv run` to test if a built package (`<PACKAGE>`) can be successfully installed and imported. The `--with <PACKAGE>` argument installs the specified package into an isolated environment, `--no-project` ensures it doesn't use the local project source directly, and `python -c \"import <PACKAGE>\"` runs a simple Python command to attempt importing the package. An optional `--refresh-package <PACKAGE>` flag can force `uv` to ignore cached versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with <PACKAGE> --no-project -- python -c \"import <PACKAGE>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Documentation (Insiders) Dependencies in requirements.txt format\nDESCRIPTION: This requirements file specifies the pinned versions of Python packages needed to build the project's documentation using MkDocs, specifically for the 'insiders' configuration targeting Python 3.12 universally. It was automatically generated by `uv pip compile` from `docs/requirements-insiders.in` and includes dependencies like `mkdocs`, `mkdocs-material` (fetched from a specific Git commit hash `38c0b8187325c3bab386b666daf3518ac036f2f4`), `babel`, `black`, `mdformat`, and various plugins and libraries required by these core tools. The comments (`# via ...`) detail the dependency chain for each package.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/requirements-insiders.txt#_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile docs/requirements-insiders.in -o docs/requirements-insiders.txt --universal -p 3.12\nbabel==2.15.0\n    # via\n    #   mkdocs-git-revision-date-localized-plugin\n    #   mkdocs-material\nblack==23.10.0\n    # via -r docs/requirements.in\ncertifi==2024.7.4\n    # via requests\ncharset-normalizer==3.3.2\n    # via requests\nclick==8.1.7\n    # via\n    #   black\n    #   mkdocs\ncolorama==0.4.6\n    # via\n    #   click\n    #   mkdocs\n    #   mkdocs-material\nghp-import==2.1.0\n    # via mkdocs\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via mkdocs-git-revision-date-localized-plugin\nidna==3.7\n    # via requests\njinja2==3.1.4\n    # via\n    #   mkdocs\n    #   mkdocs-material\nlinkify-it-py==2.0.3\n    # via markdown-it-py\nmarkdown==3.6\n    # via\n    #   mkdocs\n    #   mkdocs-material\n    #   pymdown-extensions\nmarkdown-it-py==3.0.0\n    # via\n    #   mdformat\n    #   mdformat-gfm\n    #   mdit-py-plugins\nmarkupsafe==2.1.5\n    # via\n    #   jinja2\n    #   mkdocs\nmdformat==0.7.17\n    # via\n    #   -r docs/requirements.in\n    #   mdformat-admon\n    #   mdformat-gfm\n    #   mdformat-mkdocs\n    #   mdformat-tables\nmdformat-admon==2.0.2\n    # via\n    #   -r docs/requirements.in\n    #   mdformat-mkdocs\nmdformat-gfm==0.3.6\n    # via mdformat-mkdocs\nmdformat-mkdocs==2.0.4\n    # via -r docs/requirements.in\nmdformat-tables==0.4.1\n    # via mdformat-gfm\nmdit-py-plugins==0.4.1\n    # via\n    #   mdformat-admon\n    #   mdformat-gfm\nmdurl==0.1.2\n    # via markdown-it-py\nmergedeep==1.3.4\n    # via\n    #   mkdocs\n    #   mkdocs-material\nmkdocs==1.5.0\n    # via\n    #   -r docs/requirements.in\n    #   mkdocs-git-revision-date-localized-plugin\n    #   mkdocs-material\n    #   mkdocs-redirects\nmkdocs-git-revision-date-localized-plugin==1.3.0\n    # via -r docs/requirements.in\nmkdocs-material @ git+ssh://git@github.com/astral-sh/mkdocs-material-insiders.git@38c0b8187325c3bab386b666daf3518ac036f2f4\n    # via\n    #   -r docs/requirements-insiders.in\n    #   -r docs/requirements.in\nmkdocs-material-extensions==1.3.1\n    # via mkdocs-material\nmkdocs-redirects==1.2.2\n    # via -r docs/requirements.in\nmore-itertools==10.3.0\n    # via mdformat-mkdocs\nmypy-extensions==1.0.0\n    # via black\npackaging==24.1\n    # via\n    #   black\n    #   mkdocs\npaginate==0.5.6\n    # via mkdocs-material\npathspec==0.12.1\n    # via\n    #   black\n    #   mkdocs\nplatformdirs==4.2.2\n    # via\n    #   black\n    #   mkdocs\npygments==2.18.0\n    # via mkdocs-material\npymdown-extensions==10.8.1\n    # via mkdocs-material\npython-dateutil==2.9.0.post0\n    # via ghp-import\npytz==2025.1\n    # via mkdocs-git-revision-date-localized-plugin\npyyaml==6.0.1\n    # via\n    #   mkdocs\n    #   pymdown-extensions\n    #   pyyaml-env-tag\npyyaml-env-tag==0.1\n    # via mkdocs\nregex==2022.10.31\n    # via mkdocs-material\nrequests==2.32.3\n    # via mkdocs-material\nsix==1.16.0\n    # via python-dateutil\nsmmap==5.0.2\n    # via gitdb\nuc-micro-py==1.0.3\n    # via linkify-it-py\nurllib3==2.2.2\n    # via requests\nwatchdog==4.0.1\n    # via mkdocs\n\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool with Version Constraints (Console)\nDESCRIPTION: This command uses `uv tool install` with a version constraint (`httpie>0.1.0`). `uv` will install the latest version of `httpie` that satisfies this requirement.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install 'httpie>0.1.0'\n```\n\n----------------------------------------\n\nTITLE: Forcing Authentication for a Specific Index (TOML)\nDESCRIPTION: Demonstrates use of the 'authenticate = \"always\"' option for a uv index entry. Forces uv to always search for credentials for the specified index and raises errors if credentials are missing, increasing security for private repositories. Should be used for indexes that may automatically forward unauthenticated requests.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"example\"\nurl = \"https://example.com/simple\"\nauthenticate = \"always\"\n```\n\n----------------------------------------\n\nTITLE: Example pyproject.toml Build System Definition\nDESCRIPTION: An example snippet from a `pyproject.toml` file defining the build system for a Python package according to PEP 517/518. It specifies `setuptools` as a build requirement and designates the build backend, which is relevant when considering build constraints.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Sources for uv in TOML\nDESCRIPTION: This `pyproject.toml` snippet demonstrates how to define custom sources for specific dependencies using the `[tool.uv.sources]` table. It shows examples of sourcing `httpx` from a Git repository with a specific tag, `pytest` from a direct wheel URL, and `pydantic` from a local path marked as editable. This allows enriching dependency metadata beyond standard package indices.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\", tag = \"0.27.0\" }\npytest = { url = \"https://files.pythonhosted.org/packages/6b/77/7440a06a8ead44c7757a64362dd22df5760f9b12dc5f11b6188cd2fc27a0/pytest-8.3.3-py3-none-any.whl\" }\npydantic = { path = \"/path/to/pydantic\", editable = true }\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication for an Index (TOML)\nDESCRIPTION: Shows the use of 'authenticate = \"never\"' to disable search for credentials by uv for the given index. Causes errors if credentials are provided, thereby preventing credential leaks. All package resolution for this index is done without authentication.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"example\"\nurl = \"https://example.com/simple\"\nauthenticate = \"never\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Autocompletion for uv - bash\nDESCRIPTION: Enables command completion in Zsh for uv by adding an eval statement to ~/.zshrc. Requires uv. Input: none. Output: activate completions after sourcing config.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval \"$(uv generate-shell-completion zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Running uv Commands with Editable Installs (Shell)\nDESCRIPTION: Shows the use of `uv run --with-editable` to execute commands within the project's environment, ensuring that local editable package installations are included and accessible. This flag was added in uv v0.3.1.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuv run --with-editable\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with Different Package and Command Names using uvx (Console)\nDESCRIPTION: This command uses the `--from` option with `uvx` to specify the package (`httpie`) from which the command (`http`) should be run. This is necessary when the executable name differs from the package name.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from httpie http\n```\n\n----------------------------------------\n\nTITLE: Processing API Responses and Writing Package Names to File (Python)\nDESCRIPTION: Iterates through the dictionary of API responses collected in the previous step. For each response (which is a list of project entries), it extracts the 'name' field of each entry and appends it to `flat_list`. After processing all responses, it prints the complete list of names and then writes them, separated by newlines, to the file `pypi_10k_most_dependents.txt` located in the parent directory of the script.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/popular_packages/pypi_10k_most_dependents.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nflat_list = []\nfor response in responses.values():\n    for entry in response:\n        flat_list.append(entry[\"name\"])\nprint(flat_list)\nPath().parent.joinpath(\"pypi_10k_most_dependents.txt\").write_text(\"\\n\".join(flat_list))\n```\n\n----------------------------------------\n\nTITLE: Running Application File - Shell/Console\nDESCRIPTION: This shell snippet demonstrates changing into the created application directory and running the sample `main.py` file using `uv run`. It expects all files to be previously created as shown. The output is a printed greeting.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd example-app\n$ uv run main.py\nHello from example-project!\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Dependencies (Extras) in pyproject.toml (TOML)\nDESCRIPTION: Defines optional dependency groups (extras) using the `[project.optional-dependencies]` table in `pyproject.toml`. This example creates an extra named 'cli' containing packages like `rich` and `click`, which can be installed selectively.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/dependencies.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project.optional-dependencies]\ncli = [\n  \"rich\",\n  \"click\",\n]\n```\n\n----------------------------------------\n\nTITLE: Enforcing strict dependency checks with 'strict' in uv config - TOML\nDESCRIPTION: Enables validation of the Python environment by setting 'strict' to true, helping catch missing dependencies or related issues. Applied in either pyproject.toml or uv.toml via the appropriate section, this boolean flag ensures a tighter package environment integrity.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_118\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nstrict = true\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nstrict = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Library Project Directory Structure - Shell/Console\nDESCRIPTION: This shell snippet demonstrates the creation of a library project with the `--lib` flag, showing the resulting directory structure. The tree output reveals a `src` layout with a Python version pin, README, marker for type checking, and an `__init__.py` file inside the package directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv init --lib example-lib\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tree example-lib\nexample-lib\n├── .python-version\n├── README.md\n├── pyproject.toml\n└── src\n    └── example_lib\n        ├── py.typed\n        └── __init__.py\n```\n\n----------------------------------------\n\nTITLE: Importing and Running Library Function via Shell - Shell/Console\nDESCRIPTION: This shell snippet shows how to use `uv run` to execute a one-liner that imports the created library and invokes its `hello` function, printing the returned greeting. Assumes the library project has been installed and is in the environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ cd example-lib\n$ uv run python -c \"import example_lib; print(example_lib.hello())\"\nHello from example-lib!\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies from requirements.txt and constraints.txt (Console)\nDESCRIPTION: Illustrates adding multiple dependencies defined in a `requirements.txt` file using `uv add -r`. It also incorporates constraints specified in a `constraints.txt` file using the `-c` flag.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ # Add all dependencies from `requirements.txt`.\n$ uv add -r requirements.txt -c constraints.txt\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Version Requirement in TOML\nDESCRIPTION: Specifies the minimum required Python version for the project within the `pyproject.toml` file using the `requires-python` field under the `[project]` table. This constraint affects allowed syntax and dependency selection.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\" hl_lines=\"4\"\n[project]\nname = \"example\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling fish Shell Autocompletion for uv - bash\nDESCRIPTION: Creates a uv completion file in fish's completion directory by redirecting completion output. Input: none. Output: completion loaded automatically by fish. Requires write permission in completion directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\necho 'uv generate-shell-completion fish | source' >> ~/.config/fish/completions/uv.fish\n```\n\n----------------------------------------\n\nTITLE: Specifying Pinned Dependencies with Hashes - Python Requirements\nDESCRIPTION: This requirements specification explicitly lists required Python packages along with exact version constraints and their associated cryptographic hashes (SHA256) for verification. Environment markers are used to target specific Python versions and platforms, such as Windows, ensuring only compatible packages are installed on relevant platforms. Dependencies must be installed with a package installer supporting hash validation and environment markers, such as pip; inputs are the file contents, and outputs are installed, verified packages. This approach enhances security and reproducibility but requires that installations match the defined Python/environment versions closely.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/poetry-with-hashes.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n# Includes more styles than poetry uses\nwerkzeug==2.2.3 ; python_version >= \"3.8\" and python_version < \"4.0\" --hash=sha256:2e1ccc9417d4da358b9de6f174e3ac094391ea1d4fbef2d667865d819dfd0afe\nurllib3==1.26.15 ; python_version >= \"3.8\" and python_version < \"4\" \\\n    --hash sha256:8a388717b9476f934a21484e8c8e61875ab60644d29b9b39e11e4b9dc1c6b305\nansicon==1.89.0 ; python_version >= \"3.8\" and python_version < \"4\" and platform_system == \"Windows\" \\\n    --hash=sha256:e4d039def5768a47e4afec8e89e83ec3ae5a26bf00ad851f914d1240b444d2b1\nrequests-oauthlib==1.3.1 ; python_version >= \"3.8\" and python_version < \"4.0\" \\\n    --hash=sha256:2577c501a2fb8d05a304c09d090d6e47c306fef15809d102b327cf8364bddab5 \\\n    --hash=sha256:75beac4a47881eeb94d5ea5d6ad31ef88856affe2332b9aafb52c6452ccf0d7a\npsycopg2==2.9.5 ; python_version >= \"3.8\" and python_version < \"4.0\" \\\n    --hash=sha256:093e3894d2d3c592ab0945d9eba9d139c139664dcf83a1c440b8a7aa9bb21955 \\\n    --hash=sha256:190d51e8c1b25a47484e52a79638a8182451d6f6dff99f26ad9bd81e5359a0fa \\\n    --hash=sha256:1a5c7d7d577e0eabfcf15eb87d1e19314c8c4f0e722a301f98e0e3a65e238b4e \\\n    --hash=sha256:1e5a38aa85bd660c53947bd28aeaafb6a97d70423606f1ccb044a03a1203fe4a\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash Shell Autocompletion for uv - bash\nDESCRIPTION: Adds autocompletion for uv commands in Bash by appending an eval statement to ~/.bashrc. Input: none; modifies shell rc file. Output: autocompletion available next time shell is sourced. Requires uv installed and in path.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval \"$(uv generate-shell-completion bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in requirements.in (Plaintext)\nDESCRIPTION: Illustrates defining project dependencies in a `requirements.in` file, listing one requirement per line. This format is often used as input for dependency compilation tools like `uv pip compile`. It supports package names and version specifiers but not optional dependency groups.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/dependencies.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttpx\nruff>=0.3.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Elvish Shell Autocompletion for uvx - bash\nDESCRIPTION: Appends autocompletion code for uvx into Elvish's rc file, utilizing slurp. Ensures completion logic runs for new shells.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval (uvx --generate-shell-completion elvish | slurp)' >> ~/.elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Distribution Builds Globally in uv using TOML\nDESCRIPTION: Prevents `uv` from building any source distributions. Cached wheels of previously built distributions will be used, but any operation requiring a new build will fail. Default is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_48\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-build = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-build = true\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Package Index in TOML\nDESCRIPTION: Defines custom package indexes for `uv` to use during dependency resolution. Accepts PEP 503 compliant repositories or local directories. Indexes are prioritized by order of definition, with these settings overriding `index_url` and `extra_index_url`. Marking an index `default = true` gives it the lowest priority and disables the default PyPI index.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_40\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash Shell Autocompletion for uvx - bash\nDESCRIPTION: Adds uvx command autocompletion to Bash by updating ~/.bashrc with an eval statement. Output: uvx autocompletions available upon shell restart or reload.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval \"$(uvx --generate-shell-completion bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Configuring resolution strategy in uv with TOML\nDESCRIPTION: Sets the 'resolution' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This defines the strategy for selecting package versions during dependency resolution. Possible values are 'highest' (default), 'lowest', and 'lowest-direct'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_66\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nresolution = \"lowest-direct\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nresolution = \"lowest-direct\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PowerShell Autocompletion for uvx - powershell\nDESCRIPTION: Updates PowerShell profile to run uvx autocompletion command on startup. Ensures profile file exists, then writes invocation command into it. Must restart shell to activate.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\nif (!(Test-Path -Path $PROFILE)) {\n  New-Item -ItemType File -Path $PROFILE -Force\n}\nAdd-Content -Path $PROFILE -Value '(& uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression'\n```\n\n----------------------------------------\n\nTITLE: Upgrading specific packages via 'upgrade-package' in uv config - TOML\nDESCRIPTION: Allows upgrading select packages by listing them (optionally with version constraints) in the 'upgrade-package' array. Each entry is a string with a package name or a name and version specifier, providing fine-grained control over package upgrades in both config file types.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_124\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nupgrade-package = [\"ruff\"]\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nupgrade-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line Entry Points in TOML\nDESCRIPTION: Defines a command-line script entry point named `hello` in `pyproject.toml` under the `[project.scripts]` table. This configuration maps the command `hello` to execute the `hello` function within the `example` module when the package is installed. Requires a build system to be defined.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project.scripts]\nhello = \"example:hello\"\n```\n```\n\n----------------------------------------\n\nTITLE: Removing uv and uvx Binaries on Windows - powershell\nDESCRIPTION: Removes uv and uvx executables from the user's .local\\bin directory on Windows using PowerShell. Input: paths only, no parameters. Output: binaries are deleted; user may also need to clear from earlier install locations.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_27\n\nLANGUAGE: powershell\nCODE:\n```\n$ rm $HOME\\.local\\bin\\uv.exe\n$ rm $HOME\\.local\\bin\\uvx.exe\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Directory for uv in uv.toml\nDESCRIPTION: This snippet configures a custom cache directory for `uv` within a `uv.toml` file. Setting the `cache-dir` key directly overrides the default cache location. This example specifies that `uv` should use `./.uv_cache` as its cache directory, relative to the location of the `uv.toml` file or the current working directory depending on how `uv` discovers the configuration.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_26\n\nLANGUAGE: toml\nCODE:\n```\n```toml\ncache-dir = \"./.uv_cache\"\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Workspace Member Dependency using tool.uv.sources in pyproject.toml\nDESCRIPTION: This `pyproject.toml` snippet shows how a workspace member (`albatross`) declares a dependency on another member (`bird-feeder`). The `[tool.uv.sources]` table specifies that `bird-feeder` should be resolved from the workspace (`workspace = true`) rather than an external index like PyPI. This ensures the local version is used during development and locking. Dependencies between workspace members are editable by default.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/workspaces.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm>=4,<5\"]\n\n[tool.uv.sources]\nbird-feeder = { workspace = true }\n\n[tool.uv.workspace]\nmembers = [\"packages/*\"]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Package Sources from Specific Indexes in TOML\nDESCRIPTION: Illustrates how to define a named index (`pytorch`) marked as `explicit = true` under `[[tool.uv.index]]` in `pyproject.toml`. Then, under `[tool.uv.sources]`, it shows how to specify that a particular package (`torch`) should *only* be sourced from that explicit index, ignoring other configured or default indexes for this specific package.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\nexplicit = true\n\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring `prerelease` strategy for uv pip in TOML\nDESCRIPTION: Sets the `prerelease` option, defining the strategy for handling pre-release package versions during resolution. Options include `disallow`, `allow`, `if-necessary`, `explicit`, and `if-necessary-or-explicit`. The default is `\"if-necessary-or-explicit\"`, allowing pre-releases if needed or explicitly requested.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_110\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nprerelease = \"allow\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nprerelease = \"allow\"\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with Extra Dependencies using uvx --with (console)\nDESCRIPTION: Example showing how to use the `--with` option with `uvx` to temporarily include `<extra-package>` in the isolated environment when running `<tool>`. The option can be provided multiple times for multiple extra packages.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --with <extra-package> <tool>\n```\n\n----------------------------------------\n\nTITLE: Pinning uv Version in GitHub Actions Setup (YAML)\nDESCRIPTION: Demonstrates how to pin a specific version of uv (0.6.16) during installation in a GitHub Actions workflow by using the version input with the astral-sh/setup-uv action. Dependencies: requires a compatible runner, actions/checkout, and the setup-uv GitHub Action. This method ensures consistent tool versioning across workflow runs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example\\n\\njobs:\\n  uv-example:\\n    name: python\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv\\n        uses: astral-sh/setup-uv@v5\\n        with:\\n          # Install a specific version of uv.\\n          version: \"0.6.16\"\n```\n\n----------------------------------------\n\nTITLE: Implementing `manylinux_compatible` for Opting Out in Python\nDESCRIPTION: Example Python code demonstrating how a package can opt out of `manylinux` compatibility according to PEP 600. It defines `manylinux_compatible` functions and boolean flags that always signal incompatibility. `uv` respects this mechanism but applies the result globally based on a single check.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compatibility.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import annotations\nmanylinux1_compatible = False\nmanylinux2010_compatible = False\nmanylinux2014_compatible = False\n\n\ndef manylinux_compatible(*_, **__):  # PEP 600\n    return False\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache in astral-sh/setup-uv GitHub Action (YAML)\nDESCRIPTION: Shows how to enable uv cache persistence via the enable-cache input in the astral-sh/setup-uv GitHub Action. Requires: actions/checkout, setup-uv@v5. Facilitates faster workflow runs by sharing cached downloads between jobs/workflows.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enable caching\\n  uses: astral-sh/setup-uv@v5\\n  with:\\n    enable-cache: true\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Dependencies with requirements.txt - Python\nDESCRIPTION: This snippet provides a plain text list of Python packages and their exact versions, acting as a requirements.txt file for pip. It ensures reproducibility and compatibility for the 'astral-sh/uv' project by locking the versions of Django and pytz. This mechanism requires pip (Python's package installer) to process the file and retrieve the correct dependencies; expected input is a list of package requirements and output is a locked Python environment. No additional code or logic is present; constraints are imposed purely by the versions specified.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/constraints-b.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango==2.1.15\npytz==2023.3\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of uv on Windows using PowerShell - powershell\nDESCRIPTION: Fetches and installs a specific version of 'uv' on Windows by requesting the versioned install.ps1 script. PowerShell execution policy needs to be considered. Useful for managing release consistency. Input: versioned script URL. Output: Specific 'uv' version installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$ powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/0.6.16/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Locking Dependency Groups from Specific pyproject.toml Files\nDESCRIPTION: Compiles dependencies from specified groups (\"foo\", \"bar\") located in different `pyproject.toml` files (`some/path/pyproject.toml` and `other/pyproject.toml` respectively) using the `path:group` syntax with the `--group` flag in `uv pip compile`. Provides fine-grained control over group sources.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar\n```\n\n----------------------------------------\n\nTITLE: Applying Overrides during Locking using uv pip compile\nDESCRIPTION: Compiles dependencies from `requirements.in`, applying the version overrides specified in `overrides.txt` during resolution, using the `--override` flag with `uv pip compile`. This forces the specified versions even if they conflict with requirements declared by other packages.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile requirements.in --override overrides.txt\n```\n\n----------------------------------------\n\nTITLE: Locking Multiple Dependency Groups from a Specific Project Directory\nDESCRIPTION: Compiles dependencies belonging to multiple specified groups (\"foo\", \"bar\") defined in the `pyproject.toml` located in the directory specified by `--project some/path/`, using `uv pip compile`. Allows targeting groups in a non-current directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile --project some/path/ --group foo --group bar\n```\n\n----------------------------------------\n\nTITLE: Cache Invalidation for requirements.txt Files in setup-uv (YAML)\nDESCRIPTION: Adjusts cache invalidation in the uv setup action to watch all requirements.txt (including subdirectories) via a glob, causing cache refresh on any such file change. Environment: suited for monorepos or multi-package repositories.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Define a cache dependency glob\\n  uses: astral-sh/setup-uv@v5\\n  with:\\n    enable-cache: true\\n    cache-dependency-glob: \"requirements**.txt\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Versions in requirements.in (Python requirements file)\nDESCRIPTION: This snippet demonstrates a simple requirements.in file declaring that Flask must be installed with a version greater than or equal to 2.0.0. Used as a source for dependency resolution and compilation by uv, it influences which versions of Flask and indirect dependencies will be chosen. There are no dependencies beyond having a requirements.in file and using uv or pip-tools.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflask>=2.0.0\n```\n\n----------------------------------------\n\nTITLE: Error Installing Conflicting Extras Simultaneously with uv sync (Console)\nDESCRIPTION: Shows the console output and error message from `uv sync` when attempting to install both `extra1` and `extra2` simultaneously (`--extra extra1 --extra extra2`). Because these extras were declared as conflicting in `pyproject.toml` using `tool.uv.conflicts`, `uv` correctly prevents their simultaneous installation to avoid installing incompatible package versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv sync --extra extra1 --extra extra2\nResolved 3 packages in 14ms\nerror: extra `extra1`, extra `extra2` are incompatible with the declared conflicts: {`myproject[extra1]`, `myproject[extra2]`}\n```\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent Installs and Unzips (uv, TOML)\nDESCRIPTION: Sets the thread count for parallel install/unzip operations of packages during uv execution, helping optimize deployment times. Default is determined from core count. The parameter is an integer. Can be provided under the [tool.uv] table or directly in uv.toml.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_32\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nconcurrent-installs = 4\n```\n\nLANGUAGE: toml\nCODE:\n```\nconcurrent-installs = 4\n```\n\n----------------------------------------\n\nTITLE: Initializing a FastAPI Project with uv - Console\nDESCRIPTION: Demonstrates the uv command to initialize a new Python application layout within the project directory. This prepares the working directory for development, generating an appropriate project structure and a pyproject.toml file necessary for dependency management. Requires the uv CLI to be installed, and is run from the shell.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv init --app\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dependency Indexes in TOML\nDESCRIPTION: Shows how to define a custom package index using the `[[tool.uv.index]]` table array in `pyproject.toml`. This example adds a named index \"pytorch\" pointing to a specific URL. Defined indexes are prioritized based on order, and take precedence over `index-url` or `extra-index-url` settings.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\n```\n\n----------------------------------------\n\nTITLE: Defining Packaged Application Project Configuration - TOML\nDESCRIPTION: This `pyproject.toml` snippet provides the configuration for a packaged Python application. It includes metadata and specifies the build system (`hatchling`) and entry point script for the installed package. Requirements include installing the listed backend, and code will be installed into the environment when built.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"example-pkg\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.11\"\ndependencies = []\n\n[project.scripts]\nexample-pkg = \"example_pkg:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Conflicting Extras using tool.uv.conflicts in pyproject.toml (TOML)\nDESCRIPTION: Demonstrates configuring `uv` in `pyproject.toml` to handle the previously defined conflicting optional dependencies. The `tool.uv.conflicts` list under the `[tool.uv]` section specifies sets of extras that are mutually exclusive. Here, `extra1` and `extra2` are declared as conflicting, allowing `uv lock` to succeed by resolving them separately, but preventing simultaneous installation.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\nconflicts = [\n    [\n      { extra = \"extra1\" },\n      { extra = \"extra2\" },\n    ],\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Specific Package during Locking with uv pip compile\nDESCRIPTION: Compiles dependencies from standard input (`-`) into `requirements.txt` (`-o`), specifically forcing an upgrade of the `ruff` package to its latest compatible version using the `--upgrade-package` flag with `uv pip compile`. This overrides existing pins for the specified package.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile - -o requirements.txt --upgrade-package ruff\n```\n\n----------------------------------------\n\nTITLE: Passing PEP 517 Build Config Settings (uv, TOML)\nDESCRIPTION: Allows users to define key-value pairs that are passed to the build backend compliant with PEP 517, facilitating backend-specific settings (e.g., 'editable_mode' for setuptools). Expects a dictionary of string keys/values. Place in [tool.uv] for pyproject.toml or as a bare dictionary in uv.toml. No dependencies except that the build backend understands the supplied keys.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_33\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nconfig-settings = { editable_mode = \"compat\" }\n```\n\nLANGUAGE: toml\nCODE:\n```\nconfig-settings = { editable_mode = \"compat\" }\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Cache Entries in uv\nDESCRIPTION: The `uv cache prune` command removes cache entries that are no longer referenced or needed, such as those created by older versions of uv with different cache formats. This is a safe operation to run periodically to reclaim disk space.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nuv cache prune\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Python Versions with uv - Console\nDESCRIPTION: This snippet demonstrates how to use the 'uv' command-line tool to list all managed Python versions, ignoring any system-installed Python interpreters. It requires 'uv' to be installed and accessible in your environment. The command uses the '--managed-python' flag, which instructs uv to only consider Python installations it manages and returns a list of those versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list --managed-python\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency with uv add (Console)\nDESCRIPTION: Demonstrates how to add a package dependency (in this case, 'requests') to the project using `uv add`. This command updates the `pyproject.toml`, resolves dependencies, updates the `uv.lock` file, and installs the package into the project's virtual environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uv add requests\n```\n\n----------------------------------------\n\nTITLE: Declaring Conflicting Dependency Groups in TOML\nDESCRIPTION: Illustrates how to declare conflicting dependency groups (`group1` and `group2`) using the `conflicts` key in `pyproject.toml` under `[tool.uv]`. This informs `uv` that these groups have potentially incompatible dependencies and should be resolved separately, preventing simultaneous activation.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Require that the dependency groups `group1` and `group2`\n# are resolved in different forks so that they cannot conflict\n# with one another.\nconflicts = [\n    [\n        { group = \"group1\" },\n        { group = \"group2\" },\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Managed Python Versions with uv\nDESCRIPTION: This command uses the `--reinstall` flag with `uv python install` to force the reinstallation of all Python versions currently managed by `uv`. This can be useful to get updates or bug fixes applied to the Python distributions even if the version number hasn't changed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install --reinstall\n```\n\n----------------------------------------\n\nTITLE: Example pyproject.toml Configuration (TOML)\nDESCRIPTION: Provides an example of a basic `pyproject.toml` file for a project named 'hello-world'. It defines essential project metadata like name, version, description, readme file, and an empty list for dependencies under the `[project]` table.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"hello-world\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\ndependencies = []\n```\n\n----------------------------------------\n\nTITLE: Installing and Managing Multiple Python Versions with uv - Console\nDESCRIPTION: Demonstrates installing multiple Python versions using uv, with commands to search, download, and install requested versions. Requires uv, internet access, and sufficient privileges. Inputs are the version numbers; outputs are installed Python binaries.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install 3.10 3.11 3.12\nSearching for Python versions matching: Python 3.10\nSearching for Python versions matching: Python 3.11\nSearching for Python versions matching: Python 3.12\nInstalled 3 versions in 3.42s\n + cpython-3.10.14-macos-aarch64-none\n + cpython-3.11.9-macos-aarch64-none\n + cpython-3.12.4-macos-aarch64-none\n```\n\n----------------------------------------\n\nTITLE: Enforcing Explicit Package Source in uv (TOML)\nDESCRIPTION: Shows how to mark an index as 'explicit' in uv, restricting it to only install packages specified via [tool.uv.sources]. Other packages are installed from fallback indexes (e.g., PyPI). The combination of [tool.uv.sources] and [[tool.uv.index]] with explicit = true guarantees strict origin for selected packages. Set in pyproject.toml.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Project Configuration - TOML\nDESCRIPTION: This snippet shows a minimal `pyproject.toml` configuration for an application generated by `uv init`. It defines the project metadata without specifying a build system or packaging details, indicating that the app is not meant for installation. Prerequisites include Python 3.11 or newer when running the code generated by this file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"example-app\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.11\"\ndependencies = []\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies from Multiple Files using uv pip compile\nDESCRIPTION: Compiles dependencies from both `pyproject.toml` and `requirements-dev.in`, resolving them together and writing the locked versions to `requirements-dev.txt` using `uv pip compile`. This allows combining base and development dependencies into a single lock file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile pyproject.toml requirements-dev.in -o requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling 'require-hashes' for all dependencies in uv via TOML - TOML\nDESCRIPTION: Activates hash-checking mode by setting 'require-hashes' to true in either pyproject.toml or uv.toml. When enabled, every dependency must be accompanied by an explicit hash and version pin or direct URL, enhancing security but introducing some constraints such as disallowing git, editable, or most local dependencies. The value must be a boolean (true or false).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_116\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nrequire-hashes = true\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nrequire-hashes = true\n```\n\n----------------------------------------\n\nTITLE: Finding the First Available Python Executable with uv - Console\nDESCRIPTION: This snippet demonstrates using 'uv python find' to locate and print the path to the first available Python interpreter. By default, uv searches managed, virtual environment, and system interpreters, prioritizing active virtual environments if present. The output is the absolute path to the executable found.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ uv python find\n```\n\n----------------------------------------\n\nTITLE: Removing a Dependency with uv remove (Console)\nDESCRIPTION: Shows how to remove a package dependency (e.g., 'requests') from the project using `uv remove`. This updates `pyproject.toml`, `uv.lock`, and removes the package from the virtual environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uv remove requests\n```\n\n----------------------------------------\n\nTITLE: Executing Default uv build and Listing Output\nDESCRIPTION: Demonstrates the default behavior of `uv build`. This command builds both a source distribution (.tar.gz) and a binary wheel (.whl) for the Python project located in the current directory. The built artifacts are placed in the `dist/` subdirectory, which is then listed using `ls dist/` to show the generated files.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/build.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv build\n$ ls dist/\nexample-0.1.0-py3-none-any.whl\nexample-0.1.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Package Index in uv using TOML\nDESCRIPTION: Demonstrates how to define an additional package index for uv in the pyproject.toml configuration file. This snippet creates a named index with the required URL. It can be extended with additional keys for prioritization or authentication settings. The configuration requires uv and a properly structured pyproject.toml.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\n# Optional name for the index.\nname = \"pytorch\"\n# Required URL for the index.\nurl = \"https://download.pytorch.org/whl/cpu\"\n```\n\n----------------------------------------\n\nTITLE: Example Resolved Dependencies (Prioritizing Latest FastAPI) using UV\nDESCRIPTION: An alternative example `requirements.txt` generated by `uv pip compile` from the same `requirements.in`. This resolution prioritizes the latest `fastapi` version (`0.110.0`), necessitating the use of an older compatible `starlette` version (`0.36.3`) to satisfy `fastapi`'s constraint (`starlette>=0.36.3,<0.37.0`). This demonstrates another equally valid resolution set.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compatibility.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"requirements.txt\"\n# This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nannotated-types==0.6.0\n    # via pydantic\nanyio==4.3.0\n    # via starlette\nfastapi==0.110.0\nidna==3.6\n    # via anyio\npydantic==2.6.3\n    # via fastapi\npydantic-core==2.16.3\n    # via pydantic\nsniffio==1.3.1\n    # via anyio\nstarlette==0.36.3\n    # via fastapi\ntyping-extensions==4.10.0\n    # via\n    #   fastapi\n    #   pydantic\n    #   pydantic-core\n```\n```\n\n----------------------------------------\n\nTITLE: Allowing Insecure Hosts for uv in pyproject.toml\nDESCRIPTION: This snippet shows how to configure `uv` to allow insecure (non-HTTPS or unverified HTTPS) connections to specific hosts within a `pyproject.toml` file. The `allow-insecure-host` list under `[tool.uv]` specifies hostnames or host-port pairs (e.g., `localhost:8080`) for which SSL verification will be bypassed. Use this option with caution as it can expose connections to MITM attacks.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv]\nallow-insecure-host = [\"localhost:8080\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing uv Using PowerShell - PowerShell\nDESCRIPTION: This snippet demonstrates installing uv on Windows by using PowerShell to download and execute an installation script from the internet. Requires PowerShell with permission to execute scripts ('-ExecutionPolicy ByPass') and internet access. Input is the PowerShell command, and output is the installation of uv.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$ powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Running a Tool from a Git Repository using uvx (Console)\nDESCRIPTION: This command uses `uvx` with the `--from` option to run a tool (`httpie`) directly from a Git repository URL. `uv` will clone the repository and install the package in a temporary environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from git+https://github.com/httpie/cli httpie\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Requiring Username and Password (TOML)\nDESCRIPTION: Defines an index entry for an internal proxy repository that requires authentication. The index is named and points to the private repository URL; credentials are intended to be provided at runtime, not stored in TOML. Used in combination with environment variables or embedded credentials.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"internal-proxy\"\nurl = \"https://example.com/simple\"\n```\n\n----------------------------------------\n\nTITLE: Skipping Environment Sync with uv run --no-sync (Console)\nDESCRIPTION: Runs a command using `uv run` without first checking if the virtual environment is synchronized with the lockfile. This bypasses the automatic environment update step.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --no-sync ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Environment Integrity with uv pip check\nDESCRIPTION: Checks the current Python environment for conflicting requirements or missing dependencies among the installed packages using the `uv pip check` command. This is useful for identifying potential issues after installing packages incrementally.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/inspection.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip check\n```\n\n----------------------------------------\n\nTITLE: Specifying Pinned Python Dependencies for Documentation (requirements.txt)\nDESCRIPTION: This requirements file lists the exact versions of Python packages needed for the documentation build, generated by 'uv pip compile'. It ensures build reproducibility by locking dependencies like Babel, Black, MkDocs, MkDocs-Material, mdformat, and their transitive dependencies. Comments originating from the compilation process indicate which package required each listed dependency.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile docs/requirements.in -o docs/requirements.txt --universal -p 3.12\nbabel==2.15.0\n    # via\n    #   mkdocs-git-revision-date-localized-plugin\n    #   mkdocs-material\nblack==24.4.2\n    # via -r docs/requirements.in\ncertifi==2024.7.4\n    # via requests\ncharset-normalizer==3.3.2\n    # via requests\nclick==8.1.7\n    # via\n    #   black\n    #   mkdocs\ncolorama==0.4.6\n    # via\n    #   click\n    #   mkdocs\n    #   mkdocs-material\nghp-import==2.1.0\n    # via mkdocs\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via mkdocs-git-revision-date-localized-plugin\nidna==3.7\n    # via requests\njinja2==3.1.4\n    # via\n    #   mkdocs\n    #   mkdocs-material\nlinkify-it-py==2.0.3\n    # via markdown-it-py\nmarkdown==3.6\n    # via\n    #   mkdocs\n    #   mkdocs-material\n    #   pymdown-extensions\nmarkdown-it-py==3.0.0\n    # via\n    #   mdformat\n    #   mdformat-gfm\n    #   mdit-py-plugins\nmarkupsafe==2.1.5\n    # via\n    #   jinja2\n    #   mkdocs\nmdformat==0.7.17\n    # via\n    #   -r docs/requirements.in\n    #   mdformat-admon\n    #   mdformat-gfm\n    #   mdformat-mkdocs\n    #   mdformat-tables\nmdformat-admon==2.0.6\n    # via\n    #   -r docs/requirements.in\n    #   mdformat-mkdocs\nmdformat-gfm==0.3.6\n    # via mdformat-mkdocs\nmdformat-mkdocs==3.0.0\n    # via -r docs/requirements.in\nmdformat-tables==0.4.1\n    # via mdformat-gfm\nmdit-py-plugins==0.4.1\n    # via\n    #   mdformat-admon\n    #   mdformat-gfm\n    #   mdformat-mkdocs\nmdurl==0.1.2\n    # via markdown-it-py\nmergedeep==1.3.4\n    # via\n    #   mkdocs\n    #   mkdocs-get-deps\nmkdocs==1.6.0\n    # via\n    #   -r docs/requirements.in\n    #   mkdocs-git-revision-date-localized-plugin\n    #   mkdocs-material\n    #   mkdocs-redirects\nmkdocs-get-deps==0.2.0\n    # via mkdocs\nmkdocs-git-revision-date-localized-plugin==1.3.0\n    # via -r docs/requirements.in\nmkdocs-material==9.5.29\n    # via -r docs/requirements.in\nmkdocs-material-extensions==1.3.1\n    # via mkdocs-material\nmkdocs-redirects==1.2.2\n    # via -r docs/requirements.in\nmore-itertools==10.3.0\n    # via mdformat-mkdocs\nmypy-extensions==1.0.0\n    # via black\npackaging==24.1\n    # via\n    #   black\n    #   mkdocs\npaginate==0.5.6\n    # via mkdocs-material\npathspec==0.12.1\n    # via\n    #   black\n    #   mkdocs\nplatformdirs==4.2.2\n    # via\n    #   black\n    #   mkdocs-get-deps\npygments==2.18.0\n    # via mkdocs-material\npymdown-extensions==10.8.1\n    # via mkdocs-material\npython-dateutil==2.9.0.post0\n    # via ghp-import\npytz==2025.1\n    # via mkdocs-git-revision-date-localized-plugin\npyyaml==6.0.1\n    # via\n    #   mkdocs\n    #   mkdocs-get-deps\n    #   pymdown-extensions\n    #   pyyaml-env-tag\npyyaml-env-tag==0.1\n    # via mkdocs\nregex==2024.5.15\n    # via mkdocs-material\nrequests==2.32.3\n    # via mkdocs-material\nsix==1.16.0\n    # via python-dateutil\nsmmap==5.0.2\n    # via gitdb\nuc-micro-py==1.0.3\n    # via linkify-it-py\nurllib3==2.2.2\n    # via requests\nwatchdog==4.0.1\n    # via mkdocs\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Tool Version using uvx (Console)\nDESCRIPTION: This command demonstrates running a specific version (`0.3.0`) of a tool (`ruff`) using the `command@<version>` syntax with `uvx`. The `check` argument is passed to the `ruff` command.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uvx ruff@0.3.0 check\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Bytecode After Installation with uv Pip - TOML\nDESCRIPTION: Activates bytecode compilation of Python files post-installation by setting 'compile-bytecode = true'. This option processes the full site-packages directory for consistent bytecode generation, benefiting scenarios requiring faster application start times. Should be a boolean within the TOML configuration.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_74\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\ncompile-bytecode = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\ncompile-bytecode = true\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom uv Install Path on macOS/Linux using UV_INSTALL_DIR\nDESCRIPTION: Installs the 'uv' tool to a specified custom directory (`/custom/path`) on macOS or Linux systems. This is achieved by setting the `UV_INSTALL_DIR` environment variable immediately before piping the downloaded installation script (`install.sh`) to `sh`. This overrides the default installation path (~/.local/bin or derived from XDG variables).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/installer.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=\"/custom/path\" sh\n```\n\n----------------------------------------\n\nTITLE: Bypassing PEP 517 Build Isolation with uv (Shell)\nDESCRIPTION: Demonstrates a workaround for installing Python packages that fail with `uv`'s default PEP 517 build isolation. It first installs a necessary build dependency (`wheel`) directly into the environment, then installs the target package (`biopython==1.77`) using the `--no-build-isolation` flag to prevent `uv` from creating an isolated build environment. This approach requires manually managing build dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compatibility.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install wheel && uv pip install --no-build-isolation biopython==1.77\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project Directory with uv init (Console)\nDESCRIPTION: This command initializes a new Python project named 'hello-world' in a new directory using `uv init`. It then changes the current directory into the newly created project folder.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv init hello-world\n$ cd hello-world\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Dependency Requirements with uv pip - Text Requirements File\nDESCRIPTION: This snippet defines a static set of Python dependencies, each pinned to an exact version, for use with package managers like pip or tools like uv. The file is structured as a requirements lock, generated by 'uv pip compile', ensuring deterministic reproducibility for project environments. Inline comments clarify transitive dependencies, but there are no executable statements or Python code blocks.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/flyte.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    uv pip compile scripts/requirements/flyte.in\\nabsl-py==2.0.0\\n    # via\\n    #   tensorboard\\n    #   tensorflow\\nasttokens==2.4.1\\n    # via stack-data\\nastunparse==1.6.3\\n    # via tensorflow\\nattrs==23.2.0\\n    # via hypothesis\\nautoflake==2.2.1\\ncachetools==5.3.2\\n    # via google-auth\\ncertifi==2023.11.17\\n    # via requests\\ncfgv==3.4.0\\n    # via pre-commit\\ncharset-normalizer==3.3.2\\n    # via requests\\ncodespell==2.2.6\\ncoverage==7.4.0\\n    # via pytest-cov\\ndecorator==5.1.1\\n    # via ipython\\ndistlib==0.3.8\\n    # via virtualenv\\nexceptiongroup==1.2.0\\n    # via\\n    #   hypothesis\\n    #   ipython\\n    #   pytest\\nexecuting==2.0.1\\n    # via stack-data\\nfilelock==3.13.1\\n    # via virtualenv\\nflatbuffers==23.5.26\\n    # via tensorflow\\ngast==0.5.4\\n    # via tensorflow\\ngoogle-api-core==2.15.0\\n    # via\\n    #   google-cloud-bigquery\\n    #   google-cloud-bigquery-storage\\n    #   google-cloud-core\\ngoogle-auth==2.26.1\\n    # via\\n    #   google-api-core\\n    #   google-auth-oauthlib\\n    #   google-cloud-core\\n    #   tensorboard\\ngoogle-auth-oauthlib==0.4.6\\n    # via tensorboard\\ngoogle-cloud-bigquery==3.14.1\\ngoogle-cloud-bigquery-storage==2.24.0\\ngoogle-cloud-core==2.4.1\\n    # via google-cloud-bigquery\\ngoogle-crc32c==1.5.0\\n    # via google-resumable-media\\ngoogle-pasta==0.2.0\\n    # via tensorflow\\ngoogle-resumable-media==2.7.0\\n    # via google-cloud-bigquery\\ngoogleapis-common-protos==1.62.0\\n    # via\\n    #   google-api-core\\n    #   grpcio-status\\ngrpcio==1.60.0\\n    # via\\n    #   grpcio-status\\n    #   tensorboard\\n    #   tensorflow\\ngrpcio-status==1.60.0\\nh5py==3.10.0\\n    # via tensorflow\\nhypothesis==6.92.5\\nidentify==2.5.33\\n    # via pre-commit\\nidna==3.6\\n    # via requests\\niniconfig==2.0.0\\n    # via pytest\\nipython==8.20.0\\njaraco-classes==3.3.0\\n    # via keyrings-alt\\njedi==0.19.1\\n    # via ipython\\njoblib==1.3.2\\n    # via scikit-learn\\nkeras==2.8.0\\n    # via tensorflow\\nkeras-preprocessing==1.1.2\\n    # via tensorflow\\nkeyrings-alt==5.0.0\\nlibclang==16.0.6\\n    # via tensorflow\\nmarkdown==3.5.1\\n    # via tensorboard\\nmarkupsafe==2.1.3\\n    # via werkzeug\\nmatplotlib-inline==0.1.6\\n    # via ipython\\nmock==5.1.0\\nmore-itertools==10.2.0\\n    # via jaraco-classes\\nmypy==1.8.0\\nmypy-extensions==1.0.0\\n    # via mypy\\nnodeenv==1.8.0\\n    # via pre-commit\\nnumpy==1.26.3\\n    # via\\n    #   h5py\\n    #   keras-preprocessing\\n    #   opt-einsum\\n    #   scikit-learn\\n    #   scipy\\n    #   tensorboard\\n    #   tensorflow\\noauthlib==3.2.2\\n    # via requests-oauthlib\\nopt-einsum==3.3.0\\n    # via tensorflow\\npackaging==23.2\\n    # via\\n    #   google-cloud-bigquery\\n    #   pytest\\nparso==0.8.3\\n    # via jedi\\npexpect==4.9.0\\n    # via ipython\\npillow==10.2.0\\nplatformdirs==4.1.0\\n    # via virtualenv\\npluggy==1.3.0\\n    # via pytest\\npre-commit==3.6.0\\nprometheus-client==0.19.0\\nprompt-toolkit==3.0.43\\n    # via ipython\\nproto-plus==1.23.0\\n    # via google-cloud-bigquery-storage\\nprotobuf==4.25.1\\n    # via\\n    #   google-api-core\\n    #   google-cloud-bigquery-storage\\n    #   googleapis-common-protos\\n    #   grpcio-status\\n    #   proto-plus\\n    #   tensorboard\\n    #   tensorflow\\nptyprocess==0.7.0\\n    # via pexpect\\npure-eval==0.2.2\\n    # via stack-data\\npyasn1==0.5.1\\n    # via\\n    #   pyasn1-modules\\n    #   rsa\\npyasn1-modules==0.3.0\\n    # via google-auth\\npyflakes==3.2.0\\n    # via autoflake\\npygments==2.17.2\\n    # via ipython\\npytest==7.4.4\\n    # via\\n    #   pytest-asyncio\\n    #   pytest-cov\\npytest-asyncio==0.23.3\\npytest-cov==4.1.0\\npython-dateutil==2.8.2\\n    # via google-cloud-bigquery\\npyyaml==6.0.1\\n    # via pre-commit\\nrequests==2.31.0\\n    # via\\n    #   google-api-core\\n    #   google-cloud-bigquery\\n    #   requests-oauthlib\\n    #   tensorboard\\nrequests-oauthlib==1.3.1\\n    # via google-auth-oauthlib\\nrsa==4.9\\n    # via google-auth\\nscikit-learn==1.3.2\\nscipy==1.11.4\\n    # via scikit-learn\\nsetuptools==69.0.3\\n    # via\\n    #   nodeenv\\n    #   tensorboard\\n    #   tensorflow\\nsix==1.16.0\\n    # via\\n    #   asttokens\\n    #   astunparse\\n    #   google-pasta\\n    #   keras-preprocessing\\n    #   python-dateutil\\n    #   tensorflow\\nsortedcontainers==2.4.0\\n    # via hypothesis\\nstack-data==0.6.3\\n    # via ipython\\ntensorboard==2.8.0\\n    # via tensorflow\\ntensorboard-data-server==0.6.1\\n    # via tensorboard\\ntensorboard-plugin-wit==1.8.1\\n    # via tensorboard\\ntensorflow==2.8.1\\ntensorflow-estimator==2.8.0\\n    # via tensorflow\\ntensorflow-io-gcs-filesystem==0.35.0\\n    # via tensorflow\\ntermcolor==2.4.0\\n    # via tensorflow\\nthreadpoolctl==3.2.0\\n    # via scikit-learn\\ntomli==2.0.1\\n    # via\\n    #   autoflake\\n    #   mypy\\n    #   pytest\\ntorch==1.12.1\\ntraitlets==5.14.1\\n    # via\\n    #   ipython\\n    #   matplotlib-inline\\ntypes-croniter==2.0.0.20240106\\ntypes-mock==5.1.0.20240106\\ntypes-protobuf==4.24.0.20240106\\ntypes-requests==2.31.0.20240106\\ntyping-extensions==4.9.0\\n    # via\\n    #   mypy\\n    #   tensorflow\\n    #   torch\\nurllib3==2.1.0\\n    # via\\n    #   requests\\n    #   types-requests\\nvirtualenv==20.25.0\\n    # via pre-commit\\nwcwidth==0.2.13\\n    # via prompt-toolkit\\nwerkzeug==3.0.1\\n    # via tensorboard\\nwheel==0.42.0\\n    # via\\n    #   astunparse\\n    #   tensorboard\\nwrapt==1.16.0\\n    # via tensorflow\\n\n```\n\n----------------------------------------\n\nTITLE: Locking a Specific Dependency Group using uv pip compile\nDESCRIPTION: Compiles dependencies belonging to the specified group (e.g., \"foo\") defined in the `pyproject.toml` located in the current directory, using the `--group` flag with `uv pip compile`. This targets specific sets of optional dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile --group foo\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project in the Current Directory with uv init (Console)\nDESCRIPTION: This sequence of commands first creates a directory named 'hello-world', changes into it, and then initializes a new Python project within that existing directory using `uv init`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/projects.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir hello-world\n$ cd hello-world\n$ uv init\n```\n\n----------------------------------------\n\nTITLE: Disabling PATH Modification during uv Installation using INSTALLER_NO_MODIFY_PATH\nDESCRIPTION: Prevents the 'uv' installer from automatically modifying shell profile files (e.g., .bashrc, .zshrc) to add the installation directory to the system `PATH`. This is achieved by setting the `INSTALLER_NO_MODIFY_PATH` environment variable to `1` before executing the downloaded installation script. Subsequent operations like `uv self update` will also respect this setting.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/installer.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | env INSTALLER_NO_MODIFY_PATH=1 sh\n```\n\n----------------------------------------\n\nTITLE: Marking a Package as Private in pyproject.toml (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to add a classifier to the `[project]` section of a `pyproject.toml` file to mark the package as private. The specific classifier `\"Private :: Do Not Upload\"` signals to PyPI that this package should not be accepted for public publishing, preventing accidental uploads. This setting does not impact security or privacy on alternative registries.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nclassifiers = [\"Private :: Do Not Upload\"]\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool with Extra Dependencies using uv tool install --with (console)\nDESCRIPTION: Command demonstrating the use of `--with` during `uv tool install` to include `<extra-package>` persistently in the isolated environment created for `<tool-package>`. The option supports package specifiers for versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install --with <extra-package> <tool-package>\n```\n\n----------------------------------------\n\nTITLE: Configuring `keyring-provider` for uv pip in TOML\nDESCRIPTION: Enables the use of the system's `keyring` service for authenticating with package indexes. Currently, only the `\"subprocess\"` provider is supported, which utilizes the `keyring` command-line interface. The default value is `\"disabled\"`, and the type is `str`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_92\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nkeyring-provider = \"subprocess\"\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nkeyring-provider = \"subprocess\"\n```\n```\n\n----------------------------------------\n\nTITLE: Emitting Marker Expression for uv Pip Compile Output - TOML\nDESCRIPTION: Controls emission of marker strings, which specify the conditions under which pinned dependencies apply. This is enabled via 'emit-marker-expression = true', and is relevant for reproducibility or specialized installation workflows where environmental markers matter.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_82\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nemit-marker-expression = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nemit-marker-expression = true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring publish URL in uv with TOML\nDESCRIPTION: Sets the 'publish-url' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This specifies the target URL for publishing packages. The default value is 'https://upload.pypi.org/legacy/'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_58\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npublish-url = \"https://test.pypi.org/legacy/\"\n```\n\nLANGUAGE: toml\nCODE:\n```\npublish-url = \"https://test.pypi.org/legacy/\"\n```\n\n----------------------------------------\n\nTITLE: Showing Package Information with uv pip show\nDESCRIPTION: Displays detailed information about one or more installed packages using the `uv pip show` command followed by the package name(s) (e.g., `numpy`). Information typically includes version, dependencies, location, etc.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/inspection.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip show numpy\n```\n\n----------------------------------------\n\nTITLE: Providing Supplementary Package Locations (uv, TOML)\nDESCRIPTION: Defines additional local filesystem paths or flat HTML pages containing package downloads, directing uv to look for packages beyond standard index locations. Inputs are lists of URLs or directory paths as strings; can be set in [tool.uv] or globally in uv.toml. Format must be compatible (wheels, source dists at directory root, or HTML links).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_37\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying uv Installation via Command Line - Console Output\nDESCRIPTION: This snippet demonstrates running the 'uv' command after installation to verify that the uv package manager is available in the system PATH. When executed in a terminal, it displays a brief description of uv and its usage menu, listing available options and commands. No dependencies are required aside from having uv successfully installed; the command outputs general help information and does not accept additional parameters in this context.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/first-steps.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv\\nAn extremely fast Python package manager.\\n\\nUsage: uv [OPTIONS] <COMMAND>\\n\\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring `python-platform` for uv pip in TOML\nDESCRIPTION: Sets the `python-platform` option for `uv pip` resolution. This specifies the target platform using a \"target triple\" string (e.g., `x86_64-unknown-linux-gnu`, `aarch64-apple-darwin`), influencing which package versions and wheels are considered compatible. The default value is `None` (use the current platform).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_112\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\npython-platform = \"x86_64-unknown-linux-gnu\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\npython-platform = \"x86_64-unknown-linux-gnu\"\n```\n\n----------------------------------------\n\nTITLE: Installing uv via pip - Python Package Manager - console\nDESCRIPTION: Demonstrates installing 'uv' into the current Python environment using pip. Input: package name 'uv'. Output: installs uv's Python wheel or builds from source if necessary. Limitation: may require Rust toolchain if Wheels unavailable.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ pip install uv\n```\n\n----------------------------------------\n\nTITLE: Specifying NumPy Dependency (requirements)\nDESCRIPTION: Declares 'numpy' as a project dependency. This line, typically found in a requirements file (e.g., requirements.txt), instructs package managers like pip to install the numpy library.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/whitespace.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Keys for Build Invalidation (uv, TOML)\nDESCRIPTION: Specifies the list of files, directories, git commit, or environment variables that, when changed, will invalidate the build cache for the project. Dependencies include the uv tool, a project structure with relevant files (e.g., pyproject.toml). Example keys such as 'file', 'dir', 'git', and 'env' are supported, with value formats as strings or pattern globs. Intended to be placed under either the [tool.uv] table (pyproject.toml) or in uv.toml for granular cache control. Input is a list of dictionaries defining keys to include, output is cache invalidation behavior at build time.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_27\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { file = \"requirements.txt\" }, { git = { commit = true } }]\n```\n\nLANGUAGE: toml\nCODE:\n```\ncache-keys = [{ file = \"pyproject.toml\" }, { file = \"requirements.txt\" }, { git = { commit = true } }]\n```\n\n----------------------------------------\n\nTITLE: Configuring `prefix` for uv pip install in TOML\nDESCRIPTION: Sets the `prefix` option for `uv pip install`. This directs installation into subdirectories (`lib`, `bin`, etc.) under the specified path, mimicking a virtual environment structure at that location. It's generally recommended to use `--python` instead for better portability. The default value is `None`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_109\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nprefix = \"./prefix\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nprefix = \"./prefix\"\n```\n\n----------------------------------------\n\nTITLE: Finding System Python Prefix using Console Command\nDESCRIPTION: A console command using Python's `sysconfig` module to print the installation prefix (e.g., `/usr/local`). This path can be used to set the `UV_PROJECT_ENVIRONMENT` environment variable if targeting the system Python environment, although this practice is discouraged.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ python -c \"import sysconfig; print(sysconfig.get_config_var('prefix'))\"\n/usr/local\n```\n```\n\n----------------------------------------\n\nTITLE: Setting UV_SYSTEM_PYTHON Variable for System-wide Python Installation in GitLab CI YAML\nDESCRIPTION: This YAML block demonstrates how to enable system-wide Python package installations when using 'uv pip' by setting the 'UV_SYSTEM_PYTHON' variable globally at the top level of the GitLab CI configuration. This override is necessary for workflows where a virtual environment is not desired and should be used with caution to avoid conflicts. The variable allows all uv invocations in the workflow to install packages directly to the system Python environment without requiring the '--system' flag each time.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/gitlab.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  UV_SYSTEM_PYTHON: 1\n\n# [...]\n\n```\n\n----------------------------------------\n\nTITLE: Running a Command Inside Project Virtual Environment via uv (Shell, console)\nDESCRIPTION: Demonstrates how to execute a Python command in the context of the project's isolated virtual environment using 'uv run'. This approach ensures the command has access to all installed project dependencies, even when the current shell does not. Dependencies: uv CLI must be installed and the project must be initialized with a `.venv`. The input is the shell command for Python; the expected output is the command's result or any errors.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/run.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv run python -c \"import example\"\n```\n\n----------------------------------------\n\nTITLE: Disallowed Conditional Dependency Specification in requirements.txt\nDESCRIPTION: This line defines an editable installation (`-e ./editable`) that is conditional on the Python version being 3.9 or higher and the operating system name being 'posix'. According to the preceding comment, this specific syntax is disallowed, likely because it lacks whitespace before the colon in the 'python_version' environment marker. This format is typically found in `requirements.txt` files processed by Python package managers like pip or uv.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/semicolon.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\n# Disallowed (missing whitespace before colon)\n-e ./editable;python_version >= \"3.9\" and os_name == \"posix\"\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Entrypoint for uv Distroless Docker Image in GitLab CI YAML\nDESCRIPTION: This YAML snippet shows how to specify an empty entrypoint for the uv Docker image to ensure compatibility with distroless images under GitLab CI/CD. The 'image' section uses the 'name' key and sets 'entrypoint' to an empty array, which may be necessary for proper container initialization when using stricter, minimal base images. This configuration requires using the Astral uv Docker image and is intended as a drop-in for more restrictive container environments.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/gitlab.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuv:\n  image:\n    name: ghcr.io/astral-sh/uv:$UV_VERSION\n    entrypoint: [\"\"]\n  # ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependency Constraints in TOML\nDESCRIPTION: Provides an example of using `constraint-dependencies` in `pyproject.toml` under `[tool.uv]` to restrict the version of a project dependency (`grpcio`) to be less than `1.65`. This constraint applies only if `grpcio` is requested as a direct or transitive dependency and does not trigger installation on its own.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\n# Ensure that the grpcio version is always less than 1.65, if it's requested by a\n# direct or transitive dependency.\nconstraint-dependencies = [\"grpcio<1.65\"]\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Standalone Installer (Bash Script)\nDESCRIPTION: This snippet demonstrates installing uv using a standalone shell script via curl on macOS and Linux. It requires curl and sh, and pulls the latest uv installer from the official website. The expected output is a local installation of uv; running this command will fetch and execute the installer script directly.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# On macOS and Linux.\\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Running a Python Script with Inline Dependency Metadata Using uv (Python)\nDESCRIPTION: This snippet illustrates a Python script ('example.py') where dependencies are declared via special comments at the top. When executed using 'uv run', only the specified dependencies ('httpx') are available to the script, isolated from the project's virtual environment context. The script performs a GET request to retrieve PEPs in JSON format and prints the titles of the first ten. Dependencies: 'uv' for script execution, 'httpx' at runtime. Inputs: none required; Output: prints list of (PEP number, title) tuples.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/run.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# dependencies = [\n#   \"httpx\",\n# ]\n# ///\n\nimport httpx\n\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\nprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n```\n\n----------------------------------------\n\nTITLE: Specifying an Editable Local Python Package\nDESCRIPTION: Specifies the 'black' package as an editable installation located at the relative path `./scripts/packages/black_editable`. This format is typically used in requirements files (like requirements.txt) for development environments, linking the installation to the source directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/bare-url.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n./scripts/packages/black_editable\n```\n\n----------------------------------------\n\nTITLE: Setting Build Platform in Dockerfile for uv MRE\nDESCRIPTION: Shows how to explicitly set the target platform (`--platform=linux/amd64`) in the `FROM` instruction of a Dockerfile. This ensures the build uses the intended architecture (e.g., Intel/AMD `amd64` or Apple/ARM `arm64`) regardless of the host system, crucial for reproducing architecture-specific issues.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim\n```\n\n----------------------------------------\n\nTITLE: Allowing upgrades of all packages with 'upgrade' in uv config - TOML\nDESCRIPTION: Enables upgrades for all dependencies by setting 'upgrade' to true, overriding version pins in any existing output file. This boolean setting is declared in either config file's proper section and is useful when needing to update all packages regardless of lock file constraints.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_123\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nupgrade = true\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nupgrade = true\n```\n\n----------------------------------------\n\nTITLE: Specifying Pinned Python Dependencies (requirements.txt format)\nDESCRIPTION: This file lists the exact versions of Python packages needed for the project, generated automatically by `uv` from `scripts/requirements/scispacy.in`. Each line specifies a package and its pinned version (`package==version`). Comments (`# via ...`) indicate which other packages depend on the listed one, revealing parts of the dependency tree.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/scispacy.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile scripts/requirements/scispacy.in\nannotated-types==0.6.0\n    # via pydantic\nblack==23.12.1\nblis==0.7.11\n    # via thinc\ncatalogue==2.0.10\n    # via\n    #   spacy\n    #   srsly\n    #   thinc\ncertifi==2023.11.17\n    # via requests\ncffi==1.16.0\n    # via cryptography\ncharset-normalizer==3.3.2\n    # via requests\nclick==8.1.7\n    # via\n    #   black\n    #   typer\nconfection==0.1.4\n    # via thinc\nconllu==4.5.3\ncoverage==7.4.0\n    # via pytest-cov\ncryptography==41.0.7\n    # via secretstorage\ncymem==2.0.8\n    # via\n    #   preshed\n    #   spacy\n    #   thinc\ndocutils==0.20.1\n    # via readme-renderer\nexceptiongroup==1.2.0\n    # via pytest\nflake8==7.0.0\nidna==3.6\n    # via requests\nimportlib-metadata==7.0.1\n    # via\n    #   keyring\n    #   twine\niniconfig==2.0.0\n    # via pytest\njaraco-classes==3.3.0\n    # via keyring\njeepney==0.8.0\n    # via\n    #   keyring\n    #   secretstorage\njinja2==3.1.2\n    # via spacy\njoblib==1.3.2\n    # via scikit-learn\nkeyring==24.3.0\n    # via twine\nlangcodes==3.3.0\n    # via spacy\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==2.1.3\n    # via jinja2\nmccabe==0.7.0\n    # via flake8\nmdurl==0.1.2\n    # via markdown-it-py\nmore-itertools==10.2.0\n    # via jaraco-classes\nmurmurhash==1.0.10\n    # via\n    #   preshed\n    #   spacy\n    #   thinc\nmypy==1.8.0\nmypy-extensions==1.0.0\n    # via\n    #   black\n    #   mypy\nnh3==0.2.15\n    # via readme-renderer\nnumpy==1.26.3\n    # via\n    #   blis\n    #   pandas\n    #   scikit-learn\n    #   scipy\n    #   spacy\n    #   thinc\npackaging==23.2\n    # via\n    #   black\n    #   pytest\n    #   spacy\n    #   thinc\npandas==2.1.4\npathspec==0.12.1\n    # via black\npathy==0.10.3\n    # via spacy\npkginfo==1.9.6\n    # via twine\nplatformdirs==4.1.0\n    # via black\npluggy==1.3.0\n    # via pytest\npreshed==3.0.9\n    # via\n    #   spacy\n    #   thinc\npycodestyle==2.11.1\n    # via flake8\npycparser==2.21\n    # via cffi\npydantic==2.5.3\n    # via\n    #   confection\n    #   spacy\n    #   thinc\npydantic-core==2.14.6\n    # via pydantic\npyflakes==3.2.0\n    # via flake8\npygments==2.17.2\n    # via\n    #   readme-renderer\n    #   rich\npysbd==0.3.4\npytest==7.4.4\n    # via pytest-cov\npytest-cov==4.1.0\npython-dateutil==2.8.2\n    # via pandas\npytz==2023.3.post1\n    # via pandas\nreadme-renderer==42.0\n    # via twine\nrequests==2.31.0\n    # via\n    #   requests-toolbelt\n    #   spacy\n    #   twine\nrequests-toolbelt==1.0.0\n    # via twine\nrfc3986==2.0.0\n    # via twine\nrich==13.7.0\n    # via twine\nscikit-learn==1.3.2\nscipy==1.10.1\n    # via scikit-learn\nsecretstorage==3.3.3\n    # via keyring\nsetuptools==69.0.3\n    # via\n    #   spacy\n    #   spacy-lookups-data\n    #   thinc\nsix==1.16.0\n    # via python-dateutil\nsmart-open==6.4.0\n    # via\n    #   pathy\n    #   spacy\nspacy==3.6.1\nspacy-legacy==3.0.12\n    # via spacy\nspacy-loggers==1.0.5\n    # via spacy\nspacy-lookups-data==1.0.5\nsrsly==2.4.8\n    # via\n    #   confection\n    #   spacy\n    #   thinc\nthinc==8.1.12\n    # via spacy\nthreadpoolctl==3.2.0\n    # via scikit-learn\ntomli==2.0.1\n    # via\n    #   black\n    #   mypy\n    #   pytest\ntqdm==4.66.1\n    # via spacy\ntwine==4.0.2\ntyper==0.9.0\n    # via\n    #   pathy\n    #   spacy\ntypes-requests==2.31.0.20240106\ntypes-setuptools==69.0.0.20240106\ntypes-tabulate==0.9.0.20240106\ntyping-extensions==4.9.0\n    # via\n    #   black\n    #   mypy\n    #   pydantic\n    #   pydantic-core\n    #   typer\ntzdata==2023.4\n    # via pandas\nurllib3==2.1.0\n    # via\n    #   requests\n    #   twine\n    #   types-requests\nwasabi==1.1.2\n    # via\n    #   spacy\n    #   thinc\nzipp==3.17.0\n    # via importlib-metadata\n```\n\n----------------------------------------\n\nTITLE: Emitting Find Links in uv Pip Compile Output - TOML\nDESCRIPTION: Configures whether '--find-links' entries appear in the compile output by setting 'emit-find-links = true'. Useful when local or alternative download URLs should be preserved in requirements generated via 'uv pip compile'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_79\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nemit-find-links = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nemit-find-links = true\n\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Standalone Installer (PowerShell Script)\nDESCRIPTION: This snippet shows how to install uv on Windows using a PowerShell script. It uses 'irm' (Invoke-RestMethod) to fetch the installer from the official website, then executes it with 'iex'. Prerequisites include PowerShell with script execution permissions set to ByPass.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# On Windows.\\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Environments for uv (TOML)\nDESCRIPTION: This TOML snippet configures the [tool.uv] section in a pyproject.toml to use the required-environments setting. It ensures that any built distribution-only packages must provide a wheel compatible with Intel macOS. The required environment marker follows PEP 508 syntax, and uv will fail installation if a matching wheel is not available. This configuration requires a valid pyproject.toml file and uv installed; key parameters are environment markers describing platforms and architectures.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nrequired-environments = [\n    \"sys_platform == 'darwin' and platform_machine == 'x86_64'\"\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages with uv pip (JSON Format)\nDESCRIPTION: Lists all packages installed in the current Python environment using the `uv pip list` command with the `--format json` option. This outputs the package list in JSON format, suitable for scripting or programmatic use.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/inspection.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip list --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Package Installation Link Mode in TOML\nDESCRIPTION: Defines the method used to link packages from the global cache into the virtual environment's `site-packages` directory. Options include `clone` (Copy-on-Write, default on macOS), `hardlink` (default on Linux/Windows), `copy`, and `symlink`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_44\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nlink-mode = \"copy\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nlink-mode = \"copy\"\n```\n\n----------------------------------------\n\nTITLE: Including Inline Configuration File in Dockerfile for uv MRE\nDESCRIPTION: Demonstrates using Docker's `COPY` command with a heredoc (`<<EOF ... EOF`) to write a `pyproject.toml` file directly into the image filesystem during the build. This is useful for including necessary configuration files inline within the Dockerfile for simpler MREs. It then sets the working directory and runs `uv lock`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim\n\nCOPY <<EOF /mre/pyproject.toml\n[project]\nname = \"example\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = [\"pydantic\"]\nEOF\n\nWORKDIR /mre\nRUN uv lock\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for uv Inline Script Dependencies (PEP 723)\nDESCRIPTION: This `renovate.json5` configuration snippet instructs Renovate how to find dependencies declared using inline script metadata (PEP 723), often used with `uv` scripts. The `pep723.fileMatch` array explicitly lists the paths to Python files (e.g., `scripts/generate_docs.py`) that Renovate should scan for such dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/dependency-bots.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  $schema: \"https://docs.renovatebot.com/renovate-schema.json\",\n  pep723: {\n    fileMatch: [\n      \"scripts/generate_docs\\\\.py\",\n      \"scripts/run_server\\\\.py\",\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific Package Cache in uv\nDESCRIPTION: The `uv cache clean <package_name>` command removes cache entries specifically for the named package (e.g., `ruff`). This allows targeted cache invalidation for one or more packages without clearing the entire cache.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv cache clean ruff\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Cache Key for Specific Files in TOML\nDESCRIPTION: Sets `tool.uv.cache-keys` in `pyproject.toml` to invalidate the cache based on changes to `pyproject.toml` or `requirements.txt`. This is necessary if the project reads dependencies or other metadata directly from a `requirements.txt` file in addition to `pyproject.toml`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { file = \"requirements.txt\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Using Globs for uv Cache Key File Matching in TOML\nDESCRIPTION: Configures `tool.uv.cache-keys` in `pyproject.toml` using a glob pattern (`**/*.toml`) to invalidate the cache whenever any `.toml` file within the project directory or its subdirectories is modified. This allows tracking changes across multiple files but note that using globs can impact performance due to filesystem traversal.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\ncache-keys = [{ file = \"**/*.toml\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Index URLs for Package Resolution (uv, TOML)\nDESCRIPTION: Provides additional package index URLs (compliant with PEP 503 or local directory structure) to search for dependency resolution in addition to the primary index. Parameter is a list of string URLs; can be included under [tool.uv] or at the file root. Note: Deprecated in favor of the 'index' key. Earlier-listed URLs take priority during resolution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_36\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Dependency Metadata in pyproject.toml (uv)\nDESCRIPTION: This TOML snippet shows a complete 'pyproject.toml' example for a project using uv. It defines basic project metadata, specifies 'flash-attn' as a dependency fetched directly from a Git repository using 'tool.uv.sources', and provides static metadata for 'flash-attn' via 'tool.uv.dependency-metadata'. This allows uv to resolve 'flash-attn' and its dependencies ('torch', 'einops') without needing to build the package from source, which would otherwise require installing 'torch' first. The 'version' field is mandatory here because it's a direct URL dependency.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"flash-attn\"]\n\n[tool.uv.sources]\nflash-attn = { git = \"https://github.com/Dao-AILab/flash-attention\", tag = \"v2.6.3\" }\n\n[[tool.uv.dependency-metadata]]\nname = \"flash-attn\"\nversion = \"2.6.3\"\nrequires-dist = [\"torch\", \"einops\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Keyring Provider in TOML\nDESCRIPTION: Enables the use of the system's keyring for authenticating with package indexes. Setting it to `subprocess` instructs `uv` to use the `keyring` command-line tool for handling credentials. The default is `disabled`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_43\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nkeyring-provider = \"subprocess\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nkeyring-provider = \"subprocess\"\n```\n\n----------------------------------------\n\nTITLE: Configuring `extra-index-url` for uv pip in TOML\nDESCRIPTION: Specifies extra URLs of package indexes (PEP 503 compliant repositories or local directories) to use alongside the main `--index-url`. These additional indexes are prioritized over the main index, and earlier entries in the list have higher priority. The default is an empty list (`[]`), and the type is `list[str]`. Use `index-strategy` to control resolution behavior with multiple indexes.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_85\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Python preference in uv with TOML\nDESCRIPTION: Sets the 'python-preference' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This determines whether uv prioritizes system-installed Python or uv-managed Python installations. Possible values are 'only-managed', 'managed' (default), 'system', and 'only-system'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_62\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npython-preference = \"managed\"\n```\n\nLANGUAGE: toml\nCODE:\n```\npython-preference = \"managed\"\n```\n\n----------------------------------------\n\nTITLE: Configuring uv-lock Pre-commit Hook in YAML\nDESCRIPTION: This YAML configuration adds the `uv-lock` hook from the `astral-sh/uv-pre-commit` repository to a `.pre-commit-config.yaml` file. The hook ensures that the `uv.lock` file is automatically updated whenever changes are made to the project's dependencies, typically defined in `pyproject.toml`. It requires pre-commit to be installed and uses a specific revision (`rev`) of the `uv-pre-commit` repository.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/pre-commit.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - repo: https://github.com/astral-sh/uv-pre-commit\n    # uv version.\n    rev: 0.6.16\n    hooks:\n      - id: uv-lock\n```\n\n----------------------------------------\n\nTITLE: Clearing the Entire uv Cache\nDESCRIPTION: The `uv cache clean` command removes all entries from the uv cache directory. This is useful for completely resetting the cache state but should not be run while other uv commands are active.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuv cache clean\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Python Version Preference (Shell/Environment Variable)\nDESCRIPTION: Sets the `UV_PYTHON_PREFERENCE` environment variable to guide `uv` on whether to prefer system-installed Python interpreters or those managed/downloaded by `uv`. Added in uv v0.3.2.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nUV_PYTHON_PREFERENCE\n```\n\n----------------------------------------\n\nTITLE: Running Packaged Application - Shell/Console\nDESCRIPTION: This shell snippet demonstrates executing a packaged application by running its script entry point via `uv run`. It assumes that the packaged application and its entry point have been correctly initialized and installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cd example-pkg\n$ uv run example-pkg\nHello from example-pkg!\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-header` for uv pip in TOML\nDESCRIPTION: Sets the `no-header` option for the `uv pip compile` command. When set to `true`, the comment header typically included at the top of the generated output file is excluded. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_102\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-header = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-header = true\n```\n\n----------------------------------------\n\nTITLE: Specifying an Editable Local Python Package using file URI\nDESCRIPTION: Specifies the 'black' package as an editable installation using an absolute file URI (`file:///scripts/packages/black_editable`). This explicitly points to the package source directory on the local filesystem using the file scheme.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/bare-url.txt#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfile:///scripts/packages/black_editable\n```\n\n----------------------------------------\n\nTITLE: Defining Static Dependency Metadata in pyproject.toml (uv)\nDESCRIPTION: This TOML snippet demonstrates how to define static metadata for a specific dependency ('chumpy') within the 'pyproject.toml' file using the 'tool.uv.dependency-metadata' table. Providing this metadata allows uv to resolve the package's dependencies without needing to build it from source, which is useful for packages without pre-built wheels or static metadata in the index, or those with complex build requirements. It specifies the package name, version, and its required distributions ('requires-dist').\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.dependency-metadata]]\nname = \"chumpy\"\nversion = \"0.70\"\nrequires-dist = [\"numpy>=1.8.1\", \"scipy>=0.13.0\", \"six>=1.11.0\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Using actions/setup-python with pyproject.toml (YAML)\nDESCRIPTION: Configures actions/setup-python to select the newest compatible Python version by referencing the project's pyproject.toml in python-version-file input. This disregards explicit pinning in favor of satisfying the requires-python constraint. Dependencies: setup-python action and a valid pyproject.toml file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example\\n\\njobs:\\n  uv-example:\\n    name: python\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv\\n        uses: astral-sh/setup-uv@v5\\n\\n      - name: \"Set up Python\"\\n        uses: actions/setup-python@v5\\n        with:\\n          python-version-file: \"pyproject.toml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Automatic Python Downloads (Shell/Environment Variable)\nDESCRIPTION: Sets the `UV_PYTHON_DOWNLOADS` environment variable to control whether `uv` can automatically download missing Python versions when requested (e.g., via `uv venv --python`). Added in uv v0.3.2.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nUV_PYTHON_DOWNLOADS\n```\n\n----------------------------------------\n\nTITLE: Defining Rust Extension Module for Python via PyO3 - Rust\nDESCRIPTION: This Rust snippet provides a minimal implementation of a Python extension module using the PyO3 crate. The code defines a greeting function (`hello_from_bin`) and exposes it as a Python function in the `_core` module. It relies on PyO3 and requires Rust tooling and maturin as dependencies. The Rust library is to be built as a Python extension.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse pyo3::prelude::*;\n\n#[pyfunction]\nfn hello_from_bin() -> String {\n    \"Hello from example-ext!\".to_string()\n}\n\n#[pymodule]\nfn _core(m: &Bound<'_, PyModule>) -> PyResult<()> {\n    m.add_function(wrap_pyfunction!(hello_from_bin, m)?)?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins using importlib.metadata in Python\nDESCRIPTION: Shows Python code within a host application (`example`) demonstrating how to discover and load plugins registered via entry points. It uses `importlib.metadata.entry_points` to iterate through entry points belonging to the specified group (`example.plugins`) and load each one.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"example/__init__.py\"\nfrom importlib.metadata import entry_points\n\nfor plugin in entry_points(group='example.plugins'):\n    plugin.load()\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating uv pip compile Respecting Existing Pinned Versions\nDESCRIPTION: Shows that if an output file (`requirements.txt`) already exists with a pinned version (`ruff==0.3.0`), running `uv pip compile` with the same dependency (`ruff` from stdin) and the same output file will retain the existing pinned version without upgrading it. The output file content confirms `ruff==0.3.0` remains.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"ruff==0.3.0\" > requirements.txt\n$ echo \"ruff\" | uv pip compile - -o requirements.txt\n# This file was autogenerated by uv via the following command:\n#    uv pip compile - -o requirements.txt\nruff==0.3.0\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Tool Version using --from with uvx (Console)\nDESCRIPTION: This command shows an alternative way to specify an exact tool version using the `--from` option with a PEP 508 requirement string (`ruff==0.3.0`). The tool name (`ruff`) is specified separately, followed by its arguments (`check`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from 'ruff==0.3.0' ruff check\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Publish Index in pyproject.toml (TOML)\nDESCRIPTION: This TOML snippet shows how to configure a custom package index, named `testpypi` in this example, within the `pyproject.toml` file using the `[[tool.uv.index]]` table array. It defines the standard index URL (`url`), the specific URL for publishing (`publish-url`), and marks it as `explicit = true`. This configuration allows targeting this index during publishing using `uv publish --index testpypi`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"testpypi\"\nurl = \"https://test.pypi.org/simple/\"\npublish-url = \"https://test.pypi.org/legacy/\"\nexplicit = true\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Specific Installed Tool (Console)\nDESCRIPTION: This command uses `uv tool upgrade` to upgrade a specific, previously installed tool (`ruff`) to the latest version allowed by its original installation constraints.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade ruff\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Tool with a Specific Python Version (Console)\nDESCRIPTION: This command uses the `--python` option with `uv tool upgrade` to ensure the specified Python interpreter version (`3.10`) is used when checking for and applying upgrades to the tool (`ruff`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade --python 3.10 ruff\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Metadata for uv Pip Resolver - TOML\nDESCRIPTION: Injects static metadata for dependencies, allowing the resolver to bypass remote index queries. The 'dependency-metadata' field expects a list of dicts with package metadata, conforming to core Python packaging standards, placed under the appropriate TOML section.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_77\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\ndependency-metadata = [\n    { name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \">=3.6\" },\n]\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\ndependency-metadata = [\n    { name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \">=3.6\" },\n]\n\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows (Console)\nDESCRIPTION: This command activates the Python virtual environment located at `.venv` on Windows systems using the standard Command Prompt or PowerShell. It modifies the environment for the current shell session to use the Python interpreter and installed packages within the `.venv` directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ .venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Combined Configuration for No Build Isolation and Metadata Provision (TOML)\nDESCRIPTION: Presents a comprehensive `pyproject.toml` example combining multiple `uv` configurations for `flash-attn`. It disables build isolation (`no-build-isolation-package`), separates build dependencies (`torch`, `setuptools`, `packaging`) into a `build` extra and the package itself into a `compile` extra, and provides upfront metadata (`tool.uv.dependency-metadata`) to avoid building during resolution. This setup facilitates a cleaner two-step `uv sync` installation process.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = []\n\n[project.optional-dependencies]\nbuild = [\"torch\", \"setuptools\", \"packaging\"]\ncompile = [\"flash-attn\"]\n\n[tool.uv]\nno-build-isolation-package = [\"flash-attn\"]\n\n[[tool.uv.dependency-metadata]]\nname = \"flash-attn\"\nversion = \"2.6.3\"\nrequires-dist = [\"torch\", \"einops\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring `index-url` for uv pip in TOML\nDESCRIPTION: Sets the primary Python package index URL. Accepts PEP 503 compliant repositories or local directories. This index has lower priority than those specified via `extra-index-url`. The default value is `\"https://pypi.org/simple\"`, and the type is `str`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_91\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nindex-url = \"https://test.pypi.org/simple\"\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nindex-url = \"https://test.pypi.org/simple\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring No Build Isolation for Resolution-Phase Dependencies in pyproject.toml (TOML)\nDESCRIPTION: Shows a `pyproject.toml` configuration where `flash-attn` is marked for no build isolation using `tool.uv.no-build-isolation-package`. This is necessary for packages like `flash-attn` that require their build dependencies (e.g., `torch`) to be present not just for installation, but even for the dependency *resolution* phase performed by commands like `uv lock` or `uv sync`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = [\"flash-attn\"]\n\n[tool.uv]\nno-build-isolation-package = [\"flash-attn\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Only Installed Python Versions with uv - Console\nDESCRIPTION: This command filters the list to show only Python interpreters currently installed on the machine, excluding those available for download. The '--only-installed' flag prevents uv from displaying versions not already present. This helps users audit what interpreters are present locally.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list --only-installed\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for FastAPI App - Console\nDESCRIPTION: Shows the docker build command to create an image called 'fastapi-app' based on the provided Dockerfile. This initializes the build process, packaging the app and all its dependencies into a containerized environment suitable for deployment or further testing. Requires Docker to be installed and the terminal to be in the project's root directory containing the Dockerfile.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t fastapi-app .\n```\n\n----------------------------------------\n\nTITLE: Opting in to UV_SYSTEM_PYTHON for a Single Step (YAML)\nDESCRIPTION: Scopes the system Python install behaviour to a single workflow step by setting the environment variable locally, so only the specified uv pip installation will target the system environment. Good for fine-grained control.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\\n  - name: Install requirements\\n    run: uv pip install -r requirements.txt\\n    env:\\n      UV_SYSTEM_PYTHON: 1\n```\n\n----------------------------------------\n\nTITLE: Cache Invalidation by Lockfile in setup-uv (YAML)\nDESCRIPTION: Configures the uv cache to be invalidated (i.e., refreshed) whenever the project's lockfile (uv.lock) changes by specifying cache-dependency-glob input. Ensures fresh packages after dependency updates.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Define a cache dependency glob\\n  uses: astral-sh/setup-uv@v5\\n  with:\\n    enable-cache: true\\n    cache-dependency-glob: \"uv.lock\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Conditional Editable Local Python Package\nDESCRIPTION: Specifies the 'black' package as an editable installation from the relative path `./scripts/packages/black editable`. The installation is conditional, only occurring if the Python interpreter version is 3.9 or higher, as indicated by the environment marker `; python_version >= \\\"3.9\\\"`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/bare-url.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n./scripts/packages/black editable ; python_version >= \"3.9\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Base Image and Version in Dockerfile for uv\nDESCRIPTION: Demonstrates how to start a Dockerfile for a uv MRE by specifying a specific tagged base image from `ghcr.io/astral-sh/uv`. Pinning the version (e.g., `0.5.24-debian-slim`) is essential for reproducibility.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ghcr.io/astral-sh/uv:0.5.24-debian-slim\n```\n\n----------------------------------------\n\nTITLE: Running Installation Benchmarks with uv run\nDESCRIPTION: Executes the `uv run resolver` command to benchmark package installation performance with warm and cold caches against pip-sync, Poetry, and PDM. Requires a local `uv` build, production `uv`, and `hyperfine`. Uses the compiled `trio.txt` requirements file and outputs results in JSON format. This command should be run from the `scripts/benchmark` directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/BENCHMARKS.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv run resolver \\\n    --uv-project \\\n    --poetry \\\n    --pdm \\\n    --pip-sync \\\n    --benchmark install-warm --benchmark install-cold \\\n    --json \\\n    ../requirements/compiled/trio.txt\n```\n\n----------------------------------------\n\nTITLE: Overriding Project Dependency Versions in TOML\nDESCRIPTION: Example of using `override-dependencies` in `pyproject.toml` under `[tool.uv]` to force the installation of a specific package version (`werkzeug==2.3.0`). This overrides any version requested by other dependencies, potentially leading to an otherwise invalid resolution state. It does not trigger installation if the package isn't requested elsewhere.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\n# Always install Werkzeug 2.3.0, regardless of whether transitive dependencies request\n# a different version.\noverride-dependencies = [\"werkzeug==2.3.0\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring `output-file` for uv pip compile in TOML\nDESCRIPTION: Sets the `output-file` option for the `uv pip compile` command. This specifies the path (e.g., `requirements.txt`) where the generated requirements should be written. If the file exists, existing versions are preferred during resolution unless `--upgrade` is used. The default value is `None` (output to stdout).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_108\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\noutput-file = \"requirements.txt\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\noutput-file = \"requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable Local Python Package with Comment\nDESCRIPTION: Specifies the 'black' package as an editable installation from the relative path `./scripts/packages/black editable`. The text following the '#' symbol is a comment and is typically ignored by Python package installers.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/bare-url.txt#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n./scripts/packages/black editable # comment\n```\n\n----------------------------------------\n\nTITLE: Configuring `only-binary` for uv pip in TOML\nDESCRIPTION: Sets the `only-binary` option for `uv pip` commands. This restricts installations to pre-built wheels only, preventing the building of source distributions for the specified packages. Use `:all:` to apply to all packages, and `:none:` to clear the list. The default is an empty list (`[]`), meaning source distributions can be built.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_107\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nonly-binary = [\"ruff\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nonly-binary = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Renovate Lock File Maintenance for uv.lock\nDESCRIPTION: This `renovate.json5` configuration snippet enables the `lockFileMaintenance` feature in Renovate. When set to `true`, Renovate will periodically create pull requests to refresh the `uv.lock` file, ensuring transitive dependencies are kept up-to-date, even without direct dependency changes in `pyproject.toml`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/dependency-bots.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  $schema: \"https://docs.renovatebot.com/renovate-schema.json\",\n  lockFileMaintenance: {\n    enabled: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Cache Directory in Self-hosted Runner Job (YAML)\nDESCRIPTION: Defines a job-specific, relative cache directory for uv in the workspace using the UV_CACHE_DIR environment variable. Suitable for non-ephemeral, self-hosted runners to avoid unbounded cache growth. May require post-job cleanup for optimal resource use.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninstall_job:\\n  env:\\n    # Configure a relative location for the uv cache\\n    UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv\n```\n\n----------------------------------------\n\nTITLE: Displaying the uv Tool Installation Directory (console)\nDESCRIPTION: The `uv tool dir` command prints the path to the directory where `uv` installs persistent tool environments. This location defaults to `~/.local/share/uv/tools` but is configurable via the `UV_TOOL_DIR` environment variable.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool dir\n```\n\n----------------------------------------\n\nTITLE: Configuring pip-Specific Index URL in pyproject.toml using TOML\nDESCRIPTION: Configures the Python package index URL specifically for the `uv pip` command namespace within a `pyproject.toml` file. Settings defined under the `[tool.uv.pip]` table, like `index-url`, only apply to `uv pip` subcommands (e.g., `uv pip install`) and override any globally defined index URLs for those specific commands. This separation allows maintaining pip-specific configurations without affecting other `uv` operations like `uv sync` or `uv lock`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/files.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nindex-url = \"https://test.pypi.org/simple\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring pip-compile for Alternative Files in YAML\nDESCRIPTION: This YAML configuration demonstrates how to use the `pip-compile` hook from `astral-sh/uv-pre-commit` to compile alternative requirement files. The `args` parameter is modified to specify `requirements-dev.in` as input and `requirements-dev.txt` as output. The `files` parameter uses a regex to ensure the hook only runs when `requirements-dev.in` or `requirements-dev.txt` changes. Requires pre-commit and a specific revision (`rev`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/pre-commit.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - repo: https://github.com/astral-sh/uv-pre-commit\n    # uv version.\n    rev: 0.6.16\n    hooks:\n      # Compile requirements\n      - id: pip-compile\n        args: [requirements-dev.in, -o, requirements-dev.txt]\n        files: ^requirements-dev\\.(in|txt)$\n```\n\n----------------------------------------\n\nTITLE: Running a Tool with a Specific Python Version using uvx (Console)\nDESCRIPTION: This command uses the `--python` option with `uvx` to specify the Python interpreter version (`3.10`) to use when creating the temporary environment for running the tool (`ruff`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --python 3.10 ruff\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-build-isolation-package` for uv pip in TOML\nDESCRIPTION: Disables build isolation specifically for the listed packages when building them from source distributions. This assumes their PEP 518 build dependencies are already installed in the current environment. The default is an empty list (`[]`), and the type is `list[str]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_98\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nno-build-isolation-package = [\"package1\", \"package2\"]\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nno-build-isolation-package = [\"package1\", \"package2\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Constraining Resolution Environments in TOML using uv\nDESCRIPTION: Configures `uv` via `pyproject.toml` to limit dependency resolution to specific environments. The `tool.uv.environments` setting takes a list of PEP 508 environment markers (e.g., `sys_platform == 'darwin'`). This example restricts resolution to macOS and Linux.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\nenvironments = [\n    \"sys_platform == 'darwin'\",\n    \"sys_platform == 'linux'\",\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Installed Python Versions with uv - Console\nDESCRIPTION: These snippets demonstrate how to filter the list of Python interpreters by version (e.g., 3.13) or implementation (e.g., PyPy) using the 'uv python list' command with additional arguments. This allows users to quickly inspect only the matching interpreters. Useful for projects with specific interpreter or version constraints.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list 3.13\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list pypy\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-index` for uv pip in TOML\nDESCRIPTION: Sets the `no-index` option for `uv pip` commands. When `true`, all package registry indexes (like PyPI) are ignored. Dependency resolution relies solely on direct URL dependencies and those provided via `--find-links`. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_103\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-index = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-index = true\n```\n\n----------------------------------------\n\nTITLE: Requesting Specific Dependency Versions with uv run (Shell, console)\nDESCRIPTION: Demonstrates using the '--with' option in 'uv run' to specify particular versions of dependencies for a given invocation, overriding those specified by the project. The snippet requests two different versions of 'httpx' and verifies the installed version at runtime in a Python subprocess. Requires: uv, shell access, internet connectivity to fetch packages, and Python. Input: requested dependency version and Python code; Output: prints the installed dependency version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/run.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with httpx==0.26.0 python -c \"import httpx; print(httpx.__version__)\"\n```\n\nLANGUAGE: console\nCODE:\n```\n0.26.0\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with httpx==0.25.0 python -c \"import httpx; print(httpx.__version__)\"\n```\n\nLANGUAGE: console\nCODE:\n```\n0.25.0\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Windows Command Prompt Scripts with uv (Shell, console)\nDESCRIPTION: Shows how to run legacy Windows command ('.cmd') scripts using 'uv run', including with additional dependencies via '--with'. The snippet also notes that specifying the file extension is unnecessary, as 'uv' auto-resolves compatible extensions. Dependencies: uv must be installed, legacy script file available. Input: script name and arguments; Output: script output or version information.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/run.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with nuitka==2.6.7 -- nuitka.cmd --version\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with nuitka==2.6.7 -- nuitka --version\n```\n\n----------------------------------------\n\nTITLE: Generating Benchmark Graphs with cargo run\nDESCRIPTION: Uses `cargo run` with the `uv-dev` package to render graphical representations of the benchmark results stored in separate JSON files (`resolve-warm.json`, `resolve-cold.json`, `install-warm.json`, `install-cold.json`). Each command generates a graph for a specific benchmark scenario. Requires the Roboto font to be installed for proper label rendering.\nSOURCE: https://github.com/astral-sh/uv/blob/main/BENCHMARKS.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p uv-dev --all-features render-benchmarks resolve-warm.json --title \"Warm Resolution\"\ncargo run -p uv-dev --all-features render-benchmarks resolve-cold.json --title \"Cold Resolution\"\ncargo run -p uv-dev --all-features render-benchmarks install-warm.json --title \"Warm Installation\"\ncargo run -p uv-dev --all-features render-benchmarks install-cold.json --title \"Cold Installation\"\n```\n\n----------------------------------------\n\nTITLE: Finding a Python Executable Matching a Version Requirement with uv - Console\nDESCRIPTION: This snippet shows how to instruct uv to find the path to a Python interpreter that meets a specified version constraint (e.g., '>=3.11'). Quoting the argument allows use of version range specifiers. uv returns the path to the first matching interpreter, which can be useful in automated scripts or setting up virtual environments.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ uv python find '>=3.11'\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for a uv Workspace\nDESCRIPTION: This text diagram illustrates a common file and directory structure for a Python project managed as a `uv` workspace. It shows a root package (`albatross`) alongside member packages (`bird-feeder`, `seeds`) located in a `packages` subdirectory. Each package contains its own `pyproject.toml` and source code, while a single `uv.lock` file exists at the workspace root. Note that `seeds` might be excluded via configuration.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/workspaces.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n```text\nalbatross\n├── packages\n│   ├── bird-feeder\n│   │   ├── pyproject.toml\n│   │   └── src\n│   │       └── bird_feeder\n│   │           ├── __init__.py\n│   │           └── foo.py\n│   └── seeds\n│       ├── pyproject.toml\n│       └── src\n│           └── seeds\n│               ├── __init__.py\n│               └── bar.py\n├── pyproject.toml\n├── README.md\n├── uv.lock\n└── src\n    └── albatross\n        └── main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Pre-built Wheel Installation for Specific Packages in uv using TOML\nDESCRIPTION: Specifies a list of packages for which `uv` should not install pre-built wheels, forcing them to be built from source. This provides granular control over the `no-binary` behavior.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_47\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-binary-package = [\"ruff\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-binary-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring `find-links` for uv pip in TOML\nDESCRIPTION: Specifies locations (local directories or URLs with flat link lists) to search for candidate distributions (wheels or source distributions) in addition to registry indexes. Local paths must point to directories containing packages at the top level. URL pages must contain direct links to package files. The default value is an empty list (`[]`), and the type is `list[str]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_86\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Dependency Metadata in pyproject.toml (TOML)\nDESCRIPTION: Demonstrates using the `tool.uv.dependency-metadata` table in `pyproject.toml` to provide metadata (name, version, required distributions) for a package (`flash-attn`). This allows `uv` to resolve the project's dependencies without needing to build `flash-attn` first, which is useful when build isolation is disabled or the build process is complex. The metadata effectively pre-informs `uv` about the package's requirements.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[[tool.uv.dependency-metadata]]\nname = \"flash-attn\"\nversion = \"2.6.3\"\nrequires-dist = [\"torch\", \"einops\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring uv-export Pre-commit Hook in YAML\nDESCRIPTION: This YAML configuration adds the `uv-export` hook from the `astral-sh/uv-pre-commit` repository to a `.pre-commit-config.yaml` file. This hook automatically generates or updates a `requirements.txt` file based on the project's dependencies (likely from `pyproject.toml` or `uv.lock`). It requires pre-commit and uses a specific revision (`rev`) of the `uv-pre-commit` repository.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/pre-commit.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - repo: https://github.com/astral-sh/uv-pre-commit\n    # uv version.\n    rev: 0.6.16\n    hooks:\n      - id: uv-export\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Style in uv Pip Output - TOML\nDESCRIPTION: Configures the format of annotation comments in the generated output file by setting 'annotation-style' to either 'line' or 'split'. The field should be placed within the appropriate TOML table and expects a string value. This controls how source information about packages is rendered in the output.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_72\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nannotation-style = \"line\"\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nannotation-style = \"line\"\n\n```\n\n----------------------------------------\n\nTITLE: Opting in to UV_SYSTEM_PYTHON for Entire Workflow (YAML)\nDESCRIPTION: Sets the UV_SYSTEM_PYTHON environment variable globally to allow the uv pip interface to install packages directly into the system Python environment, skipping virtualenv creation. Should be used at the workflow top-level. Dependencies: uv pip interface in use.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\\n  UV_SYSTEM_PYTHON: 1\\n\\njobs: ...\n```\n\n----------------------------------------\n\nTITLE: Installing Python via uv python install Command (YAML)\nDESCRIPTION: Illustrates a workflow step that installs Python using the 'uv python install' command after installing the uv tool. Dependencies: uv must be installed earlier in the workflow. This respects Python version pinning set in the project and ensures the specified Python version is available for subsequent commands.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example\\n\\njobs:\\n  uv-example:\\n    name: python\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n      - uses: actions/checkout@v4\\n\\n      - name: Install uv\\n        uses: astral-sh/setup-uv@v5\\n\\n      - name: Set up Python\\n        run: uv python install\n```\n\n----------------------------------------\n\nTITLE: Publishing a Package with uv (Console)\nDESCRIPTION: This command shows the basic usage of `uv publish` in the console. It uploads the package distributions found (typically in the `dist/` directory) to a package index like PyPI. Authentication is required, usually provided via `--token` (or `UV_PUBLISH_TOKEN` environment variable) or username/password pairs (though PyPI now requires tokens). For custom indices, the `--index <name>` flag can be used.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv publish\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Cargo from Git - Rust Package Manager - console\nDESCRIPTION: Shows installation of 'uv' from git using Cargo, Rust's package manager. Input: git repo URL and package name. Output: builds and installs 'uv' binary. Prerequisites: Rust toolchain, git. Limitation: cannot use crates.io due to unpublished dependencies.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ cargo install --git https://github.com/astral-sh/uv uv\n```\n\n----------------------------------------\n\nTITLE: Installing uv via pipx - Python Package Manager - console\nDESCRIPTION: Installs 'uv' in an isolated environment using 'pipx', providing environment separation from other Python packages. Requires pipx. Key parameter: package name 'uv'. Output: standalone uv executable in user path. Limitation: pipx must be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ pipx install uv\n```\n\n----------------------------------------\n\nTITLE: Setting up Standalone Jupyter with uv (Windows)\nDESCRIPTION: Creates a new seeded virtual environment using `uv venv --seed`, installs `pydantic` and `jupyterlab` into it using `uv pip install`, and then starts Jupyter Lab directly from the virtual environment's `Scripts` directory using PowerShell. This setup is for using Jupyter with `uv` outside of a defined project structure on Windows.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nuv venv --seed\nuv pip install pydantic\nuv pip install jupyterlab\n.venv\\Scripts\\jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Enabling fish Shell Autocompletion for uvx - bash\nDESCRIPTION: Writes uvx completion for fish to the appropriate completions file so fish loads completions on startup. Input: none. Output: uvx completions immediately available in fish.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\necho 'uvx --generate-shell-completion fish | source' >> ~/.config/fish/completions/uvx.fish\n```\n\n----------------------------------------\n\nTITLE: Enabling Elvish Shell Autocompletion for uv - bash\nDESCRIPTION: Appends Elvish shell autocompletion logic for uv into Elvish rc file. Uses slurp for command substitution. Output: autocompletion code loaded on shell startup.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval (uv generate-shell-completion elvish | slurp)' >> ~/.elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Defining Required Environments for uv in TOML\nDESCRIPTION: This snippet configures the `required-environments` setting within the `[tool.uv]` section of a `pyproject.toml` file. It ensures that the package resolution process requires wheels compatible with specific macOS platforms (ARM and x86_64) for packages lacking source distributions. If compatible wheels aren't found for these environments, the resolution will fail.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\n# Require that the package is available for macOS ARM and x86 (Intel).\nrequired-environments = [\n    \"sys_platform == 'darwin' and platform_machine == 'arm64'\",\n    \"sys_platform == 'darwin' and platform_machine == 'x86_64'\",\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Custom uv Cache Path in astral-sh/setup-uv (YAML)\nDESCRIPTION: Illustrates how to specify a custom directory for the uv cache in the setup-uv action by setting the cache-local-path input. Useful for controlling disk usage location on the runner. Prerequisite: enable-cache must also be set.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Define a custom uv cache path\\n  uses: astral-sh/setup-uv@v5\\n  with:\\n    enable-cache: true\\n    cache-local-path: \"/path/to/cache\"\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Fork Strategy in TOML\nDESCRIPTION: Sets the strategy for selecting package versions across different Python versions and platforms. `fewest` minimizes the number of versions selected, potentially preferring older compatible ones. `requires-python` (default) optimizes for the latest version for each supported Python version.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_38\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nfork-strategy = \"fewest\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nfork-strategy = \"fewest\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool with a Specific Python Version (Console)\nDESCRIPTION: This command uses the `--python` option with `uv tool install` to specify the Python interpreter version (`3.10`) to associate with the persistent installation of the tool (`ruff`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install --python 3.10 ruff\n```\n\n----------------------------------------\n\nTITLE: Example pyproject.toml Configuration for FastAPI - TOML\nDESCRIPTION: Provides a sample pyproject.toml for a FastAPI project, specifying project metadata and required Python version and dependencies. This file is required by uv for managing dependencies and environments, and includes the project name, version, description, and that 'fastapi[standard]' must be installed. Required for successful uv operations and project reproducibility; dependencies are resolved based on this file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\\nname = \"uv-fastapi-example\"\\nversion = \"0.1.0\"\\ndescription = \"FastAPI project\"\\nreadme = \"README.md\"\\nrequires-python = \">=3.12\"\\ndependencies = [\\n    \"fastapi[standard]\",\\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting the PyTorch backend channel using 'torch-backend' in uv config - TOML\nDESCRIPTION: Determines the backend used for fetching PyTorch ecosystem packages by setting 'torch-backend' to e.g., 'auto', 'cpu', or specific CUDA versions. Placed under the respective section of each config file, this setting controls which index is used for torch packages based on the provided or detected value.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_121\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\ntorch-backend = \"auto\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\ntorch-backend = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Specifying and Including Requirements with requirements.txt Syntax - Text\nDESCRIPTION: This snippet defines required Python packages by listing them in requirements.txt file format. It includes another requirements specification file using '--requirement include-b.txt' and pins the version of numpy to 1.24.2. Input files like these are typically consumed by dependency management tools such as pip, which will resolve and install all listed packages; any external files referenced must exist relative to the file's location. Limitations include lack of support for conditional dependencies and the need to manage file references correctly.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/include-a.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--requirement include-b.txt\n\nnumpy==1.24.2\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Tool Version with Extras using --from with uvx (Console)\nDESCRIPTION: This command combines version specification (`==1.13.0`) and extras (`[faster-cache,reports]`) within the `--from` option when running a tool (`mypy`) with `uvx`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --from 'mypy[faster-cache,reports]==1.13.0' mypy --xml-report mypy_report\n```\n\n----------------------------------------\n\nTITLE: Configuring `group` for uv pip in TOML\nDESCRIPTION: Specifies dependency groups (e.g., 'dev', 'test') to include during operations like installation or compilation. This allows managing optional sets of dependencies defined in the project configuration. The default value is `None`, and the type is `list[str]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_89\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\ngroup = [\"dev\", \"docs\"]\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\ngroup = [\"dev\", \"docs\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Scoop - Windows Package Manager - console\nDESCRIPTION: Demonstrates Scoop installation of 'uv', a Windows user-level package manager. Input: bucket/package path. Output: uv installed in Scoop's controlled environment. Prerequisite: Scoop installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ scoop install main/uv\n```\n\n----------------------------------------\n\nTITLE: Benchmarking the uv Resolver via Predefined Workloads on Shell\nDESCRIPTION: Executes benchmarking tasks for the uv resolver by running a set of predefined workloads using the 'uv run resolver' command. Includes flag options for pip and poetry, as well as benchmarking mode. The sample shows running a cold resolve on the 'trio.in' Python requirements file. Requires scripts and requirements to be in the specified directories; can be adapted for other test scenarios.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuv run resolver \\\n    --uv-pip \\\n    --poetry \\\n    --benchmark \\\n    resolve-cold \\\n    ../scripts/requirements/trio.in\n```\n\n----------------------------------------\n\nTITLE: Viewing All Available Python Versions with uv - Console\nDESCRIPTION: This snippet presents the command for listing every possible Python version (including for other platforms and older patch versions) recognized by uv. The '--all-versions' option is used to display all versions, overriding the default filtering. It is useful for inspecting legacy versions that might not be shown by default.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list --all-versions\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Environments for Resolution in TOML\nDESCRIPTION: Example of using the `environments` key in `pyproject.toml` under `[tool.uv]` to restrict dependency resolution to specific environments (here, macOS identified by `sys_platform == 'darwin'`). This can improve performance during `uv lock` or universal `uv pip compile` by avoiding resolution for unsupported platforms.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\n# Resolve for macOS, but not for Linux or Windows.\nenvironments = [\"sys_platform == 'darwin'\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Python Interpreter via uv run (Shell)\nDESCRIPTION: Runs the Python interpreter associated with the current `uv` environment using `uv run python`. Fixes in v0.3.1 ensure the correct interpreter is invoked and respect `.python-version` files even outside projects.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nuv run python\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-build` for uv pip in TOML\nDESCRIPTION: Disables the building of source distributions entirely. When `true`, `uv` will not execute arbitrary Python code for building packages. It will rely on cached wheels of already-built distributions and fail if a build is required. This is an alias for `--only-binary :all:`. The default value is `false`, and the type is `bool`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_96\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nno-build = true\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nno-build = true\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Native TLS Certificate Store Usage in uv using TOML\nDESCRIPTION: Configures `uv` to use the operating system's native TLS certificate store instead of the default bundled `webpki-roots`. This is useful for environments requiring custom or corporate trust roots installed at the system level. Default is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_45\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nnative-tls = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nnative-tls = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Locking with uv run --locked (Console)\nDESCRIPTION: Runs a command using `uv run` while preventing `uv` from automatically updating the lockfile if it's deemed out-of-date. If the lockfile doesn't match the project metadata, `uv` will raise an error instead of locking.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --locked ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Index URL in uv.toml using TOML\nDESCRIPTION: Specifies a custom package index directly within a dedicated `uv.toml` file using the `[[index]]` array of tables. This format omits the `[tool.uv]` prefix required in `pyproject.toml`. The `url` specifies the index location, and `default = true` designates it as the primary index. `uv.toml` files can be used at the project, user (`~/.config/uv/uv.toml`), or system (`/etc/uv/uv.toml`) level and take precedence over `pyproject.toml` settings in the same directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/files.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[index]]\nurl = \"https://test.pypi.org/simple\"\ndefault = true\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform-Specific Dependencies with Overlapping Markers (Python)\nDESCRIPTION: This snippet illustrates how platform-specific requirements for a package (`flask`) using `sys_platform` markers can lead to multiple resolution forks. One fork handles macOS (`darwin`), another handles Windows (`win32`), and a third covers all other platforms where neither specific marker applies, ensuring appropriate versions are resolved for each distinct environment configuration.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/resolver-internals.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nflask > 1 ; sys_platform == 'darwin'\nflask > 2 ; sys_platform == 'win32'\nflask\n```\n\n----------------------------------------\n\nTITLE: Emitting Build Options in uv Pip Compile Output - TOML\nDESCRIPTION: Enables inclusion of '--no-binary' and '--only-binary' options in output files by setting 'emit-build-options = true' in the TOML configuration. Used to ensure the build requirements surface in generated requirements files for future use or audit.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_78\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nemit-build-options = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nemit-build-options = true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Cache Key for Directory Existence in TOML\nDESCRIPTION: Sets `tool.uv.cache-keys` in `pyproject.toml` to invalidate the cache based on changes to `pyproject.toml` or the creation/removal of a specific directory (`src`). This `dir` key only tracks the directory's existence itself, not changes to files *within* the directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { dir = \"src\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Pruning uv Cache for CI Environments\nDESCRIPTION: The `uv cache prune --ci` command optimizes the cache for continuous integration environments. It removes downloaded pre-built wheels and unzipped source distributions, which are often faster to re-download, but retains wheels built locally from source, as rebuilding can be time-consuming. Recommended for use at the end of CI jobs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/cache.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuv cache prune --ci\n```\n\n----------------------------------------\n\nTITLE: Defining Conflicting Python Version-Specific Dependencies\nDESCRIPTION: This example shows how package requirements can specify different version constraints for the same dependency (`numpy`) based on the environment marker `python_version`. This pattern necessitates a resolver capable of handling conditional dependencies, like `uv`'s forking mechanism, to avoid errors in environments satisfying either condition.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/resolver-internals.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnumpy>=2,<3 ; python_version >= \"3.11\"\nnumpy>=1.16,<2 ; python_version < \"3.11\"\n```\n\n----------------------------------------\n\nTITLE: Configuring no-sources in uv with TOML\nDESCRIPTION: Sets the 'no-sources' boolean flag for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. When true, uv ignores the `tool.uv.sources` table during dependency resolution, useful for locking against standard package metadata instead of local/Git sources. The default value is false.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_54\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-sources = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-sources = true\n```\n\n----------------------------------------\n\nTITLE: Allowing Insecure Hosts for uv in uv.toml\nDESCRIPTION: This snippet demonstrates configuring `uv` to allow insecure connections to specific hosts within a `uv.toml` file. The `allow-insecure-host` list directly specifies hostnames or host-port pairs (e.g., `localhost:8080`) for which SSL verification should be skipped. This setting should only be used in trusted network environments.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\n```toml\nallow-insecure-host = [\"localhost:8080\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Pinning for Dependencies (TOML)\nDESCRIPTION: Defines platform-conditional package sources for 'torch', listing different indexes and markers for Darwin and other systems. Demonstrates how [tool.uv.sources] can include a prioritized list with environment markers, and how to declare multiple [[tool.uv.index]] entries. Requires uv and that relevant indexes exist and are accessible.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\ndependencies = [\"torch\"]\n\n[tool.uv.sources]\ntorch = [\n  { index = \"pytorch-cu118\", marker = \"sys_platform == 'darwin'\"},\n  { index = \"pytorch-cu124\", marker = \"sys_platform != 'darwin'\"},\n]\n\n[[tool.uv.index]]\nname = \"pytorch-cu118\"\nurl = \"https://download.pytorch.org/whl/cu118\"\n\n[[tool.uv.index]]\nname = \"pytorch-cu124\"\nurl = \"https://download.pytorch.org/whl/cu124\"\n```\n\n----------------------------------------\n\nTITLE: Configuring reinstall behavior in uv with TOML\nDESCRIPTION: Sets the 'reinstall' boolean flag for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. When true, uv reinstalls all packages, ignoring their current installation status, and implies refreshing package metadata. The default value is false.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_63\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nreinstall = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nreinstall = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Distribution Builds for Specific Packages in uv using TOML\nDESCRIPTION: Specifies a list of packages for which `uv` should not build source distributions. If a pre-built wheel is not available for these packages, resolution or installation may fail.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_51\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-build-package = [\"ruff\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-build-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Source Distribution with uv_build in TOML\nDESCRIPTION: This snippet configures files to be excluded from the source distribution when using the `uv_build` backend via `pyproject.toml`. The `source-exclude` list under `[tool.uv.build-backend]` contains glob patterns. Here, all files ending with `.bin` are excluded from the sdist.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\nsource-exclude = [\"*.bin\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Including Files in Source Distribution with uv_build in TOML\nDESCRIPTION: This snippet demonstrates how to include additional files or directories in the source distribution using the `uv_build` backend, configured in `pyproject.toml`. The `source-include` list under `[tool.uv.build-backend]` specifies glob patterns. In this example, all files and directories within the `tests` directory are included in the sdist.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\nsource-include = [\"tests/**\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating uv Shell Completion Scripts (Shell)\nDESCRIPTION: Executes `uv generate-shell-completion` to produce shell completion scripts for the `uv` command-line tool, enhancing usability in terminals. Changes in v0.3.0 include hiding global options and showing the command in help.\nSOURCE: https://github.com/astral-sh/uv/blob/main/changelogs/0.3.x.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuv generate-shell-completion\n```\n\n----------------------------------------\n\nTITLE: Configuring `generate-hashes` for uv pip in TOML\nDESCRIPTION: Controls whether distribution hashes are included in the output file generated by `uv pip compile`. Setting this to `true` adds hash information for each package. The default value is `false`, and the type is `bool`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_88\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\ngenerate-hashes = true\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\ngenerate-hashes = true\n```\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Standalone Installer using curl - Shell Script - console\nDESCRIPTION: Demonstrates installing 'uv' on macOS/Linux by piping a remote shell script from the official site to the shell. Requires 'curl' and 'sh' on the system. Input: no parameters except default script URL. Output: Installs 'uv' to the user environment. Inspectability and specifying versions are possible. Limitation: trust in fetched script; users may want to inspect it before running.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Releasing uv with Automated Release Script and Changelog Editing on Shell\nDESCRIPTION: Runs the uv release script located in scripts/release.sh to automate changelog entry and version bumps prior to creating a pull request for a new release. After changelog editorialization and successful pull request merging, the release workflow can be triggered in GitHub Actions by providing the new version tag, ensuring release builds are published automatically. Only Astral org members should perform this; outputs are intended for binary package distribution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Managing Script Dependencies and Execution (uv CLI, Console)\nDESCRIPTION: This snippet demonstrates creating a Python script and managing its dependencies using uv. Users echo a script file, add requirements inline via uv, and then run it in an isolated environment. Prerequisites are uv, Python, and file system access. The expected output includes installation messages and HTTP response.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ echo 'import requests; print(requests.get(\"https://astral.sh\"))' > example.py\\n\\n$ uv add --script example.py requests\\nUpdated `example.py`\\n\\n$ uv run example.py\\nReading inline script metadata from: example.py\\nInstalled 5 packages in 12ms\\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Running Python CLI Tools with uvx - Console\nDESCRIPTION: This snippet illustrates running a Python CLI tool in a temporary environment using uvx, which aliases 'uv tool run'. It resolves and installs the tool, then executes it with arguments. Requires uv installed and internet access. Inputs are the command and tool arguments ('pycowsay', 'hello world!'); output is tool installation and sample rendering.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uvx pycowsay 'hello world!'\nResolved 1 package in 167ms\nInstalled 1 package in 9ms\n + pycowsay==0.0.0.2\n  \"\"\"\n\n  ------------\n< hello world! >\n  ------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n```\n\n----------------------------------------\n\nTITLE: Setting up Linux Environment for Cross-Compiling Windows Trampolines\nDESCRIPTION: Shell commands to install necessary dependencies (LLVM, Clang, LLD, cargo-xwin) and configure the Rust environment using rustup for cross-compiling the uv Windows trampolines from a Linux system. It installs a specific nightly toolchain, adds the rust-src component, and adds the required Windows target architectures (i686, x86_64, aarch64).\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install llvm clang lld\ncargo install cargo-xwin\nrustup toolchain install nightly-2025-02-16\nrustup component add rust-src --toolchain nightly-2025-02-16-x86_64-unknown-linux-gnu\nrustup target add --toolchain nightly-2025-02-16 i686-pc-windows-msvc\nrustup target add --toolchain nightly-2025-02-16 x86_64-pc-windows-msvc\nrustup target add --toolchain nightly-2025-02-16 aarch64-pc-windows-msvc\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-strip-markers` for uv pip in TOML\nDESCRIPTION: Sets the `no-strip-markers` option for `uv pip compile`. When `true`, environment markers (e.g., `python_version > '3.8'`) are included in the generated output file. By default (`false`), markers are stripped because the compiled resolution is only guaranteed for the target environment. The default value is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_106\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nno-strip-markers = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nno-strip-markers = true\n```\n\n----------------------------------------\n\nTITLE: Installing Package without Build Isolation using uv sync (Console)\nDESCRIPTION: Example command `uv sync --extra compile` installs the `cchardet` package (defined in the `compile` extra) which requires pre-installed build dependencies because build isolation is disabled for it. By default, this command uninstalls dependencies from other extras (like the `build` extra containing `cython` and `setuptools`) that are not specified in the current invocation.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/config.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ uv sync --extra compile\n + cchardet==2.1.7\n - cython==3.0.11\n - setuptools==73.0.1\n```\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent Downloads (uv, TOML)\nDESCRIPTION: Controls the number of concurrent package downloads allowed by uv, which can affect bandwidth and resource consumption. The parameter is an integer (default: 50). No external dependencies required. Settable in [tool.uv] or as a global key.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_31\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nconcurrent-downloads = 4\n```\n\nLANGUAGE: toml\nCODE:\n```\nconcurrent-downloads = 4\n```\n\n----------------------------------------\n\nTITLE: Enforcing required uv version with TOML\nDESCRIPTION: Sets the 'required-version' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This enforces a minimum or specific version of uv using a PEP 440 specifier (e.g., '>=0.5.0'). If the running uv version doesn't meet the requirement, it exits with an error. The default value is null.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_65\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nrequired-version = \">=0.5.0\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nrequired-version = \">=0.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Installer Scripts Before Execution - Shell Commands - console\nDESCRIPTION: Allows users to preview the shell or PowerShell installers by piping their content into pagers ('less' or 'more') before execution. Intended to improve user security by making scripts auditable before use. Inputs: script URL. Outputs: displays script in pager, no installation occurs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | less\n```\n\n----------------------------------------\n\nTITLE: Setting Custom uv Install Path on Windows using UV_INSTALL_DIR\nDESCRIPTION: Installs the 'uv' tool to a specified custom directory (`C:\\Custom\\Path`) on Windows using PowerShell. It sets the `UV_INSTALL_DIR` environment variable within the PowerShell command scope before downloading (`irm`) and executing (`iex`) the `install.ps1` script. The `-ExecutionPolicy ByPass` flag is used to allow the script execution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/installer.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c {$env:UV_INSTALL_DIR = \"C:\\Custom\\Path\";irm https://astral.sh/uv/install.ps1 | iex}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple pip-compile Hooks in YAML\nDESCRIPTION: This YAML configuration shows how to define multiple instances of the `pip-compile` hook within the same repository definition in `.pre-commit-config.yaml`. Each hook instance compiles a different set of requirements files (`requirements.in` to `requirements.txt` and `requirements-dev.in` to `requirements-dev.txt`). Unique `name` attributes distinguish the hooks in pre-commit output, and the second hook uses `files` to restrict when it runs. Requires pre-commit and a specific revision (`rev`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/pre-commit.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - repo: https://github.com/astral-sh/uv-pre-commit\n    # uv version.\n    rev: 0.6.16\n    hooks:\n      # Compile requirements\n      - id: pip-compile\n        name: pip-compile requirements.in\n        args: [requirements.in, -o, requirements.txt]\n      - id: pip-compile\n        name: pip-compile requirements-dev.in\n        args: [requirements-dev.in, -o, requirements-dev.txt]\n        files: ^requirements-dev\\.(in|txt)$\n```\n\n----------------------------------------\n\nTITLE: Initializing Extension Module Project Structure - Shell/Console\nDESCRIPTION: This shell and tree output combination demonstrates initializing a Python project with Rust extension modules using `uv init --build-backend maturin`. The resulting structure includes files for both Rust and Python integration. Prerequisites include Rust and maturin installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv init --build-backend maturin example-ext\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tree example-ext\nexample-ext\n├── .python-version\n├── Cargo.toml\n├── README.md\n├── pyproject.toml\n└── src\n    ├── lib.rs\n    └── example_ext\n        ├── __init__.py\n        └── _core.pyi\n```\n\n----------------------------------------\n\nTITLE: Specifying tomli-w Dependency Version (Requirements Format)\nDESCRIPTION: This line specifies version 1.0.0 of the `tomli-w` Python package as a required dependency. Consistent with the comment, this dependency is likely chosen for its small size and quick installation. `tomli-w` is a library for writing (serializing) data into the TOML file format.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/small.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntomli-w==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring specific package reinstall in uv with TOML\nDESCRIPTION: Sets the 'reinstall-package' list of strings for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This forces the reinstallation of specific packages listed, regardless of their current installation status, and implies refreshing their metadata. The default value is an empty list `[]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_64\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nreinstall-package = [\"ruff\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nreinstall-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation With MkDocs and uvx on Shell\nDESCRIPTION: Details how to preview local documentation changes using uvx to install Python requirements and start MkDocs documentation servers. Includes separate commands for standard contributors and Astral organization members with access to MkDocs Insiders. The commands specify requirements files and configuration files for serving docs. Prerequisites include the Rust toolchain, uvx, and Python dependencies as specified in the requirements files. Documentation becomes accessible locally on http://127.0.0.1:8000/uv/.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nuvx --with-requirements docs/requirements.txt -- mkdocs serve -f mkdocs.public.yml\n```\n\nLANGUAGE: shell\nCODE:\n```\nuvx --with-requirements docs/requirements-insiders.txt -- mkdocs serve -f mkdocs.insiders.yml\n```\n\n----------------------------------------\n\nTITLE: Reinstalling All Packages During Tool Upgrade (console)\nDESCRIPTION: Command to upgrade the `black` tool environment while reinstalling all its packages, using the `--reinstall` flag with `uv tool upgrade`. This can be useful to ensure a clean state.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade black --reinstall\n```\n\n----------------------------------------\n\nTITLE: Syncing Environment while Retaining Extraneous Packages with uv sync --inexact (Console)\nDESCRIPTION: Synchronizes the environment based on the `uv.lock` file but does not remove any existing packages in the environment that are not listed in the lockfile. Use this option to perform a non-destructive sync.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/sync.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync --inexact\n```\n\n----------------------------------------\n\nTITLE: Emitting Index Annotation Comments in uv Pip Output - TOML\nDESCRIPTION: Controls whether the output produced by 'uv pip compile' contains comment annotations with the resolved package index (such as '# from https://pypi.org/simple'), enabled through 'emit-index-annotation = true'. This helps document where each dependency was sourced from.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_80\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nemit-index-annotation = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nemit-index-annotation = true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring specific package upgrade in uv with TOML\nDESCRIPTION: Sets the 'upgrade-package' list of strings for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This allows specific packages (identified by name or name with version specifier) to be upgraded, ignoring pinned versions in existing lock files. The default value is an empty list `[]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_69\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nupgrade-package = [\"ruff\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nupgrade-package = [\"ruff\"]\n```\n\n----------------------------------------\n\nTITLE: Upgrading uv via pip - Python Package Manager - console\nDESCRIPTION: Upgrades uv in a pip-managed environment using pip's --upgrade flag. Input: package name. Output: upgrade to newest pip-available version. Used if not using standalone installer.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --upgrade uv\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent Builds (uv, TOML)\nDESCRIPTION: Specifies the maximum number of source distribution builds that can occur simultaneously during a uv operation. Default is equal to the number of CPU cores. The parameter is an integer, typically tuned based on hardware. Placement can be in the [tool.uv] section or as a top-level key.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_30\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nconcurrent-builds = 4\n```\n\nLANGUAGE: toml\nCODE:\n```\nconcurrent-builds = 4\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Isolation of Installed Tools (Python)\nDESCRIPTION: This command attempts to import the `ruff` module in Python. It is expected to fail, demonstrating that tools installed via `uv tool install` are isolated and their modules are not available in the current Python environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/tools.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ python -c \"import ruff\"\n```\n\n----------------------------------------\n\nTITLE: Manual uv Cache Management with actions/cache (YAML)\nDESCRIPTION: Demonstrates manual handling of the uv cache directory using actions/cache, which allows more granular cache control and restoration. Configures a UV_CACHE_DIR at /tmp/.uv-cache and creates cache keys based on the operating system and lockfile checksum. Dependencies: actions/cache@v4, UV set to a fixed cache location. Also includes post-test step for cache pruning.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\\n  install_job:\\n    env:\\n      # Configure a constant location for the uv cache\\n      UV_CACHE_DIR: /tmp/.uv-cache\\n\\n    steps:\\n      # ... setup up Python and uv ...\\n\\n      - name: Restore uv cache\\n        uses: actions/cache@v4\\n        with:\\n          path: /tmp/.uv-cache\\n          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}\\n          restore-keys: |\\n            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}\\n            uv-${{ runner.os }}\\n\\n      # ... install packages, run tests, etc ...\\n\\n      - name: Minimize uv cache\\n        run: uv cache prune --ci\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies from Standard Input using uv pip compile\nDESCRIPTION: Reads dependency specifications (like \"ruff\") from standard input and compiles them using `uv pip compile`. The `-` argument signifies reading from stdin. The locked dependencies are displayed on standard output by default.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"ruff\" | uv pip compile -\n```\n\n----------------------------------------\n\nTITLE: Compiling Documentation Requirements Using uv pip compile on Shell\nDESCRIPTION: Utilizes uv's pip frontend to pin and produce concrete requirements files for documentation builds. Both the standard and insiders requirements are processed for Python 3.12 and output with universal constraints. This ensures consistent dependency resolution across environments. The output files are later used for reproducible doc builds and documentation hosting.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nuv pip compile docs/requirements.in -o docs/requirements.txt --universal -p 3.12\nuv pip compile docs/requirements-insiders.in -o docs/requirements-insiders.txt --universal -p 3.12\n```\n\n----------------------------------------\n\nTITLE: Configuring pip-compile Pre-commit Hook for requirements.in in YAML\nDESCRIPTION: This YAML snippet configures the `pip-compile` hook from `astral-sh/uv-pre-commit` within `.pre-commit-config.yaml`. It automatically compiles a `requirements.in` file into a `requirements.txt` file using `uv`. The `args` parameter specifies the input (`requirements.in`) and output (`-o requirements.txt`) files. Requires pre-commit and a specific revision (`rev`) of the `uv-pre-commit` repo.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/pre-commit.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - repo: https://github.com/astral-sh/uv-pre-commit\n    # uv version.\n    rev: 0.6.16\n    hooks:\n      # Compile requirements\n      - id: pip-compile\n        args: [requirements.in, -o, requirements.txt]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Installed Tool with uvx --isolated (console)\nDESCRIPTION: Illustrates using the `--isolated` flag with `uvx` to run `ruff`. This ignores any installed version and uses the latest version available in the cache (or installs the latest if not cached), without forcing a cache refresh like `@latest`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uvx --isolated ruff --version\n0.6.2\n```\n\n----------------------------------------\n\nTITLE: Including Workspace Members for uv in TOML\nDESCRIPTION: This snippet configures packages to be included as members of the uv workspace within `pyproject.toml`. The `members` list under `[tool.uv.workspace]` accepts explicit paths or glob patterns. The example demonstrates including specific members (`member1`, `path/to/member2`) and using a glob pattern (`libs/*`) to include multiple packages.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.workspace]\nmembers = [\"member1\", \"path/to/member2\", \"libs/*\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Pandas Dependency with Extras and Git Source (requirements)\nDESCRIPTION: Declares 'pandas' as a project dependency, including the optional 'tabulate' extra feature. It further specifies that the package should be installed directly from the given Git repository URL, rather than from a standard package index like PyPI. The '@' symbol separates the package specification from the version control system URL.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/whitespace.txt#_snippet_1\n\nLANGUAGE: requirements\nCODE:\n```\npandas  [tabulate]  @  git+https://github.com/pandas-dev/pandas.git\n```\n\n----------------------------------------\n\nTITLE: Seeding venv and Running Jupyter Lab (Console)\nDESCRIPTION: Ensures `pip` is installed in the project's virtual environment using `uv venv --seed` before starting Jupyter Lab with `uv run`. This allows the use of `%pip install` magic commands within notebooks to install packages directly into the project's environment, although these changes won't update `pyproject.toml` or `uv.lock`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv --seed\n$ uv run --with jupyter jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Hosts in uv via TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the `uv` tool to allow insecure HTTPS connections (disabling certificate verification) for specific hosts using the `allow-insecure-host` option within the `[tool.uv]` section of a `pyproject.toml` file. This is useful for development environments or when dealing with self-signed certificates on trusted networks but should be used cautiously due to security implications. The value is a list of strings, each being a hostname (e.g., `localhost`) or hostname-port pair (e.g., `localhost:8080`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/authentication.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nallow-insecure-host = [\"example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-annotate` for uv pip in TOML\nDESCRIPTION: Prevents `uv pip compile` from adding comment annotations indicating the source of each package in the generated output file (e.g., requirements.txt). Set to `true` to exclude these annotations. The default value is `false`, and the type is `bool`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_94\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nno-annotate = true\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nno-annotate = true\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Python install mirror in uv with TOML\nDESCRIPTION: Sets the 'python-install-mirror' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This specifies a mirror URL for downloading managed Python installations, replacing the default source (python-build-standalone releases on GitHub). A `file://` URL can be used for local directories. The default value is null (None).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_61\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npython-install-mirror = \"https://github.com/astral-sh/python-build-standalone/releases/download\"\n```\n\nLANGUAGE: toml\nCODE:\n```\npython-install-mirror = \"https://github.com/astral-sh/python-build-standalone/releases/download\"\n```\n\n----------------------------------------\n\nTITLE: Performing an Unmanaged uv Installation using UV_UNMANAGED_INSTALL\nDESCRIPTION: Installs 'uv' to a specified path (`/custom/path`) without modifying shell profiles or environment variables, which is suitable for ephemeral environments like CI. This mode is activated by setting the `UV_UNMANAGED_INSTALL` environment variable with the target path before executing the installation script. This also disables the `uv self update` command.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/installer.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | env UV_UNMANAGED_INSTALL=\"/custom/path\" sh\n```\n\n----------------------------------------\n\nTITLE: Pinning a Package to a Specific Index in uv (TOML)\nDESCRIPTION: Illustrates how to pin the installation source for the 'torch' package to a specific index called 'pytorch' using the [tool.uv.sources] and [[tool.uv.index]] TOML configuration entries. This ensures the package will always be installed from the designated index. Requires uv and correct TOML structure.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Local Builds of uv with Cargo on Shell\nDESCRIPTION: Presents examples for invoking the development build of the uv binary via cargo, facilitating rapid testing of code changes during development. The commands execute uv subcommands for creating Python venvs and installing packages. Assumes developer is in the project root and Rust build artifacts are up to date.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- venv\ncargo run -- pip install requests\n```\n\n----------------------------------------\n\nTITLE: Running Jupyter Lab within a uv Project (Console)\nDESCRIPTION: Starts a Jupyter Lab server using `uv run`. This command executes `jupyter lab` in an isolated environment that includes Jupyter itself (specified by `--with jupyter`) and has access to the dependencies defined in the current `uv` project's virtual environment. The server typically starts at http://localhost:8888/lab.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --with jupyter jupyter lab\n```\n\n----------------------------------------\n\nTITLE: Specifying a custom install directory with 'target' in uv config - TOML\nDESCRIPTION: Installs packages into a user-defined directory by setting 'target' to a path string, instead of the default environments. This is configured via a string path under the relevant section in pyproject.toml or uv.toml, and determines where packages are installed at the top level.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_120\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\ntarget = \"./target\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\ntarget = \"./target\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Bytecode Compilation on Install (uv, TOML)\nDESCRIPTION: Configures uv to eagerly compile Python source files to bytecode upon installation, improving startup time for certain environments such as command-line tools or Docker images at the cost of increased install duration. Requires uv with Python environment, no special dependencies. The parameter is a boolean; 'true' enables bytecode compilation, 'false' (default) defers compilation. To be specified in [tool.uv] section or as a top-level entry.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_29\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ncompile-bytecode = true\n```\n\nLANGUAGE: toml\nCODE:\n```\ncompile-bytecode = true\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out Git Repository for MRE\nDESCRIPTION: Illustrates the initial shell commands for using a Git repository as an MRE. It involves cloning the repository (`git clone`), changing into the directory (`cd`), checking out the specific commit (`git checkout <commit>`) where the issue occurs, and then running the commands needed to reproduce the error.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/<user>/<project>.git\n$ cd <project>\n$ git checkout <commit>\n$ <commands to produce error>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Constraint Dependencies in TOML\nDESCRIPTION: Demonstrates how to use `build-constraint-dependencies` in `pyproject.toml` under the `[tool.uv]` section to constrain the version of build dependencies like `setuptools` to a specific version (`60.0.0`) during the build process. This doesn't install the package but restricts its version if it's already a build dependency.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\n# Ensure that the setuptools v60.0.0 is used whenever a package has a build dependency\n# on setuptools.\nbuild-constraint-dependencies = [\"setuptools==60.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Directory for uv in pyproject.toml\nDESCRIPTION: This snippet configures a custom cache directory for `uv` within a `pyproject.toml` file. By setting the `cache-dir` key under the `[tool.uv]` section, you override the default cache location (`$XDG_CACHE_HOME/uv`, `$HOME/.cache/uv`, or `%LOCALAPPDATA%\\uv\\cache`). In this example, the cache directory is set to `./.uv_cache` relative to the project.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_25\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv]\ncache-dir = \"./.uv_cache\"\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying uv Installation Script Help Options\nDESCRIPTION: Demonstrates how to pass command-line arguments directly to the downloaded 'uv' installation script (`install.sh`) instead of relying solely on environment variables. This specific example uses `sh -s -- --help` to pass the `--help` flag to the script, causing it to display its available options and usage instructions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/installer.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ curl -LsSf https://astral.sh/uv/install.sh | sh -s -- --help\n```\n\n----------------------------------------\n\nTITLE: Reproducing uv Issue with Bash Script\nDESCRIPTION: Provides a sample bash script illustrating a sequence of `uv` commands (`init`, `add`, `sync`, `run`) to reproduce a bug. This method is suitable for platform-specific issues not reproducible in Docker. Including verbose output from `uv run -v` is recommended.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv init\nuv add pydantic\nuv sync\nuv run -v python -c \"import pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment using fish Shell (Console)\nDESCRIPTION: This command activates the Python virtual environment located at `.venv` specifically for the `fish` shell. It sources the `activate.fish` script to correctly modify the `fish` shell's environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate.fish\n```\n\n----------------------------------------\n\nTITLE: Installing uv via pip (Bash)\nDESCRIPTION: This snippet illustrates how to install uv from PyPI using pip. The user must have Python and pip installed beforehand. Running this command will download and install the uv package and its dependencies into the current Python environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# With pip.\\npip install uv\n```\n\n----------------------------------------\n\nTITLE: Running Extension Module Project - Shell/Console\nDESCRIPTION: This snippet shows using the shell to execute a Python project with an extension module by running its entry point with `uv run`. Expects the extension to be built and installed with the required backend and Rust toolchain.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ cd example-ext\n$ uv run example-ext\nHello from example-ext!\n```\n\n----------------------------------------\n\nTITLE: Declaring Pinned Python Requirements - Plaintext\nDESCRIPTION: Lists project dependencies as locked package-version pairs, with comments specifying dependency relationships and sources. This snippet assumes usage with pip, pip-tools, or uv for reproducible installations. There are no parameters; each line specifies a package and its version, while comment lines explain indirect dependencies or the reason for inclusion. Input is read by package managers and produces an environment with consistent versions. This format is not suitable for execution and is only for dependency management.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/trio.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    uv pip compile scripts/requirements/trio.in\\nalabaster==0.7.15\\n    # via sphinx\\nattrs==23.2.0\\n    # via outcome\\nbabel==2.14.0\\n    # via sphinx\\ncertifi==2023.11.17\\n    # via requests\\ncffi==1.16.0\\n    # via cryptography\\ncharset-normalizer==3.3.2\\n    # via requests\\nclick==8.1.7\\n    # via towncrier\\ncryptography==41.0.7\\n    # via pyopenssl\\ndocutils==0.19\\n    # via\\n    #   sphinx\\n    #   sphinx-rtd-theme\\nexceptiongroup==1.2.0\\nidna==3.6\\n    # via requests\\nimagesize==1.4.1\\n    # via sphinx\\nimmutables==0.20\\nincremental==22.10.0\\n    # via towncrier\\njinja2==3.1.2\\n    # via\\n    #   sphinx\\n    #   towncrier\\nmarkupsafe==2.1.3\\n    # via jinja2\\noutcome==1.3.0.post0\\npackaging==23.2\\n    # via sphinx\\npycparser==2.21\\n    # via cffi\\npygments==2.17.2\\n    # via sphinx\\npyopenssl==23.3.0\\nrequests==2.31.0\\n    # via sphinx\\nsniffio==1.3.0\\nsnowballstemmer==2.2.0\\n    # via sphinx\\nsortedcontainers==2.4.0\\nsphinx==6.1.3\\n    # via\\n    #   sphinx-rtd-theme\\n    #   sphinxcontrib-applehelp\\n    #   sphinxcontrib-devhelp\\n    #   sphinxcontrib-htmlhelp\\n    #   sphinxcontrib-jquery\\n    #   sphinxcontrib-qthelp\\n    #   sphinxcontrib-serializinghtml\\n    #   sphinxcontrib-trio\\nsphinx-rtd-theme==2.0.0\\nsphinxcontrib-applehelp==1.0.7\\n    # via sphinx\\nsphinxcontrib-devhelp==1.0.5\\n    # via sphinx\\nsphinxcontrib-htmlhelp==2.0.4\\n    # via sphinx\\nsphinxcontrib-jquery==4.1\\n    # via sphinx-rtd-theme\\nsphinxcontrib-jsmath==1.0.1\\n    # via sphinx\\nsphinxcontrib-qthelp==1.0.6\\n    # via sphinx\\nsphinxcontrib-serializinghtml==1.1.9\\n    # via sphinx\\nsphinxcontrib-trio==1.1.2\\ntomli==2.0.1\\n    # via towncrier\\ntowncrier==23.11.0\\nurllib3==2.1.0\\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Disabling Project Environment Management with uv in pyproject.toml - TOML\nDESCRIPTION: This snippet shows how to set the 'managed' key to false under the [tool.uv] section in pyproject.toml, disabling uv's automatic management of the project environment. It prevents uv from automatically locking and syncing dependencies, allowing for manual environment control. This configuration is optional and intended for scenarios where the user wants to control dependency management explicitly.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/layout.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nmanaged = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Autocompletion for uvx - bash\nDESCRIPTION: Appends uvx autocompletion logic for Zsh into ~/.zshrc, allowing automatic completion after config reload. Requires uvx in path.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval \"$(uvx --generate-shell-completion zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Passing Config Settings to PEP 517 Backend with uv Pip - TOML\nDESCRIPTION: Demonstrates specifying build backend settings (as key-value pairs) to the PEP 517 backend through the 'config-settings' field. Values must be passed as a dictionary in the TOML file. Used for customized build workflows or compatibility modes during build operations.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_75\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nconfig-settings = { editable_mode = \"compat\" }\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nconfig-settings = { editable_mode = \"compat\" }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring `link-mode` for uv pip in TOML\nDESCRIPTION: Specifies the method used to place packages from the global cache into the virtual environment's `site-packages` directory during installation. Options include `\"clone\"` (Copy-on-Write, default on macOS), `\"hardlink\"` (default on Linux/Windows), `\"copy\"`, and `\"symlink\"`. The type is `str`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_93\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nlink-mode = \"copy\"\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nlink-mode = \"copy\"\n```\n```\n\n----------------------------------------\n\nTITLE: Building uv MRE with Commands in Dockerfile\nDESCRIPTION: Provides a complete Dockerfile example for creating an MRE using `uv` commands. It sets the platform, initializes a project (`uv init`), sets the workdir, adds a dependency (`uv add`), installs dependencies (`uv sync`), and runs a Python command (`uv run`) with verbose output (`-v`) to trigger or demonstrate the issue.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim\n\nRUN uv init /mre\nWORKDIR /mre\nRUN uv add pydantic\nRUN uv sync\nRUN uv run -v python -c \"import pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Dependency Requirements File - pip-compile - Plain Text\nDESCRIPTION: This snippet is an autogenerated requirements.txt file produced using the 'uv pip compile' command, which resolves and pins all necessary dependencies for a Python project. It includes explicit version numbers alongside comments mapping each dependency to its origin, facilitating reproducible builds. The file is intended for use with pip for consistent dependency installation; dependencies listed include boto3, botocore, and related libraries, all with fixed versions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/requirements/compiled/boto3.txt#_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    uv pip compile scripts/requirements/boto3.in\\nboto3==1.15.18\\nbotocore==1.18.18\\n    # via\\n    #   boto3\\n    #   s3transfer\\njmespath==0.10.0\\n    # via\\n    #   boto3\\n    #   botocore\\npython-dateutil==2.9.0.post0\\n    # via botocore\\ns3transfer==0.3.7\\n    # via boto3\\nsix==1.16.0\\n    # via python-dateutil\\nurllib3==1.25.3\\n    # via botocore\n```\n\n----------------------------------------\n\nTITLE: Listing System Python Versions with uv - Console\nDESCRIPTION: This snippet shows how to use the 'uv' command-line tool to list system Python versions while ignoring any Python interpreters managed by uv. By using the '--no-managed-python' flag, uv restricts its search to only system-managed installations. The output will include only system-installed Python interpreters; requires 'uv' to be installed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ uv python list --no-managed-python\n```\n\n----------------------------------------\n\nTITLE: Reinstalling a Specific Package During Tool Upgrade (console)\nDESCRIPTION: Command to upgrade the `black` tool environment while reinstalling only the specified package (`click`), using the `--reinstall-package` flag with `uv tool upgrade`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade black --reinstall-package click\n```\n\n----------------------------------------\n\nTITLE: Installing uv via Homebrew - Package Manager - console\nDESCRIPTION: Installs 'uv' using Homebrew, available for macOS and Linux. Requires installed and updated Homebrew. Input: formula name 'uv'. Output: uv binary in Homebrew's bin directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ brew install uv\n```\n\n----------------------------------------\n\nTITLE: Configuring dependency resolution strategy in uv via 'resolution' option - TOML\nDESCRIPTION: Specifies the algorithm for selecting dependency versions by setting 'resolution' in pyproject.toml or uv.toml. Accepts one of several string choices such as 'highest', 'lowest', or 'lowest-direct'. This directly influences which compatible versions are installed during the resolution process.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_117\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nresolution = \"lowest-direct\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nresolution = \"lowest-direct\"\n```\n\n----------------------------------------\n\nTITLE: Locking Dependencies from requirements.in using uv pip compile\nDESCRIPTION: Compiles dependencies declared in `requirements.in` and writes the locked versions to `requirements.txt` using `uv pip compile`. The `-o` flag is used to specify the output file path for the generated lock file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip compile requirements.in -o requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cache Cleanup Script for uv on Post-job Hook (Shell)\nDESCRIPTION: Shows a shell script named clean-uv-cache.sh that invokes 'uv cache clean' for cleaning up the uv cache directory post-job. This script is intended for use with GitHub Actions post-job hooks on self-hosted runners. Dependency: uv CLI available in PATH. Ensures old cache data is removed after job execution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/github.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\\nuv cache clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Python downloads behavior in uv with TOML\nDESCRIPTION: Sets the 'python-downloads' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This controls whether uv can download managed Python installations. Possible values are 'automatic' (default), 'manual' (require explicit install), and 'never'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_60\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npython-downloads = \"manual\"\n```\n\nLANGUAGE: toml\nCODE:\n```\npython-downloads = \"manual\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Version Override in an overrides.txt File\nDESCRIPTION: Example content for an `overrides.txt` file, specifying that the package `c`, regardless of other requirements, must be installed with a version greater than or equal to 2.0. Overrides force specific versions or ranges, potentially ignoring compatibility checks and resolving conflicts.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/compile.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nc>=2.0\n```\n\n----------------------------------------\n\nTITLE: Displaying uv Subcommand Help Menu (Long)\nDESCRIPTION: Executes `uv help` followed by a subcommand (`init` in this example) to display the detailed, long-form help menu specifically for that subcommand. This output may be paged using tools like `less` or `more`, which can be exited by pressing 'q'.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/help.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv help init\n```\n\n----------------------------------------\n\nTITLE: Adding uv as a Development Dependency (Console)\nDESCRIPTION: Adds the `uv` tool itself as a development dependency to the current project. This step might be necessary in environments like VS Code notebooks to ensure that `!uv add` or `!uv pip install` commands executed within notebook cells can find and use the `uv` executable associated with the project's environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/jupyter.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ uv add --dev uv\n```\n\n----------------------------------------\n\nTITLE: Simulating uv tool run using uv run (console)\nDESCRIPTION: This command approximates the behavior of `uv tool run <name>` (or `uvx <name>`) using the more general `uv run` command. It runs `<name>` in an isolated environment (`--no-project`) after ensuring `<name>` is available (`--with <name>`). Key differences exist, such as cache location and handling of pre-installed tools, making `uv tool run` preferred for tool execution.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ uv run --no-project --with <name> -- <name>\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Requirements in uv Pip Sync - TOML\nDESCRIPTION: Shows how to allow 'uv pip sync' to operate when the requirements are empty by setting 'allow-empty-requirements = true' in the respective TOML file. This option is used to clear all packages from the environment if no requirements are specified. The option expects a boolean value.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_71\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nallow-empty-requirements = true\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nallow-empty-requirements = true\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning up uv Data Cache and Tool Directories - console\nDESCRIPTION: Runs cache cleaning and removal of state directories for uv as part of uninstallation. Inputs: none. Outputs: removes cache, python, and tool state directories. Should be used before uninstalling binaries for full cleanup.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ uv cache clean\n$ rm -r \"$(uv python dir)\"\n$ rm -r \"$(uv tool dir)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPy install mirror in uv with TOML\nDESCRIPTION: Sets the 'pypy-install-mirror' string value for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. This specifies a mirror URL for downloading managed PyPy installations, replacing the default source (downloads.python.org). A `file://` URL can be used for local directories. The default value is null (None).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_59\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npypy-install-mirror = \"https://downloads.python.org/pypy\"\n```\n\nLANGUAGE: toml\nCODE:\n```\npypy-install-mirror = \"https://downloads.python.org/pypy\"\n```\n\n----------------------------------------\n\nTITLE: Running and Reviewing Snapshot Tests with Cargo and insta on Shell\nDESCRIPTION: Demonstrates how to execute and review specific snapshot tests for Rust projects using cargo's test interface and the insta review tool. The first command runs the targeted test using exact matching, while the second opens an interactive interface for reviewing failed or changed snapshots. The user should replace <package>, <test>, and <test_name> with actual values. Useful for ensuring visual and content changes do not cause unexpected results in test outputs.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --package <package> --test <test> -- <test_name> -- --exact\ncargo insta review\n```\n\n----------------------------------------\n\nTITLE: Using Path Dependencies as an Alternative to uv Workspaces in pyproject.toml\nDESCRIPTION: This `pyproject.toml` snippet demonstrates an alternative to `uv` workspaces for managing local inter-package dependencies, useful when members have conflicting requirements or need separate environments. Instead of defining a workspace, it uses a path dependency within the `[tool.uv.sources]` table (`bird-feeder = { path = \"...\" }`). This approach links the `albatross` project directly to the `bird-feeder` package located at the specified filesystem path, allowing for more fine-grained control over virtual environments but losing workspace-specific commands like `uv run --package`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/workspaces.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm>=4,<5\"]\n\n[tool.uv.sources]\nbird-feeder = { path = \"packages/bird-feeder\" }\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n```\n\n----------------------------------------\n\nTITLE: Excluding Newer Packages by Timestamp in uv Pip - TOML\nDESCRIPTION: Sets an upper limit on allowed package upload timestamps through the 'exclude-newer' string field (RFC 3339 format), restricting installations to packages available up to the given date-time. Used for deterministic/reproducible builds, expects precise timestamps.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_83\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv.pip]\nexclude-newer = \"2006-12-02T02:07:43Z\"\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[pip]\nexclude-newer = \"2006-12-02T02:07:43Z\"\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Specific Dependency in a Tool Environment (console)\nDESCRIPTION: Demonstrates upgrading only a specific dependency (`click`) within the environment of the installed tool `black`, using the `--upgrade-package` option with `uv tool upgrade`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/tools.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool upgrade black --upgrade-package click\n```\n\n----------------------------------------\n\nTITLE: Installing Alternative Python Implementation (PyPy) with uv\nDESCRIPTION: Illustrates installing an alternative Python implementation like PyPy. The command specifies the implementation name followed by '@' and the desired version (e.g., `pypy@3.10`).\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/install-python.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv python install pypy@3.10\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-binary` for uv pip in TOML\nDESCRIPTION: Specifies packages that should not be installed from pre-built wheels, forcing them to be built from source instead. The resolver may still use wheels for metadata extraction. Use `:all:` to disable binaries for all packages, and `:none:` to clear the list. The default is an empty list (`[]`), and the type is `list[str]`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_95\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nno-binary = [\"ruff\"]\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nno-binary = [\"ruff\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring `no-build-isolation` for uv pip in TOML\nDESCRIPTION: Disables the use of isolated environments when building source distributions. If set to `true`, `uv` assumes that the necessary build dependencies (specified via PEP 518) are already present in the environment where `uv` is running. The default value is `false`, and the type is `bool`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_97\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[tool.uv.pip]\nno-build-isolation = true\n```\n```\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[pip]\nno-build-isolation = true\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Isolation Globally in uv using TOML\nDESCRIPTION: Disables the isolated environment typically used for building source distributions (as per PEP 518). This assumes that all necessary build dependencies are already present in the environment where `uv` is run. Default is `false`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_49\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-build-isolation = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-build-isolation = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Isolation for Specific Packages in uv using TOML\nDESCRIPTION: Specifies a list of packages for which build isolation (PEP 518) should be disabled. This assumes the build dependencies for these specific packages are already installed in the main environment.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_50\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nno-build-isolation-package = [\"package1\", \"package2\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nno-build-isolation-package = [\"package1\", \"package2\"]\n```\n\n----------------------------------------\n\nTITLE: Building and Running uv Inside Docker for Secure Dependency Resolution on Shell\nDESCRIPTION: Illustrates the process of building a Docker image for uv, compiling the project for the musl target to avoid glibc compatibility issues, and executing the uv binary inside a container for isolated and secure dependency resolution. The process mounts the current host directory into the container for shared file access and sets up caching with a specified directory. Useful for avoiding unintended modifications on the host during source builds or dependency resolution. The <pre>console<pre> shell prompts should be removed or replaced if running directly; adjust target paths and arguments as needed for real usage.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker buildx build -t uv-builder -f builder.dockerfile --load .\ncargo build --target x86_64-unknown-linux-musl --profile profiling\ndocker run --rm -it -v $(pwd):/app uv-builder /app/target/x86_64-unknown-linux-musl/profiling/uv-dev resolve-many --cache-dir /app/cache-docker /app/scripts/popular_packages/pypi_10k_most_dependents.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling preview features in uv with TOML\nDESCRIPTION: Sets the 'preview' boolean flag for the uv tool configuration in either pyproject.toml (under [tool.uv]) or uv.toml. When true, experimental preview features in uv are enabled. The default value is false.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_57\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\npreview = true\n```\n\nLANGUAGE: toml\nCODE:\n```\npreview = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace-Level Logging for uv Binary with Environment Variables on Shell\nDESCRIPTION: Runs the uv binary with the RUST_LOG environment variable set to 'trace', enabling fine-grained logging output for debugging and analysis. Useful for deep diagnostics in development or CI scenarios. Requires logging to be implemented via the Rust log facade and the uv binary to respect standard environment variable configuration.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=trace uv\n```\n\n----------------------------------------\n\nTITLE: Creating MRE Git Repository using GitHub CLI\nDESCRIPTION: Shows how to quickly create a new GitHub repository (e.g., `uv-mre-1234`) and clone it locally using the GitHub CLI (`gh`) command `gh repo create` with the `--clone` flag. This is useful for setting up a dedicated repository to share an MRE.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ gh repo create uv-mre-1234 --clone\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Verbose Logs for MRE\nDESCRIPTION: Shows the command to build a Docker image while disabling the build cache (`--no-cache`) and using plain progress output (`--progress plain`). This generates more detailed logs, which are helpful to include when sharing a Docker-based MRE.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/troubleshooting/reproducible-examples.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker build . --progress plain --no-cache\n```\n\n----------------------------------------\n\nTITLE: Disabling UV Project Management in TOML\nDESCRIPTION: Demonstrates setting the `managed` key to `false` in `pyproject.toml` under `[tool.uv]`. This instructs `uv` to ignore the project during commands like `uv run`, treating it as unmanaged by `uv`. The default value is `true`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nmanaged = false\n```\n\n----------------------------------------\n\nTITLE: Locked Lowest Versions in requirements.txt with --resolution lowest (Python requirements file)\nDESCRIPTION: This snippet shows a requirements.txt file autogenerated by uv using the --resolution lowest flag, pinning all transitive and direct dependencies to their lowest compatible versions according to the requirement 'flask>=2.0.0'. The file includes meta-comments showing which package each dependency is required by. This output is useful for CI compatibility testing with minimum requirement bounds; prerequisites include a requirements.in and uv.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/resolution.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in --resolution lowest\nclick==7.1.2\n    # via flask\nflask==2.0.0\nitsdangerous==2.0.0\n    # via flask\njinja2==3.0.0\n    # via flask\nmarkupsafe==2.0.0\n    # via jinja2\nwerkzeug==2.0.0\n    # via flask\n```\n\n----------------------------------------\n\nTITLE: Embedding Credentials Directly in Index URL (TOML)\nDESCRIPTION: Shows the alternative of embedding username and password directly into the index URL within pyproject.toml for uv. Enables authenticated access but is insecure as credentials are stored in plaintext. Recommended only in trusted environments. No special parameters outside index name and credentialed URL.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/indexes.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.uv.index]]\nname = \"internal\"\nurl = \"https://public:koala@pypi-proxy.corp.dev/simple\"\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependency Requirements for Poetry Conversion - Requirements Format\nDESCRIPTION: These code lines specify direct dependencies for the Python project using pip requirements.txt syntax. Dependencies include version-constrained and unconstrained packages, with special extras (e.g., pandas[tabulate]). This is typically used as input for automation scripts or tools that convert requirements.txt files to Poetry's configuration format. No Python logic is present; only package names and optional version constraints are provided.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/for-poetry.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n# Used in requirements_txt_to_poetry\\ninflection==0.5.1\\nupsidedown==0.4\\nnumpy\\npandas[tabulate]>=1,<2\n```\n\n----------------------------------------\n\nTITLE: Configuring Check URL for Duplicate Upload Skipping (uv, TOML)\nDESCRIPTION: Defines a URL to check before uploading package files to avoid duplicate uploads, improving reliability for interrupted or parallel uploads. Requires uv and an accessible package index supporting SHA-256/SHA-384/SHA-512 hashes. The value is a string representing the index URL. Can be set under [tool.uv] or as a top-level key in uv.toml. Input is the URL as a string, output is the conditional skipping of uploads where appropriate.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_28\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\ncheck-url = \"https://test.pypi.org/simple\"\n```\n\nLANGUAGE: toml\nCODE:\n```\ncheck-url = \"https://test.pypi.org/simple\"\n```\n\n----------------------------------------\n\nTITLE: Installing packages in the system Python environment using 'system' in uv config - TOML\nDESCRIPTION: Directs uv to install packages into the system Python interpreter instead of a virtual environment by setting 'system' to true. This is applied by adding the respective line in either pyproject.toml or uv.toml, and is mainly recommended for CI/CD use given its potential side effects.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_119\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.uv.pip]\nsystem = true\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[pip]\nsystem = true\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Environment Variables - Markdown\nDESCRIPTION: Lists all the environment variables recognized by the uv CLI tool, providing descriptions, related CLI options, and usage cautions where relevant. No special dependencies are required, as this is Markdown-formatted documentation. Environment variables highlighted in backticks are not executable code but serve as configuration reference for scripting or process environments. The entries specify the expected variable names, valid values, and the impact on uv's execution. Inputs/outputs are not applicable. Structure is consistent for easy future updates.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/configuration/environment.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Environment variables\n\nuv defines and respects the following environment variables:\n\n### `UV_BREAK_SYSTEM_PACKAGES`\n\nEquivalent to the `--break-system-packages` command-line argument. If set to `true`,\nuv will allow the installation of packages that conflict with system-installed packages.\n\nWARNING: `UV_BREAK_SYSTEM_PACKAGES=true` is intended for use in continuous integration\n(CI) or containerized environments and should be used with caution, as modifying the system\nPython can lead to unexpected behavior.\n\n### `UV_BUILD_CONSTRAINT`\n\nEquivalent to the `--build-constraint` command-line argument. If set, uv will use this file\nas constraints for any source distribution builds. Uses space-separated list of files.\n\n### `UV_CACHE_DIR`\n\nEquivalent to the `--cache-dir` command-line argument. If set, uv will use this\ndirectory for caching instead of the default cache directory.\n\n### `UV_COMPILE_BYTECODE`\n\nEquivalent to the `--compile-bytecode` command-line argument. If set, uv\nwill compile Python source files to bytecode after installation.\n\n### `UV_CONCURRENT_BUILDS`\n\nSets the maximum number of source distributions that uv will build\nconcurrently at any given time.\n\n### `UV_CONCURRENT_DOWNLOADS`\n\nSets the maximum number of in-flight concurrent downloads that uv will\nperform at any given time.\n\n### `UV_CONCURRENT_INSTALLS`\n\nControls the number of threads used when installing and unzipping\npackages.\n\n### `UV_CONFIG_FILE`\n\nEquivalent to the `--config-file` command-line argument. Expects a path to a\nlocal `uv.toml` file to use as the configuration file.\n\n### `UV_CONSTRAINT`\n\nEquivalent to the `--constraint` command-line argument. If set, uv will use this\nfile as the constraints file. Uses space-separated list of files.\n\n### `UV_CUSTOM_COMPILE_COMMAND`\n\nEquivalent to the `--custom-compile-command` command-line argument.\n\nUsed to override uv in the output header of the `requirements.txt` files generated by\n`uv pip compile`. Intended for use-cases in which `uv pip compile` is called from within a wrapper\nscript, to include the name of the wrapper script in the output file.\n\n### `UV_DEFAULT_INDEX`\n\nEquivalent to the `--default-index` command-line argument. If set, uv will use\nthis URL as the default index when searching for packages.\n\n### `UV_ENV_FILE`\n\n`.env` files from which to load environment variables when executing `uv run` commands.\n\n### `UV_EXCLUDE_NEWER`\n\nEquivalent to the `--exclude-newer` command-line argument. If set, uv will\nexclude distributions published after the specified date.\n\n### `UV_EXTRA_INDEX_URL`\n\nEquivalent to the `--extra-index-url` command-line argument. If set, uv will\nuse this space-separated list of URLs as additional indexes when searching for packages.\n(Deprecated: use `UV_INDEX` instead.)\n\n### `UV_FIND_LINKS`\n\nEquivalent to the `--find-links` command-line argument. If set, uv will use this\ncomma-separated list of additional locations to search for packages.\n\n### `UV_FORK_STRATEGY`\n\nEquivalent to the `--fork-strategy` argument. Controls version selection during universal\nresolution.\n\n### `UV_FROZEN`\n\nEquivalent to the `--frozen` command-line argument. If set, uv will run without\nupdating the `uv.lock` file.\n\n### `UV_GITHUB_TOKEN`\n\nEquivalent to the `--token` argument for self update. A GitHub token for authentication.\n\n### `UV_GIT_LFS`\n\nEnables fetching files stored in Git LFS when installing a package from a Git repository.\n\n### `UV_HTTP_TIMEOUT`\n\nTimeout (in seconds) for HTTP requests. (default: 30 s)\n\n### `UV_INDEX`\n\nEquivalent to the `--index` command-line argument. If set, uv will use this\nspace-separated list of URLs as additional indexes when searching for packages.\n\n### `UV_INDEX_STRATEGY`\n\nEquivalent to the `--index-strategy` command-line argument.\n\nFor example, if set to `unsafe-best-match`, uv will consider versions of a given package\navailable across all index URLs, rather than limiting its search to the first index URL\nthat contains the package.\n\n### `UV_INDEX_URL`\n\nEquivalent to the `--index-url` command-line argument. If set, uv will use this\nURL as the default index when searching for packages.\n(Deprecated: use `UV_DEFAULT_INDEX` instead.)\n\n### `UV_INDEX_{name}_PASSWORD`\n\nProvides the HTTP Basic authentication password for a named index.\n\nThe `name` parameter is the name of the index. For example, given an index named `foo`,\nthe environment variable key would be `UV_INDEX_FOO_PASSWORD`.\n\n### `UV_INDEX_{name}_USERNAME`\n\nProvides the HTTP Basic authentication username for a named index.\n\nThe `name` parameter is the name of the index. For example, given an index named `foo`,\nthe environment variable key would be `UV_INDEX_FOO_USERNAME`.\n\n### `UV_INSECURE_HOST`\n\nEquivalent to the `--allow-insecure-host` argument.\n\n### `UV_INSTALLER_GHE_BASE_URL`\n\nThe URL from which to download uv using the standalone installer and `self update` feature,\nin lieu of the default GitHub Enterprise URL.\n\n### `UV_INSTALLER_GITHUB_BASE_URL`\n\nThe URL from which to download uv using the standalone installer and `self update` feature,\nin lieu of the default GitHub URL.\n\n### `UV_INSTALL_DIR`\n\nThe directory in which to install uv using the standalone installer and `self update` feature.\nDefaults to `~/.local/bin`.\n\n### `UV_KEYRING_PROVIDER`\n\nEquivalent to the `--keyring-provider` command-line argument. If set, uv\nwill use this value as the keyring provider.\n\n### `UV_LINK_MODE`\n\nEquivalent to the `--link-mode` command-line argument. If set, uv will use this as\na link mode.\n\n### `UV_LOCKED`\n\nEquivalent to the `--locked` command-line argument. If set, uv will assert that the\n`uv.lock` remains unchanged.\n\n### `UV_LOG_CONTEXT`\n\nAdd additional context and structure to log messages.\n\nIf logging is not enabled, e.g., with `RUST_LOG` or `-v`, this has no effect.\n\n### `UV_MANAGED_PYTHON`\n\nRequire use of uv-managed Python versions.\n\n### `UV_NATIVE_TLS`\n\nEquivalent to the `--native-tls` command-line argument. If set to `true`, uv will\nuse the system's trust store instead of the bundled `webpki-roots` crate.\n\n### `UV_NO_BINARY`\n\nEquivalent to the `--no-binary` command-line argument. If set, uv will install\nall packages from source. The resolver will still use pre-built wheels to\nextract package metadata, if available.\n\n### `UV_NO_BINARY_PACKAGE`\n\nEquivalent to the `--no-binary-package` command line argument. If set, uv will\nnot use pre-built wheels for the given space-delimited list of packages.\n\n### `UV_NO_BUILD`\n\nEquivalent to the `--no-build` command-line argument. If set, uv will not build\nsource distributions.\n\n### `UV_NO_BUILD_ISOLATION`\n\nEquivalent to the `--no-build-isolation` command-line argument. If set, uv will\nskip isolation when building source distributions.\n\n### `UV_NO_BUILD_PACKAGE`\n\nEquivalent to the `--no-build-package` command line argument. If set, uv will\nnot build source distributions for the given space-delimited list of packages.\n\n### `UV_NO_CACHE`\n\nEquivalent to the `--no-cache` command-line argument. If set, uv will not use the\ncache for any operations.\n\n### `UV_NO_CONFIG`\n\nEquivalent to the `--no-config` command-line argument. If set, uv will not read\nany configuration files from the current directory, parent directories, or user configuration\ndirectories.\n\n### `UV_NO_EDITABLE`\n\nEquivalent to the `--no-editable` command-line argument. If set, uv\ninstalls any editable dependencies, including the project and any workspace members, as\nnon-editable\n\n### `UV_NO_ENV_FILE`\n\nIgnore `.env` files when executing `uv run` commands.\n\n### `UV_NO_INSTALLER_METADATA`\n\nSkip writing `uv` installer metadata files (e.g., `INSTALLER`, `REQUESTED`, and `direct_url.json`) to site-packages `.dist-info` directories.\n\n### `UV_NO_MANAGED_PYTHON`\n\nDisable use of uv-managed Python versions.\n\n### `UV_NO_PROGRESS`\n\nEquivalent to the `--no-progress` command-line argument. Disables all progress output. For\nexample, spinners and progress bars.\n\n### `UV_NO_SYNC`\n\nEquivalent to the `--no-sync` command-line argument. If set, uv will skip updating\nthe environment.\n\n### `UV_NO_VERIFY_HASHES`\n\nEquivalent to the `--no-verify-hashes` argument. Disables hash verification for\n`requirements.txt` files.\n\n### `UV_NO_WRAP`\n\nUse to disable line wrapping for diagnostics.\n\n### `UV_OFFLINE`\n\nEquivalent to the `--offline` command-line argument. If set, uv will disable network access.\n\n### `UV_OVERRIDE`\n\nEquivalent to the `--override` command-line argument. If set, uv will use this file\nas the overrides file. Uses space-separated list of files.\n\n### `UV_PRERELEASE`\n\nEquivalent to the `--prerelease` command-line argument. For example, if set to\n`allow`, uv will allow pre-release versions for all dependencies.\n\n### `UV_PREVIEW`\n\nEquivalent to the `--preview` argument. Enables preview mode.\n\n### `UV_PROJECT`\n\nEquivalent to the `--project` command-line argument.\n\n### `UV_PROJECT_ENVIRONMENT`\n\nSpecifies the path to the directory to use for a project virtual environment.\n\nSee the [project documentation](../concepts/projects/config.md#project-environment-path)\nfor more details.\n\n### `UV_PUBLISH_CHECK_URL`\n\nDon't upload a file if it already exists on the index. The value is the URL of the index.\n\n### `UV_PUBLISH_INDEX`\n\nEquivalent to the `--index` command-line argument in `uv publish`. If\nset, uv the index with this name in the configuration for publishing.\n\n### `UV_PUBLISH_PASSWORD`\n\nEquivalent to the `--password` command-line argument in `uv publish`. If\nset, uv will use this password for publishing.\n\n### `UV_PUBLISH_TOKEN`\n\nEquivalent to the `--token` command-line argument in `uv publish`. If set, uv\nwill use this token (with the username `__token__`) for publishing.\n\n### `UV_PUBLISH_URL`\n\nEquivalent to the `--publish-url` command-line argument. The URL of the upload\nendpoint of the index to use with `uv publish`.\n\n### `UV_PUBLISH_USERNAME`\n\nEquivalent to the `--username` command-line argument in `uv publish`. If\nset, uv will use this username for publishing.\n\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name for uv_build Backend in TOML\nDESCRIPTION: This snippet shows how to explicitly set the module name used by the `uv_build` backend in `pyproject.toml`. The `module-name` option under `[tool.uv.build-backend]` overrides the default behavior (which derives the module name from the package name). This example sets the module name to `sklearn`.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"pyproject.toml\"\n[tool.uv.build-backend]\nmodule-name = \"sklearn\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Pinned Python Dependencies for Scenarios\nDESCRIPTION: This requirements file specifies the exact versions of Python packages required for the 'scripts/scenarios' environment. Generated by 'uv pip compile', it includes packages like 'packse', 'hatchling', 'msgspec', and their dependencies, with comments indicating how each dependency was included (either directly from 'requirements.in' or transitively via another package).\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/scenarios/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile scripts/scenarios/requirements.in -o scripts/scenarios/requirements.txt --refresh-package packse -n\nchevron-blue==0.2.1\n    # via\n    #   -r scripts/scenarios/requirements.in\n    #   packse\nhatchling==1.27.0\n    # via packse\nmsgspec==0.18.6\n    # via packse\npackaging==24.2\n    # via hatchling\npackse==0.3.45\n    # via -r scripts/scenarios/requirements.in\npathspec==0.12.1\n    # via hatchling\npluggy==1.5.0\n    # via hatchling\npyyaml==6.0.2\n    # via packse\nsetuptools==75.6.0\n    # via packse\ntrove-classifiers==2024.10.21.16\n    # via hatchling\nuv==0.5.10\n    # via packse\n```\n\n----------------------------------------\n\nTITLE: Importing and Running Rust Extension Module from Python - Python\nDESCRIPTION: This Python snippet demonstrates how the extension module (`_core`) is imported and called from the package's `__init__.py`. The `main` function calls the Rust-implemented greeting and prints the result. Depends on successful build and installation of the Rust extension using maturin.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/init.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom example_ext._core import hello_from_bin\n\n\ndef main() -> None:\n    print(hello_from_bin())\n```\n\n----------------------------------------\n\nTITLE: Removing uv and uvx Binaries on macOS and Linux - console\nDESCRIPTION: Deletes the binaries for uv and uvx from the typical user install location. Inputs: none. Output: binaries removed; further use of uv/uvx commands not possible.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/installation.md#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ rm ~/.local/bin/uv ~/.local/bin/uvx\n```\n\n----------------------------------------\n\nTITLE: Project Layout After Adding Dependencies - Plaintext\nDESCRIPTION: Displays the updated directory structure of the FastAPI project after creating the pyproject.toml and setting up the application folder. It documents the expected files for a typical uv-managed FastAPI application. This serves as a visual confirmation for users ensuring their setup matches the guide.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nproject\\n├── pyproject.toml\\n└── app\\n    ├── __init__.py\\n    ├── main.py\\n    ├── dependencies.py\\n    ├── routers\\n    │   ├── __init__.py\\n    │   ├── items.py\\n    │   └── users.py\\n    └── internal\\n        ├── __init__.py\\n        └── admin.py\n```\n\n----------------------------------------\n\nTITLE: Running Resolution Benchmarks with uv run\nDESCRIPTION: Executes the `uv run resolver` command to benchmark dependency resolution performance with warm and cold caches against pip-compile, Poetry, and PDM. Requires a local `uv` build, production `uv`, and `hyperfine`. Uses the `trio.in` requirements file and outputs results in JSON format. This command should be run from the `scripts/benchmark` directory.\nSOURCE: https://github.com/astral-sh/uv/blob/main/BENCHMARKS.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv run resolver \\\n    --uv-project \\\n    --poetry \\\n    --pdm \\\n    --pip-compile \\\n    --benchmark resolve-warm --benchmark resolve-cold \\\n    --json \\\n    ../requirements/trio.in\n```\n\n----------------------------------------\n\nTITLE: Example of Disallowed Missing Whitespace Before Comment\nDESCRIPTION: This snippet demonstrates an incorrect format, likely for a requirements file or command-line argument, where a comment (`# comment`) directly follows a path (`./editable`) without required preceding whitespace. The `-e` flag suggests an editable dependency specification. This syntax is explicitly marked as disallowed.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/hash.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e ./editable# comment\n```\n\n----------------------------------------\n\nTITLE: Exporting and Visualizing Concurrency Tracing Data with tracing-durations-export on Shell\nDESCRIPTION: Captures and exports concurrency traces during uv operations using the 'tracing-durations-export' crate and environment variables. Runs uv commands with tracing features enabled, outputting trace data in NDJSON format for analysis (e.g., CPU-bound request visualization). Assumes the Rust project includes 'tracing-durations-export' as an optional dependency and supports the relevant feature flag. The output file can be processed externally for timing and parallelism insights. Requires the target 'profiling' profile.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=uv=info TRACING_DURATIONS_FILE=target/traces/jupyter.ndjson cargo run --features tracing-durations-export --profile profiling -- pip compile scripts/requirements/jupyter.in\n```\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=uv=info TRACING_DURATIONS_FILE=target/traces/jupyter.ndjson cargo run --features tracing-durations-export --bin uv-dev --profile profiling -- resolve jupyter\n```\n\n----------------------------------------\n\nTITLE: Building Trampolines with Cargo Build\nDESCRIPTION: Shell commands demonstrating how to potentially build the trampolines using standard `cargo build` commands for each target architecture. These commands assume a correctly configured build environment (potentially native Windows or a pre-configured cross-compilation setup) and build in release mode. Note that the document suggests potential issues with this approach due to compiler/runtime assumptions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release --target i686-pc-windows-msvc\ncargo build --release --target x86_64-pc-windows-msvc\ncargo build --release --target aarch64-pc-windows-msvc\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI Project Structure - Plaintext\nDESCRIPTION: Illustrates the standard directory layout for a modular FastAPI application, highlighting separate submodules for routers and internal modules. This structure helps organize code for larger applications by grouping related route handlers and dependencies, with each directory represented by an \\_\\_init\\_\\_.py file for Python package recognition. There are no runtime dependencies; this is a documentation reference intended to clarify the expected starting point for users following the setup instructions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/fastapi.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject\\n└── app\\n    ├── __init__.py\\n    ├── main.py\\n    ├── dependencies.py\\n    ├── routers\\n    │   ├── __init__.py\\n    │   ├── items.py\\n    │   └── users.py\\n    └── internal\\n        ├── __init__.py\\n        └── admin.py\n```\n\n----------------------------------------\n\nTITLE: Running Cold Resolution Benchmark with uv, uv-pip, and Poetry in Shell\nDESCRIPTION: This shell command executes a benchmark named `resolve-cold` using the `uv run resolver` command from within the `scripts/benchmark` directory. It includes `uv-pip` and `poetry` in the benchmark comparison (`--uv-pip`, `--poetry`, `--benchmark`) and uses the `../requirements/trio.in` file as input for the dependency resolution process. Requires the `uv` tool to be installed and accessible, along with the specified requirements file.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/benchmark/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv run resolver \\\n    --uv-pip \\\n    --poetry \\\n    --benchmark \\\n    resolve-cold \\\n    ../requirements/trio.in\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Primary Index URL in TOML\nDESCRIPTION: Specifies the primary Python package index URL, overriding the default (<https://pypi.org/simple>). This setting has lower priority than indexes defined via `index` or `extra_index_url`. Note: This setting is deprecated in favor of using the `index` configuration.\nSOURCE: https://github.com/astral-sh/uv/blob/main/docs/reference/settings.md#_snippet_42\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nindex-url = \"https://test.pypi.org/simple\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nindex-url = \"https://test.pypi.org/simple\"\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Windows Trampolines from macOS using Cargo\nDESCRIPTION: Shell commands to build the uv Windows trampolines for i686, x86_64, and aarch64 architectures using `cargo xwin` from a macOS environment. It specifies the nightly Rust toolchain and builds in release mode.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo +nightly-2025-02-16 xwin build --release --target i686-pc-windows-msvc\ncargo +nightly-2025-02-16 xwin build --release --target x86_64-pc-windows-msvc\ncargo +nightly-2025-02-16 xwin build --release --target aarch64-pc-windows-msvc\n```\n\n----------------------------------------\n\nTITLE: Initializing API Key and Variables for Libraries.io Fetching (Python)\nDESCRIPTION: Imports `Path` for file system operations and `httpx` for making HTTP requests. Initializes an empty string variable `api_key` which must be populated with a valid Libraries.io API key, and an empty dictionary `responses` to cache API call results. The docstring provides instructions on obtaining the API key.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/popular_packages/pypi_10k_most_dependents.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"To update `pypi_10k_most_dependents.txt`, enter your `api_key` from https://libraries.io/account.\n\nThe latest version is available at: https://gist.github.com/charliermarsh/07afd9f543dfea68408a4a42cede4be4.\n\"\"\"\n\nfrom pathlib import Path\n\nimport httpx\n\napi_key = \"\"\nresponses = {}\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Documentation Files With Prettier on Shell\nDESCRIPTION: Applies Prettier to reformat all Markdown files in the repository for consistent prose wrapping and styling. The command expands directories recursively and requires node.js with Prettier installed. Targeting all Markdown files ensures documentation remains readable and follows team style conventions.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx prettier --prose-wrap always --write \"**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Python Dependency Specifiers Using pep508_rs in Rust\nDESCRIPTION: This Rust code demonstrates how to use the pep508_rs library to parse a Python PEP 508 dependency specification. It imports the Requirement struct and parses a complex requirement string containing extras, version specifiers, and markers. The resulting Requirement object is validated for its name and extras. Dependencies: pep508_rs crate. Inputs: a requirement string with extras and markers. Outputs: a Requirement object with parsed fields. Limitation: assumes input is a valid PEP 508 requirement string; panics if parsing fails.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-pep508/Readme.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nuse pep508_rs::Requirement;\n\nlet marker = r#\"requests [security,tests] >= 2.8.1, == 2.8.* ; python_version > \\\"3.8\\\"\"#;\nlet dependency_specification = Requirement::from_str(marker).unwrap();\nassert_eq!(dependency_specification.name, \"requests\");\nassert_eq!(dependency_specification.extras, Some(vec![\"security\".to_string(), \"tests\".to_string()]));\n```\n\n----------------------------------------\n\nTITLE: Creating and Snapshotting Tests for uv Commands Using Rust\nDESCRIPTION: Defines a Rust test function that initializes a test context for Python 3.12, invokes an add operation for the 'requests' package, and uses the 'uv_snapshot!' macro to capture the results for snapshot testing using insta. Assumes test infrastructure, including the TestContext struct and uv_snapshot! macro, is already implemented and configured. The test ensures command outputs are consistent with stored snapshots; limitations include requiring the insta crate and appropriate feature flags for building test binaries.\nSOURCE: https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_add() {\n    let context = TestContext::new(\"3.12\");\n    uv_snapshot!(context.filters(), context.add().arg(\"requests\"), @\"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Windows Trampolines from Linux using Cargo\nDESCRIPTION: Shell commands to build the uv Windows trampolines for i686, x86_64, and aarch64 architectures using `cargo xwin` from a Linux environment. It specifies the nightly Rust toolchain and builds in release mode.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo +nightly-2025-02-16 xwin build --xwin-arch x86 --release --target i686-pc-windows-msvc\ncargo +nightly-2025-02-16 xwin build --release --target x86_64-pc-windows-msvc\ncargo +nightly-2025-02-16 xwin build --release --target aarch64-pc-windows-msvc\n```\n\n----------------------------------------\n\nTITLE: Specifying an Editable Local Python Package with Space in Path\nDESCRIPTION: Specifies the 'black' package as an editable installation located at the relative path `./scripts/packages/black editable`. Note the space in the path name, which might require specific handling or quoting depending on the parsing tool.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-requirements-txt/test-data/requirements-txt/bare-url.txt#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n./scripts/packages/black editable\n```\n\n----------------------------------------\n\nTITLE: Updating Prebuilt Trampoline Executables\nDESCRIPTION: Shell commands to copy the newly built trampoline executables (console and GUI versions for aarch64, x86_64, and i686 architectures) from the respective target directories to the `trampolines/` directory within the project structure. The files are renamed to indicate their architecture and type.\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp target/aarch64-pc-windows-msvc/release/uv-trampoline-console.exe trampolines/uv-trampoline-aarch64-console.exe\ncp target/aarch64-pc-windows-msvc/release/uv-trampoline-gui.exe trampolines/uv-trampoline-aarch64-gui.exe\ncp target/x86_64-pc-windows-msvc/release/uv-trampoline-console.exe trampolines/uv-trampoline-x86_64-console.exe\ncp target/x86_64-pc-windows-msvc/release/uv-trampoline-gui.exe trampolines/uv-trampoline-x86_64-gui.exe\ncp target/i686-pc-windows-msvc/release/uv-trampoline-console.exe trampolines/uv-trampoline-i686-console.exe\ncp target/i686-pc-windows-msvc/release/uv-trampoline-gui.exe trampolines/uv-trampoline-i686-gui.exe\n```\n\n----------------------------------------\n\nTITLE: Setting up macOS Environment for Cross-Compiling Windows Trampolines\nDESCRIPTION: Shell commands to install necessary dependencies (LLVM, cargo-xwin) using Homebrew and configure the Rust environment using rustup for cross-compiling the uv Windows trampolines from a macOS system. It installs a specific nightly toolchain, adds the rust-src component, and adds the required Windows target architectures (i686, x86_64, aarch64).\nSOURCE: https://github.com/astral-sh/uv/blob/main/crates/uv-trampoline/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install llvm\ncargo install cargo-xwin\nrustup toolchain install nightly-2025-02-16\nrustup component add rust-src --toolchain nightly-2025-02-16-aarch64-apple-darwin\nrustup target add --toolchain nightly-2025-02-16 i686-pc-windows-msvc\nrustup target add --toolchain nightly-2025-02-16 x86_64-pc-windows-msvc\nrustup target add --toolchain nightly-2025-02-16 aarch64-pc-windows-msvc\n```\n\n----------------------------------------\n\nTITLE: Fetching Top 10k PyPI Packages from Libraries.io API (Python)\nDESCRIPTION: Loops 100 times to fetch paginated results from the Libraries.io API search endpoint. Each iteration requests a page of 100 PyPI projects sorted by `dependents_count`. It constructs the API URL with the page number, sort parameter, and the user's API key. The JSON response for each page is stored in the `responses` dictionary, keyed by the page index (0-99). A timeout of 30 seconds is set for each request.\nSOURCE: https://github.com/astral-sh/uv/blob/main/scripts/popular_packages/pypi_10k_most_dependents.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(100):  # 100 pages with 100 per page -> 10k\n    print(i)\n    if i not in responses:\n        # https://libraries.io/api#project-search\n        sort = \"dependents_count\"\n        url = f\"https://libraries.io/api/search?platforms=Pypi&per_page=100&page={i + 1}&sort{sort}&api_key={api_key}\"\n        responses[i] = httpx.get(url, timeout=30.0).json()\n```"
  }
]