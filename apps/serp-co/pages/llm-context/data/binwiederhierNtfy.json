[
  {
    "owner": "binwiederhier",
    "repo": "ntfy",
    "content": "TITLE: Sending Push Notification with curl\nDESCRIPTION: Sends a simple notification message to a specified ntfy topic using curl with a POST request. The message content is passed directly as the request body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"Backup successful 😀\" ntfy.sh/mytopic\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with HTTP Request\nDESCRIPTION: Shows a raw HTTP POST request with all available features including multi-line message, click action, attachment, action button, and email forwarding.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /mydoorbell HTTP/1.1\nHost: ntfy.sh\nClick: https://home.nest.com/\nAttach: https://nest.com/view/yAxkasd.jpg\nActions: http, Open door, https://api.nest.com/open/yAxkasd, clear=true\nEmail: phil@example.com\n\nThere's someone at the door. 🐶\n   \nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with ntfy CLI\nDESCRIPTION: Uses the ntfy command-line interface to publish a notification to a specified topic. This requires having the ntfy CLI installed on your system.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish mytopic \"Backup successful 😀\"\n```\n\n----------------------------------------\n\nTITLE: ntfy.sh Production Configuration\nDESCRIPTION: The comprehensive configuration used by ntfy.sh with Firebase, caching, attachments, and SMTP features enabled.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# All the things: Behind a proxy, Firebase, cache, attachments, \n# SMTP publishing & receiving\n\nbase-url: \"https://ntfy.sh\"\nlisten-http: \"127.0.0.1:2586\"\nfirebase-key-file: \"/etc/ntfy/firebase.json\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nbehind-proxy: true\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\nsmtp-sender-addr: \"email-smtp.us-east-2.amazonaws.com:587\"\nsmtp-sender-user: \"AKIDEADBEEFAFFE12345\"\nsmtp-sender-pass: \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\"\nsmtp-sender-from: \"ntfy@ntfy.sh\"\nsmtp-server-listen: \":25\"\nsmtp-server-domain: \"ntfy.sh\"\nsmtp-server-addr-prefix: \"ntfy-\"\nkeepalive-interval: \"45s\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to SSE Stream using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to subscribe to a ntfy topic's Server-Sent Events (SSE) stream using the EventSource API.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSource = new EventSource('https://ntfy.sh/mytopic/sse');\neventSource.onmessage = (e) => {\n  console.log(e.data);\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with curl\nDESCRIPTION: Sends an urgent notification with a title and tags using curl. Shows how to set HTTP headers for additional notification features like priority and visual indicators.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n  -H \"Title: Unauthorized access detected\" \\\n  -H \"Priority: urgent\" \\\n  -H \"Tags: warning,skull\" \\\n  -d \"Remote access to phils-laptop detected. Act right away.\" \\\n  ntfy.sh/phil_alerts\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with curl\nDESCRIPTION: Sends a simple notification message to the 'mytopic' topic using curl. This demonstrates the most basic way to publish a message using HTTP POST.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -d \"Backup successful 😀\" ntfy.sh/mytopic\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with JavaScript\nDESCRIPTION: JavaScript example using the fetch API to send a notification. This can be used in browser-based applications or Node.js environments.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mytopic', {\n    method: 'POST', // PUT works too\n    body: 'Backup successful 😀'\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using JavaScript Fetch\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using JavaScript's fetch API with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull')\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using curl\nDESCRIPTION: This snippet demonstrates how to publish a JSON-formatted message to an ntfy topic using curl. It includes various message parameters such as title, tags, priority, and custom actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_94\n\nLANGUAGE: bash\nCODE:\n```\ncurl ntfy.sh \\\n  -d '{\n    \"topic\": \"mytopic\",\n    \"message\": \"Disk space is low at 5.1 GB\",\n    \"title\": \"Low disk space alert\",\n    \"tags\": [\"warning\",\"cd\"],\n    \"priority\": 4,\n    \"attach\": \"https://filesrv.lan/space.jpg\",\n    \"filename\": \"diskspace.jpg\",\n    \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n    \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with Go\nDESCRIPTION: Sends an urgent notification with custom headers using Go's http package. Demonstrates how to create and customize a request with headers in Go.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/phil_alerts\",\n\tstrings.NewReader(\"Remote access to phils-laptop detected. Act right away.\"))\nreq.Header.Set(\"Title\", \"Unauthorized access detected\")\nreq.Header.Set(\"Priority\", \"urgent\")\nreq.Header.Set(\"Tags\", \"warning,skull\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: ntfy serve Command Options Reference\nDESCRIPTION: Complete reference for the 'ntfy serve' command, which runs the ntfy server and listens for incoming requests. The command loads configuration from /etc/ntfy/server.yml by default, but options can be overridden using the listed command line parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n   ntfy serve - Run the ntfy server\n\nUSAGE:\n   ntfy serve [OPTIONS..]\n\nCATEGORY:\n   Server commands\n\nDESCRIPTION:\n   Run the ntfy server and listen for incoming requests\n\n   The command will load the configuration from /etc/ntfy/server.yml. Config options can \n   be overridden using the command line options.\n\n   Examples:\n     ntfy serve                      # Starts server in the foreground (on port 80)\n     ntfy serve --listen-http :8080  # Starts server with alternate port\n\nOPTIONS:\n   --debug, -d                                                                                                            enable debug logging (default: false) [$NTFY_DEBUG]\n   --trace                                                                                                                enable tracing (very verbose, be careful) (default: false) [$NTFY_TRACE]\n   --no-log-dates, --no_log_dates                                                                                         disable the date/time prefix (default: false) [$NTFY_NO_LOG_DATES]\n   --log-level value, --log_level value                                                                                   set log level (default: \"INFO\") [$NTFY_LOG_LEVEL]\n   --log-level-overrides value, --log_level_overrides value [ --log-level-overrides value, --log_level_overrides value ]  set log level overrides [$NTFY_LOG_LEVEL_OVERRIDES]\n   --log-format value, --log_format value                                                                                 set log format (default: \"text\") [$NTFY_LOG_FORMAT]\n   --log-file value, --log_file value                                                                                     set log file, default is STDOUT [$NTFY_LOG_FILE]\n   --config value, -c value                                                                                               config file (default: \"/etc/ntfy/server.yml\") [$NTFY_CONFIG_FILE]\n   --base-url value, --base_url value, -B value                                                                           externally visible base URL for this host (e.g. https://ntfy.sh) [$NTFY_BASE_URL]\n   --listen-http value, --listen_http value, -l value                                                                     ip:port used as HTTP listen address (default: \":80\") [$NTFY_LISTEN_HTTP]\n   --listen-https value, --listen_https value, -L value                                                                   ip:port used as HTTPS listen address [$NTFY_LISTEN_HTTPS]\n   --listen-unix value, --listen_unix value, -U value                                                                     listen on unix socket path [$NTFY_LISTEN_UNIX]\n   --listen-unix-mode value, --listen_unix_mode value                                                                     file permissions of unix socket, e.g. 0700 (default: system default) [$NTFY_LISTEN_UNIX_MODE]\n   --key-file value, --key_file value, -K value                                                                           private key file, if listen-https is set [$NTFY_KEY_FILE]\n   --cert-file value, --cert_file value, -E value                                                                         certificate file, if listen-https is set [$NTFY_CERT_FILE]\n   --firebase-key-file value, --firebase_key_file value, -F value                                                         Firebase credentials file; if set additionally publish to FCM topic [$NTFY_FIREBASE_KEY_FILE]\n   --cache-file value, --cache_file value, -C value                                                                       cache file used for message caching [$NTFY_CACHE_FILE]\n   --cache-duration since, --cache_duration since, -b since                                                               buffer messages for this time to allow since requests (default: \"12h\") [$NTFY_CACHE_DURATION]\n   --cache-batch-size value, --cache_batch_size value                                                                     max size of messages to batch together when writing to message cache (if zero, writes are synchronous) (default: 0) [$NTFY_BATCH_SIZE]\n   --cache-batch-timeout value, --cache_batch_timeout value                                                               timeout for batched async writes to the message cache (if zero, writes are synchronous) (default: \"0s\") [$NTFY_CACHE_BATCH_TIMEOUT]\n   --cache-startup-queries value, --cache_startup_queries value                                                             queries run when the cache database is initialized [$NTFY_CACHE_STARTUP_QUERIES]\n   --auth-file value, --auth_file value, -H value                                                                         auth database file used for access control [$NTFY_AUTH_FILE]\n   --auth-startup-queries value, --auth_startup_queries value                                                             queries run when the auth database is initialized [$NTFY_AUTH_STARTUP_QUERIES]\n   --auth-default-access value, --auth_default_access value, -p value                                                     default permissions if no matching entries in the auth database are found (default: \"read-write\") [$NTFY_AUTH_DEFAULT_ACCESS]\n   --attachment-cache-dir value, --attachment_cache_dir value                                                             cache directory for attached files [$NTFY_ATTACHMENT_CACHE_DIR]\n   --attachment-total-size-limit value, --attachment_total_size_limit value, -A value                                     limit of the on-disk attachment cache (default: \"5G\") [$NTFY_ATTACHMENT_TOTAL_SIZE_LIMIT]\n   --attachment-file-size-limit value, --attachment_file_size_limit value, -Y value                                       per-file attachment size limit (e.g. 300k, 2M, 100M) (default: \"15M\") [$NTFY_ATTACHMENT_FILE_SIZE_LIMIT]\n   --attachment-expiry-duration value, --attachment_expiry_duration value, -X value                                       duration after which uploaded attachments will be deleted (e.g. 3h, 20h) (default: \"3h\") [$NTFY_ATTACHMENT_EXPIRY_DURATION]\n   --keepalive-interval value, --keepalive_interval value, -k value                                                       interval of keepalive messages (default: \"45s\") [$NTFY_KEEPALIVE_INTERVAL]\n   --manager-interval value, --manager_interval value, -m value                                                           interval of for message pruning and stats printing (default: \"1m\") [$NTFY_MANAGER_INTERVAL]\n   --disallowed-topics value, --disallowed_topics value [ --disallowed-topics value, --disallowed_topics value ]          topics that are not allowed to be used [$NTFY_DISALLOWED_TOPICS]\n   --web-root value, --web_root value                                                                                     sets root of the web app (e.g. /, or /app), or disables it (disable) (default: \"/\") [$NTFY_WEB_ROOT]\n   --enable-signup, --enable_signup                                                                                       allows users to sign up via the web app, or API (default: false) [$NTFY_ENABLE_SIGNUP]\n   --enable-login, --enable_login                                                                                         allows users to log in via the web app, or API (default: false) [$NTFY_ENABLE_LOGIN]\n   --enable-reservations, --enable_reservations                                                                           allows users to reserve topics (if their tier allows it) (default: false) [$NTFY_ENABLE_RESERVATIONS]\n   --upstream-base-url value, --upstream_base_url value                                                                   forward poll request to an upstream server, this is needed for iOS push notifications for self-hosted servers [$NTFY_UPSTREAM_BASE_URL]\n   --upstream-access-token value, --upstream_access_token value                                                           access token to use for the upstream server; needed only if upstream rate limits are exceeded or upstream server requires auth [$NTFY_UPSTREAM_ACCESS_TOKEN]\n   --smtp-sender-addr value, --smtp_sender_addr value                                                                     SMTP server address (host:port) for outgoing emails [$NTFY_SMTP_SENDER_ADDR]\n   --smtp-sender-user value, --smtp_sender_user value                                                                     SMTP user (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_USER]\n   --smtp-sender-pass value, --smtp_sender_pass value                                                                     SMTP password (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_PASS]\n   --smtp-sender-from value, --smtp_sender_from value                                                                     SMTP sender address (if e-mail sending is enabled) [$NTFY_SMTP_SENDER_FROM]\n   --smtp-server-listen value, --smtp_server_listen value                                                                 SMTP server address (ip:port) for incoming emails, e.g. :25 [$NTFY_SMTP_SERVER_LISTEN]\n   --smtp-server-domain value, --smtp_server_domain value                                                                 SMTP domain for incoming e-mail, e.g. ntfy.sh [$NTFY_SMTP_SERVER_DOMAIN]\n   --smtp-server-addr-prefix value, --smtp_server_addr_prefix value                                                       SMTP email address prefix for topics to prevent spam (e.g. 'ntfy-') [$NTFY_SMTP_SERVER_ADDR_PREFIX]\n   --twilio-account value, --twilio_account value                                                                         Twilio account SID, used for phone calls, e.g. AC123... [$NTFY_TWILIO_ACCOUNT]\n   --twilio-auth-token value, --twilio_auth_token value                                                                   Twilio auth token [$NTFY_TWILIO_AUTH_TOKEN]\n```\n\n----------------------------------------\n\nTITLE: Example of a Full Notification Message in JSON\nDESCRIPTION: A complete example of a JSON-formatted notification message including all possible fields such as priority, tags, click action, and attachment details.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"sPs71M8A2T\",\n    \"time\": 1643935928,\n    \"expires\": 1643936928,\n    \"event\": \"message\",\n    \"topic\": \"mytopic\",\n    \"priority\": 5,\n    \"tags\": [\n        \"warning\",\n        \"skull\"\n    ],\n    \"click\": \"https://homecam.mynet.lan/incident/1234\",\n    \"attachment\": {\n        \"name\": \"camera.jpg\",\n        \"type\": \"image/png\",\n        \"size\": 33848,\n        \"expires\": 1643946728,\n        \"url\": \"https://ntfy.sh/file/sPs71M8A2T.png\"\n    },\n    \"title\": \"Unauthorized access detected\",\n    \"message\": \"Movement detected in the yard. You better go check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with ntfy CLI\nDESCRIPTION: Sends an urgent notification with a title and tags using the ntfy CLI. Demonstrates the CLI parameters for additional notification features.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --title \"Unauthorized access detected\" \\\n    --tags warning,skull \\\n    --priority urgent \\\n    mytopic \\\n    \"Remote access to phils-laptop detected. Act right away.\"\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with JavaScript\nDESCRIPTION: Sends an urgent notification with a title and tags using JavaScript's fetch API. Shows how to set headers for additional notification features.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/phil_alerts', {\n    method: 'POST', // PUT works too\n    body: 'Remote access to phils-laptop detected. Act right away.',\n    headers: {\n        'Title': 'Unauthorized access detected',\n        'Priority': 'urgent',\n        'Tags': 'warning,skull'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Users with ntfy CLI\nDESCRIPTION: Examples of user management commands with the ntfy CLI to add, delete, and modify users, their roles, passwords, and tiers.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nntfy user list                     # Shows list of users (alias: 'ntfy access')\nntfy user add phil                 # Add regular user phil  \nntfy user add --role=admin phil    # Add admin user phil\nntfy user del phil                 # Delete user phil\nntfy user change-pass phil         # Change password for user phil\nntfy user change-role phil admin   # Make user phil an admin\nntfy user change-tier phil pro     # Change phil's tier to \"pro\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with ntfy CLI\nDESCRIPTION: Sends a multi-line notification with various features using the ntfy CLI. Shows how to use click actions, attachments, action buttons, and email forwarding.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n\t--click=\"https://home.nest.com/\" \\\n    --attach=\"https://nest.com/view/yAxkasd.jpg\" \\\n    --actions=\"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\\n    --email=\"phil@example.com\" \\\n    mydoorbell \\\n    \"There's someone at the door. 🐶\n   \nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with PHP\nDESCRIPTION: Sends a multi-line notification with various features using PHP. Shows how to implement all available notification features in PHP applications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mydoorbell', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Click: https://home.nest.com/\\r\\n\" .\n            \"Attach: https://nest.com/view/yAxkasd.jpg\\r\\n\" .\n            \"Actions\": \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\\r\\n\" .\n            \"Email\": \"phil@example.com\\r\\n\",\n        'content' => 'There\\'s someone at the door. 🐶\n   \nPlease check if it\\'s a good boy or a hooman.\nDoggies have been known to ring the doorbell.'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Publishing Formatted Messages with Title, Priority and Tags\nDESCRIPTION: Example of publishing a message with additional formatting options including a title, high priority, and emoji tags.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --title=\"Thing sold on eBay\" \\\n    --priority=high \\\n    --tags=partying_face \\\n    mytopic \\\n    \"Somebody just bought the thing that you sell\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with PowerShell\nDESCRIPTION: Sends a multi-line notification with various features using PowerShell. Shows how to implement all available notification features in PowerShell scripts.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mydoorbell\"\n  Headers = @{\n    Click = \"https://home.nest.com\"\n    Attach = \"https://nest.com/view/yAxksd.jpg\"\n    Actions = \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\"\n    Email = \"phil@example.com\"\n  }\n  Body = \"There's someone at the door. 🐶`n\n  `n\n  Please check if it's a good boy or a hooman.`n\n  Doggies have been known to ring the doorbell.`n\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Managing Access Control with ntfy CLI\nDESCRIPTION: Examples of commands to manage the access control list (ACL) to grant or restrict topic access permissions for users or anonymous clients.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nntfy access                        # Shows entire access control list\nntfy access phil                   # Shows access for user phil\nntfy access phil mytopic rw        # Allow read-write access to mytopic for user phil\nntfy access everyone mytopic rw    # Allow anonymous read-write access to mytopic\nntfy access everyone \"up*\" write   # Allow anonymous write-only access to topics \"up...\"\nntfy access --reset                # Reset entire access control list\nntfy access --reset phil           # Reset all access for user phil\nntfy access --reset phil mytopic   # Reset access for user phil and topic mytopic\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using JavaScript\nDESCRIPTION: This JavaScript snippet uses the fetch API to publish a JSON-formatted message to an ntfy topic. It demonstrates how to structure the message object and send it as a POST request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        \"topic\": \"mytopic\",\n        \"message\": \"Disk space is low at 5.1 GB\",\n        \"title\": \"Low disk space alert\",\n        \"tags\": [\"warning\",\"cd\"],\n        \"priority\": 4,\n        \"attach\": \"https://filesrv.lan/space.jpg\",\n        \"filename\": \"diskspace.jpg\",\n        \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n        \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with HTTP Request\nDESCRIPTION: Demonstrates a raw HTTP POST request format for sending a notification to ntfy. This shows the underlying HTTP structure that other methods implement.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /mytopic HTTP/1.1\nHost: ntfy.sh\n\nBackup successful 😀\n```\n\n----------------------------------------\n\nTITLE: Installing ntfy on Linux (x86_64/amd64)\nDESCRIPTION: Downloads the ntfy binary for x86_64/amd64 Linux, extracts it, copies it to the system path, sets up configuration files, and starts the ntfy server.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_amd64.tar.gz\ntar zxvf ntfy_2.11.0_linux_amd64.tar.gz\nsudo cp -a ntfy_2.11.0_linux_amd64/ntfy /usr/local/bin/ntfy\nsudo mkdir /etc/ntfy && sudo cp ntfy_2.11.0_linux_amd64/{client,server}/*.yml /etc/ntfy\nsudo ntfy serve\n```\n\n----------------------------------------\n\nTITLE: Low Disk Space Monitoring Script\nDESCRIPTION: Bash script that monitors available disk space and sends alerts when it falls below a threshold\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nmingigs=10\navail=$(df | awk '$6 == \"/\" && $4 < '$mingigs' * 1024*1024 { print $4/1024/1024 }')\ntopicurl=https://ntfy.sh/mytopic\n\nif [ -n \"$avail\" ]; then\n  curl \\\n    -d \"Only $avail GB available on the root disk. Better clean that up.\" \\\n    -H \"Title: Low disk space alert on $(hostname)\" \\\n    -H \"Priority: high\" \\\n    -H \"Tags: warning,cd\" \\\n    $topicurl\nfi\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with JavaScript\nDESCRIPTION: JavaScript implementation using fetch API to send notification with JSON array actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"myhome\",\n        message: \"You left the house. Turn down the A/C?\",\n        actions: [\n            {\n                action: \"view\",\n                label: \"Open portal\",\n                url: \"https://home.nest.com/\",\n                clear: true\n            },\n            {\n                action: \"http\",\n                label: \"Turn down\",\n                url: \"https://api.nest.com/\",\n                body: \"{\\\"temperature\\\": 65}\"\n            }\n        ]\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with ntfy CLI\nDESCRIPTION: Sends a simple notification message to the 'mytopic' topic using the ntfy command-line interface. This is the most direct way to publish if you have the ntfy CLI installed.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish mytopic \"Backup successful 😀\"\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with HTTP Request\nDESCRIPTION: Raw HTTP POST request format for sending a notification to an ntfy topic. Shows the request structure including headers and body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /mytopic HTTP/1.1\nHost: ntfy.sh\n\nBackup successful 😀\n```\n\n----------------------------------------\n\nTITLE: Publishing Simple Messages with ntfy CLI\nDESCRIPTION: Examples showing different ways to publish a simple message to a topic using the ntfy CLI command.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish mytopic This is a message\nntfy publish mytopic \"This is a message\"\nntfy pub mytopic \"This is a message\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with curl\nDESCRIPTION: Sends a multi-line notification with click action, action button, image attachment, and email forwarding using curl. Shows the full range of notification features available.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_16\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n  -H \"Click: https://home.nest.com/\" \\\n  -H \"Attach: https://nest.com/view/yAxkasd.jpg\" \\\n  -H \"Actions: http, Open door, https://api.nest.com/open/yAxkasd, clear=true\" \\\n  -H \"Email: phil@example.com\" \\\n  -d \"There's someone at the door. 🐶\n   \nPlease check if it's a good boy or a hooman. \nDoggies have been known to ring the doorbell.\" \\\n  ntfy.sh/mydoorbell\n```\n\n----------------------------------------\n\nTITLE: Installing ntfy on Debian/Ubuntu (x86_64/amd64)\nDESCRIPTION: Sets up the ntfy repository, installs ntfy using apt, and starts the ntfy service on Debian/Ubuntu systems.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg\nsudo apt install apt-transport-https\nsudo sh -c \"echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' \\\n    > /etc/apt/sources.list.d/archive.heckel.io.list\"  \nsudo apt update\nsudo apt install ntfy\nsudo systemctl enable ntfy\nsudo systemctl start ntfy\n```\n\n----------------------------------------\n\nTITLE: GitHub Organization Availability Check\nDESCRIPTION: Cron job to monitor availability of a GitHub organization name and send notification when available\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Check github/ntfy user\n*/6 * * * * if curl -s https://api.github.com/users/ntfy | grep \"Not Found\"; then curl -d \"github.com/ntfy is available\" -H \"Tags: tada\" -H \"Prio: high\" ntfy.sh/my-alerts; fi\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with Python\nDESCRIPTION: Python implementation using requests library to send notification with JSON array actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"myhome\",\n        \"message\": \"You left the house. Turn down the A/C?\",\n        \"actions\": [\n            {\n                \"action\": \"view\",\n                \"label\": \"Open portal\",\n                \"url\": \"https://home.nest.com/\",\n                \"clear\": true\n            },\n            {\n                \"action\": \"http\",\n                \"label\": \"Turn down\",\n                \"url\": \"https://api.nest.com/\",\n                \"body\": \"{\\\"temperature\\\": 65}\"\n            }\n        ]\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with Python\nDESCRIPTION: Sends a notification using Python's requests library. This shows how to encode message content properly in Python applications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/mytopic\", \n    data=\"Backup successful 😀\".encode(encoding='utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with Python\nDESCRIPTION: Sends an urgent notification with headers using Python's requests library. Shows how to include custom headers for enhanced notification features in Python.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/phil_alerts\",\n    data=\"Remote access to phils-laptop detected. Act right away.\",\n    headers={\n        \"Title\": \"Unauthorized access detected\",\n        \"Priority\": \"urgent\",\n        \"Tags\": \"warning,skull\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WebSocket Stream using JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to subscribe to a ntfy topic's WebSocket stream using the WebSocket API.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst socket = new WebSocket('wss://ntfy.sh/mytopic/ws');\nsocket.addEventListener('message', function (event) {\n    console.log(event.data);\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with Python\nDESCRIPTION: Sends a multi-line notification with various features using Python. Shows how to implement all available notification features and properly encode multi-line messages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/mydoorbell\",\n    data=\"\"\"There's someone at the door. 🐶\n\nPlease check if it's a good boy or a hooman.\nDoggies have been known to ring the doorbell.\"\"\".encode('utf-8'),\n    headers={\n        \"Click\": \"https://home.nest.com/\",\n        \"Attach\": \"https://nest.com/view/yAxkasd.jpg\",\n        \"Actions\": \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\",\n        \"Email\": \"phil@example.com\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Starting the ntfy Server\nDESCRIPTION: Shows how to start the ntfy server with default settings, which will listen on port 80.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy serve\n2021/11/30 19:59:08 Listening on :80\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Notification Integration\nDESCRIPTION: GitHub Actions workflow step to send notifications about repository and job status\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Actions Ntfy\n  run: |\n    curl \\\n      -u ${{ secrets.NTFY_CRED }} \\\n      -H \"Title: Title here\" \\\n      -H \"Content-Type: text/plain\" \\\n      -d $'Repo: ${{ github.repository }}\\nCommit: ${{ github.sha }}\\nRef: ${{ github.ref }}\\nStatus: ${{ job.status}}' \\\n      ${{ secrets.NTFY_URL }}\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using curl\nDESCRIPTION: Uses curl to upload a local image file as an attachment to a notification. The file is sent in the request body with a PUT request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_174\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -T flower.jpg \\\n    -H \"Filename: flower.jpg\" \\\n    ntfy.sh/flowers\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using cURL\nDESCRIPTION: Demonstrates how to set a custom message title for ntfy notifications using cURL. The title is set using the X-Title, Title, or t header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial\ncurl -H \"Title: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial\ncurl -H \"t: Dogs are better than cats\" -d \"Oh my ...\" ntfy.sh/controversial\n```\n\n----------------------------------------\n\nTITLE: Private Instance Server Configuration in YAML\nDESCRIPTION: Server configuration in YAML format to set up a private ntfy instance by setting auth-default-access to deny-all and specifying the auth-file location.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nauth-file: \"/var/lib/ntfy/user.db\"\nauth-default-access: \"deny-all\"\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using Go\nDESCRIPTION: This Go snippet demonstrates how to publish a JSON-formatted message to an ntfy topic using the http package. It uses a hardcoded JSON string for simplicity, but mentions that json.Marshal() should be used in practice.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_97\n\nLANGUAGE: go\nCODE:\n```\n// You should probably use json.Marshal() instead and make a proper struct,\n// or even just use req.Header.Set() like in the other examples, but for the \n// sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"mytopic\",\n    \"message\": \"Disk space is low at 5.1 GB\",\n    \"title\": \"Low disk space alert\",\n    \"tags\": [\"warning\",\"cd\"],\n    \"priority\": 4,\n    \"attach\": \"https://filesrv.lan/space.jpg\",\n    \"filename\": \"diskspace.jpg\",\n    \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n    \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the fetch API in JavaScript to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_226\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with JavaScript\nDESCRIPTION: Sends a multi-line notification with various features using JavaScript. Shows how to use all available notification features in web applications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mydoorbell', {\n    method: 'POST', // PUT works too\n    headers: {\n        'Click': 'https://home.nest.com/',\n        'Attach': 'https://nest.com/view/yAxkasd.jpg',\n\t    'Actions': 'http, Open door, https://api.nest.com/open/yAxkasd, clear=true',\n\t    'Email': 'phil@example.com'\n    },\n    body: `There's someone at the door. 🐶\n       \n    Please check if it's a good boy or a hooman. \n    Doggies have been known to ring the doorbell.`,\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using HTTP\nDESCRIPTION: Example HTTP request to send a notification to a ntfy server with Basic Authentication in the Authorization header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Basic cGhpbDpteXBhc3M=\n\nLook ma, with auth\n```\n\n----------------------------------------\n\nTITLE: HTTP-only Server Configuration with Cache and Attachments\nDESCRIPTION: YAML configuration for an HTTP-only ntfy server with message caching and file attachment support.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbase-url: \"http://ntfy.example.com\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to JSON Stream using Python\nDESCRIPTION: This Python code example shows how to subscribe to a ntfy topic's JSON stream and print the received messages using the requests library.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresp = requests.get(\"https://ntfy.sh/disk-alerts/json\", stream=True)\nfor line in resp.iter_lines():\n  if line:\n    print(line)\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using ntfy CLI\nDESCRIPTION: Example of using the ntfy CLI to publish a notification with tags. The tags parameter allows multiple comma-separated values that will appear in the notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --tags=warning,mailsrv13,daily-backup \\\n    backups \"Backup of mailsrv13 failed\"\n```\n\n----------------------------------------\n\nTITLE: Deploying ntfy using Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up ntfy with non-root user, healthchecks, persistent storage, and custom configuration.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2.3\"\n\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    container_name: ntfy\n    command:\n      - serve\n    environment:\n      - TZ=UTC    # optional: set desired timezone\n    user: UID:GID # optional: replace with your own user/group or uid/gid\n    volumes:\n      - /var/cache/ntfy:/var/cache/ntfy\n      - /etc/ntfy:/etc/ntfy\n    ports:\n      - 80:80\n    healthcheck: # optional: remember to adapt the host:port to your environment\n        test: [\"CMD-SHELL\", \"wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\\\"healthy\\\"\\\\s*:\\\\s*true' || exit 1\"]\n        interval: 60s\n        timeout: 10s\n        retries: 3\n        start_period: 40s\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WebSocket Stream using Go\nDESCRIPTION: This Go code snippet demonstrates how to subscribe to a ntfy topic's WebSocket stream using the gorilla/websocket library.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/gorilla/websocket\"\nws, _, _ := websocket.DefaultDialer.Dial(\"wss://ntfy.sh/mytopic/ws\", nil)\nmessageType, data, err := ws.ReadMessage()\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with Python\nDESCRIPTION: Python implementation using the requests library with Basic authentication header for publishing to protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_221\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.example.com/mysecrets\",\ndata=\"Look ma, with auth\",\nheaders={\n    \"Authorization\": \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\"\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using HTTP POST\nDESCRIPTION: This snippet shows the raw HTTP POST request for publishing a JSON-formatted message to an ntfy topic. It includes the same message parameters as the curl example.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_95\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"mytopic\",\n    \"message\": \"Disk space is low at 5.1 GB\",\n    \"title\": \"Low disk space alert\",\n    \"tags\": [\"warning\",\"cd\"],\n    \"priority\": 4,\n    \"attach\": \"https://filesrv.lan/space.jpg\",\n    \"filename\": \"diskspace.jpg\",\n    \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n    \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with PowerShell\nDESCRIPTION: Sends an urgent notification with headers using PowerShell's Invoke-RestMethod. Shows how to set custom headers for enhanced notifications in PowerShell scripts.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/phil_alerts\"\n  Headers = @{\n    Title = \"Unauthorized access detected\"\n    Priority = \"urgent\"\n    Tags = \"warning,skull\"\n  }\n  Body = \"Remote access to phils-laptop detected. Act right away.\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using Go\nDESCRIPTION: Go language example to send a notification to a ntfy server with Basic Authentication.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\n    strings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Basic cGhpbDpteXBhc3M=\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using JavaScript\nDESCRIPTION: This snippet shows how to send a notification with a custom icon using JavaScript's fetch API. It includes headers for the icon URL, title, and tags.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_193\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/tvshows', {\n    method: 'POST',\n    headers: { \n        'Icon': 'https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png',\n        'Title': 'Kodi: Resuming Playback',\n        'Tags': 'arrow_forward'\n    },\n    body: \"The Wire, S01E01\"\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using PHP\nDESCRIPTION: This PHP snippet demonstrates how to publish a JSON-formatted message to an ntfy topic using file_get_contents and stream_context_create. It shows how to structure the message array and encode it as JSON.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_100\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => \"Content-Type: application/json\",\n        'content' => json_encode([\n            \"topic\": \"mytopic\",\n            \"message\": \"Disk space is low at 5.1 GB\",\n            \"title\": \"Low disk space alert\",\n            \"tags\": [\"warning\",\"cd\"],\n            \"priority\": 4,\n            \"attach\": \"https://filesrv.lan/space.jpg\",\n            \"filename\": \"diskspace.jpg\",\n            \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n            \"actions\": [[\"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" ]]\n        ])\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with WebPush and iOS Support\nDESCRIPTION: Advanced Docker Compose YAML configuration that includes web push notifications, iOS support, authentication, and caching.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    restart: unless-stopped\n    environment:\n      NTFY_BASE_URL: http://ntfy.example.com\n      NTFY_CACHE_FILE: /var/lib/ntfy/cache.db\n      NTFY_AUTH_FILE: /var/lib/ntfy/auth.db\n      NTFY_AUTH_DEFAULT_ACCESS: deny-all\n      NTFY_BEHIND_PROXY: true\n      NTFY_ATTACHMENT_CACHE_DIR: /var/lib/ntfy/attachments\n      NTFY_ENABLE_LOGIN: true\n      NTFY_UPSTREAM_BASE_URL: https://ntfy.sh\n      NTFY_WEB_PUSH_PUBLIC_KEY: <public_key>\n      NTFY_WEB_PUSH_PRIVATE_KEY: <private_key>\n      NTFY_WEB_PUSH_FILE: /var/lib/ntfy/webpush.db\n      NTFY_WEB_PUSH_EMAIL_ADDRESS: <email>\n    volumes:\n      - ./:/var/lib/ntfy\n    ports:\n      - 8093:80\n    command: serve\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Raw Stream using Go\nDESCRIPTION: This Go code snippet demonstrates how to subscribe to a ntfy topic's raw stream and print the received messages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nresp, err := http.Get(\"https://ntfy.sh/disk-alerts/raw\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer resp.Body.Close()\nscanner := bufio.NewScanner(resp.Body)\nfor scanner.Scan() {\n    println(scanner.Text())\n}\n```\n\n----------------------------------------\n\nTITLE: macOS Configuration for Multiple Topic Subscriptions\nDESCRIPTION: YAML configuration for subscribing to multiple ntfy topics on macOS. It shows how to echo messages, display notifications for high priority alerts, and open applications in response to notifications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsubscribe:\n  - topic: echo-this\n    command: 'echo \"Message received: $message\"'\n  - topic: alerts\n    command: osascript -e \"display notification \\\"$message\\\"\" \n    if:\n      priority: high,urgent\n  - topic: calc\n    command: open -a Calculator\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with HTTP Request\nDESCRIPTION: Shows a raw HTTP POST request with headers for title, priority, and tags. Demonstrates the underlying HTTP structure for enhanced notifications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /phil_alerts HTTP/1.1\nHost: ntfy.sh\nTitle: Unauthorized access detected\nPriority: urgent\nTags: warning,skull\n\nRemote access to phils-laptop detected. Act right away.\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using Python\nDESCRIPTION: This Python snippet uses the requests library to publish a JSON-formatted message to an ntfy topic. It demonstrates how to structure the message dictionary and send it as a POST request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"mytopic\",\n        \"message\": \"Disk space is low at 5.1 GB\",\n        \"title\": \"Low disk space alert\",\n        \"tags\": [\"warning\",\"cd\"],\n        \"priority\": 4,\n        \"attach\": \"https://filesrv.lan/space.jpg\",\n        \"filename\": \"diskspace.jpg\",\n        \"click\": \"https://homecamera.lan/xasds1h2xsSsa/\",\n        \"actions\": [{ \"action\": \"view\", \"label\": \"Admin panel\", \"url\": \"https://filesrv.lan/admin\" }]\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with Go\nDESCRIPTION: Sends a notification using Go's http package. This demonstrates how to make simple POST requests in Go applications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttp.Post(\"https://ntfy.sh/mytopic\", \"text/plain\",\n    strings.NewReader(\"Backup successful 😀\"))\n```\n\n----------------------------------------\n\nTITLE: ntfy Command Line Options\nDESCRIPTION: A collection of CLI flags and environment variables for configuring ntfy. Options include settings for Twilio integration, message limits, rate limiting, storage limits, metrics, web push notifications, and billing functionality.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_59\n\nLANGUAGE: cli\nCODE:\n```\n--twilio-phone-number value, --twilio_phone_number value                                                               Twilio number to use for outgoing calls [$NTFY_TWILIO_PHONE_NUMBER]\n   --twilio-verify-service value, --twilio_verify_service value                                                           Twilio Verify service ID, used for phone number verification [$NTFY_TWILIO_VERIFY_SERVICE]\n   --message-size-limit value, --message_size_limit value                                                                 size limit for the message (see docs for limitations) (default: \"4K\") [$NTFY_MESSAGE_SIZE_LIMIT]\n   --message-delay-limit value, --message_delay_limit value                                                               max duration a message can be scheduled into the future (default: \"3d\") [$NTFY_MESSAGE_DELAY_LIMIT]\n   --global-topic-limit value, --global_topic_limit value, -T value                                                       total number of topics allowed (default: 15000) [$NTFY_GLOBAL_TOPIC_LIMIT]\n   --visitor-subscription-limit value, --visitor_subscription_limit value                                                 number of subscriptions per visitor (default: 30) [$NTFY_VISITOR_SUBSCRIPTION_LIMIT]\n   --visitor-attachment-total-size-limit value, --visitor_attachment_total_size_limit value                               total storage limit used for attachments per visitor (default: \"100M\") [$NTFY_VISITOR_ATTACHMENT_TOTAL_SIZE_LIMIT]\n   --visitor-attachment-daily-bandwidth-limit value, --visitor_attachment_daily_bandwidth_limit value                     total daily attachment download/upload bandwidth limit per visitor (default: \"500M\") [$NTFY_VISITOR_ATTACHMENT_DAILY_BANDWIDTH_LIMIT]\n   --visitor-request-limit-burst value, --visitor_request_limit_burst value                                               initial limit of requests per visitor (default: 60) [$NTFY_VISITOR_REQUEST_LIMIT_BURST]\n   --visitor-request-limit-replenish value, --visitor_request_limit_replenish value                                       interval at which burst limit is replenished (one per x) (default: \"5s\") [$NTFY_VISITOR_REQUEST_LIMIT_REPLENISH]\n   --visitor-request-limit-exempt-hosts value, --visitor_request_limit_exempt_hosts value                                 hostnames and/or IP addresses of hosts that will be exempt from the visitor request limit [$NTFY_VISITOR_REQUEST_LIMIT_EXEMPT_HOSTS]\n   --visitor-message-daily-limit value, --visitor_message_daily_limit value                                               max messages per visitor per day, derived from request limit if unset (default: 0) [$NTFY_VISITOR_MESSAGE_DAILY_LIMIT]\n   --visitor-email-limit-burst value, --visitor_email_limit_burst value                                                   initial limit of e-mails per visitor (default: 16) [$NTFY_VISITOR_EMAIL_LIMIT_BURST]\n   --visitor-email-limit-replenish value, --visitor_email_limit_replenish value                                           interval at which burst limit is replenished (one per x) (default: \"1h\") [$NTFY_VISITOR_EMAIL_LIMIT_REPLENISH]\n   --visitor-subscriber-rate-limiting, --visitor_subscriber_rate_limiting                                                 enables subscriber-based rate limiting (default: false) [$NTFY_VISITOR_SUBSCRIBER_RATE_LIMITING]\n   --behind-proxy, --behind_proxy, -P                                                                                     if set, use X-Forwarded-For header to determine visitor IP address (for rate limiting) (default: false) [$NTFY_BEHIND_PROXY]\n   --stripe-secret-key value, --stripe_secret_key value                                                                   key used for the Stripe API communication, this enables payments [$NTFY_STRIPE_SECRET_KEY]\n   --stripe-webhook-key value, --stripe_webhook_key value                                                                 key required to validate the authenticity of incoming webhooks from Stripe [$NTFY_STRIPE_WEBHOOK_KEY]\n   --billing-contact value, --billing_contact value                                                                       e-mail or website to display in upgrade dialog (only if payments are enabled) [$NTFY_BILLING_CONTACT]\n   --enable-metrics, --enable_metrics                                                                                     if set, Prometheus metrics are exposed via the /metrics endpoint (default: false) [$NTFY_ENABLE_METRICS]\n   --metrics-listen-http value, --metrics_listen_http value                                                               ip:port used to expose the metrics endpoint (implicitly enables metrics) [$NTFY_METRICS_LISTEN_HTTP]\n   --profile-listen-http value, --profile_listen_http value                                                               ip:port used to expose the profiling endpoints (implicitly enables profiling) [$NTFY_PROFILE_LISTEN_HTTP]\n   --web-push-public-key value, --web_push_public_key value                                                               public key used for web push notifications [$NTFY_WEB_PUSH_PUBLIC_KEY]\n   --web-push-private-key value, --web_push_private_key value                                                             private key used for web push notifications [$NTFY_WEB_PUSH_PRIVATE_KEY]\n   --web-push-file value, --web_push_file value                                                                           file used to store web push subscriptions [$NTFY_WEB_PUSH_FILE]\n   --web-push-email-address value, --web_push_email_address value                                                         e-mail address of sender, required to use browser push services [$NTFY_WEB_PUSH_EMAIL_ADDRESS]\n   --web-push-startup-queries value, --web_push_startup_queries value                                                     queries run when the web push database is initialized [$NTFY_WEB_PUSH_STARTUP_QUERIES]\n   --help, -h                                                                                                             show help\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using JavaScript\nDESCRIPTION: Uses JavaScript's fetch API to upload a file from a file input element as an attachment to a notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/flowers', {\n    method: 'PUT',\n    body: document.getElementById(\"file\").files[0],\n    headers: { 'Filename': 'flower.jpg' }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with JavaScript\nDESCRIPTION: JavaScript example using fetch API to send a notification with action buttons\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/myhome', {\n    method: 'POST',\n    body: 'You left the house. Turn down the A/C?',\n    headers: { \n        'Actions': 'view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body=\\'{\"temperature\": 65}\\'' \n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring nginx as a Reverse Proxy for ntfy (Secure Setup)\nDESCRIPTION: This nginx configuration provides a more secure setup for proxying traffic to a locally running ntfy instance. It enforces HTTPS for all requests and keeps nginx output buffering enabled. The setup includes both HTTP and HTTPS servers with SSL configuration.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_31\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/sites-*/ntfy\n#\n# This config requires the use of the -L flag in curl to redirect to HTTPS, and it keeps nginx output buffering\n# enabled. While recommended, I have had issues with that in the past.\n\nserver {\n  listen 80;\n  server_name ntfy.sh;\n\n  location / {\n    return 302 https://$http_host$request_uri$is_args$query_string;\n\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name ntfy.sh;\n\n  # See https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=intermediate&openssl=1.1.1k&hsts=false&ocsp=false&guideline=5.6\n  ssl_session_timeout 1d;\n  ssl_session_cache shared:MozSSL:10m; # about 40000 sessions\n  ssl_session_tickets off;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n\n  ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem;\n\n  location / {\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Raw Stream using Python\nDESCRIPTION: This Python code example shows how to subscribe to a ntfy topic's raw stream and print the received messages using the requests library.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresp = requests.get(\"https://ntfy.sh/disk-alerts/raw\", stream=True)\nfor line in resp.iter_lines():\n  if line:\n    print(line)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Basic Auth in curl\nDESCRIPTION: This snippet demonstrates how to use curl to send an authenticated POST request to ntfy using Basic Auth with an access token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_232\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -u :tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n  -d \"Look ma, with auth\" \\\n  https://ntfy.example.com/mysecrets\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Topics in ntfy using cURL\nDESCRIPTION: This snippet shows how to subscribe to multiple topics in a single HTTP call using ntfy. It demonstrates reducing the number of connections by providing a comma-separated list of topics in the URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s ntfy.sh/mytopic1,mytopic2/json\n{\"id\":\"0OkXIryH3H\",\"time\":1637182619,\"event\":\"open\",\"topic\":\"mytopic1,mytopic2,mytopic3\"}\n{\"id\":\"dzJJm7BCWs\",\"time\":1637182634,\"event\":\"message\",\"topic\":\"mytopic1\",\"message\":\"for topic 1\"}\n{\"id\":\"Cm02DsxUHb\",\"time\":1637182643,\"event\":\"message\",\"topic\":\"mytopic2\",\"message\":\"for topic 2\"}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via curl using JSON publishing\nDESCRIPTION: Example of using curl to send an ntfy notification with an HTTP action button through the JSON publishing method. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_158\n\nLANGUAGE: bash\nCODE:\n```\ncurl ntfy.sh \\\n  -d '{\n    \"topic\": \"myhome\",\n    \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n    \"actions\": [\n      {\n        \"action\": \"http\",\n        \"label\": \"Close door\",\n        \"url\": \"https://api.mygarage.lan/\",\n        \"method\": \"PUT\",\n        \"headers\": {\n            \"Authorization\": \"Bearer zAzsx1sk..\"\n        },\n        \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant REST Notify Component for ntfy\nDESCRIPTION: This YAML configuration sets up a REST notify component in Home Assistant to send notifications to ntfy. It includes the ntfy topic, title and message parameters, and the ntfy resource URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nnotify:\n  - name: ntfy\n    platform: rest\n    method: POST_JSON\n    data:\n      topic: YOUR_NTFY_TOPIC\n    title_param_name: title\n    message_param_name: message\n    resource: https://ntfy.sh\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using Python\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using Python's requests library with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nrequests.get(\"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\")\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of ntfy Templates\nDESCRIPTION: Example of using Go templates with Python's requests library to send notifications to ntfy. This demonstrates how to structure the request with template parameters and JSON payload.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\n    \"https://ntfy.sh/mytopic?tpl=yes&t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&m=Error+message:+{{.error.desc}}\",\n    data='{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring nginx as a Reverse Proxy for ntfy (Convenient Setup)\nDESCRIPTION: This nginx configuration proxies traffic to a locally running ntfy instance on port 2586. It allows insecure HTTP POST/PUT requests for easier curl usage and disables output buffering. The setup includes both HTTP and HTTPS servers with SSL configuration.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_30\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/sites-*/ntfy\n#\n# This config allows insecure HTTP POST/PUT requests against topics to allow a short curl syntax (without -L\n# and \"https://\" prefix). It also disables output buffering, which has worked well for the ntfy.sh server.\n#\n# This is pretty much how ntfy.sh is configured. To see the exact configuration,\n# see https://github.com/binwiederhier/ntfy-ansible/\n\nserver {\n  listen 80;\n  server_name ntfy.sh;\n\n  location / {\n    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want \n    # it to work with curl without the annoying https:// prefix\n    set $redirect_https \"\";\n    if ($request_method = GET) {\n      set $redirect_https \"yes\";\n    }\n    if ($request_uri ~* \"^/([-_a-z0-9]{0,64}$|docs/|static/)\") {\n      set $redirect_https \"${redirect_https}yes\";\n    }\n    if ($redirect_https = \"yesyes\") {\n      return 302 https://$http_host$request_uri$is_args$query_string;\n    }\n\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_buffering off;\n    proxy_request_buffering off;\n    proxy_redirect off;\n \n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n\n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name ntfy.sh;\n\n  # See https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=intermediate&openssl=1.1.1k&hsts=false&ocsp=false&guideline=5.6\n  ssl_session_timeout 1d;\n  ssl_session_cache shared:MozSSL:10m; # about 40000 sessions\n  ssl_session_tickets off;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n\n  ssl_certificate /etc/letsencrypt/live/ntfy.sh/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/ntfy.sh/privkey.pem;\n\n  location / {\n    proxy_pass http://127.0.0.1:2586;\n    proxy_http_version 1.1;\n\n    proxy_buffering off;\n    proxy_request_buffering off;\n    proxy_redirect off;\n \n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_connect_timeout 3m;\n    proxy_send_timeout 3m;\n    proxy_read_timeout 3m;\n    \n    client_max_body_size 0; # Stream request body to backend\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of ntfy Templates\nDESCRIPTION: Example of using Go templates with Go's HTTP client to send notifications to ntfy. This demonstrates how to construct the request with template parameters in the URI and JSON in the body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_90\n\nLANGUAGE: go\nCODE:\n```\nbody := `{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}`\nuri := \"https://ntfy.sh/mytopic?tpl=yes&t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&m=Error+message:+{{.error.desc}}\"\nreq, _ := http.NewRequest(\"POST\", uri, strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Message Receipt with ntfy CLI\nDESCRIPTION: Examples showing how to execute different commands when messages are received on a subscribed topic, including desktop notifications and custom scripts.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nntfy sub mytopic 'notify-send \"$m\"'\nntfy sub topic1 /my/script.sh\nntfy sub topic1 'echo \"Message $m was received. Its title was $t and it had priority $p'\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using Go\nDESCRIPTION: Go example demonstrating how to send a notification with tags. The example creates a new HTTP request and sets the Tags header before sending.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_44\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/backups\", strings.NewReader(\"Backup of mailsrv13 failed\"))\nreq.Header.Set(\"Tags\", \"warning,mailsrv13,daily-backup\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to JSON Stream using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to subscribe to a ntfy topic's JSON stream and print the received messages using file stream functions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$fp = fopen('https://ntfy.sh/disk-alerts/json', 'r');\nif (!$fp) die('cannot open stream');\nwhile (!feof($fp)) {\n    echo fgets($fp, 2048);\n    flush();\n}\nfclose($fp);\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using ntfy CLI\nDESCRIPTION: Example of sending a notification to a ntfy server using the ntfy CLI with Basic Authentication credentials.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    -u phil:mypass \\\n    ntfy.example.com/mysecrets \\\n    \"Look ma, with auth\"\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using JavaScript\nDESCRIPTION: Demonstrates how to set a custom message title for ntfy notifications using JavaScript and the Fetch API. The title is set in the headers object.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/controversial', {\n    method: 'POST',\n    body: 'Oh my ...',\n    headers: { 'Title': 'Dogs are better than cats' }\n})\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Messages with ntfy CLI\nDESCRIPTION: Example showing how to schedule a message to be delivered at a specific time using the --at parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nntfy pub --at=8:30am delayed_topic Laterzz\n```\n\n----------------------------------------\n\nTITLE: PowerShell Implementation of ntfy Templates\nDESCRIPTION: Example of using Go templates with PowerShell's Invoke-RestMethod to send notifications to ntfy. This demonstrates how to structure the request with template parameters and JSON payload.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_91\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n    Method = \"POST\"\n    URI = \"https://ntfy.sh/mytopic?tpl=yes&t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&m=Error+message:+{{.error.desc}}\"\n    Body = '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n    ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 as a Reverse Proxy for ntfy\nDESCRIPTION: This Apache2 configuration sets up a reverse proxy for ntfy running on localhost:2586. It includes both HTTP and HTTPS virtual hosts, with SSL configuration and selective redirection from HTTP to HTTPS for GET requests to topic addresses.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_32\n\nLANGUAGE: apache\nCODE:\n```\n# /etc/apache2/sites-*/ntfy.conf\n\n<VirtualHost *:80>\n    ServerName ntfy.sh\n\n    # Proxy connections to ntfy (requires \"a2enmod proxy proxy_http\")\n    ProxyPass / http://127.0.0.1:2586/ upgrade=websocket\n    ProxyPassReverse / http://127.0.0.1:2586/\n\n    SetEnv proxy-nokeepalive 1\n    SetEnv proxy-sendchunked 1\n\n    # Higher than the max message size of 4096 bytes\n    LimitRequestBody 102400\n    \n    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want \n    # it to work with curl without the annoying https:// prefix (requires \"a2enmod alias\")\n    <If \"%{REQUEST_METHOD} == 'GET'\">\n        RedirectMatch permanent \"^/([-_A-Za-z0-9]{0,64})$\" \"https://%{SERVER_NAME}/$1\"\n    </If>\n\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ntfy.sh\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/ntfy.sh/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/ntfy.sh/privkey.pem\n    Include /etc/letsencrypt/options-ssl-apache.conf\n\n    # Proxy connections to ntfy (requires \"a2enmod proxy proxy_http\")\n    ProxyPass / http://127.0.0.1:2586/ upgrade=websocket\n    ProxyPassReverse / http://127.0.0.1:2586/\n\n    SetEnv proxy-nokeepalive 1\n    SetEnv proxy-sendchunked 1\n\n    # Higher than the max message size of 4096 bytes \n    LimitRequestBody 102400\n\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to JSON Stream using Go\nDESCRIPTION: This Go code snippet demonstrates how to subscribe to a ntfy topic's JSON stream and print the received messages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresp, err := http.Get(\"https://ntfy.sh/disk-alerts/json\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer resp.Body.Close()\nscanner := bufio.NewScanner(resp.Body)\nfor scanner.Scan() {\n    println(scanner.Text())\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using JavaScript\nDESCRIPTION: JavaScript example using fetch API to send a notification with tags. The Tags header is set in the request options with comma-separated tag values.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/backups', {\n    method: 'POST',\n    body: 'Backup of mailsrv13 failed',\n    headers: { 'Tags': 'warning,mailsrv13,daily-backup' }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Raw Stream using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to subscribe to a ntfy topic's raw stream and print the received messages using file stream functions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$fp = fopen('https://ntfy.sh/disk-alerts/raw', 'r');\nif (!$fp) die('cannot open stream');\nwhile (!feof($fp)) {\n    echo fgets($fp, 2048);\n    flush();\n}\nfclose($fp);\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using PHP\nDESCRIPTION: PHP example using file_get_contents to send a notification to a ntfy server with Basic Authentication.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' => \n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Basic cGhpbDpteXBhc3M=',\n        'content' => 'Look ma, with auth'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with PowerShell\nDESCRIPTION: Example of scheduling a message delivery using PowerShell's Invoke-RestMethod with the At header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_61\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/hello\"\n  Headers = @{\n    At = \"tomorrow, 10am\"\n  }\n  Body = \"Good morning\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in ntfy CLI\nDESCRIPTION: This snippet shows how to use the ntfy CLI to publish an authenticated message using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_224\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n  --token tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n  ntfy.example.com/mysecrets \\\n  \"Look ma, with auth\"\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using JavaScript\nDESCRIPTION: Uses JavaScript's fetch API to send a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/reddit_alerts', {\n    method: 'POST',\n    body: 'New messages on Reddit',\n    headers: { 'Click': 'https://www.reddit.com/message/messages' }\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying ntfy on Kubernetes using StatefulSet\nDESCRIPTION: This Kubernetes StatefulSet manifest sets up ntfy with a persistent cache using a volume claim template.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: ntfy\nspec:\n  selector:\n    matchLabels:\n      app: ntfy\n  serviceName: ntfy\n  template:\n    metadata:\n      labels:\n        app: ntfy\n    spec:\n      containers:\n      - name: ntfy\n        image: binwiederhier/ntfy\n        args: [\"serve\", \"--cache-file\", \"/var/cache/ntfy/cache.db\"]\n        ports:\n        - containerPort: 80\n          name: http\n        volumeMounts:\n        - name: config\n          mountPath: \"/etc/ntfy\"\n          readOnly: true\n        - name: cache\n          mountPath: \"/var/cache/ntfy\"\n      volumes:\n        - name: config\n          configMap:\n            name: ntfy\n  volumeClaimTemplates:\n  - metadata:\n      name: cache\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with Python\nDESCRIPTION: Python example using requests library to send a notification with action buttons\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/myhome\",\n    data=\"You left the house. Turn down the A/C?\",\n    headers={ \"Actions\": \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\" })\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with JavaScript\nDESCRIPTION: JavaScript fetch API implementation with Basic authentication header for publishing to protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_217\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using Python\nDESCRIPTION: Python example using the requests library to send a notification to a ntfy server with Basic Authentication.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.example.com/mysecrets\",\n    data=\"Look ma, with auth\",\n    headers={\n        \"Authorization\": \"Basic cGhpbDpteXBhc3M=\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Publishing an Advanced Message with PHP\nDESCRIPTION: Sends an urgent notification with headers using PHP. Demonstrates how to set multiple custom headers for enhanced notification features in PHP.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/phil_alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Title: Unauthorized access detected\\r\\n\" .\n            \"Priority: urgent\\r\\n\" .\n            \"Tags: warning,skull\",\n        'content' => 'Remote access to phils-laptop detected. Act right away.'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Publishing a Complex Message with Go\nDESCRIPTION: Sends a multi-line notification with various features using Go. Shows how to implement all available notification features in Go applications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mydoorbell\",\n\tstrings.NewReader(`There's someone at the door. 🐶\n   \n    Please check if it's a good boy or a hooman. \n    Doggies have been known to ring the doorbell.`))\nreq.Header.Set(\"Click\", \"https://home.nest.com/\")\nreq.Header.Set(\"Attach\", \"https://nest.com/view/yAxkasd.jpg\")\nreq.Header.Set(\"Actions\", \"http, Open door, https://api.nest.com/open/yAxkasd, clear=true\")\nreq.Header.Set(\"Email\", \"phil@example.com\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Ansible Integration Examples\nDESCRIPTION: Examples of integrating ntfy notifications into Ansible tasks\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Send ntfy.sh update\n  uri:\n    url: \"https://ntfy.sh/{{ ntfy_channel }}\"\n    method: POST\n    body: \"{{ inventory_hostname }} reseeding complete\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Notify ntfy that we're done\"\n  ntfy:\n       msg: \"deployment on {{ inventory_hostname }} is complete. 🐄\"\n       attrs:\n          tags: [ heavy_check_mark ]\n          priority: 1\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in curl\nDESCRIPTION: This snippet demonstrates how to use curl to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_223\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\" \\\n  -d \"Look ma, with auth\" \\\n  https://ntfy.example.com/mysecrets\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via Go HTTP client using JSON publishing\nDESCRIPTION: Example of using Go's HTTP client to send a notification with an HTTP action button through JSON publishing. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_162\n\nLANGUAGE: go\nCODE:\n```\n// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"myhome\",\n    \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n    \"actions\": [\n      {\n        \"action\": \"http\",\n        \"label\": \"Close door\",\n        \"method\": \"PUT\",\n        \"url\": \"https://api.mygarage.lan/\",\n        \"headers\": {\n          \"Authorization\": \"Bearer zAzsx1sk..\"\n        },\n        \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Kustomize Definition for ntfy Deployment\nDESCRIPTION: Kustomization file that defines resources and configmaps for ntfy deployment in Kubernetes.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ntfy-deployment.yaml # deployment definition\n  - ntfy-svc.yaml # service connecting pods to cluster network\n  - ntfy-pvc.yaml # pvc used to store cache and attachment\n  - ntfy-ingress.yaml # ingress definition\nconfigMapGenerator: # will parse config from raw config to configmap,it allows for dynamic reload of application if additional app is deployed ie https://github.com/stakater/Reloader\n    - name: server-config\n      files: \n        - server.yml\nnamespace: TESTNAMESPACE # select namespace for whole application \n```\n\n----------------------------------------\n\nTITLE: Subscribing to JSON Stream using curl (Bash)\nDESCRIPTION: This snippet demonstrates how to subscribe to a ntfy topic's JSON stream using curl on the command line. It shows the format of the returned JSON messages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s ntfy.sh/disk-alerts/json\n{\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"}\n{\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"}\n{\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with Python\nDESCRIPTION: Example of scheduling a message delivery using Python's requests library with the At header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/hello\",\n    data=\"Good morning\",\n    headers={ \"At\": \"tomorrow, 10am\" })\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using HTTP\nDESCRIPTION: Illustrates how to set message priority for ntfy notifications using a raw HTTP request. The priority is set using the Priority header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nPOST /phil_alerts HTTP/1.1\nHost: ntfy.sh\nPriority: 5\n\nAn urgent message\n```\n\n----------------------------------------\n\nTITLE: Deploying ntfy Docker Container with Persistent Cache\nDESCRIPTION: This Docker command runs ntfy with a persistent cache, mapping a volume for cache storage and configuring the cache file location.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -v /var/cache/ntfy:/var/cache/ntfy \\\n  -p 80:80 \\\n  -it \\\n  binwiederhier/ntfy \\\n    serve \\\n    --cache-file /var/cache/ntfy/cache.db\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using curl\nDESCRIPTION: Example of sending a notification with Markdown formatting using curl. The Markdown header is set to 'yes' to enable formatting of the message content.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -d \"Look ma, **bold text**, *italics*, ...\" \\\n    -H \"Markdown: yes\" \\\n    ntfy.sh/mytopic\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with Python (X-Actions header)\nDESCRIPTION: Example of using Python requests to send a notification with a view action that opens a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_124\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/myhome\",\n    data=\"Somebody retweeted your tweet.\",\n    headers={ \"Actions\": \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" })\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via PowerShell using JSON publishing\nDESCRIPTION: Example of using PowerShell's Invoke-RestMethod to send a notification with an HTTP action button through JSON publishing. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_163\n\nLANGUAGE: powershell\nCODE:\n```\n# Powershell requires the 'Depth' argument to equal 3 here to expand 'headers', \n# otherwise it will read System.Collections.Hashtable in the returned JSON\n\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-Json -Depth 3 @{\n    Topic   = \"myhome\"\n    Message = \"Garage door has been open for 15 minutes. Close it?\"\n    Actions = @(\n      @{\n        Action  = \"http\"\n        Label   = \"Close door\"\n        URL     = \"https://api.mygarage.lan/\"\n        Method  = \"PUT\"\n        Headers = @{\n          Authorization = \"Bearer zAzsx1sk..\"\n        }\n        Body    = ConvertTo-JSON @{Action = \"close\"}\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Prometheus Scrape Configuration for ntfy Metrics\nDESCRIPTION: Prometheus configuration for scraping metrics from an ntfy server. This defines how Prometheus should collect performance and usage data from ntfy's metrics endpoint.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: \"ntfy\"\n    static_configs:\n      - targets: [\"10.0.1.1:9090\"]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in Go\nDESCRIPTION: This snippet shows how to use Go's http package to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_227\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\nstrings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration in YAML File\nDESCRIPTION: YAML configuration showing how to include authentication credentials in the ntfy client configuration file for accessing protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n - topic: secret\n   command: 'notify-send \"$m\"'\n   user: phill\n   password: mypass\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with JavaScript Fetch\nDESCRIPTION: Example of scheduling a message delivery using JavaScript's fetch API with the At header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/hello', {\n    method: 'POST',\n    body: 'Good morning',\n    headers: { 'At': 'tomorrow, 10am' }\n})\n```\n\n----------------------------------------\n\nTITLE: Backup Status Notification with rsync and ntfy\nDESCRIPTION: Script that performs a backup using rsync and sends success/failure notifications via ntfy\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrsync -a root@laptop /backups/laptop \\\n  && zfs snapshot ... \\\n  && curl -H prio:low -d \"Laptop backup succeeded\" ntfy.sh/backups \\\n  || curl -H tags:warning -H prio:high -d \"Laptop backup failed\" ntfy.sh/backups\n```\n\n----------------------------------------\n\nTITLE: Running ntfy Docker Container with Custom Configuration\nDESCRIPTION: This command demonstrates running ntfy with a custom configuration file, setting timezone, and using a non-root user.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -v /etc/ntfy:/etc/ntfy \\\n  -e TZ=UTC \\\n  -p 80:80 \\\n  -u UID:GID \\\n  -it \\\n  binwiederhier/ntfy \\\n  serve\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using HTTP POST\nDESCRIPTION: Raw HTTP request example showing how to enable Markdown formatting in a notification. The Markdown header is set to 'yes' to enable formatting.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_50\n\nLANGUAGE: http\nCODE:\n```\nPOST /mytopic HTTP/1.1\nHost: ntfy.sh\nMarkdown: yes\n\nLook ma, **bold text**, *italics*, ...\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions via HTTP POST\nDESCRIPTION: Direct HTTP POST request to ntfy.sh with JSON payload containing notification actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_112\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"myhome\",\n    \"message\": \"You left the house. Turn down the A/C?\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open portal\",\n        \"url\": \"https://home.nest.com/\",\n        \"clear\": true\n      },\n      {\n        \"action\": \"http\",\n        \"label\": \"Turn down\",\n        \"url\": \"https://api.nest.com/\",\n        \"body\": \"{\\\"temperature\\\": 65}\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with Go (JSON format)\nDESCRIPTION: Example of creating an HTTP request in Go with a JSON body to send a notification with a view action.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_130\n\nLANGUAGE: go\nCODE:\n```\n// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"myhome\",\n    \"message\": \"Somebody retweeted your tweet.\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open Twitter\",\n        \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Go\nDESCRIPTION: Go example for sending a notification using the standard http package. Creates a POST request with the message in the request body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttp.Post(\"https://ntfy.sh/mytopic\", \"text/plain\",\n   strings.NewReader(\"Backup successful 😀\"))\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with JavaScript Fetch API (JSON format)\nDESCRIPTION: Example of using the JavaScript Fetch API with JSON to send a notification with a view action.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"myhome\",\n        message\": \"Somebody retweeted your tweet.\",\n        actions: [\n            {\n                action: \"view\",\n                label: \"Open Twitter\",\n                url: \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n            }\n        ]\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with Go\nDESCRIPTION: Example of scheduling a message delivery using Go's HTTP client with the At header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_60\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/hello\", strings.NewReader(\"Good morning\"))\nreq.Header.Set(\"At\", \"tomorrow, 10am\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via Python requests using JSON publishing\nDESCRIPTION: Example of using Python's requests library to send a notification with an HTTP action button through JSON publishing. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"myhome\",\n        \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n        \"actions\": [\n            {\n              \"action\": \"http\",\n              \"label\": \"Close door\",\n              \"url\": \"https://api.mygarage.lan/\",\n              \"method\": \"PUT\",\n              \"headers\": {\n                \"Authorization\": \"Bearer zAzsx1sk..\"\n              },\n              \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n            }\n        ]\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Behind a Proxy\nDESCRIPTION: YAML configuration for running ntfy behind a reverse proxy, listening on port 2586 with caching and attachments enabled.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbase-url: \"http://ntfy.example.com\"\nlisten-http: \":2586\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Server for Incoming Email in ntfy (YAML)\nDESCRIPTION: YAML configuration for setting up an SMTP server to receive incoming emails for publishing messages to ntfy topics. This setup allows users to send emails to topic-specific addresses.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nsmtp-server-listen: \":25\"\nsmtp-server-domain: \"ntfy.sh\"\nsmtp-server-addr-prefix: \"ntfy-\"\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with ntfy CLI (JSON format)\nDESCRIPTION: Example of using the ntfy CLI tool with a JSON actions array to publish a notification with a 'view' action.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_127\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions '[{\n            \"action\": \"view\",\n            \"label\": \"Open Twitter\",\n            \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n        }]' \\\n    myhome \\\n    \"Somebody retweeted your tweet.\"\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with Go (X-Actions header)\nDESCRIPTION: Example of creating an HTTP request in Go to send a notification with a view action that opens a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_122\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/myhome\", strings.NewReader(\"Somebody retweeted your tweet.\"))\nreq.Header.Set(\"Actions\", \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Python\nDESCRIPTION: Python example using the requests library to send a notification. Encodes the message text as UTF-8 before sending.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/mytopic\",\n    data=\"Backup successful 😀\".encode(encoding='utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Example of a Minimal Notification Message in JSON\nDESCRIPTION: A simplified JSON-formatted notification message containing only the required fields (id, time, expires, event, topic) and a message body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"wze9zgqK41\",\n    \"time\": 1638542110,\n    \"expires\": 1638543112,\n    \"event\": \"message\",\n    \"topic\": \"phil_alerts\",\n    \"message\": \"Remote access to phils-laptop detected. Act right away.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in Python\nDESCRIPTION: This snippet demonstrates how to use the requests library in Python to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_230\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.example.com/mysecrets\",\ndata=\"Look ma, with auth\",\nheaders={\n    \"Authorization\": \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\"\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using curl\nDESCRIPTION: Uses curl to send a notification with a file attachment from an external URL. The Attach header specifies the remote file location.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_182\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -X POST \\\n    -H \"Attach: https://f-droid.org/F-Droid.apk\" \\\n    ntfy.sh/mydownloads\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via Python requests using Actions header\nDESCRIPTION: Example of using Python's requests library to send a notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_156\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/myhome\",\n    data=\"Garage door has been open for 15 minutes. Close it?\",\n    headers={ \"Actions\": \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" })\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Authentication and Attachments\nDESCRIPTION: Docker Compose YAML configuration with authentication, caching and file attachment support.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    restart: unless-stopped\n    environment:\n      NTFY_BASE_URL: http://ntfy.example.com\n      NTFY_CACHE_FILE: /var/lib/ntfy/cache.db\n      NTFY_AUTH_FILE: /var/lib/ntfy/auth.db\n      NTFY_AUTH_DEFAULT_ACCESS: deny-all\n      NTFY_BEHIND_PROXY: true\n      NTFY_ATTACHMENT_CACHE_DIR: /var/lib/ntfy/attachments\n      NTFY_ENABLE_LOGIN: true\n    volumes:\n      - ./:/var/lib/ntfy\n    ports:\n      - 80:80\n    command: serve\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with PHP\nDESCRIPTION: Example of scheduling a message delivery using PHP's file_get_contents with the At header in the stream context.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/backups', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"At: tomorrow, 10am\",\n        'content' => 'Good morning'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using Python\nDESCRIPTION: Uses Python's requests library to send a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_172\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/reddit_alerts\",\n    data=\"New messages on Reddit\",\n    headers={ \"Click\": \"https://www.reddit.com/message/messages\" })\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with curl (X-Actions header)\nDESCRIPTION: Example of sending a notification with a 'view' action using curl and the X-Actions header to open a Twitter link when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_118\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -d \"Somebody retweeted your tweet.\" \\\n    -H \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\\nntfy.sh/myhome\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with PHP\nDESCRIPTION: PHP example that uses file_get_contents with a stream context to send a POST request. Includes proper content type header for the text message.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' => 'Content-Type: text/plain',\n        'content' => 'Backup successful 😀'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via JavaScript Fetch API using JSON publishing\nDESCRIPTION: Example of using JavaScript's Fetch API to send a notification with an HTTP action button through JSON publishing. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"myhome\",\n        message\": \"Garage door has been open for 15 minutes. Close it?\",\n        actions: [\n          {\n            \"action\": \"http\",\n            \"label\": \"Close door\",\n            \"url\": \"https://api.mygarage.lan/\",\n            \"method\": \"PUT\",\n            \"headers\": {\n              \"Authorization\": \"Bearer zAzsx1sk..\"\n            },\n            \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n          }\n        ]\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with curl\nDESCRIPTION: Examples of how to schedule message delivery using curl with various time formats including natural language times, durations, and Unix timestamps.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"At: tomorrow, 10am\" -d \"Good morning\" ntfy.sh/hello\ncurl -H \"In: 30min\" -d \"It's 30 minutes later now\" ntfy.sh/reminder\ncurl -H \"Delay: 1639194738\" -d \"Unix timestamps are awesome\" ntfy.sh/itsaunixsystem\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via JavaScript Fetch API using Actions header\nDESCRIPTION: Example of using JavaScript's Fetch API to send a notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/myhome', {\n    method: 'POST',\n    body: 'Garage door has been open for 15 minutes. Close it?',\n    headers: { \n        'Actions': 'http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}' \n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Pictures with Node-RED and ntfy\nDESCRIPTION: This Node-RED flow demonstrates how to send a picture to ntfy.sh. It includes nodes for downloading an image, setting headers and payload, and sending the image using an HTTP PUT request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"d135a13eadeb9d6d\",\n        \"type\": \"http request\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"Download image\",\n        \"method\": \"GET\",\n        \"ret\": \"bin\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"credentials\":\n        {\n            \"user\": \"\",\n            \"password\": \"\"\n        },\n        \"x\": 490,\n        \"y\": 3320,\n        \"wires\":\n        [\n            [\n                \"6e75bc41d2ec4a03\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"6e75bc41d2ec4a03\",\n        \"type\": \"function\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"data\",\n        \"func\": \"msg.payload = msg.payload;\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant - Picture';\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 650,\n        \"y\": 3320,\n        \"wires\":\n        [\n            [\n                \"eb160615b6ceda98\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"eb160615b6ceda98\",\n        \"type\": \"http request\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"ntfy.sh\",\n        \"method\": \"PUT\",\n        \"ret\": \"bin\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://ntfy.sh/mytopic\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"credentials\":\n        {\n            \"user\": \"\",\n            \"password\": \"\"\n        },\n        \"x\": 770,\n        \"y\": 3320,\n        \"wires\":\n        [\n            []\n        ]\n    },\n    {\n        \"id\": \"5b8dbf15c8a7a3a5\",\n        \"type\": \"inject\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"Manual start\",\n        \"props\":\n        [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": \"20\",\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 310,\n        \"y\": 3320,\n        \"wires\":\n        [\n            [\n                \"d135a13eadeb9d6d\"\n            ]\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with ntfy CLI\nDESCRIPTION: Example of triggering a webhook using the ntfy command-line interface trigger command.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nntfy trigger mywebhook\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using JavaScript\nDESCRIPTION: Uses JavaScript's fetch API to send a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_185\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mydownloads', {\n    method: 'POST',\n    headers: { 'Attach': 'https://f-droid.org/F-Droid.apk' }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with Go\nDESCRIPTION: Go implementation for sending notification with JSON array actions using http.NewRequest.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_114\n\nLANGUAGE: go\nCODE:\n```\n// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"myhome\",\n    \"message\": \"You left the house. Turn down the A/C?\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open portal\",\n        \"url\": \"https://home.nest.com/\",\n        \"clear\": true\n      },\n      {\n        \"action\": \"http\",\n        \"label\": \"Turn down\",\n        \"url\": \"https://api.nest.com/\",\n        \"body\": \"{\\\"temperature\\\": 65}\"\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with JavaScript\nDESCRIPTION: Sends a notification using JavaScript's fetch API. This shows how to make POST requests to ntfy in web applications or Node.js environments.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mytopic', {\n  method: 'POST', // PUT works too\n  body: 'Backup successful 😀'\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JavaScript\nDESCRIPTION: Example of using JavaScript fetch API to send an Android broadcast intent. The action will be triggered when the user taps the button in the notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/wifey', {\n    method: 'POST',\n    body: 'Your wife requested you send a picture of yourself.',\n    headers: { \n        'Actions': 'broadcast, Take picture, extras.cmd=pic, extras.camera=front' \n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Messages by Priority and Tags in ntfy using cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to filter messages in ntfy based on priority and tags. It retrieves high priority messages with specific tags from the 'alerts' topic.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \"ntfy.sh/alerts/json?priority=high&tags=zfs-error\"\n{\"id\":\"0TIkJpBcxR\",\"time\":1640122627,\"event\":\"open\",\"topic\":\"alerts\"}\n{\"id\":\"X3Uzz9O1sM\",\"time\":1640122674,\"event\":\"message\",\"topic\":\"alerts\",\"priority\":4,\n  \"tags\":[\"error\", \"zfs-error\"], \"message\":\"ZFS pool corruption detected\"}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Node-RED and ntfy\nDESCRIPTION: This Node-RED flow demonstrates how to send a message to ntfy.sh using the HTTP request node. It includes a function node to set the payload and headers, and an inject node to manually trigger the flow.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"c956e688cc74ad8e\",\n        \"type\": \"http request\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"ntfy.sh\",\n        \"method\": \"POST\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://ntfy.sh/mytopic\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"credentials\":\n        {\n            \"user\": \"\",\n            \"password\": \"\"\n        },\n        \"x\": 590,\n        \"y\": 3160,\n        \"wires\":\n        [\n            []\n        ]\n    },\n    {\n        \"id\": \"32ee1eade51fae50\",\n        \"type\": \"function\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"data\",\n        \"func\": \"msg.payload = \\\"Something happened\\\";\\nmsg.headers = {};\\nmsg.headers['tags'] = 'house';\\nmsg.headers['X-Title'] = 'Home Assistant';\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 470,\n        \"y\": 3160,\n        \"wires\":\n        [\n            [\n                \"c956e688cc74ad8e\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b287e59cd2311815\",\n        \"type\": \"inject\",\n        \"z\": \"fabdd7a3.4045a\",\n        \"name\": \"Manual start\",\n        \"props\":\n        [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": \"20\",\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 330,\n        \"y\": 3160,\n        \"wires\":\n        [\n            [\n                \"32ee1eade51fae50\"\n            ]\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via direct HTTP request using JSON publishing\nDESCRIPTION: Example of making a direct HTTP POST request to the ntfy API with JSON payload containing an HTTP action button. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_160\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"myhome\",\n    \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n    \"actions\": [\n      {\n        \"action\": \"http\",\n        \"label\": \"Close door\",\n        \"url\": \"https://api.mygarage.lan/\",\n        \"method\": \"PUT\",\n        \"headers\": {\n          \"Authorization\": \"Bearer zAzsx1sk..\"\n        },\n        \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Apprise to ntfy\nDESCRIPTION: Examples of using Apprise CLI to send notifications to ntfy. Shows how to send to default ntfy.sh server with a topic, as well as how to specify a custom ntfy server.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\napprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\\n   ntfy://mytopic\n```\n\nLANGUAGE: bash\nCODE:\n```\napprise -vv -t \"Test Message Title\" -b \"Test Message Body\" \\\n   ntfy://ntfy.example.com/mytopic\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using HTTP POST\nDESCRIPTION: Raw HTTP request example showing how to set tags in the HTTP header when sending a notification to ntfy. The Tags header contains comma-separated values.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nPOST /backups HTTP/1.1\nHost: ntfy.sh\nTags: warning,mailsrv13,daily-backup\n\nBackup of mailsrv13 failed\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using ntfy CLI\nDESCRIPTION: Uses the ntfy CLI to publish a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_183\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --attach=\"https://f-droid.org/F-Droid.apk\" \\\n    mydownloads\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with HTTP POST\nDESCRIPTION: Raw HTTP POST request example for sending a notification with action buttons\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_104\n\nLANGUAGE: http\nCODE:\n```\nPOST /myhome HTTP/1.1\nHost: ntfy.sh\nActions: view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\"temperature\": 65}'\n\nYou left the house. Turn down the A/C?\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with PowerShell\nDESCRIPTION: Sends a notification using PowerShell's Invoke-RestMethod cmdlet. This is useful for sending notifications from Windows scripts and automation tasks.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Body = \"Backup successful\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using Go\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using Go's HTTP client with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_76\n\nLANGUAGE: go\nCODE:\n```\nhttp.Get(\"https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\")\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using JavaScript\nDESCRIPTION: This snippet shows how to send an email notification using JavaScript's fetch API. It includes headers for the email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_201\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/alerts', {\n    method: 'POST',\n    body: \"Unknown login from 5.31.23.83 to backups.example.com\",\n    headers: { \n        'Email': 'phil@example.com',\n        'Tags': 'warning,skull,backup-host,ssh-login',\n        'Priority': 'high'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with HTTP\nDESCRIPTION: Raw HTTP POST request with Basic authentication header for accessing protected topics on a ntfy server.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_216\n\nLANGUAGE: http\nCODE:\n```\nPOST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\n\nLook ma, with auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyseerr/Overseerr Webhook for ntfy\nDESCRIPTION: This JSON payload example demonstrates how to set up a webhook for Jellyseerr/Overseerr to send notifications to ntfy. It includes various fields such as topic, title, message, priority, and click URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"requests\",\n    \"title\": \"{{event}}\",\n    \"message\": \"{{subject}}\\n{{message}}\\n\\nRequested by: {{requestedBy_username}}\\n\\nStatus: {{media_status}}\\nRequest Id: {{request_id}}\",\n    \"priority\": 4,\n    \"attach\": \"{{image}}\",\n    \"click\": \"https://requests.example.com/{{media_type}}/{{media_tmdbid}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Full Attachment Configuration with Limits\nDESCRIPTION: Complete YAML configuration for ntfy's attachment feature with all available options including size limits and expiry.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbase-url: \"https://ntfy.sh\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\nattachment-total-size-limit: \"5G\"\nattachment-file-size-limit: \"15M\"\nattachment-expiry-duration: \"3h\"\nvisitor-attachment-total-size-limit: \"100M\"\nvisitor-attachment-daily-bandwidth-limit: \"500M\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with Go\nDESCRIPTION: Go example for sending a notification with action buttons using http.NewRequest\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_106\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/myhome\", strings.NewReader(\"You left the house. Turn down the A/C?\"))\nreq.Header.Set(\"Actions\", \"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with curl\nDESCRIPTION: Example of sending a notification with action buttons using curl command line tool\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_102\n\nLANGUAGE: bash\nCODE:\n```\nbody='{\"temperature\": 65}'\ncurl \\\n    -d \"You left the house. Turn down the A/C?\" \\\n    -H \"Actions: view, Open portal, https://home.nest.com/, clear=true; \\\n                 http, Turn down, https://api.nest.com/, body='$body'\" \\\n    ntfy.sh/myhome\n```\n\n----------------------------------------\n\nTITLE: Publishing a Basic Message with PHP\nDESCRIPTION: Sends a notification using PHP's file_get_contents function with a stream context. This demonstrates how to send notifications from PHP applications or scripts.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' => 'Content-Type: text/plain',\n        'content' => 'Backup successful 😀'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring ntfy Client with YAML Configuration\nDESCRIPTION: A YAML configuration example for the ntfy client, showing how to set the default host URL when self-hosting a ntfy server.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Base URL used to expand short topic names in the \"ntfy publish\" and \"ntfy subscribe\" commands.\n# If you self-host a ntfy server, you'll likely want to change this.\n#\ndefault-host: https://ntfy.myhost.com\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to ntfy using PowerShell\nDESCRIPTION: This PowerShell snippet shows how to publish a JSON-formatted message to an ntfy topic using Invoke-RestMethod. It demonstrates how to structure the message object and convert it to JSON.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_98\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-JSON @{\n    Topic    = \"mytopic\"\n    Title    = \"Low disk space alert\"\n    Message  = \"Disk space is low at 5.1 GB\"\n    Priority = 4\n    Attach   = \"https://filesrv.lan/space.jpg\"\n    FileName = \"diskspace.jpg\"\n    Tags     = @(\"warning\", \"cd\")\n    Click    = \"https://homecamera.lan/xasds1h2xsSsa/\"\n    Actions  = @(\n      @{ \n        Action = \"view\"\n        Label  = \"Admin panel\"\n        URL    = \"https://filesrv.lan/admin\"\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using Go\nDESCRIPTION: This snippet demonstrates how to send an email notification using Go's http package. It sets headers for the email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_202\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/alerts\", \n    strings.NewReader(\"Unknown login from 5.31.23.83 to backups.example.com\"))\nreq.Header.Set(\"Email\", \"phil@example.com\")\nreq.Header.Set(\"Tags\", \"warning,skull,backup-host,ssh-login\")\nreq.Header.Set(\"Priority\", \"high\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in HTTP\nDESCRIPTION: This snippet illustrates the HTTP request format for sending an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_225\n\nLANGUAGE: http\nCODE:\n```\nPOST /mysecrets HTTP/1.1\nHost: ntfy.example.com\nAuthorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\n\nLook ma, with auth\n```\n\n----------------------------------------\n\nTITLE: Creating Admin User for Private Instance\nDESCRIPTION: Example of creating an admin user with password authentication for a private ntfy instance using the ntfy user add command.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy user add --role=admin phil\npassword: mypass\nconfirm: mypass\nuser phil added with role admin \n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using cURL\nDESCRIPTION: Demonstrates how to set message priority for ntfy notifications using cURL. The priority is set using the X-Priority, Priority, prio, or p header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-Priority: 5\" -d \"An urgent message\" ntfy.sh/phil_alerts\ncurl -H \"Priority: low\" -d \"Low priority message\" ntfy.sh/phil_alerts\ncurl -H p:4 -d \"A high priority message\" ntfy.sh/phil_alerts\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with PHP\nDESCRIPTION: PHP example using file_get_contents to send a notification with action buttons\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_109\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Actions: view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\",\n        'content' => 'You left the house. Turn down the A/C?'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using PowerShell\nDESCRIPTION: This snippet shows how to send a notification with a custom icon using PowerShell's Invoke-RestMethod. It sets headers for the title, tags, and icon URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_195\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/tvshows\"\n  Headers = @{\n    Title = \"Kodi: Resuming Playback\"\n    Tags = \"arrow_forward\"\n    Icon = \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\"\n  }\n  Body = \"The Wire, S01E01\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using Go\nDESCRIPTION: Shows how to set a custom message title for ntfy notifications using Go's http package. The title is set using the Header.Set method.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/controversial\", strings.NewReader(\"Oh my ...\"))\nreq.Header.Set(\"Title\", \"Dogs are better than cats\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in Go\nDESCRIPTION: This snippet shows how to use Go's http package to send an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_236\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\",\n    strings.NewReader(\"Look ma, with auth\"))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using PHP\nDESCRIPTION: This snippet shows how to send an email notification using PHP's file_get_contents function. It sets headers for the content type, email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_205\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Email: phil@example.com\\r\\n\" .\n            \"Tags: warning,skull,backup-host,ssh-login\\r\\n\" .\n            \"Priority: high\",\n        'content' => 'Unknown login from 5.31.23.83 to backups.example.com'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using PHP\nDESCRIPTION: PHP example demonstrating how to send a notification with tags using file_get_contents with a stream context. The Tags header is included in the HTTP context.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/backups', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Tags: warning,mailsrv13,daily-backup\",\n        'content' => 'Backup of mailsrv13 failed'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Access Tokens Example\nDESCRIPTION: Example of creating an access token with an expiration date and label, then listing tokens to view details including expiration and last access.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy token add --expires=30d --label=\"backups\" phil\n$ ntfy token list\nuser phil\n- tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 (backups), expires 15 Mar 23 14:33 EDT, accessed from 0.0.0.0 at 13 Feb 23 13:33 EST\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using PowerShell\nDESCRIPTION: Illustrates how to set message priority for ntfy notifications using PowerShell's Invoke-RestMethod. The priority is set in the Headers hashtable.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_37\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = 'POST'\n  URI = \"https://ntfy.sh/phil_alerts\"\n  Headers = @{\n    Priority = \"5\"\n  }\n  Body = \"An urgent message\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via PowerShell using Actions header\nDESCRIPTION: Example of using PowerShell's Invoke-RestMethod to send a notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_155\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/myhome\"\n  Headers = @{\n    Actions=\"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\"\n  }\n  Body = \"Garage door has been open for 15 minutes. Close it?\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification via HTTP POST\nDESCRIPTION: Raw HTTP POST request format for sending a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_168\n\nLANGUAGE: http\nCODE:\n```\nPOST /reddit_alerts HTTP/1.1\nHost: ntfy.sh\nClick: https://www.reddit.com/message/messages \n\nNew messages on Reddit\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using Go\nDESCRIPTION: Shows how to set message priority for ntfy notifications using Go's http package. The priority is set using the Header.Set method.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/phil_alerts\", strings.NewReader(\"An urgent message\"))\nreq.Header.Set(\"Priority\", \"5\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using Python\nDESCRIPTION: Uses Python's requests library to send a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_188\n\nLANGUAGE: python\nCODE:\n```\nrequests.put(\"https://ntfy.sh/mydownloads\",\n    headers={ \"Attach\": \"https://f-droid.org/F-Droid.apk\" })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Raw Stream using HTTP GET Request\nDESCRIPTION: This snippet illustrates the HTTP request and response format for subscribing to a ntfy topic's raw stream.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /disk-alerts/raw HTTP/1.1\nHost: ntfy.sh\n\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nTransfer-Encoding: chunked\n\nDisk full\n...\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using HTTP POST\nDESCRIPTION: This snippet demonstrates how to send a notification with a custom icon using an HTTP POST request. It includes headers for the icon URL, tags, and title.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_192\n\nLANGUAGE: http\nCODE:\n```\nPOST /tvshows HTTP/1.1\nHost: ntfy.sh\nIcon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\nTags: arrow_forward\nTitle: Kodi: Resuming Playback\n\nThe Wire, S01E01\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using ntfy CLI\nDESCRIPTION: Example of using the ntfy CLI to publish a notification with Markdown formatting. The --markdown flag enables formatting of the message content.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --markdown \\\n    mytopic \\\n    \"Look ma, **bold text**, *italics*, ...\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration for ntfy\nDESCRIPTION: Deployment specification for ntfy in Kubernetes with resource limits, volume mounts, and environment configuration.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ntfy-deployment\n  labels:\n    app: ntfy-deployment\nspec:\n  revisionHistoryLimit: 1\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ntfy-pod\n  template:\n    metadata:\n      labels:\n        app: ntfy-pod\n    spec:\n      containers:\n        - name: ntfy \n          image: binwiederhier/ntfy:v1.28.0 # set deployed version\n          args: [\"serve\"]\n          env:  #example of adjustments made in environmental variables\n            - name: TZ # set timezone\n              value: XXXXXXX\n            - name: NTFY_DEBUG # enable/disable debug\n              value: \"false\"\n            - name: NTFY_LOG_LEVEL # adjust log level\n              value: INFO\n            - name: NTFY_BASE_URL # add base url\n              value: XXXXXXXXXX \n          ports: \n            - containerPort: 80\n              name: http-ntfy\n          resources:\n            limits:\n              memory: 300Mi\n              cpu:  200m\n            requests:\n                  cpu: 150m\n                  memory: 150Mi\n          volumeMounts:\n              - mountPath: /etc/ntfy/server.yml\n                subPath: server.yml\n                name: config-volume # generated vie configMapGenerator from kustomization file\n              - mountPath: /var/cache/ntfy\n                name: cache-volume #cache volume mounted to persistent volume\n        volumes:\n          - name: config-volume\n            configMap:  # uses configmap generator to parse server.yml to configmap\n              name: server-config\n          - name: cache-volume\n            persistentVolumeClaim: # stores /cache/ntfy in defined pv\n              claimName: ntfy-pvc\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using Python\nDESCRIPTION: Demonstrates how to set message priority for ntfy notifications using Python's requests library. The priority is set in the headers dictionary.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/phil_alerts\",\n    data=\"An urgent message\",\n    headers={ \"Priority\": \"5\" })\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via PHP using JSON publishing\nDESCRIPTION: Example of using PHP's file_get_contents with stream_context_create to send a notification with an HTTP action button through JSON publishing. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_165\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => \"Content-Type: application/json\",\n        'content' => json_encode([\n            \"topic\": \"myhome\",\n            \"message\": \"Garage door has been open for 15 minutes. Close it?\",\n            \"actions\": [\n                [\n                    \"action\": \"http\",\n                    \"label\": \"Close door\",\n                    \"url\": \"https://api.mygarage.lan/\",\n                    \"method\": \"PUT\",\n                    \"headers\": [\n                        \"Authorization\": \"Bearer zAzsx1sk..\"\n                     ],\n                    \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n                ]\n            ]\n        ])\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using PHP\nDESCRIPTION: Uses PHP's file_get_contents with stream context to send a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_173\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Click: https://www.reddit.com/message/messages\",\n        'content' => 'New messages on Reddit'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using PHP\nDESCRIPTION: Shows how to set message priority for ntfy notifications using PHP's file_get_contents function. The priority is set in the header string.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/phil_alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Priority: 5\",\n        'content' => 'An urgent message'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using PowerShell\nDESCRIPTION: Uses PowerShell's Invoke-RestMethod to send a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_187\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mydownloads\"\n  Headers = @{ Attach=\"https://f-droid.org/F-Droid.apk\" }\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using ntfy CLI\nDESCRIPTION: This snippet shows how to send a notification with a custom icon using the ntfy CLI. It includes parameters for the icon URL, title, and tags.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_191\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --icon=\"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\\n    --title=\"Kodi: Resuming Playback\" \\\n    --tags=\"arrow_forward\" \\\n    tvshows \\\n    \"The Wire, S01E01\"\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using JavaScript\nDESCRIPTION: JavaScript example using fetch API to send a notification with Markdown formatting. The Markdown header is set to 'yes' in the request options.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mytopic', {\n  method: 'POST', // PUT works too\n  body: 'Look ma, **bold text**, *italics*, ...',\n  headers: { 'Markdown': 'yes' }\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying ntfy on Kubernetes using Deployment\nDESCRIPTION: This Kubernetes Deployment manifest sets up ntfy without a persistent cache, including a basic Service for port 80.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ntfy\nspec:\n  selector:\n    matchLabels:\n      app: ntfy\n  template:\n    metadata:\n      labels:\n        app: ntfy\n    spec:\n      containers:\n      - name: ntfy\n        image: binwiederhier/ntfy\n        args: [\"serve\"]\n        resources:\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        ports:\n        - containerPort: 80\n          name: http\n        volumeMounts:\n        - name: config\n          mountPath: \"/etc/ntfy\"\n          readOnly: true\n      volumes:\n        - name: config\n          configMap:\n            name: ntfy\n---\n# Basic service for port 80\napiVersion: v1\nkind: Service\nmetadata:\n  name: ntfy\nspec:\n  selector:\n    app: ntfy\n  ports:\n  - port: 80\n    targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using CLI\nDESCRIPTION: Shows how to set message priority for ntfy notifications using the ntfy CLI tool. The priority is set using the -p option.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\ \n    -p 5 \\\n    phil_alerts An urgent message\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in Python\nDESCRIPTION: This snippet shows how to use the requests library in Python to send an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_238\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\",\ndata=\"Look ma, with auth\"\n\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using PHP\nDESCRIPTION: PHP example demonstrating how to send a notification with Markdown formatting by setting the Content-Type header to text/markdown in the HTTP context.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' => 'Content-Type: text/markdown', // !\n        'content' => 'Look ma, **bold text**, *italics*, ...'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using curl\nDESCRIPTION: Examples of sending notifications with tags using curl. Tags can be emojis or regular categorization strings that are set with the X-Tags header (or aliases: Tags, tag, ta).\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-Tags: warning,mailsrv13,daily-backup\" -d \"Backup of mailsrv13 failed\" ntfy.sh/backups\ncurl -H \"Tags: horse,unicorn\" -d \"Unicorns are just horses with unique horns\" ntfy.sh/backups\ncurl -H ta:dog -d \"Dogs are awesome\" ntfy.sh/backups\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via ntfy CLI using JSON publishing\nDESCRIPTION: Example of using the ntfy CLI to send a notification with an HTTP action button through the JSON publishing method. The action triggers a PUT request to close a garage door when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_159\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions '[\n        {\n          \"action\": \"http\",\n          \"label\": \"Close door\",\n          \"url\": \"https://api.mygarage.lan/\",\n          \"method\": \"PUT\",\n          \"headers\": {\n            \"Authorization\": \"Bearer zAzsx1sk..\"\n          },\n          \"body\": \"{\\\"action\\\": \\\"close\\\"}\"\n        }\n    ]' \\\n    myhome \\\n    \"Garage door has been open for 15 minutes. Close it?\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with Go\nDESCRIPTION: Go implementation with Basic authentication header for publishing to protected topics on a ntfy server.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_218\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.example.com/mysecrets\",\nstrings.NewReader(\"Look ma, with auth\"))\nreq.Header.Set(\"Authorization\", \"Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using Go\nDESCRIPTION: This snippet demonstrates how to send a notification with a custom icon using Go's http package. It sets headers for the icon URL, tags, and title.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_194\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/tvshows\", strings.NewReader(\"The Wire, S01E01\"))\nreq.Header.Set(\"Icon\", \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\")\nreq.Header.Set(\"Tags\", \"arrow_forward\")\nreq.Header.Set(\"Title\", \"Kodi: Resuming Playback\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using PowerShell\nDESCRIPTION: PowerShell example showing how to send a notification with Markdown formatting using Invoke-RestMethod. The Markdown header is set to 'yes' in the Headers dictionary.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_53\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Body = \"Look ma, **bold text**, *italics*, ...\"\n  Headers = @{\n    Markdown = \"yes\"\n  }\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for Outgoing Email in ntfy (YAML)\nDESCRIPTION: YAML configuration for setting up SMTP server details to enable sending email notifications from ntfy. This example uses Amazon SES as the SMTP provider.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nbase-url: \"https://ntfy.sh\"\nsmtp-sender-addr: \"email-smtp.us-east-2.amazonaws.com:587\"\nsmtp-sender-user: \"AKIDEADBEEFAFFE12345\"\nsmtp-sender-pass: \"Abd13Kf+sfAk2DzifjafldkThisIsNotARealKeyOMG.\"\nsmtp-sender-from: \"ntfy@ntfy.sh\"\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using PowerShell\nDESCRIPTION: PowerShell example showing how to send a notification with tags using Invoke-RestMethod. The Tags header is specified in the Headers dictionary.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_45\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/backups\"\n  Headers = @{\n    Tags = \"warning,mailsrv13,daily-backup\"\n  }\n  Body = \"Backup of mailsrv13 failed\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in HTTP\nDESCRIPTION: This snippet illustrates the HTTP request format for sending an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_234\n\nLANGUAGE: http\nCODE:\n```\nPOST /mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw HTTP/1.1\nHost: ntfy.example.com\n\nLook ma, with auth\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with Python\nDESCRIPTION: Python implementation using the requests library to send voice call notifications. Configures the Authorization and Call headers.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_212\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/alerts\",\n    data=\"Your garage seems to be on fire. You should probably check that out.\",\n    headers={ \n        \"Authorization\": \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\",\n        \"Call\": \"+12223334444\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Tags using Python\nDESCRIPTION: Python example using the requests library to send a notification with tags. The Tags header is passed in the headers dictionary of the post method.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/backups\",\n    data=\"Backup of mailsrv13 failed\",\n    headers={ \"Tags\": \"warning,mailsrv13,daily-backup\" })\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via direct HTTP request using Actions header\nDESCRIPTION: Example of making a direct HTTP POST request to the ntfy API with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the Actions header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_152\n\nLANGUAGE: http\nCODE:\n```\nPOST /myhome HTTP/1.1\nHost: ntfy.sh\nActions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\"action\": \"close\"}\n\nGarage door has been open for 15 minutes. Close it?\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using ntfy CLI\nDESCRIPTION: Uses the ntfy CLI to publish a notification with a local file attachment. The file is uploaded from the local file system.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_175\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --file=flower.jpg \\\n    flowers\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with ntfy CLI\nDESCRIPTION: Example of scheduling a message delivery using the ntfy command-line interface with the --at parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --at=\"tomorrow, 10am\" \\\n    hello \"Good morning\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up UnifiedPush Explicit Topic Access Control\nDESCRIPTION: Example of allowing anonymous write access to a specific UnifiedPush topic using the ntfy access command.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy access '*' upYzMtZGZiYTY5 write-only\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using Python\nDESCRIPTION: Python example using the requests library to send a notification with Markdown formatting. The Markdown header is set to 'yes' in the headers dictionary.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/mytopic\", \n    data=\"Look ma, **bold text**, *italics*, ...\"\n    headers={ \"Markdown\": \"yes\" }))\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in PHP\nDESCRIPTION: This snippet shows how to use PHP's file_get_contents function to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_231\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' =>\n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2',\n        'content' => 'Look ma, with auth'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the fetch API in JavaScript to send an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_235\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth'\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Markdown Formatted Notifications using Go\nDESCRIPTION: Go examples demonstrating two ways to send a notification with Markdown formatting: using text/markdown content type or setting the Markdown header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_52\n\nLANGUAGE: go\nCODE:\n```\nhttp.Post(\"https://ntfy.sh/mytopic\", \"text/markdown\",\n    strings.NewReader(\"Look ma, **bold text**, *italics*, ...\"))\n\n// or\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mytopic\", \n    strings.NewReader(\"Look ma, **bold text**, *italics*, ...\"))\nreq.Header.Set(\"Markdown\", \"yes\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with curl (JSON format)\nDESCRIPTION: Example of sending a notification with a 'view' action using curl and the JSON publishing format to open a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_126\n\nLANGUAGE: bash\nCODE:\n```\ncurl ntfy.sh \\\n  -d '{\n    \"topic\": \"myhome\",\n    \"message\": \"Somebody retweeted your tweet.\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open Twitter\",\n        \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with PowerShell 7+\nDESCRIPTION: PowerShell 7+ implementation using the Credential parameter for Basic authentication to publish to protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_219\n\nLANGUAGE: powershell\nCODE:\n```\n# Get the credentials from the user\n$Credential = Get-Credential testuser\n\n# Alternatively, create a PSCredential object with the password from scratch\n$Credential = [PSCredential]::new(\"testuser\", (ConvertTo-SecureString \"password\" -AsPlainText -Force))\n\n# Note that the Authentication parameter requires PowerShell 7 or later\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Authentication = \"Basic\"\n  Credential = $Credential\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with curl\nDESCRIPTION: Example of triggering a webhook via GET request using curl, which sends a simple notification to a topic.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl ntfy.sh/mywebhook/trigger\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using PowerShell\nDESCRIPTION: Uses PowerShell's Invoke-RestMethod with the InFile parameter to upload a local file as an attachment to a notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_179\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  Uri = \"ntfy.sh/flowers\"\n  InFile = \"flower.jpg\"\n  Headers = @{\"Filename\" = \"flower.jpg\"}\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Configuring Traccar with Bearer Token Authorization for ntfy\nDESCRIPTION: XML configuration showing how to provide authorization via a bearer token when Traccar connects to ntfy. Used when the target ntfy topic requires authentication for write access.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n        <entry key='sms.http.authorization'>Bearer tk_JhbsnoMrgy2FcfHeofv97Pi5uXaZZ</entry>\n```\n\n----------------------------------------\n\nTITLE: Running ntfy Docker Container with Basic Configuration\nDESCRIPTION: This command runs the ntfy Docker container with default settings, exposing port 80 for the web UI and API.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 80:80 -it binwiederhier/ntfy serve\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with curl (Command Line)\nDESCRIPTION: Authenticates to the ntfy server using Basic auth with username and password. Used to publish to protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_214\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -u testuser:fakepassword \\\n  -d \"Look ma, with auth\" \\\n  https://ntfy.example.com/mysecrets\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with JavaScript Fetch\nDESCRIPTION: Example of triggering a webhook using JavaScript's fetch API with a GET request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mywebhook/trigger')\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using curl\nDESCRIPTION: Example of sending a notification to a ntfy server using curl with Basic Authentication credentials.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -u phil:mypass \\\n    -d \"Look ma, with auth\" \\\n    https://ntfy.example.com/mysecrets\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with HTTP Request (X-Actions header)\nDESCRIPTION: Example of an HTTP POST request with the Actions header to create a notification with a view action button.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_120\n\nLANGUAGE: http\nCODE:\n```\nPOST /myhome HTTP/1.1\nHost: ntfy.sh\nActions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\n\nSomebody retweeted your tweet.\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with Python\nDESCRIPTION: Example of triggering a webhook using Python's requests library with a GET request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nrequests.get(\"https://ntfy.sh/mywebhook/trigger\")\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using Python\nDESCRIPTION: Uses Python's requests library to upload a local file as an attachment to a notification by opening the file in binary mode.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_180\n\nLANGUAGE: python\nCODE:\n```\nrequests.put(\"https://ntfy.sh/flowers\",\n    data=open(\"flower.jpg\", 'rb'),\n    headers={ \"Filename\": \"flower.jpg\" })\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example for ntfy Server\nDESCRIPTION: Example of ntfy server configuration in YAML format, showing that both dash notation and underscore notation are supported in the server.yml file.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nlisten-http: :80\n# OR\ncache_duration: 12h\n```\n\n----------------------------------------\n\nTITLE: Minimal Attachment Configuration\nDESCRIPTION: A minimal YAML configuration for enabling file attachments in ntfy.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbase-url: \"https://ntfy.sh\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with PHP\nDESCRIPTION: PHP implementation using file_get_contents with a stream context that includes Basic authentication header for protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_222\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.example.com/mysecrets', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' =>\n            'Content-Type: text/plain\\r\\n' .\n            'Authorization: Basic dGVzdHVzZXI6ZmFrZXBhc3N3b3Jk',\n        'content' => 'Look ma, with auth'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with Go\nDESCRIPTION: Example of triggering a webhook using Go's HTTP client with a GET request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_68\n\nLANGUAGE: go\nCODE:\n```\nhttp.Get(\"https://ntfy.sh/mywebhook/trigger\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Traccar to Use ntfy as SMS Provider\nDESCRIPTION: XML configuration for Traccar to use ntfy as an SMS provider. This setup sends messages to ntfy topics specified as phone numbers in Traccar. JSON publishing is configured to work with the ntfy API.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n        <entry key='sms.http.url'>https://ntfy.sh</entry>\n        <entry key='sms.http.template'>\n            {\n                \"topic\": \"{phone}\",\n                \"message\": \"{message}\"\n            }\n        </entry>\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with ntfy CLI (X-Actions header)\nDESCRIPTION: Example of using the ntfy CLI tool to publish a notification with a 'view' action that opens a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_119\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions=\"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\" \\\n    myhome \\\n    \"Somebody retweeted your tweet.\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of ntfy Templates\nDESCRIPTION: Example of using Go templates with the JavaScript fetch API to send notifications to ntfy. This demonstrates how to structure the request with template parameters and JSON payload.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mytopic?tpl=yes&t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&m=Error+message:+{{.error.desc}}', {\n    method: 'POST',\n    body: '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}'\n})\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via Go HTTP client using Actions header\nDESCRIPTION: Example of using Go's HTTP client to send a notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_154\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/myhome\", strings.NewReader(\"Garage door has been open for 15 minutes. Close it?\"))\nreq.Header.Set(\"Actions\", \"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification via HTTP POST\nDESCRIPTION: Raw HTTP POST request format for sending a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_184\n\nLANGUAGE: http\nCODE:\n```\nPOST /mydownloads HTTP/1.1\nHost: ntfy.sh\nAttach: https://f-droid.org/F-Droid.apk\n```\n\n----------------------------------------\n\nTITLE: Configuring ntfy for Behind-Proxy Operation (YAML)\nDESCRIPTION: YAML configuration to enable ntfy to run behind a proxy. This setting is crucial for proper rate limiting when ntfy is not directly exposed to the internet.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# Tell ntfy to use \"X-Forwarded-For\" to identify visitors\nbehind-proxy: true\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using PowerShell\nDESCRIPTION: Illustrates how to set a custom message title for ntfy notifications using PowerShell's Invoke-RestMethod. The title is set in the Headers hashtable.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/controversial\"\n  Headers = @{\n    Title = \"Dogs are better than cats\"\n  }\n  Body = \"Oh my ...\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using ntfy CLI\nDESCRIPTION: This snippet shows how to send an email notification using the ntfy CLI. It includes parameters for the email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_199\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --email=phil@example.com \\\n    --tags=warning,skull,backup-host,ssh-login \\\n    --priority=high \\\n    alerts \"Unknown login from 5.31.23.83 to backups.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using curl\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using curl with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Traccar with Basic Authentication for ntfy\nDESCRIPTION: XML configuration showing how to provide username and password for basic authentication when Traccar connects to ntfy. Alternative to bearer token authorization.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n        <entry key='sms.http.user'>phil</entry>\n        <entry key='sms.http.password'>mypass</entry>\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with ntfy CLI\nDESCRIPTION: Using the ntfy CLI tool to publish a notification with JSON array actions. Demonstrates setting view and HTTP actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_111\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions '[\n        {\n            \"action\": \"view\",\n            \"label\": \"Open portal\",\n            \"url\": \"https://home.nest.com/\",\n            \"clear\": true\n        },\n        {\n            \"action\": \"http\",\n            \"label\": \"Turn down\",\n            \"url\": \"https://api.nest.com/\",\n            \"body\": \"{\\\"temperature\\\": 65}\"\n        }\n    ]' \\\n    myhome \\\n    \"You left the house. Turn down the A/C?\"\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (HTTP)\nDESCRIPTION: Example of using a raw HTTP request with JSON payload to send an Android broadcast intent. The JSON format allows for structured definition of broadcast parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_144\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"wifey\",\n    \"message\": \"Your wife requested you send a picture of yourself.\",\n    \"actions\": [\n      {\n        \"action\": \"broadcast\",\n        \"label\": \"Take picture\",\n        \"extras\": {\n            \"cmd\": \"pic\",\n            \"camera\": \"front\"\n        }\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using Go\nDESCRIPTION: Uses Go's http package to send a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_186\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mydownloads\", file)\nreq.Header.Set(\"Attach\", \"https://f-droid.org/F-Droid.apk\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Installing Go for ntfy Development\nDESCRIPTION: Commands to download, install, and configure Go for ntfy development on a Linux system. Sets up the PATH environment variable to include Go binaries and verifies the installation.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://go.dev/dl/go1.19.1.linux-amd64.tar.gz\nsudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin:$HOME/go/bin\ngo version   # verifies that it worked\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using Python\nDESCRIPTION: Demonstrates how to set a custom message title for ntfy notifications using Python's requests library. The title is set in the headers dictionary.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/controversial\",\n    data=\"Oh my ...\",\n    headers={ \"Title\": \"Dogs are better than cats\" })\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using PowerShell\nDESCRIPTION: This snippet shows how to send an email notification using PowerShell's Invoke-RestMethod. It sets headers for the title, priority, tags, and email address.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_203\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/alerts\"\n  Headers = @{\n    Title = \"Low disk space alert\"\n    Priority = \"high\"\n    Tags = \"warning,skull,backup-host,ssh-login\")\n    Email = \"phil@example.com\"\n  }\n  Body = \"Unknown login from 5.31.23.83 to backups.example.com\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using ntfy CLI\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using the ntfy command-line interface.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    -p 5 --tags=warning,skull \\\n    mywebhook \"Webhook triggered\"\n```\n\n----------------------------------------\n\nTITLE: SSH Login Notification Setup\nDESCRIPTION: PAM configuration and script to send notifications on SSH login attempts\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# at the end of the file\nsession optional pam_exec.so /usr/bin/ntfy-ssh-login.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nif [ \"${PAM_TYPE}\" = \"open_session\" ]; then\n  curl \\\n    -H prio:high \\\n    -H tags:warning \\\n    -d \"SSH login: ${PAM_USER} from ${PAM_RHOST}\" \\\n    ntfy.sh/alerts\nfi\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with curl\nDESCRIPTION: Using curl to send a notification with JSON array actions to ntfy.sh. Includes two actions - a view action to open Nest portal and an HTTP action to adjust temperature.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_110\n\nLANGUAGE: bash\nCODE:\n```\ncurl ntfy.sh \\\n  -d '{\n    \"topic\": \"myhome\",\n    \"message\": \"You left the house. Turn down the A/C?\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open portal\",\n        \"url\": \"https://home.nest.com/\",\n        \"clear\": true\n      },\n      {\n        \"action\": \"http\",\n        \"label\": \"Turn down\",\n        \"url\": \"https://api.nest.com/\",\n        \"body\": \"{\\\"temperature\\\": 65}\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using Python\nDESCRIPTION: This snippet demonstrates how to send an email notification using Python's requests library. It sets headers for the email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_204\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/alerts\",\n    data=\"Unknown login from 5.31.23.83 to backups.example.com\",\n    headers={ \n        \"Email\": \"phil@example.com\",\n        \"Tags\": \"warning,skull,backup-host,ssh-login\",\n        \"Priority\": \"high\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (Go)\nDESCRIPTION: Example of using Go to send an Android broadcast intent with JSON payload. This approach provides a more structured way to define the broadcast parameters and extras.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_146\n\nLANGUAGE: go\nCODE:\n```\n// You should probably use json.Marshal() instead and make a proper struct,\n// but for the sake of the example, this is easier.\n\nbody := `{\n    \"topic\": \"wifey\",\n    \"message\": \"Your wife requested you send a picture of yourself.\",\n    \"actions\": [\n      {\n        \"action\": \"broadcast\",\n        \"label\": \"Take picture\",\n        \"extras\": {\n            \"cmd\": \"pic\",\n            \"camera\": \"front\"\n        }\n      }\n    ]\n}`\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/\", strings.NewReader(body))\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using curl\nDESCRIPTION: Uses curl to send a notification with a clickable URL that opens Reddit's message page when tapped. The Click header defines the target URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_166\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -d \"New messages on Reddit\" \\\n    -H \"Click: https://www.reddit.com/message/messages\" \\\n    ntfy.sh/reddit_alerts\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for ntfy Development\nDESCRIPTION: Commands to build a development Docker image and run it, exposing the ntfy server on port 80. Useful for testing the complete build with web app, docs, and server without local dependencies.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake docker-dev\ndocker run --rm -p 80:80 binwiederhier/ntfy:dev serve\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using HTTP\nDESCRIPTION: Illustrates how to set a custom message title for ntfy notifications using a raw HTTP request. The title is set using the Title header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPOST /controversial HTTP/1.1\nHost: ntfy.sh\nTitle: Dogs are better than cats\n\nOh my ...\n```\n\n----------------------------------------\n\nTITLE: Subscribing to JSON Stream using ntfy CLI (Bash)\nDESCRIPTION: This example shows how to use the ntfy CLI tool to subscribe to a topic and receive JSON-formatted messages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy subcribe disk-alerts\n{\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with ntfy CLI\nDESCRIPTION: Example of using the ntfy CLI to send an Android broadcast intent. The action button will trigger a broadcast with extras when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_135\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions=\"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\\n    wifey \\\n    \"Your wife requested you send a picture of yourself.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local-Only Email for ntfy (YAML)\nDESCRIPTION: YAML configuration for setting up a local-only SMTP server in ntfy. This is useful for sending emails from internal services on the same network without needing DNS records.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nsmtp-server-listen: \":25\"\nsmtp-server-domain: \"example.com\"\nsmtp-server-addr-prefix: \"ntfy-\"  # optional\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with PowerShell\nDESCRIPTION: PowerShell example for sending a notification with action buttons using Invoke-RestMethod\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_107\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/myhome\"\n  Headers = @{\n    Actions=\"view, Open portal, https://home.nest.com/, clear=true; http, Turn down, https://api.nest.com/, body='{\\\"temperature\\\": 65}'\"\n  }\n  Body = \"You left the house. Turn down the A/C?\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (Python)\nDESCRIPTION: Example of using Python with JSON payload to send an Android broadcast intent. This method uses json.dumps to create a structured JSON payload with broadcast parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"wifey\",\n        \"message\": \"Your wife requested you send a picture of yourself.\",\n        \"actions\": [\n            {\n                \"action\": \"broadcast\",\n                \"label\": \"Take picture\",\n                \"extras\": {\n                    \"cmd\": \"pic\",\n                    \"camera\": \"front\"\n                }\n            }\n        ]\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with JavaScript Fetch API (X-Actions header)\nDESCRIPTION: Example of using the JavaScript Fetch API to send a notification with a view action that opens a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/myhome', {\n    method: 'POST',\n    body: 'Somebody retweeted your tweet.',\n    headers: { \n        'Actions': 'view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392' \n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rundeck for ntfy SMTP Integration\nDESCRIPTION: Configuration for Rundeck to send plain text emails compatible with ntfy SMTP server. Includes the necessary properties to add to rundeck-config.properties file.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_17\n\nLANGUAGE: properties\nCODE:\n```\n# Template\nrundeck.mail.template.file=/path/to/template.html\nrundeck.mail.template.log.formatted=false\n```\n\n----------------------------------------\n\nTITLE: Scheduled Message Delivery with HTTP Raw Request\nDESCRIPTION: Example of scheduling a message delivery using a raw HTTP POST request with the At header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_58\n\nLANGUAGE: http\nCODE:\n```\nPOST /hello HTTP/1.1\nHost: ntfy.sh\nAt: tomorrow, 10am\n\nGood morning\n```\n\n----------------------------------------\n\nTITLE: Waiting for Process by PID with ntfy CLI\nDESCRIPTION: Example showing how to wait for an already running process using its PID and notify when it completes.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy pub --wait-pid 8458 mytopic | jq .\n{\n  \"id\": \"orM6hJKNYkWb\",\n  \"time\": 1655825827,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"Process with PID 8458 exited after 2.003s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (curl)\nDESCRIPTION: Example of sending an Android broadcast intent using JSON format with curl. This approach allows more structured definition of broadcast parameters and extras.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_142\n\nLANGUAGE: bash\nCODE:\n```\ncurl ntfy.sh \\\n  -d '{\n    \"topic\": \"wifey\",\n    \"message\": \"Your wife requested you send a picture of yourself.\",\n    \"actions\": [\n      {\n        \"action\": \"broadcast\",\n        \"label\": \"Take picture\",\n        \"extras\": {\n            \"cmd\": \"pic\",\n            \"camera\": \"front\"\n        }\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Push in YAML\nDESCRIPTION: This YAML configuration sets up Web Push for ntfy. It includes the VAPID public and private keys, the database file path, and the admin email address.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nweb-push-public-key: AA1234BBCCddvveekaabcdfqwertyuiopasdfghjklzxcvbnm1234567890\nweb-push-private-key: AA2BB1234567890abcdefzxcvbnm1234567890\nweb-push-file: /var/cache/ntfy/webpush.db\nweb-push-email-address: sysadmin@example.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Buttons with ntfy CLI\nDESCRIPTION: Example of sending a notification with action buttons using the ntfy command line interface\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_103\n\nLANGUAGE: bash\nCODE:\n```\nbody='{\"temperature\": 65}'\nntfy publish \\\n    --actions=\"view, Open portal, https://home.nest.com/, clear=true; \\\n               http, Turn down, https://api.nest.com/, body='$body'\" \\\n    myhome \\\n    \"You left the house. Turn down the A/C?\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Command Completion with ntfy CLI\nDESCRIPTION: Example of using --wait-cmd to run a command and publish a notification when it completes, showing the JSON response.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy pub --wait-cmd mytopic rsync -av ./ root@example.com:/backups/ | jq .\n{\n  \"id\": \"Re0rWXZQM8WB\",\n  \"time\": 1655825624,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"Command succeeded after 56.553s: rsync -av ./ root@example.com:/backups/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using CLI\nDESCRIPTION: Shows how to set a custom message title for ntfy notifications using the ntfy CLI tool. The title is set using the -t option.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    -t \"Dogs are better than cats\" \\\n    controversial \"Oh my ...\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with PowerShell\nDESCRIPTION: Example of triggering a webhook using PowerShell's Invoke-RestMethod with a GET request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_69\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod \"ntfy.sh/mywebhook/trigger\"\n```\n\n----------------------------------------\n\nTITLE: Rundeck HTML Email Template for ntfy\nDESCRIPTION: Example HTML template for Rundeck notifications that will work with ntfy. The template includes execution status, links to execution results, job, project, and Rundeck instance.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div>Execution ${execution.id} was <b>${execution.status}</b></div>\n<ul>\n    <li><a href=\"${execution.href}\">Execution result</a></li>\n    <li><a href=\"${job.href}\">Job</a></li>\n    <li><a href=\"${execution.projectHref}\">Project: ${execution.project}</a></li>\n    <li><a href=\"${rundeck.href}\">Rundeck</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant REST Notify Component with Additional ntfy Parameters\nDESCRIPTION: This YAML configuration shows how to include additional ntfy-specific parameters like priority in the Home Assistant REST notify component setup.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnotify:\n  - name: ntfy\n    platform: rest\n    method: POST_JSON\n    data:\n      topic: YOUR_NTFY_TOPIC\n      priority: 4\n    title_param_name: title\n    message_param_name: message\n    resource: https://ntfy.sh\n```\n\n----------------------------------------\n\nTITLE: Subscribing to SSE Stream using curl (Bash)\nDESCRIPTION: This example shows how to subscribe to a ntfy topic's Server-Sent Events (SSE) stream using curl on the command line.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s ntfy.sh/mytopic/sse\nevent: open\ndata: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"}\n\ndata: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"}\n\nevent: keepalive\ndata: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Triggering Webhooks with ntfy CLI\nDESCRIPTION: Examples of how to trigger a webhook using different command variations with the ntfy CLI.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nntfy trigger mywebhook\nntfy pub mywebhook\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for High-Volume ntfy Proxy Connections\nDESCRIPTION: Nginx configuration for increasing the maximum worker connections to support proxying a large number of ntfy client connections. The connection limit should be double the desired ntfy connection count.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_45\n\nLANGUAGE: conf\nCODE:\n```\nevents {\n  # Allow 40,000 proxy connections (2x of the desired ntfy connection count;\n  # and give room for other file handles)\n  worker_connections 40500;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with ntfy CLI\nDESCRIPTION: Uses the ntfy command-line client with Basic authentication to publish to a protected topic.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_215\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n  -u testuser:fakepassword \\\n  ntfy.example.com/mysecrets \\\n  \"Look ma, with auth\"\n```\n\n----------------------------------------\n\nTITLE: Setting Message Title in ntfy using PHP\nDESCRIPTION: Shows how to set a custom message title for ntfy notifications using PHP's file_get_contents function. The title is set in the header string.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/controversial', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Title: Dogs are better than cats\",\n        'content' => 'Oh my ...'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with PHP\nDESCRIPTION: Example of triggering a webhook using PHP's file_get_contents with a GET request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mywebhook/trigger');\n```\n\n----------------------------------------\n\nTITLE: Persistent Volume Claim Configuration for ntfy\nDESCRIPTION: PVC definition to provide persistent storage for ntfy cache and attachments in Kubernetes.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ntfy-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: local-path # adjust storage if needed\n  resources:\n    requests:\n      storage: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy as a Reverse Proxy for ntfy\nDESCRIPTION: This Caddy configuration sets up a reverse proxy for ntfy running on localhost:2586. It handles both HTTP and HTTPS automatically and includes a selective redirection from HTTP to HTTPS for GET requests to topic addresses.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_33\n\nLANGUAGE: caddyfile\nCODE:\n```\n# Note that this config is most certainly incomplete. Please help out and let me know what's missing\n# via Discord/Matrix or in a GitHub issue.\n# Note: Caddy automatically handles both HTTP and WebSockets with reverse_proxy \n\nntfy.sh, http://nfty.sh {\n    reverse_proxy 127.0.0.1:2586\n\n    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want\n    # it to work with curl without the annoying https:// prefix\n    @httpget {\n        protocol http\n        method GET\n        path_regexp ^/([-_a-z0-9]{0,64}$|docs/|static/)\n    }\n    redir @httpget https://{host}{uri}\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to SSE Stream using HTTP GET Request\nDESCRIPTION: This snippet shows the HTTP request and response format for subscribing to a ntfy topic's Server-Sent Events (SSE) stream.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /mytopic/sse HTTP/1.1\nHost: ntfy.sh\n\nHTTP/1.1 200 OK\nContent-Type: text/event-stream; charset=utf-8\nTransfer-Encoding: chunked\n\nevent: open\ndata: {\"id\":\"weSj9RtNkj\",\"time\":1635528898,\"event\":\"open\",\"topic\":\"mytopic\"}\n\ndata: {\"id\":\"p0M5y6gcCY\",\"time\":1635528909,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Hi!\"}\n\nevent: keepalive\ndata: {\"id\":\"VNxNIg5fpt\",\"time\":1635528928,\"event\":\"keepalive\",\"topic\":\"test\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Protected Topics with Authentication\nDESCRIPTION: Command to subscribe to password-protected ntfy topics using Basic Authentication. This is necessary when the server has access control enabled for certain topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nntfy subscribe \\\n  -u phil:mypass \\\n  ntfy.example.com/mysecrets\n```\n\n----------------------------------------\n\nTITLE: Configuring fail2ban Filter for Nginx Rate Limiting\nDESCRIPTION: Fail2ban filter configuration to detect and process Nginx rate limiting log entries, allowing automatic banning of IPs that exceed rate limits when accessing ntfy.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_49\n\nLANGUAGE: conf\nCODE:\n```\n[Definition]\nfailregex = limiting requests, excess:.* by zone.*client: <HOST>\nignoreregex =\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with PowerShell\nDESCRIPTION: PowerShell implementation to send voice call notifications using Invoke-RestMethod. Configures headers for authentication and phone call.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_211\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/alerts\"\n  Headers = @{\n    Authorization = \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\"\n    Call = \"+12223334444\"\n  }\n  Body = \"Your garage seems to be on fire. You should probably check that out.\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using Python\nDESCRIPTION: This snippet demonstrates how to send a notification with a custom icon using Python's requests library. It sets headers for the title, tags, and icon URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_196\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/tvshows\",\n    data=\"The Wire, S01E01\",\n    headers={\n        \"Title\": \"Kodi: Resuming Playback\",\n        \"Tags\": \"arrow_forward\",\n        \"Icon\": \"https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Message Priority in ntfy using JavaScript\nDESCRIPTION: Demonstrates how to set message priority for ntfy notifications using JavaScript and the Fetch API. The priority is set in the headers object.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/phil_alerts', {\n    method: 'POST',\n    body: 'An urgent message',\n    headers: { 'Priority': '5' }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using HTTP Raw Request\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using a raw HTTP GET request with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_74\n\nLANGUAGE: http\nCODE:\n```\nGET /mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull HTTP/1.1\nHost: ntfy.sh\n```\n\n----------------------------------------\n\nTITLE: Creating ntfy Kubernetes ConfigMap\nDESCRIPTION: This Kubernetes ConfigMap provides a minimal configuration for ntfy, including the base URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ntfy\ndata:\n  server.yml: |\n    # Template: https://github.com/binwiederhier/ntfy/blob/main/server/server.yml\n    base-url: https://ntfy.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Web Push Keys using ntfy CLI\nDESCRIPTION: This command uses the ntfy CLI to generate VAPID keys for Web Push configuration. The generated keys are used in the server configuration.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\n$ ntfy webpush keys\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Raw Stream using curl (Bash)\nDESCRIPTION: This example shows how to subscribe to a ntfy topic's raw stream using curl on the command line, which only includes the message body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s ntfy.sh/disk-alerts/raw\n\nDisk full\n...\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WebSocket Stream using websocat (Bash)\nDESCRIPTION: This example demonstrates how to subscribe to a ntfy topic's WebSocket stream using the websocat tool on the command line.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ websocat wss://ntfy.sh/mytopic/ws\n{\"id\":\"qRHUCCvjj8\",\"time\":1642307388,\"event\":\"open\",\"topic\":\"mytopic\"}\n{\"id\":\"eOWoUBJ14x\",\"time\":1642307754,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"}\n```\n\n----------------------------------------\n\nTITLE: Deploying ntfy on Kubernetes as a Pod\nDESCRIPTION: This Kubernetes Pod manifest sets up a standalone ntfy instance without persistent storage.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: ntfy\nspec:\n  containers:\n  - name: ntfy\n    image: binwiederhier/ntfy\n    args: [\"serve\"]\n    resources:\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n    ports:\n    - containerPort: 80\n      name: http\n    volumeMounts:\n    - name: config\n      mountPath: \"/etc/ntfy\"\n      readOnly: true\n  volumes:\n    - name: config\n      configMap:\n        name: ntfy\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with JavaScript\nDESCRIPTION: JavaScript fetch API implementation to send a voice call notification. Uses bearer token authentication and the Call header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_209\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/alerts', {\n    method: 'POST',\n    body: \"Your garage seems to be on fire. You should probably check that out.\",\n    headers: { \n        'Authorization': 'Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2',\n        'Call': '+12223334444'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with Go\nDESCRIPTION: Go implementation for sending voice call notifications using the http package. Sets the Call header and uses bearer token authentication.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_210\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/alerts\", \n    strings.NewReader(\"Your garage seems to be on fire. You should probably check that out.\"))\nreq.Header.Set(\"Call\", \"+12223334444\")\nreq.Header.Set(\"Authorization\", \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with curl\nDESCRIPTION: Example of sending an Android broadcast intent using curl with the X-Actions header. This broadcasts an intent with extras to trigger actions on the Android device.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_134\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -d \"Your wife requested you send a picture of yourself.\" \\\n    -H \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\" \\\nntfy.sh/wifey\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Configuration for ntfy\nDESCRIPTION: Service definition that exposes ntfy pods to the internal Kubernetes network.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ntfy-svc  \nspec:\n  type: ClusterIP\n  selector:\n    app: ntfy-pod\n  ports:\n    - name: http-ntfy-out\n      protocol: TCP\n      port: 80\n      targetPort:  http-ntfy\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Payment Integration in YAML\nDESCRIPTION: This YAML configuration sets up Stripe payment integration for ntfy. It includes the Stripe secret key, webhook key, and billing contact information.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nstripe-secret-key: \"sk_test_ZmhzZGtmbGhkc2tqZmhzYcO2a2hmbGtnaHNkbGtnaGRsc2hnbG\"\nstripe-webhook-key: \"whsec_ZnNkZnNIRExBSFNES0hBRFNmaHNka2ZsaGR\"\nbilling-contact: \"phil@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with Go\nDESCRIPTION: Example of using Go's http package to send an Android broadcast intent with custom extras that will be passed to the broadcast intent.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_138\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/wifey\", strings.NewReader(\"Your wife requested you send a picture of yourself.\"))\nreq.Header.Set(\"Actions\", \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Example of a Keepalive Message in JSON\nDESCRIPTION: A JSON-formatted keepalive message that is sent periodically to maintain the connection, containing only basic information (id, time, event, topic).\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"371sevb0pD\",\n    \"time\": 1638542275,\n    \"event\": \"keepalive\",\n    \"topic\": \"phil_alerts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ntfy Kubernetes ConfigMap from File\nDESCRIPTION: This command creates a Kubernetes ConfigMap for ntfy using an external server.yml file.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap ntfy --from-file=server.yml\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with ntfy CLI\nDESCRIPTION: Uses the ntfy command-line client to send a voice call notification. Requires a token and verified phone number.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_207\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --token=tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n    --call=+12223334444 \\\n    alerts \"Your garage seems to be on fire. You should probably check that out.\"\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (JavaScript)\nDESCRIPTION: Example of using JavaScript fetch API with JSON payload to send an Android broadcast intent. The JSON structure provides a clear way to define action parameters and extras.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh', {\n    method: 'POST',\n    body: JSON.stringify({\n        topic: \"wifey\",\n        message\": \"Your wife requested you send a picture of yourself.\",\n        actions: [\n            {\n                \"action\": \"broadcast\",\n                \"label\": \"Take picture\",\n                \"extras\": {\n                    \"cmd\": \"pic\",\n                    \"camera\": \"front\"\n                }\n            }\n        ]\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with PHP\nDESCRIPTION: PHP implementation using file_get_contents with a stream context to send voice call notifications. Sets Content-Type, Authorization and Call headers.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_213\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Authorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\\r\\n\" .\n            \"Call: +12223334444\",\n        'content' => 'Your garage seems to be on fire. You should probably check that out.'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with PowerShell\nDESCRIPTION: Example of using PowerShell to send an Android broadcast intent with extras that define command parameters to be used by automation apps.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_139\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/wifey\"\n  Headers = @{\n    Actions = \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\"\n  }\n  Body = \"Your wife requested you send a picture of yourself.\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress Configuration for ntfy\nDESCRIPTION: Ingress definition to expose the ntfy service outside the Kubernetes cluster with a custom hostname.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ntfy-ingress\nspec:\n  rules:\n    - host: ntfy.test #select own\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name:  ntfy-svc\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Setting Up UnifiedPush Prefix Access Control\nDESCRIPTION: Example of allowing anonymous write access to all topics with the UnifiedPush prefix (up*) using the ntfy access command.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy access '*' 'up*' write-only\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with HTTP\nDESCRIPTION: Example of sending an Android broadcast intent using a raw HTTP request with the Actions header to define broadcast parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_136\n\nLANGUAGE: http\nCODE:\n```\nPOST /wifey HTTP/1.1\nHost: ntfy.sh\nActions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\n\nYour wife requested you send a picture of yourself.\n```\n\n----------------------------------------\n\nTITLE: Example of a Poll Request Message in JSON\nDESCRIPTION: A JSON-formatted poll request message containing basic information (id, time, event, topic) used for polling for new messages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"371sevb0pD\",\n    \"time\": 1638542275,\n    \"event\": \"poll_request\",\n    \"topic\": \"phil_alerts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kustomize Configuration for ntfy in Kubernetes\nDESCRIPTION: Command to apply the Kustomize configuration to a Kubernetes cluster using the current context.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k /ntfy\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using curl\nDESCRIPTION: This snippet demonstrates how to send an email notification using curl. It includes headers for the email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_198\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -H \"Email: phil@example.com\" \\\n    -H \"Tags: warning,skull,backup-host,ssh-login\" \\\n    -H \"Priority: high\" \\\n    -d \"Unknown login from 5.31.23.83 to backups.example.com\" \\\n    ntfy.sh/alerts\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using PowerShell\nDESCRIPTION: Uses PowerShell's Invoke-RestMethod to send a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_171\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/reddit_alerts\"\n  Headers = @{ Click=\"https://www.reddit.com/message/messages\" }\n  Body = \"New messages on Reddit\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with Python\nDESCRIPTION: Example of using Python requests library to send an Android broadcast intent with extras. The notification will show an action button that triggers the broadcast when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_140\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/wifey\",\n    data=\"Your wife requested you send a picture of yourself.\",\n    headers={ \"Actions\": \"broadcast, Take picture, extras.cmd=pic, extras.camera=front\" })\n```\n\n----------------------------------------\n\nTITLE: Creating a Detailed Tier using ntfy CLI\nDESCRIPTION: This command demonstrates how to create a detailed tier with specific limits and attributes using the ntfy CLI. It includes various parameters such as message limits, attachment limits, and Stripe pricing.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nntfy tier add \\\n  --name=\"Pro\" \\\n  --message-limit=10000 \\\n  --message-expiry-duration=24h \\\n  --email-limit=50 \\\n  --call-limit=10 \\\n  --reservation-limit=10 \\\n  --attachment-file-size-limit=100M \\\n  --attachment-total-size-limit=1G \\\n  --attachment-expiry-duration=12h \\\n  --attachment-bandwidth-limit=5G \\\n  --stripe-price-id=price_123456 \\\n  pro\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Service Limits for ntfy\nDESCRIPTION: Systemd override configuration to increase the maximum number of open files (LimitNOFILE) for the ntfy service, allowing it to handle more concurrent connections.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_43\n\nLANGUAGE: conf\nCODE:\n```\n# Allow 20,000 ntfy connections (and give room for other file handles)\n[Service]\nLimitNOFILE=20500\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with HTTP Request (JSON format)\nDESCRIPTION: Example of an HTTP POST request with JSON body to create a notification with a view action button.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_128\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost: ntfy.sh\n\n{\n    \"topic\": \"myhome\",\n    \"message\": \"Somebody retweeted your tweet.\",\n    \"actions\": [\n      {\n        \"action\": \"view\",\n        \"label\": \"Open Twitter\",\n        \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP+HTTPS Server Configuration with TLS Certificates\nDESCRIPTION: YAML configuration for an ntfy server supporting both HTTP and HTTPS with TLS certificates, message caching, and attachments.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbase-url: \"http://ntfy.example.com\"\nlisten-http: \":80\"\nlisten-https: \":443\"\nkey-file: \"/etc/letsencrypt/live/ntfy.example.com.key\"\ncert-file: \"/etc/letsencrypt/live/ntfy.example.com.crt\"\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js for ntfy Web App Development\nDESCRIPTION: Commands to set up Node.js repository and install Node.js version 18.x, which is required for building the ntfy web application component.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\nnpm -v   # verifies that it worked\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using PHP\nDESCRIPTION: This snippet shows how to send a notification with a custom icon using PHP's file_get_contents function. It sets headers for the content type, title, tags, and icon URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_197\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/tvshows', false, stream_context_create([\n    'http' => [\n    'method' => 'PUT',\n    'header' =>\n        \"Content-Type: text/plain\\r\\n\" . // Does not matter\n        \"Title: Kodi: Resuming Playback\\r\\n\" .\n        \"Tags: arrow_forward\\r\\n\" .\n        \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\",\n    ],\n    'content' => \"The Wire, S01E01\"\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using Go\nDESCRIPTION: Uses Go's http package to send a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_170\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/reddit_alerts\", strings.NewReader(\"New messages on Reddit\"))\nreq.Header.Set(\"Click\", \"https://www.reddit.com/message/messages\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with PHP (X-Actions header)\nDESCRIPTION: Example of using PHP's file_get_contents with a stream context to send a notification with a view action.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_125\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Actions: view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\",\n        'content' => 'Somebody retweeted your tweet.'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (PowerShell)\nDESCRIPTION: Example of using PowerShell with JSON payload to send an Android broadcast intent. The ConvertTo-Json cmdlet is used with Depth parameter to properly handle nested objects.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_147\n\nLANGUAGE: powershell\nCODE:\n```\n# Powershell requires the 'Depth' argument to equal 3 here to expand 'Extras',\n# otherwise it will read System.Collections.Hashtable in the returned JSON\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-Json -Depth 3 @{\n    Topic = \"wifey\"\n    Message = \"Your wife requested you send a picture of yourself.\"\n    Actions = @(\n      @{\n        Action = \"broadcast\"\n        Label = \"Take picture\"\n        Extras = @{\n          CMD =\"pic\"\n          Camera = \"front\"\n        }\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting in Nginx for ntfy\nDESCRIPTION: Nginx http block configuration for implementing rate limiting to protect ntfy from abuse. Includes both a simple rate limit for all IPs and an alternative with IP whitelisting.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_47\n\nLANGUAGE: conf\nCODE:\n```\n# Rate limit all IP addresses\nhttp {\n  limit_req_zone $binary_remote_addr zone=one:10m rate=45r/m;\n}\n\n# Alternatively, whitelist certain IP addresses\nhttp {\n  geo $limited {\n    default 1;\n    116.203.112.46/32 0;\n    132.226.42.65/32 0;\n    ...\n  }\n  map $limited $limitkey {\n    1 $binary_remote_addr;\n    0 \"\";\n  }\n  limit_req_zone $limitkey zone=one:10m rate=45r/m;\n}\n```\n\n----------------------------------------\n\nTITLE: Example ACL Output from ntfy CLI\nDESCRIPTION: Example output from the ntfy access command showing access permissions for different users including admin, regular user, and anonymous access.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy access\nuser phil (admin)\n- read-write access to all topics (admin role)\nuser ben (user)\n- read-write access to topic garagedoor\n- read-write access to topic alerts*\n- read-only access to topic furnace\nuser * (anonymous)\n- read-only access to topic announcements\n- read-only access to topic server-stats\n- no access to any (other) topics (server config)\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (PHP)\nDESCRIPTION: Example of using PHP with JSON payload to send an Android broadcast intent. The json_encode function is used to create a structured JSON payload with broadcast parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_149\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => \"Content-Type: application/json\",\n        'content' => json_encode([\n            \"topic\": \"wifey\",\n            \"message\": \"Your wife requested you send a picture of yourself.\",\n            \"actions\": [\n                [\n                \"action\": \"broadcast\",\n                \"label\": \"Take picture\",\n                \"extras\": [\n                    \"cmd\": \"pic\",\n                    \"camera\": \"front\"\n                ]\n            ]\n        ])\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Server for iOS Notifications in YAML\nDESCRIPTION: This YAML configuration sets up the upstream server for iOS instant notifications. It specifies the base URL and an optional access token for the upstream server.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nupstream-base-url: \"https://ntfy.sh\"\nupstream-access-token: \"...\" # optional, only if rate limits exceeded, or upstream server protected\n```\n\n----------------------------------------\n\nTITLE: Building and Installing ntfy Binary for Development\nDESCRIPTION: Commands to build the ntfy binary for the current architecture (amd64) and install it to the system, allowing for quick testing during development.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake cli-linux-amd64 install-linux-amd64\nntfy serve\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Icon using curl\nDESCRIPTION: This snippet demonstrates how to send a notification with a custom icon using curl. It includes headers for the icon URL, title, and tags.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_190\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -H \"Icon: https://styles.redditmedia.com/t5_32uhe/styles/communityIcon_xnt6chtnr2j21.png\" \\\n    -H \"Title: Kodi: Resuming Playback\" \\\n    -H \"Tags: arrow_forward\" \\\n    -d \"The Wire, S01E01\" \\\n    ntfy.sh/tvshows\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with PowerShell\nDESCRIPTION: PowerShell implementation using Invoke-RestMethod to send notification with JSON array actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_115\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-JSON @{\n    Topic   = \"myhome\"\n    Message = \"You left the house. Turn down the A/C?\"\n    Actions = @(\n      @{\n        Action = \"view\"\n        Label  = \"Open portal\"\n        URL    = \"https://home.nest.com/\"\n        Clear  = $true\n      },\n      @{\n        Action = \"http\"\n        Label  = \"Turn down\"\n        URL    = \"https://api.nest.com/\"\n        Body   = '{\"temperature\": 65}'\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification using HTTP POST\nDESCRIPTION: This snippet demonstrates how to send an email notification using an HTTP POST request. It includes headers for the email address, tags, and priority.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_200\n\nLANGUAGE: http\nCODE:\n```\nPOST /alerts HTTP/1.1\nHost: ntfy.sh\nEmail: phil@example.com\nTags: warning,skull,backup-host,ssh-login\nPriority: high\n\nUnknown login from 5.31.23.83 to backups.example.com\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics on Default ntfy Port\nDESCRIPTION: Server configuration to enable Prometheus metrics endpoint on the default ntfy server port. This exposes metrics through the /metrics endpoint for monitoring.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nenable-metrics: true\n```\n\n----------------------------------------\n\nTITLE: Managing Access Tokens with ntfy CLI\nDESCRIPTION: Examples of token management commands with the ntfy CLI to list, add, and remove access tokens for users.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nntfy token list                      # Shows list of tokens for all users\nntfy token list phil                 # Shows list of tokens for user phil\nntfy token add phil                  # Create token for user phil which never expires\nntfy token add --expires=2d phil     # Create token for user phil which expires in 2 days\nntfy token remove phil tk_th2sxr...  # Delete token\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with HTTP\nDESCRIPTION: Raw HTTP POST request to initiate a voice call notification. Uses bearer token authentication and specifies the phone number in the Call header.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_208\n\nLANGUAGE: http\nCODE:\n```\nPOST /alerts HTTP/1.1\nHost: ntfy.sh\nAuthorization: Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\nCall: +12223334444\n\nYour garage seems to be on fire. You should probably check that out.\n```\n\n----------------------------------------\n\nTITLE: Optimizing SQLite Message Cache in ntfy with WAL and Batch Processing\nDESCRIPTION: Configuration for tuning the ntfy message cache using SQLite WAL mode, adjusted sync settings, and batch processing. This setup is used by ntfy.sh for high-load environments to prevent database locking issues.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ncache-batch-size: 25\ncache-batch-timeout: \"1s\"\ncache-startup-queries: |\n    pragma journal_mode = WAL;\n    pragma synchronous = normal;\n    pragma temp_store = memory;\n    pragma busy_timeout = 15000;\n    vacuum;\n```\n\n----------------------------------------\n\nTITLE: Running ntfy Server Directly with Go\nDESCRIPTION: Commands to enable CGO (required for SQLite bindings), prepare static site dependencies, and run the ntfy server directly using Go without building a binary. Useful for rapid development iteration.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport CGO_ENABLED=1\nmake cli-deps-static-sites\ngo run main.go serve\n2022/03/18 08:43:55 Listening on :2586[http]\n...\n```\n\n----------------------------------------\n\nTITLE: Sending Click Action Notification using ntfy CLI\nDESCRIPTION: Uses the ntfy CLI to publish a notification with a clickable URL that opens Reddit's message page when tapped.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_167\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --click=\"https://www.reddit.com/message/messages\" \\\n    reddit_alerts \"New messages on Reddit\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via PHP using Actions header\nDESCRIPTION: Example of using PHP's file_get_contents with stream_context_create to send a notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_157\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/reddit_alerts', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            'Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}',\n        'content' => 'Garage door has been open for 15 minutes. Close it?'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using PowerShell\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using PowerShell's Invoke-RestMethod with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_77\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod \"ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull\"\n```\n\n----------------------------------------\n\nTITLE: Sending Phone Call Notifications with curl (Command Line)\nDESCRIPTION: Makes a voice call to a verified phone number to read out a notification. Requires authentication with a token and a previously verified phone number.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_206\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -u :tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2 \\\n    -H \"Call: +12223334444\" \\\n    -d \"Your garage seems to be on fire. You should probably check that out.\" \\\n    ntfy.sh/alerts\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated Port for ntfy Prometheus Metrics\nDESCRIPTION: Server configuration to expose ntfy's Prometheus metrics endpoint on a dedicated IP address and port for improved security and isolation.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics-listen-http: \"10.0.1.1:9090\"\n```\n\n----------------------------------------\n\nTITLE: Applying Nginx Rate Limiting to ntfy Server Blocks\nDESCRIPTION: Nginx server block configuration that applies the previously defined rate limiting to protect ntfy endpoints from excessive requests.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_48\n\nLANGUAGE: conf\nCODE:\n```\n# For each server/location block\nserver {\n  location / {\n    limit_req zone=one burst=1000 nodelay;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Topics with Configuration File\nDESCRIPTION: Command to subscribe to multiple ntfy topics using a configuration file. This approach lets you define different topics and commands in the client.yml file.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nntfy subscribe --from-config\n```\n\n----------------------------------------\n\nTITLE: Setting systemd Limits for Nginx as ntfy Proxy\nDESCRIPTION: Systemd override configuration to increase the maximum number of open files for the Nginx service when used as a proxy for ntfy, allowing it to handle more concurrent connections.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_46\n\nLANGUAGE: conf\nCODE:\n```\n# Allow 40,000 proxy connections (2x of the desired ntfy connection count;\n# and give room for other file handles)\n[Service]\nLimitNOFILE=40500\n```\n\n----------------------------------------\n\nTITLE: Cloning the ntfy Android App Repository via SSH\nDESCRIPTION: Git commands to clone the ntfy Android app repository using SSH and navigate to the project directory.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:binwiederhier/ntfy-android.git\ncd ntfy-android\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with JSON (ntfy CLI)\nDESCRIPTION: Example of using ntfy CLI with JSON format to define a broadcast action. The JSON structure provides a clear way to define action parameters and extras.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_143\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions '[\n        {\n            \"action\": \"broadcast\",\n            \"label\": \"Take picture\",\n            \"extras\": {\n                \"cmd\": \"pic\",\n                \"camera\": \"front\"\n            }\n        }\n    ]' \\\n    wifey \\\n    \"Your wife requested you send a picture of yourself.\"\n```\n\n----------------------------------------\n\nTITLE: Managing Tiers using ntfy CLI\nDESCRIPTION: These commands demonstrate how to manage tiers using the ntfy CLI. They show how to add, change, delete tiers, and change a user's tier.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nntfy tier add pro                     # Add tier with code \"pro\", using the defaults\nntfy tier change --name=\"Pro\" pro     # Update the name of an existing tier\nntfy tier del starter                 # Delete an existing tier\nntfy user change-tier phil pro        # Switch user \"phil\" to tier \"pro\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Basic Auth Using JavaScript\nDESCRIPTION: JavaScript example using fetch API to send a notification to a ntfy server with Basic Authentication.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.example.com/mysecrets', {\n    method: 'POST', // PUT works too\n    body: 'Look ma, with auth',\n    headers: {\n        'Authorization': 'Basic cGhpbDpteXBhc3M='\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Building the F-Droid Flavor of ntfy Android App\nDESCRIPTION: Commands to remove Google dependencies and build the F-Droid flavor of the ntfy Android app, producing either an APK or AAB package.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# Remove Google dependencies (FCM)\nsed -i -e '/google-services/d' build.gradle\nsed -i -e '/google-services/d' app/build.gradle\n\n# To build an unsigned .apk (app/build/outputs/apk/fdroid/*.apk)\n./gradlew assembleFdroidRelease\n\n# To build a bundle .aab (app/fdroid/release/*.aab)\n./gradlew bundleFdroidRelease\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level Overrides in YAML for ntfy Debugging\nDESCRIPTION: This YAML configuration demonstrates how to set log level overrides in ntfy for debugging specific components. It sets the default log level to 'info' and defines overrides for specific tags, IP addresses, and fields.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nlog-level: info\nlog-level-overrides:\n  - \"tag=manager -> trace\"\n  - \"visitor_ip=1.2.3.4 -> debug\"\n  - \"time_taken_ms -> debug\"\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request with Go Templates for ntfy\nDESCRIPTION: Raw HTTP POST request example showing how to use Go templates with ntfy. The request includes template parameters in the URL and JSON payload in the body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_88\n\nLANGUAGE: http\nCODE:\n```\nPOST /mytopic?tpl=yes&t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&m=Error+message:+{{.error.desc}} HTTP/1.1\nHost: ntfy.sh\n\n{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up fail2ban Jail for Nginx Rate Limiting Protection\nDESCRIPTION: Fail2ban jail configuration that uses the previously defined filter to automatically ban IPs that trigger Nginx rate limiting when accessing ntfy.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_50\n\nLANGUAGE: conf\nCODE:\n```\n[nginx-req-limit]\nenabled = true\nfilter = nginx-req-limit\naction = iptables-multiport[name=ReqLimit, port=\"http,https\", protocol=tcp]\nlogpath = /var/log/nginx/error.log\nfindtime = 600\nbantime = 14400\nmaxretry = 10\n```\n\n----------------------------------------\n\nTITLE: Building the Play Flavor of ntfy Android App\nDESCRIPTION: Commands to build the Google Play flavor of the ntfy Android app with Firebase support, producing either an APK or AAB package.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# To build an unsigned .apk (app/build/outputs/apk/play/release/*.apk)\n./gradlew assemblePlayRelease\n\n# To build a bundle .aab (app/play/release/*.aab)\n./gradlew bundlePlayRelease\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with PHP (JSON format)\nDESCRIPTION: Example of using PHP's file_get_contents with a JSON-encoded body to send a notification with a view action.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_133\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => \"Content-Type: application/json\",\n        'content' => json_encode([\n            \"topic\": \"myhome\",\n            \"message\": \"Somebody retweeted your tweet.\",\n            \"actions\": [\n                [\n                    \"action\": \"view\",\n                    \"label\": \"Open Twitter\",\n                    \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n                ]\n            ]\n        ])\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Attaching Local Files to Messages with ntfy CLI\nDESCRIPTION: A command example that demonstrates how to upload and attach a local file to a notification, with JSON output showing the attachment details.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy pub --file README.md mytopic | jq .\n{\n  \"id\": \"meIlClVLABJQ\",\n  \"time\": 1655825460,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"You received a file: README.md\",\n  \"attachment\": {\n    \"name\": \"README.md\",\n    \"type\": \"text/plain; charset=utf-8\",\n    \"size\": 2892,\n    \"expires\": 1655836260,\n    \"url\": \"https://ntfy.sh/file/meIlClVLABJQ.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Poll Request to Upstream Server using cURL\nDESCRIPTION: This cURL command demonstrates how to send a poll request from a self-hosted server to the upstream server. It includes the necessary headers and payload for the request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H \"X-Poll-ID: s4PdJozxM8na\" https://ntfy.sh/6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b\n{\"id\":\"4HsClFEuCIcs\",\"time\":1654087955,\"event\":\"poll_request\",\"topic\":\"6de73be8dfb7d69e32fb2c00c23fe7adbd8b5504406e3068c273aa24cef4055b\",\"message\":\"New message\",\"poll_id\":\"s4PdJozxM8na\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Logging in YAML for ntfy\nDESCRIPTION: This YAML configuration sets up logging for production use in ntfy. It specifies the log level as 'info', uses JSON format for logs, and writes to a log file.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nlog-level: info\nlog-format: json\nlog-file: /var/log/ntfy.log\n```\n\n----------------------------------------\n\nTITLE: Cloning ntfy Repository via SSH\nDESCRIPTION: Commands to clone the ntfy repository from GitHub using SSH and navigate to the project directory.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:binwiederhier/ntfy.git \ncd ntfy\n```\n\n----------------------------------------\n\nTITLE: Linux Configuration for Multiple Topic Subscriptions\nDESCRIPTION: YAML configuration for subscribing to multiple ntfy topics on Linux. It includes examples for executing different commands based on received messages, conditionally processing high-priority messages, and running inline scripts.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsubscribe:\n- topic: echo-this\n  command: 'echo \"Message received: $message\"'\n- topic: alerts\n  command: notify-send -i /usr/share/ntfy/logo.png \"Important\" \"$m\"\n  if:\n    priority: high,urgent\n- topic: calc\n  command: 'gnome-calculator 2>/dev/null &'\n- topic: print-temp\n  command: |\n        echo \"You can easily run inline scripts, too.\"\n        temp=\"$(sensors | awk '/Pack/ { print substr($4,2,2) }')\"\n        if [ $temp -gt 80 ]; then\n          echo \"Warning: CPU temperature is $temp. Too high.\"\n        else\n          echo \"CPU temperature is $temp. That's alright.\"\n        fi\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for ntfy\nDESCRIPTION: Basic ntfy server configuration defining cache and attachment storage locations.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncache-file: \"/var/cache/ntfy/cache.db\"\nattachment-cache-dir: \"/var/cache/ntfy/attachments\"\n```\n\n----------------------------------------\n\nTITLE: Installing ntfy on Arch Linux\nDESCRIPTION: Installs ntfy using an AUR helper (paru) on Arch Linux systems.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nparu -S ntfysh-bin\n```\n\n----------------------------------------\n\nTITLE: Windows Configuration for Multiple Topic Subscriptions\nDESCRIPTION: YAML configuration for subscribing to multiple ntfy topics on Windows. It demonstrates how to use environment variables in commands and execute Windows-specific notification tools.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsubscribe:\n- topic: echo-this\n  command: 'echo Message received: %message%'\n- topic: alerts\n  command: |\n    notifu /m \"%NTFY_MESSAGE%\"\n    exit 0\n  if:\n    priority: high,urgent\n- topic: calc\n  command: calc\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WebSocket Stream using HTTP Upgrade Request\nDESCRIPTION: This snippet shows the HTTP upgrade request and response format for subscribing to a ntfy topic's WebSocket stream.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /disk-alerts/ws HTTP/1.1\nHost: ntfy.sh\nUpgrade: websocket\nConnection: Upgrade\n\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\n...\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Grafana Alerts\nDESCRIPTION: Sample JSON payload sent by Grafana to the ntfy webhook. This shows the structure of data that can be accessed and formatted using Go templates in ntfy.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\"receiver\":\"ntfy\\\\.example\\\\.com/alerts\",\"status\":\"resolved\",\"alerts\":[{\"status\":\"resolved\",\"labels\":{\"alertname\":\"Load avg 15m too high\",\"grafana_folder\":\"Node alerts\",\"instance\":\"10.108.0.2:9100\",\"job\":\"node-exporter\"},\"annotations\":{\"summary\":\"15m load average too high\"},\"startsAt\":\"2024-03-15T02:28:00Z\",\"endsAt\":\"2024-03-15T02:42:00Z\",\"generatorURL\":\"localhost:3000/alerting/grafana/NW9oDw-4z/view\",\"fingerprint\":\"becbfb94bd81ef48\",\"silenceURL\":\"localhost:3000/alerting/silence/new?alertmanager=grafana&matcher=alertname%3DLoad+avg+15m+too+high&matcher=grafana_folder%3DNode+alerts&matcher=instance%3D10.108.0.2%3A9100&matcher=job%3Dnode-exporter\",\"dashboardURL\":\"\",\"panelURL\":\"\",\"values\":{\"B\":18.98211314475876,\"C\":0},\"valueString\":\"[ var='B' labels={__name__=node_load15, instance=10.108.0.2:9100, job=node-exporter} value=18.98211314475876 ], [ var='C' labels={__name__=node_load15, instance=10.108.0.2:9100, job=node-exporter} value=0 ]\"}],\"groupLabels\":{\"alertname\":\"Load avg 15m too high\",\"grafana_folder\":\"Node alerts\"},\"commonLabels\":{\"alertname\":\"Load avg 15m too high\",\"grafana_folder\":\"Node alerts\",\"instance\":\"10.108.0.2:9100\",\"job\":\"node-exporter\"},\"commonAnnotations\":{\"summary\":\"15m load average too high\"},\"externalURL\":\"localhost:3000/\",\"version\":\"1\",\"groupKey\":\"{}:{alertname=\\\"Load avg 15m too high\\\", grafana_folder=\\\"Node alerts\\\"}\",\"truncatedAlerts\":0,\"orgId\":1,\"title\":\"[RESOLVED] Load avg 15m too high Node alerts (10.108.0.2:9100 node-exporter)\",\"state\":\"ok\",\"message\":\"**Resolved**\\n\\nValue: B=18.98211314475876, C=0\\nLabels:\\n - alertname = Load avg 15m too high\\n - grafana_folder = Node alerts\\n - instance = 10.108.0.2:9100\\n - job = node-exporter\\nAnnotations:\\n - summary = 15m load average too high\\nSource: localhost:3000/alerting/grafana/NW9oDw-4z/view\\nSilence: localhost:3000/alerting/silence/new?alertmanager=grafana&matcher=alertname%3DLoad+avg+15m+too+high&matcher=grafana_folder%3DNode+alerts&matcher=instance%3D10.108.0.2%3A9100&matcher=job%3Dnode-exporter\\n\"}\n```\n\n----------------------------------------\n\nTITLE: Cloning the ntfy Android App Repository via HTTPS\nDESCRIPTION: Git commands to clone the ntfy Android app repository using HTTPS and navigate to the project directory.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/binwiederhier/ntfy-android.git\ncd ntfy-android\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Extras in Android Automation Apps\nDESCRIPTION: A table listing all the extras available from ntfy broadcast intents with the 'io.heckel.ntfy.MESSAGE_RECEIVED' action. These extras include message details like topic, message body, priority, attachments, and other metadata that can be accessed by automation apps.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/phone.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Extra name           | Type                         | Example                                  | Description                                                                        |\n|----------------------|------------------------------|------------------------------------------|------------------------------------------------------------------------------------|\n| `id`                 | *String*                     | `bP8dMjO8ig`                             | Randomly chosen message identifier (likely not very useful for task automation)    |\n| `base_url`           | *String*                     | `https://ntfy.sh`                        | Root URL of the ntfy server this message came from                                |\n| `topic` ❤️           | *String*                     | `mytopic`                                | Topic name; **you'll likely want to filter for a specific topic**                  |\n| `muted`              | *Boolean*                    | `true`                                   | Indicates whether the subscription was muted in the app                            |\n| `muted_str`          | *String (`true` or `false`)* | `true`                                   | Same as `muted`, but as string `true` or `false`                                   |\n| `time`               | *Int*                        | `1635528741`                             | Message date time, as Unix time stamp                                              |\n| `title`              | *String*                     | `Some title`                             | Message [title](../publish.md#message-title); may be empty if not set              |\n| `message` ❤️         | *String*                     | `Some message`                           | Message body; **this is likely what you're interested in**                         |\n| `message_bytes`      | *ByteArray*                  | `(binary data)`                          | Message body as binary data                                                        |\n| `encoding`️          | *String*                     | -                                        | Message encoding (empty or \"base64\")                                               |\n| `tags`               | *String*                     | `tag1,tag2,..`                           | Comma-separated list of [tags](../publish.md#tags-emojis)                          |\n| `tags_map`           | *String*                     | `0=tag1,1=tag2,..`                       | Map of tags to make it easier to map first, second, ... tag                        |\n| `priority`           | *Int (between 1-5)*          | `4`                                      | Message [priority](../publish.md#message-priority) with 1=min, 3=default and 5=max |\n| `click`              | *String*                     | `https://google.com`                     | [Click action](../publish.md#click-action) URL, or empty if not set                |\n| `attachment_name`    | *String*                     | `attachment.jpg`                         | Filename of the attachment; may be empty if not set                                |\n| `attachment_type`    | *String*                     | `image/jpeg`                             | Mime type of the attachment; may be empty if not set                                |\n| `attachment_size`    | *Long*                       | `9923111`                                | Size in bytes of the attachment; may be zero if not set                            |\n| `attachment_expires` | *Long*                       | `1655514244`                             | Expiry date as Unix timestamp of the attachment URL; may be zero if not set        |\n| `attachment_url`     | *String*                     | `https://ntfy.sh/file/afUbjadfl7ErP.jpg` | URL of the attachment; may be empty if not set                                     |\n```\n\n----------------------------------------\n\nTITLE: Cloning ntfy Repository via HTTPS\nDESCRIPTION: Commands to clone the ntfy repository from GitHub using HTTPS and navigate to the project directory.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/binwiederhier/ntfy.git\ncd ntfy\n```\n\n----------------------------------------\n\nTITLE: Sample Email Content for Testing SMTP Server (Plain Text)\nDESCRIPTION: Example of a raw SMTP email message for testing the incoming email functionality of ntfy. This can be used with netcat (nc) to simulate sending an email to a ntfy topic.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nEHLO example.com\nMAIL FROM: phil@example.com\nRCPT TO: ntfy-mytopic@ntfy.sh\nDATA\nSubject: Email for you\nContent-Type: text/plain; charset=\"UTF-8\"\n\nHello from 🇩🇪\n.\n```\n\n----------------------------------------\n\nTITLE: Setting Up ntfy-client Systemd Service Override\nDESCRIPTION: Bash script to configure a systemd override for the ntfy-client service. This allows the service to run as the current user and interact with the desktop environment for notifications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo sh -c 'cat > /etc/systemd/system/ntfy-client.service.d/override.conf' <<EOF\n[Service]\nUser=$USER\nGroup=$USER\nEnvironment=\"DISPLAY=:0\" \"DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus\"\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart ntfy-client\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using Go\nDESCRIPTION: Uses Go's http package and os package to upload a local file as an attachment to a notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_178\n\nLANGUAGE: go\nCODE:\n```\nfile, _ := os.Open(\"flower.jpg\")\nreq, _ := http.NewRequest(\"PUT\", \"https://ntfy.sh/flowers\", file)\nreq.Header.Set(\"Filename\", \"flower.jpg\")\nhttp.DefaultClient.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ntfy Docker Image\nDESCRIPTION: This Dockerfile creates a custom ntfy image with a pre-configured server.yml file, simplifying deployment.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM binwiederhier/ntfy\nCOPY server.yml /etc/ntfy/server.yml\nENTRYPOINT [\"ntfy\", \"serve\"]\n```\n\n----------------------------------------\n\nTITLE: Action Header Format Examples\nDESCRIPTION: Demonstrates the basic format for defining action buttons using headers in both long and short form.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_101\n\nLANGUAGE: text\nCODE:\n```\naction=<action1>, label=<label1>, paramN=... [; action=<action2>, label=<label2>, ...]\n```\n\nLANGUAGE: text\nCODE:\n```\n<action1>, <label1>, paramN=... [; <action2>, <label2>, ...]\n```\n\n----------------------------------------\n\nTITLE: Installing ntfy Development Dependencies\nDESCRIPTION: Command to install essential build dependencies including C compiler, SQLite development libraries, cross-compilation tools, Python pip, and git for ntfy development.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install \\\n    build-essential \\\n    libsqlite3-dev \\\n    gcc-arm-linux-gnueabi \\\n    gcc-aarch64-linux-gnu \\\n    python3-pip \\\n    git\n```\n\n----------------------------------------\n\nTITLE: Using Loops in Go Templates for ntfy Notifications\nDESCRIPTION: Example of using range loops in Go templates to iterate through data structures. This template iterates through errors and conditionally displays severe ones.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_82\n\nLANGUAGE: go\nCODE:\n```\n{{range .errors}}{{if eq .level \"severe\"}}- {{.url}}\n{{end}}{{end}}\n```\n\n----------------------------------------\n\nTITLE: Example Trace Log Output from ntfy Server\nDESCRIPTION: Sample log output when running ntfy server with trace-level logging enabled. Shows extremely detailed information including HTTP request contents and internal message processing.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n$ ntfy serve --trace\n2023/03/20 14:40:42 INFO Listening on :2586[http] :1025[smtp], ntfy 2.1.2, log level is TRACE (tag=startup)\n2023/03/20 14:40:42 DEBUG Waiting until 2023-03-21 00:00:00 +0000 UTC to reset visitor stats (tag=resetter)\n2023/03/20 14:40:59 DEBUG Rate limiters reset for visitor (visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 TRACE HTTP request started (http_method=POST, http_path=/mytopic, http_request=POST /mytopic HTTP/1.1\nUser-Agent: curl/7.81.0\nAccept: */*\nContent-Length: 2\nContent-Type: application/x-www-form-urlencoded\n\nhi, tag=http, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 TRACE Received message (http_method=POST, http_path=/mytopic, message_body={\n  \"id\": \"Khaup1RVclU3\",\n  \"time\": 1679337659,\n  \"expires\": 1679380859,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"hi\"\n}, message_body_size=2, message_delayed=false, message_email=, message_event=message, message_firebase=true, message_id=Khaup1RVclU3, message_sender=127.0.0.1, message_time=1679337659, message_unifiedpush=false, tag=publish, topic=mytopic, topic_last_access=2023-03-20T14:40:59.893-04:00, topic_subscribers=0, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0001785048, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 DEBUG Adding message to cache (http_method=POST, http_path=/mytopic, message_body_size=2, message_event=message, message_id=Khaup1RVclU3, message_sender=127.0.0.1, message_time=1679337659, tag=publish, topic=mytopic, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0002044368, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 DEBUG HTTP request finished (http_method=POST, http_path=/mytopic, tag=http, time_taken_ms=1, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.000220502, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:40:59 TRACE No stream or WebSocket subscribers, not forwarding (message_body_size=2, message_event=message, message_id=Khaup1RVclU3, message_sender=127.0.0.1, message_time=1679337659, tag=publish, topic=mytopic, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0002369212, visitor_seen=2023-03-20T14:40:59.893-04:00)\n2023/03/20 14:41:00 DEBUG Wrote 1 message(s) in 9.529196ms (tag=message_cache)\n...\n```\n\n----------------------------------------\n\nTITLE: Webhook Trigger with HTTP Raw Request\nDESCRIPTION: Example of triggering a webhook using a raw HTTP GET request.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_66\n\nLANGUAGE: http\nCODE:\n```\nGET /mywebhook/trigger HTTP/1.1\nHost: ntfy.sh\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Caching in ntfy\nDESCRIPTION: Examples of how to disable server-side message caching using the 'X-Cache' or 'Cache' header set to 'no'. This prevents messages from being stored on the server, even if server-side caching is enabled.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_240\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic\ncurl -H \"Cache: no\" -d \"This message won't be stored server-side\" ntfy.sh/mytopic\n```\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --no-cache \\\n    mytopic \"This message won't be stored server-side\"\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /mytopic HTTP/1.1\nHost: ntfy.sh\nCache: no\n\nThis message won't be stored server-side\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mytopic', {\n    method: 'POST',\n    body: 'This message won't be stored server-side',\n    headers: { 'Cache': 'no' }\n})\n```\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mytopic\", strings.NewReader(\"This message won't be stored server-side\"))\nreq.Header.Set(\"Cache\", \"no\")\nhttp.DefaultClient.Do(req)\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Headers = @{ Cache=\"no\" }\n  Body = \"This message won't be stored server-side\"\n}\nInvoke-RestMethod @Request\n```\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/mytopic\",\n    data=\"This message won't be stored server-side\",\n    headers={ \"Cache\": \"no\" })\n```\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Cache: no\",\n        'content' => 'This message won't be stored server-side'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Running the ntfy Server with Web Push Enabled\nDESCRIPTION: Command to run the ntfy server with web push notification support, including configuration for public/private keys and file storage.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go \\\n  --log-level debug \\\n  serve \\\n    --web-push-public-key KEY \\\n    --web-push-private-key KEY \\\n    --web-push-email-address <email> \\\n    --web-push-file=/tmp/webpush.db\n```\n\n----------------------------------------\n\nTITLE: Watchtower Docker Configuration\nDESCRIPTION: Docker compose configuration for Watchtower notifications using ntfy\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  watchtower:\n    image: containrrr/watchtower\n    environment:\n      - WATCHTOWER_NOTIFICATION_SKIP_TITLE=True\n      - WATCHTOWER_NOTIFICATION_URL=ntfy://ntfy.sh/my_watchtower_topic?title=WatchtowerUpdates\n```\n\n----------------------------------------\n\nTITLE: Building the ntfy Documentation\nDESCRIPTION: Command to build the documentation using Make, which compiles the MkDocs site from the docs directory.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ make docs\n...\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of ntfy Templates\nDESCRIPTION: Partial example of using Go templates with PHP to send notifications to ntfy. The snippet appears to be incomplete in the original document.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_93\n\nLANGUAGE: php\nCODE:\n```\nphp-inline\n```\n\n----------------------------------------\n\nTITLE: Multi-Server Data Collection Scripts\nDESCRIPTION: Scripts for collecting and publishing data across multiple servers using ntfy\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwhile read result; do\n  [ -n \"$result\" ] && echo \"$result\" >> results.csv\ndone < <(stdbuf -i0 -o0 curl -s ntfy.sh/results/raw)\n```\n\nLANGUAGE: bash\nCODE:\n```\n// This script was run on each of the 20 servers. It was doing heavy processing ...\n\n// Publish script results\ncurl -d \"$(hostname),$count,$time\" ntfy.sh/results\n```\n\n----------------------------------------\n\nTITLE: Publishing with NTFY_TOPIC Environment Variable in Bash\nDESCRIPTION: Demonstrates the change in CLI usage for publishing messages with NTFY_TOPIC environment variable. The --env-topic flag is being removed, simplifying the command syntax.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/deprecations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ NTFY_TOPIC=mytopic ntfy publish --env-topic \"this is the message\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ NTFY_TOPIC=mytopic ntfy publish \"this is the message\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in PHP\nDESCRIPTION: This snippet demonstrates how to use PHP's file_get_contents function to send an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_239\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw', false, stream_context_create([\n    'http' => [\n        'method' => 'POST', // PUT also works\n        'header' => 'Content-Type: text/plain',\n        'content' => 'Look ma, with auth'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification using PHP\nDESCRIPTION: Uses PHP's file_get_contents with stream context to upload a local file as an attachment to a notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_181\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/flowers', false, stream_context_create([\n    'http' => [\n        'method' => 'PUT',\n        'header' =>\n            \"Content-Type: application/octet-stream\\r\\n\" . // Does not matter\n            \"Filename: flower.jpg\",\n        'content' => file_get_contents('flower.jpg') // Dangerous for large files \n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: ntfy Health Check API Response Format\nDESCRIPTION: JSON response format for the ntfy health check endpoint at /v1/health. This endpoint returns a simple JSON object with a boolean 'healthy' field to indicate server status.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\"healthy\":true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatus Alerts with ntfy\nDESCRIPTION: This YAML configuration demonstrates how to set up ntfy as an alerting provider in Gatus. It includes the ntfy URL, topic, and priority settings.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nalerting:\n  ntfy:\n    url: \"https://ntfy.sh\"\n    topic: \"YOUR_NTFY_TOPIC\"\n    priority: 3\n```\n\n----------------------------------------\n\nTITLE: Installing ntfy on Fedora/RHEL/CentOS (x86_64/amd64)\nDESCRIPTION: Installs ntfy using rpm and starts the ntfy service on Fedora/RHEL/CentOS systems.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm -ivh https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_linux_amd64.rpm\nsudo systemctl enable ntfy \nsudo systemctl start ntfy\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging in ntfy Server YAML\nDESCRIPTION: Configuration snippet for enabling debug-level logging in the ntfy server's server.yml file. This increases log verbosity to help diagnose issues.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlog-level: debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Authenticated Home Assistant REST Notify Component for ntfy\nDESCRIPTION: This YAML configuration demonstrates how to set up an authenticated REST notify component in Home Assistant for ntfy. It includes authentication details, ntfy topic, and other parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nnotify:\n  - name: ntfy\n    platform: rest\n    method: POST_JSON\n    authentication: basic\n    username: YOUR_USERNAME\n    password: YOUR_PASSWORD\n    data:\n      topic: YOUR_NTFY_TOPIC\n    title_param_name: title\n    message_param_name: message\n    resource: https://ntfy.sh\n```\n\n----------------------------------------\n\nTITLE: Running ntfy Server in Bash\nDESCRIPTION: Shows the change in command to run the ntfy server. The command is updated from just 'ntfy' to 'ntfy serve' for better clarity and to accommodate additional CLI commands.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/deprecations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy\n2021/12/17 08:16:01 Listening on :80/http\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy serve\n2021/12/17 08:16:01 Listening on :80/http\n```\n\n----------------------------------------\n\nTITLE: Subscribing to JSON Stream using HTTP GET Request\nDESCRIPTION: This snippet illustrates the HTTP request and response format for subscribing to a ntfy topic's JSON stream.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /disk-alerts/json HTTP/1.1\nHost: ntfy.sh\n\nHTTP/1.1 200 OK\nContent-Type: application/x-ndjson; charset=utf-8\nTransfer-Encoding: chunked\n\n{\"id\":\"SLiKI64DOt\",\"time\":1635528757,\"event\":\"open\",\"topic\":\"mytopic\"}\n{\"id\":\"hwQ2YpKdmg\",\"time\":1635528741,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"Disk full\"}\n{\"id\":\"DGUDShMCsc\",\"time\":1635528787,\"event\":\"keepalive\",\"topic\":\"mytopic\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Alerting Provider in Gatus for ntfy\nDESCRIPTION: This YAML configuration shows an alternative way to set up ntfy alerts in Gatus using the custom alerting provider. It includes detailed settings for the HTTP request and placeholders for alert status.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/examples.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nalerting:\n  custom:\n    url: \"https://ntfy.sh\"\n    method: \"POST\"\n    body: |\n      {\n        \"topic\": \"mytopic\",\n        \"message\": \"[ENDPOINT_NAME] - [ALERT_DESCRIPTION]\",\n        \"title\": \"Gatus\",\n        \"tags\": [\"[ALERT_TRIGGERED_OR_RESOLVED]\"],\n        \"priority\": 3\n      }\n    default-alert:\n      enabled: true\n      description: \"health check failed\"\n      send-on-resolved: true\n      failure-threshold: 3\n      success-threshold: 3\n    placeholders:\n      ALERT_TRIGGERED_OR_RESOLVED:\n        TRIGGERED: \"warning\"\n        RESOLVED: \"white_check_mark\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics in JSON Mode with ntfy CLI\nDESCRIPTION: Example showing how to subscribe to a topic and receive messages in JSON format for stream processing.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy sub mytopic\n{\"id\":\"nZ8PjH5oox\",\"time\":1639971913,\"event\":\"message\",\"topic\":\"mytopic\",\"message\":\"hi there\"}\n{\"id\":\"sekSLWTujn\",\"time\":1639972063,\"event\":\"message\",\"topic\":\"mytopic\",priority:5,\"message\":\"Oh no!\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Firebase Error Log Example\nDESCRIPTION: Example log message shown when Firebase quota is exceeded for a topic, triggering temporary access denial for the visitor\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\nWARN Firebase quota exceeded (likely for topic), temporarily denying Firebase access to visitor\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Logging in ntfy Server YAML\nDESCRIPTION: Configuration snippet for enabling trace-level logging in the ntfy server's server.yml file. This provides the maximum level of detail for troubleshooting server issues.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlog-level: trace\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Template - cURL Example\nDESCRIPTION: Example showing how to publish a message using ntfy's templating feature with a JSON body\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/releases.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -gd '{\"alert\":\"Disk space low\"}' \"ntfy.sh/mytopic?tpl=1&m={{.alert}}\"\n```\n\n----------------------------------------\n\nTITLE: Grafana Alert Title Template for ntfy\nDESCRIPTION: A simple Go template for formatting the title of Grafana alerts in ntfy notifications. This template simply passes through the title field from the alert data.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_84\n\nLANGUAGE: go\nCODE:\n```\n{{.title}}\n```\n\n----------------------------------------\n\nTITLE: Attaching External URL File to Notification using PHP\nDESCRIPTION: Uses PHP's file_get_contents with stream context to send a notification with a file attachment from an external URL.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_189\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mydownloads', false, stream_context_create([\n    'http' => [\n    'method' => 'PUT',\n    'header' =>\n        \"Content-Type: text/plain\\r\\n\" . // Does not matter\n        \"Attach: https://f-droid.org/F-Droid.apk\",\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Disabling Firebase Integration in ntfy\nDESCRIPTION: Examples of how to disable forwarding messages to Firebase Cloud Messaging (FCM) using the 'X-Firebase' or 'Firebase' header set to 'no'. This prevents messages from being sent to FCM topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_241\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic\ncurl -H \"Firebase: no\" -d \"This message won't be forwarded to FCM\" ntfy.sh/mytopic\n```\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --no-firebase \\\n    mytopic \"This message won't be forwarded to FCM\"\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /mytopic HTTP/1.1\nHost: ntfy.sh\nFirebase: no\n\nThis message won't be forwarded to FCM\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://ntfy.sh/mytopic', {\n    method: 'POST',\n    body: 'This message won't be forwarded to FCM',\n    headers: { 'Firebase': 'no' }\n})\n```\n\nLANGUAGE: go\nCODE:\n```\nreq, _ := http.NewRequest(\"POST\", \"https://ntfy.sh/mytopic\", strings.NewReader(\"This message won't be forwarded to FCM\"))\nreq.Header.Set(\"Firebase\", \"no\")\nhttp.DefaultClient.Do(req)\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/mytopic\"\n  Headers = @{ Firebase=\"no\" }\n  Body = \"This message won't be forwarded to FCM\"\n}\nInvoke-RestMethod @Request\n```\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/mytopic\",\n    data=\"This message won't be forwarded to FCM\",\n    headers={ \"Firebase\": \"no\" })\n```\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mytopic', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Firebase: no\",\n        'content' => 'This message won't be stored server-side'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji Code Mappings in HTML Table\nDESCRIPTION: This HTML snippet defines a table structure that maps text codes to their corresponding emoji characters. Each row contains a code wrapped in <code> tags and its emoji representation.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>giraffe</code></td><td class=e>🦒</td></tr>\n<tr><td class=c><code>elephant</code></td><td class=e>🐘</td></tr>\n<tr><td class=c><code>mammoth</code></td><td class=e>🦣</td></tr>\n<!-- ... more rows ... -->\n<tr><td class=c><code>bagel</code></td><td class=e>🥯</td></tr>\n<tr><td class=c><code>pancakes</code></td><td class=e>🥞</td></tr>\n<tr><td class=c><code>waffle</code></td><td class=e>🧇</td></tr>\n<tr><td class=c><code>cheese</code></td><td class=e>🧀</td></tr>\n<tr><td class=c><code>meat_on_bone</code></td><td class=e>🍖</td></tr>\n<tr><td class=c><code>poultry_leg</code></td><td class=e>🍗</td></tr>\n<tr><td class=c><code>cut_of_meat</code></td><td class=e>🥩</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Using ADB to Access Android App Logs\nDESCRIPTION: Commands for accessing detailed logs from the ntfy Android app using Android Debug Bridge (adb). Includes instructions for connecting to the phone wirelessly and filtering logs specifically for the ntfy application process.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/troubleshooting.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to phone (enable Wireless debugging first)\nadb connect 192.168.1.137:39539\n\n# Print all logs; you may have to pass the -s option\nadb logcat\nadb -s 192.168.1.137:39539 logcat\n\n# Only list ntfy logs\nadb logcat --pid=$(adb shell pidof -s io.heckel.ntfy)\nadb -s 192.168.1.137:39539 logcat --pid=$(adb -s 192.168.1.137:39539 shell pidof -s io.heckel.ntfy)\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji Shortcode to Unicode Character Mappings in HTML\nDESCRIPTION: This HTML snippet defines a table row that maps an emoji shortcode to its corresponding Unicode character. Each row contains two cells: one for the shortcode wrapped in a <code> tag, and another for the emoji character itself.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>wrench</code></td><td class=e>🔧</td></tr>\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Data JSON\nDESCRIPTION: Represents a GitHub pull request response including repository information, user details, and API endpoints. Contains metadata about the pull request status, comments, commits and associated repository.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"merged\": false,\n  \"mergeable\": null,\n  \"rebaseable\": null,\n  \"mergeable_state\": \"unknown\",\n  \"merged_by\": null,\n  \"comments\": 0,\n  \"review_comments\": 0,\n  \"maintainer_can_modify\": false,\n  \"commits\": 1,\n  \"additions\": 1,\n  \"deletions\": 1,\n  \"changed_files\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting System-Wide File Descriptor Limits for ntfy\nDESCRIPTION: Configuration for /etc/security/limits.conf to increase the open files limit globally outside of systemd environments, enabling ntfy to handle more concurrent connections.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/config.md#2025-04-21_snippet_44\n\nLANGUAGE: conf\nCODE:\n```\n# Increase open files limit globally\n* hard nofile 20500\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Emoji Shortcode-to-Character Mapping\nDESCRIPTION: This HTML table maps emoji shortcodes to their visual representations. Each row contains a code element with the shortcode and its corresponding emoji character. The table includes transportation, time-related, celestial, and weather emoji.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>barber</code></td><td class=e>💈</td></tr>\n<tr><td class=c><code>circus_tent</code></td><td class=e>🎪</td></tr>\n<tr><td class=c><code>steam_locomotive</code></td><td class=e>🚂</td></tr>\n<tr><td class=c><code>railway_car</code></td><td class=e>🚃</td></tr>\n<tr><td class=c><code>bullettrain_side</code></td><td class=e>🚄</td></tr>\n<tr><td class=c><code>bullettrain_front</code></td><td class=e>🚅</td></tr>\n<tr><td class=c><code>train2</code></td><td class=e>🚆</td></tr>\n<tr><td class=c><code>metro</code></td><td class=e>🚇</td></tr>\n<tr><td class=c><code>light_rail</code></td><td class=e>🚈</td></tr>\n<tr><td class=c><code>station</code></td><td class=e>🚉</td></tr>\n<tr><td class=c><code>tram</code></td><td class=e>🚊</td></tr>\n<tr><td class=c><code>monorail</code></td><td class=e>🚝</td></tr>\n<tr><td class=c><code>mountain_railway</code></td><td class=e>🚞</td></tr>\n<tr><td class=c><code>train</code></td><td class=e>🚋</td></tr>\n<tr><td class=c><code>bus</code></td><td class=e>🚌</td></tr>\n<tr><td class=c><code>oncoming_bus</code></td><td class=e>🚍</td></tr>\n<tr><td class=c><code>trolleybus</code></td><td class=e>🚎</td></tr>\n<tr><td class=c><code>minibus</code></td><td class=e>🚐</td></tr>\n<tr><td class=c><code>ambulance</code></td><td class=e>🚑</td></tr>\n<tr><td class=c><code>fire_engine</code></td><td class=e>🚒</td></tr>\n<tr><td class=c><code>police_car</code></td><td class=e>🚓</td></tr>\n<tr><td class=c><code>oncoming_police_car</code></td><td class=e>🚔</td></tr>\n<tr><td class=c><code>taxi</code></td><td class=e>🚕</td></tr>\n<tr><td class=c><code>oncoming_taxi</code></td><td class=e>🚖</td></tr>\n<tr><td class=c><code>car</code></td><td class=e>🚗</td></tr>\n<tr><td class=c><code>oncoming_automobile</code></td><td class=e>🚘</td></tr>\n<tr><td class=c><code>blue_car</code></td><td class=e>🚙</td></tr>\n<tr><td class=c><code>pickup_truck</code></td><td class=e>🛻</td></tr>\n<tr><td class=c><code>truck</code></td><td class=e>🚚</td></tr>\n<tr><td class=c><code>articulated_lorry</code></td><td class=e>🚛</td></tr>\n<tr><td class=c><code>tractor</code></td><td class=e>🚜</td></tr>\n<tr><td class=c><code>racing_car</code></td><td class=e>🏎️</td></tr>\n<tr><td class=c><code>motorcycle</code></td><td class=e>🏍️</td></tr>\n<tr><td class=c><code>motor_scooter</code></td><td class=e>🛵</td></tr>\n<tr><td class=c><code>manual_wheelchair</code></td><td class=e>🦽</td></tr>\n<tr><td class=c><code>motorized_wheelchair</code></td><td class=e>🦼</td></tr>\n<tr><td class=c><code>auto_rickshaw</code></td><td class=e>🛺</td></tr>\n<tr><td class=c><code>bike</code></td><td class=e>🚲</td></tr>\n<tr><td class=c><code>kick_scooter</code></td><td class=e>🛴</td></tr>\n<tr><td class=c><code>skateboard</code></td><td class=e>🛹</td></tr>\n<tr><td class=c><code>roller_skate</code></td><td class=e>🛼</td></tr>\n<tr><td class=c><code>busstop</code></td><td class=e>🚏</td></tr>\n<tr><td class=c><code>motorway</code></td><td class=e>🛣️</td></tr>\n<tr><td class=c><code>railway_track</code></td><td class=e>🛤️</td></tr>\n<tr><td class=c><code>oil_drum</code></td><td class=e>🛢️</td></tr>\n<tr><td class=c><code>fuelpump</code></td><td class=e>⛽</td></tr>\n<tr><td class=c><code>rotating_light</code></td><td class=e>🚨</td></tr>\n<tr><td class=c><code>traffic_light</code></td><td class=e>🚥</td></tr>\n<tr><td class=c><code>vertical_traffic_light</code></td><td class=e>🚦</td></tr>\n<tr><td class=c><code>stop_sign</code></td><td class=e>🛑</td></tr>\n<tr><td class=c><code>construction</code></td><td class=e>🚧</td></tr>\n<tr><td class=c><code>anchor</code></td><td class=e>⚓</td></tr>\n<tr><td class=c><code>boat</code></td><td class=e>⛵</td></tr>\n<tr><td class=c><code>canoe</code></td><td class=e>🛶</td></tr>\n<tr><td class=c><code>speedboat</code></td><td class=e>🚤</td></tr>\n<tr><td class=c><code>passenger_ship</code></td><td class=e>🛳️</td></tr>\n<tr><td class=c><code>ferry</code></td><td class=e>⛴️</td></tr>\n<tr><td class=c><code>motor_boat</code></td><td class=e>🛥️</td></tr>\n<tr><td class=c><code>ship</code></td><td class=e>🚢</td></tr>\n<tr><td class=c><code>airplane</code></td><td class=e>✈️</td></tr>\n<tr><td class=c><code>small_airplane</code></td><td class=e>🛩️</td></tr>\n<tr><td class=c><code>flight_departure</code></td><td class=e>🛫</td></tr>\n<tr><td class=c><code>flight_arrival</code></td><td class=e>🛬</td></tr>\n<tr><td class=c><code>parachute</code></td><td class=e>🪂</td></tr>\n<tr><td class=c><code>seat</code></td><td class=e>💺</td></tr>\n<tr><td class=c><code>helicopter</code></td><td class=e>🚁</td></tr>\n<tr><td class=c><code>suspension_railway</code></td><td class=e>🚟</td></tr>\n<tr><td class=c><code>mountain_cableway</code></td><td class=e>🚠</td></tr>\n<tr><td class=c><code>aerial_tramway</code></td><td class=e>🚡</td></tr>\n<tr><td class=c><code>artificial_satellite</code></td><td class=e>🛰️</td></tr>\n<tr><td class=c><code>rocket</code></td><td class=e>🚀</td></tr>\n<tr><td class=c><code>flying_saucer</code></td><td class=e>🛸</td></tr>\n<tr><td class=c><code>bellhop_bell</code></td><td class=e>🛎️</td></tr>\n<tr><td class=c><code>luggage</code></td><td class=e>🧳</td></tr>\n<tr><td class=c><code>hourglass</code></td><td class=e>⌛</td></tr>\n<tr><td class=c><code>hourglass_flowing_sand</code></td><td class=e>⏳</td></tr>\n<tr><td class=c><code>watch</code></td><td class=e>⌚</td></tr>\n<tr><td class=c><code>alarm_clock</code></td><td class=e>⏰</td></tr>\n<tr><td class=c><code>stopwatch</code></td><td class=e>⏱️</td></tr>\n<tr><td class=c><code>timer_clock</code></td><td class=e>⏲️</td></tr>\n<tr><td class=c><code>mantelpiece_clock</code></td><td class=e>🕰️</td></tr>\n<tr><td class=c><code>clock12</code></td><td class=e>🕛</td></tr>\n<tr><td class=c><code>clock1230</code></td><td class=e>🕧</td></tr>\n<tr><td class=c><code>clock1</code></td><td class=e>🕐</td></tr>\n<tr><td class=c><code>clock130</code></td><td class=e>🕜</td></tr>\n<tr><td class=c><code>clock2</code></td><td class=e>🕑</td></tr>\n<tr><td class=c><code>clock230</code></td><td class=e>🕝</td></tr>\n<tr><td class=c><code>clock3</code></td><td class=e>🕒</td></tr>\n<tr><td class=c><code>clock330</code></td><td class=e>🕞</td></tr>\n<tr><td class=c><code>clock4</code></td><td class=e>🕓</td></tr>\n<tr><td class=c><code>clock430</code></td><td class=e>🕟</td></tr>\n<tr><td class=c><code>clock5</code></td><td class=e>🕔</td></tr>\n<tr><td class=c><code>clock530</code></td><td class=e>🕠</td></tr>\n<tr><td class=c><code>clock6</code></td><td class=e>🕕</td></tr>\n<tr><td class=c><code>clock630</code></td><td class=e>🕡</td></tr>\n<tr><td class=c><code>clock7</code></td><td class=e>🕖</td></tr>\n<tr><td class=c><code>clock730</code></td><td class=e>🕢</td></tr>\n<tr><td class=c><code>clock8</code></td><td class=e>🕗</td></tr>\n<tr><td class=c><code>clock830</code></td><td class=e>🕣</td></tr>\n<tr><td class=c><code>clock9</code></td><td class=e>🕘</td></tr>\n<tr><td class=c><code>clock930</code></td><td class=e>🕤</td></tr>\n<tr><td class=c><code>clock10</code></td><td class=e>🕙</td></tr>\n<tr><td class=c><code>clock1030</code></td><td class=e>🕥</td></tr>\n<tr><td class=c><code>clock11</code></td><td class=e>🕚</td></tr>\n<tr><td class=c><code>clock1130</code></td><td class=e>🕦</td></tr>\n<tr><td class=c><code>new_moon</code></td><td class=e>🌑</td></tr>\n<tr><td class=c><code>waxing_crescent_moon</code></td><td class=e>🌒</td></tr>\n<tr><td class=c><code>first_quarter_moon</code></td><td class=e>🌓</td></tr>\n<tr><td class=c><code>moon</code></td><td class=e>🌔</td></tr>\n<tr><td class=c><code>full_moon</code></td><td class=e>🌕</td></tr>\n<tr><td class=c><code>waning_gibbous_moon</code></td><td class=e>🌖</td></tr>\n<tr><td class=c><code>last_quarter_moon</code></td><td class=e>🌗</td></tr>\n<tr><td class=c><code>waning_crescent_moon</code></td><td class=e>🌘</td></tr>\n<tr><td class=c><code>crescent_moon</code></td><td class=e>🌙</td></tr>\n<tr><td class=c><code>new_moon_with_face</code></td><td class=e>🌚</td></tr>\n<tr><td class=c><code>first_quarter_moon_with_face</code></td><td class=e>🌛</td></tr>\n<tr><td class=c><code>last_quarter_moon_with_face</code></td><td class=e>🌜</td></tr>\n<tr><td class=c><code>thermometer</code></td><td class=e>🌡️</td></tr>\n<tr><td class=c><code>sunny</code></td><td class=e>☀️</td></tr>\n<tr><td class=c><code>full_moon_with_face</code></td><td class=e>🌝</td></tr>\n<tr><td class=c><code>sun_with_face</code></td><td class=e>🌞</td></tr>\n<tr><td class=c><code>ringed_planet</code></td><td class=e>🪐</td></tr>\n<tr><td class=c><code>star</code></td><td class=e>⭐</td></tr>\n<tr><td class=c><code>star2</code></td><td class=e>🌟</td></tr>\n<tr><td class=c><code>stars</code></td><td class=e>🌠</td></tr>\n<tr><td class=c><code>milky_way</code></td><td class=e>🌌</td></tr>\n<tr><td class=c><code>cloud</code></td><td class=e>☁️</td></tr>\n<tr><td class=c><code>partly_sunny</code></td><td class=e>⛅</td></tr>\n<tr><td class=c><code>cloud_with_lightning_and_rain</code></td><td class=e>⛈️</td></tr>\n<tr><td class=c><code>sun_behind_small_cloud</code></td><td class=e>🌤️</td></tr>\n<tr><td class=c><code>sun_behind_large_cloud</code></td><td class=e>🌥️</td></tr>\n<tr><td class=c><code>sun_behind_rain_cloud</code></td><td class=e>🌦️</td></tr>\n<tr><td class=c><code>cloud_with_rain</code></td><td class=e>🌧️</td></tr>\n<tr><td class=c><code>cloud_with_snow</code></td><td class=e>🌨️</td></tr>\n<tr><td class=c><code>cloud_with_lightning</code></td><td class=e>🌩️</td></tr>\n<tr><td class=c><code>tornado</code></td><td class=e>🌪️</td></tr>\n<tr><td class=c><code>fog</code></td><td class=e>🌫️</td></tr>\n<tr><td class=c><code>wind_face</code></td><td class=e>🌬️</td></tr>\n<tr><td class=c><code>cyclone</code></td><td class=e>🌀</td></tr>\n<tr><td class=c><code>rainbow</code></td><td class=e>🌈</td></tr>\n<tr><td class=c><code>closed_umbrella</code></td><td class=e>🌂</td></tr>\n<tr><td class=c><code>open_umbrella</code></td><td class=e>☂️</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Example - YAML\nDESCRIPTION: Example showing how to configure client authentication settings in client.yml\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/releases.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuser:pass/token\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with PowerShell (X-Actions header)\nDESCRIPTION: Example of using PowerShell's Invoke-RestMethod to send a notification with a view action that opens a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_123\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh/myhome\"\n  Headers = @{\n    Actions = \"view, Open Twitter, https://twitter.com/binwiederhier/status/1467633927951163392\"\n  }\n  Body = \"Somebody retweeted your tweet.\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in PowerShell 7+\nDESCRIPTION: This snippet demonstrates how to use PowerShell 7 or greater to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_228\n\nLANGUAGE: powershell\nCODE:\n```\n# With PowerShell 7 or greater, we can use the Authentication and Token parameters\n# The Token parameter must be in the form of a System.Security.SecureString\n\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Authentication = \"Bearer\"\n  Token = ConvertTo-SecureString \"tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\" -AsPlainText\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Implementing Templates in curl Requests for ntfy\nDESCRIPTION: Example of using Go templates with curl to send notifications to ntfy. This demonstrates how to disable curl's globbing to properly handle template syntax with braces.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\n# To use { and } in the URL without encoding, we need to turn of\n# curl's globbing using --globoff\n\ncurl \\\n    --globoff \\\n    -d '{\"hostname\": \"phil-pc\", \"error\": {\"level\": \"severe\", \"desc\": \"Disk has run out of space\"}}' \\\n    'ntfy.sh/mytopic?tpl=yes&t={{.hostname}}:+A+{{.error.level}}+error+has+occurred&m=Error+message:+{{.error.desc}}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Emoji Shortcode and Symbol Pairs in HTML Table\nDESCRIPTION: This HTML snippet shows the structure used to display emoji shortcodes and their corresponding symbols in a table format. Each row contains a shortcode in the first column and the emoji symbol in the second column.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>umbrella</code></td><td class=e>☔</td></tr>\n<tr><td class=c><code>parasol_on_ground</code></td><td class=e>⛱️</td></tr>\n<tr><td class=c><code>zap</code></td><td class=e>⚡</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Example of Android App Log Output\nDESCRIPTION: An example showing the format of logs from the ntfy Android app when copied or uploaded with censoring. It includes device info and timestamped log entries with masked topics and hostnames replaced by fruit names for privacy.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThis is a log of the ntfy Android app. The log shows up to 1,000 entries.\nServer URLs (aside from ntfy.sh) and topics have been replaced with fruits 🍌🥝🍋🥥🥑🍊🍎🍑.\n\nDevice info:\n--\nntfy: 1.16.0 (play)\nOS: 4.19.157-perf+\nAndroid: 13 (SDK 33)\n...\n\nLogs\n--\n\n1679339199507 2023-03-20 15:06:39.507 D NtfyMainActivity Battery: ignoring optimizations = true (we want this to be true); instant subscriptions = true; remind time reached = true; banner = false\n1679339199507 2023-03-20 15:06:39.507 D NtfySubscriberMgr Enqueuing work to refresh subscriber service\n1679339199589 2023-03-20 15:06:39.589 D NtfySubscriberMgr ServiceStartWorker: Starting foreground service with action START (work ID: a7eeeae9-9356-40df-afbd-236e5ed10a0b)\n1679339199602 2023-03-20 15:06:39.602 D NtfySubscriberService onStartCommand executed with startId: 262\n1679339199602 2023-03-20 15:06:39.602 D NtfySubscriberService using an intent with action START\n1679339199629 2023-03-20 15:06:39.629 D NtfySubscriberService Refreshing subscriptions\n1679339199629 2023-03-20 15:06:39.629 D NtfySubscriberService - Desired connections: [ConnectionId(baseUrl=https://ntfy.sh, topicsToSubscriptionIds={avocado=23801492, lemon=49013182, banana=1309176509201171073, peach=573300885184666424, pineapple=-5956897229801209316, durian=81453333, starfruit=30489279, fruit12=82532869}), ConnectionId(baseUrl=https://orange.example.com, topicsToSubscriptionIds={apple=4971265, dragonfruit=66809328})]\n1679339199629 2023-03-20 15:06:39.629 D NtfySubscriberService - Active connections: [ConnectionId(baseUrl=https://orange.example.com, topicsToSubscriptionIds={apple=4971265, dragonfruit=66809328}), ConnectionId(baseUrl=https://ntfy.sh, topicsToSubscriptionIds={avocado=23801492, lemon=49013182, banana=1309176509201171073, peach=573300885184666424, pineapple=-5956897229801209316, durian=81453333, starfruit=30489279, fruit12=82532869})]\n...\n```\n\n----------------------------------------\n\nTITLE: Grafana Alert Message Template for ntfy\nDESCRIPTION: A Go template for formatting Grafana alerts in ntfy messages. This template iterates through alerts and their values to create a structured notification.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_83\n\nLANGUAGE: go\nCODE:\n```\n{{range .alerts}}\n  {{.annotations.summary}}\n  \n  Values:\n  {{range $k,$v := .values}}\n    - {{$k}}={{$v}}\n  {{end}}\n{{end}}\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs Dependencies for Python Documentation\nDESCRIPTION: Lists the required Python packages for generating documentation with MkDocs. Includes the mkdocs-material theme for styling and the mkdocs-minify-plugin for optimizing the generated HTML pages.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-material\nmkdocs-minify-plugin\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Bearer Token in PowerShell 5 and earlier\nDESCRIPTION: This snippet shows how to use PowerShell 5 and earlier versions to send an authenticated POST request to ntfy using a Bearer token.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_229\n\nLANGUAGE: powershell\nCODE:\n```\n# In PowerShell 5 and below, we can only send the Bearer token as a string in the Headers\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Headers = @{ Authorization = \"Bearer tk_AgQdq7mVBoFD37zQVN29RhuMzNIz2\" }\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Installing ntfy on macOS\nDESCRIPTION: Downloads the ntfy binary for macOS, extracts it, copies it to the system path, and sets up the configuration file.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/install.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/binwiederhier/ntfy/releases/download/v2.11.0/ntfy_2.11.0_darwin_all.tar.gz > ntfy_2.11.0_darwin_all.tar.gz\ntar zxvf ntfy_2.11.0_darwin_all.tar.gz\nsudo cp -a ntfy_2.11.0_darwin_all/ntfy /usr/local/bin/ntfy\nmkdir ~/Library/Application\\ Support/ntfy \ncp ntfy_2.11.0_darwin_all/client/client.yml ~/Library/Application\\ Support/ntfy/client.yml\nntfy --help\n```\n\n----------------------------------------\n\nTITLE: Installing GoReleaser for ntfy Builds\nDESCRIPTION: Commands to install GoReleaser using Go's package manager and verify the installation. GoReleaser is required for building proper ntfy server releases.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/goreleaser/goreleaser@latest\ngoreleaser -v   # verifies that it worked\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in PowerShell\nDESCRIPTION: This snippet demonstrates how to use PowerShell to send an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_237\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\"\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Example Debug Log Output from ntfy Server\nDESCRIPTION: Sample log output when running ntfy server with debug-level logging enabled. Shows how requests are processed, rate limits applied, and messages handled.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n$ ntfy serve --debug\n2023/03/20 14:45:38 INFO Listening on :2586[http] :1025[smtp], ntfy 2.1.2, log level is DEBUG (tag=startup)\n2023/03/20 14:45:38 DEBUG Waiting until 2023-03-21 00:00:00 +0000 UTC to reset visitor stats (tag=resetter)\n2023/03/20 14:45:39 DEBUG Rate limiters reset for visitor (visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG HTTP request started (http_method=POST, http_path=/mytopic, tag=http, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=0, visitor_messages_limit=500, visitor_messages_remaining=500, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=60, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG Received message (http_method=POST, http_path=/mytopic, message_body_size=2, message_delayed=false, message_email=, message_event=message, message_firebase=true, message_id=EZu6i2WZjH0v, message_sender=127.0.0.1, message_time=1679337939, message_unifiedpush=false, tag=publish, topic=mytopic, topic_last_access=2023-03-20T14:45:38.319-04:00, topic_subscribers=0, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0002132248, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG Adding message to cache (http_method=POST, http_path=/mytopic, message_body_size=2, message_event=message, message_id=EZu6i2WZjH0v, message_sender=127.0.0.1, message_time=1679337939, tag=publish, topic=mytopic, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.000259165, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG HTTP request finished (http_method=POST, http_path=/mytopic, tag=http, time_taken_ms=2, visitor_auth_limiter_limit=0.016666666666666666, visitor_auth_limiter_tokens=10, visitor_emails=0, visitor_emails_limit=12, visitor_emails_remaining=12, visitor_id=ip:127.0.0.1, visitor_ip=127.0.0.1, visitor_messages=1, visitor_messages_limit=500, visitor_messages_remaining=499, visitor_request_limiter_limit=0.2, visitor_request_limiter_tokens=59.0004147334, visitor_seen=2023-03-20T14:45:39.7-04:00)\n2023/03/20 14:45:39 DEBUG Wrote 1 message(s) in 8.285712ms (tag=message_cache)\n...\n```\n\n----------------------------------------\n\nTITLE: Mapping Country Codes to Flag Emoji in HTML\nDESCRIPTION: This HTML table provides a mapping between country code identifiers and their corresponding flag emoji characters. Each country is represented as a table row containing the country code and its associated Unicode flag emoji. This mapping can be used for internationalization and localization features in applications.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<tr><td class=c><code>st_martin</code></td><td class=e>🇲🇫</td></tr>\n<tr><td class=c><code>madagascar</code></td><td class=e>🇲🇬</td></tr>\n<tr><td class=c><code>marshall_islands</code></td><td class=e>🇲🇭</td></tr>\n<tr><td class=c><code>macedonia</code></td><td class=e>🇲🇰</td></tr>\n<tr><td class=c><code>mali</code></td><td class=e>🇲🇱</td></tr>\n<tr><td class=c><code>myanmar</code></td><td class=e>🇲🇲</td></tr>\n<tr><td class=c><code>mongolia</code></td><td class=e>🇲🇳</td></tr>\n<tr><td class=c><code>macau</code></td><td class=e>🇲🇴</td></tr>\n<tr><td class=c><code>northern_mariana_islands</code></td><td class=e>🇲🇵</td></tr>\n<tr><td class=c><code>martinique</code></td><td class=e>🇲🇶</td></tr>\n<tr><td class=c><code>mauritania</code></td><td class=e>🇲🇷</td></tr>\n<tr><td class=c><code>montserrat</code></td><td class=e>🇲🇸</td></tr>\n<tr><td class=c><code>malta</code></td><td class=e>🇲🇹</td></tr>\n<tr><td class=c><code>mauritius</code></td><td class=e>🇲🇺</td></tr>\n<tr><td class=c><code>maldives</code></td><td class=e>🇲🇻</td></tr>\n<tr><td class=c><code>malawi</code></td><td class=e>🇲🇼</td></tr>\n<tr><td class=c><code>mexico</code></td><td class=e>🇲🇽</td></tr>\n<tr><td class=c><code>malaysia</code></td><td class=e>🇲🇾</td></tr>\n<tr><td class=c><code>mozambique</code></td><td class=e>🇲🇿</td></tr>\n<tr><td class=c><code>namibia</code></td><td class=e>🇳🇦</td></tr>\n<tr><td class=c><code>new_caledonia</code></td><td class=e>🇳🇨</td></tr>\n<tr><td class=c><code>niger</code></td><td class=e>🇳🇪</td></tr>\n<tr><td class=c><code>norfolk_island</code></td><td class=e>🇳🇫</td></tr>\n<tr><td class=c><code>nigeria</code></td><td class=e>🇳🇬</td></tr>\n<tr><td class=c><code>nicaragua</code></td><td class=e>🇳🇮</td></tr>\n<tr><td class=c><code>netherlands</code></td><td class=e>🇳🇱</td></tr>\n<tr><td class=c><code>norway</code></td><td class=e>🇳🇴</td></tr>\n<tr><td class=c><code>nepal</code></td><td class=e>🇳🇵</td></tr>\n<tr><td class=c><code>nauru</code></td><td class=e>🇳🇷</td></tr>\n<tr><td class=c><code>niue</code></td><td class=e>🇳🇺</td></tr>\n<tr><td class=c><code>new_zealand</code></td><td class=e>🇳🇿</td></tr>\n<tr><td class=c><code>oman</code></td><td class=e>🇴🇲</td></tr>\n<tr><td class=c><code>panama</code></td><td class=e>🇵🇦</td></tr>\n<tr><td class=c><code>peru</code></td><td class=e>🇵🇪</td></tr>\n<tr><td class=c><code>french_polynesia</code></td><td class=e>🇵🇫</td></tr>\n<tr><td class=c><code>papua_new_guinea</code></td><td class=e>🇵🇬</td></tr>\n<tr><td class=c><code>philippines</code></td><td class=e>🇵🇭</td></tr>\n<tr><td class=c><code>pakistan</code></td><td class=e>🇵🇰</td></tr>\n<tr><td class=c><code>poland</code></td><td class=e>🇵🇱</td></tr>\n<tr><td class=c><code>st_pierre_miquelon</code></td><td class=e>🇵🇲</td></tr>\n<tr><td class=c><code>pitcairn_islands</code></td><td class=e>🇵🇳</td></tr>\n<tr><td class=c><code>puerto_rico</code></td><td class=e>🇵🇷</td></tr>\n<tr><td class=c><code>palestinian_territories</code></td><td class=e>🇵🇸</td></tr>\n<tr><td class=c><code>portugal</code></td><td class=e>🇵🇹</td></tr>\n<tr><td class=c><code>palau</code></td><td class=e>🇵🇼</td></tr>\n<tr><td class=c><code>paraguay</code></td><td class=e>🇵🇾</td></tr>\n<tr><td class=c><code>qatar</code></td><td class=e>🇶🇦</td></tr>\n<tr><td class=c><code>reunion</code></td><td class=e>🇷🇪</td></tr>\n<tr><td class=c><code>romania</code></td><td class=e>🇷🇴</td></tr>\n<tr><td class=c><code>serbia</code></td><td class=e>🇷🇸</td></tr>\n<tr><td class=c><code>ru</code></td><td class=e>🇷🇺</td></tr>\n<tr><td class=c><code>rwanda</code></td><td class=e>🇷🇼</td></tr>\n<tr><td class=c><code>saudi_arabia</code></td><td class=e>🇸🇦</td></tr>\n<tr><td class=c><code>solomon_islands</code></td><td class=e>🇸🇧</td></tr>\n<tr><td class=c><code>seychelles</code></td><td class=e>🇸🇨</td></tr>\n<tr><td class=c><code>sudan</code></td><td class=e>🇸🇩</td></tr>\n<tr><td class=c><code>sweden</code></td><td class=e>🇸🇪</td></tr>\n<tr><td class=c><code>singapore</code></td><td class=e>🇸🇬</td></tr>\n<tr><td class=c><code>st_helena</code></td><td class=e>🇸🇭</td></tr>\n<tr><td class=c><code>slovenia</code></td><td class=e>🇸🇮</td></tr>\n<tr><td class=c><code>svalbard_jan_mayen</code></td><td class=e>🇸🇯</td></tr>\n<tr><td class=c><code>slovakia</code></td><td class=e>🇸🇰</td></tr>\n<tr><td class=c><code>sierra_leone</code></td><td class=e>🇸🇱</td></tr>\n<tr><td class=c><code>san_marino</code></td><td class=e>🇸🇲</td></tr>\n<tr><td class=c><code>senegal</code></td><td class=e>🇸🇳</td></tr>\n<tr><td class=c><code>somalia</code></td><td class=e>🇸🇴</td></tr>\n<tr><td class=c><code>suriname</code></td><td class=e>🇸🇷</td></tr>\n<tr><td class=c><code>south_sudan</code></td><td class=e>🇸🇸</td></tr>\n<tr><td class=c><code>sao_tome_principe</code></td><td class=e>🇸🇹</td></tr>\n<tr><td class=c><code>el_salvador</code></td><td class=e>🇸🇻</td></tr>\n<tr><td class=c><code>sint_maarten</code></td><td class=e>🇸🇽</td></tr>\n<tr><td class=c><code>syria</code></td><td class=e>🇸🇾</td></tr>\n<tr><td class=c><code>swaziland</code></td><td class=e>🇸🇿</td></tr>\n<tr><td class=c><code>tristan_da_cunha</code></td><td class=e>🇹🇦</td></tr>\n<tr><td class=c><code>turks_caicos_islands</code></td><td class=e>🇹🇨</td></tr>\n<tr><td class=c><code>chad</code></td><td class=e>🇹🇩</td></tr>\n<tr><td class=c><code>french_southern_territories</code></td><td class=e>🇹🇫</td></tr>\n<tr><td class=c><code>togo</code></td><td class=e>🇹🇬</td></tr>\n<tr><td class=c><code>thailand</code></td><td class=e>🇹🇭</td></tr>\n<tr><td class=c><code>tajikistan</code></td><td class=e>🇹🇯</td></tr>\n<tr><td class=c><code>tokelau</code></td><td class=e>🇹🇰</td></tr>\n<tr><td class=c><code>timor_leste</code></td><td class=e>🇹🇱</td></tr>\n<tr><td class=c><code>turkmenistan</code></td><td class=e>🇹🇲</td></tr>\n<tr><td class=c><code>tunisia</code></td><td class=e>🇹🇳</td></tr>\n<tr><td class=c><code>tonga</code></td><td class=e>🇹🇴</td></tr>\n<tr><td class=c><code>tr</code></td><td class=e>🇹🇷</td></tr>\n<tr><td class=c><code>trinidad_tobago</code></td><td class=e>🇹🇹</td></tr>\n<tr><td class=c><code>tuvalu</code></td><td class=e>🇹🇻</td></tr>\n<tr><td class=c><code>taiwan</code></td><td class=e>🇹🇼</td></tr>\n<tr><td class=c><code>tanzania</code></td><td class=e>🇹🇿</td></tr>\n<tr><td class=c><code>ukraine</code></td><td class=e>🇺🇦</td></tr>\n<tr><td class=c><code>uganda</code></td><td class=e>🇺🇬</td></tr>\n<tr><td class=c><code>us_outlying_islands</code></td><td class=e>🇺🇲</td></tr>\n<tr><td class=c><code>united_nations</code></td><td class=e>🇺🇳</td></tr>\n<tr><td class=c><code>us</code></td><td class=e>🇺🇸</td></tr>\n<tr><td class=c><code>uruguay</code></td><td class=e>🇺🇾</td></tr>\n<tr><td class=c><code>uzbekistan</code></td><td class=e>🇺🇿</td></tr>\n<tr><td class=c><code>vatican_city</code></td><td class=e>🇻🇦</td></tr>\n<tr><td class=c><code>st_vincent_grenadines</code></td><td class=e>🇻🇨</td></tr>\n<tr><td class=c><code>venezuela</code></td><td class=e>🇻🇪</td></tr>\n<tr><td class=c><code>british_virgin_islands</code></td><td class=e>🇻🇬</td></tr>\n<tr><td class=c><code>us_virgin_islands</code></td><td class=e>🇻🇮</td></tr>\n<tr><td class=c><code>vietnam</code></td><td class=e>🇻🇳</td></tr>\n<tr><td class=c><code>vanuatu</code></td><td class=e>🇻🇺</td></tr>\n<tr><td class=c><code>wallis_futuna</code></td><td class=e>🇼🇫</td></tr>\n<tr><td class=c><code>samoa</code></td><td class=e>🇼🇸</td></tr>\n<tr><td class=c><code>kosovo</code></td><td class=e>🇽🇰</td></tr>\n<tr><td class=c><code>yemen</code></td><td class=e>🇾🇪</td></tr>\n<tr><td class=c><code>mayotte</code></td><td class=e>🇾🇹</td></tr>\n<tr><td class=c><code>south_africa</code></td><td class=e>🇿🇦</td></tr>\n<tr><td class=c><code>zambia</code></td><td class=e>🇿🇲</td></tr>\n<tr><td class=c><code>zimbabwe</code></td><td class=e>🇿🇼</td></tr>\n<tr><td class=c><code>england</code></td><td class=e>🏴󠁧󠁢󠁥󠁮󠁧󠁿</td></tr>\n<tr><td class=c><code>scotland</code></td><td class=e>🏴󠁧󠁢󠁳󠁣󠁴󠁿</td></tr>\n<tr><td class=c><code>wales</code></td><td class=e>🏴󠁧󠁢󠁷󠁬󠁳󠁿</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ntfy using Query Parameter in curl\nDESCRIPTION: This snippet shows how to use curl to send an authenticated POST request to ntfy using the auth query parameter.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_233\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d \"Look ma, with auth\" \\\n  \"https://ntfy.example.com/mysecrets?auth=QmFzaWMgZEdWemRIVnpaWEk2Wm1GclpYQmhjM04zYjNKaw\"\n```\n\n----------------------------------------\n\nTITLE: Building the ntfy Web App with Make\nDESCRIPTION: Command to build the web app using Make, which will compile the React app and copy the build to the server/site folder for inclusion in the ntfy binary.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ make web\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with PowerShell 5 and earlier\nDESCRIPTION: PowerShell 5 implementation that manually creates the Basic authentication header for publishing to protected topics.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_220\n\nLANGUAGE: powershell\nCODE:\n```\n# With PowerShell 5 or earlier, we need to create the base64 username:password string ourselves\n$CredentialString = \"$($Credential.Username):$($Credential.GetNetworkCredential().Password)\"\n$EncodedCredential = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($CredentialString))\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.example.com/mysecrets\"\n  Headers = @{ Authorization = \"Basic $EncodedCredential\"}\n  Body = \"Look ma, with auth\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: Running the ntfy Web App in Development Mode\nDESCRIPTION: Commands to navigate to the web directory and start the development server, which enables live reloading during development.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ cd web\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Running the Documentation Server in Development Mode\nDESCRIPTION: Command to start the MkDocs development server, which builds the documentation, serves it at http://127.0.0.1:8000/, and rebuilds on file changes.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/develop.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdocs serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 5.53 seconds\nINFO     -  [16:28:14] Serving on http://127.0.0.1:8000/\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via curl using X-Actions header\nDESCRIPTION: Example of using curl to send an ntfy notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the X-Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_150\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -d \"Garage door has been open for 15 minutes. Close it?\" \\\n    -H \"Actions: http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\\n    ntfy.sh/myhome\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP action via ntfy CLI using X-Actions header\nDESCRIPTION: Example of using the ntfy CLI to send a notification with an HTTP action button that triggers a PUT request to close a garage door when tapped. Uses the X-Actions header approach.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_151\n\nLANGUAGE: bash\nCODE:\n```\nntfy publish \\\n    --actions=\"http, Close door, https://api.mygarage.lan/, method=PUT, headers.Authorization=Bearer zAzsx1sk.., body={\\\"action\\\": \\\"close\\\"}\" \\\n    myhome \\\n    \"Garage door has been open for 15 minutes. Close it?\"\n```\n\n----------------------------------------\n\nTITLE: URL-Encoded Webhook Template for Grafana Integration\nDESCRIPTION: An example of URL-encoded Go templates for integration with Grafana. This demonstrates how to encode template syntax in URL parameters for compatibility with external systems.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_85\n\nLANGUAGE: plaintext\nCODE:\n```\n# Additional URL encoding (see https://www.urlencoder.org/) is necessary for Grafana, \n# and may be required for other tools too\n\nhttps://ntfy.sh/mytopic?tpl=1&t=%7B%7B.title%7D%7D&m=%7B%7Brange%20.alerts%7D%7D%7B%7B.annotations.summary%7D%7D%5Cn%5CnValues%3A%5Cn%7B%7Brange%20%24k%2C%24v%20%3A%3D%20.values%7D%7D-%20%7B%7B%24k%7D%7D%3D%7B%7B%24v%7D%7D%5Cn%7B%7Bend%7D%7D%7B%7Bend%7D%7D\n```\n\n----------------------------------------\n\nTITLE: Sending Android Broadcast with PHP\nDESCRIPTION: Example of using PHP's file_get_contents to send an Android broadcast intent. The broadcast will include extras that can be used to trigger specific actions on the device.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_141\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/wifey', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' =>\n            \"Content-Type: text/plain\\r\\n\" .\n            \"Actions: broadcast, Take picture, extras.cmd=pic, extras.camera=front\",\n        'content' => 'Your wife requested you send a picture of yourself.'\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with Python (JSON format)\nDESCRIPTION: Example of using Python requests with JSON to send a notification with a view action that opens a Twitter link.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_132\n\nLANGUAGE: python\nCODE:\n```\nrequests.post(\"https://ntfy.sh/\",\n    data=json.dumps({\n        \"topic\": \"myhome\",\n        \"message\": \"Somebody retweeted your tweet.\",\n        \"actions\": [\n            {\n                \"action\": \"view\",\n                \"label\": \"Open Twitter\",\n                \"url\": \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n            }\n        ]\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Emoji Shortcode and Icon Pairs in HTML Table\nDESCRIPTION: This HTML snippet shows the structure used to display emoji shortcodes and their corresponding icons in a table format. Each row contains a code cell with the shortcode and an emoji cell with the visual representation.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>yellow_heart</code></td><td class=e>💛</td></tr>\n<tr><td class=c><code>green_heart</code></td><td class=e>💚</td></tr>\n<tr><td class=c><code>blue_heart</code></td><td class=e>💙</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Sending 'view' Action with PowerShell (JSON format)\nDESCRIPTION: Example of using PowerShell's Invoke-RestMethod with JSON to send a notification with a view action.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_131\n\nLANGUAGE: powershell\nCODE:\n```\n$Request = @{\n  Method = \"POST\"\n  URI = \"https://ntfy.sh\"\n  Body = ConvertTo-JSON @{\n    Topic = \"myhome\"\n    Message = \"Somebody retweeted your tweet.\"\n    Actions = @(\n      @{\n        Action = \"view\"\n        Label  = \"Open Twitter\"\n        URL    = \"https://twitter.com/binwiederhier/status/1467633927951163392\"\n      }\n    )\n  }\n  ContentType = \"application/json\"\n}\nInvoke-RestMethod @Request\n```\n\n----------------------------------------\n\nTITLE: HTML Table - Person and Profession Emoji Mappings\nDESCRIPTION: HTML table structure that maps emoji shortcodes to their corresponding emoji characters. Each row contains a code cell with the shortcode and an emoji cell with the actual Unicode character.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>woman_judge</code></td><td class=e>👩‍⚖️</td></tr>\n<tr><td class=c><code>farmer</code></td><td class=e>🧑‍🌾</td></tr>\n<tr><td class=c><code>man_farmer</code></td><td class=e>👨‍🌾</td></tr>\n...\n```\n\n----------------------------------------\n\nTITLE: HTML Table of Emoji Shortcodes and Characters\nDESCRIPTION: An HTML table mapping emoji shortcode identifiers to their visual representations. The table includes various categories of emojis such as sports activities, people in different poses, family groupings, and animals. Each row contains a code element with the shortcode and the corresponding emoji character.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<tr><td class=c><code>climbing</code></td><td class=e>🧗</td></tr>\n<tr><td class=c><code>climbing_man</code></td><td class=e>🧗‍♂️</td></tr>\n<tr><td class=c><code>climbing_woman</code></td><td class=e>🧗‍♀️</td></tr>\n<tr><td class=c><code>person_fencing</code></td><td class=e>🤺</td></tr>\n<tr><td class=c><code>horse_racing</code></td><td class=e>🏇</td></tr>\n<tr><td class=c><code>skier</code></td><td class=e>⛷️</td></tr>\n<tr><td class=c><code>snowboarder</code></td><td class=e>🏂</td></tr>\n<tr><td class=c><code>golfing</code></td><td class=e>🏌️</td></tr>\n<tr><td class=c><code>golfing_man</code></td><td class=e>🏌️‍♂️</td></tr>\n<tr><td class=c><code>golfing_woman</code></td><td class=e>🏌️‍♀️</td></tr>\n<tr><td class=c><code>surfer</code></td><td class=e>🏄</td></tr>\n<tr><td class=c><code>surfing_man</code></td><td class=e>🏄‍♂️</td></tr>\n<tr><td class=c><code>surfing_woman</code></td><td class=e>🏄‍♀️</td></tr>\n<tr><td class=c><code>rowboat</code></td><td class=e>🚣</td></tr>\n<tr><td class=c><code>rowing_man</code></td><td class=e>🚣‍♂️</td></tr>\n<tr><td class=c><code>rowing_woman</code></td><td class=e>🚣‍♀️</td></tr>\n<tr><td class=c><code>swimmer</code></td><td class=e>🏊</td></tr>\n<tr><td class=c><code>swimming_man</code></td><td class=e>🏊‍♂️</td></tr>\n<tr><td class=c><code>swimming_woman</code></td><td class=e>🏊‍♀️</td></tr>\n<tr><td class=c><code>bouncing_ball_person</code></td><td class=e>⛹️</td></tr>\n<tr><td class=c><code>bouncing_ball_man</code></td><td class=e>⛹️‍♂️</td></tr>\n<tr><td class=c><code>bouncing_ball_woman</code></td><td class=e>⛹️‍♀️</td></tr>\n<tr><td class=c><code>weight_lifting</code></td><td class=e>🏋️</td></tr>\n<tr><td class=c><code>weight_lifting_man</code></td><td class=e>🏋️‍♂️</td></tr>\n<tr><td class=c><code>weight_lifting_woman</code></td><td class=e>🏋️‍♀️</td></tr>\n<tr><td class=c><code>bicyclist</code></td><td class=e>🚴</td></tr>\n<tr><td class=c><code>biking_man</code></td><td class=e>🚴‍♂️</td></tr>\n<tr><td class=c><code>biking_woman</code></td><td class=e>🚴‍♀️</td></tr>\n<tr><td class=c><code>mountain_bicyclist</code></td><td class=e>🚵</td></tr>\n<tr><td class=c><code>mountain_biking_man</code></td><td class=e>🚵‍♂️</td></tr>\n<tr><td class=c><code>mountain_biking_woman</code></td><td class=e>🚵‍♀️</td></tr>\n<tr><td class=c><code>cartwheeling</code></td><td class=e>🤸</td></tr>\n<tr><td class=c><code>man_cartwheeling</code></td><td class=e>🤸‍♂️</td></tr>\n<tr><td class=c><code>woman_cartwheeling</code></td><td class=e>🤸‍♀️</td></tr>\n<tr><td class=c><code>wrestling</code></td><td class=e>🤼</td></tr>\n<tr><td class=c><code>men_wrestling</code></td><td class=e>🤼‍♂️</td></tr>\n<tr><td class=c><code>women_wrestling</code></td><td class=e>🤼‍♀️</td></tr>\n<tr><td class=c><code>water_polo</code></td><td class=e>🤽</td></tr>\n<tr><td class=c><code>man_playing_water_polo</code></td><td class=e>🤽‍♂️</td></tr>\n<tr><td class=c><code>woman_playing_water_polo</code></td><td class=e>🤽‍♀️</td></tr>\n<tr><td class=c><code>handball_person</code></td><td class=e>🤾</td></tr>\n<tr><td class=c><code>man_playing_handball</code></td><td class=e>🤾‍♂️</td></tr>\n<tr><td class=c><code>woman_playing_handball</code></td><td class=e>🤾‍♀️</td></tr>\n<tr><td class=c><code>juggling_person</code></td><td class=e>🤹</td></tr>\n<tr><td class=c><code>man_juggling</code></td><td class=e>🤹‍♂️</td></tr>\n<tr><td class=c><code>woman_juggling</code></td><td class=e>🤹‍♀️</td></tr>\n<tr><td class=c><code>lotus_position</code></td><td class=e>🧘</td></tr>\n<tr><td class=c><code>lotus_position_man</code></td><td class=e>🧘‍♂️</td></tr>\n<tr><td class=c><code>lotus_position_woman</code></td><td class=e>🧘‍♀️</td></tr>\n<tr><td class=c><code>bath</code></td><td class=e>🛀</td></tr>\n<tr><td class=c><code>sleeping_bed</code></td><td class=e>🛌</td></tr>\n<tr><td class=c><code>people_holding_hands</code></td><td class=e>🧑‍🤝‍🧑</td></tr>\n<tr><td class=c><code>two_women_holding_hands</code></td><td class=e>👭</td></tr>\n<tr><td class=c><code>couple</code></td><td class=e>👫</td></tr>\n<tr><td class=c><code>two_men_holding_hands</code></td><td class=e>👬</td></tr>\n<tr><td class=c><code>couplekiss</code></td><td class=e>💏</td></tr>\n<tr><td class=c><code>couplekiss_man_woman</code></td><td class=e>👩‍❤️‍💋‍👨</td></tr>\n<tr><td class=c><code>couplekiss_man_man</code></td><td class=e>👨‍❤️‍💋‍👨</td></tr>\n<tr><td class=c><code>couplekiss_woman_woman</code></td><td class=e>👩‍❤️‍💋‍👩</td></tr>\n<tr><td class=c><code>couple_with_heart</code></td><td class=e>💑</td></tr>\n<tr><td class=c><code>couple_with_heart_woman_man</code></td><td class=e>👩‍❤️‍👨</td></tr>\n<tr><td class=c><code>couple_with_heart_man_man</code></td><td class=e>👨‍❤️‍👨</td></tr>\n<tr><td class=c><code>couple_with_heart_woman_woman</code></td><td class=e>👩‍❤️‍👩</td></tr>\n<tr><td class=c><code>family</code></td><td class=e>👪</td></tr>\n<tr><td class=c><code>family_man_woman_boy</code></td><td class=e>👨‍👩‍👦</td></tr>\n<tr><td class=c><code>family_man_woman_girl</code></td><td class=e>👨‍👩‍👧</td></tr>\n<tr><td class=c><code>family_man_woman_girl_boy</code></td><td class=e>👨‍👩‍👧‍👦</td></tr>\n<tr><td class=c><code>family_man_woman_boy_boy</code></td><td class=e>👨‍👩‍👦‍👦</td></tr>\n<tr><td class=c><code>family_man_woman_girl_girl</code></td><td class=e>👨‍👩‍👧‍👧</td></tr>\n<tr><td class=c><code>family_man_man_boy</code></td><td class=e>👨‍👨‍👦</td></tr>\n<tr><td class=c><code>family_man_man_girl</code></td><td class=e>👨‍👨‍👧</td></tr>\n<tr><td class=c><code>family_man_man_girl_boy</code></td><td class=e>👨‍👨‍👧‍👦</td></tr>\n<tr><td class=c><code>family_man_man_boy_boy</code></td><td class=e>👨‍👨‍👦‍👦</td></tr>\n<tr><td class=c><code>family_man_man_girl_girl</code></td><td class=e>👨‍👨‍👧‍👧</td></tr>\n<tr><td class=c><code>family_woman_woman_boy</code></td><td class=e>👩‍👩‍👦</td></tr>\n<tr><td class=c><code>family_woman_woman_girl</code></td><td class=e>👩‍👩‍👧</td></tr>\n<tr><td class=c><code>family_woman_woman_girl_boy</code></td><td class=e>👩‍👩‍👧‍👦</td></tr>\n<tr><td class=c><code>family_woman_woman_boy_boy</code></td><td class=e>👩‍👩‍👦‍👦</td></tr>\n<tr><td class=c><code>family_woman_woman_girl_girl</code></td><td class=e>👩‍👩‍👧‍👧</td></tr>\n<tr><td class=c><code>family_man_boy</code></td><td class=e>👨‍👦</td></tr>\n<tr><td class=c><code>family_man_boy_boy</code></td><td class=e>👨‍👦‍👦</td></tr>\n<tr><td class=c><code>family_man_girl</code></td><td class=e>👨‍👧</td></tr>\n<tr><td class=c><code>family_man_girl_boy</code></td><td class=e>👨‍👧‍👦</td></tr>\n<tr><td class=c><code>family_man_girl_girl</code></td><td class=e>👨‍👧‍👧</td></tr>\n<tr><td class=c><code>family_woman_boy</code></td><td class=e>👩‍👦</td></tr>\n<tr><td class=c><code>family_woman_boy_boy</code></td><td class=e>👩‍👦‍👦</td></tr>\n<tr><td class=c><code>family_woman_girl</code></td><td class=e>👩‍👧</td></tr>\n<tr><td class=c><code>family_woman_girl_boy</code></td><td class=e>👩‍👧‍👦</td></tr>\n<tr><td class=c><code>family_woman_girl_girl</code></td><td class=e>👩‍👧‍👧</td></tr>\n<tr><td class=c><code>speaking_head</code></td><td class=e>🗣️</td></tr>\n<tr><td class=c><code>bust_in_silhouette</code></td><td class=e>👤</td></tr>\n<tr><td class=c><code>busts_in_silhouette</code></td><td class=e>👥</td></tr>\n<tr><td class=c><code>people_hugging</code></td><td class=e>🫂</td></tr>\n<tr><td class=c><code>footprints</code></td><td class=e>👣</td></tr>\n<tr><td class=c><code>monkey_face</code></td><td class=e>🐵</td></tr>\n<tr><td class=c><code>monkey</code></td><td class=e>🐒</td></tr>\n<tr><td class=c><code>gorilla</code></td><td class=e>🦍</td></tr>\n<tr><td class=c><code>orangutan</code></td><td class=e>🦧</td></tr>\n<tr><td class=c><code>dog</code></td><td class=e>🐶</td></tr>\n<tr><td class=c><code>dog2</code></td><td class=e>🐕</td></tr>\n<tr><td class=c><code>guide_dog</code></td><td class=e>🦮</td></tr>\n<tr><td class=c><code>service_dog</code></td><td class=e>🐕‍🦺</td></tr>\n<tr><td class=c><code>poodle</code></td><td class=e>🐩</td></tr>\n<tr><td class=c><code>wolf</code></td><td class=e>🐺</td></tr>\n<tr><td class=c><code>fox_face</code></td><td class=e>🦊</td></tr>\n<tr><td class=c><code>raccoon</code></td><td class=e>🦝</td></tr>\n<tr><td class=c><code>cat</code></td><td class=e>🐱</td></tr>\n<tr><td class=c><code>cat2</code></td><td class=e>🐈</td></tr>\n<tr><td class=c><code>black_cat</code></td><td class=e>🐈‍⬛</td></tr>\n<tr><td class=c><code>lion</code></td><td class=e>🦁</td></tr>\n<tr><td class=c><code>tiger</code></td><td class=e>🐯</td></tr>\n<tr><td class=c><code>tiger2</code></td><td class=e>🐅</td></tr>\n<tr><td class=c><code>leopard</code></td><td class=e>🐆</td></tr>\n<tr><td class=c><code>horse</code></td><td class=e>🐴</td></tr>\n<tr><td class=c><code>racehorse</code></td><td class=e>🐎</td></tr>\n<tr><td class=c><code>unicorn</code></td><td class=e>🦄</td></tr>\n<tr><td class=c><code>zebra</code></td><td class=e>🦓</td></tr>\n<tr><td class=c><code>deer</code></td><td class=e>🦌</td></tr>\n<tr><td class=c><code>bison</code></td><td class=e>🦬</td></tr>\n<tr><td class=c><code>cow</code></td><td class=e>🐮</td></tr>\n<tr><td class=c><code>ox</code></td><td class=e>🐂</td></tr>\n<tr><td class=c><code>water_buffalo</code></td><td class=e>🐃</td></tr>\n<tr><td class=c><code>cow2</code></td><td class=e>🐄</td></tr>\n<tr><td class=c><code>pig</code></td><td class=e>🐷</td></tr>\n<tr><td class=c><code>pig2</code></td><td class=e>🐖</td></tr>\n<tr><td class=c><code>boar</code></td><td class=e>🐗</td></tr>\n<tr><td class=c><code>pig_nose</code></td><td class=e>🐽</td></tr>\n<tr><td class=c><code>ram</code></td><td class=e>🐏</td></tr>\n<tr><td class=c><code>sheep</code></td><td class=e>🐑</td></tr>\n<tr><td class=c><code>goat</code></td><td class=e>🐐</td></tr>\n<tr><td class=c><code>dromedary_camel</code></td><td class=e>🐪</td></tr>\n<tr><td class=c><code>camel</code></td><td class=e>🐫</td></tr>\n<tr><td class=c><code>llama</code></td><td class=e>🦙</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Using pidof with ntfy Wait PID Feature\nDESCRIPTION: Example demonstrating how to use pidof to find and wait for a specific process type when you don't know the PID directly.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/cli.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ntfy pub --wait-pid $(pidof rsync) mytopic | jq .\n{\n  \"id\": \"orM6hJKNYkWb\",\n  \"time\": 1655825827,\n  \"event\": \"message\",\n  \"topic\": \"mytopic\",\n  \"message\": \"Process with PID 8458 exited after 2.003s\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Mapping Emoji Codes to Symbols\nDESCRIPTION: This HTML table structure maps code keywords to their corresponding emoji symbols. Each row contains two table cells: one with the code keyword wrapped in a <code> tag with class 'c', and another with the emoji symbol in a cell with class 'e'.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<tr><td class=c><code>bacon</code></td><td class=e>🥓</td></tr>\n<tr><td class=c><code>hamburger</code></td><td class=e>🍔</td></tr>\n<tr><td class=c><code>fries</code></td><td class=e>🍟</td></tr>\n<tr><td class=c><code>pizza</code></td><td class=e>🍕</td></tr>\n<tr><td class=c><code>hotdog</code></td><td class=e>🌭</td></tr>\n<tr><td class=c><code>sandwich</code></td><td class=e>🥪</td></tr>\n<tr><td class=c><code>taco</code></td><td class=e>🌮</td></tr>\n<tr><td class=c><code>burrito</code></td><td class=e>🌯</td></tr>\n<tr><td class=c><code>tamale</code></td><td class=e>🫔</td></tr>\n<tr><td class=c><code>stuffed_flatbread</code></td><td class=e>🥙</td></tr>\n<tr><td class=c><code>falafel</code></td><td class=e>🧆</td></tr>\n<tr><td class=c><code>egg</code></td><td class=e>🥚</td></tr>\n<tr><td class=c><code>fried_egg</code></td><td class=e>🍳</td></tr>\n<tr><td class=c><code>shallow_pan_of_food</code></td><td class=e>🥘</td></tr>\n<tr><td class=c><code>stew</code></td><td class=e>🍲</td></tr>\n<tr><td class=c><code>fondue</code></td><td class=e>🫕</td></tr>\n<tr><td class=c><code>bowl_with_spoon</code></td><td class=e>🥣</td></tr>\n<tr><td class=c><code>green_salad</code></td><td class=e>🥗</td></tr>\n<tr><td class=c><code>popcorn</code></td><td class=e>🍿</td></tr>\n<tr><td class=c><code>butter</code></td><td class=e>🧈</td></tr>\n<tr><td class=c><code>salt</code></td><td class=e>🧂</td></tr>\n<tr><td class=c><code>canned_food</code></td><td class=e>🥫</td></tr>\n<tr><td class=c><code>bento</code></td><td class=e>🍱</td></tr>\n<tr><td class=c><code>rice_cracker</code></td><td class=e>🍘</td></tr>\n<tr><td class=c><code>rice_ball</code></td><td class=e>🍙</td></tr>\n<tr><td class=c><code>rice</code></td><td class=e>🍚</td></tr>\n<tr><td class=c><code>curry</code></td><td class=e>🍛</td></tr>\n<tr><td class=c><code>ramen</code></td><td class=e>🍜</td></tr>\n<tr><td class=c><code>spaghetti</code></td><td class=e>🍝</td></tr>\n<tr><td class=c><code>sweet_potato</code></td><td class=e>🍠</td></tr>\n<tr><td class=c><code>oden</code></td><td class=e>🍢</td></tr>\n<tr><td class=c><code>sushi</code></td><td class=e>🍣</td></tr>\n<tr><td class=c><code>fried_shrimp</code></td><td class=e>🍤</td></tr>\n<tr><td class=c><code>fish_cake</code></td><td class=e>🍥</td></tr>\n<tr><td class=c><code>moon_cake</code></td><td class=e>🥮</td></tr>\n<tr><td class=c><code>dango</code></td><td class=e>🍡</td></tr>\n<tr><td class=c><code>dumpling</code></td><td class=e>🥟</td></tr>\n<tr><td class=c><code>fortune_cookie</code></td><td class=e>🥠</td></tr>\n<tr><td class=c><code>takeout_box</code></td><td class=e>🥡</td></tr>\n<tr><td class=c><code>crab</code></td><td class=e>🦀</td></tr>\n<tr><td class=c><code>lobster</code></td><td class=e>🦞</td></tr>\n<tr><td class=c><code>shrimp</code></td><td class=e>🦐</td></tr>\n<tr><td class=c><code>squid</code></td><td class=e>🦑</td></tr>\n<tr><td class=c><code>oyster</code></td><td class=e>🦪</td></tr>\n<tr><td class=c><code>icecream</code></td><td class=e>🍦</td></tr>\n<tr><td class=c><code>shaved_ice</code></td><td class=e>🍧</td></tr>\n<tr><td class=c><code>ice_cream</code></td><td class=e>🍨</td></tr>\n<tr><td class=c><code>doughnut</code></td><td class=e>🍩</td></tr>\n<tr><td class=c><code>cookie</code></td><td class=e>🍪</td></tr>\n<tr><td class=c><code>birthday</code></td><td class=e>🎂</td></tr>\n<tr><td class=c><code>cake</code></td><td class=e>🍰</td></tr>\n<tr><td class=c><code>cupcake</code></td><td class=e>🧁</td></tr>\n<tr><td class=c><code>pie</code></td><td class=e>🥧</td></tr>\n<tr><td class=c><code>chocolate_bar</code></td><td class=e>🍫</td></tr>\n<tr><td class=c><code>candy</code></td><td class=e>🍬</td></tr>\n<tr><td class=c><code>lollipop</code></td><td class=e>🍭</td></tr>\n<tr><td class=c><code>custard</code></td><td class=e>🍮</td></tr>\n<tr><td class=c><code>honey_pot</code></td><td class=e>🍯</td></tr>\n<tr><td class=c><code>baby_bottle</code></td><td class=e>🍼</td></tr>\n<tr><td class=c><code>milk_glass</code></td><td class=e>🥛</td></tr>\n<tr><td class=c><code>coffee</code></td><td class=e>☕</td></tr>\n<tr><td class=c><code>teapot</code></td><td class=e>🫖</td></tr>\n<tr><td class=c><code>tea</code></td><td class=e>🍵</td></tr>\n<tr><td class=c><code>sake</code></td><td class=e>🍶</td></tr>\n<tr><td class=c><code>champagne</code></td><td class=e>🍾</td></tr>\n<tr><td class=c><code>wine_glass</code></td><td class=e>🍷</td></tr>\n<tr><td class=c><code>cocktail</code></td><td class=e>🍸</td></tr>\n<tr><td class=c><code>tropical_drink</code></td><td class=e>🍹</td></tr>\n<tr><td class=c><code>beer</code></td><td class=e>🍺</td></tr>\n<tr><td class=c><code>beers</code></td><td class=e>🍻</td></tr>\n<tr><td class=c><code>clinking_glasses</code></td><td class=e>🥂</td></tr>\n<tr><td class=c><code>tumbler_glass</code></td><td class=e>🥃</td></tr>\n<tr><td class=c><code>cup_with_straw</code></td><td class=e>🥤</td></tr>\n<tr><td class=c><code>bubble_tea</code></td><td class=e>🧋</td></tr>\n<tr><td class=c><code>beverage_box</code></td><td class=e>🧃</td></tr>\n<tr><td class=c><code>mate</code></td><td class=e>🧉</td></tr>\n<tr><td class=c><code>ice_cube</code></td><td class=e>🧊</td></tr>\n<tr><td class=c><code>chopsticks</code></td><td class=e>🥢</td></tr>\n<tr><td class=c><code>plate_with_cutlery</code></td><td class=e>🍽️</td></tr>\n<tr><td class=c><code>fork_and_knife</code></td><td class=e>🍴</td></tr>\n<tr><td class=c><code>spoon</code></td><td class=e>🥄</td></tr>\n<tr><td class=c><code>hocho</code></td><td class=e>🔪</td></tr>\n<tr><td class=c><code>amphora</code></td><td class=e>🏺</td></tr>\n<tr><td class=c><code>earth_africa</code></td><td class=e>🌍</td></tr>\n<tr><td class=c><code>earth_americas</code></td><td class=e>🌎</td></tr>\n<tr><td class=c><code>earth_asia</code></td><td class=e>🌏</td></tr>\n<tr><td class=c><code>globe_with_meridians</code></td><td class=e>🌐</td></tr>\n<tr><td class=c><code>world_map</code></td><td class=e>🗺️</td></tr>\n<tr><td class=c><code>japan</code></td><td class=e>🗾</td></tr>\n<tr><td class=c><code>compass</code></td><td class=e>🧭</td></tr>\n<tr><td class=c><code>mountain_snow</code></td><td class=e>🏔️</td></tr>\n<tr><td class=c><code>mountain</code></td><td class=e>⛰️</td></tr>\n<tr><td class=c><code>volcano</code></td><td class=e>🌋</td></tr>\n<tr><td class=c><code>mount_fuji</code></td><td class=e>🗻</td></tr>\n<tr><td class=c><code>camping</code></td><td class=e>🏕️</td></tr>\n<tr><td class=c><code>beach_umbrella</code></td><td class=e>🏖️</td></tr>\n<tr><td class=c><code>desert</code></td><td class=e>🏜️</td></tr>\n<tr><td class=c><code>desert_island</code></td><td class=e>🏝️</td></tr>\n<tr><td class=c><code>national_park</code></td><td class=e>🏞️</td></tr>\n<tr><td class=c><code>stadium</code></td><td class=e>🏟️</td></tr>\n<tr><td class=c><code>classical_building</code></td><td class=e>🏛️</td></tr>\n<tr><td class=c><code>building_construction</code></td><td class=e>🏗️</td></tr>\n<tr><td class=c><code>bricks</code></td><td class=e>🧱</td></tr>\n<tr><td class=c><code>rock</code></td><td class=e>🪨</td></tr>\n<tr><td class=c><code>wood</code></td><td class=e>🪵</td></tr>\n<tr><td class=c><code>hut</code></td><td class=e>🛖</td></tr>\n<tr><td class=c><code>houses</code></td><td class=e>🏘️</td></tr>\n<tr><td class=c><code>derelict_house</code></td><td class=e>🏚️</td></tr>\n<tr><td class=c><code>house</code></td><td class=e>🏠</td></tr>\n<tr><td class=c><code>house_with_garden</code></td><td class=e>🏡</td></tr>\n<tr><td class=c><code>office</code></td><td class=e>🏢</td></tr>\n<tr><td class=c><code>post_office</code></td><td class=e>🏣</td></tr>\n<tr><td class=c><code>european_post_office</code></td><td class=e>🏤</td></tr>\n<tr><td class=c><code>hospital</code></td><td class=e>🏥</td></tr>\n<tr><td class=c><code>bank</code></td><td class=e>🏦</td></tr>\n<tr><td class=c><code>hotel</code></td><td class=e>🏨</td></tr>\n<tr><td class=c><code>love_hotel</code></td><td class=e>🏩</td></tr>\n<tr><td class=c><code>convenience_store</code></td><td class=e>🏪</td></tr>\n<tr><td class=c><code>school</code></td><td class=e>🏫</td></tr>\n<tr><td class=c><code>department_store</code></td><td class=e>🏬</td></tr>\n<tr><td class=c><code>factory</code></td><td class=e>🏭</td></tr>\n<tr><td class=c><code>japanese_castle</code></td><td class=e>🏯</td></tr>\n<tr><td class=c><code>european_castle</code></td><td class=e>🏰</td></tr>\n<tr><td class=c><code>wedding</code></td><td class=e>💒</td></tr>\n<tr><td class=c><code>tokyo_tower</code></td><td class=e>🗼</td></tr>\n<tr><td class=c><code>statue_of_liberty</code></td><td class=e>🗽</td></tr>\n<tr><td class=c><code>church</code></td><td class=e>⛪</td></tr>\n<tr><td class=c><code>mosque</code></td><td class=e>🕌</td></tr>\n<tr><td class=c><code>hindu_temple</code></td><td class=e>🛕</td></tr>\n<tr><td class=c><code>synagogue</code></td><td class=e>🕍</td></tr>\n<tr><td class=c><code>shinto_shrine</code></td><td class=e>⛩️</td></tr>\n<tr><td class=c><code>kaaba</code></td><td class=e>🕋</td></tr>\n<tr><td class=c><code>fountain</code></td><td class=e>⛲</td></tr>\n<tr><td class=c><code>tent</code></td><td class=e>⛺</td></tr>\n<tr><td class=c><code>foggy</code></td><td class=e>🌁</td></tr>\n<tr><td class=c><code>night_with_stars</code></td><td class=e>🌃</td></tr>\n<tr><td class=c><code>cityscape</code></td><td class=e>🏙️</td></tr>\n<tr><td class=c><code>sunrise_over_mountains</code></td><td class=e>🌄</td></tr>\n<tr><td class=c><code>sunrise</code></td><td class=e>🌅</td></tr>\n<tr><td class=c><code>city_sunset</code></td><td class=e>🌆</td></tr>\n<tr><td class=c><code>city_sunrise</code></td><td class=e>🌇</td></tr>\n<tr><td class=c><code>bridge_at_night</code></td><td class=e>🌉</td></tr>\n<tr><td class=c><code>hotsprings</code></td><td class=e>♨️</td></tr>\n<tr><td class=c><code>carousel_horse</code></td><td class=e>🎠</td></tr>\n<tr><td class=c><code>ferris_wheel</code></td><td class=e>🎡</td></tr>\n<tr><td class=c><code>roller_coaster</code></td><td class=e>🎢</td></tr>\n```\n\n----------------------------------------\n\nTITLE: HTML Emoji Code Mapping Table\nDESCRIPTION: HTML table structure that pairs emoji shortcodes with their corresponding emoji characters. Each row contains a code element with the shortcode and its matching emoji symbol, organized in a readable table format.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>no_bell</code></td><td class=e>🔕</td></tr>\n<tr><td class=c><code>musical_score</code></td><td class=e>🎼</td></tr>\n<tr><td class=c><code>musical_note</code></td><td class=e>🎵</td></tr>\n<tr><td class=c><code>notes</code></td><td class=e>🎶</td></tr>\n<tr><td class=c><code>studio_microphone</code></td><td class=e>🎙️</td></tr>\n<tr><td class=c><code>level_slider</code></td><td class=e>🎚️</td></tr>\n<tr><td class=c><code>control_knobs</code></td><td class=e>🎛️</td></tr>\n<tr><td class=c><code>microphone</code></td><td class=e>🎤</td></tr>\n<tr><td class=c><code>headphones</code></td><td class=e>🎧</td></tr>\n<tr><td class=c><code>radio</code></td><td class=e>📻</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Attaching Local File to Notification via HTTP PUT\nDESCRIPTION: Raw HTTP PUT request format for uploading a local file as an attachment to a notification. The file data is sent in the request body.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_176\n\nLANGUAGE: http\nCODE:\n```\nPUT /flowers HTTP/1.1\nHost: ntfy.sh\nFilename: flower.jpg\nContent-Type: 52312\n \n(binary JPEG data)\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji Mappings in HTML Table\nDESCRIPTION: This HTML snippet defines a table structure where each row contains a code name for an emoji and its corresponding emoji character. The table includes a wide variety of emojis, from simple symbols to country flags.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>eject_button</code></td><td class=e>⏏️</td></tr>\n<tr><td class=c><code>cinema</code></td><td class=e>🎦</td></tr>\n<tr><td class=c><code>low_brightness</code></td><td class=e>🔅</td></tr>\n<tr><td class=c><code>high_brightness</code></td><td class=e>🔆</td></tr>\n<tr><td class=c><code>signal_strength</code></td><td class=e>📶</td></tr>\n<!-- ... more rows ... -->\n<tr><td class=c><code>andorra</code></td><td class=e>🇦🇩</td></tr>\n<tr><td class=c><code>united_arab_emirates</code></td><td class=e>🇦🇪</td></tr>\n<tr><td class=c><code>afghanistan</code></td><td class=e>🇦🇫</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Displaying Country Code to Flag Emoji Mapping in HTML\nDESCRIPTION: This HTML snippet represents a table row for mapping a country code to its flag emoji. It uses CSS classes for styling and displays the country code in a code element followed by the corresponding flag emoji.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td class=c><code>antigua_barbuda</code></td><td class=e>🇦🇬</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Array Actions with PHP\nDESCRIPTION: PHP implementation using file_get_contents to send notification with JSON array actions.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_117\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/', false, stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => \"Content-Type: application/json\",\n        'content' => json_encode([\n            \"topic\": \"myhome\",\n            \"message\": \"You left the house. Turn down the A/C?\",\n            \"actions\": [\n                [\n                    \"action\": \"view\",\n                    \"label\": \"Open portal\",\n                    \"url\": \"https://home.nest.com/\",\n                    \"clear\": true\n                ],\n                [\n                    \"action\": \"http\",\n                    \"label\": \"Turn down\",\n                    \"url\": \"https://api.nest.com/\",\n                    \"headers\": [\n                        \"Authorization\": \"Bearer ...\"\n                    ],\n                    \"body\": \"{\\\"temperature\\\": 65}\"\n                ]\n            ]\n        ])\n    ]\n]));\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Apprise with ntfy\nDESCRIPTION: This snippet demonstrates how to install the Apprise command-line tool via pip and use it to send a notification to an ntfy topic. Apprise integration was released in v0.9.8.2.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/releases.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install apprise\napprise -b \"Hi there\" ntfys://mytopic\n```\n\n----------------------------------------\n\nTITLE: Using Conditionals in Go Templates for GitHub Webhook Formatting\nDESCRIPTION: This example demonstrates using Go template conditionals to create different messages based on the action field in a GitHub webhook. It checks if the action equals 'opened' and formats the message accordingly.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_80\n\nLANGUAGE: go\nCODE:\n```\n{{.pull_request.head.repo.full_name}} Pull request {{if eq .action \"opened\"}}OPENED{{else}}CLOSED{{end}}: {{.pull_request.title}}\n```\n\n----------------------------------------\n\nTITLE: Emoji Tag-to-Symbol Mapping Table\nDESCRIPTION: HTML table structure showing the mapping between emoji text tags and their corresponding emoji symbols. Each row contains a code tag and its visual emoji representation.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/emojis.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"remove-md-box emoji-table\"><tr>\n<td><table><thead><tr><th>Tag</th><th style='text-align: center'>Emoji</th></tr></thead><tbody>\n<tr><td class=c><code>grinning</code></td><td class=e>😀</td></tr>\n<tr><td class=c><code>smiley</code></td><td class=e>😃</td></tr>\n...\n```\n\n----------------------------------------\n\nTITLE: Advanced Webhook Trigger with Parameters using PHP\nDESCRIPTION: Example of triggering a webhook with custom message, priority and tags using PHP's file_get_contents with URL parameters.\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/publish.md#2025-04-21_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nfile_get_contents('https://ntfy.sh/mywebhook/publish?message=Webhook+triggered&priority=high&tags=warning,skull');\n```\n\n----------------------------------------\n\nTITLE: Example of an Open Message in JSON\nDESCRIPTION: A JSON-formatted open message that is sent when initially connecting to a topic, containing only basic information (id, time, event, topic).\nSOURCE: https://github.com/binwiederhier/ntfy/blob/main/docs/subscribe/api.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"2pgIAaGrQ8\",\n    \"time\": 1638542215,\n    \"event\": \"open\",\n    \"topic\": \"phil_alerts\"\n}\n```"
  }
]