[
  {
    "owner": "anglesharp",
    "repo": "anglesharp",
    "content": "TITLE: Parsing Well-Defined HTML Document with AngleSharp\nDESCRIPTION: Demonstrates parsing a well-defined HTML document using AngleSharp's BrowsingContext. The example shows how to handle Google's 404 page template and serialize the resulting DOM back to HTML.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar source = @\"\n<!DOCTYPE html>\n<html lang=en>\n  <meta charset=utf-8>\n  <meta name=viewport content=\"\"initial-scale=1, minimum-scale=1, width=device-width\"\">\n  <title>Error 404 (Not Found)!!1</title>\n  <style>\n    *{margin:0;padding:0}html,code{font:15px/22px arial,sans-serif}html{background:#fff;color:#222;padding:15px}body{margin:7% auto 0;max-width:390px;min-height:180px;padding:30px 0 15px}* > body{background:url(//www.google.com/images/errors/robot.png) 100% 5px no-repeat;padding-right:205px}p{margin:11px 0 22px;overflow:hidden}ins{color:#777;text-decoration:none}a img{border:0}@media screen and (max-width:772px){body{background:none;margin-top:0;max-width:none;padding-right:0}}#logo{background:url(//www.google.com/images/errors/logo_sm_2.png) no-repeat}@media only screen and (min-resolution:192dpi){#logo{background:url(//www.google.com/images/errors/logo_sm_2_hr.png) no-repeat 0% 0%/100% 100%;-moz-border-image:url(//www.google.com/images/errors/logo_sm_2_hr.png) 0}}@media only screen and (-webkit-min-device-pixel-ratio:2){#logo{background:url(//www.google.com/images/errors/logo_sm_2_hr.png) no-repeat;-webkit-background-size:100% 100%}}#logo{display:inline-block;height:55px;width:150px}\n  </style>\n  <a href=//www.google.com/><span id=logo aria-label=Google></span></a>\n  <p><b>404.</b> <ins>That's an error.</ins>\n  <p>The requested URL <code>/error</code> was not found on this server.  <ins>That's all we know.</ins>\";\n\nIConfiguration config = Configuration.Default;\nIBrowsingContext context = BrowsingContext.New(config);\nIDocument document = await context.OpenAsync(req => req.Content(source));\nConsole.WriteLine(document.DocumentElement.OuterHtml);\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Parsing and DOM Manipulation with AngleSharp\nDESCRIPTION: Example demonstrating how to parse HTML content, create a browsing context, and perform basic DOM manipulations including creating and appending new elements.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing AngleSharp;\nusing AngleSharp.Html.Parser;\n\nclass MyClass {\n    static async Task Main() {\n        //Use the default configuration for AngleSharp\n        IConfiguration config = Configuration.Default;\n\n        //Create a new context for evaluating webpages with the given config\n        IBrowsingContext context = BrowsingContext.New(config);\n\n        //Source to be parsed\n        var source = \"<h1>Some example source</h1><p>This is a paragraph element\";\n\n        //Create a virtual request to specify the document to load (here from our fixed string)\n        IDocument document = await context.OpenAsync(req => req.Content(source));\n\n        //Do something with document like the following\n        Console.WriteLine(\"Serializing the (original) document:\");\n        Console.WriteLine(document.DocumentElement.OuterHtml);\n\n        IElement p = document.CreateElement(\"p\");\n        p.TextContent = \"This is another paragraph.\";\n\n        Console.WriteLine(\"Inserting another element in the body ...\");\n        document.Body.AppendChild(p);\n\n        Console.WriteLine(\"Serializing the document again:\");\n        Console.WriteLine(document.DocumentElement.OuterHtml);\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Wikipedia Page Elements with AngleSharp\nDESCRIPTION: Demonstrates how to load and parse a Wikipedia page using AngleSharp, including configuration setup, async document loading, and DOM querying with LINQ.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar config = Configuration.Default.WithDefaultLoader();\nvar address = \"https://en.wikipedia.org/wiki/List_of_The_Big_Bang_Theory_episodes\";\nvar context = BrowsingContext.New(config);\nvar document = await context.OpenAsync(address);\nvar cellSelector = \"tr.vevent td:nth-child(3)\";\nvar cells = document.QuerySelectorAll(cellSelector);\nvar titles = cells.Select(m => m.TextContent);\n```\n\n----------------------------------------\n\nTITLE: Element Selection using LINQ and CSS Selectors\nDESCRIPTION: Demonstrates different approaches to selecting elements using both LINQ queries and CSS selectors. Shows how to filter elements based on class names and compare both methods.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task UsingLinq()\n{\n    IBrowsingContext context = BrowsingContext.New(Configuration.Default);\n    IDocument document = await context.OpenAsync(req => req.Content(\"<ul><li>First item<li>Second item<li class='blue'>Third item!<li class='blue red'>Last item!</ul>\"));\n    IEnumerable<IElement> blueListItemsLinq = document.All.Where(m => m.LocalName == \"li\" && m.ClassList.Contains(\"blue\"));\n    IHtmlCollection<IElement> blueListItemsCssSelector = document.QuerySelectorAll(\"li.blue\");\n    Console.WriteLine(\"Comparing both ways ...\");\n    Console.WriteLine();\n    Console.WriteLine(\"LINQ:\");\n    foreach (var item in blueListItemsLinq)\n    {\n        Console.WriteLine(item.TextContent);\n    }\n    Console.WriteLine();\n    Console.WriteLine(\"CSS:\");\n    foreach (var item in blueListItemsCssSelector)\n    {\n        Console.WriteLine(item.TextContent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Element Selection and Text Extraction\nDESCRIPTION: Shows different methods for selecting single elements and extracting text content using various DOM properties and helper methods. Demonstrates the differences between InnerHtml, OuterHtml, and TextContent.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task SingleElements()\n{\n    IBrowsingContext context = BrowsingContext.New(Configuration.Default);\n    IDocument document = await context.OpenAsync(req => req.Content(\"<b><i>This is some <em> bold <u>and</u> italic </em> text!</i></b>\"));\n    IElement emphasize = document.QuerySelector(\"em\");\n    Console.WriteLine(\"Difference between several ways of getting text:\");\n    Console.WriteLine();\n    Console.WriteLine(\"Only from C# / AngleSharp:\");\n    Console.WriteLine();\n    Console.WriteLine(emphasize.ToHtml());   //<em> bold <u>and</u> italic </em>\n    Console.WriteLine(emphasize.Text());// bold and italic\n    Console.WriteLine();\n    Console.WriteLine(\"From the DOM:\");\n    Console.WriteLine();\n    Console.WriteLine(emphasize.InnerHtml);  // bold <u>and</u> italic\n    Console.WriteLine(emphasize.OuterHtml);  //<em> bold <u>and</u> italic </em>\n    Console.WriteLine(emphasize.TextContent);// bold and italic\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Submission with AngleSharp\nDESCRIPTION: Demonstrates how to submit a form using the simplified approach with an anonymous object for form values. This example shows submitting a search query to Google using AngleSharp's form submission capabilities.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/04-Forms.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nIBrowsingContext context = BrowsingContext.New(Configuration.Default.WithDefaultLoader());\nIDocument queryDocument = await context.OpenAsync(\"https://google.com\");\nIHtmlFormElement form = queryDocument.QuerySelector<IHtmlFormElement>(\"form\");\nIDocument resultDocument = await form.SubmitAsync(new { q = \"anglesharp\" });\n// e.g., resultDocument.QuerySelectorAll<IHtmlAnchorElement>(\"#ires .g h3.r a\").Select(m => m.Href).Dump();\n```\n\n----------------------------------------\n\nTITLE: Configuring AngleSharp with Network Credentials and HttpClient in C#\nDESCRIPTION: This snippet shows how to configure AngleSharp with network credentials using HttpClient. It demonstrates setting up authentication for requests made through AngleSharp.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar credentials = new NetworkCredential(\"user\", \"pass\", \"domain\");\nvar handler = new HttpClientHandler { Credentials = credentials };\nIConfiguration config = Configuration.Default\n    .WithRequesters(handler)\n    .WithCookies()\n    .WithDefaultLoader();\nIBrowsingContext context = BrowsingContext.New(config);\nIDocument document = await context.OpenAsync(url);\n```\n\n----------------------------------------\n\nTITLE: Complex DOM Manipulation with JavaScript in AngleSharp using C#\nDESCRIPTION: This example shows how to use AngleSharp with JavaScript and CSS to perform complex DOM manipulations. It demonstrates creating elements, modifying classes, and removing nodes using both inline JavaScript and the parsed document.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic async void ExtendedScriptingSample()\n{\n    //We require a custom configuration with JavaScript and CSS\n    IConfiguration config = Configuration.Default.WithJs().WithCss();\n\n    //Create a new context for evaluating webpages with the given config\n    IBrowsingContext context = BrowsingContext.New(config);\n\n    //This is our sample source, we will do some DOM manipulation\n    var source = @\"<!doctype html>\n        <html>\n        <head><title>Sample</title></head>\n        <style>\n        .bold {\n          font-weight: bold;\n        }\n        .italic {\n          font-style: italic;\n        }\n        span {\n          font-size: 12pt;\n        }\n        div {\n          background: #777;\n          color: #f3f3f3;\n        }\n        </style>\n        <body>\n        <div id=content></div>\n        <script>\n        (function() {\n          var doc = document;\n          var content = doc.querySelector('#content');\n          var span = doc.createElement('span');\n          span.id = 'myspan';\n          span.classList.add('bold', 'italic');\n          span.textContent = 'Some sample text';\n          content.appendChild(span);\n          var script = doc.querySelector('script');\n          script.parentNode.removeChild(script);\n        })();\n        </script>\n        </body>\";\n\n    IDocument document = await context.OpenAsync(req => req.Content(source));\n\n    //HTML will have changed completely (e.g., no more script element)\n    Console.WriteLine(document.DocumentElement.OuterHtml);\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript in HTML with AngleSharp in C#\nDESCRIPTION: This snippet demonstrates how to configure AngleSharp with JavaScript support, parse HTML containing a script, and execute it. It shows how to modify the document title and content using JavaScript within the parsed HTML.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task SimpleScriptingSample()\n{\n    //We require a custom configuration\n    IConfiguration config = Configuration.Default.WithJs();\n\n    //Create a new context for evaluating webpages with the given config\n    IBrowsingContext context = BrowsingContext.New(config);\n\n    //This is our sample source, we will set the title and write on the document\n    var source = @\"<!doctype html>\n        <html>\n            <head><title>Sample</title></head>\n        <body>\n            <script>\n                document.title = 'Simple manipulation...';\n                document.write('<span class=greeting>Hello World!</span>');\n            </script>\n        </body>\";\n\n    IDocument document = await context.OpenAsync(req => req.Content(source));\n\n    //Modified HTML will be output\n    Console.WriteLine(document.DocumentElement.OuterHtml);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AngleSharp Context with Default Loader and Cookies in C#\nDESCRIPTION: This snippet demonstrates how to configure an AngleSharp context with default loader options and cookie support. It's a prerequisite for using AngleSharp's document loading capabilities.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIConfiguration config = Configuration.Default\n    .WithDefaultLoader(new LoaderOptions { IsResourceLoadingEnabled = true })\n    .WithCookies();\nIBrowsingContext context = BrowsingContext.New(config);\n```\n\n----------------------------------------\n\nTITLE: Installing AngleSharp via NuGet Package Manager\nDESCRIPTION: Command to install AngleSharp package using the NuGet Package Manager Console.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package AngleSharp\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms via Specific Control Elements\nDESCRIPTION: Demonstrates how to submit a form through a specific submit button element, which is necessary for websites that require form submission to be triggered from particular controls.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/04-Forms.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// first research how to identify the submit element on the page you're working with, then...\nIHtmlInputElement submitButton = queryDocument.QuerySelection<IHtmlInputElement>(\"#submitbutton\");\nIDocument resultDocument = await form.SubmitAsync(submitButton);\n```\n\n----------------------------------------\n\nTITLE: Proper DOM Element Creation\nDESCRIPTION: Shows the correct way to create DOM elements using document.CreateElement method.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nIElement paragraph = document.CreateElement(\"p\");\n```\n\n----------------------------------------\n\nTITLE: Simple DOM Manipulation with AngleSharp\nDESCRIPTION: Shows how to create and manipulate HTML documents by creating new elements and modifying the DOM tree structure. The example creates a paragraph element and appends it to the document body.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task FirstExample()\n{\n    IConfiguration config = Configuration.Default;\n    IBrowsingContext context = BrowsingContext.New(config);\n    IDocument document = await context.OpenAsync(req => req.Content(\"<h1>Some example source</h1><p>This is a paragraph element\"));\n    Console.WriteLine(\"Serializing the (original) document:\");\n    Console.WriteLine(document.DocumentElement.OuterHtml);\n    IElement p = document.CreateElement(\"p\");\n    p.TextContent = \"This is another paragraph.\";\n    Console.WriteLine(\"Inserting another element in the body ...\");\n    document.Body.AppendChild(p);\n    Console.WriteLine(\"Serializing the document again:\");\n    Console.WriteLine(document.DocumentElement.OuterHtml);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Elements Matching a Selector in AngleSharp C#\nDESCRIPTION: This snippet demonstrates how to remove all elements matching a specific selector from an AngleSharp document. It uses LINQ to query and remove elements.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var element in document.QuerySelectorAll('span'))\n{\n    element.Remove();\n}\n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation with jQuery-like Extensions\nDESCRIPTION: Example showing how to use AngleSharp's jQuery-like extension methods for DOM manipulation.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n//Create a new browsing context for hosting the document\nIBrowsingContext context = Browsing.New(Configuration.Default);\n\n//Generate HTML DOM for the following source code\nIDocument document = await context.OpenAsync(req => req.Content(\"<ul><li>First element<li>Second element<li>third<li class=bla>Last\"));\n\n//Get all li elements and set the test attribute to the value test; elements still contains all li elements\nIHtmlCollection<IElement> elements = document.QuerySelectorAll(\"li\").Attr(\"test\", \"test\");\n```\n\n----------------------------------------\n\nTITLE: Extracting URLs from HTML Using LINQ and AngleSharp in C#\nDESCRIPTION: This snippet shows how to extract URLs from anchor tags in an HTML document using LINQ and AngleSharp. It filters the links based on a keyword.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<IHtmlAnchorElement> links = document.Links\n    .OfType<IHtmlAnchorElement>()\n    .Select(e => e.Href)\n    .Where(h => h.Contains(keyword));\n```\n\n----------------------------------------\n\nTITLE: Creating Elements from String in AngleSharp (C#)\nDESCRIPTION: Illustrates how to create elements from a string using AngleSharp's document fragment parsing. This method allows for generating a node list in the correct element context.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nIBrowsingContext context = BrowsingContext.New(Configuration.Default);\nIDocument document = await context.OpenAsync(r => r.Content(\"<div id=app><div>Some already available content...</div></div>\"));\nIElement app = document.QuerySelector(\"#app\");\nIHtmlParser parser = context.GetService<IHtmlParser>();\nINodeList nodes = parser.ParseFragment(\"<div id='div1'>hi<p>world</p></div>\", app);\napp.Append(nodes.ToArray());\n```\n\n----------------------------------------\n\nTITLE: Configuring AngleSharp Culture in C#\nDESCRIPTION: This snippet demonstrates how to create a custom Configuration object for AngleSharp, setting the Culture to German. The Configuration is immutable, and extension methods return new modified instances.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/01-API.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = Configuration.Default.WithCulture(\"de-de\");\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Input Element in AngleSharp (C#)\nDESCRIPTION: Demonstrates how to add files to an input element of type 'file' using AngleSharp. It shows the usage of the Files property and mentions potential issues with form submission.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar input = document.QuerySelector<IHtmlInputElement>(\"input[type=file][name=myInputFile]\");\ninput?.Files.Add(file);\n```\n\n----------------------------------------\n\nTITLE: Manual Form Field Manipulation in AngleSharp\nDESCRIPTION: Shows how to manually access and set form field values before submission. This approach is more verbose but offers better error handling when specific form elements need to be manipulated.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/04-Forms.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// ...\nvar queryInput = form.Elements[\"q\"] as IHtmlInputElement;\n\nif (queryInput != null)\n{\n    queryInput.Value = \"anglesharp\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using OnCreated Callback for Element Manipulation in HTML Parser in C#\nDESCRIPTION: This example shows how to use the OnCreated callback to modify elements as they are created during parsing, based on their position in the document.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    OnCreated = (element, position) =>\n    {\n        if (25 <= position.Index && position.Index < 35)\n            element.TextContent += \" bar\";\n    }\n});\nvar html = \"<html><head></head><body><p>foo</p></body></html>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.DocumentElement.ToHtml());\n```\n\n----------------------------------------\n\nTITLE: Configuring AngleSharp with Cookie Support\nDESCRIPTION: Shows how to configure AngleSharp with cookie support, which is often required for submitting forms on secured websites that maintain session state using cookies.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/04-Forms.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIconfiguration config = Configuration.Default\n    .WithDefaultLoader()\n    .WithCookies();\nIBrowsingContext context = BrowsingContext.New(config);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Document Encoding with AngleSharp in C#\nDESCRIPTION: This code snippet shows how to use AngleSharp's virtual request API to specify the encoding when loading a document from a stream. It sets the content-type header to indicate UTF-8 encoding.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nIBrowsingContext context = BrowsingContext.New();\n\nIDocument document = await context.OpenAsync(req => req.Content(myStream).Header(\"content-type\", \"text/html; charset=UTF-8\"));\n```\n\n----------------------------------------\n\nTITLE: Alternative HTML Parsing Approach using IHtmlParser\nDESCRIPTION: Shows an alternative method for parsing HTML content using the IHtmlParser service from the browsing context.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIBrowsingContext context = BrowsingContext.New(config);\nIHtmlParser parser = context.GetService<IHtmlParser>();\nvar source = \"<h1>Some example source</h1><p>This is a paragraph element\";\nIDocument document = parser.ParseDocument(source);\n```\n\n----------------------------------------\n\nTITLE: Parsing Text from Anonymous Blocks in AngleSharp (C#)\nDESCRIPTION: Shows how to extract text from anonymous blocks using AngleSharp. This snippet demonstrates traversing child nodes and filtering by node type to retrieve text content.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nIHtmlCollection<IElement> products = document.QuerySelectorAll(\"div.product\");\n\nforeach (var product in products)\n{\n    INode productTitle = product.ChildNodes\n        .First(o => o.NodeType == NodeType.Text && o.TextContent.Trim() != \"\");\n    Console.WriteLine(productTitle.TextContent.Trim());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Parser with Custom Character Reference Handling in C#\nDESCRIPTION: This snippet demonstrates how to configure the HTML parser to not consume character references and use a custom formatter for output. It shows the difference in output when IsNotConsumingCharacterReferences is set to true or false.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar formatter = new MyFormatter();\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsNotConsumingCharacterReferences = true,\n});\nvar html = \"<html><head></head><body><p>&amp;foo</p></body></html>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.DocumentElement.ToHtml(formatter));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyFormatter : IMarkupFormatter\n{\n    public string CloseTag(IElement element, bool selfClosing) => HtmlMarkupFormatter.Instance.CloseTag(element, selfClosing);\n    public string Comment(IComment comment) => HtmlMarkupFormatter.Instance.Comment(comment);\n    public string Doctype(IDocumentType doctype) => HtmlMarkupFormatter.Instance.Doctype(doctype);\n    public string LiteralText(ICharacterData text) => HtmlMarkupFormatter.Instance.LiteralText(text);\n    public string OpenTag(IElement element, bool selfClosing) => HtmlMarkupFormatter.Instance.OpenTag(element, selfClosing);\n    public string Processing(IProcessingInstruction processing) => HtmlMarkupFormatter.Instance.Processing(processing);\n    public string Text(ICharacterData text) => HtmlMarkupFormatter.Instance.LiteralText(text);\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Element Creation with Extension Method\nDESCRIPTION: Demonstrates using generic extension method for creating typed DOM elements without casting.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIHtmlParagraphElement paragraph = document.CreateElement<IHtmlParagraphElement>();\n```\n\n----------------------------------------\n\nTITLE: Enabling Processing Instructions Support in HTML Parser in C#\nDESCRIPTION: This snippet demonstrates how to enable support for processing instructions in the HTML parser, which affects how <?...?> tokens are handled.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsSupportingProcessingInstructions = true\n});\nvar html = \"<html><head></head><body><p><?xml version=\\\"1.0\\\" encoding=\\\"UTF - 8\\\" ?></p></body></html>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.DocumentElement.ToHtml());\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Document with AngleSharp in C#\nDESCRIPTION: Shows the change in parsing HTML from using Parse to ParseDocument method.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/05-Migration.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIDocument htmlDocument = parser.ParseDocument(\"\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in HTML Parser for JavaScript in C#\nDESCRIPTION: This snippet demonstrates how to enable strict mode for JavaScript parsing within HTML, which affects how inline scripts are interpreted.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsStrictMode = true\n});\nvar html = \"<html><head></head><body><script>x = 0;</script><p>foo</p></body></html>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.DocumentElement.ToHtml());\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Parser with BrowsingContext in C#\nDESCRIPTION: Illustrates the new way of creating an HTML parser using a BrowsingContext instead of Configuration.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/05-Migration.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIBrowsingContext context = BrowsingContext.New(Configuration.Default);\nvar parser = context.GetService<IHtmlParser>();\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Attribute Names in HTML Parser in C#\nDESCRIPTION: This snippet demonstrates how to configure the HTML parser to preserve the original case of attribute names, which is useful for parsing templates with case-sensitive attributes.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsPreservingAttributeNames = true\n});\nvar html = @\"<div *ngIf=\"\"condition\"\">Content to render when condition is true.</div>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.DocumentElement.ToHtml());\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Parser to Keep Source References in C#\nDESCRIPTION: This example shows how to configure the HTML parser to keep source references, which allows accessing position information for elements in the parsed document.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsKeepingSourceReferences = false\n});\nvar html = \"<html><head></head><body><p>foo</p></body></html>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.QuerySelector(\"a\").SourceReference?.Position.ToString());\n```\n\n----------------------------------------\n\nTITLE: Configuring AngleSharp with Default Loader in C#\nDESCRIPTION: Demonstrates the change in configuring AngleSharp's default loader from using a callback to using an options object.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/05-Migration.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconfig.WithDefaultLoader(new LoaderOptions { IsResourceLoadingEnabled = true })\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Elements Everywhere in HTML Parser in C#\nDESCRIPTION: This example shows how to configure the HTML parser to accept custom elements in locations where they are usually forbidden, such as inside the <head> tag.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/02-Options.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsAcceptingCustomElementsEverywhere = true\n});\nvar html = @\"<html><head><my-element foo=\"\"bar\"\"></my-element></head></html>\";\nIDocument document = parser.ParseDocument(html);\nConsole.WriteLine(document.DocumentElement.ToHtml());\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Display Property with AngleSharp.Css in C#\nDESCRIPTION: Demonstrates the new way of setting CSS properties using extension methods from AngleSharp.Css.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/05-Migration.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n((IHtmlElement)element).Style.SetDisplay(\"flex\");\n```\n\n----------------------------------------\n\nTITLE: Transforming Implicit Event Handler to Explicit Form in C#\nDESCRIPTION: This code snippet demonstrates the transformation of an implicit event handler to an explicit form using AddEventListener and RemoveEventListener methods. It shows how to properly implement event handling in AngleSharp.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/02-Features.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic event EventListener Aborted\n{\n    add { AddEventListener(EventNames.Abort, value); }\n    remove { RemoveEventListener(EventNames.Abort, value); }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing CSS Selectors with AngleSharp in C#\nDESCRIPTION: Shows how to parse CSS selectors using the ICssSelectorParser service from a BrowsingContext.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/05-Migration.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nIConfiguration config = Configuration.Default;\n\n// use the consuming (or a new) context\nIBrowsingContext context = BrowsingContext.New(config);\n\n// get the registered parser instance\nICssSelectorParser parser = context.GetService<ICssSelectorParser>();\n\n// use as before\nISelector selector = parser.ParseSelector(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Implementing IFile Interface for AngleSharp (C#)\nDESCRIPTION: Provides a basic implementation of the IFile interface for use with AngleSharp. This class, FileEntry, includes properties and methods required for file handling in AngleSharp.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nclass FileEntry : IFile\n{\n    private readonly String _fileName;\n    private readonly Stream _content;\n    private readonly String _type;\n    private readonly DateTime _modified;\n\n    public FileEntry(String fileName, String type, Stream content)\n    {\n        _fileName = fileName;\n        _type = type;\n        _content = content;\n        _modified = DateTime.Now;\n    }\n\n    public Stream Body\n    {\n        get { return _content; }\n    }\n\n    public Boolean IsClosed\n    {\n        get { return _content.CanRead == false; }\n    }\n\n    public DateTime LastModified\n    {\n        get { return _modified; }\n    }\n\n    public Int32 Length\n    {\n        get\n        {\n            return (Int32)_content.Length;\n        }\n    }\n\n    public String Name\n    {\n        get { return _fileName; }\n    }\n\n    public String Type\n    {\n        get { return _type; }\n    }\n\n    public void Close()\n    {\n        _content.Close();\n    }\n\n    public void Dispose()\n    {\n        _content.Dispose();\n    }\n\n    public IBlob Slice(Int32 start = 0, Int32 end = Int32.MaxValue, String contentType = null)\n    {\n        var ms = new MemoryStream();\n        _content.Position = start;\n        var buffer = new Byte[Math.Max(0, Math.Min(end, _content.Length) - start)];\n        _content.Read(buffer, 0, buffer.Length);\n        ms.Write(buffer, 0, buffer.Length);\n        _content.Position = 0;\n        return new FileEntry(_fileName, _type, ms);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading an Image Using HttpClient in C#\nDESCRIPTION: This snippet demonstrates how to download an image from a URL and save it locally using HttpClient. It shows the basic approach without using AngleSharp directly.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar imageUrl = @\"https://via.placeholder.com/150\";\nvar localPath = @\"g:\\downloads\\image.jpg\";\n\nusing (var client = new HttpClient())\n{\n\tusing (var response = await client.GetAsync(imageUrl))\n\t{\n\t\tusing (var source = await response.Content.ReadAsStreamAsync())\n\t\t{\n\t\t\tusing (var target = File.OpenWrite(localPath))\n\t\t\t{\n\t\t\t\tawait source.CopyToAsync(target);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Extension Methods in C#\nDESCRIPTION: This snippet demonstrates how to define extension methods for DOM interfaces in AngleSharp using attributes. It shows the use of DomExposed and DomAccessor attributes to create getter and setter methods for a Style property on IElement.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/05-Migration.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[DomExposed]\npublic static class ElementExtensions\n{\n    [DomAccessor(Accessors.Getter)]\n    public static ICssStyleDeclaration GetStyle(this IElement element)\n    {\n        // Implementation\n    }\n\n    [DomAccessor(Accessors.Setter)]\n    public static void SetStyle(this IElement element, ICssStyleDeclaration value)\n    {\n        // Implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading an Image Using AngleSharp's IDocumentLoader in C#\nDESCRIPTION: This snippet shows how to download an image using AngleSharp's IDocumentLoader. It demonstrates how to use AngleSharp's context and services for making requests.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar imageUrl = @\"https://via.placeholder.com/150\";\nvar localPath = @\"g:\\downloads\\image.jpg\";\nvar download = context.GetService<IDocumentLoader>().FetchAsync(new DocumentRequest(new Url(imageUrl)));\n\nusing (var response = await download.Task)\n{\n\tusing (var target = File.OpenWrite(localPath))\n\t{\n\t\tawait response.Content.CopyToAsync(target);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Closing Tags with AngleSharp (C#)\nDESCRIPTION: Demonstrates how to create self-closing tags in AngleSharp using a custom extension method and a custom markup formatter. This approach modifies the internal flags of the element and provides a custom HTML output.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ElementExtensions\n{\n    public static void AsSelfClosing(this IElement element)\n    {\n        const int SelfClosing = 0x1;\n\n        var type = typeof(IElement).Assembly.GetType(\"AngleSharp.Dom.Node\");\n        var field = type.GetField(\"_flags\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n        var flags = (uint)field.GetValue(element);\n        flags |= SelfClosing;\n        field.SetValue(element, Enum.ToObject(field.FieldType, flags));\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomHtmlMarkupFormatter : IMarkupFormatter\n{\n    public static readonly CustomHtmlMarkupFormatter Instance = new CustomHtmlMarkupFormatter();\n\n    public string Text(String text) => HtmlMarkupFormatter.Instance.Text(text);\n    public string Comment(IComment comment) => HtmlMarkupFormatter.Instance.Comment(comment);\n    public string Processing(IProcessingInstruction processing) => HtmlMarkupFormatter.Instance.Processing(processing);\n    public string Doctype(IDocumentType doctype) => HtmlMarkupFormatter.Instance.Doctype(doctype);\n    public string CloseTag(IElement element, Boolean selfClosing) => HtmlMarkupFormatter.Instance.CloseTag(element, selfClosing);\n    public string Attribute(IAttr attribute) => HtmlMarkupFormatter.Instance.Attribute(attribute);\n\n    public string OpenTag(IElement element, Boolean selfClosing)\n    {\n        var temp = new StringBuilder();\n        temp.Append('<');\n\n        if (!String.IsNullOrEmpty(element.Prefix))\n        {\n            temp.Append(element.Prefix).Append(':');\n        }\n\n        temp.Append(element.LocalName);\n\n        foreach (var attribute in element.Attributes)\n        {\n            temp.Append(\" \").Append(Instance.Attribute(attribute));\n        }\n\n        temp.Append(selfClosing ? \" />\" : \">\");\n\n        return temp.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking HTML Parsing Performance in C#\nDESCRIPTION: This code snippet demonstrates a method for benchmarking HTML parsing performance. It runs multiple trials of parsing a given HTML source using different parsers and returns the minimum elapsed time. The snippet includes methods for testing both AngleSharp and HtmlAgilityPack.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nstatic async Task<Int64> Test(Func<String, Int64> test, String source)\n{\n    var min = Int64.MaxValue;\n\n    for (int i = 0; i < 20; i++) {\n        min = Math.Min(min, await Task.Run(() => test(source)));\n    }\n\n    return min;\n}\n\nstatic Int64 TestAngle(String source)\n{\n    var sw = Stopwatch.StartNew();\n    var parser = new HtmlParser(source);\n    parser.Parse();\n    sw.Stop();\n    return sw.ElapsedMilliseconds;\n}\n\nstatic Int64 TestAgility(String source)\n{\n    var sw = Stopwatch.StartNew();\n    var document = new HtmlDocument();\n    document.LoadHtml(source);\n    sw.Stop();\n    return sw.ElapsedMilliseconds;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Positions in Source Code with AngleSharp (C#)\nDESCRIPTION: Demonstrates two methods for retrieving the positions of elements in the source code using AngleSharp. It shows how to use the OnCreated callback and the IsKeepingSourceReferences option.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/06-Questions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar bodyPos = TextPosition.Empty;\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    OnCreated = (IElement element, TextPosition position) =>\n    {\n        if (element.TagName == \"BODY\")\n        {\n            bodyPos = position;\n        }\n    },\n});\nIDocument document = parser.ParseDocument(\"<!doctype html><body>\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar parser = new HtmlParser(new HtmlParserOptions\n{\n    IsKeepingSourceReferences = true,\n});\nIDocument document = parser.ParseDocument(\"<!doctype html><body>\");\nTextPosition bodyPos = document.Body.SourceReference.Position;\n```\n\nLANGUAGE: csharp\nCODE:\n```\nTextPosition bodyPos = document.Body.SourceReference?.Position ?? TextPosition.Empty;\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Declaration for Wikipedia Page Parsing\nDESCRIPTION: Same Wikipedia parsing example as above but with explicit type declarations, showing the strongly-typed nature of AngleSharp's API.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIConfiguration config = Configuration.Default.WithDefaultLoader();\nstring address = \"https://en.wikipedia.org/wiki/List_of_The_Big_Bang_Theory_episodes\";\nIBrowsingContext context = BrowsingContext.New(config);\nIDocument document = await context.OpenAsync(address);\nstring cellSelector = \"tr.vevent td:nth-child(3)\";\nIHtmlCollection<IElement> cells = document.QuerySelectorAll(cellSelector);\nIEnumerable<string> titles = cells.Select(m => m.TextContent);\n```\n\n----------------------------------------\n\nTITLE: Defining Event Name Constant in C#\nDESCRIPTION: This snippet shows how event names are defined as readonly static fields in the EventNames class. These constants are used for consistent event naming throughout the AngleSharp library.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/02-Features.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly String Abort = \"abort\";\n```\n\n----------------------------------------\n\nTITLE: Configuring BenchmarkDotNet for HTML Parser Performance Testing\nDESCRIPTION: This snippet shows the setup configuration for BenchmarkDotNet used to run the HTML parser performance tests. It specifies the BenchmarkDotNet version, operating system, CPU, and .NET Framework version used for the benchmarks.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042\nAMD Ryzen 7 2700X, 1 CPU, 16 logical and 8 physical cores\n  [Host]   : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n  ShortRun : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n\nJob=ShortRun  IterationCount=3  LaunchCount=1\nWarmupCount=3\n```\n\n----------------------------------------\n\nTITLE: Benchmark Configuration for DOM Querying and CSS Selector Tests\nDESCRIPTION: This code snippet shows the configuration settings for the benchmark tests, including the system specifications and BenchmarkDotNet version used for the performance comparisons between CsQuery and AngleSharp.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042\nAMD Ryzen 7 2700X, 1 CPU, 16 logical and 8 physical cores\n  [Host]   : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n  ShortRun : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT\n\nJob=ShortRun  IterationCount=3  LaunchCount=1\nWarmupCount=3\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Table for CSS Selector Operations\nDESCRIPTION: This markdown table presents the benchmark results for various CSS selector operations, comparing CsQuery and AngleSharp libraries. It includes metrics such as execution time, memory allocation, and garbage collection for different selectors.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|     Method |             Selector |         Mean |       Error |     StdDev |     Gen 0 |   Gen 1 | Gen 2 |  Allocated |\n|----------- |--------------------- |-------------:|------------:|-----------:|----------:|--------:|------:|-----------:|\n|    **CsQuery** |               **#title** |     **2.866 μs** |   **0.1455 μs** |  **0.0080 μs** |    **4.4479** |       **-** |     **-** |    **3.42 KB** |\n| AngleSharp |               #title |   313.784 μs |  13.9545 μs |  0.7649 μs |   21.4844 |       - |     - |   16.91 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |                **.note** |     **7.283 μs** |   **1.2611 μs** |  **0.0691 μs** |    **8.1787** |       **-** |     **-** |    **6.28 KB** |\n| AngleSharp |                .note |   326.217 μs |  25.8384 μs |  1.4163 μs |   21.9727 |       - |     - |   17.13 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |              **a[href]** |   **335.407 μs** |  **38.2870 μs** |  **2.0986 μs** |  **346.6797** |       **-** |     **-** |  **266.64 KB** |\n| AngleSharp |              a[href] |   344.184 μs |   9.6133 μs |  0.5269 μs |   27.3438 |       - |     - |   21.21 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** | **a[href][lang][class]** |   **424.967 μs** |  **22.9636 μs** |  **1.2587 μs** |  **454.1016** |       **-** |     **-** |  **349.71 KB** |\n| AngleSharp | a[href][lang][class] |   331.470 μs |  37.9205 μs |  2.0786 μs |   21.9727 |       - |     - |   17.25 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |                 **body** |     **3.672 μs** |   **0.6654 μs** |  **0.0365 μs** |    **4.5700** |       **-** |     **-** |    **3.51 KB** |\n| AngleSharp |                 body |   313.239 μs |  27.4278 μs |  1.5034 μs |   21.4844 |       - |     - |   16.91 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |             **body div** |    **28.863 μs** |   **3.9254 μs** |  **0.2152 μs** |   **28.3813** |       **-** |     **-** |   **21.83 KB** |\n| AngleSharp |             body div |   334.852 μs |  21.7180 μs |  1.1904 μs |   32.2266 |       - |     - |   25.01 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |                  **div** |    **20.936 μs** |   **2.8753 μs** |  **0.1576 μs** |   **20.3857** |       **-** |     **-** |   **15.67 KB** |\n| AngleSharp |                  div |   333.623 μs |  12.5988 μs |  0.6906 μs |   22.9492 |       - |     - |   17.92 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |           **div #title** |    **81.408 μs** |   **0.8466 μs** |  **0.0464 μs** |   **78.9795** |       **-** |     **-** |   **60.67 KB** |\n| AngleSharp |           div #title |   330.792 μs |  45.5623 μs |  2.4974 μs |   22.4609 |       - |     - |   17.33 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |              **div + p** |    **58.216 μs** |   **3.6349 μs** |  **0.1992 μs** |   **54.5654** |       **-** |     **-** |   **41.92 KB** |\n| AngleSharp |              div + p |   420.089 μs |  53.8564 μs |  2.9521 μs |   42.4805 |       - |     - |   32.99 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |              **div > p** |   **167.408 μs** |   **0.7517 μs** |  **0.0412 μs** |  **139.6484** |       **-** |     **-** |  **107.47 KB** |\n| AngleSharp |              div > p |   355.433 μs | 198.0923 μs | 10.8581 μs |   47.3633 |       - |     - |   36.54 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |          **div > p > a** |   **359.735 μs** |  **16.1910 μs** |  **0.8875 μs** |  **308.1055** |       **-** |     **-** |  **236.69 KB** |\n| AngleSharp |          div > p > a |   347.709 μs |  52.0621 μs |  2.8537 μs |   45.4102 |       - |     - |   35.02 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |                **div p** |   **163.559 μs** |   **1.0895 μs** |  **0.0597 μs** |  **141.3574** |       **-** |     **-** |  **108.61 KB** |\n| AngleSharp |                div p |   377.680 μs |  22.3904 μs |  1.2273 μs |   84.4727 |       - |     - |   64.98 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |              **div p a** |   **366.239 μs** |  **15.9706 μs** |  **0.8754 μs** |  **317.8711** |       **-** |     **-** |  **244.52 KB** |\n| AngleSharp |              div p a |   437.168 μs |  30.2473 μs |  1.6580 μs |  106.4453 |       - |     - |   82.09 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |              **div ~ p** | **5,177.381 μs** | **205.7935 μs** | **11.2802 μs** | **6203.1250** |       **-** |     **-** | **4769.67 KB** |\n| AngleSharp |              div ~ p | 1,895.874 μs | 435.0403 μs | 23.8460 μs |  957.0313 |       - |     - |  736.77 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |            **div, p, a** |   **380.255 μs** |  **33.9667 μs** |  **1.8618 μs** |  **172.8516** | **18.5547** |     **-** |   **170.5 KB** |\n| AngleSharp |            div, p, a |   365.555 μs |  37.8889 μs |  2.0768 μs |   43.4570 |       - |     - |   33.48 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |          **div.example** |    **58.140 μs** |   **6.4138 μs** |  **0.3516 μs** |   **66.5283** |       **-** |     **-** |   **51.14 KB** |\n| AngleSharp |          div.example |   342.246 μs |   3.7113 μs |  0.2034 μs |   23.4375 |       - |     - |   18.11 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** | **div.e(...).note [21]** |    **98.881 μs** |   **4.8513 μs** |  **0.2659 μs** |  **110.4736** |       **-** |     **-** |   **84.91 KB** |\n| AngleSharp | div.e(...).note [21] |   347.342 μs |  40.8616 μs |  2.2398 μs |   23.4375 |       - |     - |   18.52 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |    **div:not(.example)** |    **44.816 μs** |   **0.7542 μs** |  **0.0413 μs** |   **34.9121** |       **-** |     **-** |   **26.83 KB** |\n| AngleSharp |    div:not(.example) |   322.179 μs |  10.9380 μs |  0.5995 μs |   22.4609 |       - |     - |   17.59 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |  **div[class!=made_up]** |    **45.888 μs** |  **12.9403 μs** |  **0.7093 μs** |   **49.8657** |       **-** |     **-** |   **38.35 KB** |\n| AngleSharp |  div[class!=made_up] |   312.672 μs |   2.2162 μs |  0.1215 μs |   23.4375 |       - |     - |   18.21 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |     **div[class$=mple]** |    **83.416 μs** |   **5.0121 μs** |  **0.2747 μs** |   **97.6563** |       **-** |     **-** |   **75.09 KB** |\n| AngleSharp |     div[class$=mple] |   320.199 μs |   4.9361 μs |  0.2706 μs |   23.4375 |       - |     - |   18.21 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |        **div[class*=e]** |    **84.710 μs** |   **8.6005 μs** |  **0.4714 μs** |   **95.9473** |       **-** |     **-** |   **73.76 KB** |\n| AngleSharp |        div[class*=e] |   313.320 μs |  11.9783 μs |  0.6566 μs |   23.4375 |       - |     - |   18.21 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |   **div[class=example]** |    **83.916 μs** |   **2.8985 μs** |  **0.1589 μs** |   **95.5811** |       **-** |     **-** |   **73.45 KB** |\n| AngleSharp |   div[class=example] |   316.863 μs |  28.4840 μs |  1.5613 μs |   23.4375 |       - |     - |   18.22 KB |\n|            |                      |              |             |            |           |         |       |            |\n|    **CsQuery** |           **div[class]** |    **61.271 μs** |   **1.7982 μs** |  **0.0986 μs** |   **69.0918** |       **-** |     **-** |   **53.14 KB** |\n| AngleSharp |           div[class] |   316.051 μs |  14.2653 μs |  0.7819 μs |   23.4375 |       - |     - |   18.15 KB |\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Simple Attribute Starts With\nDESCRIPTION: CSS selector testing for div elements with class attribute starting with 'exa'\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\ndiv[class^=exa]\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Complex Element Traversal\nDESCRIPTION: CSS selector for finding p elements that follow an h1 with id 'title' through a div parent\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nh1#title + div > p\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Element Class Exact Match\nDESCRIPTION: CSS selector for finding div elements with class exactly matching 'dialog'\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv[class|=dialog]\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - ID Selector\nDESCRIPTION: Simple CSS selector for finding h1 element with id 'title'\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\nh1#title\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - First Child Elements\nDESCRIPTION: CSS pseudo-class selector for selecting first child p elements\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\np:first-child\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Last Child Elements\nDESCRIPTION: CSS pseudo-class selector for selecting last child p elements\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\np:last-child\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Nth Child Even\nDESCRIPTION: CSS selector for selecting even-numbered child p elements\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\np:nth-child(2n)\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Nth Child Odd\nDESCRIPTION: CSS selector for selecting odd-numbered child p elements\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\np:nth-child(odd)\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Only Child\nDESCRIPTION: CSS pseudo-class selector for selecting p elements that are the only child of their parent\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\np:only-child\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Direct Child With Classes\nDESCRIPTION: CSS selector for finding direct child li elements with class 'tocline2' inside ul elements with class 'toc'\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\nul.toc > li.tocline2\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Descendant Selector\nDESCRIPTION: CSS selector for finding elements with class 'tocline2' inside ul elements\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nul .tocline2\n```\n\n----------------------------------------\n\nTITLE: CSS Selector - Class Contains Word\nDESCRIPTION: CSS selector testing for div elements with class containing the word 'example'\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/04-Performance.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\ndiv[class~=example]\n```\n\n----------------------------------------\n\nTITLE: Displaying AngleSharp Version and Release Date in Markdown\nDESCRIPTION: Shows how version numbers and release dates are formatted in the changelog using Markdown headers.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.3.0\n\nReleased on Friday, April 18 2025.\n```\n\n----------------------------------------\n\nTITLE: Listing Changes in AngleSharp Release Using Markdown\nDESCRIPTION: Demonstrates how changes, fixes, and improvements are listed for each AngleSharp release using Markdown bullet points.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Fixed DOM exposed type of `HasChildNodes` (#1219) @arekdygas\n- Fixed `NodeIterator` behavior when nodes are removed (#1222)\n- Improved form documentation (#1220) @RedZone908\n- Updated to NUKE 9 and removed obsolete .NET 6 and 9 targets (#1216) @lahma\n- Added `GetAttributeNode` methods to `IElement` (#1223) @arekdygas\n- Added support for finding targets in browsing contexts (#1218) @TheJayMann\n- Added support for targetting iframes (#1205) @TheJayMann\n```\n\n----------------------------------------\n\nTITLE: URL Parsing Test Cases\nDESCRIPTION: A series of URL test cases with expected parsing results. Each line contains a test URL followed by the expected parsed components (scheme, host, path, etc.). These tests cover various scenarios including special characters, relative paths, and different protocols.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/TestGeneration/Url/data.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nhttp://example\\t.\\norg http://example.org/foo/bar s:http h:example.org p:/\nhttp://user:pass@foo:21/bar;par?b#c  s:http u:user pass:pass h:foo port:21 p:/bar;par q:?b f:#c\nhttp:foo.com  s:http h:example.org p:/foo/foo.com\n\\t\\s\\s\\s:foo.com\\s\\s\\s\\n  s:http h:example.org p:/foo/:foo.com\n\\sfoo.com\\s\\s  s:http h:example.org p:/foo/foo.com\na:\\t\\sfoo.com  s:a p:\\sfoo.com\nhttp://f:21/\\sb\\s?\\sd\\s#\\se\\s  s:http h:f port:21 p:/%20b%20 q:?%20d%20 f:#\\se\nhttp://f:/c  s:http h:f p:/c\nhttp://f:0/c  s:http h:f port:0 p:/c\nhttp://f:00000000000000/c  s:http h:f port:0 p:/c\nhttp://f:00000000000000000000080/c  s:http h:f p:/c\nhttp://f:b/c\nhttp://f:\\s/c\nhttp://f:\\n/c  s:http h:f p:/c\nhttp://f:fifty-two/c\nhttp://f:999999/c  s:http h:f port:999999 p:/c\nhttp://f:\\s21\\s/\\sb\\s?\\sd\\s#\\se\\s\n  s:http h:example.org p:/foo/bar\n\\s\\s\\t  s:http h:example.org p:/foo/bar\n:foo.com/  s:http h:example.org p:/foo/:foo.com/\n:foo.com\\\\  s:http h:example.org p:/foo/:foo.com/\n:  s:http h:example.org p:/foo/:\n:a  s:http h:example.org p:/foo/:a\n:/  s:http h:example.org p:/foo/:/\n:\\\\  s:http h:example.org p:/foo/:/\n:#  s:http h:example.org p:/foo/: f:#\n\\#  s:http h:example.org p:/foo/bar f:#\n\\#/  s:http h:example.org p:/foo/bar f:#/\n\\#\\\\  s:http h:example.org p:/foo/bar f:#\\\\\n\\#;?  s:http h:example.org p:/foo/bar f:#;?\n?  s:http h:example.org p:/foo/bar q:?\n/  s:http h:example.org p:/\n:23  s:http h:example.org p:/foo/:23\n/:23  s:http h:example.org p:/:23\n::  s:http h:example.org p:/foo/::\n::23  s:http h:example.org p:/foo/::23\nfoo://  s:foo p://\nhttp://a:b@c:29/d  s:http u:a pass:b h:c port:29 p:/d\nhttp::@c:29  s:http h:example.org p:/foo/:@c:29\nhttp://&a:foo(b]c@d:2/  s:http u:&a pass:foo(b]c h:d port:2 p:/\nhttp://::@c@d:2  s:http pass::%40c h:d port:2 p:/\nhttp://foo.com:b@d/  s:http u:foo.com pass:b h:d p:/\nhttp://foo.com/\\\\@  s:http h:foo.com p://@\nhttp:\\\\\\\\foo.com\\\\  s:http h:foo.com p:/\nhttp:\\\\\\\\a\\\\b:c\\\\d@foo.com\\\\  s:http h:a p:/b:c/d@foo.com/\nfoo:/  s:foo p:/\nfoo:/bar.com/  s:foo p:/bar.com/\nfoo://///////  s:foo p://///////\nfoo://///////bar.com/  s:foo p://///////bar.com/\nfoo:////://///  s:foo p:////://///\nc:/foo  s:c p:/foo\n//foo/bar  s:http h:foo p:/bar\nhttp://foo/path;a??e#f#g  s:http h:foo p:/path;a q:??e f:#f#g\nhttp://foo/abcd?efgh?ijkl  s:http h:foo p:/abcd q:?efgh?ijkl\nhttp://foo/abcd#foo?bar  s:http h:foo p:/abcd f:#foo?bar\n[61:24:74]:98  s:http h:example.org p:/foo/[61:24:74]:98\nhttp:[61:27]/:foo  s:http h:example.org p:/foo/[61:27]/:foo\nhttp://[1::2]:3:4\nhttp://2001::1\nhttp://2001::1]\nhttp://2001::1]:80\nhttp://[2001::1]  s:http h:[2001::1] p:/\nhttp://[2001::1]:80  s:http h:[2001::1] p:/\nhttp:/example.com/  s:http h:example.org p:/example.com/\nftp:/example.com/  s:ftp h:example.com p:/\nhttps:/example.com/  s:https h:example.com p:/\nmadeupscheme:/example.com/  s:madeupscheme p:/example.com/\nfile:/example.com/  s:file p:/example.com/\nftps:/example.com/  s:ftps p:/example.com/\ngopher:/example.com/  s:gopher h:example.com p:/\nws:/example.com/  s:ws h:example.com p:/\nwss:/example.com/  s:wss h:example.com p:/\ndata:/example.com/  s:data p:/example.com/\njavascript:/example.com/  s:javascript p:/example.com/\nmailto:/example.com/  s:mailto p:/example.com/\nhttp:example.com/  s:http h:example.org p:/foo/example.com/\nftp:example.com/  s:ftp h:example.com p:/\nhttps:example.com/  s:https h:example.com p:/\nmadeupscheme:example.com/  s:madeupscheme p:example.com/\nftps:example.com/  s:ftps p:example.com/\ngopher:example.com/  s:gopher h:example.com p:/\nws:example.com/  s:ws h:example.com p:/\nwss:example.com/  s:wss h:example.com p:/\ndata:example.com/  s:data p:example.com/\njavascript:example.com/  s:javascript p:example.com/\nmailto:example.com/  s:mailto p:example.com/\n/a/b/c  s:http h:example.org p:/a/b/c\n/a/\\s/c  s:http h:example.org p:/a/%20/c\n/a%2fc  s:http h:example.org p:/a%2fc\n/a/%2f/c  s:http h:example.org p:/a/%2f/c\n\\#\\u03B2  s:http h:example.org p:/foo/bar f:#\\u03B2\ndata:text/html,test#test  s:data p:text/html,test f:#test\n```\n\n----------------------------------------\n\nTITLE: Validating URL Parsing with Various Formats\nDESCRIPTION: A series of test cases for URL parsing, focusing on the handling of userinfo, host, and path components. Each line represents a test case with the input URL followed by the expected parsed components.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/TestGeneration/Url/data.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp:@www.example.com about:blank s:http h:www.example.com p:/\nhttp:/@www.example.com  s:http h:www.example.com p:/\nhttp://@www.example.com  s:http h:www.example.com p:/\nhttp:a:b@www.example.com  s:http u:a pass:b h:www.example.com p:/\nhttp:/a:b@www.example.com  s:http u:a pass:b h:www.example.com p:/\nhttp://a:b@www.example.com  s:http u:a pass:b h:www.example.com p:/\nhttp://@pple.com  s:http h:pple.com p:/\nhttp::b@www.example.com  s:http pass:b h:www.example.com p:/\nhttp:/:b@www.example.com  s:http pass:b h:www.example.com p:/\nhttp://:b@www.example.com  s:http pass:b h:www.example.com p:/\nhttp:/:@/www.example.com\nhttp://user@/www.example.com\nhttp:@/www.example.com\nhttp:/@/www.example.com\nhttp://@/www.example.com\nhttps:@/www.example.com\nhttp:a:b@/www.example.com\nhttp:/a:b@/www.example.com\nhttp://a:b@/www.example.com\nhttp::@/www.example.com\nhttp:a:@www.example.com  s:http u:a pass: h:www.example.com p:/\nhttp:/a:@www.example.com  s:http u:a pass: h:www.example.com p:/\nhttp://a:@www.example.com  s:http u:a pass: h:www.example.com p:/\nhttp://www.@pple.com  s:http u:www. h:pple.com p:/\nhttp:@:www.example.com\nhttp:/@:www.example.com\nhttp://@:www.example.com\nhttp://:@www.example.com  s:http pass: h:www.example.com p:/\n```\n\n----------------------------------------\n\nTITLE: Validating Host Parsing and Canonicalization\nDESCRIPTION: Test cases for host parsing, focusing on canonicalization, handling of spaces, Unicode characters, and invalid inputs. Each line represents a test case with input URL and expected parsed components.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/TestGeneration/Url/data.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://ExAmPlE.CoM http://other.com/ s:http p:/ h:example.com\n\nhttp://example\\sexample.com\n\nhttp://Goo%20\\sgoo%7C|.com\n\nhttp://GOO\\u00a0\\u3000goo.com\n\nhttp://GOO\\u200b\\u2060\\ufeffgoo.com  s:http p:/ h:googoo.com\n\nhttp://www.foo\\u3002bar.com  s:http p:/ h:www.foo.bar.com\n\nhttp://\\ufdd0zyx.com\n\nhttp://%ef%b7%90zyx.com\n\nhttp://\\uff27\\uff4f.com  s:http p:/ h:go.com\n\nhttp://\\uff05\\uff14\\uff11.com\nhttp://%ef%bc%85%ef%bc%94%ef%bc%91.com\n\nhttp://\\uff05\\uff10\\uff10.com\nhttp://%ef%bc%85%ef%bc%90%ef%bc%90.com\n\nhttp://\\u4f60\\u597d\\u4f60\\u597d  s:http p:/ h:xn--6qqa088eba\n\nhttp://%zz%66%a.com\n\nhttp://%25\nhttp://hello%00\n\nhttp://%30%78%63%30%2e%30%32%35%30.01  s:http p:/ h:192.168.0.1\nhttp://%30%78%63%30%2e%30%32%35%30.01%2e  s:http p:/ h:0xc0.0250.01.\nhttp://192.168.0.257\n\nhttp://%3g%78%63%30%2e%30%32%35%30%2E.01\n\nhttp://192.168.0.1\\shello\n\nhttp://\\uff10\\uff38\\uff43\\uff10\\uff0e\\uff10\\uff12\\uff15\\uff10\\uff0e\\uff10\\uff11  s:http p:/ h:192.168.0.1\n\nhttp://[google.com]\n\nhttp://foo:\\uD83D\\uDCA9@example.com/bar  s:http h:example.com p:/bar u:foo pass:%F0%9F%92%A9\n\nx test:test\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure with Empty Divs\nDESCRIPTION: A basic HTML document structure with nested empty div elements and some inline styling. The document uses the iso-8859-9 character encoding.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/AngleSharp.Core.Tests/Html/BrokenMail.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html><head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-9\"></head>\n<body dir=\"ltr\">\n<D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\">\n<div></div>\n<!-- ... many more empty div elements ... -->\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Email Template with Table Layout in HTML\nDESCRIPTION: This snippet defines the structure of an HTML email using a table layout. It includes placeholders for a logo image and contact information. The template uses inline CSS for styling to ensure compatibility across email clients.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/AngleSharp.Core.Tests/Html/BrokenMail.txt#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table style=\"COLOR: #000000\" width=\"700\">\n<tbody>\n<tr>\n<td width=\"278\"><img alt=\"\" src=\"http://www.example.com/mail.jpg\" width=\"236\" height=\"61\"></td>\n<td>\n<div></div>\n<br>\n<br>\n<a style=\"href: &quot;mailto:abc@example.com&quot;\"></a>\n<a style=\"href: &quot;http://www.example.com&quot;\"></a>\n<div></div>\n</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Nested HTML Div and Custom DIV Elements\nDESCRIPTION: This snippet demonstrates a pattern of nested <div> elements and custom <D IV=\"\"> elements. The structure is highly repetitive and deeply nested, possibly used for testing HTML parsing or rendering.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/AngleSharp.Core.Tests/Html/BrokenMail.txt#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div></div><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\">\n```\n\n----------------------------------------\n\nTITLE: Analyzing Nested HTML Div Structure\nDESCRIPTION: This snippet demonstrates a pattern of nested div elements with varying depths. Some div elements have empty attributes, while others are standard empty div tags.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/AngleSharp.Core.Tests/Html/BrokenMail.txt#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div></div><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\"><D IV=\"\">\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript and C# Events in AngleSharp\nDESCRIPTION: This snippet illustrates how to work with events in both JavaScript and C# using AngleSharp. It shows registering event listeners in JavaScript, creating and dispatching custom events, and handling events in C# code.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/tutorials/03-Examples.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic static async void EventScriptingExample()\n{\n    //We require a custom configuration\n    IConfiguration config = Configuration.Default.WithJs();\n\n    //Create a new context for evaluating webpages with the given config\n    IBrowsingContext context = BrowsingContext.New(config);\n\n    //This is our sample source, we will trigger the load event\n    var source = @\"<!doctype html>\n        <html>\n        <head><title>Event sample</title></head>\n        <body>\n        <script>\n        console.log('Before setting the handler!');\n\n        document.addEventListener('load', function() {\n          console.log('Document loaded!');\n        });\n\n        document.addEventListener('hello', function() {\n          console.log('hello world from JavaScript!');\n        });\n\n        console.log('After setting the handler!');\n        </script>\n        </body>\";\n\n    IDocument document = await context.OpenAsync(req => req.Content(source));\n\n    //HTML should be output in the end\n    Console.WriteLine(document.DocumentElement.OuterHtml);\n\n    //Register Hello event listener from C# (we also have one in JS)\n    document.AddEventListener(\"hello\", (s, ev) =>\n    {\n        Console.WriteLine(\"hello world from C#!\");\n    });\n\n    var e = document.CreateEvent(\"event\");\n    e.Init(\"hello\", false, false);\n    document.Dispatch(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid DOM Element Creation Example\nDESCRIPTION: Demonstrates incorrect way of creating DOM elements directly through constructor, which is not allowed in AngleSharp.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/docs/general/01-Basics.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar paragraph = new HTMLParagraphElement();\n```\n\n----------------------------------------\n\nTITLE: Testing Path Resolution and Relative URLs\nDESCRIPTION: A set of test cases for path resolution and handling of relative URLs. Each line shows an input path or URL and the expected parsed components, focusing on correct path resolution.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/TestGeneration/Url/data.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/ http://www.example.com/test s:http h:www.example.com p:/\n/test.txt  s:http h:www.example.com p:/test.txt\n.  s:http h:www.example.com p:/\n..  s:http h:www.example.com p:/\ntest.txt  s:http h:www.example.com p:/test.txt\n./test.txt  s:http h:www.example.com p:/test.txt\n../test.txt  s:http h:www.example.com p:/test.txt\n../aaa/test.txt  s:http h:www.example.com p:/aaa/test.txt\n../../test.txt  s:http h:www.example.com p:/test.txt\n\\u4E2D/test.txt  s:http h:www.example.com p:/%E4%B8%AD/test.txt\nhttp://www.example2.com  s:http h:www.example2.com p:/\n//www.example2.com  s:http h:www.example2.com p:/\n```\n\n----------------------------------------\n\nTITLE: Repeated Empty HTML Title Attributes\nDESCRIPTION: A single line containing multiple occurrences of empty HTML title attributes. This snippet demonstrates improper or unfinished HTML markup.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/AngleSharp.Core.Tests/Html/HtmlTokenization.TokenizationWithManyAttributesShouldNotBreak.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\"\n```\n\n----------------------------------------\n\nTITLE: HTML Tag with Multiple Empty Title Attributes\nDESCRIPTION: An HTML tag containing numerous repeated empty title attributes followed by an empty alt attribute. This pattern may be used for testing HTML parsers or demonstrating how browsers handle repeated empty attributes.\nSOURCE: https://github.com/anglesharp/anglesharp/blob/devel/src/AngleSharp.Core.Tests/Html/HtmlTokenization.TokenizationWithManyAttributesShouldNotBreak.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\ntitle=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" title=\"\" alt=\"\" />\n```"
  }
]