[
  {
    "owner": "reflex-dev",
    "repo": "reflex",
    "content": "TITLE: Building a DALL-E Image Generation App with Reflex\nDESCRIPTION: Complete example of a Reflex application that integrates with OpenAI's DALL-E API to generate images based on user prompts. Demonstrates state management, event handling, UI components, and conditional rendering.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport reflex as rx\nimport openai\n\nopenai_client = openai.OpenAI()\n\n\nclass State(rx.State):\n    \"\"\"The app state.\"\"\"\n\n    prompt = \"\"\n    image_url = \"\"\n    processing = False\n    complete = False\n\n    def get_image(self):\n        \"\"\"Get the image from the prompt.\"\"\"\n        if self.prompt == \"\":\n            return rx.window_alert(\"Prompt Empty\")\n\n        self.processing, self.complete = True, False\n        yield\n        response = openai_client.images.generate(\n            prompt=self.prompt, n=1, size=\"1024x1024\"\n        )\n        self.image_url = response.data[0].url\n        self.processing, self.complete = False, True\n\n\ndef index():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"DALL-E\", font_size=\"1.5em\"),\n            rx.input(\n                placeholder=\"Enter a prompt..\",\n                on_blur=State.set_prompt,\n                width=\"25em\",\n            ),\n            rx.button(\n                \"Generate Image\",\n                on_click=State.get_image,\n                width=\"25em\",\n                loading=State.processing\n            ),\n            rx.cond(\n                State.complete,\n                rx.image(src=State.image_url, width=\"20em\"),\n            ),\n            align=\"center\",\n        ),\n        width=\"100%\",\n        height=\"100vh\",\n    )\n\n# Add state and page to the app.\napp = rx.App()\napp.add_page(index, title=\"Reflex:DALL-E\")\n```\n\n----------------------------------------\n\nTITLE: Creating a DALL-E Image Generation Web App with Reflex\nDESCRIPTION: Complete Python code for building a DALL-E image generation interface using Reflex. Includes state management, API integration with OpenAI, and UI components.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/de/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport reflex as rx\nimport openai\n\nopenai_client = openai.OpenAI()\n\n\nclass State(rx.State):\n    \"\"\"Der Zustand der App.\"\"\"\n\n    prompt = \"\"\n    image_url = \"\"\n    processing = False\n    complete = False\n\n    def get_image(self):\n        \"\"\"Hole das Bild aus dem Prompt.\"\"\"\n        if self.prompt == \"\":\n            return rx.window_alert(\"Prompt Empty\")\n\n        self.processing, self.complete = True, False\n        yield\n        response = openai_client.images.generate(\n            prompt=self.prompt, n=1, size=\"1024x1024\"\n        )\n        self.image_url = response.data[0].url\n        self.processing, self.complete = False, True\n\n\ndef index():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"DALL-E\", font_size=\"1.5em\"),\n            rx.input(\n                placeholder=\"Enter a prompt..\",\n                on_blur=State.set_prompt,\n                width=\"25em\",\n            ),\n            rx.button(\n                \"Generate Image\",\n                on_click=State.get_image,\n                width=\"25em\",\n                loading=State.processing\n            ),\n            rx.cond(\n                State.complete,\n                rx.image(src=State.image_url, width=\"20em\"),\n            ),\n            align=\"center\",\n        ),\n        width=\"100%\",\n        height=\"100vh\",\n    )\n\n# Füge Zustand und Seite zur App hinzu.\napp = rx.App()\napp.add_page(index, title=\"Reflex:DALL-E\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a DALL-E Image Generation Interface with Reflex\nDESCRIPTION: Complete Python code for creating a DALL-E image generation interface using Reflex. Includes state management, UI components, and API integration.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/pt/pt_br/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport reflex as rx\nimport openai\n\nopenai.api_key = \"YOUR_API_KEY\"\n\nclass State(rx.State):\n    \"\"\"Estado da aplicação.\"\"\"\n    prompt = \"\"\n    image_url = \"\"\n    processing = False\n    complete = False\n\n    def get_image(self):\n        \"\"\"Obtenção da imagem a partir do prompt.\"\"\"\n        if self.prompt == \"\":\n            return rx.window_alert(\"Prompt Empty\")\n\n        self.processing, self.complete = True, False\n        yield\n        response = openai.Image.create(prompt=self.prompt, n=1, size=\"1024x1024\")\n        self.image_url = response[\"data\"][0][\"url\"]\n        self.processing, self.complete = False, True\n\n\ndef index():\n    return rx.center(\n        rx.vstack(\n            rx.heading(\"DALL·E\"),\n            rx.input(placeholder=\"Enter a prompt\", on_blur=State.set_prompt),\n            rx.button(\n                \"Generate Image\",\n                on_click=State.get_image,\n                is_loading=State.processing,\n                width=\"100%\",\n            ),\n            rx.cond(\n                State.complete,\n                     rx.image(\n                         src=State.image_url,\n                         height=\"25em\",\n                         width=\"25em\",\n                    )\n            ),\n            padding=\"2em\",\n            shadow=\"lg\",\n            border_radius=\"lg\",\n        ),\n        width=\"100%\",\n        height=\"100vh\",\n    )\n\n# Adição do estado e da página no app.\napp = rx.App()\napp.add_page(index, title=\"reflex:DALL·E\")\n```\n\n----------------------------------------\n\nTITLE: Deploying Reflex with PostgreSQL and Redis using Docker Compose\nDESCRIPTION: This command deploys the Reflex application with additional PostgreSQL and Redis services for a more robust setup. It uses multiple compose files to include the production and database configurations.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-compose/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDOMAIN=example.com docker compose -f compose.yaml -f compose.prod.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Deploying Reflex with Admin Tools using Docker Compose\nDESCRIPTION: This command deploys the Reflex application along with admin tools like Adminer and Redis Commander. It combines multiple compose files to include production, database, and admin tool configurations.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-compose/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDOMAIN=example.com docker compose -f compose.yaml -f compose.prod.yaml -f compose.tools.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy as a Reverse Proxy for Reflex\nDESCRIPTION: Example Caddyfile configuration for setting up a reverse proxy with Caddy. It routes backend-specific paths to port 8000 and all other traffic to port 3000, while also handling TLS termination and gzip encoding.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/simple-two-port/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-domain.com\n\nencode gzip\n\n@backend_routes path /_event/* /ping /_upload /_upload/*\nhandle @backend_routes {\n\treverse_proxy localhost:8000\n}\n\nreverse_proxy localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Compression for Azure Load Balancer\nDESCRIPTION: A configuration snippet to disable per-message deflate for WebSockets when deploying on Azure, which doesn't support this feature. The code creates a custom Uvicorn worker class that overrides the default WebSocket compression settings.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-app-platform/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uvicorn.workers\n\nimport reflex as rx\n\n\nclass NoWSPerMessageDeflate(uvicorn.workers.UvicornH11Worker):\n    CONFIG_KWARGS = {\n        **uvicorn.workers.UvicornH11Worker.CONFIG_KWARGS,\n        \"ws_per_message_deflate\": False,\n    }\n\n\nconfig = rx.Config(\n    app_name=\"my_app\",\n    gunicorn_worker_class=\"rxconfig.NoWSPerMessageDeflate\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Launch Settings for Debugging Reflex Apps\nDESCRIPTION: This JSON configuration sets up a launch configuration in Visual Studio Code for interactively debugging a Reflex app with breakpoints. It specifies the Python module to run, arguments, and working directory.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/DEBUGGING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Reflex App\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"reflex\",\n      \"args\": \"run --env dev\",\n      \"justMyCode\": true,\n      \"cwd\": \"${fileDirname}/..\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Reflex Production Service with Docker Compose\nDESCRIPTION: This command builds the Reflex production service using Docker Compose. It sets the DOMAIN environment variable to specify the hosting domain and builds both the app and webserver services.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-compose/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOMAIN=example.com docker compose build\n```\n\n----------------------------------------\n\nTITLE: Running Reflex Production Service with Docker Compose\nDESCRIPTION: This command starts the Reflex production service using Docker Compose. It sets the DOMAIN environment variable to specify the hosting domain and brings up the services defined in the compose file.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-compose/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDOMAIN=example.com docker compose up\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Container with Port Mapping\nDESCRIPTION: Command to run the Reflex container with proper port mappings. It maps container ports 3000 (NextJS frontend) and 8000 (Python backend) to the same ports on the host.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/simple-two-port/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run -p 3000:3000 -p 8000:8000 reflex-simple-two-port\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Reflex Production Deployment\nDESCRIPTION: This command builds a Docker image for the Reflex production deployment. It uses the Dockerfile in the current directory and tags the image as 'reflex-production-one-port'.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-one-port/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t reflex-production-one-port .\n```\n\n----------------------------------------\n\nTITLE: Running Reflex Production Docker Container\nDESCRIPTION: This command runs the Reflex production Docker container. It maps the container's port 8080 to the host's port 8080, allowing access to the Reflex application.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/production-one-port/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run -p 8080:8080 reflex-production-one-port\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Container for Reflex Two-Port Setup\nDESCRIPTION: Command to build the Docker image for a Reflex deployment with separate frontend and backend ports. This creates a container image tagged as 'reflex-simple-two-port'.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docker-example/simple-two-port/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t reflex-simple-two-port .\n```\n\n----------------------------------------\n\nTITLE: Installing Reflex with pip\nDESCRIPTION: Command to install the Reflex framework using pip package manager. Requires Python 3.10+.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install reflex\n```\n\n----------------------------------------\n\nTITLE: Installing Reflex via pip\nDESCRIPTION: Command to install Reflex using pip. Requires Python 3.10+.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/pt/pt_br/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install reflex\n```\n\n----------------------------------------\n\nTITLE: Installing Reflex with pip\nDESCRIPTION: Command to install the Reflex Python framework using pip. Requires Python 3.10 or higher.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/de/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install reflex\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Reflex Project\nDESCRIPTION: Commands to create a new directory, navigate into it, and initialize a new Reflex application.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my_app_name\ncd my_app_name\nreflex init\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Reflex project\nDESCRIPTION: Commands to create a new directory for a Reflex project and initialize it.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/pt/pt_br/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir nome_do_meu_app\ncd nome_do_meu_app\nreflex init\n```\n\n----------------------------------------\n\nTITLE: Initializing a Reflex Project\nDESCRIPTION: Terminal commands to create a new directory for a Reflex project, navigate to it, and initialize a new Reflex application.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/de/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my_app_name\ncd my_app_name\nreflex init\n```\n\n----------------------------------------\n\nTITLE: Running a Reflex App in Development Mode\nDESCRIPTION: Command to start a Reflex application in development mode with auto-refresh capabilities.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreflex run\n```\n\n----------------------------------------\n\nTITLE: Running a Reflex app in development mode\nDESCRIPTION: Command to run a Reflex app in development mode with hot reloading.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/pt/pt_br/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreflex run\n```\n\n----------------------------------------\n\nTITLE: Running a Reflex App in Development Mode\nDESCRIPTION: Command to run a Reflex application in development mode, which enables hot reloading for immediate feedback when code changes.\nSOURCE: https://github.com/reflex-dev/reflex/blob/main/docs/de/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreflex run\n```"
  }
]