[
  {
    "owner": "clap-rs",
    "repo": "clap",
    "content": "TITLE: Displaying Help Information with clap-rs in Console\nDESCRIPTION: Shows the help output of a program built with clap-rs, displaying available commands, arguments, and options. The help text shows the program supports commands like 'test', accepts an optional 'name' argument, and provides options for configuration, debugging, help, and version information.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/01_quick.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 01_quick --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 01_quick[EXE] [OPTIONS] [name] [COMMAND]\n\nCommands:\n  test  does testing things\n  help  Print this message or the help of the given subcommand(s)\n\nArguments:\n  [name]  Optional name to operate on\n\nOptions:\n  -c, --config <FILE>  Sets a custom config file\n  -d, --debug...       Turn debugging information on\n  -h, --help           Print help\n  -V, --version        Print version\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information with clap-rs in Console\nDESCRIPTION: Shows the help output of a Rust application using clap-rs for command-line argument parsing. The help displays available commands, arguments, and options including config file setting, debug mode, help, and version options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/01_quick.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 01_quick_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 01_quick_derive[EXE] [OPTIONS] [NAME] [COMMAND]\n\nCommands:\n  test  does testing things\n  help  Print this message or the help of the given subcommand(s)\n\nArguments:\n  [NAME]  Optional name to operate on\n\nOptions:\n  -c, --config <FILE>  Sets a custom config file\n  -d, --debug...       Turn debugging information on\n  -h, --help           Print help\n  -V, --version        Print version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating clap-rs CLI Help Output and Command Execution in Console\nDESCRIPTION: Example showing the help output of a clap-rs based application with defined options and their descriptions, followed by a simple command execution with the --name parameter. The example illustrates the automatically generated help menu and how command execution results are displayed.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/demo.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Command Line Validation with clap-rs Derive API\nDESCRIPTION: Console interaction showing how clap-rs handles validation of port numbers. The example demonstrates help output, successful parsing of valid port numbers, and error handling for invalid inputs including non-numeric values and out-of-range values.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_02_validate.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_02_validate_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_validate_derive[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_validate_derive 22\nPORT = 22\n\n$ 04_02_validate_derive foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': `foobar` isn't a port number\n\nFor more information, try '--help'.\n\n$ 04_02_validate_derive 0\n? failed\nerror: invalid value '0' for '<PORT>': port not in range 1-65535\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Using clap-rs Custom Derive for Command-Line Argument Parsing\nDESCRIPTION: Console interaction with a clap-rs application demonstrating argument parsing, help output, version manipulation, and error handling. The application allows setting or incrementing version numbers and requires specific combinations of input files and configuration options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_04_custom.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_04_custom_derive[EXE] [OPTIONS] [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n\n$ 04_04_custom_derive\n? failed\nerror: Can only modify one version field\n\nUsage: clap [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom_derive --major\nVersion: 2.2.3\n\n$ 04_04_custom_derive --major --minor\n? failed\nerror: Can only modify one version field\n\nUsage: clap [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom_derive --major -c config.toml\n? failed\nVersion: 2.2.3\nerror: INPUT_FILE or --spec-in is required when using --config\n\nUsage: clap [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom_derive --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n```\n\n----------------------------------------\n\nTITLE: Basic Subcommand Help Output\nDESCRIPTION: Shows the default help output for a Clap application with subcommands, displaying the main commands 'add' and 'help' along with their descriptions and global options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_04_subcommands.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Executing Command Line Application with clap-rs in Console\nDESCRIPTION: This snippet shows various command-line interactions with an application built using clap-rs. It includes displaying help information, successful argument parsing, and handling of invalid inputs.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_02_parse.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_02_parse --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_parse[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_parse 22\nPORT = 22\n\n$ 04_02_parse foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': invalid digit found in string\n\nFor more information, try '--help'.\n\n$ 04_02_parse_derive 0\n? failed\nerror: invalid value '0' for '<PORT>': 0 is not in 1..=65535\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Help Display and Flag Usage in clap-rs CLI Application\nDESCRIPTION: Console output demonstrating the help display, default behavior, flag activation, and error handling for a boolean verbose flag. Shows how the --verbose flag toggles output and how multiple uses of the flag are prevented.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_01_flag_bool.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_bool --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_bool[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose  \n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_01_flag_bool\nverbose: false\n\n$ 03_01_flag_bool --verbose\nverbose: true\n\n$ 03_01_flag_bool --verbose --verbose\n? failed\nerror: the argument '--verbose' cannot be used multiple times\n\nUsage: 03_01_flag_bool[EXE] [OPTIONS]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction with Port Parser CLI Application\nDESCRIPTION: Console output showing help display, successful port parsing, and error handling for invalid port values. Demonstrates input validation for non-numeric input and port number range constraints (1-65535).\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_02_parse.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_02_parse_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_parse_derive[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_parse_derive 22\nPORT = 22\n\n$ 04_02_parse_derive foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': invalid digit found in string\n\nFor more information, try '--help'.\n\n$ 04_02_parse_derive 0\n? failed\nerror: invalid value '0' for '<PORT>': 0 is not in 1..=65535\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: Executing Help Command with Clap-rs in Console\nDESCRIPTION: This snippet shows the output of running the program with the --help flag, displaying usage information, available options, and a brief description of the program.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_01_flag_bool.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_bool_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_bool_derive[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose  \n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Basic Help Output for typed-derive Command\nDESCRIPTION: Shows the complete help output displaying all available options and their descriptions, including default values and possible values for enumerated options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive --help\nUsage: typed-derive[EXE] [OPTIONS]\n\nOptions:\n  -O <OPTIMIZATION>            Implicitly using `std::str::FromStr`\n  -I <DIR>                     Allow invalid UTF-8 paths\n      --bind <BIND>            Handle IP addresses\n      --sleep <SLEEP>          Allow human-readable durations\n  -D <DEFINES>                 Hand-written parser for tuples\n      --port <PORT>            Support for discrete numbers [default: 22] [possible values: 22, 80]\n      --log-level <LOG_LEVEL>  Support enums from a foreign crate that don't implement `ValueEnum` [default: info] [possible values: trace, debug, info, warn, error]\n  -h, --help                   Print help\n```\n\n----------------------------------------\n\nTITLE: Git Help Command Output\nDESCRIPTION: Demonstrates the help command output format including main command help and subcommand-specific help display.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git-derive.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git-derive\n? failed\nA fictional versioning CLI\n\nUsage: git-derive[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Help and Version Commands for clap-rs CLI Application\nDESCRIPTION: This console output shows the usage of a CLI application built with clap-rs. It demonstrates the automatically generated help message and version information. The application requires two options: '--two' and '--one', both expecting values.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/02_crate.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 02_crate --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_crate[EXE] --two <VALUE> --one <VALUE>\n\nOptions:\n      --two <VALUE>  \n      --one <VALUE>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 02_crate --version\nclap [..]\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Help and Version Information for clap-rs Derive Macro CLI (Console)\nDESCRIPTION: This console output demonstrates the auto-generated help message and version information for a CLI application built with clap-rs using derive macros. It shows the usage syntax, available options, and the application's version.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/02_crate.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 02_crate_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_crate_derive[EXE] --two <TWO> --one <ONE>\n\nOptions:\n      --two <TWO>  \n      --one <ONE>  \n  -h, --help       Print help\n  -V, --version    Print version\n\n$ 02_crate_derive --version\nclap [..]\n\n```\n\n----------------------------------------\n\nTITLE: Using Required Options with clap-rs Derive Syntax in Console\nDESCRIPTION: This console output demonstrates the behavior of a Rust CLI application that requires a --name option. It shows the help output, error handling for missing required arguments, and various ways to provide the option value including using --name, -n, with spaces, equals signs, or concatenated formats.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_02_option.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_02_option_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option_derive[EXE] --name <NAME>\n\nOptions:\n  -n, --name <NAME>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option_derive\n? 2\nerror: the following required arguments were not provided:\n  --name <NAME>\n\nUsage: 03_02_option_derive[EXE] --name <NAME>\n\nFor more information, try '--help'.\n\n$ 03_02_option_derive --name bob\nname: \"bob\"\n\n$ 03_02_option_derive --name=bob\nname: \"bob\"\n\n$ 03_02_option_derive -n bob\nname: \"bob\"\n\n$ 03_02_option_derive -n=bob\nname: \"bob\"\n\n$ 03_02_option_derive -nbob\nname: \"bob\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Help and Subcommand Information\nDESCRIPTION: Shows the main help output for the Git CLI and its subcommands, including usage instructions and available options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git\n? failed\nA fictional versioning CLI\n\nUsage: git[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ git help\nA fictional versioning CLI\n\nUsage: git[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ git help add\nadds things\n\nUsage: git[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possible Values Validation in Clap Rust CLI\nDESCRIPTION: This console output shows how Clap enforces valid argument values. The program accepts 'fast' or 'slow' as the MODE argument, producing different outputs for each valid value and an error message when an invalid value is provided.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_01_possible.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_01_possible --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_possible[EXE] <MODE>\n\nArguments:\n  <MODE>  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_01_possible fast\nHare\n\n$ 04_01_possible slow\nTortoise\n\n$ 04_01_possible medium\n? failed\nerror: invalid value 'medium' for '<MODE>'\n  [possible values: fast, slow]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Clap-rs Command Line Options Demo\nDESCRIPTION: Demonstrates different ways to specify command line options using clap-rs, including help output and various syntaxes for providing the --name/-n option. Shows both long and short forms, with and without equals signs, and concatenated short forms.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_02_option.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_02_option --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option[EXE] [OPTIONS]\n\nOptions:\n  -n, --name <name>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option\nname: None\n\n$ 03_02_option --name bob\nname: Some(\"bob\")\n\n$ 03_02_option --name=bob\nname: Some(\"bob\")\n\n$ 03_02_option -n bob\nname: Some(\"bob\")\n\n$ 03_02_option -n=bob\nname: Some(\"bob\")\n\n$ 03_02_option -nbob\nname: Some(\"bob\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Help and Version Information in a clap-rs Application\nDESCRIPTION: This console output shows two examples of interacting with a clap-rs application. First, the '--help' flag displays usage information including required options (--two and --one) and available flags. Second, the '--version' flag displays the application name and version number.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/02_apps.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 02_apps_derive --help\nDoes awesome things\n\nUsage: 02_apps_derive[EXE] --two <TWO> --one <ONE>\n\nOptions:\n      --two <TWO>  \n      --one <ONE>  \n  -h, --help       Print help\n  -V, --version    Print version\n\n$ 02_apps_derive --version\nMyApp 1.0\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flag Counting with Clap-rs in Console\nDESCRIPTION: This snippet shows the usage of a Rust program built with clap-rs, demonstrating how it handles the --verbose flag, counts its occurrences, and displays help information. It includes examples of running the program with different numbers of verbose flags.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_01_flag_count.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_count_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_count_derive[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose...  \n  -h, --help        Print help\n  -V, --version     Print version\n\n$ 03_01_flag_count_derive\nverbose: 0\n\n$ 03_01_flag_count_derive --verbose\nverbose: 1\n\n$ 03_01_flag_count_derive --verbose --verbose\nverbose: 2\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Usage with Required Arguments using clap-rs in Console\nDESCRIPTION: This console output demonstrates three scenarios of using a CLI application built with clap-rs: requesting help, incorrect usage without the required argument, and correct usage with the required argument. It showcases how clap-rs handles required arguments and provides user feedback.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_06_required.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_06_required --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_06_required[EXE] <name>\n\nArguments:\n  <name>  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_06_required\n? 2\nerror: the following required arguments were not provided:\n  <name>\n\nUsage: 03_06_required[EXE] <name>\n\nFor more information, try '--help'.\n\n$ 03_06_required bob\nname: \"bob\"\n\n```\n\n----------------------------------------\n\nTITLE: Required Subcommands with Clap Derive API in Console\nDESCRIPTION: Shows how Clap handles required subcommands specified with `command: Commands` and explains the alternative optional approach using `command: Option<Commands>`.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_04_subcommands.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands_derive\n? failed\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands_derive[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage with Default Port Value\nDESCRIPTION: Demonstrates the command line interface of a Clap-rs application showing help output and execution with both default and custom port values. The application accepts an optional PORT argument that defaults to 2020 if not specified.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_05_default_values.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_05_default_values --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_05_default_values[EXE] [PORT]\n\nArguments:\n  [PORT]  [default: 2020]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_05_default_values\nport: 2020\n\n$ 03_05_default_values 22\nport: 22\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Optional Arguments with Clap in Console Output\nDESCRIPTION: Console output showing a Clap-based CLI program that handles an optional NAME argument. The output includes the help text showing program usage, and examples of running the program both with and without providing the optional argument.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_06_optional.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_06_optional_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_06_optional_derive[EXE] [NAME]\n\nArguments:\n  [NAME]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_06_optional_derive\nname: None\n\n$ 03_06_optional_derive bob\nname: Some(\"bob\")\n\n```\n\n----------------------------------------\n\nTITLE: Pacman CLI Help Output\nDESCRIPTION: Examples of help output from pacman, showing both the main help and subcommand-specific help. Illustrates how commands, subcommands, and their options are displayed to users.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/pacman.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -h\npackage manager utility\n\nUsage: pacman[EXE] <COMMAND>\n\nCommands:\n  query, -Q, --query  Query the package database.\n  sync, -S, --sync    Synchronize packages.\n  help                Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ pacman -S -h\nSynchronize packages.\n\nUsage: pacman[EXE] {sync|--sync|-S} [OPTIONS] [package]...\n\nArguments:\n  [package]...  packages\n\nOptions:\n  -s, --search <search>...  search remote repositories for matching strings\n  -i, --info                view package information\n  -h, --help                Print help\n\n```\n\n----------------------------------------\n\nTITLE: Find Command Help and Usage Examples\nDESCRIPTION: Demonstrates the help output and usage examples of the find command implementation using clap-rs. Shows how position-sensitive flags work with logical operators and their resulting parsed output structure.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/find.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ find --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: find[EXE] [OPTIONS]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nTESTS:\n      --empty        File is empty and is either a regular file or a directory\n      --name <name>  Base of file name (the path with the leading directories removed) matches shell\n                     pattern pattern\n\nOPERATORS:\n  -o, --or   expr2 is not evaluate if exp1 is true\n  -a, --and  Same as `expr1 expr1`\n\n$ find --empty -o --name .keep\n[\n    (\n        \"empty\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"or\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"name\",\n        String(\n            \".keep\",\n        ),\n    ),\n]\n\n$ find --empty -o --name .keep -o --name foo\n[\n    (\n        \"empty\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"or\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"name\",\n        String(\n            \".keep\",\n        ),\n    ),\n    (\n        \"or\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"name\",\n        String(\n            \"foo\",\n        ),\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Console Interaction with Clap-rs Enum CLI\nDESCRIPTION: Shows various command line interactions including help display, valid mode selections ('fast' and 'slow'), and error handling for invalid mode input. Demonstrates Clap's built-in help formatting, argument validation, and error messaging.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_01_enum.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_01_enum --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum[EXE] <MODE>\n\nArguments:\n  <MODE>\n          What mode to run the program in\n\n          Possible values:\n          - fast: Run swiftly\n          - slow: Crawl slowly but steadily\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\n$ 04_01_enum -h\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum[EXE] <MODE>\n\nArguments:\n  <MODE>  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help (see more with '--help')\n  -V, --version  Print version\n\n$ 04_01_enum fast\nHare\n\n$ 04_01_enum slow\nTortoise\n\n$ 04_01_enum medium\n? failed\nerror: invalid value 'medium' for '<MODE>'\n  [possible values: fast, slow]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Help Command Output in Custom Cargo Subcommand\nDESCRIPTION: Demonstrates the help output format for a custom cargo subcommand, showing main command and subcommand help text with available options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/cargo-example.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo-example --help\nUsage: cargo <COMMAND>\n\nCommands:\n  example  A simple to use, efficient, and full-featured Command Line Argument Parser\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ cargo-example example --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: cargo example [OPTIONS]\n\nOptions:\n      --manifest-path <PATH>  \n  -h, --help                  Print help\n  -V, --version               Print version\n```\n\n----------------------------------------\n\nTITLE: Git Stash Subcommand Usage and Help\nDESCRIPTION: Shows the usage of the 'git stash' subcommand, including help output for various stash operations and examples of pushing and popping stashes.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git stash -h\nUsage: git[EXE] stash [OPTIONS]\n       git[EXE] stash push [OPTIONS]\n       git[EXE] stash pop [STASH]\n       git[EXE] stash apply [STASH]\n       git[EXE] stash help [COMMAND]...\n\nOptions:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\ngit[EXE] stash push:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\ngit[EXE] stash pop:\n  -h, --help  Print help\n  [STASH]     \n\ngit[EXE] stash apply:\n  -h, --help  Print help\n  [STASH]     \n\ngit[EXE] stash help:\nPrint this message or the help of the given subcommand(s)\n  [COMMAND]...  Print help for the subcommand(s)\n\n$ git stash push -h\nUsage: git[EXE] stash push [OPTIONS]\n\nOptions:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\n$ git stash pop -h\nUsage: git[EXE] stash pop [STASH]\n\nArguments:\n  [STASH]  \n\nOptions:\n  -h, --help  Print help\n\n$ git stash -m \"Prototype\"\nPushing Some(\"Prototype\")\n\n$ git stash pop\nPopping None\n\n$ git stash push -m \"Prototype\"\nPushing Some(\"Prototype\")\n\n$ git stash pop\nPopping None\n```\n\n----------------------------------------\n\nTITLE: Command Line Help and Usage Examples with Clap-rs\nDESCRIPTION: Demonstrates help output and usage of a Clap-rs program that processes mode arguments. Shows full help, short help, successful executions with valid modes ('fast' and 'slow'), and error handling for invalid input.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_01_enum.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_01_enum_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum_derive[EXE] <MODE>\n\nArguments:\n  <MODE>\n          What mode to run the program in\n\n          Possible values:\n          - fast: Run swiftly\n          - slow: Crawl slowly but steadily\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\n$ 04_01_enum_derive -h\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum_derive[EXE] <MODE>\n\nArguments:\n  <MODE>  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help (see more with '--help')\n  -V, --version  Print version\n\n$ 04_01_enum_derive fast\nHare\n\n$ 04_01_enum_derive slow\nTortoise\n\n$ 04_01_enum_derive medium\n? failed\nerror: invalid value 'medium' for '<MODE>'\n  [possible values: fast, slow]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Using Git Add Command with Arguments\nDESCRIPTION: Demonstrates the usage of the 'git add' command with and without arguments, showing error handling and successful execution.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git add\n? failed\nadds things\n\nUsage: git[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n\n$ git add Cargo.toml Cargo.lock\nAdding [\"Cargo.toml\", \"Cargo.lock\"]\n```\n\n----------------------------------------\n\nTITLE: Git Stash Command Operations\nDESCRIPTION: Demonstrates stash command usage including push and pop operations with various options and help displays.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git-derive.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git-derive stash -h\nUsage: git-derive[EXE] stash [OPTIONS]\n       git-derive[EXE] stash push [OPTIONS]\n       git-derive[EXE] stash pop [STASH]\n       git-derive[EXE] stash apply [STASH]\n       git-derive[EXE] stash help [COMMAND]...\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with clap-rs Derive Macro\nDESCRIPTION: This console output demonstrates how default values work in clap-rs with the derive macro approach. It shows the help text indicating a default value of 2020 for the PORT argument and the command behavior both with and without providing a value for PORT.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_05_default_values.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_05_default_values_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_05_default_values_derive[EXE] [PORT]\n\nArguments:\n  [PORT]  [default: 2020]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_05_default_values_derive\nport: 2020\n\n$ 03_05_default_values_derive 22\nport: 22\n\n```\n\n----------------------------------------\n\nTITLE: Git Add Command Usage\nDESCRIPTION: Shows the usage of the add command with both error case (no arguments) and successful execution with file arguments.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git-derive.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git-derive add\n? failed\nadds things\n\nUsage: git-derive[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n\n$ git-derive add Cargo.toml Cargo.lock\nAdding [\"Cargo.toml\", \"Cargo.lock\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Flatten Hand-Implemented Args CLI in clap-rs\nDESCRIPTION: Shows the usage of flattened argument structures with interop_flatten_hand_args. Demonstrates how multiple arguments can be combined in a flattened structure, with various flag and option combinations.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/derive_ref/interop_tests.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ interop_flatten_hand_args\nCli {\n    top_level: false,\n    more_args: CliArgs {\n        foo: false,\n        bar: false,\n        quuz: None,\n    },\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_flatten_hand_args -f --bar\nCli {\n    top_level: false,\n    more_args: CliArgs {\n        foo: true,\n        bar: true,\n        quuz: None,\n    },\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_flatten_hand_args --quuz abc\nCli {\n    top_level: false,\n    more_args: CliArgs {\n        foo: false,\n        bar: false,\n        quuz: Some(\n            \"abc\",\n        ),\n    },\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_flatten_hand_args --unknown\n? failed\nerror: unexpected argument '--unknown' found\n\nUsage: interop_flatten_hand_args[EXE] [OPTIONS]\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: Executing Command-Line Application with Port Validation using clap-rs\nDESCRIPTION: This snippet demonstrates the usage of a command-line application that validates a port number argument. It shows the help output, successful execution with a valid port, and error handling for invalid input and out-of-range values.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_02_validate.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_02_validate --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_validate[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_validate 22\nPORT = 22\n\n$ 04_02_validate foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': `foobar` isn't a port number\n\nFor more information, try '--help'.\n\n$ 04_02_validate 0\n? failed\nerror: invalid value '0' for '<PORT>': port not in range 1-65535\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Multiple Option Values Usage with clap-rs\nDESCRIPTION: Demonstrates various ways to specify multiple values for the --name option using different syntax formats. Shows how the parser handles repeated options, equals sign syntax, and short-form concatenation.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_02_option_mult.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_02_option_mult --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option_mult[EXE] [OPTIONS]\n\nOptions:\n  -n, --name <name>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option_mult\nnames: []\n\n$ 03_02_option_mult --name bob\nnames: [\"bob\"]\n\n$ 03_02_option_mult --name bob --name john\nnames: [\"bob\", \"john\"]\n\n$ 03_02_option_mult_derive --name bob --name=john -n tom -n=chris -nsteve\nname: [\"bob\", \"john\", \"tom\", \"chris\", \"steve\"]\n```\n\n----------------------------------------\n\nTITLE: Direct Passing of Arguments After Delimiter in clap-rs\nDESCRIPTION: Shows how arguments after the `--` delimiter are treated as positional arguments, even if they look like options. This demonstrates how the delimiter acts as an escape mechanism that passes everything through directly.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional -- -f -p=bob sloppy slop slop\n-f used: false\n-p's value: None\n'slops' values: [\"-f\", \"-p=bob\", \"sloppy\", \"slop\", \"slop\"]\n\n```\n\n----------------------------------------\n\nTITLE: Help Command Output in clap-rs CLI Application\nDESCRIPTION: Displays the help menu showing all available options and arguments including version management flags, input file handling, and configuration options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_03_relations.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_03_relations_derive[EXE] [OPTIONS] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n```\n\n----------------------------------------\n\nTITLE: Executing Command-Line Application with Multiple Option Values\nDESCRIPTION: This snippet demonstrates the usage of a command-line application that accepts multiple values for the 'name' option. It shows different ways to provide multiple names and how they are processed and displayed in the output.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_02_option_mult.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_02_option_mult_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option_mult_derive[EXE] [OPTIONS]\n\nOptions:\n  -n, --name <NAME>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option_mult_derive\nname: []\n\n$ 03_02_option_mult_derive --name bob\nname: [\"bob\"]\n\n$ 03_02_option_mult_derive --name bob --name john\nname: [\"bob\", \"john\"]\n\n$ 03_02_option_mult_derive --name bob --name=john -n tom -n=chris -nsteve\nname: [\"bob\", \"john\", \"tom\", \"chris\", \"steve\"]\n```\n\n----------------------------------------\n\nTITLE: Subcommand Specific Help\nDESCRIPTION: Demonstrates the help output for the 'add' subcommand, showing its specific usage pattern and available options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_04_subcommands.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands help add\nAdds files to myapp\n\nUsage: 03_04_subcommands[EXE] add [NAME]\n\nArguments:\n  [NAME]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Help Command Output\nDESCRIPTION: Shows the help output displaying available options and arguments including version management flags and input configuration parameters.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_04_custom.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Positional Arguments with Clap-rs in Console\nDESCRIPTION: This console transcript demonstrates how a Rust program using clap-rs handles positional arguments. It shows the help output describing the optional 'name' argument, then demonstrates the program's behavior when run without arguments and with a positional argument 'bob'.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_03_positional.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_03_positional --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional[EXE] [name]\n\nArguments:\n  [name]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional\nname: None\n\n$ 03_03_positional bob\nname: Some(\"bob\")\n\n```\n\n----------------------------------------\n\nTITLE: Key-Value Defines Parameter Examples\nDESCRIPTION: Demonstrates the -D parameter for key-value pair handling, showing valid pairs and various error cases for invalid formats.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive -D Foo=10 -D Alice=30\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [(\"Foo\", 10), (\"Alice\", 30)], port: 22, log_level: Info }\n\n$ typed-derive -D Foo\n? failed\nerror: invalid value 'Foo' for '-D <DEFINES>': invalid KEY=value: no `=` found in `Foo`\n\nFor more information, try '--help'.\n\n$ typed-derive -D Foo=Bar\n? failed\nerror: invalid value 'Foo=Bar' for '-D <DEFINES>': invalid digit found in string\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information with clap-rs in Console\nDESCRIPTION: Shows the help output for a command-line application that supports escaped positional arguments using the `--` delimiter. The help display includes usage information, argument descriptions, and available options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: escaped-positional[EXE] [OPTIONS] [-- <SLOP>...]\n\nArguments:\n  [SLOP]...  \n\nOptions:\n  -f             \n  -p <PEAR>      \n  -h, --help     Print help\n  -V, --version  Print version\n\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage - clap-rs Help Output\nDESCRIPTION: Shows the help output of a clap-rs based CLI tool that describes available arguments and options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_03_positional.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_03_positional_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional_derive[EXE] <NAME>\n\nArguments:\n  <NAME>  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Time Duration Parameter Examples\nDESCRIPTION: Shows usage of the --sleep parameter for time duration specifications, including valid duration format and invalid input error handling.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive --sleep 10s\nArgs { optimization: None, include: None, bind: None, sleep: Some(10s), defines: [], port: 22, log_level: Info }\n\n$ typed-derive --sleep forever\n? failed\nerror: invalid value 'forever' for '--sleep <SLEEP>': failed to parse \"forever\" in the \"friendly\" format: parsing a friendly duration requires it to start with a unit value (a decimal integer) after an optional sign, but no integer was found\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Help Output for Escaped Positional Arguments\nDESCRIPTION: Shows the help output for a command line application using clap-rs, displaying available options and argument syntax.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional-derive.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional-derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: escaped-positional-derive[EXE] [OPTIONS] [-- <SLOP>...]\n\nArguments:\n  [SLOP]...  \n\nOptions:\n  -f             \n  -p <PEAR>      \n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Positional Arguments with CLAP-RS in Console\nDESCRIPTION: This example shows the usage of a program that accepts multiple positional arguments using the clap-rs library. It demonstrates the help output and how the program handles different numbers of arguments, including zero, one, and multiple arguments.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_03_positional_mult.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_03_positional_mult --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional_mult[EXE] [name]...\n\nArguments:\n  [name]...  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional_mult\nnames: []\n\n$ 03_03_positional_mult bob\nnames: [\"bob\"]\n\n$ 03_03_positional_mult bob john\nnames: [\"bob\", \"john\"]\n\n```\n\n----------------------------------------\n\nTITLE: Log Level Enum Parameter Examples\nDESCRIPTION: Demonstrates the --log-level parameter usage with enum values, showing valid log levels and error handling for invalid inputs.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive --log-level debug\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Debug }\n\n$ typed-derive --log-level error\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Error }\n\n$ typed-derive --log-level\n? failed\nerror: a value is required for '--log-level <LOG_LEVEL>' but none was supplied\n  [possible values: trace, debug, info, warn, error]\n\nFor more information, try '--help'.\n\n$ typed-derive --log-level critical\n? failed\nerror: invalid value 'critical' for '--log-level <LOG_LEVEL>'\n  [possible values: trace, debug, info, warn, error]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Using Debug Flags and Commands with clap-rs in Console\nDESCRIPTION: Shows how to combine multiple flags with commands in a clap-rs application. This example uses the '-dd' flag to enable debug mode with increased verbosity and runs the 'test' command.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/01_quick.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 01_quick -dd test\nDebug mode is on\nNot printing testing lists...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Positional Arguments with clap-rs\nDESCRIPTION: Shows different ways to use a command line application that accepts multiple positional NAME arguments. Examples include showing help output, running without arguments, with one argument, and with multiple arguments.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_03_positional_mult.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_03_positional_mult_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional_mult_derive[EXE] [NAME]...\n\nArguments:\n  [NAME]...  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional_mult_derive\nname: []\n\n$ 03_03_positional_mult_derive bob\nname: [\"bob\"]\n\n$ 03_03_positional_mult_derive bob john\nname: [\"bob\", \"john\"]\n```\n\n----------------------------------------\n\nTITLE: Git Diff Command Usage with Various Arguments\nDESCRIPTION: Shows the usage of the 'git diff' command with different combinations of arguments, including help output and color options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git diff --help\nCompare two commits\n\nUsage: git[EXE] diff [OPTIONS] [COMMIT] [COMMIT] [-- <PATH>]\n\nArguments:\n  [COMMIT]  \n  [COMMIT]  \n  [PATH]    \n\nOptions:\n      --color[=<WHEN>]  [default: auto] [possible values: always, auto, never]\n  -h, --help            Print help\n\n$ git diff\nDiffing stage..worktree  (color=auto)\n\n$ git diff ./src\nDiffing stage..worktree ./src (color=auto)\n\n$ git diff HEAD ./src\nDiffing HEAD..worktree ./src (color=auto)\n\n$ git diff HEAD~~ -- HEAD\nDiffing HEAD~~..worktree HEAD (color=auto)\n\n$ git diff --color\nDiffing stage..worktree  (color=always)\n\n$ git diff --color=never\nDiffing stage..worktree  (color=never)\n```\n\n----------------------------------------\n\nTITLE: Running clap-rs Application with Debug Options and Commands in Console\nDESCRIPTION: Shows how to combine multiple options and commands using clap-rs. This example uses the debug flag twice (-dd) to increase verbosity and runs the 'test' command.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/01_quick.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 01_quick_derive -dd test\nDebug mode is on\nNot printing testing lists...\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Version Management CLI\nDESCRIPTION: This snippet shows the help output of the '04_03_relations' command-line tool. It lists available options and arguments for version management and input processing.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_03_relations.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_03_relations[EXE] [OPTIONS] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage - clap-rs Error Handling\nDESCRIPTION: Demonstrates error handling when required positional argument is missing from the command.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_03_positional.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 03_03_positional_derive\n? 2\nerror: the following required arguments were not provided:\n  <NAME>\n\nUsage: 03_03_positional_derive[EXE] <NAME>\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Executing Flag Count CLI Application with Multiple Verbose Flags\nDESCRIPTION: Illustrates the behavior when using multiple verbose flags, demonstrating that the application counts the number of occurrences, resulting in a count of 2.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_01_flag_count.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_count --verbose --verbose\nverbose: 2\n```\n\n----------------------------------------\n\nTITLE: Successful Command Execution with All Arguments in clap-rs\nDESCRIPTION: Shows successful execution with all required arguments including version management, configuration file, and input specification.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_03_relations.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations_derive --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Flag Usage Error with Clap-rs in Console\nDESCRIPTION: This snippet illustrates the error handling capability of the clap-rs library when a flag is used multiple times, showing the error message and usage information provided to the user.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_01_flag_bool.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_bool_derive --verbose --verbose\n? failed\nerror: the argument '--verbose' cannot be used multiple times\n\nUsage: 03_01_flag_bool_derive[EXE] [OPTIONS]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Short Flag Subcommand Usage in Pacman CLI\nDESCRIPTION: Example showing pacman's -S short flag used as a subcommand to install a package. This demonstrates how flags can function as subcommands in CLI applications.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/pacman.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -S package\nInstalling package...\n\n```\n\n----------------------------------------\n\nTITLE: Help Output Display - Clap-rs Console\nDESCRIPTION: Demonstrates the default help output format for a Clap-rs application. Shows usage instructions, required options (--one and --two), and standard help/version flags.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/02_app_settings.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 02_app_settings --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_app_settings[EXE] --two <VALUE> --one <VALUE>\n\nOptions:\n      --two <VALUE>\n          \n      --one <VALUE>\n          \n  -h, --help\n          Print help\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Subcommand Execution Example\nDESCRIPTION: Shows the execution of the 'add' subcommand with an argument, demonstrating how the command processes input.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_04_subcommands.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands add bob\n'myapp add' was used, name is: Some(\"bob\")\n```\n\n----------------------------------------\n\nTITLE: Combining Short Subcommand with Long Flag in Pacman CLI\nDESCRIPTION: Example showing how to combine pacman's -S short subcommand with the --search long flag to search for a package by name.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/pacman.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -S --search name\nSearching for name...\n\n```\n\n----------------------------------------\n\nTITLE: Testing Augment Args CLI Commands in clap-rs\nDESCRIPTION: Demonstrates usage of the interop_augment_args command with different flag combinations and error handling. Shows how boolean flags can be set both directly and via derived arguments, as well as error handling for unknown arguments.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/derive_ref/interop_tests.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_args\nValue of built: false\nValue of derived via ArgMatches: false\nValue of derived: DerivedArgs {\n    derived: false,\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_args -b --derived\nValue of built: true\nValue of derived via ArgMatches: true\nValue of derived: DerivedArgs {\n    derived: true,\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_args -d --built\nValue of built: true\nValue of derived via ArgMatches: true\nValue of derived: DerivedArgs {\n    derived: true,\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_args --unknown\n? failed\nerror: unexpected argument '--unknown' found\n\nUsage: interop_augment_args[EXE] [OPTIONS]\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: Missing Input File Error in clap-rs\nDESCRIPTION: Demonstrates error handling when a required input file argument is missing when using configuration.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_03_relations.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations_derive --major -c config.toml\n? failed\nerror: the following required arguments were not provided:\n  <INPUT_FILE|--spec-in <SPEC_IN>>\n\nUsage: 04_03_relations_derive[EXE] -c <CONFIG> <--set-ver <VER>|--major|--minor|--patch> <INPUT_FILE|--spec-in <SPEC_IN>>\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Short Flag Combinations in Pacman CLI\nDESCRIPTION: Examples demonstrating different ways to combine short flags in pacman, including separate flags and stacked flags. This shows the flexibility in CLI syntax.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/pacman.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -S -s name\nSearching for name...\n\n$ pacman -Ss name\nSearching for name...\n\n```\n\n----------------------------------------\n\nTITLE: Testing Augment Subcommands CLI Operations in clap-rs\nDESCRIPTION: Shows the behavior of the interop_augment_subcommands command with various subcommand invocations. Demonstrates required subcommands, flag usage, and error handling for unknown arguments and subcommands.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/derive_ref/interop_tests.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_subcommands\n? failed\nerror: A subcommand is required but one was not provided.\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_subcommands derived\nDerived subcommands: Derived {\n    derived_flag: false,\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_subcommands derived --derived-flag\nDerived subcommands: Derived {\n    derived_flag: true,\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_subcommands derived --unknown\n? failed\nerror: unexpected argument '--unknown' found\n\nUsage: interop_augment_subcommands[EXE] derived [OPTIONS]\n\nFor more information, try '--help'.\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_augment_subcommands unknown\n? failed\nerror: unrecognized subcommand 'unknown'\n\nUsage: interop_augment_subcommands[EXE] [COMMAND]\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: Custom Cargo Subcommand Execution Examples\nDESCRIPTION: Shows example usage of the custom cargo subcommand both with and without the --manifest-path option.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/cargo-example.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo-example example\nNone\n\n$ cargo-example example --manifest-path Cargo.toml\nSome(\"Cargo.toml\")\n```\n\n----------------------------------------\n\nTITLE: Executing Flag Count CLI Application with Single Verbose Flag\nDESCRIPTION: Shows the output when running the application with a single verbose flag, resulting in a count of 1.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_01_flag_count.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_count --verbose\nverbose: 1\n```\n\n----------------------------------------\n\nTITLE: Using Help Command with Clap Subcommands in Console\nDESCRIPTION: Demonstrates how to use the help subcommand with a Clap application that has subcommands. Shows both the main help output and specific subcommand help output.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_04_subcommands.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands_derive help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands_derive[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_04_subcommands_derive help add\nAdds files to myapp\n\nUsage: 03_04_subcommands_derive[EXE] add [NAME]\n\nArguments:\n  [NAME]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_04_subcommands_derive add bob\n'myapp add' was used, name is: Some(\"bob\")\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Required Arguments in CLI\nDESCRIPTION: This snippet demonstrates the error message displayed when required arguments are not provided to the '04_03_relations' command-line tool.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_03_relations.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations\n? failed\nerror: the following required arguments were not provided:\n  <--set-ver <VER>|--major|--minor|--patch>\n\nUsage: 04_03_relations[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Executing Flag Count CLI Application with No Arguments\nDESCRIPTION: Demonstrates running the application without any arguments, showing the default verbose count of 0.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_01_flag_count.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_count\nverbose: 0\n```\n\n----------------------------------------\n\nTITLE: Include Path Parameter Example\nDESCRIPTION: Shows usage of the -I parameter for specifying include paths, demonstrating path handling.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive -I../hello\nArgs { optimization: None, include: Some(\"../hello\"), bind: None, sleep: None, defines: [], port: 22, log_level: Info }\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage - clap-rs Successful Execution\nDESCRIPTION: Shows successful execution of the command with the required NAME argument provided.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_03_positional.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 03_03_positional_derive bob\nname: \"bob\"\n```\n\n----------------------------------------\n\nTITLE: Incrementing Major Version Number in CLI\nDESCRIPTION: This snippet shows the successful execution of the '04_03_relations' command-line tool to increment the major version number.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_03_relations.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations --major\nVersion: 2.2.3\n```\n\n----------------------------------------\n\nTITLE: IP Address Parameter Examples\nDESCRIPTION: Demonstrates the --bind parameter for IP address handling, showing both valid IP address input and invalid hostname input with error handling.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive --bind 192.0.0.1\nArgs { optimization: None, include: None, bind: Some(192.0.0.1), sleep: None, defines: [], port: 22, log_level: Info }\n\n$ typed-derive --bind localhost\n? failed\nerror: invalid value 'localhost' for '--bind <BIND>': invalid IP address syntax\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Input File in CLI with Configuration\nDESCRIPTION: This snippet shows the error message when a required input file is not provided along with the configuration file to the '04_03_relations' command-line tool.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_03_relations.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations --major -c config.toml\n? failed\nerror: the following required arguments were not provided:\n  <INPUT_FILE|--spec-in <SPEC_IN>>\n\nUsage: 04_03_relations[EXE] -c <CONFIG> <--set-ver <VER>|--major|--minor|--patch> <INPUT_FILE|--spec-in <SPEC_IN>>\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Port Number Parameter Examples\nDESCRIPTION: Shows the --port parameter usage with discrete number validation, demonstrating valid port numbers and error handling for invalid inputs.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive --port 22\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Info }\n\n$ typed-derive --port 80\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 80, log_level: Info }\n\n$ typed-derive --port\n? failed\nerror: a value is required for '--port <PORT>' but none was supplied\n  [possible values: 22, 80]\n\nFor more information, try '--help'.\n\n$ typed-derive --port 3000\n? failed\nerror: invalid value '3000' for '--port <PORT>'\n  [possible values: 22, 80]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Successful Major Version Increment in clap-rs\nDESCRIPTION: Demonstrates successful execution of the major version increment command.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_03_relations.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations_derive --major\nVersion: 2.2.3\n```\n\n----------------------------------------\n\nTITLE: Successful Execution of CLI with Version Increment, Configuration, and Input\nDESCRIPTION: This snippet demonstrates the successful execution of the '04_03_relations' command-line tool with major version increment, configuration file, and special input file specified.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_03_relations.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n```\n\n----------------------------------------\n\nTITLE: Valid Escaped Arguments Usage\nDESCRIPTION: Demonstrates correct usage of options and positional arguments with the -- escape sequence.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional-derive.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional-derive -f -p=bob -- sloppy slop slop\n-f used: true\n-p's value: Some(\"bob\")\n'slops' values: [\"sloppy\", \"slop\", \"slop\"]\n```\n\n----------------------------------------\n\nTITLE: Successful Config with Input Execution\nDESCRIPTION: Shows successful execution with both config and input files specified.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_04_custom.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n```\n\n----------------------------------------\n\nTITLE: Version Field Modification Error\nDESCRIPTION: Demonstrates error handling when attempting to modify multiple version fields simultaneously.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_04_custom.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom\n? failed\nerror: Can only modify one version field\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Direct Argument Passthrough\nDESCRIPTION: Shows how arguments after -- are passed through directly, even if they match option patterns.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional-derive.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional-derive -- -f -p=bob sloppy slop slop\n-f used: false\n-p's value: None\n'slops' values: [\"-f\", \"-p=bob\", \"sloppy\", \"slop\", \"slop\"]\n```\n\n----------------------------------------\n\nTITLE: Baseline Command Execution with No Arguments in clap-rs\nDESCRIPTION: Demonstrates the default behavior of the command-line application when no arguments are provided. Shows the output format for flag status, option values, and positional arguments.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional\n-f used: false\n-p's value: None\n'slops' values: []\n\n```\n\n----------------------------------------\n\nTITLE: Successful Major Version Increment\nDESCRIPTION: Shows successful execution of incrementing the major version number.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_04_custom.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom --major\nVersion: 2.2.3\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Unexpected Positional Arguments in clap-rs\nDESCRIPTION: Shows how the application handles and reports errors when positional arguments are provided before the `--` delimiter. The parser rejects these arguments and displays a helpful error message with usage information.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional foo bar\n? failed\nerror: unexpected argument 'foo' found\n\nUsage: escaped-positional[EXE] [OPTIONS] [-- <SLOP>...]\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: BusyBox Help Output\nDESCRIPTION: Shows the default help output when BusyBox is run without arguments, displaying available applets and options\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/multicall-busybox.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ busybox\n? failed\nUsage: busybox [OPTIONS] [APPLET]\n\nAPPLETS:\n  true   does nothing successfully\n  false  does nothing unsuccessfully\n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n      --install <install>  Install hardlinks for all subcommands in path\n  -h, --help               Print help\n```\n\n----------------------------------------\n\nTITLE: Config Missing Required Input Error\nDESCRIPTION: Demonstrates error handling when config is specified but required input file is missing.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_04_custom.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom --major -c config.toml\n? failed\nVersion: 2.2.3\nerror: INPUT_FILE or --spec-in is required when using --config\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Flag Count CLI Application\nDESCRIPTION: Shows the help output for a command line application that uses flag counting. It displays usage information, available options including a verbose flag that can be used multiple times.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_01_flag_count.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_count --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_count[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose...  \n  -h, --help        Print help\n  -V, --version     Print version\n```\n\n----------------------------------------\n\nTITLE: Executing Clap-rs Program with Verbose Flag in Console\nDESCRIPTION: This snippet shows the program's output when run with the --verbose flag, demonstrating how the flag affects the program's behavior.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_01_flag_bool.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_bool_derive --verbose\nverbose: true\n```\n\n----------------------------------------\n\nTITLE: Running Clap-rs Program Without Arguments in Console\nDESCRIPTION: This snippet demonstrates the default behavior of the program when run without any arguments, showing the default state of the verbose flag.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_01_flag_bool.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 03_01_flag_bool_derive\nverbose: false\n```\n\n----------------------------------------\n\nTITLE: Version Flag Propagation in Clap Subcommands in Console\nDESCRIPTION: Demonstrates how the `propagate_version` attribute ensures that version flags are available in all subcommands, showing version output for both the main command and a subcommand.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/03_04_subcommands.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands_derive --version\nclap [..]\n\n$ 03_04_subcommands_derive add --version\nclap-add [..]\n```\n\n----------------------------------------\n\nTITLE: Missing Required Arguments Error in clap-rs\nDESCRIPTION: Shows error handling when required version management argument is missing from the command.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_03_relations.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations_derive\n? failed\nerror: the following required arguments were not provided:\n  <--set-ver <VER>|--major|--minor|--patch>\n\nUsage: 04_03_relations_derive[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Default Behavior of clap-rs Application in Console\nDESCRIPTION: Demonstrates the default behavior when running the application without any arguments or options. The program shows a simple message indicating that debug mode is off.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/01_quick.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 01_quick\nDebug mode is off\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Output for clap-rs Application in Console\nDESCRIPTION: This snippet shows the console output when running the '02_app_settings_derive' application with the --help flag. It demonstrates the automatically generated help text, including usage instructions, required options, and common flags.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/02_app_settings.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 02_app_settings_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_app_settings_derive[EXE] --two <TWO> --one <ONE>\n\nOptions:\n      --two <TWO>\n          \n      --one <ONE>\n          \n  -h, --help\n          Print help\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Mutually Exclusive Arguments Error in clap-rs\nDESCRIPTION: Shows error handling when mutually exclusive version management arguments are provided together.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/04_03_relations.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations_derive --major --minor\n? failed\nerror: the argument '--major' cannot be used with '--minor'\n\nUsage: 04_03_relations_derive[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Default Behavior of clap-rs Application in Console\nDESCRIPTION: Demonstrates the default behavior of the application when run without any arguments or options. By default, it simply shows that debug mode is off.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_derive/01_quick.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ 01_quick_derive\nDebug mode is off\n```\n\n----------------------------------------\n\nTITLE: Executing Git External Subcommand\nDESCRIPTION: Demonstrates the usage of an external subcommand 'custom-tool' with Git, showing how arguments are passed to the external tool.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git custom-tool arg1 --foo bar\nCalling out to \"custom-tool\" with [\"arg1\", \"--foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Conflicting Version Increment Options in CLI\nDESCRIPTION: This snippet demonstrates the error message displayed when conflicting version increment options (--major and --minor) are provided to the '04_03_relations' command-line tool.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_03_relations.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ 04_03_relations --major --minor\n? failed\nerror: the argument '--major' cannot be used with '--minor'\n\nUsage: 04_03_relations[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Git External Subcommand Execution\nDESCRIPTION: Shows how external subcommands are handled by passing arguments to external tools.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git-derive.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git-derive custom-tool arg1 --foo bar\nCalling out to \"custom-tool\" with [\"arg1\", \"--foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Multiple Version Fields Error\nDESCRIPTION: Shows error when attempting to increment both major and minor version numbers simultaneously.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/04_04_custom.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ 04_04_custom --major --minor\n? failed\nerror: Can only modify one version field\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Testing Hand-Implemented Subcommand CLI in clap-rs\nDESCRIPTION: Demonstrates usage of manually implemented subcommands with the interop_hand_subcommand utility. Shows subcommand structure, parameter passing, and error handling for 'add' and 'remove' operations along with their specific options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/derive_ref/interop_tests.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand\n? failed\nUsage: interop_hand_subcommand[EXE] [OPTIONS] <COMMAND>\n\nCommands:\n  add     \n  remove  \n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -t, --top-level  \n  -h, --help       Print help\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand add\nCli {\n    top_level: false,\n    subcommand: Add(\n        AddArgs {\n            name: [],\n        },\n    ),\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand add a b c\nCli {\n    top_level: false,\n    subcommand: Add(\n        AddArgs {\n            name: [\n                \"a\",\n                \"b\",\n                \"c\",\n            ],\n        },\n    ),\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand add --unknown\n? failed\nerror: unexpected argument '--unknown' found\n\n  tip: to pass '--unknown' as a value, use '-- --unknown'\n\nUsage: interop_hand_subcommand[EXE] add [NAME]...\n\nFor more information, try '--help'.\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand remove\nCli {\n    top_level: false,\n    subcommand: Remove(\n        RemoveArgs {\n            force: false,\n            name: [],\n        },\n    ),\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand remove --force a b c\nCli {\n    top_level: false,\n    subcommand: Remove(\n        RemoveArgs {\n            force: true,\n            name: [\n                \"a\",\n                \"b\",\n                \"c\",\n            ],\n        },\n    ),\n}\n\n```\n\nLANGUAGE: console\nCODE:\n```\n$ interop_hand_subcommand unknown\n? failed\nerror: unrecognized subcommand 'unknown'\n\nUsage: interop_hand_subcommand[EXE] [OPTIONS] <COMMAND>\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: Git Diff Command Usage\nDESCRIPTION: Illustrates diff command usage with various argument combinations and color options.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/git-derive.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git-derive diff --help\nCompare two commits\n\nUsage: git-derive[EXE] diff [OPTIONS] [COMMIT] [COMMIT] [-- <PATH>]\n\nArguments:\n  [COMMIT]  \n  [COMMIT]  \n  [PATH]    \n\nOptions:\n      --color[=<WHEN>]  [default: auto] [possible values: always, auto, never]\n  -h, --help            Print help\n```\n\n----------------------------------------\n\nTITLE: Using Options with Escaped Positional Arguments in clap-rs\nDESCRIPTION: Demonstrates using options (-f, -p) before the `--` delimiter and positional arguments after it. The example shows how the parser correctly processes both options and positional arguments in this case.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional -f -p=bob -- sloppy slop slop\n-f used: true\n-p's value: Some(\"bob\")\n'slops' values: [\"sloppy\", \"slop\", \"slop\"]\n\n```\n\n----------------------------------------\n\nTITLE: Long Flag Subcommand Usage in Pacman CLI\nDESCRIPTION: Example showing pacman's --sync long flag as a subcommand to install a package. This shows the long flag alternative to the short -S flag.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/pacman.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pacman --sync package\nInstalling package...\n\n```\n\n----------------------------------------\n\nTITLE: Baseline Command Execution\nDESCRIPTION: Demonstrates the default output when running the command without any arguments.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional-derive.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional-derive\n-f used: false\n-p's value: None\n'slops' values: []\n```\n\n----------------------------------------\n\nTITLE: Pacman CLI Error Handling\nDESCRIPTION: Example showing how pacman handles errors when incompatible flags are used together. Demonstrates user-friendly error messages with usage hints.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/pacman.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -S -s foo -i bar\n? failed\nerror: the argument '--search <search>...' cannot be used with '--info'\n\nUsage: pacman[EXE] {sync|--sync|-S} --search <search>... <package>...\n\nFor more information, try '--help'.\n\n```\n\n----------------------------------------\n\nTITLE: Required Command Behavior\nDESCRIPTION: Demonstrates the behavior when no subcommand is provided with arg_required_else_help enabled, showing how the help text is automatically displayed.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_04_subcommands.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands\n? failed\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Invalid Positional Arguments Usage\nDESCRIPTION: Shows the error message when attempting to pass positional arguments without the -- escape sequence.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/escaped-positional-derive.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ escaped-positional-derive foo bar\n? failed\nerror: unexpected argument 'foo' found\n\nUsage: escaped-positional-derive[EXE] [OPTIONS] [-- <SLOP>...]\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: Version Flag Propagation\nDESCRIPTION: Shows how the --version flag is propagated to subcommands when Command::propagate_version is enabled.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/03_04_subcommands.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ 03_04_subcommands --version\nclap [..]\n\n$ 03_04_subcommands add --version\nclap-add [..]\n```\n\n----------------------------------------\n\nTITLE: Generating Manpages using clap_mangen in build.rs\nDESCRIPTION: Example code showing how to generate a manpage from a clap::Command definition in a build.rs script. It creates a command with arguments, converts it to ROFF format, and writes it to the build output directory.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_mangen/README.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> std::io::Result<()> {\n    let out_dir = std::path::PathBuf::from(std::env::var_os(\"OUT_DIR\").ok_or(std::io::ErrorKind::NotFound)?);\n\n    let cmd = clap::Command::new(\"mybin\")\n        .arg(clap::arg!(-n --name <NAME>))\n        .arg(clap::arg!(-c --count <NUM>));\n\n    let man = clap_mangen::Man::new(cmd);\n    let mut buffer: Vec<u8> = Default::default();\n    man.render(&mut buffer)?;\n\n    std::fs::write(out_dir.join(\"mybin.1\"), buffer)?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating hostname command output in console\nDESCRIPTION: A console snippet showing the output of the hostname command returning 'www'. This relates to the multicall functionality in clap-rs, though the example notes that full multicall behavior cannot be demonstrated without proper link setup.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/multicall-hostname.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ hostname\nwww\n\n```\n\n----------------------------------------\n\nTITLE: Generated Nushell Completion Script for CLI Application\nDESCRIPTION: This Nushell script defines completions for the CLI application created in the Rust example. It includes custom completion functions and extern declarations for the main command and its subcommands.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_complete_nushell/README.md#2025-04-20_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmodule completions {\n\n  def \"nu-complete myapp choice\" [] {\n    [ \"first\" \"second\" ]\n  }\n\n  # Tests completions\n  export extern myapp [\n    file?: string             # some input file\n    --config(-c)              # some config file\n    --conf                    # some config file\n    -C                        # some config file\n    choice?: string@\"nu-complete myapp choice\"\n    --version(-V)             # Print version\n  ]\n\n  # tests things\n  export extern \"myapp test\" [\n    --case: string            # the case to test\n    --version(-V)             # Print version\n  ]\n\n  # top level subcommand\n  export extern \"myapp some_cmd\" [\n    --version(-V)             # Print version\n  ]\n\n  def \"nu-complete myapp some_cmd sub_cmd config\" [] {\n    [ \"\\\"Lest quotes aren't escaped.\\\"\" ]\n  }\n\n  # sub-subcommand\n  export extern \"myapp some_cmd sub_cmd\" [\n    --config: string@\"nu-complete myapp some_cmd sub_cmd config\" # the other case to test\n    --version(-V)             # Print version\n  ]\n\n}\n\nuse completions *\n```\n\n----------------------------------------\n\nTITLE: Optimization Level Parameter Examples\nDESCRIPTION: Demonstrates using the -O parameter for setting optimization levels, showing both valid numeric input and invalid string input with error handling.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/typed-derive.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ typed-derive -O 1\nArgs { optimization: Some(1), include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Info }\n\n$ typed-derive -O plaid\n? failed\nerror: invalid value 'plaid' for '-O <OPTIMIZATION>': invalid digit found in string\n\nFor more information, try '--help'.\n```\n\n----------------------------------------\n\nTITLE: BusyBox True Command Example\nDESCRIPTION: Shows the execution of the 'true' command through BusyBox interface, which successfully does nothing and returns exit code 0\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/multicall-busybox.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ busybox true\n? 0\n```\n\n----------------------------------------\n\nTITLE: Referencing Cargo.toml in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the Cargo.toml file in a Markdown document. It's used to instruct contributors on adding examples with required features.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Add the example to [Cargo.toml](../Cargo.toml) for any `required-features`\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Application and Generating Nushell Completions in Rust\nDESCRIPTION: This Rust code defines a CLI application using Clap and generates Nushell completions. It demonstrates various argument types, subcommands, and completion generation using the clap_complete_nushell crate.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_complete_nushell/README.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse clap::{builder::PossibleValue, Arg, ArgAction, Command, ValueHint};\nuse clap_complete::generate;\nuse clap_complete_nushell::Nushell;\nuse std::io;\n\nfn main() {\n    let mut cmd = Command::new(\"myapp\")\n        .version(\"3.0\")\n        .propagate_version(true)\n        .about(\"Tests completions\")\n        .arg(\n            Arg::new(\"file\")\n                .value_hint(ValueHint::FilePath)\n                .help(\"some input file\"),\n        )\n        .arg(\n            Arg::new(\"config\")\n                .action(ArgAction::Count)\n                .help(\"some config file\")\n                .short('c')\n                .visible_short_alias('C')\n                .long(\"config\")\n                .visible_alias(\"conf\"),\n        )\n        .arg(Arg::new(\"choice\").value_parser([\"first\", \"second\"]))\n        .subcommand(\n            Command::new(\"test\").about(\"tests things\").arg(\n                Arg::new(\"case\")\n                    .long(\"case\")\n                    .action(ArgAction::Set)\n                    .help(\"the case to test\"),\n            ),\n        )\n        .subcommand(\n            Command::new(\"some_cmd\")\n                .about(\"top level subcommand\")\n                .subcommand(\n                    Command::new(\"sub_cmd\").about(\"sub-subcommand\").arg(\n                        Arg::new(\"config\")\n                            .long(\"config\")\n                            .action(ArgAction::Set)\n                            .value_parser([PossibleValue::new(\"Lest quotes aren't escaped.\")])\n                            .help(\"the other case to test\"),\n                    ),\n                ),\n        );\n\n    generate(Nushell, &mut cmd, \"myapp\", &mut io::stdout());\n}\n```\n\n----------------------------------------\n\nTITLE: BusyBox False Command Example\nDESCRIPTION: Shows the execution of the 'false' command through BusyBox interface, which unsuccessfully does nothing and returns exit code 1\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/multicall-busybox.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ busybox false\n? 1\n```\n\n----------------------------------------\n\nTITLE: Using Prefixed Variables in CLAP Derive Macros\nDESCRIPTION: When generating variables in derive macros, always prefix them with '__clap_' to avoid name clashes with user-defined variables.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_derive/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAlways prefix generated variables with `__clap_` to minimize clashes with the user's variables, see [#2934](https://github.com/clap-rs/clap/issues/2934).\n```\n\n----------------------------------------\n\nTITLE: BusyBox Install Option Example\nDESCRIPTION: Demonstrates the --install option usage which attempts to install hardlinks for subcommands but fails in this example\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/multicall-busybox.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ busybox --install\n? failed\n...\n```\n\n----------------------------------------\n\nTITLE: Variable Substitution for Macro Compatibility\nDESCRIPTION: Substitute variable names in macros to avoid issues with macro_rules expansion and parsing.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_derive/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nPrefer substituting variable names to avoid problems with `macro_rules`, see [#2823](https://github.com/clap-rs/clap/pull/2823).\n```\n\n----------------------------------------\n\nTITLE: Path References in CLAP Derive Macros\nDESCRIPTION: Use relative path 'clap' instead of absolute path '::clap' to allow users to re-export the clap crate in their own code.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_derive/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPrefer the path `clap` over `::clap` to allow users to re-export clap, see [#2258](https://github.com/clap-rs/clap/pull/2258).\n```\n\n----------------------------------------\n\nTITLE: Running Commands for Verifying Changes in clap-rs\nDESCRIPTION: A common set of make commands to verify changes to the clap-rs project, including running tests, linting with clippy, and generating documentation.\nSOURCE: https://github.com/clap-rs/clap/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ make test-full\n$ make clippy-full\n$ make doc\n```\n\n----------------------------------------\n\nTITLE: Using Fully Qualified Standard Library Types\nDESCRIPTION: Use fully qualified paths for standard library types to avoid potential name conflicts or ambiguity.\nSOURCE: https://github.com/clap-rs/clap/blob/master/clap_derive/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nPrefer `::std::result::Result` and `::std::option::Option`, see [#3092](https://github.com/clap-rs/clap/pull/3092).\n```\n\n----------------------------------------\n\nTITLE: Referencing trycmd in Markdown\nDESCRIPTION: This snippet shows how to reference the trycmd crate in a Markdown document. It's used to explain the verification process for example documentation.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Document how the example works with a `.md` file which will be verified using [trycmd](https://docs.rs/trycmd)\n```\n\n----------------------------------------\n\nTITLE: Debugging Clap with Test Output\nDESCRIPTION: Commands to enable debug output while running tests in clap, either for the full test suite or individual tests, by enabling the debug feature flag.\nSOURCE: https://github.com/clap-rs/clap/blob/master/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo test --features debug\n\n# Or for individual tests\n$ cargo test --test <test_name> --features debug\n```\n\n----------------------------------------\n\nTITLE: Searching for MSRV References with ripgrep\nDESCRIPTION: A bash command using ripgrep (rg) to search for all references to MSRV (Minimum Supported Rust Version) in the project, including hidden files.\nSOURCE: https://github.com/clap-rs/clap/blob/master/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ rg --hidden MSRV\n```\n\n----------------------------------------\n\nTITLE: Displaying Help and Version Information with Clap-rs CLI\nDESCRIPTION: Shows the output of help and version commands for a Clap-rs application named '02_apps'. The help output displays available options including required parameters '--two' and '--one', while the version command shows the application name and version number.\nSOURCE: https://github.com/clap-rs/clap/blob/master/examples/tutorial_builder/02_apps.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ 02_apps --help\nDoes awesome things\n\nUsage: 02_apps[EXE] --two <VALUE> --one <VALUE>\n\nOptions:\n      --two <VALUE>  \n      --one <VALUE>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 02_apps --version\nMyApp 1.0\n\n```"
  }
]