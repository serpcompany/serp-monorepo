[
  {
    "owner": "vapor",
    "repo": "docs",
    "content": "TITLE: Starting a Database Transaction in Vapor\nDESCRIPTION: This code snippet shows how to start a database transaction in Vapor using `req.db.transaction(_ :)`. The closure passed to the function contains the code to be executed within the transaction.  The database instance passed into the closure should be used for all database interactions within the transaction.  No data is saved to the database until the transaction completes successfully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nreq.db.transaction { database in\n    // database gebruiken\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Transaction Swift\nDESCRIPTION: This code snippet initializes a database transaction using `req.db.transaction(_ :)`. The closure provides a `database` object to perform queries within the transaction. No data is saved until the closure returns successfully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nreq.db.transaction { database in\n    // use database\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent and Driver Dependencies to Package Swift\nDESCRIPTION: This snippet demonstrates how to add Fluent and a specific database driver as dependencies to your Swift package. Replace `<db>` with the specific database driver you intend to use (e.g., `postgres`, `sqlite`, `mysql`). The `from` value specifies the minimum compatible version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent.git\", from: \"4.0.0\"),\n.package(url: \"https://github.com/vapor/fluent-<db>-driver.git\", from: <version>),\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model with ID and Fields in Swift\nDESCRIPTION: Defines a simplified `User` model with properties like `id`, `firstName`, and `lastName`, all annotated with Fluent property wrappers. This model will be used in the DTO examples.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Abridged user model for reference.\nfinal class User: Model {\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"first_name\")\n    var firstName: String\n\n    @Field(key: \"last_name\")\n    var lastName: String\n}\n```\n\n----------------------------------------\n\nTITLE: Offloading Blocking Work to a Background Thread in Swift\nDESCRIPTION: This example demonstrates how to offload blocking work to a background thread using `req.application.threadPool.runIfActive(eventLoop:)`. This prevents the event loop from being blocked and allows the application to continue responding to incoming requests while the blocking work is being performed in the background. Promises are used to notify the event loop when the work is complete.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<String> in\n    /// Dispatch some work to happen on a background thread\n    return req.application.threadPool.runIfActive(eventLoop: req.eventLoop) {\n        /// Puts the background thread to sleep\n        /// This will not affect any of the event loops\n        sleep(5)\n        \n        /// When the \"blocking work\" has completed,\n        /// return the result.\n        return \"Hello world!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Using a Database Enum - Swift\nDESCRIPTION: This snippet shows how to read a previously created database enum and use it to define a field in a schema. It retrieves the \"planet_type\" enum using `database.enum(\"planet_type\").read()` and then uses the resulting type to define a field named \"type\" in the \"planets\" schema with the `.required` constraint. Two different code styles are shown, one using `flatMap` and another using `await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// An example of reading an enum and using it to define a new field.\ndatabase.enum(\"planet_type\").read().flatMap { planetType in\n    database.schema(\"planets\")\n        .field(\"type\", planetType, .required)\n        .update()\n}\n\n// Or\n\nlet planetType = try await database.enum(\"planet_type\").read()\ntry await database.schema(\"planets\")\n    .field(\"type\", planetType, .required)\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Implement ModelAuthenticatable for User\nDESCRIPTION: Extends the `User` model to conform to `ModelAuthenticatable`, enabling username/password authentication. Specifies `email` as the username key and `passwordHash` as the password hash key. Implements a `verify` method to check if a provided password matches the stored hash using Bcrypt.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nextension User: ModelAuthenticatable {\n    static let usernameKey = \\User.$email\n    static let passwordHashKey = \\User.$passwordHash\n\n    func verify(password: String) throws -> Bool {\n        try Bcrypt.verify(password, created: self.passwordHash)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model Instance using Fluent\nDESCRIPTION: This code snippet shows how to create a new instance of a model and save it to the database using Fluent. The model is decoded directly from the request body and then saved using the `create(on:)` method. There are two version presented: one using futures and one using async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"galaxies\") { req -> EventLoopFuture<Galaxy> in\n    let galaxy = try req.content.decode(Galaxy.self)\n    return galaxy.create(on: req.db)\n        .map { galaxy }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"galaxies\") { req async throws -> Galaxy in\n    let galaxy = try req.content.decode(Galaxy.self)\n    try await galaxy.create(on: req.db)\n    return galaxy\n}\n```\n\n----------------------------------------\n\nTITLE: Define a route with a parameter (Swift)\nDESCRIPTION: This snippet demonstrates defining a route with a parameter. It registers a handler for the `/hello/:name` path and extracts the value of the `name` parameter from the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Response Content with Futures (Swift)\nDESCRIPTION: Illustrates decoding a response body using Vapor's `Content` API with futures.  This example chains asynchronous operations using `flatMapThrowing` and `flatMap` to handle the response and decoded JSON sequentially.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.client.get(\"https://httpbin.org/json\").flatMapThrowing { res in\n\ttry res.content.decode(MyJSONResponse.self)\n}.flatMap { json in\n\t// Use JSON here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with JWT - Swift\nDESCRIPTION: This snippet shows how to configure the APNS client in Vapor using JWT-based authentication. It includes loading the private key, specifying the key and team identifiers, setting the environment, and registering the configuration with the application's APNS container.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport APNS\nimport VaporAPNS\nimport APNSCore\n\n// Configure APNS using JWT authentication.\nlet apnsConfig = APNSClientConfiguration(\n    authenticationMethod: .jwt(\n        privateKey: try .loadFrom(string: \"<#key.p8 content#>\"),\n        keyIdentifier: \"<#key identifier#>\",\n        teamIdentifier: \"<#team identifier#>\"\n    ),\n    environment: .development\n)\napp.apns.containers.use(\n    apnsConfig,\n    eventLoopGroupProvider: .shared(app.eventLoopGroup),\n    responseDecoder: JSONDecoder(),\n    requestEncoder: JSONEncoder(),\n    as: .default\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in Children Relation (Swift)\nDESCRIPTION: This code demonstrates how to add a new model to a children relation using the `create` method. The parent ID is automatically set on the child model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Example of adding a new model to a relation.\nlet earth = Planet(name: \"Earth\")\ntry await sun.$planets.create(earth, on: database)\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelAuthenticatable in Swift\nDESCRIPTION: This code snippet demonstrates how to conform a User model to the ModelAuthenticatable protocol in Vapor. It specifies the fields for username (email) and password hash, and implements a method to verify passwords using Bcrypt.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nextension User: ModelAuthenticatable {\n    static let usernameKey = \\User.$email\n    static let passwordHashKey = \\User.$passwordHash\n\n    func verify(password: String) throws -> Bool {\n        try Bcrypt.verify(password, created: self.passwordHash)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Transaction Example (Swift)\nDESCRIPTION: This example demonstrates how to use async/await syntax to perform a database transaction in Vapor with Fluent.  It simplifies the code by using `try await` to sequentially save two models within the transaction. If any `save` operation throws an error, the transaction will be rolled back. The transaction block is executed within the `req.db.transaction` scope using the transaction context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.es.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry await req.db.transaction { transaction in\n    try await sun.save(on: transaction)\n    try await sirius.save(on: transaction)\n}\nreturn .ok\n```\n\n----------------------------------------\n\nTITLE: Creating Login Route with User Token in Swift\nDESCRIPTION: Creates a protected POST `/login` route that requires user authentication using basic auth. Upon successful authentication, it generates a new user token, saves it to the database, and returns the token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator())\npasswordProtected.post(\"login\") { req async throws -> UserToken in\n    let user = try req.auth.require(User.self)\n    let token = try user.generateToken()\n    try await token.save(on: req.db)\n    return token\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Parent Relation in Fluent (Swift)\nDESCRIPTION: This code snippet demonstrates how to define a parent relation in Fluent using the `@Parent` property wrapper. It stores a reference to another model's `@ID` property. The `key` parameter specifies the field in the database to store the parent's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Example of a parent relation.\n    @Parent(key: \"star_id\")\n    var star: Star\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Schema in Fluent (Swift)\nDESCRIPTION: This code snippet demonstrates how to update an existing table schema using Fluent's schema API. It adds a unique constraint on the name field, deletes the star_id field, and then applies the update to the table. This snippet is useful for modifying table structure after it has been created.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// An example schema update.\ntry await database.schema(\"planets\")\n    .unique(on: \"name\")\n    .deleteField(\"star_id\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Filtering Planets by Type Subset Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to filter planets based on whether their type is within a given set of values (gas giant or small rocky) using Fluent's query API. It utilizes the `filter` method with the `~~` operator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// All planets with either gas giant or small rocky type.\nPlanet.query(on: database)\n    .filter(\\.$type ~~ [.gasGiant, .smallRocky])\n```\n\n----------------------------------------\n\nTITLE: Sending an APNS Notification - Swift\nDESCRIPTION: This snippet showcases how to send an APNS notification using Vapor's APNS client. It defines a custom Codable payload, creates an APNSAlertNotification, and then sends the notification to a specified device token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Custom Codable Payload\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: Int\n}\n// Create push notification Alert\nlet dt = \"70075697aa918ebddd64efb165f5b9cb92ce095f1c4c76d995b384c623a258bb\"\nlet payload = Payload(acme1: \"hey\", acme2: 2)\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n// Send the notification\ntry! await req.apns.client.sendAlertNotification(\n    alert, \n    deviceToken: dt, \n    deadline: .distantFuture\n)\n```\n\n----------------------------------------\n\nTITLE: Hashing Password with Bcrypt in Vapor\nDESCRIPTION: This code snippet illustrates how to hash a password using Bcrypt within a Vapor application. It involves importing the Vapor module and calling the `Bcrypt.hash` method with the plaintext password. The function throws, so `try` must be used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = try Bcrypt.hash(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated JWT Payload\nDESCRIPTION: Accesses the authenticated JWT payload within a protected route, allowing access to data stored in the token such as the user ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_55\n\nLANGUAGE: swift\nCODE:\n```\n// Return ok reponse if the user-provided token is valid.\nsecure.post(\"validateLoggedInUser\") { req -> HTTPStatus in\n    let sessionToken = try req.auth.require(SessionToken.self)\n    print(sessionToken.userId)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request with Content and Headers\nDESCRIPTION: This example demonstrates how to make a POST request using Vapor's HTTP client, including encoding query parameters to the URL, encoding JSON to the request body, and adding a basic authorization header to the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.post(\"https://httpbin.org/status/200\") { req in\n\t// Encodeer de querystring naar de URL van het verzoek.\n\ttry req.query.encode([\"q\": \"test\"])\n\n\t// Encodeer JSON naar de request body.\n    try req.content.encode([\"hello\": \"world\"])\n    \n    // Voeg de auth header toe aan het verzoek.\n    let auth = BasicAuthorization(username: \"something\", password: \"somethingelse\")\n    req.headers.basicAuthorization = auth\n}\n// Behandel het antwoord.\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job Object using Job Protocol Swift\nDESCRIPTION: This snippet demonstrates how to model a job object using the `Job` protocol in Vapor Queues.  It defines an `Email` struct as the payload and an `EmailJob` struct that conforms to the `Job` protocol, defining the `dequeue` and `error` functions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor \nimport Foundation \nimport Queues \n\nstruct Email: Codable {\n    let to: String\n    let message: String\n}\n\nstruct EmailJob: Job {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) -> EventLoopFuture<Void> {\n        // ここでメールを送信します\n        return context.eventLoop.future()\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) -> EventLoopFuture<Void> {\n        // エラーを処理しない場合は単に future を返すことができます。また、この関数を完全に省略することもできます。\n        return context.eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conforming User to SessionAuthenticatable in Swift\nDESCRIPTION: Extends the `User` struct to conform to the `SessionAuthenticatable` protocol. The `sessionID` property returns the email address, which is used as the unique session identifier.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\nextension User: SessionAuthenticatable {\n    var sessionID: String {\n        self.email\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bcrypt for Password Hashing in Vapor\nDESCRIPTION: This snippet configures the password hasher to use Bcrypt. It sets the default cost to 12 unless specified otherwise and shows how to customize the cost.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.passwords.use(.bcrypt)\n\napp.passwords.use(.bcrypt(cost: 8))\n```\n\n----------------------------------------\n\nTITLE: Implementing BasicAuthenticator in Swift\nDESCRIPTION: This Swift code implements a `BasicAuthenticator` in Vapor. It checks the username and password against hard-coded values. If the credentials match, a `User` is logged in using `request.auth.login`. This example uses `EventLoopFuture` for asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: BasicAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        basic: BasicAuthorization,\n        for request: Request\n    ) -> EventLoopFuture<Void> {\n        if basic.username == \"test\" && basic.password == \"secret\" {\n            request.auth.login(User(name: \"Vapor\"))\n        }\n        return request.eventLoop.makeSucceededFuture(())\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request for Token Authentication\nDESCRIPTION: An example HTTP request demonstrating how to use a Bearer token to authenticate a request. The `<token>` should be replaced with the actual token value obtained during login.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nAuthorization: Bearer <token>\n```\n\n----------------------------------------\n\nTITLE: Model Middleware Implementation (Sync) Swift\nDESCRIPTION: This code demonstrates the implementation of `ModelMiddleware` to capitalize the name of a Planet model before it's created. It modifies the model's `name` property and calls the `next.create` function to proceed with the creation. It also prints a message after the planet is created using `map` on the future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Example middleware that capitalizes names.\nstruct PlanetMiddleware: ModelMiddleware {\n    func create(model: Planet, on db: Database, next: AnyModelResponder) -> EventLoopFuture<Void> {\n        // The model can be altered here before it is created.\n        model.name = model.name.capitalized()\n        return next.create(model, on: db).map {\n            // Once the planet has been created, the code \n            // here will be executed.\n            print (\"Planet \\(model.name) was created\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameter in Vapor\nDESCRIPTION: This example demonstrates how to access a route parameter value within a Vapor route handler using `req.parameters.get`. It retrieves the value of the `:name` parameter from the URL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /hello/foo\n// responde a GET /hello/bar\n// ...\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Abort Errors in Vapor (Swift)\nDESCRIPTION: Demonstrates how to throw `Abort` errors in Vapor to return specific HTTP status codes and custom error messages.  The `Abort` struct conforms to `AbortError` and `DebuggableError`. The example shows how to initialize it with an HTTP status and an optional reason. It is used to signal an error to Vapor's error handling mechanisms.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// 404 error, default \"Not Found\" reason used.\nthrow Abort(.notFound)\n\n// 401 error, custom reason used.\nthrow Abort(.unauthorized, reason: \"Invalid Credentials\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Migration in Vapor - Swift\nDESCRIPTION: This code snippet demonstrates how to define an asynchronous migration using the `AsyncMigration` protocol in Vapor.  The `prepare` and `revert` methods are defined as `async throws` functions, allowing for asynchronous database operations. This is suitable for modern Swift concurrency.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        // Make a change to the database.\n    }\n\n    func revert(on database: Database) async throws {\n    \t// Undo the change made in `prepare`, if possible.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding request content into a struct - Swift\nDESCRIPTION: This code snippet shows how to decode the request's content into a `Greeting` struct using `req.content.decode(Greeting.self)`. This assumes the request's `content-type` header indicates a supported media type (e.g., `application/json`). If the decoding is successful, the code prints the `hello` property of the `Greeting` object and returns an HTTP 200 OK status.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"greeting\") { req in \n    let greeting = try req.content.decode(Greeting.self)\n    print(greeting.hello) // \"world\"\n    return HTTPStatus.ok\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Configuration Based on Environment in Swift\nDESCRIPTION: This code snippet demonstrates how to use a switch statement to configure your application based on the current environment. This allows you to use different database configurations for development, production and other environments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .production:\n    app.databases.use(....)\ndefault:\n    app.databases.use(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Request Redirection (Swift)\nDESCRIPTION: This snippet shows how to redirect a request to a new path. It uses the `req.redirect(to:)` method.  The snippet also shows how to specify the type of redirect, such as permanent, normal, or temporary, using the `redirectType` parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\")\n```\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\", redirectType: .permanent)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncBasicAuthenticator in Swift\nDESCRIPTION: This Swift code implements an `AsyncBasicAuthenticator` in Vapor using `async`/`await`. It checks the username and password against hard-coded values. If the credentials match, a `User` is logged in using `request.auth.login`. This example uses the `async throws` syntax for asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: AsyncBasicAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        basic: BasicAuthorization,\n        for request: Request\n    ) async throws {\n        if basic.username == \"test\" && basic.password == \"secret\" {\n            request.auth.login(User(name: \"Vapor\"))\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pong Messages via WebSocket in Vapor\nDESCRIPTION: This code snippet shows how to listen for pong messages on a WebSocket connection in Vapor. The `ws.onPong` method is used to register a closure that is executed when a pong message is received from the other peer. The closure receives the WebSocket connection (`ws`) as a parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nws.onPong { ws in\n    // Pong was received.\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing de Contraseña con Bcrypt en Vapor (Swift)\nDESCRIPTION: Este snippet muestra cómo hashear una contraseña usando el algoritmo Bcrypt en Vapor. Requiere la importación del módulo Vapor. Bcrypt utiliza un 'salt' aleatorio para mejorar la seguridad del hash.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = try Bcrypt.hash(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Migration Swift\nDESCRIPTION: This code defines a basic database migration using the `Migration` protocol in Swift. The `prepare` function contains the logic to modify the database, and the `revert` function contains the logic to undo those changes. This example uses the synchronous `EventLoopFuture` approach.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// An example migration.\nstruct MyMigration: Migration {\n    func prepare(on database: Database) -> EventLoopFuture<Void> {\n        // Make a change to the database.\n    }\n\n    func revert(on database: Database) -> EventLoopFuture<Void> {\n    \t// Undo the change made in `prepare`, if possible.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORSMiddleware in Vapor\nDESCRIPTION: This code shows how to configure and use the `CORSMiddleware` in a Vapor application. It sets allowed origins, methods, and headers to enable cross-origin resource sharing, and it makes sure that it is listed before the ErrorMiddleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet corsConfiguration = CORSMiddleware.Configuration(\n    allowedOrigin: .all,\n    allowedMethods: [.GET, .POST, .PUT, .OPTIONS, .DELETE, .PATCH],\n    allowedHeaders: [.accept, .authorization, .contentType, .origin, .xRequestedWith, .userAgent, .accessControlAllowOrigin]\n)\nlet cors = CORSMiddleware(configuration: corsConfiguration)\n// cors middleware should come before default error middleware using `at: .beginning`\napp.middleware.use(cors, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Define a basic GET route in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to define a basic GET route in Vapor. It registers a handler for the `/hello/vapor` path that returns a simple string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \"vapor\") { req in\n    return \"Hello, vapor!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a route with a UserAuthenticator in Swift\nDESCRIPTION: This code snippet demonstrates how to protect a route using a custom `UserAuthenticator` middleware in Vapor. It uses `app.grouped` to apply the middleware to a specific route, ensuring that only authenticated users can access it. `req.auth.require(User.self)` retrieves the authenticated user, throwing an error if authentication fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet protected = app.grouped(UserAuthenticator())\nprotected.get(\"me\") { req -> String in\n    try req.auth.require(User.self).name\n}\n```\n\n----------------------------------------\n\nTITLE: Define User Model with Fluent\nDESCRIPTION: Defines a `User` model using Fluent, Vapor's ORM.  Includes properties for ID, name, email, and password hash.  Sets up the database schema and initializes properties of the object. Implements Content protocol to allow the object to be represented as HTTP content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nfinal class User: Model, Content {\n    static let schema = \"users\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"name\")\n    var name: String\n\n    @Field(key: \"email\")\n    var email: String\n\n    @Field(key: \"password_hash\")\n    var passwordHash: String\n\n    init() { }\n\n    init(id: UUID? = nil, name: String, email: String, passwordHash: String) {\n        self.id = id\n        self.name = name\n        self.email = email\n        self.passwordHash = passwordHash\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Authenticator Middleware in Swift\nDESCRIPTION: This code snippet shows how to protect a route using a custom authenticator (`UserAuthenticator`) in Vapor. It groups the route with the authenticator middleware, ensuring that only authenticated users can access it. The `req.auth.require` method is used to retrieve the authenticated user, and if authentication fails, an error is thrown, protecting the route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet protected = app.grouped(UserAuthenticator())\nprotected.get(\"me\") { req -> String in\n    try req.auth.require(User.self).name\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple GET Route in Vapor\nDESCRIPTION: This snippet demonstrates how to register a simple GET route using Vapor's `app.get` method. It defines a route for `/hello/vapor` that returns a static string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \"vapor\") { req in \n    return \"Hello, vapor!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting and Bootstrapping Environment in Entrypoint (Swift)\nDESCRIPTION: This code shows the typical setup in `entrypoint.swift` for detecting the environment and bootstrapping the logging system based on it.  It is the standard way to initialize the Vapor application with the appropriate environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@main\nenum Entrypoint {\n    static func main() async throws {\n        var env = try Environment.detect()\n        try LoggingSystem.bootstrap(from: &env)\n        \n        let app = Application(env)\n        defer { app.shutdown() }\n        \n        try await configure(app)\n        try await app.runFromAsyncMainEntrypoint()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Protected Login Route with JWT in Swift\nDESCRIPTION: This code shows a password-protected login route that uses Vapor's built-in authenticator and guard middleware. Upon successful authentication, it creates a `SessionToken` payload, signs it with a JWT, and returns a `ClientTokenResponse` containing the JWT. Requires User model with authenticator and guard middleware already implemented.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator(), User.guardMiddleware())\npasswordProtected.post(\"login\") { req -> ClientTokenResponse in\n    let user = try req.auth.require(User.self)\n    let payload = try SessionToken(with: user)\n    return ClientTokenResponse(token: try req.jwt.sign(payload))\n}\n```\n\n----------------------------------------\n\nTITLE: Update Login Route to Return Token\nDESCRIPTION: Modifies the `POST /login` route to generate and return a `UserToken` upon successful authentication. Uses the `generateToken` method to create a new token, saves it to the database, and returns it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator())\npasswordProtected.post(\"login\") { req async throws -> UserToken in\n    let user = try req.auth.require(User.self)\n    let token = try user.generateToken()\n    try await token.save(on: req.db)\n    return token\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification Swift\nDESCRIPTION: Sends a push notification using the APNS client within a Vapor request context.  It involves creating a custom payload, defining an alert, and then sending the notification to a specific device token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Carga útil codificable personalizada\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: Int\n}\n// Crear alerta de notificación push\nlet dt = \"70075697aa918ebddd64efb165f5b9cb92ce095f1c4c76d995b384c623a258bb\"\nlet payload = Payload(acme1: \"hey\", acme2: 2)\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n// Enviar la notificación\ntry! await req.apns.client.sendAlertNotification(\n    alert, \n    deviceToken: dt, \n    deadline: .distantFuture\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Authentication in Swift using AsyncBearerAuthenticator\nDESCRIPTION: This snippet shows how to implement Bearer Authentication using async/await with `AsyncBearerAuthenticator`. The `authenticate` method checks the token and logs in a `User` if it matches the expected value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: AsyncBearerAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        bearer: BearerAuthorization,\n        for request: Request\n    ) async throws {\n       if bearer.token == \"foo\" {\n           request.auth.login(User(name: \"Vapor\"))\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Credentials Authentication Extension\nDESCRIPTION: Conforms the User model to the ModelCredentialsAuthenticatable protocol, specifying the username and password hash keys and defining the password verification function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_47\n\nLANGUAGE: swift\nCODE:\n```\nextension User: ModelCredentialsAuthenticatable {\n    static let usernameKey = \\User.$email\n    static let passwordHashKey = \\User.$password\n\n    func verify(password: String) throws -> Bool {\n        try Bcrypt.verify(password, created: self.password)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Google JWT - Swift\nDESCRIPTION: This code shows how to fetch and verify a Google JWT from the Authorization header using the `req.jwt.google.verify()` method. The verified token is then printed. This simplifies handling Google's identity tokens.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch and verify Google JWT from Authorization header.\napp.get(\"google\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.google.verify()\n    print(token) // GoogleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Route Protection with Session and Redirect Middleware\nDESCRIPTION: Protects routes by first checking for an authenticated user in the session and then redirecting to the login page if no user is found.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_46\n\nLANGUAGE: swift\nCODE:\n```\nlet protectedRoutes = app.grouped([User.sessionAuthenticator(), redirectMiddleware])\n```\n\n----------------------------------------\n\nTITLE: Generating and Signing a JWT (Swift)\nDESCRIPTION: This code demonstrates how to generate and sign a JWT in a Vapor route.  It creates an instance of the `TestPayload`, then uses `req.jwt.sign(payload)` to sign the payload using the configured signer.  The resulting JWT is returned in a JSON response under the key \"token\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// Genereer en stuur een nieuwe JWT terug.\napp.post(\"login\") { req -> [String: String] in\n    // Maak een nieuwe instantie van onze JWTPayload\n    let payload = TestPayload(\n        subject: \"vapor\",\n        expiration: .init(value: .distantFuture),\n        isAdmin: true\n    )\n    // Geef de ondertekende JWT terug\n    return try [\n        \"token\": req.jwt.sign(payload)\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Content in HTTP Request (Swift)\nDESCRIPTION: Shows how to encode content, query parameters, and add headers to an HTTP request using the `beforeSend` closure. This is done before sending a POST request, encoding query parameters, JSON content, and adding basic authorization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.post(\"https://httpbin.org/status/200\") { req in\n\t// Codifica la cadena de consulta (query) a la petición URL.\n\ttry req.query.encode([\"q\": \"test\"])\n\n\t// Codifica un JSON en el cuerpo de la petición.\n    try req.content.encode([\"hello\": \"world\"])\n    \n    // Añade una cabecera de autenticación a la petición.\n    let auth = BasicAuthorization(username: \"something\", password: \"somethingelse\")\n    req.headers.basicAuthorization = auth\n}\n// Controla la respuesta.\n```\n\n----------------------------------------\n\nTITLE: Vapor Route Handler Using Async/Await\nDESCRIPTION: This code snippet demonstrates a Vapor route handler that uses async/await for asynchronous operations. It queries for the first user, updates the lastAccessed property, and returns the user's name. It simplifies the code compared to using EventLoopFuture.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req async throws -> String in\n    guard let user = try await User.query(on: req.db).first() else {\n        throw Abort(.notFound)\n    }\n    user.lastAccessed = Date()\n    try await user.update(on: req.db)\n    return user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing in Vapor (Swift)\nDESCRIPTION: This example shows how to asynchronously hash a password using `req.password.async.hash()`. This prevents blocking the event loop. Two examples are shown: using `.map` and using `await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nreq.password.async.hash(\"vapor\").map { digest in\n    // Gestisci il digest.\n}\n\n// oppure\n\nlet digest = try await req.password.async.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to create a new database schema (table/collection) named 'planets' using Fluent's schema builder. It defines an id field, a required string field 'name', and a foreign key 'star_id' referencing the 'stars' table. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Create POST /users Endpoint in Vapor (Swift)\nDESCRIPTION: This code creates a POST /users endpoint in Vapor that handles user registration. It validates the incoming request, decodes the User.Create struct, checks password confirmation, and saves the new user to the database after hashing the password with Bcrypt.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"users\") { req async throws -> User in\n    try User.Create.validate(content: req)\n    let create = try req.content.decode(User.Create.self)\n    guard create.password == create.confirmPassword else {\n        throw Abort(.badRequest, reason: \"Passwords did not match\")\n    }\n    let user = try User(\n        name: create.name,\n        email: create.email,\n        passwordHash: Bcrypt.hash(create.password)\n    )\n    try await user.save(on: req.db)\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Value in Swift\nDESCRIPTION: Demonstrates how to filter query results based on a field's value using the `filter` method with an operator expression. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).filter(\\.$type == .gasGiant)\n```\n\n----------------------------------------\n\nTITLE: Creating a Protected Route using Token Authentication in Swift\nDESCRIPTION: Creates a protected GET `/me` route that requires token authentication. It uses the `UserToken.authenticator()` to authenticate the user based on the token provided in the `Authorization` header. On success, it returns the authenticated user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\nlet tokenProtected = app.grouped(UserToken.authenticator())\ntokenProtected.get(\"me\") { req -> User in\n    try req.auth.require(User.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password in Vapor (Swift)\nDESCRIPTION: This example shows how to hash a password using the `req.password.hash()` method. This function returns the hashed password (digest).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try req.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Implement ModelAuthenticatable Conformance in Vapor (Swift)\nDESCRIPTION: This code implements the ModelAuthenticatable protocol for the User model. It specifies the usernameKey (email) and passwordHashKey, and provides a verify method to compare a provided password with the stored password hash using Bcrypt.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nextension User: ModelAuthenticatable {\n    static let usernameKey = \\User.$email\n    static let passwordHashKey = \\User.$passwordHash\n\n    func verify(password: String) throws -> Bool {\n        try Bcrypt.verify(password, created: self.passwordHash)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hasher\nDESCRIPTION: Configures the application's password hasher using the `app.passwords.use(...)` method. This is the entry point for setting up password hashing in Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\napp.passwords.use(...)\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Pagination\nDESCRIPTION: This snippet shows an HTTP GET request to retrieve paginated results. It uses the `page` and `per` query parameters to specify the desired page number and the number of results per page.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /planets?page=2&per=5 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Send a test request (Swift)\nDESCRIPTION: This snippet shows how to send a test request to your Vapor application using the `app.test` method. The example sends a GET request to the \"ciao\" endpoint and then asserts the response status and body. `XCTAssertEqual` is used to verify that the response meets the expected values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.it.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.test(.GET, \"ciao\") { res in\n    XCTAssertEqual(res.status, .ok)\n    XCTAssertEqual(res.body.string, \"Ciao, mondo!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Enum Definition\nDESCRIPTION: Defines a simple string-backed enum named `Color` conforming to `Codable`. This enum represents different color options (red, blue, green) and is used as an example for validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nenum Color: String, Codable {\n    case red, blue, green\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware Globally in Vapor\nDESCRIPTION: This code snippet demonstrates how to register middleware globally for all routes in a Vapor application within the `configure(_:)` function using `app.middleware.use()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(MyMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Implementing Zip Code Validation Logic in Swift\nDESCRIPTION: This code snippet implements the validation logic for zip codes using a regular expression. It extends the `Validator` struct where the generic type `T` is a String, and adds a static `zipCode` validator. It checks whether the input string matches the format of a USA zip code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nprivate let zipCodeRegex: String = \"^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$\"\n\nextension Validator where T == String {\n    /// Validates whether a `String` is a valid zip code.\n    public static var zipCode: Validator<T> {\n        .init { input in\n            guard let range = input.range(of: zipCodeRegex, options: [.regularExpression]),\n                  range.lowerBound == input.startIndex && range.upperBound == input.endIndex\n            else {\n                return ValidatorResults.ZipCode(isValidZipCode: false)\n            }\n            return ValidatorResults.ZipCode(isValidZipCode: true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Based Pagination in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to use the `paginate(for:)` method in Fluent to automatically paginate query results based on the `page` and `per` parameters from the request URI. It requires access to the application instance (`app`) and the database connection (`req.db`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Example of request-based pagination.\napp.get(\"planets\") { req in\n    try await Planet.query(on: req.db).paginate(for: req)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in Vapor (Swift)\nDESCRIPTION: Demonstrates how to configure and use `CORSMiddleware` to handle Cross-Origin Resource Sharing. This middleware allows requests from different domains to access resources on the server, essential for modern web applications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nlet corsConfiguration = CORSMiddleware.Configuration(\n    allowedOrigin: .all,\n    allowedMethods: [.GET, .POST, .PUT, .OPTIONS, .DELETE, .PATCH],\n    allowedHeaders: [.accept, .authorization, .contentType, .origin, .xRequestedWith, .userAgent, .accessControlAllowOrigin]\n)\nlet cors = CORSMiddleware(configuration: corsConfiguration)\n// cors middleware debería aparecer antes del middleware de error predeterminado usando `at: .beginning`\napp.middleware.use(cors, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Using Vapor Content API Swift\nDESCRIPTION: This snippet shows how to conform a model to the Vapor `Content` protocol in order to utilize Vapor's content API and automatically serialize a model in a request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nextension Planet: Content { }\n\napp.get(\"planets\") { req async throws in \n    // 返回一个包含所有行星的数组。\n    try await Planet.query(on: req.db).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with UserAuthenticator in Swift\nDESCRIPTION: This code demonstrates how to protect a route using a custom `UserAuthenticator`. The `app.grouped` method is used to apply the authenticator as middleware to a group of routes. The `req.auth.require` method is used to retrieve the authenticated user within the protected route handler, throwing an error if authentication fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet protected = app.grouped(UserAuthenticator())\nprotected.get(\"me\") { req -> String in\n    try req.auth.require(User.self).name\n}\n```\n\n----------------------------------------\n\nTITLE: Create User Endpoint\nDESCRIPTION: Creates a `POST /users` endpoint to handle user registration. Validates the request, decodes the `User.Create` struct, checks if passwords match, hashes the password using Bcrypt, creates a new `User`, saves it to the database, and returns the newly created user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"users\") { req async throws -> User in\n    try User.Create.validate(content: req)\n    let create = try req.content.decode(User.Create.self)\n    guard create.password == create.confirmPassword else {\n        throw Abort(.badRequest, reason: \"Passwords did not match\")\n    }\n    let user = try User(\n        name: create.name,\n        email: create.email,\n        passwordHash: Bcrypt.hash(create.password)\n    )\n    try await user.save(on: req.db)\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Models\nDESCRIPTION: This snippet shows how to query all instances of a model from the database.  It returns an array of all `Galaxy` models stored in the database. To return Galaxy model directly in a route, you need to conform to Content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"galaxies\") { req async throws in\n    try await Galaxy.query(on: req.db).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Galaxy Model - POST Endpoint (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to create a new `Galaxy` model using a POST endpoint in Vapor. It decodes the `Galaxy` object from the request body and saves it to the database using Fluent. It handles both `EventLoopFuture` and `async/await` approaches.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"galaxies\") { req -> EventLoopFuture<Galaxy> in\n    let galaxy = try req.content.decode(Galaxy.self)\n    return galaxy.create(on: req.db)\n        .map { galaxy }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a Model Swift\nDESCRIPTION: This code demonstrates how to save a Fluent model to the database using the `save(on:)` method. This method will either create a new record or update an existing record depending on whether the model already exists in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nplanet.save(on: database)\n```\n\n----------------------------------------\n\nTITLE: Decoding Content from Request in Vapor\nDESCRIPTION: This code snippet demonstrates how to decode a `Greeting` struct from an HTTP request in a Vapor route handler. It uses `req.content.decode(Greeting.self)` to decode the request body based on the `content-type` header. The decoded value is then accessed and printed. This method will throw a `415` error if no decoder is found or no `content-type` is provided.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"greeting\") { req in\n    let greeting = try req.content.decode(Greeting.self)\n    print(greeting.hello) // \"world\"\n    return HTTPStatus.ok\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Request Query\nDESCRIPTION: Uses the `validate(query:)` function to validate a request's query parameters against the defined validations. Called before decoding the query parameters into the `CreateUser` struct. `req.query.decode` is used to parse data from the query string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(query: req)\nreq.query.decode(CreateUser.self)\n```\n\n----------------------------------------\n\nTITLE: Defining a Content Structure in Swift\nDESCRIPTION: Defines a simple `Greeting` struct that conforms to the `Content` protocol, making it compatible with Vapor's content API. This allows the struct to be automatically encoded and decoded from HTTP request bodies based on the Content-Type header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Greeting: Content {\n    var hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom JWT Payload (Swift)\nDESCRIPTION: This snippet defines a custom JWT payload structure conforming to the `JWTPayload` protocol. It includes properties for subject, expiration, and a custom isAdmin field.  The `CodingKeys` enum maps Swift property names to JWT claim names. The verify method is used for additional validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Estructura de carga útil JWT.\nstruct TestPayload: JWTPayload {\n    // Asigna los nombres de propiedad Swift más largos a las\n    // claves abreviadas utilizadas en la carga útil JWT.\n    enum CodingKeys: String, CodingKey {\n        case subject = \"sub\"\n        case expiration = \"exp\"\n        case isAdmin = \"admin\"\n    }\n\n    // El reclamo \"sub\" (sujeto) identifica al principal que es el\n    // sujeto del JWT.\n    var subject: SubjectClaim\n\n    // El reclamo \"exp\" (tiempo de vencimiento) identifica el tiempo de vencimiento en\n    // o después del cual el JWT NO DEBE aceptarse para tu procesamiento.\n    var expiration: ExpirationClaim\n\n    // Datos personalizados.\n    // Si es verdadero, el usuario es administrador.\n    var isAdmin: Bool\n\n    // Ejecuta aquí cualquier lógica de verificación adicional más allá\n    // verificación de firma.\n    // Como tenemos un ExpirationClaim, llamaremos\n    // a su método de verificación.\n    func verify(using algorithm: some JWTAlgorithm) async throws {\n        try self.expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch First Planet Swift\nDESCRIPTION: This snippet retrieves the first planet named 'Earth' from the database, using the `filter` and `first` methods.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Haalt de eerste planeet genaamd Earth op.\nlet earth = try await Planet.query(on: database)\n    .filter(\\.$name == \"Earth\")\n    .first()\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT from incoming request\nDESCRIPTION: This code snippet shows how to verify a JWT from an incoming request in a Vapor route. It extracts the JWT from the `Authorization` header, verifies its signature and claims using the configured key and the provided `TestPayload` type, and returns a 200 OK status if successful. A 401 Unauthorized error is thrown if verification fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// JWT aus eingehender Anfrage abrufen und verifizieren.\napp.get(\"me\") { req async throws -> HTTPStatus in\n    let payload = try await req.jwt.verify(as: TestPayload.self)\n    print(payload)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Email Validation\nDESCRIPTION: This code snippet shows how to add an email validation to a `Validations` collection, ensuring that the 'email' field contains a valid email address. It specifies the key, expected type, and the `.email` validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"email\", as: String.self, is: .email)\n```\n\n----------------------------------------\n\nTITLE: Verifying Password\nDESCRIPTION: Verifies a password against a given digest using the `req.password.verify()` method. This checks if the password matches the stored hash.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet bool = try req.password.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key with onDelete Action (Swift)\nDESCRIPTION: This snippet demonstrates how to add a top-level foreign key constraint with an `onDelete` action. Specifically, it shows how to configure a cascade delete, meaning that if the referenced record is deleted, records with this foreign key will also be deleted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Example of adding a top-level foreign key constraint.\n.foreignKey(\"star_id\", references: \"stars\", \"id\", onDelete: .cascade)\n```\n\n----------------------------------------\n\nTITLE: Using Bcrypt Password Hashing in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to configure the application to use Vapor's Bcrypt API for password hashing. Bcrypt is a strong hashing algorithm. The default cost is 12, but it can be customized.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.passwords.use(.bcrypt)\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request (Swift)\nDESCRIPTION: Shows how to make a simple GET request to a URL using Vapor's HTTP client. It uses the `get` method on the client object and awaits the response. The response contains the HTTP status, headers, and body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/status/200\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Swift\nDESCRIPTION: This code snippet demonstrates how to access environment variables using the `Environment.get` method. It retrieves the value of the `FOO` environment variable and prints it to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Using Sessions Middleware Globally Swift\nDESCRIPTION: This snippet shows how to add the `SessionsMiddleware` globally to your Vapor application.  It's crucial to add this middleware to enable session functionality. This ensures that all routes have access to session data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Models in Transaction (Swift)\nDESCRIPTION: This code shows how to save multiple models (sun and sirius) within a transaction in Vapor's Fluent. The transaction ensures that both saves succeed; if either save fails, both changes are rolled back, maintaining data integrity. It uses flatMap to chain asynchronous save operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nvar sun: Star = ...\nvar sirius: Star = ...\n\nreturn req.db.transaction { database in\n    return sun.save(on: database).flatMap { _ in\n        return sirius.save(on: database)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CatchAll Values\nDESCRIPTION: Shows how to access the values matched by a catch-all path component using `req.parameters.getCatchall`. This example joins the catch-all components with a space.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op GET /hello/foo\n// reageert op GET /hello/foo/bar\n// ...\napp.get(\"hello\", \"**\") { req -> String in\n    let name = req.parameters.getCatchall().joined(separator: \" \")\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define User Model with Fluent in Vapor (Swift)\nDESCRIPTION: This code defines a User model for use with Fluent in a Vapor application. It includes fields for ID, name, email, and password hash. The model conforms to the Content protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nfinal class User: Model, Content {\n    static let schema = \"users\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"name\")\n    var name: String\n\n    @Field(key: \"email\")\n    var email: String\n\n    @Field(key: \"password_hash\")\n    var passwordHash: String\n\n    init() { }\n\n    init(id: UUID? = nil, name: String, email: String, passwordHash: String) {\n        self.id = id\n        self.name = name\n        self.email = email\n        self.passwordHash = passwordHash\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining EventLoopFuture Transformations\nDESCRIPTION: This code snippet demonstrates chaining multiple transformations on an EventLoopFuture. It transforms a string to a URL, then flatMaps to a response from the client. It showcases a common pattern for asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Assume we have created an HTTP client\nlet client: Client = ... \n\n/// Transform the string to a url, then to a response\nlet futureResponse = futureString.flatMapThrowing { string in\n    guard let url = URL(string: string) else {\n        throw Abort(.badRequest, reason: \"Invalid URL string: \\(string)\")\n    }\n    return url\n}.flatMap { url in\n    client.get(url)\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Child Model - Swift\nDESCRIPTION: This snippet shows the structure of a migration for the 'Star' model, including the foreign key constraint that references the 'galaxies' table. This migration creates a table named `stars` with columns for id, name, and galaxy_id.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateStar: AsyncMigration {\n    // Bereidt de database voor op het opslaan van Ster modellen.\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"stars\")\n            .id()\n            .field(\"name\", .string)\n            .field(\"galaxy_id\", .uuid, .references(\"galaxies\", \"id\"))\n            .create()\n    }\n\n    // Zet optioneel de wijzigingen terug die in de prepare methode zijn gemaakt.\n    func revert(on database: Database) async throws {\n        try await database.schema(\"stars\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Authentication in Swift using BearerAuthenticator\nDESCRIPTION: This code snippet demonstrates how to implement Bearer Authentication in Vapor by creating a struct that conforms to the `BearerAuthenticator` protocol. The `authenticate` method checks the provided token against a hardcoded value. On successful authentication, a `User` is logged in.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: BearerAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        bearer: BearerAuthorization,\n        for request: Request\n    ) -> EventLoopFuture<Void> {\n       if bearer.token == \"foo\" {\n           request.auth.login(User(name: \"Vapor\"))\n       }\n       return request.eventLoop.makeSucceededFuture(())\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortError for Custom Errors (Swift)\nDESCRIPTION: This code snippet demonstrates how to conform a custom error type (`MyError`) to the `AbortError` protocol in Vapor.  By conforming to `AbortError`, you can specify the HTTP status code and reason associated with each error case, allowing for more control over the HTTP response returned to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nenum MyError {\n    case userNotLoggedIn\n    case invalidEmail(String)\n}\n\nextension MyError: AbortError {\n    var reason: String {\n        switch self {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var status: HTTPStatus {\n        switch self {\n        case .userNotLoggedIn:\n            return .unauthorized\n        case .invalidEmail:\n            return .badRequest\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Struct Definition with Content\nDESCRIPTION: Defines a struct `CreateUser` conforming to the `Content` protocol. It represents the data expected for creating a user, including name, username, age, email, and an optional favorite color. This struct is used with Vapor's request decoding and validation APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateUser: Content {\n    var name: String\n    var username: String\n    var age: Int\n    var email: String\n    var favoriteColor: Color?\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Swift using AsyncBasicAuthenticator\nDESCRIPTION: This code snippet demonstrates how to implement Basic Authentication using async/await with `AsyncBasicAuthenticator`. The `authenticate` method checks the username and password, logging in a `User` on successful authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: AsyncBasicAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        basic: BasicAuthorization,\n        for request: Request\n    ) async throws {\n        if basic.username == \"test\" && basic.password == \"secret\" {\n            request.auth.login(User(name: \"Vapor\"))\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request with Content Encoding and Headers (Swift)\nDESCRIPTION: Demonstrates how to make a POST request, encode content as query parameters and JSON, and add custom headers to the request. It uses the `beforeSend` closure to modify the request before it's sent. It relies on Vapor's content API for encoding and decoding.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.post(\"https://httpbin.org/status/200\") { req in\n\t// Encode query string to the request URL.\n\ttry req.query.encode([\"q\": \"test\"])\n\n\t// Encode JSON to the request body.\n    try req.content.encode([\"hello\": \"world\"])\n    \n    // Add auth header to the request\n    let auth = BasicAuthorization(username: \"something\", password: \"somethingelse\")\n    req.headers.basicAuthorization = auth\n}\n// Handle the response.\n```\n\n----------------------------------------\n\nTITLE: Example Get Me Request\nDESCRIPTION: Illustrates an example HTTP request to retrieve the authenticated user's information using a bearer token. The `Authorization` header contains the bearer token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nAuthorization: Bearer <token>\n\n```\n\n----------------------------------------\n\nTITLE: Using a DTO for PATCH Requests in Swift\nDESCRIPTION: Demonstrates using a DTO (`PatchUser`) to handle PATCH requests.  The DTO contains optional properties, allowing partial updates to the `User` model without requiring all fields to be present in the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Structure of PATCH /users/:id request.\nstruct PatchUser: Decodable {\n    var firstName: String?\n    var lastName: String?\n}\n\napp.patch(\"users\", \":id\") { req async throws -> User in \n    // Decode the request data.\n    let patch = try req.content.decode(PatchUser.self)\n    // Fetch the desired user from the database.\n    guard let user = try await User.find(req.parameters.get(\"id\"), on: req.db) else {\n        throw Abort(.notFound)\n    }\n    // If first name was supplied, update it.\n    if let firstName = patch.firstName {\n        user.firstName = firstName\n    }\n    // If new last name was supplied, update it.\n    if let lastName = patch.lastName {\n        user.lastName = lastName\n    }\n    // Save the user and return it.\n    try await user.save(on: req.db)\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Using GuardMiddleware for Authentication in Swift\nDESCRIPTION: This code shows how to use `GuardMiddleware` to ensure that a user is authenticated before reaching a route handler.  The middleware is grouped with the `UserAuthenticator` using `app.grouped`. This ensures that the user is authenticated before accessing the route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet protected = app.grouped(UserAuthenticator())\n    .grouped(User.guardMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Adding JWT dependency to Package.swift\nDESCRIPTION: This snippet shows how to add the JWT dependency to your Package.swift file for Vapor projects.  It specifies the package URL and version constraints, as well as adding the JWT product to the target dependencies. This is the first step in enabling JWT functionality in your Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n        // Andere Abhängigkeiten...\n        .package(url: \"https://github.com/vapor/jwt.git\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Andere Abhängigkeiten...\n            .product(name: \"JWT\", package: \"jwt\")\n        ]),\n        // Weitere Ziele...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Package Dependency (Swift)\nDESCRIPTION: This snippet demonstrates how to add the Vapor Redis package as a dependency to your Swift package manifest file. It includes specifying the package URL and version, as well as adding the Redis product to your target dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    // ...\n    .package(url: \"https://github.com/vapor/redis.git\", from: \"4.0.0\")\n]\n// ...\ntargets: [\n    .target(name: \"App\", dependencies: [\n        // ...\n        .product(name: \"Redis\", package: \"redis\")\n    ])\n]\n```\n\n----------------------------------------\n\nTITLE: Update Model (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to update an existing model instance in the database using the `update(on:)` method. It first retrieves the model, modifies it, and then calls `update(on:)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nguard let planet = try await Planet.find(..., on: database) else {\n    throw Abort(.notFound)\n}\nplanet.name = \"Earth\"\ntry await planet.update(on: database)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Route Components (Swift)\nDESCRIPTION: Defines a GET route with a parameter in the path.  The parameter is denoted by a ':' prefix.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /foo/bar/baz\n// responds to GET /foo/qux/baz\n// ...\napp.get(\"foo\", \":bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Response Headers (Asynchronous) in Vapor\nDESCRIPTION: Demonstrates how to modify a response asynchronously by adding a custom header using middleware in Vapor.  It implements the `AsyncMiddleware` protocol.  The `My-App-Version` header is added to the response before it's sent to the client. It uses `async`/`await` for asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        let response = try await next.respond(to: request)\n        response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n        return response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming a Transaction Result in Fluent (Swift)\nDESCRIPTION: This snippet illustrates how to transform the result of a transaction using the `transform(to:)` method. This is useful for returning a specific HTTP status code or other value indicating the success or failure of the transaction. The example transforms the result to `HTTPStatus.ok`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.db.transaction { database in\n    // use database and perform transaction\n}.transform(to: HTTPStatus.ok)\n```\n\n----------------------------------------\n\nTITLE: Adding Name Validation\nDESCRIPTION: Adds validation for the `name` property to ensure it is not empty, in other words, the `name` String cannot be empty.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\"name\", as: String.self, is: !.empty)\n```\n\n----------------------------------------\n\nTITLE: Defining a Children Relationship in Fluent\nDESCRIPTION: This code snippet demonstrates how to define a one-to-many relationship using the `@Children` property wrapper. It creates a relationship where one model (Star) can have many related models (Planet). The `for` parameter specifies the key path to the parent relationship on the child model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Star: Model {\n    // children 关系示例。\n    @Children(for: \\.$star)\n    var planets: [Planet]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeEncode hook in Swift\nDESCRIPTION: Shows how to implement the `beforeEncode` hook on a `Content` type. This hook is called before the content is encoded. The example checks if the `name` is empty and throws an error if it is, demonstrating data validation before encoding.  `mutating` is required for structs because it modifies the struct's properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// この Contents がエンコードされる前に実行されます。`mutating` は構造体のみに必要で、クラスには必要ありません。\nmutating func beforeEncode() throws {\n    // 名前は渡されないことがありますが、渡される場合は空文字列であってはなりません。\n    guard\n        let name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines),\n        !name.isEmpty\n    else {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n    self.name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Unique Constraint (Swift)\nDESCRIPTION: This code shows how to add a unique constraint with a custom name to a database schema using Fluent. It prevents duplicate email addresses by enforcing uniqueness on the \"email\" field, and names this constraint \"no_duplicate_emails\". This allows for easier management and deletion of constraints.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"email\", name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Auto Migrate Programmatically (Swift)\nDESCRIPTION: This code snippet demonstrates how to programmatically trigger automatic database migrations using `app.autoMigrate()`. This method can be called within the application to ensure migrations are run before other operations. It uses asynchronous execution and awaits the result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.autoMigrate().wait()\n\n// or\ntry await app.autoMigrate()\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords using Request in Vapor\nDESCRIPTION: This snippet shows how to hash a password using the `password` helper available on a `Request` object. It uses the configured password hasher to create a secure digest of the provided password.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try req.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashing in Vapor\nDESCRIPTION: This code snippet demonstrates how to configure the password hasher for your Vapor application. It uses the `app.passwords.use` method to set the desired hashing algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\napp.passwords.use(...)\n```\n\n----------------------------------------\n\nTITLE: Create User Migration with Fluent in Vapor (Swift)\nDESCRIPTION: This code defines a migration for the User model in Fluent. It creates a table named 'users' with fields for ID, name, email, and password hash. It also sets a unique constraint on the email field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nextension User {\n    struct Migration: AsyncMigration {\n        var name: String { \"CreateUser\" }\n\n        func prepare(on database: Database) async throws {\n            try await database.schema(\"users\")\n                .id()\n                .field(\"name\", .string, .required)\n                .field(\"email\", .string, .required)\n                .field(\"password_hash\", .string, .required)\n                .unique(on: \"email\")\n                .create()\n        }\n\n        func revert(on database: Database) async throws {\n            try await database.schema(\"users\").delete()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RSA Key to JWT Key Collection - Swift\nDESCRIPTION: This snippet shows how to add an RSA key to the application's JWT key collection. The `add(rsa:digestAlgorithm:)` method is used, specifying the RSA key and the desired digest algorithm (e.g., SHA256). This allows the key to be used for signing or verifying JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(rsa: key, digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Client in Vapor (Swift)\nDESCRIPTION: Shows how to access the default HTTP client from the Application and Request objects in a Vapor application. Accessing via `app.client` is suitable during configuration, while `req.client` should be used within route handlers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.client // Client\n\napp.get(\"test\") { req in\n\treq.client // Client\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Controller in Vapor (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to register a `RouteCollection`, specifically the `TodosController`, within a Vapor application.  The `app.register(collection:)` function is used to add the controller's routes to the application's routing table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.zh.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.register(collection: TodosController())\n```\n\n----------------------------------------\n\nTITLE: Validating Request Query - Swift\nDESCRIPTION: This code snippet demonstrates how to validate the query parameters of an incoming request using the `validate(query:)` method. It first validates the query parameters and then attempts to decode them into a `CreateUser` object. This is useful for validating data passed in the URL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(query: req)\n\nreq.query.decode(CreateUser.self)\n```\n\n----------------------------------------\n\nTITLE: Define a route with a dynamic parameter\nDESCRIPTION: This snippet shows how to define a route with a dynamic parameter using the `:` prefix.  The value of the parameter is extracted from the request using `req.parameters.get(\"name\")!` and used in the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Constraint with Fluent in Swift\nDESCRIPTION: This snippet adds a unique constraint on the 'email' field, ensuring that there are no duplicate email addresses. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by ID in Swift\nDESCRIPTION: Shows how to use the `find(_:on:)` method to retrieve a specific `Planet` model by its identifier.  This method returns `nil` if a matching model is not found.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.find(req.parameters.get(\"id\"), on: database)\n```\n\n----------------------------------------\n\nTITLE: Create Table Schema Swift\nDESCRIPTION: This snippet demonstrates how to create a table schema using Fluent's schema API. It defines a table named \"planets\" with an ID, a name field of type String, and a foreign key reference to the \"stars\" table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticatable User Model in Swift\nDESCRIPTION: This code defines a simple `User` struct that conforms to the `Authenticatable` protocol in Vapor. This struct represents a user and has a single property: `name`. This is the base user model to be used for all authentication examples.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct User: Authenticatable {\n    var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Request Parameters in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to access request parameters within a route handler in Vapor. It retrieves the 'name' parameter from the request's parameters and uses it to construct a personalized greeting string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC key for signing with Algorithm\nDESCRIPTION: This snippet demonstrates adding an HMAC key with a specified digest algorithm (SHA-256) for signing and verifying JWTs. The key is added to the `app.jwt.keys` collection. This allows the application to sign and verify tokens using the HMAC algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// HMAC mit SHA-256 Unterzeichner hinzufügen.\nawait app.jwt.keys.addHMAC(key: \"secret\", digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Querying Related Models\nDESCRIPTION: This snippet shows how to create a query builder for related models using the `query(on:)` method. It filters the planets associated with a sun to only include those with names starting with 'M' and then retrieves all matching planets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch all of the sun's planets that have a naming starting with M.\ntry await sun.$planets.query(on: database).filter(\\.$name =~ \"M\").all()\n```\n\n----------------------------------------\n\nTITLE: Defining a JWT Payload Structure (Swift)\nDESCRIPTION: This snippet defines a `TestPayload` struct that conforms to the `JWTPayload` protocol. It defines coding keys to map Swift property names to shorter keys used in the JWT payload, includes standard claims like `subject` and `expiration`, and adds a custom `isAdmin` property.  It also implements a `verify` method to add custom validation logic, in this case verifying that the token has not expired.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// JWT payload structuur.\nstruct TestPayload: JWTPayload {\n    // Zet de langere Swift-eigenschapnamen om in de\n    // verkorte sleutels die gebruikt worden in de JWT payload.\n    enum CodingKeys: String, CodingKey {\n        case subject = \"sub\"\n        case expiration = \"exp\"\n        case isAdmin = \"admin\"\n    }\n\n    // De \"sub\" (onderwerp) claim identificeert de principal die het\n    // onderwerp van de JWT is.\n    var subject: SubjectClaim\n\n    // De \"exp\" (vervaltijd) claim identificeert de vervaltijd op\n    // of waarna de JWT NIET voor verwerking MOET worden geaccepteerd.\n    var expiration: ExpirationClaim\n\n    // Aangepaste gegevens.\n    // Indien waar, de gebruiker is een admin.\n    var isAdmin: Bool\n\n    // Voer eventuele extra verificatielogica uit\n    // handtekening verificatie hier.\n    // Omdat we een ExpirationClaim hebben, zullen we\n    // zijn verificatiemethode aanroepen.\n    func verify(using signer: JWTSigner) throws {\n        try self.expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Authenticatable User struct in Swift\nDESCRIPTION: This code snippet shows how to define a struct that conforms to the `Authenticatable` protocol in Vapor. This is a basic requirement for using Vapor's authentication APIs. The example demonstrates a simple `User` struct with a `name` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct User: Authenticatable {\n    var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Constraint (Swift)\nDESCRIPTION: This snippet demonstrates how to add a unique constraint to a schema. The constraint is applied to the \"email\" field, ensuring that no two records have the same email address.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Disallow duplicate email addresses.\n.unique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Vapor Controller in Swift\nDESCRIPTION: This code snippet defines a `TodosController` in Vapor, conforming to the `RouteCollection` protocol. It groups routes under the \"todos\" path and defines handlers for various HTTP methods (GET, POST, PUT, DELETE) for interacting with todo items. The controller methods accept a `Request` and return a `String` or an `EventLoopFuture<String>`, conforming to `ResponseEncodable`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct TodosController: RouteCollection {\n    func boot(routes: RoutesBuilder) throws {\n        let todos = routes.grouped(\"todos\")\n        todos.get(use: index)\n        todos.post(use: create)\n\n        todos.group(\":id\") { todo in\n            todo.get(use: show)\n            todo.put(use: update)\n            todo.delete(use: delete)\n        }\n    }\n\n    func index(req: Request) async throws -> String {\n        // ...\n    }\n\n    func create(req: Request) throws -> EventLoopFuture<String> {\n        // ...\n    }\n\n    func show(req: Request) throws -> String {\n        guard let id = req.parameters.get(\"id\") else {\n            throw Abort(.internalServerError)\n        }\n        // ...\n    }\n\n    func update(req: Request) throws -> String {\n        guard let id = req.parameters.get(\"id\") else {\n            throw Abort(.internalServerError)\n        }\n        // ...\n    }\n\n    func delete(req: Request) throws -> String {\n        guard let id = req.parameters.get(\"id\") else {\n            throw Abort(.internalServerError)\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Job - Swift\nDESCRIPTION: This snippet shows how to register a job, such as EmailJob, with the application's queues. It creates an instance of the job and adds it to the queue using app.queues.add.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Register jobs\nlet emailJob = EmailJob()\napp.queues.add(emailJob)\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - String Non-Empty\nDESCRIPTION: Adds a validation to ensure that the `name` field is not empty. It uses the `!` operator to invert the `.empty` validator, effectively requiring the string to be non-empty.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"name\", as: String.self, is: !.empty)\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hasher in Vapor\nDESCRIPTION: This snippet demonstrates how to configure the password hasher for a Vapor application using `app.passwords.use(...)`. It sets up the hasher to be used for password storage and verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\napp.passwords.use(...)\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future Value and Handling Thrown Errors\nDESCRIPTION: This code snippet expands upon the previous example, demonstrating how to use Swift's `do`/`catch` alongside `flatMap` to handle potential errors that might be thrown within the mapping closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设前面的示例中有 future 的字符串和客户端。\nlet futureResponse = futureString.flatMap { string in\n    let url: URL\n    do {\n        // 一些同步抛出异常的方法。\n        url = try convertToURL(string)\n    } catch {\n        // 使用事件循环来制作预先完成的 future。\n        return eventLoop.makeFailedFuture(error)\n    }\n    return client.get(url) // EventLoopFuture<ClientResponse>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queues with Redis Driver in Vapor\nDESCRIPTION: This snippet demonstrates how to configure Vapor Queues to use the Redis driver. It initializes the queues system with a Redis connection URL within the `configure.swift` file. The `app.queues.use()` method configures the queues system to use the Redis driver.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport QueuesRedisDriver\n\ntry app.queues.use(.redis(url: \"redis://127.0.0.1:6379\"))\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request with Content Encoding and Headers\nDESCRIPTION: Illustrates how to make a POST request using the Vapor client, including encoding the request body with JSON, adding query parameters to the URL, and setting an authorization header.  The `beforeSend` closure allows modification of the request before it's sent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.post(\"https://httpbin.org/status/200\") { req in\n\t// 请求 URL 中编码查询字符串。\n\ttry req.query.encode([\"q\": \"test\"])\n\n\t// 使用 JSON 编码请求体。\n    try req.content.encode([\"hello\": \"world\"])\n    \n    // 在请求头中添加认证头。\n    let auth = BasicAuthorization(username: \"something\", password: \"somethingelse\")\n    req.headers.basicAuthorization = auth\n}\n// 处理响应。\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware (Add Version Header) - Swift (Middleware Protocol)\nDESCRIPTION: This snippet demonstrates how to create a middleware that adds a custom header to the response. It uses the `Middleware` protocol to access and modify the response before it is sent to the client. In this case it adds a `My-App-Version` header with the value `v2.5.9`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        next.respond(to: request).map { response in\n            response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n            return response\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an HMAC signer with SHA-256 (Swift)\nDESCRIPTION: This code shows how to add HMAC with SHA-256 signer to your Vapor application's JWT configuration using a secret key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// Voeg HMAC toe met SHA-256 signer.\napp.jwt.signers.use(.hs256(key: \"secret\"))\n```\n\n----------------------------------------\n\nTITLE: Verifying a JWT in Swift\nDESCRIPTION: This snippet demonstrates how to verify a JWT received in an incoming request using the `req.jwt.verify` method. It retrieves the JWT from the `Authorization` header, verifies it, and extracts the payload as a `TestPayload` instance. If verification succeeds, it prints the payload and returns a 200 OK status.  A 401 Unauthorized error is thrown upon failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch and verify JWT from incoming request.\napp.get(\"me\") { req async throws -> HTTPStatus in\n    let payload = try await req.jwt.verify(as: TestPayload.self)\n    print(payload)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JWK to Key Collection - Swift\nDESCRIPTION: This snippet adds a JSON Web Key (JWK) to the key collection. It initializes a `JWK` object from a JSON string containing the key parameters and then uses the `use(jwk:)` method to add it to the collection. This makes the key available for JWT signing and verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nlet privateKey = \"\"\"\n{\n    \"kty\": \"RSA\",\n    \"d\": \"\\(rsaPrivateExponent)\",\n    \"e\": \"AQAB\",\n    \"use\": \"sig\",\n    \"kid\": \"1234\",\n    \"alg\": \"RS256\",\n    \"n\": \"\\(rsaModulus)\"\n}\n\"\"\"\n\nlet jwk = try JWK(json: privateKey)\ntry await app.jwt.keys.use(jwk: jwk)\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Stars in a Transaction Swift\nDESCRIPTION: This code shows how to save multiple objects (`sun` and `sirius`) within a single database transaction using Vapor. If any of the save operations fail, none of the objects will be saved, ensuring atomicity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.it.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar sun: Star = ...\nvar sirius: Star = ...\n\nreturn req.db.transaction { database in\n    return sun.save(on: database).flatMap { _ in\n        return sirius.save(on: database)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Password\nDESCRIPTION: Hashes a password using the `req.password.hash()` method. This method uses the configured password hasher to generate a secure digest.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try req.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Database in configure.swift\nDESCRIPTION: This snippet demonstrates how to configure the database connection in your `configure.swift` file using Fluent. Replace `<db config>` with the specific configuration for your database driver and `<identifier>` with a unique identifier for the database connection (e.g., `.psql`, `.sqlite`, `.mysql`, `.mongo`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Fluent<db>Driver\n\napp.databases.use(<db config>, as: <identifier>)\n```\n\n----------------------------------------\n\nTITLE: Updating Login Route to Return a Token in Swift\nDESCRIPTION: This code snippet updates the POST /login route to generate and return a UserToken upon successful authentication. It saves the new token to the database before returning it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator())\npasswordProtected.post(\"login\") { req async throws -> UserToken in\n    let user = try req.auth.require(User.self)\n    let token = try user.generateToken()\n    try await token.save(on: req.db)\n    return token\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results in Swift\nDESCRIPTION: This snippet demonstrates how to sort query results by a specific field using the `sort` method in Fluent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n// Planeten ophalen gesorteerd op naam.\nPlanet.query(on: database).sort(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Modifying Response with Middleware (Asynchronous) in Vapor (Swift)\nDESCRIPTION: Demonstrates how to create middleware to modify the response by adding a custom header using the asynchronous `AsyncMiddleware` protocol. The middleware adds the `My-App-Version` header with the value `v2.5.9` to every response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        let response = try await next.respond(to: request)\n        response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n        return response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Middleware to Modify Response Headers in Vapor\nDESCRIPTION: Creates an asynchronous middleware that adds a custom header to the response. This uses the `AsyncMiddleware` protocol and modifies the response headers in the `respond` function after receiving it from the next responder. This example demonstrates adding `My-App-Version` header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        let response = try await next.respond(to: request)\n        response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n        return response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting EventLoopFuture to Async/Await\nDESCRIPTION: This snippet shows how to convert a function that returns an EventLoopFuture to an async/await function using .get().\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResult = try await someMethodThatReturnsAFuture().get()\n```\n\n----------------------------------------\n\nTITLE: Fetching Unique User First Names Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to fetch all unique user first names from the database using Fluent's query API. It utilizes the `unique()` and `all(\\$firstName)` methods to retrieve only distinct first names.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Returns all unique user first names. \nUser.query(on: database).unique().all(\\.$firstName)\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Vapor\nDESCRIPTION: Shows how to perform a basic GET request using the client. The response contains the HTTP status, headers, and body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/status/200\")\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncResponseEncodable for HTML in Swift\nDESCRIPTION: This code shows how to implement the `AsyncResponseEncodable` protocol for the `HTML` struct using async/await. It sets the `Content-Type` header to `text/html` and creates a response with the HTML content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: AsyncResponseEncodable {\n  public func encodeResponse(for request: Request) async throws -> Response {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return .init(status: .ok, headers: headers, body: .init(string: value))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Token in Swift\nDESCRIPTION: Extends the `User` model with a function to generate a new user token. The token value is a random 16-byte base64 encoded string. This function requires the user to have a valid ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nextension User {\n    func generateToken() throws -> UserToken {\n        try .init(\n            value: [UInt8].random(count: 16).base64, \n            userID: self.requireID()\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Route Groups in Vapor (Swift)\nDESCRIPTION: Shows how to add middleware to specific route groups, limiting its application to those routes. This allows for targeted request/response processing for particular endpoints.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet group = app.grouped(MyMiddleware())\ngroup.get(\"foo\") { req in\n\t// Esta solicitud ha pasado por MyMiddleware\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Get Route with DTO (Swift)\nDESCRIPTION: This Swift code demonstrates implementing a GET route to retrieve users and format the response using the `GetUser` DTO. It queries the database for all users, maps them to the DTO format, and returns the array.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"users\") { req async throws -> [GetUser] in \n    // Haal alle gebruikers op uit de database.\n    let users = try await User.query(on: req.db).all()\n    return try users.map { user in\n        // Converteer elke gebruiker naar GET return type.\n        try GetUser(\n            id: user.requireID(),\n            name: \"\\(user.firstName) \\(user.lastName)\"\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BearerAuthenticator in Swift\nDESCRIPTION: This code implements a `BearerAuthenticator` that verifies the bearer token from the `Authorization` header. The `authenticate(bearer:for:)` method checks if the provided token matches a hardcoded value. If the token is valid, it logs in a `User` with the name \"Vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: BearerAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        bearer: BearerAuthorization,\n        for request: Request\n    ) -> EventLoopFuture<Void> {\n       if bearer.token == \"foo\" {\n           request.auth.login(User(name: \"Vapor\"))\n       }\n       return request.eventLoop.makeSucceededFuture(())\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with TLS - Swift\nDESCRIPTION: This snippet demonstrates configuring the APNS client with TLS-based authentication using a certificate. It includes specifying the paths to the private key and PEM files, as well as an optional PEM password.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nauthenticationMethod: .tls(\n    privateKeyPath: <#path to private key#>,\n    pemPath: <#path to pem file#>,\n    pemPassword: <#optional pem password#>\n)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs - Swift\nDESCRIPTION: This snippet demonstrates how to dispatch a queue job from within a route handler using both EventLoopFuture and async/await. It utilizes the req.queue.dispatch method, specifying the job type and payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\")\n        ).map { \"done\" }\n}\n\n// or\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"))\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Port in Vapor\nDESCRIPTION: This snippet illustrates how to configure a custom port for the Vapor HTTP server. It sets the `port` property of the server configuration to a specific value. The default is `8080`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Configure custom port.\napp.http.server.configuration.port = 1337\n```\n\n----------------------------------------\n\nTITLE: Struct definition conforming to Content\nDESCRIPTION: Defines a struct `CreateUser` that conforms to the `Content` protocol. This allows Vapor to automatically decode request data into this struct. It includes properties like name, username, age, email, and favoriteColor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateUser: Content {\n    var name: String\n    var username: String\n    var age: Int\n    var email: String\n    var favoriteColor: Color?\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Content\nDESCRIPTION: Adds validation for the `CreateUser` content using `CreateUser.validate(content:)`. This is placed before decoding the content to ensure that the data is valid before being used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\ntry CreateUser.validate(content: req)\n```\n\n----------------------------------------\n\nTITLE: Using Bcrypt Password Hashing\nDESCRIPTION: Configures the application to use Bcrypt for password hashing. Bcrypt is the default algorithm and offers a secure way to store passwords. The cost parameter can be adjusted for different levels of security.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.passwords.use(.bcrypt)\n```\n\n----------------------------------------\n\nTITLE: Define a route with a wildcard path component\nDESCRIPTION: This snippet demonstrates how to define a route with a wildcard path component, denoted by `**`.  This matches one or more path components.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /foo/bar\n// 响应到 GET /foo/bar/baz\n// ...\napp.get(\"foo\", \"**\") { req in \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading with get(reload:on:)\nDESCRIPTION: This snippet demonstrates lazy eager loading of the `star` relation for a `planet` model.  It uses the `get(on:)` method on the relation to fetch the related star if it hasn't already been loaded. It also shows the use of the `reload:` parameter to force a refetch. The `database` parameter specifies the database connection to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nplanet.$star.get(on: database).map {\n    print(planet.star.name)\n}\n\n// Or\n\ntry await planet.$star.get(on: database)\nprint(planet.star.name)\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await planet.$star.get(reload: true, on: database)\nprint(planet.star.name)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Identifier Swift\nDESCRIPTION: This snippet demonstrates how to add a custom identifier field to the schema. It adds a field named \"id\" of type Integer and marks it as the primary key with auto-generation enabled.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"id\", .int, .identifier(auto: true))\n```\n\n----------------------------------------\n\nTITLE: Defining a Migration in Vapor using Migration Protocol - Swift\nDESCRIPTION: This code snippet shows how to define a migration using the `Migration` protocol in Vapor. The `prepare` function is used to make changes to the database, and the `revert` function is used to undo those changes if possible. This is a standard migration definition for synchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// An example migration.\nstruct MyMigration: Migration {\n    func prepare(on database: Database) -> EventLoopFuture<Void> {\n        // Make a change to the database.\n    }\n\n    func revert(on database: Database) -> EventLoopFuture<Void> {\n    \t// Undo the change made in `prepare`, if possible.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bcrypt for Password Hashing\nDESCRIPTION: This snippet shows how to configure Bcrypt as the password hashing algorithm in Vapor. It also demonstrates how to customize the Bcrypt cost factor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\napp.passwords.use(.bcrypt)\n\napp.passwords.use(.bcrypt(cost: 8))\n```\n\n----------------------------------------\n\nTITLE: User Model Definition Swift\nDESCRIPTION: This code defines a `User` model using Fluent in Vapor. It includes properties for ID, name, email, and password hash. The model conforms to `Content` for serialization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nfinal class User: Model, Content {\n    static let schema = \"users\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"name\")\n    var name: String\n\n    @Field(key: \"email\")\n    var email: String\n\n    @Field(key: \"password_hash\")\n    var passwordHash: String\n\n    init() { }\n\n    init(id: UUID? = nil, name: String, email: String, passwordHash: String) {\n        self.id = id\n        self.name = name\n        self.email = email\n        self.passwordHash = passwordHash\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection (Swift)\nDESCRIPTION: This snippet demonstrates how to configure a Redis connection within a Vapor application. It sets the Redis configuration with a hostname using `RedisConfiguration`. This is the minimal configuration required to connect to a Redis instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet app = Application()\n\napp.redis.configuration = try RedisConfiguration(hostname: \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Send Complex Test Request with Content Encoding in Swift\nDESCRIPTION: This snippet shows how to send a more complex test request, specifically a POST request to the \"todos\" endpoint, with content encoding and decoding. It includes a `beforeRequest` closure to encode a JSON payload and an `afterResponse` closure to decode the response and perform assertions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ntry app.test(.POST, \"todos\", beforeRequest: { req in\n\ttry req.content.encode([\"title\": \"Test\"])\n}, afterResponse: { res in\n    XCTAssertEqual(res.status, .created)\n    let todo = try res.content.decode(Todo.self)\n    XCTAssertEqual(todo.title, \"Test\")\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize Application in Testing Environment in Swift\nDESCRIPTION: This snippet illustrates how to initialize an `Application` instance in the `.testing` environment.  The `defer` block ensures that `app.shutdown()` is called to release resources and avoid potential test suite crashes. The `configure` function is called to apply application configurations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet app = Application(.testing)\ndefer { app.shutdown() }\ntry configure(app)\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Identifier Field with Fluent in Swift\nDESCRIPTION: This snippet adds a default identifier field using the `.id()` method. It creates a field with the special `.id` field key and a `UUID` value type. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.id()\n```\n\n----------------------------------------\n\nTITLE: Route with Parameter\nDESCRIPTION: Registers a route with a dynamic path component (parameter). This demonstrates how to extract the parameter value from the request and use it in the response. Dependencies: Vapor's `Application` and `Request` objects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a WebSocket Route on a Vapor Server (Swift)\nDESCRIPTION: This snippet demonstrates how to define a WebSocket route within a Vapor application using the `app.webSocket` method. It takes a route path and a closure that handles incoming WebSocket connections. The closure receives the request and the WebSocket instance, allowing you to manage the connection and communication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.webSocket(\"echo\") { req, ws in\n    // Verbonden WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Pivot Model for Siblings Relationship (Swift)\nDESCRIPTION: This shows how to define a pivot model, which acts as an intermediary table for many-to-many relationships. It includes parent relationships to both models involved in the relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfinal class PlanetTag: Model {\n    static let schema = \"planet+tag\"\n    \n    @ID(key: .id)\n    var id: UUID?\n\n    @Parent(key: \"planet_id\")\n    var planet: Planet\n\n    @Parent(key: \"tag_id\")\n    var tag: Tag\n\n    @OptionalField(key: \"comments\")\n    var comments: String?\n\n    @OptionalEnum(key: \"status\")\n    var status: PlanetTagStatus?\n\n    init() { }\n\n    init(id: UUID? = nil, planet: Planet, tag: Tag, comments: String?, status: PlanetTagStatus?) throws {\n        self.id = id\n        self.$planet.id = try planet.requireID()\n        self.$tag.id = try tag.requireID()\n        self.comments = comments\n        self.status = status\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Database Enum (Swift)\nDESCRIPTION: This code snippet demonstrates how to update an existing database enum using Vapor. The `deleteCase` method removes a specific case from the enum, and the `update` method applies the changes to the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Un ejemplo de actualización de un enum.\ndatabase.enum(\"planet_type\")\n    .deleteCase(\"gasGiant\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Updating Planets by Name Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to update all planets named 'Pluto' to the type 'dwarf' using Fluent's query API. It uses the `set` method to specify the update, `filter` to target specific records, and `update` to execute the update.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Update all planets named \"Pluto\"\nPlanet.query(on: database)\n    .set(\\.$type, to: .dwarf)\n    .filter(\\.$name == \"Pluto\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Defining a Parent Relationship in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to define a parent relationship using the `@Parent` property wrapper in a Fluent model. The `key` parameter specifies the foreign key field in the current model that references the parent model's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Ejemplo de relación parent.\n    @Parent(key: \"star_id\")\n    var star: Star\n}\n```\n\n----------------------------------------\n\nTITLE: Adding String Validation (NotEmpty and Alphanumeric)\nDESCRIPTION: This code snippet shows how to add validations for strings to ensure they are not empty and are alphanumeric with a minimum character count. It uses the `!` operator to negate the `.empty` validator and combines `.count` and `.alphanumeric` with `&&`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"name\", as: String.self, is: !.empty)\nvalidations.add(\"username\", as: String.self, is: .count(3...) && .alphanumeric)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncBasicAuthenticator in Swift\nDESCRIPTION: This code implements an `AsyncBasicAuthenticator` for use with `async`/`await`.  It verifies the username and password from the `Authorization` header. The `authenticate(basic:for:)` method checks if the provided credentials match hardcoded values. If the credentials are valid, it logs in a `User` with the name \"Vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: AsyncBasicAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        basic: BasicAuthorization,\n        for request: Request\n    ) async throws {\n        if basic.username == \"test\" && basic.password == \"secret\" {\n            request.auth.login(User(name: \"Vapor\"))\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database URL in Vapor\nDESCRIPTION: This Swift code snippet demonstrates how to access the `DATABASE_URL` environment variable within a Vapor application and use it to configure the Postgres database connection. It retrieves the URL from the environment and uses it to initialize a Postgres database connection using the `.postgres(url: databaseURL)` method. It also includes a fallback to handle cases where `DATABASE_URL` is missing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    try app.databases.use(.postgres(url: databaseURL), as: .psql)\n} else {\n    // Handle missing DATABASE_URL here...\n    //\n    // Alternatively, you could also set a different config \n    // depending on wether app.environment is set to to \n    // `.development` or `.production`\n}\n```\n\n----------------------------------------\n\nTITLE: Route Protection with Redirect Middleware\nDESCRIPTION: Protects routes by redirecting unauthenticated users to a login page. It redirects users to the `/login?loginRequired=true` path if they are not authenticated.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_44\n\nLANGUAGE: swift\nCODE:\n```\nlet protectedRoutes = app.grouped(User.redirectMiddleware(path: \"/login?loginRequired=true\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Property in Swift Model\nDESCRIPTION: This code snippet defines a parent property in a Swift model using the `@Parent` property wrapper. It specifies the key used to store the parent model's identifier in the database, creating a foreign key relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\n@Parent(key: \"galaxy_id\")\nvar galaxy: Galaxy\n```\n\n----------------------------------------\n\nTITLE: Basic Route Registration\nDESCRIPTION: Registers a route that responds to GET requests for `/hello/vapor`.  It demonstrates the use of `app.get` to define a simple route handler that returns a string. Dependencies: Vapor's `Application` object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \"vapor\") { req in \n    return \"Hello, vapor!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Vapor Controller with CRUD Operations (Swift)\nDESCRIPTION: This snippet defines a `TodosController` in Vapor, implementing the `RouteCollection` protocol. It handles CRUD operations for a `Todo` model, including creating, retrieving, updating, and deleting todos.  It depends on the Vapor framework and a `Todo` model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct TodosController: RouteCollection {\n    func boot(routes: RoutesBuilder) throws {\n        let todos = routes.grouped(\"todos\")\n        todos.get(use: index)\n        todos.post(use: create)\n\n        todos.group(\":id\") { todo in\n            todo.get(use: show)\n            todo.put(use: update)\n            todo.delete(use: delete)\n        }\n    }\n\n    func index(req: Request) async throws -> [Todo] {\n        try await Todo.query(on: req.db).all()\n    }\n\n    func create(req: Request) async throws -> Todo {\n        let todo = try req.content.decode(Todo.self)\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func show(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        return todo\n    }\n\n    func update(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        let updatedTodo = try req.content.decode(Todo.self)\n        todo.title = updatedTodo.title\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func delete(req: Request) async throws -> HTTPStatus {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        try await todo.delete(on: req.db)\n        return .ok\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Transaction Swift\nDESCRIPTION: This example showcases using `async`/`await` syntax for performing a transaction.  It saves two `Star` models, `sun` and `sirius`, ensuring both are saved, or none. It uses the `transaction` object provided and returns `.ok` upon completion. Requires `async/await` support and appropriate error handling.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await req.db.transaction { transaction in\n    try await sun.save(on: transaction)\n    try await sirius.save(on: transaction)\n}\nreturn .ok\n```\n\n----------------------------------------\n\nTITLE: Defining Model Schema Swift\nDESCRIPTION: This snippet showcases how to define the `schema` property for a Fluent model. The `schema` property represents the name of the table or collection in the database that the model corresponds to. It's a static constant string property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 表或集合名\n    static let schema = \"planets\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Driver Dependency\nDESCRIPTION: This snippet adds the Fluent PostgreSQL driver as a dependency to your Swift package. This allows your Vapor application to connect to a PostgreSQL database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent-postgres-driver.git\", from: \"2.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Prepend Middleware in Vapor\nDESCRIPTION: Demonstrates how to prepend middleware to the beginning of the middleware stack in Vapor using `at: .beginning`. This is useful for adding middleware before Vapor's default middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(someMiddleware, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in Vapor\nDESCRIPTION: Configures `CORSMiddleware` with specific settings for cross-origin resource sharing.  The example allows all origins, specified HTTP methods, and specified headers.  Crucially, it is registered at the beginning to ensure it processes errors before ErrorMiddleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nlet corsConfiguration = CORSMiddleware.Configuration(\n    allowedOrigin: .all,\n    allowedMethods: [.GET, .POST, .PUT, .OPTIONS, .DELETE, .PATCH],\n    allowedHeaders: [.accept, .authorization, .contentType, .origin, .xRequestedWith, .userAgent, .accessControlAllowOrigin]\n)\nlet cors = CORSMiddleware(configuration: corsConfiguration)\n// cors middleware moet voor standaard error middleware komen met `at: .beginning`\napp.middleware.use(cors, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Database Schema Migration Example in Swift\nDESCRIPTION: This snippet shows a migration example, defining a UserMigration. It creates a table named 'users' with two fields, 'id' (uuid, identifier) and 'name' (string, required). The revert function deletes the table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"id\", .uuid, .identifier(auto: false))\n            .field(\"name\", .string, .required)\n            .create()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Queues Redis Driver Package - Swift\nDESCRIPTION: This snippet demonstrates how to add the `queues-redis-driver` package as a dependency in your Swift Package Manager manifest file. It shows the necessary configuration to include the driver in your project's dependencies and targets. This allows you to use Redis as the queue backend for Vapor Queues.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        /// Any other dependencies ...\n        .package(url: \"https://github.com/vapor/queues-redis-driver.git\", from: \"1.0.0\"),\n    ],\n    targets: [\n        .executableTarget(name: \"App\", dependencies: [\n            // Other dependencies\n            .product(name: \"QueuesRedisDriver\", package: \"queues-redis-driver\")\n        ]),\n        .testTarget(name: \"AppTests\", dependencies: [.target(name: \"App\")])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Vapor Route with Async/Await\nDESCRIPTION: This snippet demonstrates a Vapor route handler using async/await to perform the same asynchronous database query and update as the previous snippet, but with cleaner syntax.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req async throws -> String in\n    guard let user = try await User.query(on: req.db).first() else {\n        throw Abort(.notFound)\n    }\n    user.lastAccessed = Date()\n    try await user.update(on: req.db)\n    return user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Content from Request in Swift\nDESCRIPTION: This code snippet demonstrates how to decode a `Greeting` struct from an incoming HTTP request using `req.content.decode`. It decodes the content based on the `content-type` header of the request. A `415` error is thrown if no decoder is found or the request lacks a content type header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\napp.post(\"greeting\") { req in \n    let greeting = try req.content.decode(Greeting.self)\n    print(greeting.hello) // \"world\"\n    return HTTPStatus.ok\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Tables with Fluent in Swift\nDESCRIPTION: This code shows how to perform a join operation to include fields from another model in the result set. It retrieves all planets with a star named 'Sun'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera todos los planetas con una estrella llamada Sun.\nPlanet.query(on: database)\n    .join(Star.self, on: \\Planet.$star.$id == \\Star.$id)\n    .filter(Star.self, \\.$name == \"Sun\")\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Overriding Global JSON Encoder in Swift\nDESCRIPTION: This code shows how to override the global JSON encoder used by Vapor.  A new `JSONEncoder` is created with a custom date encoding strategy (unix timestamps). This encoder is then set as the global encoder for the `.json` media type using `ContentConfiguration.global.use`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// create a new JSON encoder that uses unix-timestamp dates\nlet encoder = JSONEncoder()\nencoder.dateEncodingStrategy = .secondsSince1970\n\n// override the global encoder used for the `.json` media type\nContentConfiguration.global.use(encoder: encoder, for: .json)\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Path Prefix (Swift)\nDESCRIPTION: This snippet demonstrates how to group routes using a path prefix.  Routes defined within the `users` group will have `/users` prepended to their paths. Two different syntax are showcased: using a builder and using a closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nlet users = app.grouped(\"users\")\n// GET /users\nusers.get { req in\n    ...\n}\n// POST /users\nusers.post { req in\n    ...\n}\n// GET /users/:id\nusers.get(\":id\") { req in\n    let id = req.parameters.get(\"id\")!\n    ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { req in\n        ...\n    }\n    // POST /users\n    users.post { req in\n        ...\n    }\n    // GET /users/:id\n    users.get(\":id\") { req in\n        let id = req.parameters.get(\"id\")!\n        ...\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { ... }\n    // POST /users\n    users.post { ... }\n\n    users.group(\":id\") { user in\n        // GET /users/:id\n        user.get { ... }\n        // PATCH /users/:id\n        user.patch { ... }\n        // PUT /users/:id\n        user.put { ... }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify JWT with Key ID - Swift\nDESCRIPTION: This snippet showcases how to verify a JWT using the key identifier (kid) present in the JWT header.  If no `kid` is available in the JWT header, it uses the default signer configured for the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// 使用 ”kid“ 头部指定的签名者进行验证。\n// 如果没有 ”kid“ 头部，则使用默认的签名者\nlet payload = try req.jwt.verify(as: TestPayload.self)\n```\n\n----------------------------------------\n\nTITLE: Using async/await with Transactions in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to use `async`/`await` syntax to manage transactions in Fluent. The `req.db.transaction` method is called with a closure that is marked as `async`. Inside this closure, you can use `await` to perform asynchronous operations such as saving models. The entire transaction will be rolled back if any of the `await` calls throw an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await req.db.transaction { transaction in\n    try await sun.save(on: transaction)\n    try await sirius.save(on: transaction)\n}\nreturn .ok\n```\n\n----------------------------------------\n\nTITLE: Validating Request Content - Swift\nDESCRIPTION: This code snippet demonstrates how to validate the content of an incoming request using the `validate(content:)` method. It first validates the content and then attempts to decode it into a `CreateUser` object. This is a standard pattern for validating and processing request data in Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(content: req)\n\nreq.content.decode(CreateUser.self)\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Signer (HS256) in Vapor (Swift)\nDESCRIPTION: This code snippet shows how to configure a JWT signer in a Vapor application using the HS256 (HMAC with SHA-256) algorithm. It accesses the `jwt` property of the `Application` instance and adds an HS256 signer with a secret key. This allows the application to sign and verify JWTs using this algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport JWT\n\n// Voeg HMAC toe met SHA-256 ondertekenaar.\napp.jwt.signers.use(.hs256(key: \"secret\"))\n```\n\n----------------------------------------\n\nTITLE: Validating Request Content\nDESCRIPTION: This snippet demonstrates how to validate the content of a request using the `validate(content:)` static method on a `Validatable` type.  It's used to ensure the request body matches the defined validation rules before further processing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(content: req)\n```\n\n----------------------------------------\n\nTITLE: Switching Application Configuration Based on Environment in Swift\nDESCRIPTION: This code snippet shows how to conditionally configure an application based on the current environment. It uses a switch statement to determine which database configuration to apply depending on whether the application is running in production or another environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .production:\n    app.databases.use(....)\ndefault:\n    app.databases.use(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Enum in Swift\nDESCRIPTION: This code snippet demonstrates how to create a database enum using the `database.enum()` method in Vapor. It defines an enum named \"planet_type\" with three cases: \"smallRocky\", \"gasGiant\", and \"dwarf\". The `create()` method executes the enum creation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// An example of enum creation.\ndatabase.enum(\"planet_type\")\n    .case(\"smallRocky\")\n    .case(\"gasGiant\")\n    .case(\"dwarf\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Add Validation to User Creation\nDESCRIPTION: Adds validation rules to the `User.Create` struct using the `Validatable` protocol.  Enforces non-empty name, valid email format, and password length of at least 8 characters.  Ensures data integrity before persisting the record.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nextension User.Create: Validatable {\n    static func validations(_ validations: inout Validations) {\n        validations.add(\"name\", as: String.self, is: !.empty)\n        validations.add(\"email\", as: String.self, is: .email)\n        validations.add(\"password\", as: String.self, is: .count(8...))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema in Fluent (Swift)\nDESCRIPTION: This code snippet demonstrates how to create a new table schema using Fluent's schema API. It defines an id, a name field of type string, and a star_id field with a foreign key reference to the stars table. It utilizes the schema method to specify the table name and awaits the creation process.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// An example of Fluent's schema API\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Convert EventLoopFuture to Async/Await\nDESCRIPTION: This code snippet demonstrates how to convert an EventLoopFuture to async/await using `.get()`. It allows you to use existing APIs that return EventLoopFuture within an async/await context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nreturn someMethodCallThatReturnsAFuture().flatMap { futureResult in\n    // use futureResult\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResult = try await someMethodThatReturnsAFuture().get()\n```\n\n----------------------------------------\n\nTITLE: Defining Model Schema in Swift\nDESCRIPTION: Demonstrates how to define the `schema` property for a Fluent model. This static property specifies the name of the table or collection to which the model corresponds. The `schema` property should be a string literal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Naam van de tabel of verzameling.\n    static let schema = \"planets\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Future Value with try await (Swift)\nDESCRIPTION: This code snippet demonstrates how to asynchronously wait for the value of a `EventLoopFuture` using `try await future.get()`. It retrieves the string value from a future and prints it. Requires an existing `futureString` of type `EventLoopFuture<String>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n/// Supongamos que recibimos una cadena futura de alguna API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Esperemos a que la cadena esté lista\nlet string: String = try await futureString.get()\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: Configuring Bcrypt Cost\nDESCRIPTION: Configures the cost parameter for Bcrypt password hashing. A higher cost increases security but also increases hashing time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.passwords.use(.bcrypt(cost: 8))\n```\n\n----------------------------------------\n\nTITLE: Add ECDSA Signer with Key - Swift\nDESCRIPTION: This snippet showcases adding an ECDSA signer to a Vapor application with a public key in PEM format. This enables the application to verify JWTs signed with the corresponding private ECDSA key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// 添加带有 SHA-256 的 ECDSA 算法的签名者\ntry app.jwt.signers.use(.es256(key: .public(pem: ecdsaPublicKey)))\n```\n\n----------------------------------------\n\nTITLE: Password Protected Login Route with JWT\nDESCRIPTION: Creates a password-protected login route that returns a signed JWT token upon successful authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator(), User.guardMiddleware())\npasswordProtected.post(\"login\") { req async throws -> ClientTokenResponse in\n    let user = try req.auth.require(User.self)\n    let payload = try SessionToken(with: user)\n    return ClientTokenResponse(token: try await req.jwt.sign(payload))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Multi-Field Unique Constraint (Swift)\nDESCRIPTION: This snippet showcases how to create a unique constraint spanning multiple fields. It ensures that the combination of \"first_name\" and \"last_name\" is unique across all records.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Disallow users with the same full name.\n.unique(on: \"first_name\", \"last_name\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Model with Fields and Initializers Swift\nDESCRIPTION: This code snippet demonstrates how to define a simple Fluent model named `Planet` with a schema, an ID, and a name field. It also includes initializers for creating instances of the model, including an empty initializer required by Fluent and a convenience initializer for setting properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 集合或者表名。\n    static let schema = \"planets\"\n\n    // 行星的唯一标识符\n    @ID(key: .id)\n    var id: UUID?\n\n    // 行星名称。\n    @Field(key: \"name\")\n    var name: String\n\n    // 初始化一个空的行星。\n    init() { }\n\n    // 初始化行星并设置所有属性。\n    init(id: UUID? = nil, name: String) {\n        self.id = id\n        self.name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a SQL Function Default Value (Swift)\nDESCRIPTION: This snippet demonstrates adding an arbitrary SQL function as a default value. The example shows setting the default value of created_at to the current timestamp using the `now()` SQL function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"created_at\", .datetime, .required, .sql(.default(SQLFunction(\"now\"))))\n```\n\n----------------------------------------\n\nTITLE: Defining a Migration\nDESCRIPTION: This snippet defines a migration to create the `galaxies` schema.  The `prepare` function defines the schema with an `id` and a `name` field. The `revert` function deletes the `galaxies` schema.  Migrations ensure the database schema matches the model definitions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nstruct CreateGalaxy: AsyncMigration {\n    // Galaxy モデルを格納するためのデータベースの準備\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"galaxies\")\n            .id()\n            .field(\"name\", .string)\n            .create()\n    }\n\n    // 必要に応じて、prepare メソッドで行った変更を元に戻します\n    func revert(on database: Database) async throws {\n        try await database.schema(\"galaxies\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conforming a Model to Content in Fluent\nDESCRIPTION: This snippet demonstrates how to conform a model to the `Content` protocol.  This is required if you want to be able to directly return a model as the response body for a route. This allows Vapor to automatically encode the model to JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Galaxy: Model, Content {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - String Alphanumeric and Count\nDESCRIPTION: Adds validations to ensure that the `username` field is at least 3 characters long and contains only alphanumeric characters. This combines the `.count` and `.alphanumeric` validators using the `&&` operator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"username\", as: String.self, is: .count(3...) && .alphanumeric)\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Route Handler in Vapor\nDESCRIPTION: This snippet defines a POST route handler in Vapor that attempts to decode a `CreateUser` object from the request's content using `req.content.decode`. It demonstrates the basic structure for handling a POST request and decoding the request body into a Swift struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"users\") { req -> CreateUser in\n    let user = try req.content.decode(CreateUser.self)\n    // Do something with user.\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Gitignore Pattern for Dotenv Files\nDESCRIPTION: This is an example `.gitignore` pattern for ignoring environment-specific dotenv files. This prevents sensitive information from being committed to version control.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_8\n\nLANGUAGE: gitignore\nCODE:\n```\n.env.*\n```\n\n----------------------------------------\n\nTITLE: Handling Optionals with async/await and Abort (Swift)\nDESCRIPTION: Demonstrates how to handle optional values with `async`/`await` and throw an `Abort` error if the value is nil. This is a standard approach for handling optionals in asynchronous code. If the user is found, it proceeds; otherwise, it throws an `Abort` error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = try await User.find(id, on: db) {\n    throw Abort(.notFound)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future Value to Another Future Value\nDESCRIPTION: This code snippet demonstrates how to use the `flatMap` method to transform a future string into a future response using an HTTP client.  It flattens the nested future to avoid `EventLoopFuture<EventLoopFuture<T>>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 返回一个 future 字符串。\nlet futureString: EventLoopFuture<String> = ...\n\n/// 假设我们已经创建了一个 HTTP 客户端。\nlet client: Client = ... \n\n/// 将 future 的字符串映射到 future 的响应。\nlet futureResponse = futureString.flatMap { string in\n    client.get(string) // EventLoopFuture<ClientResponse>\n}\n\n/// 我们现在有一个 future 的回应。\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Adding Default Timestamp Value Using SQL Function (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to use SQLKit's `SQLFunction` within Fluent's schema builder to set a default value for a timestamp field. It configures the \"created_at\" field as a datetime type, required, and uses the SQL \"now\" function to set the default value to the current timestamp when a new record is created.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"created_at\", .datetime, .required, .sql(.default(SQLFunction(\"now\"))))\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Middleware (Swift)\nDESCRIPTION: This snippet demonstrates how to group routes and apply middleware to the group. This is useful for applying common logic, such as authentication or rate limiting, to a set of routes. In this example, `RateLimitMiddleware` and `AuthMiddleware` are applied.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fast-thing\") { req in\n    ...\n}\napp.group(RateLimitMiddleware(requestsPerMinute: 5)) { rateLimited in\n    rateLimited.get(\"slow-thing\") { req in\n        ...\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { ... }\nlet auth = app.grouped(AuthMiddleware())\nauth.get(\"dashboard\") { ... }\nauth.get(\"logout\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Getting Related Models with Reloading in Fluent\nDESCRIPTION: This code demonstrates how to retrieve related models using the `get(reload:on:)` method. The `reload` parameter forces a fresh fetch from the database, bypassing any cached data.  This ensures that you have the latest information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\ntry await sun.$planets.get(reload: true, on: database)\n```\n\n----------------------------------------\n\nTITLE: Sending a Push Notification\nDESCRIPTION: This snippet illustrates sending a push notification using the `req.apns.client.sendAlertNotification` method. It defines a custom Codable struct for the payload, creates an `APNSAlertNotification` with alert details, and sends the notification to a specific device token. Replace placeholder values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// 自定义遵循 `Codable` 协议的 Payload\nstruct Payload: Codable {\n     let acme1: String\n     let acme2: Int\n}\n// 创建推送\nlet dt = \"70075697aa918ebddd64efb165f5b9cb92ce095f1c4c76d995b384c623a258bb\"\nlet payload = Payload(acme1: \"hey\", acme2: 2)\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n// 发送通知\ntry! await req.apns.client.sendAlertNotification(\n    alert, \n    deviceToken: dt, \n    deadline: .distantFuture\n)\n```\n\n----------------------------------------\n\nTITLE: Hashing a password using Bcrypt in Vapor\nDESCRIPTION: This snippet demonstrates how to hash a password using the Bcrypt algorithm in Vapor. It imports the Vapor module and then uses the Bcrypt.hash function to generate a secure hash of the input password. Bcrypt uses a random salt to ensure that hashing the same password multiple times results in different digests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nlet digest = try Bcrypt.hash(\"test\")\n```\n\n----------------------------------------\n\nTITLE: FlatMapping a Future String to a Future Response\nDESCRIPTION: This snippet shows how to use `flatMap` to transform an `EventLoopFuture<String>` into an `EventLoopFuture<ClientResponse>`. It uses the string value as a URL to make an HTTP request using a client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet client: Client = ...\n\nlet futureResponse = futureString.flatMap { string in\n    client.get(string) // EventLoopFuture<ClientResponse>\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Streaming a file as an HTTP response using async/await in Swift\nDESCRIPTION: This snippet demonstrates how to asynchronously stream a file as an HTTP response using Vapor's `req.fileio.streamFile` method with `async/await`. This method wraps the stream in a `Response` and automatically sets the appropriate headers such as `ETag` and `Content-Type`. The file path is given as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Of\n\nlet res = req.fileio.streamFile(at: \"/path/to/file\")\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Configure Postgres Database Connection with TLS\nDESCRIPTION: This Swift code snippet configures the database connection with TLS for Heroku Postgres. It retrieves the database URL from the environment, configures TLS to require an unverified connection, and sets the configuration to the database driver. It uses NIOSSL for secure connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    var tlsConfig: TLSConfiguration = .makeClientConfiguration()\n    tlsConfig.certificateVerification = .none\n    let nioSSLContext = try NIOSSLContext(configuration: tlsConfig)\n\n    var postgresConfig = try SQLPostgresConfiguration(url: databaseURL)\n    postgresConfig.coreConfiguration.tls = .require(nioSSLContext)\n\n    app.databases.use(.postgres(configuration: postgresConfig), as: .psql)\n} else {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Protected Route Group with Authentication (Swift)\nDESCRIPTION: This code snippet shows how to create a protected route group in Vapor that requires user authentication. It applies session middleware, the UserSessionAuthenticator, UserBearerAuthenticator, and User.guardMiddleware to the route group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_38\n\nLANGUAGE: swift\nCODE:\n```\n// 创建需要用户认证的保护路由组。\nlet protected = app.routes.grouped([\n    app.sessions.middleware,\n    UserSessionAuthenticator(),\n    UserBearerAuthenticator(),\n    User.guardMiddleware(),\n])\n\n// 添加 GET /me 路由读取用户邮箱信息\nprotected.get(\"me\") { req -> String in\n    try req.auth.require(User.self).email\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling an AsyncJob - Swift\nDESCRIPTION: This snippet shows how to model an AsyncJob object.  It defines a struct for the job's payload and implements the dequeue and error methods for processing and error handling using async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct EmailJob: AsyncJob {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) async throws {\n        // This is where you would send the email\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) async throws {\n        // If you don't want to handle errors you can simply return. You can also omit this function entirely. \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Extension for Validatable Conformance\nDESCRIPTION: Extends the `CreateUser` struct to conform to the `Validatable` protocol.  This allows validations to be defined for the `CreateUser` type. The `validations(_:)` function is where the validation rules are added using a `Validations` collection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension CreateUser: Validatable {\n    static func validations(_ validations: inout Validations) {\n        // Validations go here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Prefix in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to group routes under a common prefix using both builder and closure syntax. It uses `app.grouped` or `app.group` to create a route group with the prefix \"users\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nlet users = app.grouped(\"users\")\n// GET /users\nusers.get { req in\n    ...\n}\n// POST /users\nusers.post { req in\n    ...\n}\n// GET /users/:id\nusers.get(\":id\") { req in\n    let id = req.parameters.get(\"id\")!\n    ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { req in\n        ...\n    }\n    // POST /users\n    users.post { req in\n        ...\n    }\n    // GET /users/:id\n    users.get(\":id\") { req in\n        let id = req.parameters.get(\"id\")!\n        ...\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { ... }\n    // POST /users\n    users.post { ... }\n\n    users.group(\":id\") { user in\n        // GET /users/:id\n        user.get { ... }\n        // PATCH /users/:id\n        user.patch { ... }\n        // PUT /users/:id\n        user.put { ... }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key with Key Identifier (kid) - Swift\nDESCRIPTION: This code snippet shows how to add an HMAC key to the JWT key collection with a specific key identifier (kid). The `add(hmac:digestAlgorithm:kid:)` method is used, providing the HMAC key, digest algorithm, and the key identifier. The kid can be used to select the appropriate key for signing or verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Add HMAC with SHA-256 key named \"a\".\nawait app.jwt.keys.add(hmac: \"foo\", digestAlgorithm: .sha256, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Setting Parent ID in init Method - Swift\nDESCRIPTION: This code shows how to set the parent ID using the property wrapper's underlying field.  Prefixing the parent property name with '$' allows access to the underlying `@Field` which stores the actual identifier value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nself.$galaxy.id = galaxyID\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Child Relationship in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to define an optional child relationship using the `@OptionalChild` property wrapper in a Fluent model. The `for` parameter specifies a key path to the parent relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Ejemplo de una relación optional child.\n    @OptionalChild(for: \\.$planet)\n    var governor: Governor?\n}\n```\n\n----------------------------------------\n\nTITLE: Using a DTO to Customize API Responses in Swift\nDESCRIPTION: Shows how to use a DTO (`GetUser`) to customize the structure of API responses.  The DTO includes a computed property (`name`) that combines the user's first and last names, demonstrating data transformation before sending the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Structure of GET /users response.\nstruct GetUser: Content {\n    var id: UUID\n    var name: String\n}\n\napp.get(\"users\") { req async throws -> [GetUser] in \n    // Fetch all users from the database.\n    let users = try await User.query(on: req.db).all()\n    return try users.map { user in\n        // Convert each user to GET return type.\n        try GetUser(\n            id: user.requireID(),\n            name: \"\\(user.firstName) \\(user.lastName)\"\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Custom Error Messages\nDESCRIPTION: Illustrates how to add custom error messages to the validation rules. By providing the `customFailureDescription` parameter in the `validations.add` method, the default error message can be overridden with a more descriptive and human-readable message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n\t\"name\",\n\tas: String.self,\n\tis: !.empty,\n\tcustomFailureDescription: \"Provided name is empty!\"\n)\nvalidations.add(\n\t\"username\",\n\tas: String.self,\n\tis: .count(3...) && .alphanumeric,\n\tcustomFailureDescription: \"Provided username is invalid!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to use the `with` method on a query builder to automatically fetch and serialize relationships. The key path to a `@Children` relationship is passed to `with` to load the relationship in all resulting models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_40\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"galaxies\") { req in\n    try await Galaxy.query(on: req.db).with(\\.$stars).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Apple JWT in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to retrieve and verify an Apple JWT from the authorization header within a Vapor route. It uses the `req.jwt.apple.verify()` method to verify the token.  It also demonstrates both synchronous (using `map`) and asynchronous (using `async throws`) versions of route handlers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Haal en verifieer Apple JWT van de autorisatie header.\napp.get(\"apple\") { req -> EventLoopFuture<HTTPStatus> in\n    req.jwt.apple.verify().map { token in\n        print(token) // AppleIdentityToken\n        return .ok\n    }\n}\n\n// Of\n\napp.get(\"apple\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.apple.verify()\n    print(token) // AppleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionAuthenticator in Swift\nDESCRIPTION: Implements a `SessionAuthenticator` that authenticates a user based on the session ID. In this example, it creates a `User` instance directly from the session ID. In a real-world scenario, you would likely fetch the user from a database or API.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserSessionAuthenticator: SessionAuthenticator {\n    typealias User = App.User\n    func authenticate(sessionID: String, for request: Request) -> EventLoopFuture<Void> {\n        let user = User(email: sessionID)\n        request.auth.login(user)\n        return request.eventLoop.makeSucceededFuture(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Token Model in Swift\nDESCRIPTION: This code snippet defines a UserToken model with fields for ID, value (the token string), and a parent relationship to the User model. It includes an initializer for creating new tokens.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nfinal class UserToken: Model, Content {\n    static let schema = \"user_tokens\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"value\")\n    var value: String\n\n    @Parent(key: \"user_id\")\n    var user: User\n\n    init() { }\n\n    init(id: UUID? = nil, value: String, userID: User.IDValue) {\n        self.id = id\n        self.value = value\n        self.$user.id = userID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ECDSA Key to Keychain in Swift\nDESCRIPTION: This snippet shows how to add an ECDSA key (either generated or loaded from PEM) to the JWT key chain in Vapor. This allows the application to use the key for signing and verifying JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(ecdsa: key)\n```\n\n----------------------------------------\n\nTITLE: Content afterDecode Hook in Swift\nDESCRIPTION: This code snippet shows the `afterDecode` function that can be implemented on a `Content` type. It demonstrates trimming whitespace and preventing empty names after decoding. `afterDecode` allows custom validation and modification of the decoded data. `mutating` is only needed for structs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Runs after this Content is decoded. `mutating` is only required for structs, not classes.\nmutating func afterDecode() throws {\n    // Name may not be passed in, but if it is, then it can't be an empty string.\n    self.name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines)\n    if let name = self.name, name.isEmpty {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing .env Variables (Swift)\nDESCRIPTION: Shows how to access environment variables loaded from a `.env` file using `Environment.get(_:)`. The variables from the `.env` file are accessed just like regular process environment variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Using FileMiddleware in Vapor\nDESCRIPTION: This code shows how to use the `FileMiddleware` to serve static files from the `Public` directory of a Vapor project.  It initializes the middleware with the public directory path and registers it with the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet file = FileMiddleware(publicDirectory: app.directory.publicDirectory)\napp.middleware.use(file)\n```\n\n----------------------------------------\n\nTITLE: Example .env File Content\nDESCRIPTION: This is an example of a `.env` file, which contains key-value pairs representing environment variables. Vapor automatically loads these variables into the environment when the application starts, making them accessible via `Environment.get()` or `Environment.process`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nFOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Decoding URL Query Parameters in Vapor\nDESCRIPTION: Decodes URL query parameters into a `Hello` struct using `req.query.decode(Hello.self)`. The route handler then constructs a greeting using the decoded `name` parameter, defaulting to \"Anonymous\" if the parameter is not present. This shows how to access query parameters via a `Content` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    let hello = try req.query.decode(Hello.self)\n    return \"Hello, \\(hello.name ?? \\\"Anonymous\\\")\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Delay - Swift\nDESCRIPTION: This snippet shows how to specify a delay for a job using the delayUntil parameter in the dispatch method, which accepts a Date object. The job will only run after this date has passed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // One day\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3,\n        delayUntil: futureDate)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Structure with Codable\nDESCRIPTION: Defines a `Greeting` struct conforming to the `Content` protocol. This struct automatically conforms to `Codable` and provides additional utilities for working with Vapor's content API. It is used to decode JSON data with a \"hello\" key from an HTTP request body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Greeting: Content {\n    var hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Verification\nDESCRIPTION: This snippet demonstrates asynchronous password verification using `req.password.async.verify`. This prevents blocking the event loop.  The result is a future containing a boolean value representing the outcome of the verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nreq.password.async.verify(\"vapor\", created: digest).map { bool in\n    // Handle result.\n}\n\n// or\n\nlet result = try await req.password.async.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with `with` (Swift)\nDESCRIPTION: This Swift code demonstrates eager loading of the `stars` relationship when querying for `Galaxy` models. The `with(\\$stars)` method automatically fetches and serializes the related stars for each galaxy.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"galaxies\") { req in\n    try await Galaxy.query(on: req.db).with(\\$stars).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Authenticators for different User types in Swift\nDESCRIPTION: This snippet demonstrates combining authenticators for different user types (`Admin` and `User`). It adds both `AdminAuthenticator` and `UserAuthenticator` to a route group, then checks in the route handler if either an `Admin` or a `User` is authenticated.  If neither is authenticated, an error is thrown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.grouped(AdminAuthenticator())\n    .grouped(UserAuthenticator())\n    .get(\"secure\") \n{ req in\n    guard req.auth.has(Admin.self) || req.auth.has(User.self) else {\n        throw Abort(.unauthorized)\n    }\n    // 处理其它操作。\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model ID Swift\nDESCRIPTION: This code demonstrates how to define the `id` property for a Fluent model using the `@ID` property wrapper. The `id` property is the unique identifier for each instance of the model. By default, it uses the special `.id` key, and is of type `UUID?`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 该行星的唯一标识符。\n    @ID(key: .id)\n    var id: UUID?\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request with Content Encoding and Headers\nDESCRIPTION: Illustrates how to make a POST request, encode query parameters and JSON content, and add an authentication header using the `beforeSend` closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.it.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet response = try await req.client.post(\"https://httpbin.org/status/200\") { req in\n\t// Codifica la stringa di query all'URL della richiesta.\n\ttry req.query.encode([\"q\": \"test\"])\n\n\t// Codifica il JSON per il corpo della richiesta.\n    try req.content.encode([\"hello\": \"world\"])\n    \n    // Aggiungi l'header di autenticazione alla richiesta\n    let auth = BasicAuthorization(username: \"something\", password: \"somethingelse\")\n    req.headers.basicAuthorization = auth\n}\n// Gestisci la risposta.\n```\n\n----------------------------------------\n\nTITLE: Async Hashing a Password\nDESCRIPTION: This snippet shows how to asynchronously hash a password using the `async` property on a password hasher. It is intended for use within a request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nreq.password.async.hash(\"vapor\").map { digest in\n    // Verwerking afhandelen.\n}\n\n// of\n\nlet digest = try await req.password.async.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job from a Route Handler in Vapor\nDESCRIPTION: This code snippet shows how to dispatch a job from within a route handler in a Vapor application. It uses the `req.queue.dispatch()` method to enqueue the `EmailJob` with a specific payload. Both `EventLoopFuture` and `async/await` versions are provided.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\")\n        ).map { \"done\" }\n}\n\n// or\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"))\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Models in Transaction Swift\nDESCRIPTION: This example demonstrates saving two `Star` models, `sun` and `sirius`, within a transaction. Both models must save successfully for the transaction to commit; otherwise, neither will be saved. The database object is obtained through the closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar sun: Star = ...\nvar sirius: Star = ...\n\nreturn req.db.transaction { database in\n    return sun.save(on: database).flatMap { _ in\n        return sirius.save(on: database)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with FileMiddleware in Vapor\nDESCRIPTION: Registers `FileMiddleware` to serve static files from the project's Public directory.  This middleware is used to serve files like CSS, images, and JavaScript.  `app.directory.publicDirectory` specifies where static assets are located.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet file = FileMiddleware(publicDirectory: app.directory.publicDirectory)\napp.middleware.use(file)\n```\n\n----------------------------------------\n\nTITLE: Adding Email Validation\nDESCRIPTION: Adds a validation rule to check if the `email` property is a valid email address. It specifies the key (email), the expected type (String), and the email validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\"email\", as: String.self, is: .email)\n```\n\n----------------------------------------\n\nTITLE: Adding Default Identifier Field (Swift)\nDESCRIPTION: This snippet demonstrates adding a field for default identifier using `.id()` helper method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Adds field for default identifier.\n.id()\n```\n\n----------------------------------------\n\nTITLE: Decoding Content from Request\nDESCRIPTION: Decodes content from an incoming HTTP request using `req.content.decode`. The `decode` method uses the request's content type to find a suitable decoder and decodes the content into the specified `Greeting` struct.  If no decoder is found or the content-type header is missing, a 415 error will be thrown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"greeting\") { req in \n    let greeting = try req.content.decode(Greeting.self)\n    print(greeting.hello) // \"world\"\n    return HTTPStatus.ok\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Planet and Star Models in Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to join the Planet and Star models in a Fluent query. It fetches all planets with a star named 'Sun'. It uses the `join` method to relate the models based on the star's ID, and filters based on the star's name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches all planets with a star named Sun.\nPlanet.query(on: database)\n    .join(Star.self, on: \\Planet.$star.$id == \\Star.$id)\n    .filter(Star.self, \\.$name == \"Sun\")\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Changing a Future's Event Loop with hop in Swift\nDESCRIPTION: This code illustrates how to change the event loop a future is associated with using the `hop(to:)` method. This is useful when you need to ensure that a future's completion handler is executed on a specific event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nfutureString.hop(to: otherEventLoop)\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to a Schema (Swift)\nDESCRIPTION: This snippet demonstrates adding a new field to the schema. The field is named \"name\" and is configured to be a required string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Adds a new field\n.field(\"name\", .string, .required)\n```\n\n----------------------------------------\n\nTITLE: Registering a Vapor Controller\nDESCRIPTION: This code snippet shows how to register a controller within the `routes.swift` file. It uses the `app.register(collection:)` method to register an instance of the `TodosController`, making its routes available within the Vapor application. This step is crucial for the controller's methods to be accessible via HTTP requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.register(collection: TodosController())\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing with Async/Await\nDESCRIPTION: Hashes a password asynchronously using the `req.password.async.hash()` method in combination with `async/await`. This provides a more synchronous-like way to handle the asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try await req.password.async.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Sending APNS Push Notifications with Custom Payload\nDESCRIPTION: This snippet illustrates how to send an APNS push notification with a custom payload using Vapor. It defines a custom Codable struct for the payload, creates an APNSAlertNotification, and then sends the notification to a specific device token. It requires a device token and an APNS client configured.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Aangepaste codeerbare lading\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: Int\n}\n// Maak een pushmeldingswaarschuwing\nlet dt = \"70075697aa918ebddd64efb165f5b9cb92ce095f1c4c76d995b384c623a258bb\"\nlet payload = Payload(acme1: \"hey\", acme2: 2)\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n// Verzend de melding\ntry! await req.apns.client.sendAlertNotification(\n    alert,\n    deviceToken: dt,\n    deadline: .distantFuture\n)\n```\n\n----------------------------------------\n\nTITLE: Example .env File Content\nDESCRIPTION: This code snippet shows the basic structure of a `.env` file, containing key-value pairs that represent environment variables.  These variables can then be accessed by the Vapor application at runtime.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nFOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Convert Async/Await to EventLoopFuture\nDESCRIPTION: This code snippet demonstrates how to convert an async/await function call to an EventLoopFuture. This might be useful when integrating with code that expects EventLoopFuture.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet myString = try await someAsyncFunctionThatGetsAString()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = request.eventLoop.makePromise(of: String.self)\npromise.completeWithTask {\n    try await someAsyncFunctionThatGetsAString()\n}\nlet futureString: EventLoopFuture<String> = promise.futureResult\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships with with() in Swift\nDESCRIPTION: This example illustrates eager loading of a relationship using the `with` method. It preloads the `star` relationship when querying for planets. This allows synchronous access to the `star` property without needing to call `get` first. The `database` parameter specifies the database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\n// Ejemplo de eager loading.\nPlanet.query(on: database).with(\\.$star).all().map { planets in\n    for planet in planets {\n        // `star` es accesible de manera sincrónica aquí \n        // dado que ha sido precargada.\n        print(planet.star.name)\n    }\n}\n\n// O\n\nlet planets = try await Planet.query(on: database).with(\\.$star).all()\nfor planet in planets {\n    // `star` es accesible de manera sincrónica aquí \n    // dado que ha sido precargada.\n    print(planet.star.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Protect routes with authentication middleware\nDESCRIPTION: This snippet demonstrates how to protect a subset of routes with authentication middleware, allowing unauthenticated access to some routes (like login) while requiring authentication for others.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { ... }\nlet auth = app.grouped(AuthMiddleware())\nauth.get(\"dashboard\") { ... }\nauth.get(\"logout\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship (Star Model)\nDESCRIPTION: This code defines a `Star` model with a one-to-many relationship to the `Galaxy` model. The `@Parent` property wrapper is used to define the relationship through the `galaxy_id` foreign key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Star: Model, Content {\n    // 表或集合名。\n    static let schema = \"stars\"\n\n    // Star 唯一标识符。\n    @ID(key: .id)\n    var id: UUID?\n\n    // Star 名称\n    @Field(key: \"name\")\n    var name: String\n\n    // 引用这颗恒星所在的星系。\n    @Parent(key: \"galaxy_id\")\n    var galaxy: Galaxy\n\n    // 创建一个空的 Star。\n    init() { }\n\n    // 创建一个新的 Star，设置所有属性。\n    init(id: UUID? = nil, name: String, galaxyID: UUID) {\n        self.id = id\n        self.name = name\n        self.$galaxy.id = galaxyID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Vapor (Swift)\nDESCRIPTION: Demonstrates how to register middleware globally, applying it to every route in the application. The `app.middleware.use()` method adds the specified middleware to the processing pipeline for all requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(MyMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key to JWT Key Collection in Swift\nDESCRIPTION: This snippet shows how to add an HMAC key with SHA-256 as the digest algorithm to the JWT key collection in your Vapor application's `configure.swift` file. It uses a secret key to be stored securely.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport JWT\n\n// Add HMAC with SHA-256 signer.\nawait app.jwt.keys.add(hmac: \"secret\", digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: DTO for Custom API response Swift\nDESCRIPTION: This code demonstrates how to use a Data Transfer Object (DTO) to customize the format of an API response. This is useful for adding computed fields or modifying the structure of the response without changing the underlying model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// GET 请求响应结构 /users。\nstruct GetUser: Content {\n    var id: UUID\n    var name: String\n}\n\napp.get(\"users\") { req async throws -> [GetUser] in \n    // 从数据库获取所有用户。\n    let users = try await User.query(on: req.db).all()\n    return try users.map { user in\n        // 将每个用户转换为 GET 返回类型。\n        try GetUser(\n            id: user.requireID(),\n            name: \"\\(user.firstName) \\(user.lastName)\"\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User with EventLoopFuture vs Async/Await\nDESCRIPTION: This code snippet demonstrates fetching a user and updating its last accessed time using both EventLoopFuture and async/await in Vapor. It showcases the simplified syntax of async/await compared to the more verbose EventLoopFuture approach.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n/// EventLoopFuture\nroutes.get(\"firstUser\") { req -> EventLoopFuture<String> in\n    User.query(on: req.db).first().unwrap(or: Abort(.notFound)).flatMap { user in\n        user.lastAccessed = Date()\n        return user.update(on: req.db).map {\n            return user.name\n        }\n    }\n}\n\n/// Async/Await\nroutes.get(\"firstUser\") { req async throws -> String in\n    guard let user = try await User.query(on: req.db).first() else {\n        throw Abort(.notFound)\n    }\n    user.lastAccessed = Date()\n    try await user.update(on: req.db)\n    return user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs to a Specific Queue in Swift\nDESCRIPTION: This code snippet demonstrates how to dispatch a job to a specific queue, `emails`, using the `queues()` method. It shows both the `EventLoopFuture` and `async/await` approaches for dispatching the job with a delay and retry count.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // Un día\n    return req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        ).map { \"done\" }\n}\n\n// o\n\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // Un día\n    try await req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        )\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password\nDESCRIPTION: This snippet demonstrates how to hash a password using the `password` helper on a `Request` object.  It throws an error if hashing fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet digest = try req.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Conforming to AbortError for Custom Errors (Swift)\nDESCRIPTION: Explains how to conform custom errors to the `AbortError` protocol to customize the HTTP response status and reason. This allows specific error types to map to appropriate HTTP error codes and messages. The example defines a custom error `MyError` and provides implementations for the `reason` and `status` properties of the `AbortError` protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nenum MyError {\n    case userNotLoggedIn\n    case invalidEmail(String)\n}\n\nextension MyError: AbortError {\n    var reason: String {\n        switch self {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var status: HTTPStatus {\n        switch self {\n        case .userNotLoggedIn:\n            return .unauthorized\n        case .invalidEmail:\n            return .badRequest\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RSA Key to JWT Key Collection - Swift\nDESCRIPTION: This code snippet demonstrates how to add an RSA key to the JWT key collection in a Vapor application using Swift. It utilizes the `app.jwt.keys.add` method, specifying the `rsa` parameter for the key and the `digestAlgorithm` as `.sha256`. This makes the key available for signing and verifying JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(rsa: key, digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Using Environment to configure databases in Vapor - Swift\nDESCRIPTION: This code snippet shows how to use the `app.environment` property to configure databases differently based on the current environment.  It checks if the current environment is production and uses a specific configuration accordingly. A default configuration is used if it is not production.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nswitch app.environment {\ncase .production:\n    app.databases.use(....)\ndefault:\n    app.databases.use(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Blocking Code on a Background Thread in Vapor\nDESCRIPTION: This code demonstrates how to execute a blocking operation (in this case, `sleep(5)`) on a background thread using Vapor's `threadPool`.  `req.application.threadPool.runIfActive(eventLoop: req.eventLoop)` dispatches the closure to a thread in the thread pool. When the blocking operation completes, the closure returns a value that's wrapped in an `EventLoopFuture`, ensuring that the result is handled asynchronously on the event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<String> in\n    /// Stuur wat werk door naar een achtergrond thread\n    return req.application.threadPool.runIfActive(eventLoop: req.eventLoop) {\n        /// Zet de achtergrond thread in slaap\n        /// Dit zal geen invloed hebben op de event loops\n        sleep(5)\n        \n        /// Als het \"blokkeringswerk\" klaar is,\n        /// geef het resultaat terug.\n        return \"Hello world!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Todos Controller in Vapor\nDESCRIPTION: This code defines a `TodosController` struct that conforms to the `RouteCollection` protocol. It includes methods for handling CRUD operations (index, create, show, update, delete) on Todo objects, using Vapor's routing and database features. The controller methods handle request input, database queries, and response generation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct TodosController: RouteCollection {\n    func boot(routes: RoutesBuilder) throws {\n        let todos = routes.grouped(\"todos\")\n        todos.get(use: index)\n        todos.post(use: create)\n\n        todos.group(\":id\") { todo in\n            todo.get(use: show)\n            todo.put(use: update)\n            todo.delete(use: delete)\n        }\n    }\n\n    func index(req: Request) async throws -> [Todo] {\n        try await Todo.query(on: req.db).all()\n    }\n\n    func create(req: Request) async throws -> Todo {\n        let todo = try req.content.decode(Todo.self)\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func show(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        return todo\n    }\n\n    func update(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        let updatedTodo = try req.content.decode(Todo.self)\n        todo.title = updatedTodo.title\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func delete(req: Request) async throws -> HTTPStatus {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        try await todo.delete(on: req.db)\n        return .ok\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Planets with Filters and Sorting in Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to use Fluent's query API to fetch planets from a database, filter them based on their type (gas giant), sort them by name, and include related star data. The query is executed asynchronously using `try await` and requires a database connection (`database`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// An example of Fluent's query API.\nlet planets = try await Planet.query(on: database)\n    .filter(\\.$type == .gasGiant)\n    .sort(\\.$name)\n    .with(\\.$star)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Leaf Template\nDESCRIPTION: Demonstrates how to pass data to a Leaf template using an `Encodable` struct in Swift. `[String: Any]` is not supported.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct WelcomeContext: Encodable {\n    var title: String\n    var numbers: [Int]\n}\nreturn req.view.render(\"home\", WelcomeContext(title: \"Hello!\", numbers: [42, 9001]))\n```\n\n----------------------------------------\n\nTITLE: Signing a JWT Payload in Swift\nDESCRIPTION: This snippet demonstrates how to sign a JWT payload using the `jwt.sign` method within a Vapor route handler.  It creates a `TestPayload` instance, then signs it using the `req.jwt.sign` function and returns the signed token in a JSON response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { req async throws -> [String: String] in\n    let payload = TestPayload(\n        subject: \"vapor\",\n        expiration: .init(value: .distantFuture),\n        isAdmin: true\n    )\n    return try await [\"token\": req.jwt.sign(payload)]\n}\n```\n\n----------------------------------------\n\nTITLE: Create UserToken Migration\nDESCRIPTION: Creates a Fluent migration for the `UserToken` model.  Sets up the database schema with fields for `id`, `value`, and `user_id`, including a unique constraint on `value` and a foreign key reference to the `users` table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\nextension UserToken {\n    struct Migration: AsyncMigration {\n        var name: String { \"CreateUserToken\" }\n        \n        func prepare(on database: Database) async throws {\n            try await database.schema(\"user_tokens\")\n                .id()\n                .field(\"value\", .string, .required)\n                .field(\"user_id\", .uuid, .required, .references(\"users\", \"id\"))\n                .unique(on: \"value\")\n                .create()\n        }\n\n        func revert(on database: Database) async throws {\n            try await database.schema(\"user_tokens\").delete()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Field Swift\nDESCRIPTION: This snippet shows how to add a new field to a schema. It adds a field named \"name\" of type String and marks it as required.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"name\", .string, .required)\n```\n\n----------------------------------------\n\nTITLE: Joining Tables in Swift\nDESCRIPTION: Shows how to join related models into a query using the `join(_:on:)` method. Includes filtering and sorting on the joined table. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database)\n    .join(Star.self, on: \\Planet.$star.$id == \\Star.$id)\n    .filter(Star.self, \\.$name == \"Sun\")\n    .all()\n```\n\nLANGUAGE: swift\nCODE:\n```\n.sort(Star.self, \\.$name)\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password with Bcrypt in Vapor\nDESCRIPTION: This snippet shows how to hash a password using Bcrypt in Vapor. Bcrypt uses a random salt to ensure that hashing the same password multiple times produces different digests. It requires importing the Vapor framework.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.it.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = try Bcrypt.hash(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Data in Leaf Templates\nDESCRIPTION: This snippet demonstrates how to access data passed from a Swift context within a Leaf template. It shows how to display the title and iterate through a list of numbers using the `#for` tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_4\n\nLANGUAGE: leaf\nCODE:\n```\n<h1>#(title)</h1>\n#for(number in numbers):\n    <p>#(number)</p>\n#endfor\n```\n\n----------------------------------------\n\nTITLE: Adding JobEventDelegate to Vapor App in Swift\nDESCRIPTION: This code snippet demonstrates how to add the implemented `JobEventDelegate` to a Vapor application. The `app.queues.add()` method is used to register an instance of `MyEventDelegate`, enabling it to receive job event notifications. This step is crucial for activating the delegate and allowing it to monitor job processing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.add(MyEventDelegate())\n```\n\n----------------------------------------\n\nTITLE: Defining a TodosController in Swift\nDESCRIPTION: This code snippet defines a `TodosController` struct that conforms to the `RouteCollection` protocol. It includes methods for handling various CRUD operations on a `Todo` model, such as `index` (get all), `create` (post), `show` (get by id), `update` (put), and `delete`.  It uses Vapor's routing capabilities to group and associate these methods with specific routes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// [TodosController.swift]\n\nimport Vapor\n\nstruct TodosController: RouteCollection {\n    func boot(routes: RoutesBuilder) throws {\n        let todos = routes.grouped(\"todos\")\n        todos.get(use: index)\n        todos.post(use: create)\n\n        todos.group(\":id\") { todo in\n            todo.get(use: show)\n            todo.put(use: update)\n            todo.delete(use: delete)\n        }\n    }\n\n    func index(req: Request) async throws -> [Todo] {\n        try await Todo.query(on: req.db).all()\n    }\n\n    func create(req: Request) async throws -> Todo {\n        let todo = try req.content.decode(Todo.self)\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func show(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        return todo\n    }\n\n    func update(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        let updatedTodo = try req.content.decode(Todo.self)\n        todo.title = updatedTodo.title\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func delete(req: Request) async throws -> HTTPStatus {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        try await todo.delete(on: req.db)\n        return .ok\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Response Content with Vapor\nDESCRIPTION: Explains how to decode the response body using Vapor's `Content` API, mapping the JSON response to a custom Swift struct/class.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.it.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/json\")\nlet json = try response.content.decode(MyJSONResponse.self)\n```\n\n----------------------------------------\n\nTITLE: Detecting Environment in Entrypoint (Swift)\nDESCRIPTION: This code shows the default way the Vapor application determines the current environment. It uses `Environment.detect()` which parses command-line arguments, specifically looking for `--env` to determine the environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@main\nenum Entrypoint {\n    static func main() async throws {\n        var env = try Environment.detect()\n        try LoggingSystem.bootstrap(from: &env)\n        \n        let app = Application(env)\n        defer { app.shutdown() }\n        \n        try await configure(app)\n        try await app.runFromAsyncMainEntrypoint()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job from a Command\nDESCRIPTION: Dispatches a job to the queue from a Vapor Command. This shows how to send a job for asynchronous processing when a `Request` object is not available, using the `application.queues.queue.dispatch` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\")\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Migration with Foreign Key in Swift\nDESCRIPTION: This snippet shows how to create a migration to prepare the database for storing the child model. It includes defining a field for the parent's identifier, specifying a foreign key constraint that references the parent model's table and identifier column.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateStar: AsyncMigration {\n    // 为存储 Star 模型准备数据库。\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"stars\")\n            .id()\n            .field(\"name\", .string)\n            .field(\"galaxy_id\", .uuid, .references(\"galaxies\", \"id\"))\n            .create()\n    }\n\n    // 可选地恢复 prepare 方法中所做的更改。\n    func revert(on database: Database) async throws {\n        try await database.schema(\"stars\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Content and Headers (Swift)\nDESCRIPTION: Illustrates how to encode query parameters and JSON into a request, and add authentication headers using the `beforeSend` closure.  This allows customizing the request before it is sent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.post(\"https://httpbin.org/status/200\") { req in\n\t// リクエストURLにクエリ文字列をエンコードします。\n\ttry req.query.encode([\"q\": \"test\"])\n\n\t// JSONをリクエストボディにエンコードします。\n    try req.content.encode([\"hello\": \"world\"])\n    \n\t// リクエストに認証ヘッダーを追加します。\n    let auth = BasicAuthorization(username: \"something\", password: \"somethingelse\")\n    req.headers.basicAuthorization = auth\n}\n//レスポンスを扱う\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This code shows two ways to access environment variables in Vapor using the `Environment` API. One way is using the static `get` method, and the other uses dynamic member lookup via the `process` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.process.FOO\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Manually Log In User in Vapor (Swift)\nDESCRIPTION: This code shows how to manually log in a user in Vapor using req.auth.login(_:). Any Authenticatable user can be passed to this method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nreq.auth.login(User(name: \"Vapor\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint to Field (Swift)\nDESCRIPTION: This snippet adds a foreign key constraint directly to a field during schema creation or update in Fluent. The code requires that the value in the `star_id` column of the current table must exist as a value in the `id` column of the `stars` table. This constraint enforces referential integrity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Decoding Content from a Request in Swift\nDESCRIPTION: This code snippet demonstrates how to decode the `Greeting` struct from an incoming HTTP request using `req.content.decode`. The decoded `greeting.hello` value is then printed. It leverages the request's content type to automatically choose the appropriate decoder, raising a 415 error if no suitable decoder is found.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"greeting\") { req in \n    let greeting = try req.content.decode(Greeting.self)\n    print(greeting.hello) // \"world\"\n    return HTTPStatus.ok\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with Fluent in Swift\nDESCRIPTION: This example shows how to select only specific fields from the database using the `field(_:)` method on a Fluent query builder. It selects only the id and name fields of the Planet model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\n// Solo selecciona los campos id y nombre del planeta\nPlanet.query(on: database)\n    .field(\\.$id).field(\\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Automatically Running Migrations Programmatically - Swift\nDESCRIPTION: This code snippet shows how to automatically run migrations programmatically within a Vapor application.  `app.autoMigrate()` is called, and `wait()` is used to block until the migrations are complete. The asynchronous version can also be used with `await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ntry app.autoMigrate().wait()\n\n// or\ntry await app.autoMigrate()\n```\n\n----------------------------------------\n\nTITLE: Register Global Middleware in Vapor\nDESCRIPTION: Registers middleware globally for every route in the Vapor application using the `app.middleware.use` method within the `configure(_:)` function. This ensures that the specified middleware is executed for all incoming requests and outgoing responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(MyMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Middleware in Vapor\nDESCRIPTION: Creates an asynchronous middleware to ensure that only admin users can access a route. It makes use of the `AsyncMiddleware` protocol and the `async`/`await` keywords. If the user is not an admin, an `Abort(.unauthorized)` error is thrown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            throw Abort(.unauthorized)\n        }\n        return try await next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a custom JWT payload struct\nDESCRIPTION: This snippet defines a custom struct `TestPayload` that conforms to the `JWTPayload` protocol. It includes properties for subject, expiration, and admin status. CodingKeys are used to map Swift property names to shorter JWT claim names. It also includes a `verify` method to implement additional validation logic, such as checking the expiration time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// JWT payload structure.\nstruct TestPayload: JWTPayload {\n    // Weist die längeren Swift-Eigenschaftsnamen den\n    // kürzeren Schlüsseln im JWT-Payload zu.\n    enum CodingKeys: String, CodingKey {\n        case subject = \"sub\"\n        case expiration = \"exp\"\n        case isAdmin = \"admin\"\n    }\n\n    // Das \"sub\" (Subject) Claim identifiziert die Entität, die\n    // Gegenstand des JWT ist.\n    var subject: SubjectClaim\n\n    // Das \"exp\" (Ablaufzeit) Claim identifiziert den Zeitpunkt, nach dem\n    // das JWT nicht mehr akzeptiert werden darf.\n    var expiration: ExpirationClaim\n\n    // Benutzerdefinierte Daten.\n    // Wenn wahr, ist der Benutzer ein Admin.\n    var isAdmin: Bool\n\n    // Führe hier zusätzliche Überprüfungslogik aus,\n    // die über die Signaturüberprüfung hinausgeht.\n    // Da wir ein ExpirationClaim haben, werden wir\n    // die verify-Methode aufrufen.\n    func verify(using algorithm: some JWTAlgorithm) async throws {\n        try self.expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variable after loading .env\nDESCRIPTION: Demonstrates how to retrieve a variable defined in a .env file. After the .env file is processed, its key-value pairs can be accessed as environment variables within the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Fetching a Relation's Value with get(on:)\nDESCRIPTION: This snippet demonstrates how to fetch the value of a relation using the `get(on:)` method. It retrieves all planets associated with a sun and prints them. The `database` parameter specifies the database connection to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches all of the sun's planets.\nsun.$planets.get(on: database).map { planets in\n    print(planets)\n}\n\n// Or\n\nlet planets = try await sun.$planets.get(on: database)\nprint(planets)\n```\n\n----------------------------------------\n\nTITLE: Running Blocking Code in the Background\nDESCRIPTION: This code snippet demonstrates how to execute blocking code in a background thread using `threadPool.runIfActive` to avoid blocking the event loop.  The result is then passed back to the event loop via a Future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<String> in\n    /// 在后台线程上分派一些工作\n    return req.application.threadPool.runIfActive(eventLoop: req.eventLoop) {\n        /// 使后台线程进入休眠状态\n        /// 这不会影响任何事件循环\n        sleep(5)\n        \n        /// 当“阻塞工作”完成后，\n        /// 返回结果.\n        return \"Hello world!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Middleware (Swift)\nDESCRIPTION: Demonstrates grouping routes with middleware.  The middleware will be applied to all routes within the group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fast-thing\") { req in\n    ...\n}\napp.group(RateLimitMiddleware(requestsPerMinute: 5)) { rateLimited in\n    rateLimited.get(\"slow-thing\") { req in\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in Swift\nDESCRIPTION: Demonstrates creating a new `Planet` instance and then using the `create(on:)` method to save it to the database. This explicitly creates a new entry.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet planet = Planet(name: \"Earth\")\nplanet.create(on: database)\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashing in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure the application's password hashing functionality using `app.passwords.use(...)`. This is a necessary step before using any of the password hashing APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\napp.passwords.use(...)\n```\n\n----------------------------------------\n\nTITLE: Defining an Authenticatable User Model in Swift\nDESCRIPTION: This code defines a simple `User` struct conforming to the `Authenticatable` protocol. This struct represents a user with a single property, `name`. The `Authenticatable` protocol is required to use Vapor's authentication APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct User: Authenticatable {\n    var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Models in a Transaction in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to save multiple models (`sun` and `sirius`) within a single transaction. It uses `flatMap` to chain the save operations, ensuring that `sirius` is saved only after `sun` has been saved successfully. If any of the `save` operations fail, the entire transaction will be rolled back, preventing partial data insertion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar sun: Star = ...\nvar sirius: Star = ...\n\nreturn req.db.transaction { database in\n    return sun.save(on: database).flatMap { _ in\n        return sirius.save(on: database)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queues with Redis Driver - Swift\nDESCRIPTION: This snippet shows how to configure Vapor Queues to use the Redis driver within your `configure.swift` file. It utilizes the `QueuesRedisDriver` to establish a connection to a Redis server, specifying the connection URL. This step is essential for initializing the queue system with Redis as the underlying storage.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport QueuesRedisDriver\n\ntry app.queues.use(.redis(url: \"redis://127.0.0.1:6379\"))\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Encoding/Decoding for a Model in Swift\nDESCRIPTION: Extends the `Planet` model to conform to the `Content` protocol, enabling automatic encoding and decoding for use in Vapor's content API.  A simple GET route is defined to return all planets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension Planet: Content { }\n\napp.get(\"planets\") { req async throws in \n    // Return an array of all planets.\n    try await Planet.query(on: req.db).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Token Migration in Swift\nDESCRIPTION: This code snippet demonstrates how to create a Fluent migration for the UserToken model. It creates the user_tokens schema with fields for id, value (as a unique string), and a user_id that references the users table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\nextension UserToken {\n    struct Migration: AsyncMigration {\n        var name: String { \"CreateUserToken\" }\n        \n        func prepare(on database: Database) async throws {\n            try await database.schema(\"user_tokens\")\n                .id()\n                .field(\"value\", .string, .required)\n                .field(\"user_id\", .uuid, .required, .references(\"users\", \"id\"))\n                .unique(on: \"value\")\n                .create()\n        }\n\n        func revert(on database: Database) async throws {\n            try await database.schema(\"user_tokens\").delete()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Authenticator with Database Specification\nDESCRIPTION: Creates a `SessionAuthenticator` for the user model, specifying `.sqlite` as the database to be used for resolving the user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_42\n\nLANGUAGE: swift\nCODE:\n```\nUser.sessionAuthenticator(.sqlite)\n```\n\n----------------------------------------\n\nTITLE: Signing a JWT Payload (Swift)\nDESCRIPTION: This snippet demonstrates how to sign a JWT payload using the `req.jwt.sign` method within a Vapor route handler.  It creates an instance of the custom `TestPayload` and uses the request's JWT signer to generate a signed JWT string.  The token is then returned in the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { req async throws -> [String: String] in\n    let payload = TestPayload(\n        subject: \"vapor\",\n        expiration: .init(value: .distantFuture),\n        isAdmin: true\n    )\n    return try await [\"token\": req.jwt.sign(payload)]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UserToken Migration in Swift\nDESCRIPTION: Creates a Fluent migration for the `UserToken` model. This migration defines the schema for the `user_tokens` table, including an ID, a unique string value, and a foreign key reference to the `users` table. The `value` field is set as unique.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\nextension UserToken {\n    struct Migration: AsyncMigration {\n        var name: String { \"CreateUserToken\" }\n        \n        func prepare(on database: Database) async throws {\n            try await database.schema(\"user_tokens\")\n                .id()\n                .field(\"value\", .string, .required)\n                .field(\"user_id\", .uuid, .required, .references(\"users\", \"id\"))\n                .unique(on: \"value\")\n                .create()\n        }\n\n        func revert(on database: Database) async throws {\n            try await database.schema(\"user_tokens\").delete()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Statements\nDESCRIPTION: Demonstrates how to use conditional statements (`#if`, `#else`) in Leaf templates. It covers basic comparisons and the use of expressions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\n#if(1 + 1 == 2):\n    Hello!\n#endif\n\n#if(index % 2 == 0):\n    This is even index.\n#else:\n    This is odd index.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Enum Value Check\nDESCRIPTION: Adds a validation to ensure that the `favoriteColor` field is one of the allowed enum values (\"red\", \"blue\", or \"green\"). It uses `String` as the base type and the `.in` validator to check if the string value is in the specified set of valid options. The `required: false` parameter indicates that the validation should not fail if the field is missing from the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String.self,\n    is: .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Vapor Controller (Swift)\nDESCRIPTION: This code snippet demonstrates how to register the `TodosController` in Vapor's `routes.swift` file.  It uses `app.register(collection:)` to make the controller's routes available. It requires a pre-existing `app` instance and the `TodosController` to be defined.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ntry app.register(collection: TodosController())\n```\n\n----------------------------------------\n\nTITLE: Setting maxRetryCount - Swift\nDESCRIPTION: This snippet demonstrates how to set the maxRetryCount when dispatching a job, using both EventLoopFuture and async/await.  If a job fails it will automatically retry up to the specified count.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3\n        ).map { \"done\" }\n}\n\n// or\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Session Data - Swift\nDESCRIPTION: Defines a route handler that destroys the session. It calls `req.session.destroy()` to remove the session data from the session driver and invalidate the session cookie. Returns a HTTP 200 OK status.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"del\") { req -> HTTPStatus in\n    req.session.destroy()\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Zip Code Validator to Validations in Swift\nDESCRIPTION: This code snippet demonstrates how to add the custom `zipCode` validator to the validations for a property. It shows how to specify the field name, type, and the validator to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"zipCode\", as: String.self, is: .zipCode)\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request\nDESCRIPTION: This snippet demonstrates how to make a simple GET request to a specified URL using Vapor's HTTP client. It shows how to retrieve the response from the server using `await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/status/200\")\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Email\nDESCRIPTION: Adds a validation to the `Validations` collection to ensure that the `email` field is a valid email address. It specifies the key, the expected type (`String`), and the `.email` validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"email\", as: String.self, is: .email)\n```\n\n----------------------------------------\n\nTITLE: Paginating Query Results (Swift)\nDESCRIPTION: Demonstrates automatic pagination of query results using the `paginate` method in Fluent. It retrieves planets and paginates the results based on the `page` and `per` parameters in the request.  Assumes a Vapor application setup with a database connection and a `Planet` model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Ejemplo de paginación basada en peticiones.\napp.get(\"planets\") { req in\n    try await Planet.query(on: req.db).paginate(for: req)\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration\nDESCRIPTION: This Swift code snippet demonstrates how to configure a PostgreSQL database connection in a Vapor application using the DATABASE_URL environment variable.  It handles TLS configuration for secure connections.  It retrieves the database URL from the environment, configures TLS for secure connections (disabling certificate verification if using Heroku's standard plan), and sets up the database connection in the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    var tlsConfig: TLSConfiguration = .makeClientConfiguration()\n    tlsConfig.certificateVerification = .none\n    let nioSSLContext = try NIOSSLContext(configuration: tlsConfig)\n\n    var postgresConfig = try SQLPostgresConfiguration(url: databaseURL)\n    postgresConfig.coreConfiguration.tls = .require(nioSSLContext)\n\n    app.databases.use(.postgres(configuration: postgresConfig), as: .psql)\n} else {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Models in a Transaction\nDESCRIPTION: This code snippet demonstrates saving two models, `sun` and `sirius`, within a database transaction. The `save(on:)` method is called on each model, using the database instance provided by the transaction. The `flatMap` operator ensures that `sirius` is only saved if `sun` is saved successfully.  If either save operation fails, the entire transaction will be rolled back.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nvar sun: Star = ...\nvar sirius: Star = ...\n\nreturn req.db.transaction { database in\n    return sun.save(on: database).flatMap { _ in\n        return sirius.save(on: database)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Migration in Fluent\nDESCRIPTION: This code snippet defines an asynchronous migration for a Fluent model.  The `prepare` method defines the schema for the database table, including the ID and name fields. The `revert` method defines how to undo the migration, in this case, deleting the table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateGalaxy: AsyncMigration {\n    // Bereidt de database voor op het opslaan van Galaxy modellen.\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"galaxies\")\n            .id()\n            .field(\"name\", .string)\n            .create()\n    }\n\n    // Zet optioneel de wijzigingen terug die in de prepare methode zijn gemaakt.\n    func revert(on database: Database) async throws {\n        try await database.schema(\"galaxies\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vapor POST Route Handler\nDESCRIPTION: Defines a POST route handler for creating a user using Vapor. It attempts to decode the request content into a `CreateUser` struct. The example shows how data can be decoded from the request. `req.content.decode` is used for parsing data from the request body. It does not demonstrate request validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"users\") { req -> CreateUser in\n    let user = try req.content.decode(CreateUser.self)\n    // Do something with user.\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Implement ModelTokenAuthenticatable for UserToken\nDESCRIPTION: Extends the `UserToken` model to conform to `ModelTokenAuthenticatable`. This lets you authenticate users via a token. Specifies the `value` field as the token key and creates a parent relation to the User.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Fluent\n\nextension UserToken: ModelTokenAuthenticatable {\n    static var valueKey: KeyPath<UserToken, Field<String>> { \\.$value }\n    static var userKey: KeyPath<UserToken, Parent<User>> { \\.$user }\n\n    var isValid: Bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponseEncodable for HTML in Swift\nDESCRIPTION: This code shows how to implement the `ResponseEncodable` protocol for the `HTML` struct.  It sets the `Content-Type` header to `text/html` and creates a response with the HTML content. The `encodeResponse` function returns an `EventLoopFuture<Response>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: ResponseEncodable {\n  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return request.eventLoop.makeSucceededFuture(.init(\n      status: .ok, headers: headers, body: .init(string: value)\n    ))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Unique Constraint Swift\nDESCRIPTION: This snippet shows how to delete a unique constraint from a schema. It removes the unique constraint on the \"email\" field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n.deleteUnique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Public key with components\nDESCRIPTION: This snippet shows how to initialize an RSA public key by passing its modulus and public exponent components. This is necessary for setting up RSA-based JWT verification where the public key is used to verify tokens signed with the corresponding private key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Initialisiere einen öffentlichen RSA-Schlüssel mit Komponenten.\nlet key = try Insecure.RSA.PublicKey(\n    modulus: modulus, \n    exponent: publicExponent\n)\n```\n\n----------------------------------------\n\nTITLE: Adding string validations (name and username)\nDESCRIPTION: Adds validation rules for the `name` and `username` fields.  The `name` must not be empty, and the `username` must be at least 3 characters long and contain only alphanumeric characters. Demonstrates use of ! (not) and && (and) operators.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"name\", as: String.self, is: !.empty)\nvalidations.add(\"username\", as: String.self, is: .count(3...) && .alphanumeric)\n```\n\n----------------------------------------\n\nTITLE: Adding Sessions Middleware Globally - Swift\nDESCRIPTION: Adds the `SessionsMiddleware` to the application's middleware pipeline. This enables session support for all routes. It's crucial to add it after the cookie factory is declared because `Sessions` is a struct (value type).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Configure HS256 Signer - Swift\nDESCRIPTION: This snippet configures an HS256 signer with a secret key within a Vapor application. It adds a signer to the application's JWT configuration, enabling the app to sign and verify JWTs using the HMAC algorithm with SHA-256.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport JWT\n\n// 添加具有 SHA-256 的 HMAC 算法的签名者。\napp.jwt.signers.use(.hs256(key: \"secret\"))\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Transfer Object (DTO) for Planet (Swift)\nDESCRIPTION: This snippet defines a DTO (Data Transfer Object) for the `Planet` model. This is recommended when sending models over the network to handle nested relations correctly and avoid decoding issues.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct PlanetDTO: Content {\n    var id: UUID?\n    var name: String\n    var star: Star.IDValue\n}\n```\n\n----------------------------------------\n\nTITLE: EventLoopFuture to Async/Await Example\nDESCRIPTION: Demonstrates converting a route handler using EventLoopFuture to use async/await. The example fetches a user, updates the lastAccessed timestamp, and returns the user's name using both approaches. It showcases the simplification achieved by using async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nroutes.get(\"firstUser\") { req -> EventLoopFuture<String> in\n    User.query(on: req.db).first().unwrap(or: Abort(.notFound)).flatMap { user in\n        user.lastAccessed = Date()\n        return user.update(on: req.db).map {\n            return user.name\n        }\n    }\n}\n```\n\nLANGUAGE: Swift\nCODE:\n```\nroutes.get(\"firstUser\") { req async throws -> String in\n    guard let user = try await User.query(on: req.db).first() else {\n        throw Abort(.notFound)\n    }\n    user.lastAccessed = Date()\n    try await user.update(on: req.db)\n    return user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Converting EventLoopFuture to Async/Await with get()\nDESCRIPTION: This code snippet shows how to convert an `EventLoopFuture` to a value using the `.get()` method within an `async` context. This allows you to work with legacy code that uses `EventLoopFuture` within `async/await` code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nreturn someMethodCallThatReturnsAFuture().flatMap { futureResult in\n    // use futureResult\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResult = try await someMethodThatReturnsAFuture().get()\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with JWT Authentication\nDESCRIPTION: This snippet shows how to configure APNS in your Vapor application using JWT authentication. It creates an `APNSClientConfiguration` with the necessary credentials, including the private key, key identifier, and team identifier.  Replace the placeholder values with your actual APNS credentials.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport APNS\nimport VaporAPNS\nimport APNSCore\n\n// 使用 JWT 认证 配置 APNS。\nlet apnsConfig = APNSClientConfiguration(\n    authenticationMethod: .jwt(\n        privateKey: try .loadFrom(string: \"<#key.p8 content#>\", as: .utf8),\n        keyIdentifier: \"<#key identifier#>\",\n        teamIdentifier: \"<#team identifier#>\"\n    ),\n    environment: .development\n)\napp.apns.containers.use(\n    apnsConfig,\n    eventLoopGroupProvider: .shared(app.eventLoopGroup),\n    responseDecoder: JSONDecoder(),\n    requestEncoder: JSONEncoder(),\n    as: .default\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Route Parameter to Integer in Vapor\nDESCRIPTION: This snippet demonstrates how to automatically convert a route parameter to an integer using `req.parameters.get(as: Int.self)`.  It includes error handling if the parameter cannot be converted to an integer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /number/42\n// responde a GET /number/1337\n// ...\napp.get(\"number\", \":x\") { req -> String in \n\tguard let int = req.parameters.get(\"x\", as: Int.self) else {\n\t\tthrow Abort(.badRequest)\n\t}\n\treturn \"\\(int) is a great number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define UserToken Model\nDESCRIPTION: Defines a `UserToken` model using Fluent, which contains the value of the token, and creates a parent relationship to the user who owns the token. Enables the persistance of tokens for User Authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nfinal class UserToken: Model, Content {\n    static let schema = \"user_tokens\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"value\")\n    var value: String\n\n    @Parent(key: \"user_id\")\n    var user: User\n\n    init() { }\n\n    init(id: UUID? = nil, value: String, userID: User.IDValue) {\n        self.id = id\n        self.value = value\n        self.$user.id = userID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting In-Process Jobs - Swift\nDESCRIPTION: This snippet demonstrates how to start queue workers within the same process as the application. It calls the startInProcessJobs method on the application's queues, specifying the event loop to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry app.queues.startInProcessJobs(on: .default)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Client in Vapor\nDESCRIPTION: Shows how to access the default HTTP client from the Application or a Request object within a route handler.  The `app.client` is useful during configuration, while `req.client` should be used in route handlers to make HTTP requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.client // Client\n\napp.get(\"test\") { req in\n    req.client // Client\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with JWT Swift\nDESCRIPTION: Configures APNS using JWT authentication.  This involves loading a private key, specifying the key identifier, team identifier, and environment (development or production). It sets up the APNS client within the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport APNS\nimport VaporAPNS\nimport APNSCore\n\n// Configura APNS usando autenticación JWT.\nlet apnsConfig = APNSClientConfiguration(\n    authenticationMethod: .jwt(\n        privateKey: try .loadFrom(string: \"<#key.p8 content#>\", as: .pem()),\n        keyIdentifier: \"<#key identifier#>\",\n        teamIdentifier: \"<#team identifier#>\"\n    ),\n    environment: .development\n)\napp.apns.containers.use(\n    apnsConfig,\n    eventLoopGroupProvider: .shared(app.eventLoopGroup),\n    responseDecoder: JSONDecoder(),\n    requestEncoder: JSONEncoder(),\n    as: .default\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware (Add Version Header) - Swift (AsyncMiddleware Protocol)\nDESCRIPTION: This snippet shows an asynchronous version of AddVersionHeaderMiddleware using `AsyncMiddleware` and `async`/`await`.  It retrieves the response, adds the custom header, and returns the modified response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        let response = try await next.respond(to: request)\n        response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n        return response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamps for Created and Updated Dates Swift\nDESCRIPTION: This code snippet demonstrates how to define timestamp fields in a Fluent model using the `@Timestamp` property wrapper. It shows how to automatically set the `createdAt` and `updatedAt` fields when the model is created and updated, respectively.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 当创建行星时。\n    @Timestamp(key: \"created_at\", on: .create)\n    var createdAt: Date?\n\n    // 当行星最后一次更新时。\n    @Timestamp(key: \"updated_at\", on: .update)\n    var updatedAt: Date?\n}\n```\n\n----------------------------------------\n\nTITLE: Define a simple GET route in Vapor\nDESCRIPTION: This code snippet demonstrates how to define a simple GET route in Vapor that responds with a string. It showcases the basic syntax for handling HTTP requests and returning a response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \"vapor\") { req in \n    return \"Hello, vapor!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Queues Scheduler Worker\nDESCRIPTION: This command starts the queues scheduler worker which is required for running scheduled jobs. The scheduler worker needs to be continuously running for the jobs to be triggered as configured.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nswift run App queues --scheduled\n```\n\n----------------------------------------\n\nTITLE: Decoding a Response Body\nDESCRIPTION: This snippet demonstrates how to decode the response body from an HTTP request using Vapor's `Content` API. It retrieves JSON data from the response and decodes it into a `MyJSONResponse` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/json\")\nlet json = try response.content.decode(MyJSONResponse.self)\n```\n\n----------------------------------------\n\nTITLE: Create User Migration with Fluent\nDESCRIPTION: Creates a Fluent migration for the `User` model.  Defines the database schema with fields for `id`, `name`, `email`, and `password_hash`. Sets email as unique and includes methods to prepare and revert the migration, updating and removing the schema respectively.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nextension User {\n    struct Migration: AsyncMigration {\n        var name: String { \"CreateUser\" }\n\n        func prepare(on database: Database) async throws {\n            try await database.schema(\"users\")\n                .id()\n                .field(\"name\", .string, .required)\n                .field(\"email\", .string, .required)\n                .field(\"password_hash\", .string, .required)\n                .unique(on: \"email\")\n                .create()\n        }\n\n        func revert(on database: Database) async throws {\n            try await database.schema(\"users\").delete()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JWK to JWT Key Collection - Swift\nDESCRIPTION: This snippet demonstrates how to add a JWK (JSON Web Key) to the JWT key collection in a Vapor application using Swift. The `JWK(json:)` initializer parses the JWK JSON string. The `app.jwt.keys.use(jwk:)` method adds the JWK to the collection for signing and verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet privateKey = \"\"\"\n{\n    \"kty\": \"RSA\",\n    \"d\": \"\\(rsaPrivateExponent)\",\n    \"e\": \"AQAB\",\n    \"use\": \"sig\",\n    \"kid\": \"1234\",\n    \"alg\": \"RS256\",\n    \"n\": \"\\(rsaModulus)\"\n}\n\"\"\"\n\nlet jwk = try JWK(json: privateKey)\ntry await app.jwt.keys.use(jwk: jwk)\n```\n\n----------------------------------------\n\nTITLE: Defining a Star Model (Swift)\nDESCRIPTION: This Swift code defines the `Star` model, including its schema, ID, name, and a parent relationship to the `Galaxy` model. It uses property wrappers (`@ID`, `@Field`, `@Parent`) to define the model's properties and relationships with the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Star: Model, Content {\n    // テーブルまたはコレクションの名前\n    static let schema = \"stars\"\n\n    // この Star の一意の識別子\n    @ID(key: .id)\n    var id: UUID?\n\n    // 星の名前\n    @Field(key: \"name\")\n    var name: String\n\n    // この星が属する銀河への参照\n    @Parent(key: \"galaxy_id\")\n    var galaxy: Galaxy\n\n    // 空の Star インスタンスを作成\n    init() { }\n\n    // すべてのプロパティが設定された新しい Star インスタンスを作成\n    init(id: UUID? = nil, name: String, galaxyID: UUID) {\n        self.id = id\n        self.name = name\n        self.$galaxy.id = galaxyID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Content Hooks: beforeEncode/afterDecode\nDESCRIPTION: Example demonstrating how to use the `beforeEncode` and `afterDecode` methods to perform custom logic on a `Content` type. `afterDecode` trims whitespaces and checks if name is empty, throwing an error if so.  `beforeEncode` trims whitespaces, ensures a non-empty name, or throws an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Se ejecuta después de decodificar este Content. `mutating` solo se requiere para structs, no para clases.\nmutating func afterDecode() throws {\n    // Es posible que no se pase name, pero si lo hace, entonces no puede ser una cadena vacía.\n    self.name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines)\n    if let name = self.name, name.isEmpty {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n}\n\n// Se ejecuta antes de que se codifique este Content. `mutating` solo se requiere para structs, no para clases.\nmutating func beforeEncode() throws {\n    // *Siempre* tiene que devolver un name, y no puede ser una cadena vacía.\n    guard \n        let name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines), \n        !name.isEmpty \n    else {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n    self.name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global JSON Encoder in Swift\nDESCRIPTION: This code snippet shows how to configure the global JSON encoder used by Vapor. It creates a new `JSONEncoder` and sets its `dateEncodingStrategy` to `.secondsSince1970`. Then, it overrides the global encoder for the `.json` media type in `ContentConfiguration.global`. This affects all JSON encoding throughout the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// 创建一个新的 JSON 编码器，使用 unix-timestamp 日期编码\nlet encoder = JSONEncoder()\nencoder.dateEncodingStrategy = .secondsSince1970\n\n// 覆盖用于媒体类型 `.json` 的全局编码器。\nContentConfiguration.global.use(encoder: encoder, for: .json)\n```\n\n----------------------------------------\n\nTITLE: Starting a Transaction in Vapor (Closure)\nDESCRIPTION: This code snippet demonstrates how to start a database transaction within a Vapor request using a closure. The closure receives a database connection that should be used for all operations within the transaction. No data is saved until the transaction is completed successfully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.fr.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nreq.db.transaction { database in\n    // utiliser la base de données\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship in Fluent\nDESCRIPTION: This code snippet defines a one-to-many relationship between two Fluent models: `Star` and `Galaxy`.  The `Star` model has a `@Parent` property wrapper that references the `Galaxy` model. This defines that a `Star` belongs to a `Galaxy`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Star: Model, Content {\n    // Naam van de tabel of verzameling.\n    static let schema = \"stars\"\n\n    // Unieke identificatiecode voor deze ster.\n    @ID(key: .id)\n    var id: UUID?\n\n    // De naam van de ster.\n    @Field(key: \"name\")\n    var name: String\n\n    // Verwijzing naar het sterrenstelsel waar deze ster in zit.\n    @Parent(key: \"galaxy_id\")\n    var galaxy: Galaxy\n\n    // Creëert een nieuwe, lege Ster.\n    init() { }\n\n    // Creëert een nieuwe Ster met alle eigenschappen ingesteld.\n    init(id: UUID? = nil, name: String, galaxyID: UUID) {\n        self.id = id\n        self.name = name\n        self.$galaxy.id = galaxyID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Migration Swift\nDESCRIPTION: This code shows how to register a defined migration with the Vapor application's migration system. It adds the `MyMigration` struct to the application's list of migrations using `app.migrations.add()`. It uses the default database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\napp.migrations.add(MyMigration())\n```\n\n----------------------------------------\n\nTITLE: Accessing the DATABASE_URL in Swift\nDESCRIPTION: This code snippet shows how to access the `DATABASE_URL` environment variable in a Vapor application's `configure.swift` file, using it to configure a Postgres database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    try app.databases.use(.postgres(url: databaseURL), as: .psql)\n} else {\n    // Handel ontbrekende DATABASE_URL hier af...\n    //\n    // Als alternatief kunt u ook een andere configuratie instellen \n    // afhankelijk van of app.environment is ingesteld op \n    // `.development` of `.production`\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding URL Query Parameters in Swift\nDESCRIPTION: This code demonstrates how to decode URL query parameters into a `Content` struct named `Hello`.  The `name` property is defined as an optional `String` to handle cases where the query parameter is missing. This allows the route to handle cases where the `name` parameter is absent from the query string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Hello: Content {\n    var name: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Password in Vapor (Swift)\nDESCRIPTION: This snippet shows how to verify a plaintext password against a previously hashed password using the `req.password.verify()` method. It returns a boolean indicating whether the password matches the hash.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet bool = try req.password.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Database Transaction with Closure Swift\nDESCRIPTION: This code snippet demonstrates how to start a database transaction in Vapor using the `req.db.transaction(_ :)` method. The code accesses the database through an HTTP request and executes operations within a closure. The database parameter within the closure is used for executing queries.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nreq.db.transaction { database in\n    // usa il database\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Migration Swift\nDESCRIPTION: This code defines a database migration using the `AsyncMigration` protocol in Swift, leveraging `async`/`await` for asynchronous operations. The `prepare` function contains the logic to modify the database asynchronously, and the `revert` function contains the logic to undo those changes asynchronously.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        // Make a change to the database.\n    }\n\n    func revert(on database: Database) async throws {\n    \t// Undo the change made in `prepare`, if possible.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Planets Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to fetch all planets from the database using Fluent's query API. It creates a query for the Planet model and uses the `all()` method to retrieve all records.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches all planets.\nlet planets = try await Planet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: Verifying a Password with Bcrypt in Vapor\nDESCRIPTION: This snippet demonstrates how to verify a password against an existing Bcrypt hash in Vapor. It imports the Vapor library and verifies the string \"test\" against the provided digest. The `Bcrypt.verify` function returns a boolean indicating whether the password matches the hash.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet pass = try Bcrypt.verify(\"test\", created: digest)\nif pass {\n\t// 密码和摘要匹配。\n} else {\n\t// 错误密码。\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Protected Login Route Returning JWT (Swift)\nDESCRIPTION: This code demonstrates how to create a password-protected login route that returns a signed JWT.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_50\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator(), User.guardMiddleware())\npasswordProtected.post(\"login\") { req -> ClientTokenResponse in\n    let user = try req.auth.require(User.self)\n    let payload = try SessionToken(with: user)\n    return ClientTokenResponse(token: try req.jwt.sign(payload))\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Comparison\nDESCRIPTION: This snippet shows how to use comparison operators within the `#if` tag to conditionally render content based on the value of a variable (title).  It compares the title to \"Welcome\" and displays a corresponding message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_6\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    This is a friendly web page.\n#else:\n    No strangers allowed!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Response Compression in Vapor\nDESCRIPTION: This code snippet shows how to enable HTTP response compression using gzip for the Vapor HTTP server. The `responseCompression` parameter controls the compression of HTTP responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// 启用 HTTP 响应压缩。\napp.http.server.configuration.responseCompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Stream File Vapor\nDESCRIPTION: This snippet demonstrates how to asynchronously stream a file as an HTTP response using Vapor's `streamFile` method. The method will automatically set appropriate headers such as `ETag` and `Content-Type`. The result can be returned directly by the route handler. Two ways are shown: using `EventLoopFuture` and implicitely using `async/await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Asynchronously streams file as HTTP response.\nreq.fileio.streamFile(at: \"/path/to/file\").map { res in\n    print(res) // Response\n}\n\n// Or\n\nlet res = req.fileio.streamFile(at: \"/path/to/file\")\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Writable Service Configuration in Vapor (Swift)\nDESCRIPTION: Illustrates how to create a writable service in Vapor using Application storage. It defines a `MyConfiguration` struct and a `MyConfigurationKey` that conforms to `StorageKey` to store the configuration. An extension to Application provides a computed property to get and set the configuration, enabling stateful services.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyConfiguration {\n    var apiKey: String\n}\n\nstruct MyConfigurationKey: StorageKey {\n    typealias Value = MyConfiguration\n}\n\nextension Application {\n    var myConfiguration: MyConfiguration? {\n        get {\n            self.storage[MyConfigurationKey.self]\n        }\n        set {\n            self.storage[MyConfigurationKey.self] = newValue\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database with Connection String\nDESCRIPTION: This code snippet shows how to configure PostgreSQL using a connection string.  Replace `<connection string>` with your actual connection string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\ntry app.databases.use(.postgres(url: \"<connection string>\"), as: .psql)\n```\n\n----------------------------------------\n\nTITLE: Configure CORS Middleware in Vapor\nDESCRIPTION: Configures `CORSMiddleware` in Vapor to handle Cross-Origin Resource Sharing (CORS). This example allows all origins, common HTTP methods, and specific headers. It's important to prepend this middleware to ensure errors are returned with CORS headers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet corsConfiguration = CORSMiddleware.Configuration(\n    allowedOrigin: .all,\n    allowedMethods: [.GET, .POST, .PUT, .OPTIONS, .DELETE, .PATCH],\n    allowedHeaders: [.accept, .authorization, .contentType, .origin, .xRequestedWith, .userAgent, .accessControlAllowOrigin]\n)\nlet cors = CORSMiddleware(configuration: corsConfiguration)\n// cors-Middleware sollte vor der Standard-Fehler-Middleware mit `at: .beginning` stehen\napp.middleware.use(cors, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Defining Array Field with String Type in Vapor (Swift)\nDESCRIPTION: This code shows how to define an array field with the string type using the Vapor framework.  The `@Field` macro defines the field in the model, and the `field` method in the schema builder specifies the type as an array of strings. The `of` parameter indicates the type of the array elements.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n@Field(key: \"tags\")\nvar tags: [String]\n```\n\n----------------------------------------\n\nTITLE: Connecting Vapor app to database\nDESCRIPTION: Demonstrates how to access the `DATABASE_URL` environment variable in a Vapor application's `configure.swift` file and use it to configure the Postgres database connection. It includes a fallback mechanism for handling cases where the `DATABASE_URL` is not set.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    try app.databases.use(.postgres(url: databaseURL), as: .psql)\n} else {\n    // Manejar la ausencia de DATABASE_URL aquí...\n    //\n    // Alternativamente, también podrías establecer una configuración \n    // diferente dependiendo de si app.environment está configurado como \n    // `.development` o `.production`.\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Async/Await to EventLoopFuture\nDESCRIPTION: This snippet illustrates how to convert an `async`/`await` function to return an `EventLoopFuture`. A promise is created and completed with the result of the async function. This allows integration with existing code that expects an `EventLoopFuture`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = request.eventLoop.makePromise(of: String.self)\npromise.completeWithTask {\n    try await someAsyncFunctionThatGetsAString()\n}\nlet futureString: EventLoopFuture<String> = promise.futureResult\n```\n\n----------------------------------------\n\nTITLE: Creating Route for Creating Stars - Swift\nDESCRIPTION: This snippet defines a route that allows creating new 'Star' objects via a POST request. It decodes the request content into a `Star` model and saves it to the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"stars\") { req async throws -> Star in\n    let star = try req.content.decode(Star.self)\n    try await star.create(on: req.db)\n    return star\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Favorite Color Validation\nDESCRIPTION: Adds validation for the `favoriteColor` property, which is an optional string.  It is configured so that it will pass if the key is missing from the request.  If it is provided, it must be one of the valid `Color` enum cases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String.self,\n    is: .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Middleware in Vapor\nDESCRIPTION: Creates an asynchronous custom middleware to restrict access to admin users using `async`/`await`. It checks user roles and throws an unauthorized error if the user is not an admin. It uses the `AsyncMiddleware` protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            throw Abort(.unauthorized)\n        }\n        return try await next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Content struct with Data type property in Swift\nDESCRIPTION: This code defines a `Profile` struct with properties for `name`, `email`, and `image`, where `image` is of type `Data`. This structure is suitable for handling file uploads, where the file data is stored as a `Data` instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Profile: Content {\n    var name: String\n    var email: String\n    var image: Data\n}\n```\n\n----------------------------------------\n\nTITLE: Create Spans with Automatic Propagation in Vapor\nDESCRIPTION: Demonstrates how to create spans within a route closure when automatic propagation is enabled. The `withSpan` function creates a new span associated with the top-level request span.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcess\") { req in\n    let result = try await fetch()\n    return try await withSpan(\"getNameParameter\") { _ in\n        try await process(result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Binary Message via WebSocket (Swift)\nDESCRIPTION: This snippet demonstrates how to send a binary message using the `ws.send` method of a WebSocket instance. It takes an array of `UInt8` (bytes) as input and sends it as a binary message to the connected peer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nws.send([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Async/Await - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates sending a message asynchronously using `async/await`. It calls the `send` method on the WebSocket and uses `await` to wait for the operation to complete. The `try` keyword is required to handle potential errors.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.send(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Queues with Redis Driver - Swift\nDESCRIPTION: This snippet demonstrates how to configure Queues in the configure.swift file using the Redis driver. It utilizes the app.queues.use method to specify the Redis URL for the queue connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport QueuesRedisDriver\n\ntry app.queues.use(.redis(url: \"redis://127.0.0.1:6379\"))\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Driver Dependency\nDESCRIPTION: This snippet shows how to add the Fluent MySQL driver as a dependency to your Swift package. This allows your Vapor application to connect to a MySQL or MariaDB database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent-mysql-driver.git\", from: \"4.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Configuring the HTTP Client (Swift)\nDESCRIPTION: Shows how to configure the underlying HTTP client via the application's `http.client.configuration` property. This allows customizing settings like redirect behavior.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Disable automatic redirect following.\napp.http.client.configuration.redirectConfiguration = .disallow\n```\n\n----------------------------------------\n\nTITLE: Define an Async Migration (Swift)\nDESCRIPTION: This code snippet shows how to define an asynchronous migration using the `AsyncMigration` protocol. It demonstrates the `prepare` and `revert` functions, which allow performing asynchronous database operations using `async` and `await`. This is useful for complex database migrations that require asynchronous execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nstruct MyMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        // Breng een wijziging aan in de database.\n    }\n\n    func revert(on database: Database) async throws {\n    \t// Maak de verandering in `prepare` ongedaan, indien mogelijk.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling NIO EventLoopFuture Boundaries in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to handle `NIO EventLoopFuture` boundaries when using tracing in Vapor.  It emphasizes the necessity of manually restoring the tracing context when crossing these boundaries, regardless of whether automatic propagation is enabled.  It uses `withSpan` and the `span.context` to ensure proper span linking.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcessNIO\") { req in\n    withSpan(\"fetch\", context: req.serviceContext) { span in\n        fetchSomething().map { result in\n            withSpan(\"process\", context: span.context) { _ in\n                process(result)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Query\nDESCRIPTION: This snippet demonstrates how to validate the query parameters of a request using the `validate(query:)` static method on a `Validatable` type. It validates the query parameters based on the defined validation rules.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(query: req)\nreq.query.decode(CreateUser.self)\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Parent Field in Fluent Schema (Swift)\nDESCRIPTION: This defines the database schema for an optional parent relationship. Unlike a required parent, the `.required` constraint is omitted, allowing the `star_id` field to be null.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .references(\"star\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Fetching a Relation's Value with reload parameter\nDESCRIPTION: This snippet demonstrates how to fetch the value of a relation using the `get(on:)` method. It retrieves all planets associated with a sun, with the `reload` parameter set to true, forcing a fresh fetch from the database. The `database` parameter specifies the database connection to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\ntry await sun.$planets.get(reload: true, on: database)\n```\n\n----------------------------------------\n\nTITLE: Defining a Content struct in Swift\nDESCRIPTION: Defines a `Greeting` struct that conforms to the `Content` protocol.  Conforming to `Content` provides additional utilities for working with the Content API and also makes the struct automatically conform to `Codable`.  This struct is used for decoding JSON data from a request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Greeting: Content {\n    var hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Verification in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates asynchronous password verification using `req.password.async.verify()`, preventing event loop blocking. Two approaches are illustrated: `.map` and `await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nreq.password.async.verify(\"vapor\", created: digest).map { bool in\n    // Gestisci il risultato.\n}\n\n// oppure\n\nlet result = try await req.password.async.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller with Routes in Vapor (Swift)\nDESCRIPTION: This Swift code defines a `TodosController` which conforms to `RouteCollection`. It defines routes for `todos` including `index`, `create`, `show`, `update`, and `delete` actions. The `boot` function groups the routes and assigns handlers to each endpoint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct TodosController: RouteCollection {\n    func boot(routes: RoutesBuilder) throws {\n        let todos = routes.grouped(\"todos\")\n        todos.get(use: index)\n        todos.post(use: create)\n\n        todos.group(\":id\") { todo in\n            todo.get(use: show)\n            todo.put(use: update)\n            todo.delete(use: delete)\n        }\n    }\n\n    func index(req: Request) async throws -> [Todo] {\n        try await Todo.query(on: req.db).all()\n    }\n\n    func create(req: Request) async throws -> Todo {\n        let todo = try req.content.decode(Todo.self)\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func show(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        return todo\n    }\n\n    func update(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        let updatedTodo = try req.content.decode(Todo.self)\n        todo.title = updatedTodo.title\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func delete(req: Request) async throws -> HTTPStatus {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        try await todo.delete(on: req.db)\n        return .ok\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncBearerAuthenticator in Swift\nDESCRIPTION: This code implements an `AsyncBearerAuthenticator` for use with `async`/`await`. It verifies the bearer token from the `Authorization` header. The `authenticate(bearer:for:)` method checks if the provided token matches a hardcoded value. If the token is valid, it logs in a `User` with the name \"Vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: AsyncBearerAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        bearer: BearerAuthorization,\n        for request: Request\n    ) async throws {\n       if bearer.token == \"foo\" {\n           request.auth.login(User(name: \"Vapor\"))\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to a Schema with Fluent in Swift\nDESCRIPTION: This snippet shows how to add a new field named 'name' of type string to a schema, specifying that it's a required field. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"name\", .string, .required)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Enum - Swift\nDESCRIPTION: This snippet demonstrates how to create a database enum named \"planet_type\" with three cases: \"smallRocky\", \"gasGiant\", and \"dwarf\" using Vapor's schema builder.  It leverages the `database.enum()` method to define the enum, followed by `.case()` for each possible value, and finally `.create()` to persist the enum definition in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// An example of enum creation.\ndatabase.enum(\"planet_type\")\n    .case(\"smallRocky\")\n    .case(\"gasGiant\")\n    .case(\"dwarf\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Verify JWT from Request - Swift\nDESCRIPTION: This snippet demonstrates how to extract and verify a JWT from an incoming request using Vapor's req.jwt.verify method. It retrieves the bearer token from the Authorization header, verifies the signature and claims, and returns a 200 OK status if successful.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// 从请求中获取并验证 JWT。\napp.get(\"me\") { req -> HTTPStatus in\n    let payload = try req.jwt.verify(as: TestPayload.self)\n    print(payload)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Model Middleware Implementation (Async) Swift\nDESCRIPTION: This code demonstrates an asynchronous implementation of `ModelMiddleware` using `async`/`await`. It capitalizes the name of a `Planet` model before creation. The `next.create` function is called using `await`, and a message is printed after the planet has been successfully created.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct PlanetMiddleware: AsyncModelMiddleware {\n    func create(model: Planet, on db: Database, next: AnyAsyncModelResponder) async throws {\n        // The model can be altered here before it is created.\n        model.name = model.name.capitalized()\n        try await next.create(model, on: db)\n        // Once the planet has been created, the code \n        // here will be executed.\n        print (\"Planet \\(model.name) was created\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Fields in Swift\nDESCRIPTION: Illustrates how to retrieve only specific fields (e.g., names) from all records of a model using the `all(_:)` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet names = try await Planet.query(on: database).all(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Handling Future Completion with whenComplete in Swift\nDESCRIPTION: This code snippet demonstrates how to use `whenComplete` to add a callback to an `EventLoopFuture` that will be executed when the future either succeeds or fails. It uses a switch statement to handle both success and failure cases, printing the result or the error accordingly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\nfutureString.whenComplete { result in\n    switch result {\n    case .success(let string):\n        print(string) // The actual String\n    case .failure(let error):\n        print(error) // A Swift Error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting EventLoopFuture to async/await\nDESCRIPTION: This code snippet demonstrates how to convert an EventLoopFuture-returning method call to async/await using `.get()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nreturn someMethodCallThatReturnsAFuture().flatMap { futureResult in\n    // 使用 futureResult\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Request (Swift)\nDESCRIPTION: This snippet shows how to send a test request to a Vapor application using the `app.test` method. It defines the HTTP method and URL, and provides a closure to verify the response status and body using XCTAssertEqual.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry app.test(.GET, \"hello\") { res in\n    XCTAssertEqual(res.status, .ok)\n    XCTAssertEqual(res.body.string, \"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an APNSAlertNotification\nDESCRIPTION: This snippet shows how to create an `APNSAlertNotification` object.  It initializes the object with alert details such as title, subtitle, expiration, priority, topic, and a custom payload. This object encapsulates the notification's metadata.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data in Vapor\nDESCRIPTION: This snippet shows how to set data in a session within a route handler.  New sessions are initialized automatically when data is added to `req.session`. The example route accepts a dynamic parameter and stores it into the session.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"set\", \":value\") { req -> HTTPStatus in\n    req.session.data[\"name\"] = req.parameters.get(\"value\")\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Create Custom Middleware (Asynchronous) in Vapor\nDESCRIPTION: Creates a custom asynchronous middleware in Vapor that checks if a user has administrator privileges. It implements the `AsyncMiddleware` protocol and its `respond` method.  If the user isn't an admin, it throws an unauthorized error. It utilizes `async`/`await` for asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            throw Abort(.unauthorized)\n        }\n        return try await next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secured Route Group With JWT (Swift)\nDESCRIPTION: This code demonstrates how to create a secured route group that requires a SessionToken JWT.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\n// 创建需要 SessionToken JWT 的路由组。\nlet secure = app.grouped(SessionToken.authenticator(), SessionToken.guardMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating Procfile for Vapor\nDESCRIPTION: Creates a `Procfile` that defines how Heroku should run the Vapor application. It specifies the command to start the web server, sets the environment to production, and configures the hostname and port.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"web: App serve --env production\" \\\n  \"--hostname 0.0.0.0 --port \\$PORT\" > Procfile\n```\n\n----------------------------------------\n\nTITLE: Verifying a JWT from an Incoming Request (Swift)\nDESCRIPTION: This code demonstrates how to verify a JWT from an incoming request in a Vapor route. It uses `req.jwt.verify(as: TestPayload.self)` to extract and verify the JWT from the `Authorization` header, parsing it as the `TestPayload` type. If verification fails, a 401 Unauthorized error is thrown. If successful, the payload is printed and a 200 OK response is returned.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Haal en verifieer JWT van inkomend verzoek.\napp.get(\"me\") { req -> HTTPStatus in\n    let payload = try req.jwt.verify(as: TestPayload.self)\n    print(payload)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SessionRecord Migration for Fluent in Vapor\nDESCRIPTION: This snippet shows how to add the `SessionRecord` migration to your database's migrations when using Fluent for sessions. This prepares your database for storing session data. This migration should be added before running your application's migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(SessionRecord.migration)\n```\n\n----------------------------------------\n\nTITLE: Counting Results in Swift\nDESCRIPTION: Demonstrates how to count the total number of records matching the query using the `count()` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).count()\n```\n\n----------------------------------------\n\nTITLE: Example .env File Content (Bash)\nDESCRIPTION: Illustrates the format of a `.env` file, which contains key-value pairs representing environment variables. These variables are automatically loaded into the environment when the Vapor application starts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nFOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Avoiding Blocking the Event Loop (Swift)\nDESCRIPTION: This snippet demonstrates how to avoid blocking the event loop by performing a blocking operation (sleep) on a background thread. It uses `req.application.threadPool.runIfActive` to execute the blocking code and returns a future that will be completed when the background operation is finished.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<String> in\n    /// Enviar algún trabajo para que se realice en un hilo en segundo plano\n    return req.application.threadPool.runIfActive(eventLoop: req.eventLoop) {\n        /// Pone el hilo de fondo en suspensión\n        /// Esto no afectará ninguno de los bucles de eventos\n        sleep(5)\n        \n        /// Cuando se haya completado el \"trabajo de bloqueo\",\n        /// se devuelve el resultado.\n        return \"Hello world!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Verification with Async/Await\nDESCRIPTION: Verifies a password asynchronously using the `req.password.async.verify()` method in combination with `async/await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet result = try await req.password.async.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Streaming a file as an HTTP response in Swift\nDESCRIPTION: This snippet demonstrates how to asynchronously stream a file as an HTTP response using Vapor's `req.fileio.streamFile` method. This method wraps the stream in a `Response` and automatically sets the appropriate headers such as `ETag` and `Content-Type`. The file path is given as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Streamt asynchroon bestand als HTTP antwoord.\nreq.fileio.streamFile(at: \"/path/to/file\").map { res in\n    print(res) // Antwoord\n}\n```\n\n----------------------------------------\n\nTITLE: Adding email validation\nDESCRIPTION: Adds a validation to the `validations` collection to ensure that the `email` field is a valid email address. It specifies the expected type as `String` and uses the `.email` validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"email\", as: String.self, is: .email)\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Response Compression in Vapor (Swift)\nDESCRIPTION: This snippet enables HTTP response compression using gzip for the Vapor HTTP server. It sets the `responseCompression` property to `.enabled`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// HTTP-responscompressie inschakelen.\napp.http.server.configuration.responseCompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Constraint (Swift)\nDESCRIPTION: This snippet shows how to add a unique constraint to a database schema using Fluent.  It prevents duplicate email addresses by enforcing uniqueness on the \"email\" field. This code assumes an active schema builder instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Future Completion with wait() in Swift\nDESCRIPTION: This example shows how to synchronously wait for a future to be completed using the `wait()` method.  This method blocks the current thread until the future resolves, either returning the result or throwing an error.  It is important to note that `wait()` should only be used on background or main threads, not on event loop threads.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Block until the string is ready\nlet string = try futureString.wait()\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: Implement Patch Route with DTO (Swift)\nDESCRIPTION: This Swift code demonstrates implementing a PATCH route to update a user using the `PatchUser` DTO. It decodes the request content into the DTO, retrieves the user from the database, updates the provided fields, and saves the changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.patch(\"users\", \":id\") { req async throws -> User in \n    // Decodeer de verzoekgegevens.\n    let patch = try req.content.decode(PatchUser.self)\n    // Haal de gewenste gebruiker uit de database.\n    guard let user = try await User.find(req.parameters.get(\"id\"), on: req.db) else {\n        throw Abort(.notFound)\n    }\n    // Als er een voornaam is opgegeven, actualiseer die dan.\n    if let firstName = patch.firstName {\n        user.firstName = firstName\n    }\n    // Als er een nieuwe achternaam is opgegeven, actualiseer die dan.\n    if let lastName = patch.lastName {\n        user.lastName = lastName\n    }\n    // Sla de gebruiker op en stuur hem terug.\n    try await user.save(on: req.db)\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job - Swift\nDESCRIPTION: This snippet shows how to schedule a `ScheduledJob` using the available builder methods. It demonstrates scheduling a `CleanupJob` to run yearly, in May, on the 23rd, at noon. This setup configures the scheduler to automatically trigger the job according to the defined schedule.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\napp.queues.schedule(CleanupJob())\n    .yearly()\n    .in(.may)\n    .on(23)\n    .at(.noon)\n```\n\n----------------------------------------\n\nTITLE: Defining a Content struct with Data for file uploads in Swift\nDESCRIPTION: This code defines a `Profile` struct that includes a `Data` property for handling file uploads.  The `image` property of type `Data` is used to store the uploaded file's content. It also includes `name` and `email`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Profile: Content {\n    var name: String\n    var email: String\n    var image: Data\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Optionals with Abort Error (Swift)\nDESCRIPTION: Shows how to use Vapor's `unwrap(or:)` extension to unwrap an optional and throw an `Abort` error if the optional is nil. This avoids potential `nil` values from being passed to subsequent operations. If the optional contains a value, that value is passed to the `flatMap` closure; otherwise, the future is failed with the provided `Abort` error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nUser.find(id, on: db)\n    .unwrap(or: Abort(.notFound))\n    .flatMap \n{\n    user in\n    // Non-optional User supplied to closure.\n}\n```\n\n----------------------------------------\n\nTITLE: Using DATABASE_URL in configure.swift\nDESCRIPTION: This Swift code snippet demonstrates how to access the `DATABASE_URL` environment variable within a Vapor application's `configure.swift` file. It uses the environment variable to configure the Postgres database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    try app.databases.use(.postgres(url: databaseURL), as: .psql)\n} else {\n    // 在这里处理缺少 DATABASE_URL 的情况...\n    //\n    // 或者，你也可以根据 app.environment 是否设置为 .development 或 .production 来设置不同的配置\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spans with Automatic Propagation in Vapor (Swift)\nDESCRIPTION: This example demonstrates creating spans within a route handler when automatic span propagation is enabled. It uses the `withSpan` function to create a new span named \"getNameParameter\" that is nested under the request's top-level span.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcess\") { req in\n    let result = try await fetch()\n    return try await withSpan(\"getNameParameter\") { _ in\n        try await process(result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Galaxy Model - POST Endpoint (Swift Async)\nDESCRIPTION: This Swift code snippet demonstrates creating a new `Galaxy` model using `async/await`. It decodes the `Galaxy` from the request body, saves it to the database, and returns the newly created galaxy.  It's an alternative to the `EventLoopFuture` approach.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"galaxies\") { req async throws -> Galaxy in\n    let galaxy = try req.content.decode(Galaxy.self)\n    try await galaxy.create(on: req.db)\n    return galaxy\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Vapor Client\nDESCRIPTION: This snippet shows how to access the Vapor HTTP client from an Application instance and within a route handler using a Request instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.client // Client\n\napp.get(\"test\") { req in\n\treq.client // Client\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Transaction Result (Closure)\nDESCRIPTION: This example showcases how to transform the result of a Vapor transaction into a different future, specifically to return an HTTP status code. This allows for a clear indication of the transaction's success or failure to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.fr.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.db.transaction { database in\n    // utiliser la base de données et effectue une transaction\n}.transform(to: HTTPStatus.ok)\n```\n\n----------------------------------------\n\nTITLE: Implementing LeafTag protocol in Swift\nDESCRIPTION: Defines a struct `NowTag` that conforms to the `LeafTag` protocol, which is required for creating custom Leaf tags. The `render` function will contain the tag's logic.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading with get(reload:on:) in Swift\nDESCRIPTION: This snippet demonstrates lazy eager loading of a relationship. It loads the `star` relationship for a planet after the planet has already been retrieved. Using `reload: true` forces a database fetch instead of using the cache. The `database` parameter specifies the database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\nplanet.$star.get(on: database).map {\n    print(planet.star.name)\n}\n\n// O\n\ntry await planet.$star.get(on: database)\nprint(planet.star.name)\n\n// In case you want to ensure that the data you receive is not obtained from the cache, use the `reload:` parameter.\n\ntry await planet.$star.get(reload: true, on: database)\nprint(planet.star.name)\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job with `AsyncJob` protocol\nDESCRIPTION: Defines a job using the `AsyncJob` protocol, which supports `async`/`await` syntax. This requires the job to define a `Payload` type and implement the `dequeue` function to handle the job's processing logic asynchronously.  Optionally, an `error` function can be implemented to handle errors during job processing asynchronously. The payload must be `Codable`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct EmailJob: AsyncJob {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) async throws {\n        // Aquí es donde enviarías el email\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) async throws {\n        // Si no deseas manejar errores, simplemente haz un return. También puedes omitir esta función por completo.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Fluent Session Driver - Swift\nDESCRIPTION: Configures Vapor to use Fluent as the session driver, storing session data in the application's database. This requires Fluent to be configured and connected to a database. It allows sessions to persist across restarts and be shared between instances.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\n\napp.sessions.use(.fluent)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Password\nDESCRIPTION: This code snippet demonstrates how to verify a password against a digest using the `verify` method on a `Request` object. It throws if verification fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet bool = try req.password.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Defining a Children Relationship in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to define a children relationship using the `@Children` property wrapper in a Fluent model. The `for` parameter specifies a key path to the parent relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Star: Model {\n    // Ejemplo de una relación children.\n    @Children(for: \\.$star)\n    var planets: [Planet]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Guard Middleware in Swift\nDESCRIPTION: This code demonstrates how to use `GuardMiddleware` to ensure that a user has been authenticated before reaching a route handler in Vapor. It groups the route with both the `UserAuthenticator` and the `User.guardMiddleware()`. The guard middleware ensures that `User` has been successfully authenticated.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet protected = app.grouped(UserAuthenticator())\n    .grouped(User.guardMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Configuring release_command in fly.toml\nDESCRIPTION: This TOML snippet shows how to configure a `release_command` in the `fly.toml` file. This command will be executed by Fly before the main server process starts. The example shows running database migrations using `migrate -y`. This is often used for database setup tasks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n release_command = \"migrate -y\"\n```\n\n----------------------------------------\n\nTITLE: Defining Children Relationship with @Children - Swift\nDESCRIPTION: This snippet demonstrates how to define a children relationship in the `Galaxy` model using the `@Children` property wrapper. It specifies that the `stars` property is a list of `Star` objects that have a parent relationship to this galaxy through the `galaxy` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Alle sterren in dit heelal.\n@Children(for: \\.$galaxy)\nvar stars: [Star]\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Request Content\nDESCRIPTION: Uses the `validate(content:)` function to validate request content against the defined validations. This function is called before decoding the request content, ensuring that the data is valid before processing it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(content: req)\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading\nDESCRIPTION: This snippet demonstrates nested eager loading. It loads the `star` relation for `Planet` models, and then loads the `galaxy` relation for each `star`. This allows synchronous access to the `galaxy` property of each `star` without additional database queries. The `database` parameter specifies the database connection to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nlet planets = try await Planet.query(on: database).with(\\.$star) { star in\n    star.with(\\.$galaxy)\n}.all()\nfor planet in planets {\n    // `star.galaxy` is accessible synchronously here \n    // since it has been eager loaded.\n    print(planet.star.galaxy.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Vapor Project (Toolbox)\nDESCRIPTION: This command uses the Vapor toolbox to create a new Vapor project named 'hello' in the current directory. The `-n` flag automatically answers 'no' to all questions, providing a bare-bones template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ja.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Dependency to Package.swift (Swift)\nDESCRIPTION: This snippet demonstrates how to add the `JWT` dependency to the `Package.swift` file of your Vapor project. This step is essential to enable JWT support in your application.  It specifies the package URL and the product dependency for the App target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.10\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n        // Otras dependencias...\n        .package(url: \"https://github.com/vapor/jwt.git\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Otras dependencias...\n            .product(name: \"JWT\", package: \"jwt\")\n        ]),\n        // Otros targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Method Authenticators Swift\nDESCRIPTION: This code demonstrates how to compose multiple authenticators for the same user type in Vapor. It uses `UserPasswordAuthenticator` and `UserTokenAuthenticator` to authenticate `User`. `GuardMiddleware` is then used to ensure successful authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\napp.grouped(UserPasswordAuthenticator())\n    .grouped(UserTokenAuthenticator())\n    .grouped(User.guardMiddleware())\n    .post(\"login\") \n{\n    req in\n    let user = try req.auth.require(User.self)\n    // Fai qualcosa con l'utente.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection with Hostname in Swift\nDESCRIPTION: This snippet demonstrates the minimal configuration required to connect to a Redis server by providing a hostname. It initializes the Redis configuration with the hostname.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet app = Application()\n\napp.redis.configuration = try RedisConfiguration(hostname: \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Creating POST Route for Swift Model\nDESCRIPTION: This snippet shows how to create a POST route for creating new instances of a Swift model. It decodes the request content into the model type, creates the model in the database, and returns the created model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"stars\") { req async throws -> Star in\n    let star = try req.content.decode(Star.self)\n    try await star.create(on: req.db)\n    return star\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the render method for NowTag in Swift\nDESCRIPTION: This snippet implements the `render` method for the `NowTag`. It retrieves the date format from the context parameters (if provided), formats the current date accordingly, and returns the formatted date as `LeafData`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nenum NowTagError: Error {\n    case invalidFormatParameter\n    case tooManyParameters\n}\n\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        let formatter = DateFormatter()\n        switch ctx.parameters.count {\n        case 0: formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n        case 1:\n            guard let string = ctx.parameters[0].string else {\n                throw NowTagError.invalidFormatParameter\n            }\n\n            formatter.dateFormat = string\n        default:\n            throw NowTagError.tooManyParameters\n\t    }\n    \n        let dateAsString = formatter.string(from: Date())\n        return LeafData.string(dateAsString)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Command (Swift)\nDESCRIPTION: This code snippet shows how to register a custom command with the Vapor application. By adding the command to `app.asyncCommands`, it becomes available for execution via `swift run`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.asyncCommands.use(HelloCommand(), as: \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Query Values\nDESCRIPTION: Shows how to access individual values from a request's query string using a subscript. The `name` variable will contain the value of the `name` query parameter, or nil if it is not present.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name: String? = req.query[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger from Request in Vapor\nDESCRIPTION: This code snippet demonstrates how to access the Logger instance from an incoming request in a Vapor application. It logs an informational message with the request logger and returns a simple string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    req.logger.info(\"Hello, logs!\")\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Age Validation\nDESCRIPTION: Adds validation for the `age` property to ensure it is within a specified range (13 or greater).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\"age\", as: Int.self, is: .range(13...))\n```\n\n----------------------------------------\n\nTITLE: Logging within a Request in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to access and use the request-specific logger within a route handler in Vapor. It shows how to log an informational message with the request logger.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    req.logger.info(\"Hello, logs!\")\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Find Model by ID (Swift)\nDESCRIPTION: This Swift code snippet shows how to find a model instance by its ID using the `find(_:on:)` method. It retrieves the ID from the request parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.find(req.parameters.get(\"id\"), on: database)\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameter\nDESCRIPTION: Demonstrates how to access the value of a parameter path component using `req.parameters.get`.  Shows how to extract the value of the `name` parameter from the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op GET /hello/foo\n// reageert op GET /hello/bar\n// ...\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the ID Value in Swift\nDESCRIPTION: Illustrates how to access the ID value of a Fluent model using `requireID()`. This method throws an error if the ID is nil. It is intended for use when the ID is expected to exist.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet id = try planet.requireID()\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Model in Swift\nDESCRIPTION: Illustrates updating an existing `Planet` model fetched from the database. The code first retrieves the model, modifies its `name` property, and then calls `update(on:)` to persist the changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nguard let planet = try await Planet.find(..., on: database) else {\n    throw Abort(.notFound)\n}\nplanet.name = \"Earth\"\ntry await planet.update(on: database)\n```\n\n----------------------------------------\n\nTITLE: Offloading Blocking Work to a Thread Pool\nDESCRIPTION: This code snippet demonstrates how to avoid blocking the event loop by offloading the blocking `sleep` call to a background thread using `application.threadPool.runIfActive`. This allows the event loop to continue processing other requests while the blocking operation is performed in the background, improving overall application responsiveness.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<String> in\n    /// Dispatch some work to happen on a background thread\n    return req.application.threadPool.runIfActive(eventLoop: req.eventLoop) {\n        /// Puts the background thread to sleep\n        /// This will not affect any of the event loops\n        sleep(5)\n\n        /// When the \"blocking work\" has completed,\n        /// return the result.\n        return \"Hello world!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Middleware (Swift)\nDESCRIPTION: Shows how to use route groups to apply authentication middleware to a subset of routes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { ... }\nlet auth = app.grouped(AuthMiddleware())\nauth.get(\"dashboard\") { ... }\nauth.get(\"logout\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Constraint to Pivot Model (Swift)\nDESCRIPTION: This code adds a unique constraint to the pivot model to prevent redundant entries in the many-to-many relation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Disallows duplicate relations.\n.unique(on: \"planet_id\", \"tag_id\")\n```\n\n----------------------------------------\n\nTITLE: Specifying a Delay for a Job - Swift\nDESCRIPTION: This snippet demonstrates how to specify a delay before a queue job is executed. It uses the `delayUntil` parameter of the `dispatch` method to set a future date when the job should become available for processing. It calculates a future date (24 hours from now) and passes it to the dispatch call.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 一天\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3,\n        delayUntil: futureDate)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using TracingMiddleware in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to add `TracingMiddleware` to a Vapor application.  This middleware automatically creates a fully annotated span for each request. It should be added before other middlewares for accurate measurements and trace ID propagation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(TracingMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS in Vapor\nDESCRIPTION: This code snippet shows how to enable TLS (SSL) for the Vapor HTTP server using the `app.http.server.configuration.tlsConfiguration` property. It loads the certificate and private key from PEM files using NIOSSL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Enable TLS.\napp.http.server.configuration.tlsConfiguration = .makeServerConfiguration(\n    certificateChain: try NIOSSLCertificate.fromPEMFile(\"/path/to/cert.pem\").map { .certificate($0) },\n    privateKey: .privateKey(try NIOSSLPrivateKey(file: \"/path/to/key.pem\", format: .pem))\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example with JSON Content\nDESCRIPTION: This is an example of HTTP POST request with `application/json` content type.  The `content-length` header specifies the length of the JSON data in the body. The body contains a simple JSON object with a `hello` key and `world` value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /greeting HTTP/1.1\ncontent-type: application/json\ncontent-length: 18\n\n{\"hello\": \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Content Hooks Implementation in Swift\nDESCRIPTION: Shows the implementation of the `beforeDecode` and `afterDecode` hooks. These methods allow custom logic to be executed before and after a `Content` type is decoded. The example trims whitespace from the `name` property and throws an error if the name is empty after trimming. `mutating` is needed for structs, but not for classes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// 在此内容被解码后运行。\n// 此内容解码后运行。只有 Struct 才需要 'mutating'，而 Class 则不需要。\nmutating func afterDecode() throws {\n    // 名称可能没有传入，但如果传入了，那就不能是空字符串。\n    self.name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines)\n    if let name = self.name, name.isEmpty {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n}\n\n// 在对该内容进行编码之前运行。只有 Struct 才需要 'mutating'，而 Class 则不需要。\nmutating func beforeEncode() throws {\n    // 必须*总是*传递一个名称回来，它不能是一个空字符串。\n    guard \n        let name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines), \n        !name.isEmpty \n    else {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n    self.name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncResponseEncodable for HTML Struct in Swift\nDESCRIPTION: Implements the `AsyncResponseEncodable` protocol for the `HTML` struct. This asynchronous version is suitable for `async`/`await` based routes, and sets the `Content-Type` header to `text/html` and uses the `value` property as the response body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: AsyncResponseEncodable {\n  public func encodeResponse(for request: Request) async throws -> Response {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return .init(status: .ok, headers: headers, body: .init(string: value))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model Instance and Saving to the Database (EventLoopFuture)\nDESCRIPTION: This code creates a new `Galaxy` from the request's content, saves the model using `create(on:)`, and returns the model. The code uses `EventLoopFuture` for asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"galaxies\") { req -> EventLoopFuture<Galaxy> in\n    let galaxy = try req.content.decode(Galaxy.self)\n    return galaxy.create(on: req.db)\n        .map { galaxy }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom APNS Payload - Swift\nDESCRIPTION: This snippet illustrates how to define a custom `Codable` struct to be used as the payload for an APNS notification, allowing you to send custom data along with the notification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Custom Codable Payload\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global JSON Encoder for Date Encoding\nDESCRIPTION: Demonstrates how to set a global JSON encoder with a custom date encoding strategy. This ensures that all JSON encoding in the application uses UNIX timestamps for dates.  `ContentConfiguration.global.use(encoder: encoder, for: .json)` overrides the default encoder for the `.json` media type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// UNIX タイムスタンプの日付を使用する新しい JSON エンコーダーを作成します。\nlet encoder = JSONEncoder()\nencoder.dateEncodingStrategy = .secondsSince1970\n\n// `.json` メディアタイプで使用されるグローバルエンコーダーを上書きします。\nContentConfiguration.global.use(encoder: encoder, for: .json)\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords using Application in Vapor\nDESCRIPTION: This snippet shows how to hash a password using the `password` helper available on the `Application` object, particularly during application bootup or initialization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try app.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in a Children Relationship in Fluent\nDESCRIPTION: This snippet shows how to create a new model and add it to a children relationship using the `create` method.  This automatically sets the parent ID on the child model, establishing the relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// 添加新模型到关系中。\nlet earth = Planet(name: \"Earth\")\ntry await sun.$planets.create(earth, on: database)\n```\n\n----------------------------------------\n\nTITLE: Adding UserToken Migration to Vapor app in Swift\nDESCRIPTION: Adds the `UserToken.Migration` to the application's migrations, ensuring that the database schema is updated when the application starts. This line of code is typically added in the `configure.swift` file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(UserToken.Migration())\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Swift\nDESCRIPTION: This code snippet demonstrates how to define a Swift enum that conforms to `String`, and `Codable` protocol so it can be used as the type of the `@Enum` property wrapper.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// 动物类型遵循 String，Codable 协议。\nenum Animal: String, Codable {\n    case dog, cat\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware (Ensure Admin User) - Swift (Middleware Protocol)\nDESCRIPTION: This snippet demonstrates how to create a custom middleware to ensure that a user has admin privileges before accessing a route.  It uses the `Middleware` protocol and checks the user's role from the request's authentication data. If the user is not an admin, it throws an unauthorized error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            return request.eventLoop.future(error: Abort(.unauthorized))\n        }\n        return next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Async/Await to EventLoopFuture\nDESCRIPTION: This snippet demonstrates how to convert an async/await function to an EventLoopFuture by creating a promise and completing it with the result of the async function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = request.eventLoop.makePromise(of: String.self)\npromise.completeWithTask {\n    try await someAsyncFunctionThatGetsAString()\n}\nlet futureString: EventLoopFuture<String> = promise.futureResult\n```\n\n----------------------------------------\n\nTITLE: Add Field Foreign Key Constraint Swift\nDESCRIPTION: This snippet demonstrates how to add a foreign key constraint to a field. It requires that all values in the \"star_id\" field match a value in the \"id\" field of the \"stars\" table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Galaxy - HTTP Request\nDESCRIPTION: This HTTP request creates a new Galaxy with the name \"Milky Way\" by sending a POST request to the `/galaxies` endpoint with a JSON payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /galaxies HTTP/1.1\ncontent-length: 21\ncontent-type: application/json\n\n{\n    \"name\": \"Milky Way\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent Database\nDESCRIPTION: This snippet shows how to configure the database using `app.databases` in `configure.swift`.  Replace `<db config>` with the appropriate database configuration (e.g., `.postgres()`, `.sqlite()`) and `<identifier>` with a unique identifier for the database (e.g., `.psql`, `.sqlite`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport Fluent<db>Driver\n\napp.databases.use(<db config>, as: <identifier>)\n```\n\n----------------------------------------\n\nTITLE: Fetching First Model with Fluent in Swift\nDESCRIPTION: This snippet shows how to retrieve the first record matching certain criteria using the `first()` method.  It returns an optional model. If no results are found, it returns nil.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera el primer planeta llamado Earth.\nlet earth = try await Planet.query(on: database)\n    .filter(\\.$name == \"Earth\")\n    .first()\n```\n\n----------------------------------------\n\nTITLE: Decoding Response Content (Swift)\nDESCRIPTION: Shows how to decode the response body using Vapor's `Content` API. The `decode` method is used to convert the response body into a specific Swift type (`MyJSONResponse`). Awaits the response before attempting to decode its content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/json\")\nlet json = try response.content.decode(MyJSONResponse.self)\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with Dynamic Member Lookup in Swift\nDESCRIPTION: This code snippet demonstrates how to access environment variables using dynamic member lookup via `Environment.process`. It retrieves the value of the `FOO` environment variable and prints it to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.process.FOO\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Specifying a Priority for a Job using Async/Await Swift\nDESCRIPTION: This snippet demonstrates how to specify a priority (queue name) when dispatching a queue job using async/await. It dispatches an `EmailJob` to the specified queue with a specified payload, `maxRetryCount` and `delayUntil` parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 1 日後\n    try await req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        )\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Swift\nDESCRIPTION: This snippet showcases how to retrieve environment variables using Vapor's `Environment` API. It uses both the `get` method and the dynamic member lookup via `process` to access environment variables by their names. The result is an optional string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.process.FOO\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Job (Asynchronous)\nDESCRIPTION: This code snippet demonstrates how to create an `AsyncScheduledJob` that will be executed by the queues scheduler. The `run` function contains the asynchronous code to be executed when the job is triggered.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Queues\n\nstruct CleanupJob: AsyncScheduledJob {\n    // Add extra services here via dependency injection, if you need them.\n\n    func run(context: QueueContext) async throws {\n        // Do some work here, perhaps queue up another job.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queues with Redis Driver Swift\nDESCRIPTION: This snippet demonstrates how to configure Vapor Queues to use the Redis driver within your `configure.swift` file. It establishes a connection to a Redis server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport QueuesRedisDriver\n\ntry app.queues.use(.redis(url: \"redis://127.0.0.1:6379\"))\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing\nDESCRIPTION: This code snippet shows how to hash a password asynchronously using the `req.password.async.hash` method. This prevents blocking the event loop.  The result is a future containing the hashed password.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nreq.password.async.hash(\"vapor\").map { digest in\n    // Handle digest.\n}\n\n// or\n\nlet digest = try await req.password.async.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Starting In-Process Jobs - Swift\nDESCRIPTION: This snippet shows how to start queue workers within the same process as your application. This is done by calling `app.queues.startInProcessJobs(on: .default)`, allowing immediate job execution without requiring a separate worker process. Additionally, `app.queues.startScheduledJobs()` starts scheduled job processing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.queues.startInProcessJobs(on: .default)\n\ntry app.queues.startScheduledJobs()\n```\n\n----------------------------------------\n\nTITLE: Reading and Using a Database Enum in Swift\nDESCRIPTION: This snippet shows how to read a database enum and use it to define a new field in a database schema. The `database.enum(\"planet_type\").read()` method retrieves the enum, which is then used to create a \"type\" field in the \"planets\" table with the specified enum type and `.required` constraint. Two variations are shown: using flatMap and using async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Een voorbeeld van het lezen van een enum en het gebruiken ervan om een nieuw veld te definiëren.\ndatabase.enum(\"planet_type\").read().flatMap { planetType in\n    database.schema(\"planets\")\n        .field(\"type\", planetType, .required)\n        .update()\n}\n\n// Of\n\nlet planetType = try await database.enum(\"planet_type\").read()\ntry await database.schema(\"planets\")\n    .field(\"type\", planetType, .required)\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Session Middleware and Authenticator Usage\nDESCRIPTION: Globally enables session management and user authentication for the Vapor application. The session middleware handles session cookies, and the session authenticator checks for authenticated users in the session.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_43\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(app.sessions.middleware)\napp.middleware.use(User.sessionAuthenticator())\n```\n\n----------------------------------------\n\nTITLE: Setting Max Body Size\nDESCRIPTION: Configures the maximum size for streaming body collection for the entire application. Requests exceeding this size will result in a `413 Payload Too Large` error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Verhoogt de limiet voor het verzamelen van streaming body collectie tot 500kb\napp.routes.defaultMaxBodySize = \"500kb\"\n```\n\n----------------------------------------\n\nTITLE: Add User Migration to App in Vapor (Swift)\nDESCRIPTION: This code adds the User migration to the application's migrations array, ensuring the database schema is created or updated when the application starts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(User.Migration())\n```\n\n----------------------------------------\n\nTITLE: Collecting a file into a ByteBuffer asynchronously with async/await in Vapor\nDESCRIPTION: Reads an entire file into a `ByteBuffer` asynchronously using the `collectFile` method of the `req.fileio` object with `async/await`. The resulting buffer is then printed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// o\nlet buffer = req.fileio.collectFile(at: \"/path/to/file\")\nprint(buffer)\n```\n\n----------------------------------------\n\nTITLE: Querying with Range in Swift\nDESCRIPTION: Demonstrates how to limit the number of results returned using Swift ranges with the `range(_:)` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: self.database)\n    .range(..<5)\n```\n\nLANGUAGE: swift\nCODE:\n```\n.range(2...)\n```\n\n----------------------------------------\n\nTITLE: Generate User Token\nDESCRIPTION: Adds a method to the `User` model to generate a unique token value.  Generates a random 16-byte value, base64 encodes it, and creates a new `UserToken` associated with the user. Requires the User Id to create the relation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nextension User {\n    func generateToken() throws -> UserToken {\n        try .init(\n            value: [UInt8].random(count: 16).base64, \n            userID: self.requireID()\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Future Value with try await future.get() in Swift\nDESCRIPTION: This snippet illustrates how to retrieve the value of a future using `try await future.get()`.  This is an asynchronous operation that suspends execution until the future completes, returning the resolved value or throwing an error if the future fails. This approach requires an `async` context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Wait for the string to be ready\nlet string: String = try await futureString.get()\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: Transaction with Async/Await in Vapor\nDESCRIPTION: This code snippet demonstrates how to use `async`/`await` with database transactions in Vapor. The `req.db.transaction` is called with a closure that uses `try await` to save the `sun` and `sirius` models. If any of the `await` calls throw an error, the transaction will be rolled back. It returns `.ok` to indicate success.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry await req.db.transaction { transaction in\n    try await sun.save(on: transaction)\n    try await sirius.save(on: transaction)\n}\nreturn .ok\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing\nDESCRIPTION: Hashes a password asynchronously using the `req.password.async.hash()` method. This offloads the hashing operation to a background thread to avoid blocking the event loop. Uses map to handle digest.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nreq.password.async.hash(\"vapor\").map { digest in\n    // Handle digest.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Swift using BasicAuthenticator\nDESCRIPTION: This code snippet demonstrates how to implement Basic Authentication in Vapor by creating a struct that conforms to the `BasicAuthenticator` protocol.  The `authenticate` method is implemented to check the provided username and password against hardcoded values.  On successful authentication, a `User` is logged in using `req.auth.login`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: BasicAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        basic: BasicAuthorization,\n        for request: Request\n    ) -> EventLoopFuture<Void> {\n        if basic.username == \"test\" && basic.password == \"secret\" {\n            request.auth.login(User(name: \"Vapor\"))\n        }\n        return request.eventLoop.makeSucceededFuture(())\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Registration with GET\nDESCRIPTION: Registers a route that responds to GET requests for `/foo/bar/baz`. Demonstrates the use of `app.get` with multiple path components.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /foo/bar/baz\napp.get(\"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Signing JWT with Key ID (kid) - Swift\nDESCRIPTION: This snippet shows how to sign a JWT with a specific Key ID (kid) in a Vapor application using Swift. It uses the `req.jwt.sign` method to sign the payload and specifies the `kid` as \"a\". The key associated with this `kid` will be used for the signing process.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await req.jwt.sign(payload, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters (Swift)\nDESCRIPTION: Shows how to access a route parameter using `req.parameters.get`. The parameter name corresponds to the name given in the route definition.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /hello/foo\n// responds to GET /hello/bar\n// ...\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Query API Example in Swift\nDESCRIPTION: This snippet demonstrates a Fluent query to fetch planets, filter by type, sort by name, include the associated star, and retrieve all matching records from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet planets = try await Planet.query(on: database)\n    .filter(\\.$type == .gasGiant)\n    .sort(\\.$name)\n    .with(\\.$star)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Echoing Received Messages via WebSocket (Swift)\nDESCRIPTION: This snippet shows how to echo received text messages back to the sender.  It uses `ws.onText` to register a handler for incoming text messages, and then calls `ws.send(text)` within the handler to send the message back.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Se hace eco de los mensajes recibidos.\nws.onText { ws, text in\n    ws.send(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a file with NonBlockingFileIO in route handler in Swift\nDESCRIPTION: This snippet shows how to open a file directly using NIO's `NonBlockingFileIO` through Vapor within a route handler. It opens the file on the request's event loop. The path to the file is required. Returns a `FileHandle`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// In een route handler.\nlet fileHandle = try await req.application.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: req.eventLoop)\nprint(fileHandle)\n```\n\n----------------------------------------\n\nTITLE: Composing Authenticators in Swift\nDESCRIPTION: This code snippet shows how to compose multiple authenticators for the same user type in Vapor. It chains `UserPasswordAuthenticator` and `UserTokenAuthenticator` in a route group, and then uses `GuardMiddleware` to ensure that a user has been successfully authenticated by either authenticator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\napp.grouped(UserPasswordAuthenticator())\n    .grouped(UserTokenAuthenticator())\n    .grouped(User.guardMiddleware())\n    .post(\"login\") \n{\n    req in\n    let user = try req.auth.require(User.self)\n    // Do something with user.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queues with Redis driver\nDESCRIPTION: Configures Vapor Queues to use the Redis driver. This allows the Vapor application to connect to a Redis server for queue management.  The snippet shows how to set up the connection in the `configure.swift` file using the `app.queues.use` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport QueuesRedisDriver\n\ntry app.queues.use(.redis(url: \"redis://127.0.0.1:6379\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Children Relation (Swift)\nDESCRIPTION: This Swift code adds a `@Children` property to the `Galaxy` model, defining a one-to-many relationship between `Galaxy` and `Star`. It specifies that a Galaxy can have multiple stars.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// この Galaxy に存在するすべての Star\n@Children(for: \\.$galaxy)\nvar stars: [Star]\n```\n\n----------------------------------------\n\nTITLE: Route Handler with Async/Await\nDESCRIPTION: This snippet presents a route handler using Swift's `async`/`await` to achieve the same functionality as the previous example. It simplifies the asynchronous code by using `await` to wait for the database query and update operations. This example illustrates the cleaner syntax provided by async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req async throws -> String in\n    guard let user = try await User.query(on: req.db).first() else {\n        throw Abort(.notFound)\n    }\n    user.lastAccessed = Date()\n    try await user.update(on: req.db)\n    return user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command in Vapor\nDESCRIPTION: This Swift code snippet demonstrates how to create a custom command in Vapor by conforming to the `AsyncCommand` protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct HelloCommand: AsyncCommand {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in an Optional Child Relationship in Fluent\nDESCRIPTION: This snippet shows how to create a new model and add it to an optional child relationship using the `create` method. This automatically sets the parent ID on the child model, establishing the relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// 添加新模型到关系中。\nlet jane = Governor(name: \"Jane Doe\")\ntry await mars.$governor.create(jane, on: database)\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Extension with Export and Import\nDESCRIPTION: Illustrates using `#extend`, `#export`, and `#import` tags to build templates on top of each other. This allows for creating reusable layouts with dynamic content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_9\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"master\"):\n    #export(\"body\"):\n        <p>Welcome to Vapor!</p>\n    #endexport\n#endextend\n```\n\n----------------------------------------\n\nTITLE: Adding PSS Key to JWT Key Collection - Swift\nDESCRIPTION: This snippet shows how to add a PSS (Probabilistic Signature Scheme) key to the JWT key collection in a Vapor application using Swift. The `app.jwt.keys.add` method is used, specifying the `pss` parameter for the key and the `digestAlgorithm` as `.sha256`. PSS is a more secure padding scheme compared to PKCS1v1.5.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(pss: key, digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Parent Relation (Swift)\nDESCRIPTION: This code snippet defines an optional parent relation using the `@OptionalParent` property wrapper.  The relation allows for the parent to be `nil`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Example of an optional parent relation.\n    @OptionalParent(key: \"star_id\")\n    var star: Star?\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Futures with flatMapThrowing and flatMap in Vapor\nDESCRIPTION: This snippet demonstrates how to chain multiple asynchronous operations using `flatMapThrowing` to transform a string to a URL and `flatMap` to make an HTTP request using the Vapor client. It handles potential errors during URL creation using a guard statement.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Assume we have created an HTTP client\nlet client: Client = ... \n\n/// Transform the string to a url, then to a response\nlet futureResponse = futureString.flatMapThrowing { string in\n    guard let url = URL(string: string) else {\n        throw Abort(.badRequest, reason: \"Invalid URL string: \\(string)\")\n    }\n    return url\n}.flatMap { url in\n    client.get(url)\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Decoder Once in Swift\nDESCRIPTION: Demonstrates how to use a custom JSON decoder for a single decoding operation.  It creates a `JSONDecoder`, sets its `dateDecodingStrategy`, and then uses this decoder specifically when decoding the `Hello` struct with `req.content.decode(Hello.self, using: decoder)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// 创建一个新的 JSON 解码器，使用 unix-timestamp 日期的时间戳\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\n\n// 使用自定义解码器对 `Hello` 结构进行解码\nlet hello = try req.content.decode(Hello.self, using: decoder)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSessionAuthenticator in Swift\nDESCRIPTION: Implements an `AsyncSessionAuthenticator` for authenticating users based on session ID using async/await.  It retrieves user information (email in this case) from the session and logs in the user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserSessionAuthenticator: AsyncSessionAuthenticator {\n    typealias User = App.User\n    func authenticate(sessionID: String, for request: Request) async throws {\n        let user = User(email: sessionID)\n        request.auth.login(user)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Structure in Swift\nDESCRIPTION: This snippet demonstrates the basic structure for initiating a database transaction using req.db.transaction in Vapor. It shows how to access the database connection within the closure for performing database operations. Any errors within the closure will cause the transaction to rollback.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nreq.db.transaction { database in\n    // usar la base de datos\n}\n```\n\n----------------------------------------\n\nTITLE: Vapor Package Manifest Example (Package.swift)\nDESCRIPTION: This is an example of a Package.swift manifest file for a Vapor application. It defines the package name, supported platforms (macOS), dependencies (Vapor), and targets (App and AppTests).  The manifest specifies the Swift tools version, package dependencies, and target dependencies to build and test the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Read-Only Service Extension in Vapor\nDESCRIPTION: This code snippet demonstrates how to create a read-only service by extending the `Request` object in Vapor. It defines a `MyAPI` struct that depends on a `Client` and adds a computed property `myAPI` to the `Request` extension. This allows easy access to the API from request handlers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyAPI {\n    let client: Client\n\n    func foos() async throws -> [String] { ... }\n}\n\nextension Request {\n    var myAPI: MyAPI {\n        .init(client: self.client)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware Globally in Vapor\nDESCRIPTION: Registers a middleware globally for every route using `app.middleware.use` in the `configure(_:)` function. This ensures the middleware is applied to all incoming requests and outgoing responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(MyMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Middleware (Synchronous) in Vapor (Swift)\nDESCRIPTION: Shows how to create custom middleware that conforms to the `Middleware` protocol to block access to a user if they are not an administrator.  This middleware checks the user's role from the request's authentication and returns an unauthorized error if the user is not an admin.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            return request.eventLoop.future(error: Abort(.unauthorized))\n        }\n        return next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Definition\nDESCRIPTION: Defines a struct representing a JWT payload with user ID and expiration claim, conforming to `Content`, `Authenticatable`, and `JWTPayload` protocols.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_50\n\nLANGUAGE: swift\nCODE:\n```\n// Example JWT payload.\nstruct SessionToken: Content, Authenticatable, JWTPayload {\n\n    // Constants\n    let expirationTime: TimeInterval = 60 * 15\n    \n    // Token Data\n    var expiration: ExpirationClaim\n    var userId: UUID\n    \n    init(userId: UUID) {\n        self.userId = userId\n        self.expiration = ExpirationClaim(value: Date().addingTimeInterval(expirationTime))\n    \n    }\n    \n    init(with user: User) throws {\n        self.userId = try user.requireID()\n        self.expiration = ExpirationClaim(value: Date().addingTimeInterval(expirationTime))\n    }\n\n    func verify(using algorithm: some JWTAlgorithm) throws {\n        try expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Response (JSON)\nDESCRIPTION: This snippet shows the structure of a JSON response containing paginated data. The `items` key holds the array of results, and the `metadata` key provides information about the current page, number of results per page, and total number of results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [...],\n    \"metadata\": {\n        \"page\": 2,\n        \"per\": 5,\n        \"total\": 8\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter by Value Swift\nDESCRIPTION: This snippet demonstrates how to filter planets by their type, specifically selecting only those that are gas giants.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Een voorbeeld van het filteren van veldwaarden.\nPlanet.query(on: database).filter(\\.$type == .gasGiant)\n```\n\n----------------------------------------\n\nTITLE: Define String Representable Enum (Swift)\nDESCRIPTION: This Swift code defines a string-backed enum named `Animal` that conforms to `Codable`. It then defines a `Pet` model with an `@Enum` property named `type` that stores the animal type as a native database enum.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// String representable, Codable enum voor diersoorten.\nenum Animal: String, Codable {\n    case dog, cat\n}\n\nfinal class Pet: Model {\n    // Slaat het type dier op als een native database enum.\n    @Enum(key: \"type\")\n    var type: Animal\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier in Fluent Model\nDESCRIPTION: This snippet shows how to define the identifier field (`id`) in a Fluent model using the `@ID` property wrapper.  This makes the field the primary key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n@ID(key: .id)\nvar id: UUID?\n```\n\n----------------------------------------\n\nTITLE: Detaching a Model from a Siblings Relation (Swift)\nDESCRIPTION: This code demonstrates how to detach a model from a siblings relation using the `detach()` method. This deletes the corresponding pivot model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Removes the model from the relation.\ntry await earth.$tags.detach(inhabited, on: database)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncBearerAuthenticator in Swift\nDESCRIPTION: This Swift code implements an `AsyncBearerAuthenticator` in Vapor using `async`/`await`. It checks the bearer token against a hard-coded value. If the token matches, a `User` is logged in using `request.auth.login`. This example uses the `async throws` syntax for asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: AsyncBearerAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        bearer: BearerAuthorization,\n        for request: Request\n    ) async throws {\n       if bearer.token == \"foo\" {\n           request.auth.login(User(name: \"Vapor\"))\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Registration - Swift\nDESCRIPTION: This snippet demonstrates how to register routes directly on the Application instance in Vapor 4.  It shows a simple GET route that returns a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    return \"Hello, world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Connection in Swift\nDESCRIPTION: Configures a secure connection to the Heroku Postgres database using TLS. It reads the DATABASE_URL environment variable, creates a TLS configuration that skips certificate verification, configures the Postgres connection, and adds the Postgres database to the application's databases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    var tlsConfig: TLSConfiguration = .makeClientConfiguration()\n    tlsConfig.certificateVerification = .none\n    let nioSSLContext = try NIOSSLContext(configuration: tlsConfig)\n\n    var postgresConfig = try SQLPostgresConfiguration(url: databaseURL)\n    postgresConfig.coreConfiguration.tls = .require(nioSSLContext)\n\n    app.databases.use(.postgres(configuration: postgresConfig), as: .psql)\n} else {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Sessions in Vapor\nDESCRIPTION: This snippet shows how to configure Vapor to use in-memory sessions. In-memory sessions are ideal for testing as they do not persist between application launches and require no configuration. The session driver should be configured before adding the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.sessions.use(.memory)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response Setting Session Cookie\nDESCRIPTION: This is an example HTTP response after setting session data. It shows the `set-cookie` header containing the session cookie. The browser will automatically include this cookie in subsequent requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 0\nset-cookie: vapor-session=123; Expires=Fri, 10 Apr 2020 21:08:09 GMT; Path=/\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs using EventLoopFuture Swift\nDESCRIPTION: This snippet demonstrates how to dispatch a queue job using `EventLoopFuture` within a Vapor route handler. It dispatches an `EmailJob` with a specified payload and maps the result to a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\")\n        ).map { \"done\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Session Data - Swift\nDESCRIPTION: Retrieves a value from the session data.  This example route handler retrieves the value associated with the key \"name\" from `req.session.data`. If the key is not found, it returns \"n/a\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"get\") { req -> String in\n    req.session.data[\"name\"] ?? \"n/a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Job with AsyncJob Protocol\nDESCRIPTION: Demonstrates how to define an asynchronous job using the `AsyncJob` protocol. This is for use with `async`/`await` Swift concurrency. The `dequeue` and `error` methods are defined as `async throws`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nstruct EmailJob: AsyncJob {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) async throws {\n        // Dit is waar je de e-mail zou sturen\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) async throws {\n        // Als u geen fouten wilt afhandelen, kunt u gewoon terugkeren. Je kunt deze functie ook helemaal weglaten. \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in Vapor\nDESCRIPTION: Configures and registers CORS (Cross-Origin Resource Sharing) middleware to allow web browsers to safely access resources from different origins. It defines allowed origins, methods, and headers. It's important to register CORS middleware before ErrorMiddleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet corsConfiguration = CORSMiddleware.Configuration(\n    allowedOrigin: .all,\n    allowedMethods: [.GET, .POST, .PUT, .OPTIONS, .DELETE, .PATCH],\n    allowedHeaders: [.accept, .authorization, .contentType, .origin, .xRequestedWith, .userAgent, .accessControlAllowOrigin]\n)\nlet cors = CORSMiddleware(configuration: corsConfiguration)\nlet error = ErrorMiddleware.default(environment: app.environment)\n// 清除现有的 middleware。\napp.middleware = .init()\napp.middleware.use(cors)\napp.middleware.use(error)\n```\n\n----------------------------------------\n\nTITLE: Receiving Binary Messages via WebSocket in Vapor\nDESCRIPTION: This code snippet illustrates handling incoming binary messages on a WebSocket connection using Vapor. The `ws.onBinary` method is used to register a closure that is executed when a binary message is received. The closure receives the WebSocket connection (`ws`) and the received binary data (`binary`) as an array of `UInt8`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nws.onBinary { ws, binary in\n    // [UInt8] received by this WebSocket.\n    print(binary)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Descriptions\nDESCRIPTION: This code snippet demonstrates adding custom failure descriptions to validations.  The `customFailureDescription` argument is used to override the default error message when a validation fails. This allows you to provide more user-friendly and specific error messages.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n\t\"name\",\n\tas: String.self,\n\tis: !.empty,\n\tcustomFailureDescription: \"Provided name is empty!\"\n)\nvalidations.add(\n\t\"username\",\n\tas: String.self,\n\tis: .count(3...) && .alphanumeric,\n\tcustomFailureDescription: \"Provided username is invalid!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Bcrypt\nDESCRIPTION: This snippet shows how to configure Vapor to use Bcrypt for password hashing.  Bcrypt is the default setting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\napp.passwords.use(.bcrypt)\n```\n\n----------------------------------------\n\nTITLE: Adding Integer Range Validation\nDESCRIPTION: This code snippet shows how to add an integer range validation to a `Validations` collection, ensuring that the 'age' field is within the specified range (13 or greater).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"age\", as: Int.self, is: .range(13...))\n```\n\n----------------------------------------\n\nTITLE: Sending a Text Message through a WebSocket in Vapor\nDESCRIPTION: This code snippet illustrates sending a text message via an established WebSocket connection in Vapor. It uses the `ws.send` method, passing a `String` as the message content. This results in a text message being sent over the WebSocket connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nws.send(\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Stream request body without collecting\nDESCRIPTION: This snippet shows how to stream the request body without collecting it into a buffer. This is useful for large requests like file uploads.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// 请求正文不会被收集到缓冲区中。\napp.on(.POST, \"upload\", body: .stream) { req in\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Closure Event in Vapor\nDESCRIPTION: This code snippet demonstrates how to be notified when a WebSocket connection is closed, regardless of whether the client or server initiated the closure. The `ws.onClose.whenComplete` method registers a closure that is executed when the WebSocket connection is closed. The closure receives a `Result` indicating success or failure of the closing operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nws.onClose.whenComplete { result in\n    // Succeeded or failed to close.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Routes in Vapor (Swift)\nDESCRIPTION: This snippet shows how to add metadata to a route's `userInfo` dictionary, such as a description. The `description()` method is used to set the description of the route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req in\n\t...\n}.description(\"says hello\")\n```\n\n----------------------------------------\n\nTITLE: Using Redis Sessions in Vapor\nDESCRIPTION: This snippet demonstrates how to configure Vapor to use Redis for storing session data. Assumes Redis has already been configured. The session driver should be configured before adding the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Redis\n\napp.sessions.use(.redis)\n```\n\n----------------------------------------\n\nTITLE: Define a Migration (Swift)\nDESCRIPTION: This code snippet demonstrates how to define a migration in Vapor using the `Migration` protocol. The `prepare` function defines the database changes, and the `revert` function reverses those changes if possible. This example shows a basic structure that can be expanded to perform actual database operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Een voorbeeld migratie.\nstruct MyMigration: Migration {\n    func prepare(on database: Database) -> EventLoopFuture<Void> {\n        // Breng een wijziging aan in de database.\n    }\n\n    func revert(on database: Database) -> EventLoopFuture<Void> {\n    \t// Maak de verandering in `prepare` ongedaan, indien mogelijk.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Bootstrap in Vapor\nDESCRIPTION: This shows how to override Vapor's default logging behavior by registering a custom logging handler during the bootstrapping process. Here, `StreamLogHandler.standardOutput` is used to log messages to the standard output. This allows full control over the logging backend.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Logging\n\nLoggingSystem.bootstrap { label in\n    StreamLogHandler.standardOutput(label: label)\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding DTO and Creating Model (Swift)\nDESCRIPTION: This code shows how to decode a DTO from a request and then create a `Planet` model. The `star` property of the DTO, which contains the parent's ID, is used to initialize the `$star.id` property of the `Planet` model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet planetData = try req.content.decode(PlanetDTO.self)\nlet planet = Planet(id: planetData.id, name: planetData.name, starID: planetData.star)\ntry await planet.create(on: req.db)\n```\n\n----------------------------------------\n\nTITLE: Creating a ScheduledJob in Swift\nDESCRIPTION: This code snippet demonstrates how to create a `ScheduledJob` and `AsyncScheduledJob` in Swift. It shows the basic structure of a scheduled job, including the `run` method where the job's logic is executed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Queues\n\nstruct CleanupJob: ScheduledJob {\n    // Añade servicios adicionales aquí usando inyección de dependencias, si los necesitas.\n\n    func run(context: QueueContext) -> EventLoopFuture<Void> {\n        // Haz algún trabajo aquí, tal vez encolando otro trabajo.\n        return context.eventLoop.makeSucceededFuture(())\n    }\n}\n\nstruct CleanupJob: AsyncScheduledJob {\n    // Añade servicios adicionales aquí usando inyección de dependencias, si los necesitas.\n\n    func run(context: QueueContext) async throws {\n        // Haz algún trabajo aquí, tal vez encolando otro trabajo.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending QueueName in Swift\nDESCRIPTION: This code snippet extends the `QueueName` enum to define a custom queue name for emails. This allows for categorizing and prioritizing jobs based on their purpose.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nextension QueueName {\n    static let emails = QueueName(string: \"emails\")\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Creating Models in Swift\nDESCRIPTION: Shows how to efficiently create multiple models in a single database operation using the `create(on:)` method on an array of models. This improves performance for bulk inserts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Example of batch create.\n[earth, mars].create(on: database)\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration with TLS (HTTPS)\nDESCRIPTION: This snippet demonstrates configuring Nginx with TLS/HTTPS, including setting up SSL certificates, protocols, and ciphers for secure communication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nserver {\n    ...\n\n    listen 443 ssl;\n\n    ssl_certificate /etc/letsencrypt/live/hello.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/hello.com/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    add_header Strict-Transport-Security max-age=15768000;\n\n    ...\n\n    location @proxy {\n       ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Password Protected Login Route\nDESCRIPTION: Creates a password-protected login route using Basic Authentication via `ModelAuthenticatable`.  Groups the application with `User.authenticator()` to require authentication. The login endpoint will require a user to be authenticated to access it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator())\npasswordProtected.post(\"login\") { req -> User in\n    try req.auth.require(User.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Filter by Field Swift\nDESCRIPTION: This example shows how to filter users where their first name is equal to their last name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Alle gebruikers met dezelfde voor- en achternaam.\nUser.query(on: database)\n    .filter(\\.$firstName == \\.$lastName)\n```\n\n----------------------------------------\n\nTITLE: Running Blocking Code in Background Thread in Vapor\nDESCRIPTION: This snippet demonstrates how to dispatch blocking work to a background thread using `req.application.threadPool.runIfActive`, preventing the event loop from being blocked. Promises are used to notify the event loop when the work is complete.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<String> in\n    /// Dispatch some work to happen on a background thread\n    return req.application.threadPool.runIfActive(eventLoop: req.eventLoop) {\n        /// Puts the background thread to sleep\n        /// This will not affect any of the event loops\n        sleep(5)\n        \n        /// When the \"blocking work\" has completed,\n        /// return the result.\n        return \"Hello world!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Testing with AsyncTestQueuesDriver in Swift\nDESCRIPTION: This code snippet demonstrates how to set up a testing environment for Vapor Queues using the `AsyncTestQueuesDriver`. It overrides the default queues driver with the test driver to ensure deterministic behavior in tests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfinal class UserCreationServiceTests: XCTestCase {\n    var app: Application!\n\n    override func setUp() async throws {\n        self.app = try await Application.make(.testing)\n        try await configure(app)\n\n        // Sobreescribe el controlador utilizado para pruebas\n        app.queues.use(.asyncTest)\n    }\n\n    override func tearDown() async throws {\n        try await self.app.asyncShutdown()\n        self.app = nil\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with 'with' Method - Swift\nDESCRIPTION: This code snippet demonstrates how to use eager loading to automatically load the stars for each galaxy when querying the database. The `with(\\$stars)` call tells Fluent to fetch the related stars along with the galaxies, optimizing database queries.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"galaxies\") { req in\n    try await Galaxy.query(on: req.db).with(\\$stars).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Save Model (Swift)\nDESCRIPTION: This Swift code snippet shows how to save a model instance to the database using the `save(on:)` method. This method internally calls `create` or `update` based on whether the model exists in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nplanet.save(on: database)\n```\n\n----------------------------------------\n\nTITLE: Leaf Loop for Rendering Array\nDESCRIPTION: Demonstrates iterating over an array in a Leaf template using the `#for` tag. The example loops through the `planets` array and displays each planet's name in a list item. Shows basic HTML integration within the loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_10\n\nLANGUAGE: leaf\nCODE:\n```\nPlanets:\n<ul>\n#for(planet in planets):\n    <li>#(planet)</li>\n#endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring the NowTag in Vapor's configure.swift\nDESCRIPTION: This snippet shows how to register the custom `NowTag` with Vapor's Leaf renderer.  This is done by adding the tag to the `app.leaf.tags` dictionary.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.leaf.tags[\"now\"] = NowTag()\n```\n\n----------------------------------------\n\nTITLE: Nest route groups with path prefixes\nDESCRIPTION: This snippet shows how to nest route groups to create more complex path structures, like CRUD APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { ... }\n    // POST /users\n    users.post { ... }\n\n    users.group(\":id\") { user in\n        // GET /users/:id\n        user.get { ... }\n        // PATCH /users/:id\n        user.patch { ... }\n        // PUT /users/:id\n        user.put { ... }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Sessions - Swift\nDESCRIPTION: Configures the application to use in-memory sessions. In-memory sessions are suitable for testing and development, as they do not persist data between application restarts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.sessions.use(.memory)\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Optional Future with Error (Swift)\nDESCRIPTION: Illustrates using the `unwrap(or:)` helper extension to unwrap an optional future and throw an `Abort` error if the future results in `nil`. If the future has a value it is passed to the `flatMap` closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nUser.find(id, on: db)\n    .unwrap(or: Abort(.notFound))\n    .flatMap \n{\n    user in\n    // Non-optional User supplied to closure.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Succeeded or Failed Futures in Vapor\nDESCRIPTION: This code shows how to create a pre-succeeded or pre-failed `EventLoopFuture<String>` using `eventLoop.makeSucceededFuture` and `eventLoop.makeFailedFuture`. The `makeSucceededFuture` method creates a future that is already completed with a specified value, while `makeFailedFuture` creates a future that is already completed with an error. These methods are useful for returning immediate results or handling errors.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Creëer een voorgespiegelde toekomst.\nlet futureString: EventLoopFuture<String> = eventLoop.makeSucceededFuture(\"hello\")\n\n// Creëer een vooraf mislukte toekomst.\nlet futureString: EventLoopFuture<String> = eventLoop.makeFailedFuture(error)\n```\n\n----------------------------------------\n\nTITLE: Logging in a Request Handler (Swift)\nDESCRIPTION: Demonstrates how to access the request-specific logger within a route handler and log an informational message. This logger includes a unique UUID for request tracing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    req.logger.info(\"Hello, logs!\")\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Text Messages (Swift)\nDESCRIPTION: This snippet demonstrates how to handle incoming text messages using the `ws.onText` callback. It registers a closure that is called whenever a text message is received on the WebSocket. The closure receives the WebSocket instance and the received text as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    // String ontvangen door deze WebSocket.\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Leaf in Vapor\nDESCRIPTION: Configures the Vapor application to use Leaf as the default view renderer. This snippet demonstrates how to register Leaf with Vapor's view system. After this configuration, all view rendering requests will be handled by the Leaf renderer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.pl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Leaf\n\napp.views.use(.leaf)\n```\n\n----------------------------------------\n\nTITLE: Decoding URL Query Parameters\nDESCRIPTION: Decodes a URL query string into a `Hello` struct, and returns a greeting based on the decoded name. If no name is provided in the query, it returns a greeting to \"Anonymous\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in \n    let hello = try req.query.decode(Hello.self)\n    return \"Hello, \\(hello.name ?? \\\"Anonymous\\\")\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Pivot Model for Siblings Relation (Swift)\nDESCRIPTION: This snippet defines a pivot model for a many-to-many relation between `Planet` and `Tag`. It includes two `@Parent` relations, one for each model to be related.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nenum PlanetTagStatus: String, Codable { case accepted, pending }\n\n// Example of a pivot model.\nfinal class PlanetTag: Model {\n    static let schema = \"planet+tag\"\n    \n    @ID(key: .id)\n    var id: UUID?\n\n    @Parent(key: \"planet_id\")\n    var planet: Planet\n\n    @Parent(key: \"tag_id\")\n    var tag: Tag\n\n    @OptionalField(key: \"comments\")\n    var comments: String?\n\n    @OptionalEnum(key: \"status\")\n    var status: PlanetTagStatus?\n\n    init() { }\n\n    init(id: UUID? = nil, planet: Planet, tag: Tag, comments: String?, status: PlanetTagStatus?) throws {\n        self.id = id\n        self.$planet.id = try planet.requireID()\n        self.$tag.id = try tag.requireID()\n        self.comments = comments\n        self.status = status\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in an Optional Child Relationship (Swift)\nDESCRIPTION: This shows how to add a new model to an existing optional child relationship using the create method. This establishes the relationship by setting the foreign key in the child model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Ejemplo de añadir un nuevo modelo a una relación.\nlet jane = Governor(name: \"Jane Doe\")\ntry await mars.$governor.create(jane, on: database)\n```\n\n----------------------------------------\n\nTITLE: Accessing .env Variable in Swift\nDESCRIPTION: This snippet demonstrates how to access environment variables loaded from a `.env` file within a Swift/Vapor application. The `.env` file populates `Environment.get` with values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Credentials\nDESCRIPTION: This snippet shows how to configure the PostgreSQL database connection in your `configure.swift` file. It uses the `.postgres` method to specify the hostname, username, password, database name, and TLS settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport FluentPostgresDriver\n\napp.databases.use(\n    .postgres(\n        configuration: .init(\n            hostname: \"localhost\",\n            username: \"vapor\",\n            password: \"vapor\",\n            database: \"vapor\",\n            tls: .disable\n        )\n    ),\n    as: .psql\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Release Command in fly.toml\nDESCRIPTION: This configuration snippet demonstrates how to use the `release_command` within the `fly.toml` file to execute database migrations before running the main server process. This ensures that the database schema is up-to-date before the application starts handling requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n release_command = \"migrate -y\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Children Relation (Swift)\nDESCRIPTION: This snippet shows how to define a children relation using the `@Children` property wrapper. It creates a one-to-many relation between two models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Star: Model {\n    // Example of a children relation.\n    @Children(for: \\.$star)\n    var planets: [Planet]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Migration - Swift\nDESCRIPTION: This code demonstrates a migration to update the \"users\" table by replacing the `name` field with `first_name` and `last_name` fields. It also shows how to transfer the data from the old `name` field to the new fields using raw SQL. Note the potential for database-specific syntax in the SQL snippets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserNameMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"first_name\", .string, .required)\n            .field(\"last_name\", .string, .required)\n            .update()\n\n        // It is not currently possible to express this update without using custom SQL.\n        // This also doesn't try to deal with splitting the name into first and last,\n        // as that requires database-specific syntax.\n        try await User.query(on: database)\n            .set([\"first_name\": .sql(embed: \"name\")])\n            .run()\n\n        try await database.schema(\"users\")\n            .deleteField(\"name\")\n            .update()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"name\", .string, .required)\n            .update()\n        try await User.query(on: database)\n            .set([\"name\": .sql(embed: \"concat(first_name, ' ', last_name)\")])\n            .run()\n        try await database.schema(\"users\")\n            .deleteField(\"first_name\")\n            .deleteField(\"last_name\")\n            .update()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Job with the Job Protocol in Vapor Queues\nDESCRIPTION: This code snippet shows how to define a job using the `Job` protocol in Vapor Queues. The `EmailJob` struct conforms to the `Job` protocol, defines its `Payload` type, and implements the `dequeue` and `error` methods for processing and error handling, respectively. Payload must conform to Codable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor \nimport Foundation \nimport Queues \n\nstruct Email: Codable {\n    let to: String\n    let message: String\n}\n\nstruct EmailJob: Job {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) -> EventLoopFuture<Void> {\n        // Dit is waar je de e-mail zou sturen\n        return context.eventLoop.future()\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) -> EventLoopFuture<Void> {\n        // Als u geen fouten wilt afhandelen, kunt u gewoon een toekomst teruggeven. U kunt deze functie ook helemaal weglaten. \n        return context.eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Fluent Model\nDESCRIPTION: This snippet defines a `Galaxy` model using Fluent. It includes an `@ID` property for the unique identifier and a `@Field` property for the galaxy's name. The `schema` property defines the table or collection name in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nfinal class Galaxy: Model {\n    // テーブルまたはコレクションの名前\n    static let schema = \"galaxies\"\n\n    // Galaxy の一意の識別子\n    @ID(key: .id)\n    var id: UUID?\n\n    // 銀河の名前\n    @Field(key: \"name\")\n    var name: String\n\n    // 空の Galaxy インスタンスを作成\n    init() { }\n\n    // すべてのプロパティが設定された新しい Galaxy インスタンスを作成\n    init(id: UUID? = nil, name: String) {\n        self.id = id\n        self.name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations (Swift)\nDESCRIPTION: This Swift code adds the `CreateGalaxy` and `CreateStar` migrations to the application's migrations list. The order is important because `CreateStar` depends on the `Galaxy` schema.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(CreateGalaxy())\napp.migrations.add(CreateStar())\n```\n\n----------------------------------------\n\nTITLE: Adding Arbitrary SQL Constraint (Swift)\nDESCRIPTION: This code snippet adds an arbitrary SQL constraint to a schema using Fluent.  It sets the default value of the `active` boolean field to `true`. This snippet demonstrates how to use the `.sql` modifier to add custom SQL configurations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"active\", .bool, .required, .sql(.default(true)))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Job (Synchronous)\nDESCRIPTION: This code snippet demonstrates how to create a `ScheduledJob` that will be executed by the queues scheduler.  The `run` function contains the code to be executed when the job is triggered. It needs to return an `EventLoopFuture<Void>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Queues\n\nstruct CleanupJob: ScheduledJob {\n    // Add extra services here via dependency injection, if you need them.\n\n    func run(context: QueueContext) -> EventLoopFuture<Void> {\n        // Do some work here, perhaps queue up another job.\n        return context.eventLoop.makeSucceededFuture(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collect File into Buffer Vapor\nDESCRIPTION: This snippet showcases how to read a file into a buffer using Vapor's `collectFile` method. It reads the entire file content into a `ByteBuffer`. Two ways are shown: using `EventLoopFuture` and using `async/await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Reads the file into a buffer.\nreq.fileio.collectFile(at: \"/path/to/file\").map { buffer in \n    print(buffer) // ByteBuffer\n}\n\n// or\n\nlet buffer = req.fileio.collectFile(at: \"/path/to/file\")\nprint(buffer)\n```\n\n----------------------------------------\n\nTITLE: Using HTML as Response Type in Route in Swift\nDESCRIPTION: This code shows how to use the `HTML` struct as a response type in a Vapor route. The route returns an `HTML` instance, which will be automatically encoded into an HTTP response with the correct `Content-Type` header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\napp.get { _ in\n  HTML(value: \"\"\"\n  <html>\n    <body>\n      <h1>Hello, World!</h1>\n    </body>\n  </html>\n  \"\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RSA with SHA-256 signer (Swift)\nDESCRIPTION: This code demonstrates how to add RSA with SHA-256 signer to your Vapor application's JWT configuration using a RSA public key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n// RSA toevoegen met SHA-256 ondertekenaar.\ntry app.jwt.signers.use(.rs256(key: .public(pem: rsaPublicKey)))\n```\n\n----------------------------------------\n\nTITLE: Conforming to AbortError\nDESCRIPTION: This snippet demonstrates how to conform a custom error type (`MyError`) to the `AbortError` protocol. This allows you to specify the HTTP status code and reason for the error that will be returned to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nenum MyError {\n    case userNotLoggedIn\n    case invalidEmail(String)\n}\n\nextension MyError: AbortError {\n    var reason: String {\n        switch self {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\n\"\n        }\n    }\n\n    var status: HTTPStatus {\n        switch self {\n        case .userNotLoggedIn:\n            return .unauthorized\n        case .invalidEmail:\n            return .badRequest\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Failure Description - Swift\nDESCRIPTION: This code snippet shows how to add a custom error message for a validation rule. If the `name` field is empty, the validation will fail and return the provided custom error message: \"Provided name is empty!\"\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"name\", as: String.self, is: !.empty, customFailureDescription: \"Provided name is empty!\")\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs from an Application Object in Swift\nDESCRIPTION: This code snippet shows how to dispatch a job to a specific queue (`emails`) from within an `AsyncCommand` using the `Application` object. It's used when accessing queues outside of a request context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue(.emails)\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\"),\n                maxRetryCount: 3,\n                delayUntil: futureDate\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a custom JSON Decoder for decoding\nDESCRIPTION: Shows how to use a custom JSON decoder for a single decoding operation. This allows you to override the default decoder with specific configurations for a particular request.  The example configures a decoder to use UNIX timestamps for date decoding.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// UNIX タイムスタンプの日付を使用する新しい JSON デコーダーを作成します。\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\n\n// カスタムデコーダーを使用して Hello 構造体をデコードします。\nlet hello = try req.content.decode(Hello.self, using: decoder)\n```\n\n----------------------------------------\n\nTITLE: Decoding Content from HTTP Response (Swift)\nDESCRIPTION: Demonstrates how to decode the response body using the `Content` API. It fetches JSON data from a URL and decodes it into a custom `MyJSONResponse` struct or class.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/json\")\nlet json = try response.content.decode(MyJSONResponse.self)\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema Field with a Foreign Key Reference in Fluent\nDESCRIPTION: This example shows how to define a schema field that references another table using the `.references` constraint. This ensures that the `star_id` field in the `Planet` schema is a valid ID from the `star` table. The `.required` constraint is also shown, making the relationship mandatory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .required, .references(\"star\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Protect Login Route with Password Authentication in Vapor (Swift)\nDESCRIPTION: This code creates a password-protected route group using User.authenticator() and defines a POST /login endpoint. It requires authentication using the User model, returning the authenticated user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator())\npasswordProtected.post(\"login\") { req -> User in\n    try req.auth.require(User.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortError Protocol (Swift)\nDESCRIPTION: Demonstrates how to implement the `AbortError` protocol to customize the HTTP status and reason for specific errors. The example defines a custom error enum `MyError` and conforms it to `AbortError` by providing a `reason` and `status` computed property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nenum MyError {\n    case userNotLoggedIn\n    case invalidEmail(String)\n}\n\nextension MyError: AbortError {\n    var reason: String {\n        switch self {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var status: HTTPStatus {\n        switch self {\n        case .userNotLoggedIn:\n            return .unauthorized\n        case .invalidEmail:\n            return .badRequest\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Tokens in Swift\nDESCRIPTION: This code snippet adds a method to the User model to generate a new UserToken. It creates a random token value using [UInt8].random(count:) and encodes it as a base64 string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nextension User {\n    func generateToken() throws -> UserToken {\n        try .init(\n            value: [UInt8].random(count: 16).base64, \n            userID: self.requireID()\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLite Driver Dependency\nDESCRIPTION: This snippet adds the Fluent SQLite driver as a dependency to your Swift package. This enables your Vapor app to interact with SQLite databases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent-sqlite-driver.git\", from: \"4.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Decoding Planet DTO and Creating Model (Swift)\nDESCRIPTION: Demonstrates decoding a PlanetDTO from a request and creating a Planet model. This ensures that the received data is correctly mapped to the model for storage in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet planetData = try req.content.decode(PlanetDTO.self)\nlet planet = Planet(id: planetData.id, name: planetData.name, starID: planetData.star)\ntry await planet.create(on: req.db)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Redis - Swift\nDESCRIPTION: This code snippet demonstrates how to retrieve a value from Redis using the `get` method on the `RedisClient` instance. It shows both the `wait()` (synchronous) and `await` (asynchronous) approaches. It assumes that the key 'my_key' exists and stores a String value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet value = try app.redis.get(\"my_key\", as: String.self).wait()\nprint(value)\n// Optional(\"my_value\")\n\n// of\n\nlet value = try await app.redis.get(\"my_key\", as: String.self)\nprint(value)\n// Optional(\"my_value\")\n```\n\n----------------------------------------\n\nTITLE: Setting up a WebSocket Server in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to add a WebSocket endpoint to an existing Vapor application using the `app.webSocket` method. It accepts a route and a closure that is executed when a new WebSocket connection is established. The closure receives the HTTP request and the newly established WebSocket connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.webSocket(\"echo\") { req, ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Route with parameter component\nDESCRIPTION: This snippet demonstrates how to define a route with a dynamic parameter using the `:` prefix.  The route matches `/foo/:bar/baz`, and retrieves the value of `:bar` from `req.parameters`\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /foo/bar/baz\n// responde a GET /foo/qux/baz\n// ...\napp.get(\"foo\", \":bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password with Bcrypt in Vapor\nDESCRIPTION: This snippet demonstrates how to hash a password using Bcrypt in Vapor. Bcrypt is a password hashing algorithm that uses a random salt to ensure that hashing the same password multiple times will not result in the same digest. It imports the Vapor library and hashes the string \"test\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = try Bcrypt.hash(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Job with Queues - Swift\nDESCRIPTION: This snippet demonstrates how to register a `Job` with Vapor Queues by adding it to the application's configuration. An instance of the `EmailJob` is created and added to the `app.queues`, making it available for dispatching within the queue system. This ensures the job is recognized and handled by the queue workers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// 注册 Job\nlet emailJob = EmailJob()\napp.queues.add(emailJob)\n```\n\n----------------------------------------\n\nTITLE: Creating a User Schema (Swift)\nDESCRIPTION: This migration creates a `users` table with an `id` (UUID) as a non-auto-incrementing identifier, and a `name` (String) that is required. The migration uses Vapor's schema builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"id\", .uuid, .identifier(auto: false))\n            .field(\"name\", .string, .required)\n            .create()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket message using async/await in Vapor\nDESCRIPTION: This snippet demonstrates how to send a message via WebSocket using `async`/`await` for managing the asynchronous operation.  The `await ws.send(...)` line ensures that the code execution pauses until the message sending is complete before proceeding.  This simplifies handling asynchronous tasks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.send(...)\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results (Swift)\nDESCRIPTION: Demonstrates sorting query results using the `sort` method. It retrieves planets and sorts them by their name.  Requires a `Planet` model with a `name` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera los planetas ordenados por su nombre.\nPlanet.query(on: database).sort(\\$name)\n```\n\n----------------------------------------\n\nTITLE: Decoding Content from Request in Swift\nDESCRIPTION: This code demonstrates how to decode a `Greeting` struct from an incoming HTTP request using `req.content.decode`. The decoder uses the request's `content-type` header to determine the appropriate decoding strategy. It shows usage within a Vapor route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"greeting\") { req in \n    let greeting = try req.content.decode(Greeting.self)\n    print(greeting.hello) // \"world\"\n    return HTTPStatus.ok\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Unsupported Redis Commands (Swift)\nDESCRIPTION: This snippet shows how to send Redis commands that are not directly supported by RediStack's extension methods. It uses the `send(command:with:)` method to send a raw command string with its arguments. Both async/await and future-based implementations are shown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// each value after the command is the positional argument that Redis expects\ntry app.redis.send(command: \"PING\", with: [\"hello\"])\n    .map {\n        print($0)\n    }\n    .wait()\n// \"hello\"\n\n// or\n\nlet res = try await app.redis.send(command: \"PING\", with: [\"hello\"])\nprint(res)\n// \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convenience Initializer for a Fluent Model\nDESCRIPTION: This code demonstrates how to add a convenience initializer to a Fluent model.  This allows for easy instantiation of the model with all properties set at once.  It is especially helpful when adding new properties to a model as it can provide compile-time errors if the init method changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninit(id: UUID? = nil, name: String) {\n    self.id = id\n    self.name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading a Parent Relationship in Fluent\nDESCRIPTION: This code demonstrates how to eagerly load a parent relationship using the `with` method on a query builder.  This retrieves the related models in a single query, improving performance.  The related models can then be accessed synchronously.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// 预加载示例。\nPlanet.query(on: database).with(\\.$star).all().map { planets in\n    for planet in planets {\n        // `star` 在这里是同步访问的\n        // 因为它已经预加载了。\n        print(planet.star.name)\n    }\n}\n\n// 或者\n\nlet planets = try await Planet.query(on: database).with(\\.$star).all()\nfor planet in planets {\n    // `star` 在这里是同步访问的\n    // 因为它已经预加载了。\n    print(planet.star.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Siblings Relationship in Fluent (Swift)\nDESCRIPTION: This shows how to define a siblings relationship using the `@Siblings` property wrapper in a Fluent model. The parameters specify the pivot model and the key paths to the parent relationships.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Ejemplo de relación sibling.\n    @Siblings(through: PlanetTag.self, from: \\.$planet, to: \\.$tag)\n    public var tags: [Tag]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an ID Property in Swift\nDESCRIPTION: Shows how to define the `id` property using the `@ID` property wrapper in a Fluent model.  This identifies instances of your model uniquely. This example uses the default `.id` key and UUID type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Unieke identificatiecode voor deze planeet.\n    @ID(key: .id)\n    var id: UUID?\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key with SHA-256 in Swift\nDESCRIPTION: This snippet demonstrates how to add an HMAC key with SHA-256 to the keychain in Vapor.  The secret key is provided as a string, and the digest algorithm is specified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Add an HS256 key.\nawait app.jwt.keys.add(hmac: \"secret\", digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration for a Fluent Model\nDESCRIPTION: This code demonstrates how to create a migration for a `Galaxy` model. The `prepare` method defines the schema for the `galaxies` table, including the ID and name fields. The `revert` method deletes the schema.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateGalaxy: AsyncMigration {\n    // 为存储 Galaxy 模型准备数据库。\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"galaxies\")\n            .id()\n            .field(\"name\", .string)\n            .create()\n    }\n\n    // 可选地恢复 prepare 方法中所做的更改。\n    func revert(on database: Database) async throws {\n        try await database.schema(\"galaxies\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ECDSA Key to Key Collection - Swift\nDESCRIPTION: This snippet demonstrates adding an ECDSA public key to the application's JWT key collection.  It uses the `addECDSA` method on the `app.jwt.keys` object, passing an `ES256PublicKey` initialized with a PEM string.  The `await` keyword indicates that this operation is asynchronous.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\n// ECDSA mit SHA-256 Unterzeichner hinzufügen.\ntry await app.jwt.keys.addECDSA(key: ES256PublicKey(pem: ecdsaPublicKey))\n```\n\n----------------------------------------\n\nTITLE: Setting maxRetryCount for a Job Dispatch\nDESCRIPTION: This snippet demonstrates how to specify the `maxRetryCount` when dispatching a job. This configures the queue to automatically retry the job upon failure up to the specified number of times. Both `EventLoopFuture` and `async/await` examples are included.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3\n        ).map { \"done\" }\n}\n\n// or\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting secrets with fly secrets set\nDESCRIPTION: This command sets a secret environment variable on the Fly.io platform. Secrets are used to store sensitive information such as API keys and database passwords. The specified value will be available as an environment variable within the deployed application. Replace `MYSECRET` and `A_SUPER_SECRET_VALUE` with appropriate keys and values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set MYSECRET=A_SUPER_SECRET_VALUE\n```\n\n----------------------------------------\n\nTITLE: Scheduling Jobs with Helper Enums\nDESCRIPTION: This code snippet provides examples of using helper enums to configure job scheduling intervals.  It demonstrates how to schedule jobs yearly in January, monthly on the first day, weekly on Sunday, and daily at midnight.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Every year in January \n.yearly().in(.january)\n\n// Every month on the first day \n.monthly().on(.first)\n\n// Every week on Sunday \n.weekly().on(.sunday)\n\n// Every day at midnight\n.daily().at(.midnight)\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Identifier Field with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to add a custom identifier field named 'id' of type integer with an auto-incrementing constraint. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"id\", .int, .identifier(auto: true))\n```\n\n----------------------------------------\n\nTITLE: Receiving Text Messages via WebSocket in Vapor\nDESCRIPTION: This snippet demonstrates how to handle incoming text messages on a WebSocket connection using Vapor. The `ws.onText` method is used to register a closure that is executed whenever a text message is received. The closure receives the WebSocket connection (`ws`) and the received text (`text`) as parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    // String received by this WebSocket.\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a struct with Data type property for file uploads\nDESCRIPTION: Defines a `Profile` struct that includes a `Data` property for handling file uploads. The `image` property is of type `Data`, indicating that the content will be binary data. This is crucial for receiving file uploads through multipart form data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Profile: Content {\n    var name: String\n    var email: String\n    var image: Data\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to the View in Swift (Controller)\nDESCRIPTION: This snippet demonstrates how to pass data to a Leaf view from a Vapor controller. The view is rendered with a dictionary containing the 'name' key with the value 'John'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nreturn try await req.view.render(\"home\", [\"name\": \"John\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring the HTTP Client (Swift)\nDESCRIPTION: Shows how to configure the underlying HTTP client using the `Application` object.  In this example, automatic redirect following is disabled.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Desactiva el seguimiento de redireccionado automático.\napp.http.client.configuration.redirectConfiguration = .disallow\n```\n\n----------------------------------------\n\nTITLE: Hashing data with SHA256 using SwiftCrypto in Vapor\nDESCRIPTION: This snippet shows how to hash data using the SHA256 algorithm provided by SwiftCrypto, which is integrated into Vapor. It imports the Vapor module and then uses the SHA256.hash function to generate a digest of the input data. The input data is converted to UTF-8 before hashing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nlet digest = SHA256.hash(data: Data(\"hello\".utf8))\nprint(digest)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs from a Command Swift\nDESCRIPTION: This snippet demonstrates how to dispatch a queue job from within a Vapor command. It accesses the queues property from the application context and dispatches an `EmailJob` with a specified payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\")\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job Object using AsyncJob Protocol Swift\nDESCRIPTION: This snippet demonstrates how to model a job object using the `AsyncJob` protocol in Vapor Queues with async/await. It defines an `EmailJob` struct that conforms to the `AsyncJob` protocol, defining the `dequeue` and `error` functions with async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct EmailJob: AsyncJob {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) async throws {\n        // ここでメールを送信します\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) async throws {\n        // エラーを処理しない場合は単に return します。また、この関数を完全に省略することもできます。\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Event Loops for a Future (Swift)\nDESCRIPTION: This snippet demonstrates how to change the `EventLoop` on which a future will execute using the `hop(to:)` method. This moves execution of futureString to otherEventLoop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nfutureString.hop(to: otherEventLoop)\n```\n\n----------------------------------------\n\nTITLE: Sending Text Message via WebSocket\nDESCRIPTION: This code shows how to send a text message through an established WebSocket connection using the `send` method. The `send` method asynchronously sends the string \"Hello, world\" to the connected WebSocket endpoint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nws.send(\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Specifying a Priority for a Job using EventLoopFuture Swift\nDESCRIPTION: This snippet demonstrates how to specify a priority (queue name) when dispatching a queue job using `EventLoopFuture`. It dispatches an `EmailJob` to the specified queue with a specified payload, `maxRetryCount` and `delayUntil` parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 1 日後\n    return req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        ).map { \"done\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Server from a Vapor Client (Swift)\nDESCRIPTION: This snippet illustrates how to connect to a remote WebSocket endpoint using `WebSocket.connect`. It takes the WebSocket URL and an `EventLoop` as input, and a closure that is executed when the connection is established. The closure receives the connected WebSocket object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nWebSocket.connect(to: \"ws://echo.websocket.org\", on: eventLoop) { ws in\n    // WebSocket conectado.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Parent Field in Fluent Schema (Swift)\nDESCRIPTION: This snippet showcases how to define a field in the database schema that corresponds to a parent relationship. The `.references` constraint establishes the foreign key relationship between the `star_id` field in the `Planet` model and the `id` field in the `Star` model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .required, .references(\"star\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Message using Async/Await (Swift)\nDESCRIPTION: This code illustrates the usage of `async/await` with the WebSocket's `send` method. The `await` keyword makes the code wait until the message sending operation is complete before proceeding to the next line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.send(...)\n```\n\n----------------------------------------\n\nTITLE: Grouping Filters with OR Logic in Swift\nDESCRIPTION: Shows how to group multiple filters using the `group` method with `.or` logic, allowing a record to match if any of the filters within the group match. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).group(.or) { group in\n    group.filter(\\.$name == \"Earth\").filter(\\.$name == \"Mars\")\n}.all()\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs using Async/Await Swift\nDESCRIPTION: This snippet demonstrates how to dispatch a queue job using async/await within a Vapor route handler. It dispatches an `EmailJob` with a specified payload and returns a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"))\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing a GET Request (Swift)\nDESCRIPTION: Demonstrates how to perform a GET request using the Vapor HTTP client. It shows how to call the `get` method on the client with a URL and await the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/status/200\")\n```\n\n----------------------------------------\n\nTITLE: Configure HMAC Signer with Key - Swift\nDESCRIPTION: This snippet shows how to add an HMAC signer with SHA-256 using a provided secret key in a Vapor application. This configures the application to use HMAC for signing and verifying JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// 添加带有 SHA-256 的 HMAC 算法的签名者。\napp.jwt.signers.use(.hs256(key: \"secret\"))\n```\n\n----------------------------------------\n\nTITLE: Defining UserToken Model in Swift\nDESCRIPTION: Defines a `UserToken` model in Swift using Fluent for database interaction. This model includes an ID, a unique value for the token, and a parent relationship to the User model. It conforms to the `Content` protocol for easy serialization and deserialization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nfinal class UserToken: Model, Content {\n    static let schema = \"user_tokens\"\n\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"value\")\n    var value: String\n\n    @Parent(key: \"user_id\")\n    var user: User\n\n    init() { }\n\n    init(id: UUID? = nil, value: String, userID: User.IDValue) {\n        self.id = id\n        self.value = value\n        self.$user.id = userID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conforming to DebuggableError for Detailed Error Logging (Swift)\nDESCRIPTION: Illustrates how to conform a custom error to the `DebuggableError` protocol to customize error logging.  This protocol provides properties like `identifier`, `source`, and `reason` to help with debugging. The example updates the aforementioned `MyError` to be a struct and captures source information to conform with `DebuggableError`. This provides richer error information for developers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    enum Value {\n        case userNotLoggedIn\n        case invalidEmail(String)\n    }\n\n    var identifier: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"userNotLoggedIn\"\n        case .invalidEmail:\n            return \"invalidEmail\"\n        }\n    }\n\n    var reason: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var value: Value\n    var source: ErrorSource?\n\n    init(\n        _ value: Value,\n        file: String = #file,\n        function: String = #function,\n        line: UInt = #line,\n        column: UInt = #column\n    ) {\n        self.value = value\n        self.source = .init(\n            file: file,\n            function: function,\n            line: line,\n            column: column\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Require Authenticated User in Vapor (Swift)\nDESCRIPTION: This code demonstrates how to get the authenticated user in Vapor using req.auth.require(_:). It retrieves the user and prints their name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet user: User = try req.auth.require(User.self)\nprint(user.name) // String\n```\n\n----------------------------------------\n\nTITLE: Casting Route Parameter\nDESCRIPTION: Demonstrates how to automatically cast a parameter to a `LosslessStringConvertible` type, such as `Int`. It also shows how to handle cases where the cast fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op GET /number/42\n// reageert op GET /number/1337\n// ...\napp.get(\"number\", \":x\") { req -> String in \n\tguard let int = req.parameters.get(\"x\", as: Int.self) else {\n\t\tthrow Abort(.badRequest)\n\t}\n\treturn \"\\(int) is a great number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Leaf View in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to render a Leaf view from a Vapor route. It uses the `req.view.render` method to render the specified template (`hello.leaf`) with a context containing the `name` variable. The rendered view is then returned as a response to the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.it.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<View> in\n    return req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n\n// oppure\n\napp.get(\"hello\") { req async throws -> View in\n    return try await req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Native Database Enum Field Swift\nDESCRIPTION: This code snippet demonstrates how to define a native database enum field in a Fluent model using the `@Enum` property wrapper.  Requires the database to be setup to handle enums via a migration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Pet: Model {\n    // 将动物类型存储为原生数据库枚举。\n    @Enum(key: \"type\")\n    var type: Animal\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Model with Parent ID (Swift)\nDESCRIPTION: This code demonstrates how to initialize a model with a parent ID. The parent ID is passed to the initializer and assigned to the `$star.id` property to establish the relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninit(name: String, starID: Star.IDValue) {\n    self.name = name\n    // ...\n    self.$star.id = starID\n}\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Example Swift\nDESCRIPTION: This is an example of a Package.swift manifest file for a Vapor application. It defines the package name, supported platforms, dependencies (including the Vapor package), and targets for the application and its tests. The `swift-tools-version` specifies the minimum required Swift version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Content in Leaf\nDESCRIPTION: This snippet illustrates how to use `#export` and `#import` tags to store and retrieve content between Leaf templates. The child template exports the body content, which is then imported and rendered in the master template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_12\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"master\"):\n    #export(\"body\"):\n        <p>Welcome to Vapor!</p>\n    #endexport\n#endextend\n```\n\n----------------------------------------\n\nTITLE: EventLoopFuture flatMap Transformation\nDESCRIPTION: This code snippet demonstrates the `flatMap` transformation on an EventLoopFuture. It transforms a future string to a future response by using an HTTP client to get the response for the given string (URL).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Assume we have created an HTTP client\nlet client: Client = ... \n\n/// flatMap the future string to a future response\nlet futureResponse = futureString.flatMap { string in\n    client.get(string) // EventLoopFuture<ClientResponse>\n}\n\n/// We now have a future response\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Environment in Swift\nDESCRIPTION: This code snippet demonstrates how to define a custom environment name by extending the `Environment` enum. This allows you to create custom environments like `staging`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nextension Environment {\n    static var staging: Environment {\n        .custom(name: \"staging\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image (Shell)\nDESCRIPTION: Builds a Docker image for the Vapor application using the Dockerfile located in the current directory.  This command is run from the root of the project containing the docker-compose.yml file. It compiles the application in a Linux environment within Docker.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via EnvironmentFile\nDESCRIPTION: This snippet illustrates how to define environment variables for a Vapor application using the `EnvironmentFile` directive within the Systemd service configuration. It specifies the paths to files containing environment variables that the application needs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.zh.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nEnvironmentFile=/path/to/environment/file1\nEnvironmentFile=/path/to/environment/file2\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job from a Command - Swift\nDESCRIPTION: This snippet demonstrates how to dispatch a queue job from a context where a `Request` object is unavailable, such as within a Vapor `Command`. It shows how to access the `queues` property of the `Application` object and use its `queue` property's `dispatch` method.  An `EmailJob` is enqueued with a specific payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\")\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job with `Job` protocol\nDESCRIPTION: Defines a job using the `Job` protocol. This requires the job to define a `Payload` type and implement the `dequeue` function to handle the job's processing logic.  Optionally, an `error` function can be implemented to handle errors during job processing. The payload must be `Codable`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor \nimport Foundation \nimport Queues \n\nstruct Email: Codable {\n    let to: String\n    let message: String\n}\n\nstruct EmailJob: Job {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) -> EventLoopFuture<Void> {\n        // Aquí es donde enviarías el email\n        return context.eventLoop.future()\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) -> EventLoopFuture<Void> {\n        // Si no deseas manejar errores, simplemente devuelve un futuro vacío. También puedes omitir esta función por completo.\n        return context.eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Query Parameters in Swift\nDESCRIPTION: Demonstrates how to decode URL query parameters into a `Hello` struct using `req.query.decode`.  It then constructs a greeting string, using the decoded name or a default 'Anonymous' if no name is provided in the query string.  Handles the request and returns a response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in \n    let hello = try req.query.decode(Hello.self)\n    return \"Hello, \\(hello.name ?? \"Anonymous\")\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create JWT Protected Route Group in Swift\nDESCRIPTION: This code creates a route group that requires a valid `SessionToken` JWT for access. It uses the `authenticator()` method to generate an authenticator for the `SessionToken` and applies the `guardMiddleware()` to ensure successful authentication.  Only requests with valid and verified JWTs will be allowed to access routes within this group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\n// Crea un gruppo di route che richiede il SessionToken JWT.\nlet secure = app.grouped(SessionToken.authenticator(), SessionToken.guardMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Transforming a Transaction Result to HTTP Status\nDESCRIPTION: This code snippet shows how to transform the result of a database transaction into an HTTP status. The `transform(to:)` method is used to convert the result of the transaction to `HTTPStatus.ok`, which can then be returned in an HTTP response to indicate successful completion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nreturn req.db.transaction { database in\n    // database gebruiken en transactie uitvoeren\n}.transform(to: HTTPStatus.ok)\n```\n\n----------------------------------------\n\nTITLE: Add Unique Constraint Swift\nDESCRIPTION: This snippet demonstrates how to add a unique constraint to a schema. It adds a constraint that prevents duplicate values in the \"email\" field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Constraint (Swift)\nDESCRIPTION: This snippet demonstrates how to delete a constraint by its name using `deleteConstraint(name:)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Removes duplicate email constraint.\n.deleteConstraint(name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request in Vapor (Swift)\nDESCRIPTION: Illustrates how to make a GET request using the client API.  It uses the `get` method to fetch data from a specified URL. The response contains the HTTP status, headers, and body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/status/200\")\n```\n\n----------------------------------------\n\nTITLE: Combining Authenticators for the same User type in Swift\nDESCRIPTION: This snippet shows how to combine multiple authenticators for the same `User` type. It groups `UserPasswordAuthenticator` and `UserTokenAuthenticator` together, allowing authentication via password or token. `GuardMiddleware` ensures at least one authenticator succeeds.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\napp.grouped(UserPasswordAuthenticator())\n    .grouped(UserTokenAuthenticator())\n    .grouped(User.guardMiddleware())\n    .post(\"login\") \n{ req in\n    let user = try req.auth.require(User.self)\n    // 处理用户的一些操作。\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop via Request\nDESCRIPTION: This code snippet shows how to access the current event loop within a route closure using the `Request` object. The `eventLoop` property provides access to the event loop associated with the current request, which can then be used to create promises or perform other event loop related tasks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nreq.eventLoop.makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Manually logging out a User in Swift\nDESCRIPTION: This snippet shows how to manually log out a `User` using `req.auth.logout(_:)`. This removes the authenticated user from the request's authentication state.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nreq.auth.logout(User.self)\n```\n\n----------------------------------------\n\nTITLE: Using HTML as Response Type in Swift\nDESCRIPTION: This snippet shows how to use the `HTML` struct as the response type in a Vapor route.  The route creates an `HTML` instance with a simple HTML document and returns it. Vapor automatically uses the `ResponseEncodable` implementation of `HTML` to generate the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\napp.get { _ in\n  HTML(value: \"\"\"\n  <html>\n    <body>\n      <h1>Hello, World!</h1>\n    </body>\n  </html>\n  \"\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding URL Query Parameters in a Vapor Route in Swift\nDESCRIPTION: This code shows how to decode URL query parameters into a `Hello` struct within a Vapor route handler.  It uses `req.query.decode` to parse the query string. If the `name` parameter is missing, it defaults to \"Anonymous\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in \n    let hello = try req.query.decode(Hello.self)\n    return \"Hello, \\(hello.name ?? \\\"Anonymous\\\")\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Constraint on the Pivot Model (Swift)\nDESCRIPTION: This defines a unique constraint on the pivot model to prevent duplicate relationships. It adds a constraint that planet_id and tag_id can appear only once as a combination.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// No permite relaciones duplicadas.\n.unique(on: \"planet_id\", \"tag_id\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Joined Model Data (Swift)\nDESCRIPTION: Shows how to access the joined model data using the `joined` method. `dynamicMemberLookup` enables accessing model properties via the alias type.  Assumes a match result from a query using model aliases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Accede al modelo unido desde el resultado.\nlet home = try match.joined(HomeTeam.self)\nprint(home.name)\n```\n\n----------------------------------------\n\nTITLE: Collecting a file into a ByteBuffer asynchronously in Vapor\nDESCRIPTION: Reads an entire file into a `ByteBuffer` asynchronously using the `collectFile` method of the `req.fileio` object.  The resulting buffer is then printed. This example uses `EventLoopFuture`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// Lee el archivo en un buffer.\nreq.fileio.collectFile(at: \"/path/to/file\").map { buffer in \n    print(buffer) // ByteBuffer\n}\n```\n\n----------------------------------------\n\nTITLE: Content beforeEncode Hook in Swift\nDESCRIPTION: This code shows the `beforeEncode` function that can be implemented on a `Content` type. It validates that the `name` is not empty before encoding.  It ensures a valid `name` is always present before encoding occurs. `mutating` is needed only for structs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Runs before this Content is encoded. `mutating` is only required for structs, not classes.\nmutating func beforeEncode() throws {\n    // Have to *always* pass a name back, and it can't be an empty string.\n    guard \n        let name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines), \n        !name.isEmpty \n    else {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n    self.name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Siblings Relationship in Fluent\nDESCRIPTION: This code snippet demonstrates how to define a many-to-many relationship using the `@Siblings` property wrapper. It uses a pivot model (`PlanetTag`) to link two models (`Planet` and `Tag`). The `through`, `from`, and `to` parameters specify the pivot model and the key paths to the parent relationships.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // siblings 关系示例。\n    @Siblings(through: PlanetTag.self, from: \\.$planet, to: \\.$tag)\n    public var tags: [Tag]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vapor HTTP Client\nDESCRIPTION: Demonstrates how to access the default HTTP client from an Application or a Request object within a route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.client // Client\n\napp.get(\"test\") { req in\n\treq.client // Client\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model Exists in Swift\nDESCRIPTION: Shows how to use the `exists` property of the `@ID` property wrapper to check if a model exists in the database. This property is mutable and reflects whether the model has been saved or retrieved from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nif planet.$id.exists {\n    // Dit model bestaat in de database.\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job Object (Job Protocol) - Swift\nDESCRIPTION: This snippet demonstrates how to define a job using the `Job` protocol in Vapor Queues. It defines a `Email` struct as the payload and an `EmailJob` struct that conforms to the `Job` protocol. The `dequeue` function defines the logic to execute when the job is processed, and the `error` function (optional) handles any errors encountered during job execution. The `Payload` type must conform to `Codable`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor \nimport Foundation \nimport Queues \n\nstruct Email: Codable {\n    let to: String\n    let message: String\n}\n\nstruct EmailJob: Job {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) -> EventLoopFuture<Void> {\n        // 这是你要发送电子邮件的位置\n        return context.eventLoop.future()\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) -> EventLoopFuture<Void> {\n        // 如果你不想处理错误，只需返回一个 future 对象。你也可以完全省略此功能。\n        return context.eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket with Async/Await\nDESCRIPTION: This snippet demonstrates closing a WebSocket connection using `async/await`.  It awaits the completion of the close operation before proceeding. Requires an environment that supports async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.close()\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Sessions Middleware in Vapor\nDESCRIPTION: This snippet shows how to add `SessionsMiddleware` to a specific route group, limiting session support to only those routes. This is useful when only a subset of your routes requires session functionality.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet sessions = app.grouped(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Request Decompression in Vapor\nDESCRIPTION: This snippet shows how to enable HTTP request decompression for the Vapor HTTP server. It sets the `requestDecompression` property of the server configuration to `.enabled`. The default is `.disabled`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Enable HTTP request decompression.\napp.http.server.configuration.requestDecompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Implementing Zip Code Validation Logic\nDESCRIPTION: This code implements the validation logic for a zip code using a regular expression. It extends the `Validator` struct where the validated type is `String`, adding a static `.zipCode` validator that checks if the input string matches the US zip code format.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nprivate let zipCodeRegex: String = \"^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$\"\n\nextension Validator where T == String {\n    /// 验证一个 `String` 是否是有效的邮政编码。\n    public static var zipCode: Validator<T> {\n        .init { input in\n            guard let range = input.range(of: zipCodeRegex, options: [.regularExpression]),\n                  range.lowerBound == input.startIndex && range.upperBound == input.endIndex\n            else {\n                return ValidatorResults.ZipCode(isValidZipCode: false)\n            }\n            return ValidatorResults.ZipCode(isValidZipCode: true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement SessionAuthenticatable for User\nDESCRIPTION: Extends the `User` structure to conform to `SessionAuthenticatable`.  Specifies the `email` property as the `sessionID`, which will be stored in the session data to identify the user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nextension User: SessionAuthenticatable {\n    var sessionID: String {\n        self.email\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to a Route Group in Vapor\nDESCRIPTION: Adds a middleware to a specific route group. This ensures that only routes within the group are affected by the middleware. The example shows adding `MyMiddleware` to a group and then defining a `GET` route within that group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet group = app.grouped(MyMiddleware())\ngroup.get(\"foo\") { req in\n// 该请求通过 MyMiddleware 传递。\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Redis Channels - Swift\nDESCRIPTION: This snippet shows how to subscribe to Redis channels using the subscribe method.  It defines a messageReceiver closure to handle incoming messages and an onUnsubscribe closure to handle unsubscription events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// 创建2个订阅，每个给定频道一个订阅\napp.redis.subscribe\n  to: \"channel_1\", \"channel_2\",\n  messageReceiver: { channel, message in\n    switch channel {\n    case \"channel_1\": // 处理消息\n    default: break\n    }\n  },\n  onUnsubscribe: { channel, subscriptionCount in\n    print(\"unsubscribed from \\(channel)\")\n    print(\"subscriptions remaining: \\(subscriptionCount)\")\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp for Creation and Update in Swift\nDESCRIPTION: Demonstrates how to use the `@Timestamp` property wrapper to automatically track creation and update times in a Fluent model.  The timestamps are set automatically by Fluent when the model is created or updated.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Wanneer deze planeet werd aangemaakt.\n    @Timestamp(key: \"created_at\", on: .create)\n    var createdAt: Date?\n\n    // Wanneer deze Planeet voor het laatst is bijgewerkt.\n    @Timestamp(key: \"updated_at\", on: .update)\n    var updatedAt: Date?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Unique Constraint (Swift)\nDESCRIPTION: This code defines a database schema with a unique constraint on the column referencing the parent model to enforce the one-to-one nature of the `@OptionalChild` relation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(Governor.schema)\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"planet_id\", .uuid, .required, .references(\"planets\", \"id\"))\n    // Example of unique constraint\n    .unique(on: \"planet_id\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with Fluent (Swift)\nDESCRIPTION: This code demonstrates how to create a database schema using Fluent's schema API in Swift. It defines a table or collection named \"planets\" with an id field, a name field of type string, and a star_id field of type UUID that references the \"stars\" table's id field. This snippet depends on the Fluent framework and requires a database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Middleware (Asynchronous) in Vapor (Swift)\nDESCRIPTION: Shows how to create custom middleware that conforms to the `AsyncMiddleware` protocol using `async`/`await` syntax to block access to a user if they are not an administrator. This middleware asynchronously checks the user's role from the request's authentication and throws an unauthorized error if the user is not an admin.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            throw Abort(.unauthorized)\n        }\n        return try await next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Fluent Database for Sessions in Vapor\nDESCRIPTION: This snippet demonstrates how to specify a particular database for storing sessions when using the Fluent session driver. This allows you to use a database other than the default one.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.sessions.use(.fluent(.sqlite))\n```\n\n----------------------------------------\n\nTITLE: Adding Composite Unique Constraint (Swift)\nDESCRIPTION: This code demonstrates how to add a composite unique constraint using Fluent. It enforces uniqueness on the combination of values in the \"first_name\" and \"last_name\" fields. This prevents users from having the same full name in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"first_name\", \"last_name\")\n```\n\n----------------------------------------\n\nTITLE: Querying specific SQL Database (PostgreSQL)\nDESCRIPTION: This code snippet shows how to cast a Fluent `Database` to a specific SQL database type, in this case `PostgresDatabase`, and then execute a database-specific query. It checks if the underlying database driver is PostgreSQL before executing the query.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport FluentPostgresDriver\n\nif let postgres = req.db as? PostgresDatabase {\n    // The underlying database driver is PostgreSQL.\n    postgres.simpleQuery(\"SELECT * FROM planets\").all()\n} else {\n    // The underlying database is _not_ PostgreSQL.\n}\n```\n\n----------------------------------------\n\nTITLE: Use Group in Model (Swift)\nDESCRIPTION: This Swift code defines a `User` model with a `@Group` property named `pet` which uses the `Pet` struct defined previously. The `Pet` struct is stored as a flattened structure in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfinal class User: Model {\n    // Het geneste huisdier van de gebruiker.\n    @Group(key: \"pet\")\n    var pet: Pet\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Optionals with Async/Await and Abort Error\nDESCRIPTION: This snippet demonstrates how to handle optional values when using `async`/`await` in Vapor. It uses a `guard let` statement to check if the user is found and throws an `Abort` error if the user is nil.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = try await User.find(id, on: db) {\n    throw Abort(.notFound)\n}\n```\n\n----------------------------------------\n\nTITLE: FlatMap EventLoopFuture Value\nDESCRIPTION: Shows how to use `flatMap` to transform an EventLoopFuture into another EventLoopFuture. This prevents nested futures (EventLoopFuture<EventLoopFuture<T>>) by flattening the result. It's used when the transformation returns another future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n/// Supongamos que recuperamos una cadena futura de alguna API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Supongamos que hemos creado un cliente HTTP\nlet client: Client = ... \n\n/// Transformamos la cadena de futuro con flatMap a una respuesta de futuro\nlet futureResponse = futureString.flatMap { string in\n    client.get(string) // EventLoopFuture<ClientResponse>\n}\n\n/// Ahora tenemos una respuesta de futuro\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Read File from Disk - Swift\nDESCRIPTION: This snippet shows how to asynchronously read a file from disk using `req.fileio.readFile`. The provided closure receives chunks of the file as `ByteBuffer` instances. The method returns an `EventLoopFuture<Void>` that signals completion or error, or it can be awaited using `async/await`. If `async/await` is used, an error will be thrown upon failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// 异步地从磁盘读取文件。\nlet readComplete: EventLoopFuture<Void> = req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n\n// 或者\n\ntry await req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n// 读取完成\n```\n\n----------------------------------------\n\nTITLE: Adding PSS Key to JWT Key Collection - Swift\nDESCRIPTION: This snippet demonstrates adding an RSA key with PSS padding to the JWT key collection. The `add(pss:digestAlgorithm:)` method is used, specifying the key and digest algorithm. PSS provides a more secure padding scheme compared to PKCS1v1.5.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(pss: key, digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Adding Leaf as a dependency using Swift Package Manager\nDESCRIPTION: This snippet demonstrates how to add Leaf as a dependency to a Vapor project using Swift Package Manager. It specifies the package URL and version, and adds the Leaf product to the target dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n    dependencies: [\n        /// Any other dependencies ...\n        .package(url: \"https://github.com/vapor/leaf.git\", from: \"4.4.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            .product(name: \"Leaf\", package: \"leaf\"),\n            // Any other dependencies\n        ]),\n        // Other targets\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Bcrypt with Cost\nDESCRIPTION: This code snippet shows how to specify the cost parameter when using Bcrypt for password hashing. The cost determines the strength of the hashing algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.passwords.use(.bcrypt(cost: 8))\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Configuration\nDESCRIPTION: This snippet demonstrates a basic Nginx configuration file for proxying requests to a Vapor application running on localhost port 8080.  It sets up the server to listen on port 80, defines the root directory, and configures proxy pass headers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    server_name hello.com;\n    listen 80;\n\n    root /home/vapor/Hello/Public/;\n\n    location @proxy {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_pass_header Server;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_connect_timeout 3s;\n        proxy_read_timeout 10s;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding and Adding JWKS to Vapor JWT Signers (Swift)\nDESCRIPTION: This snippet demonstrates how to download, decode, and add a JSON Web Key Set (JWKS) to a Vapor application's JWT signers. It downloads the JWKS data from a URL, decodes it using a JSON decoder, and then adds it to the JWT signers.  This allows the application to verify JWTs signed with keys from the JWKS. Requires `import JWT` and `import Vapor`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport JWT\nimport Vapor\n\n// Download de JWKS.\n// Dit kan asynchroon gedaan worden indien nodig.\nlet jwksData = try Data(\n    contentsOf: URL(string: \"https://appleid.apple.com/auth/keys\")!\n)\n\n// Decodeer de gedownloade JSON.\nlet jwks = try JSONDecoder().decode(JWKS.self, from: jwksData)\n\n// Creëer ondertekenaars en voeg JWKS toe.\ntry app.jwt.signers.use(jwks: jwks)\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships with query(on:) in Swift\nDESCRIPTION: This code demonstrates how to create a query builder for related models using the `query(on:)` method. It retrieves all planets associated with a sun whose name starts with 'M'. The `database` parameter specifies the database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera todos los planetas del sol cuyo nombre empiece con M.\ntry await sun.$planets.query(on: database).filter(\\.$name =~ \"M\").all()\n```\n\n----------------------------------------\n\nTITLE: User Create Validation Swift\nDESCRIPTION: This code demonstrates how to validate the `User.Create` struct using Vapor's `Validatable` protocol. It adds validations for name (not empty), email (valid email), and password (at least 8 characters).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nextension User.Create: Validatable {\n    static func validations(_ validations: inout Validations) {\n        validations.add(\"name\", as: String.self, is: !.empty)\n        validations.add(\"email\", as: String.self, is: .email)\n        validations.add(\"password\", as: String.self, is: .count(8...))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This snippet shows how to access environment variables within a Vapor application using the `Environment.get` method. It retrieves the value of the PORT environment variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting up a WebSocket Endpoint on the Server with Vapor\nDESCRIPTION: This code snippet demonstrates how to establish a WebSocket endpoint within a Vapor application. It utilizes the `app.webSocket` method to define a route (e.g., \"echo\") that handles incoming WebSocket connections. The handler closure receives the HTTP request (`req`) and the established WebSocket connection (`ws`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.webSocket(\"echo\") { req, ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Hostname in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure a custom hostname for the Vapor HTTP server.  It assigns the value \"dev.local\" to the hostname property of the server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Configureer aangepaste hostnaam.\napp.http.server.configuration.hostname = \"dev.local\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters in Vapor\nDESCRIPTION: This code snippet demonstrates how to access request parameters within a Vapor route handler. It extracts the 'name' parameter from the request and returns a greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up application environment in entrypoint.swift - Swift\nDESCRIPTION: This snippet shows how to set up the application's environment in `entrypoint.swift` using `Environment.detect()`. This detects the environment from command line arguments and bootstraps the logging system.  It also configures and runs the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n@main\nenum Entrypoint {\n    static func main() async throws {\n        var env = try Environment.detect()\n        try LoggingSystem.bootstrap(from: &env)\n        \n        let app = Application(env)\n        defer { app.shutdown() }\n        \n        try await configure(app)\n        try await app.runFromAsyncMainEntrypoint()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Futures in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to chain multiple asynchronous operations using `flatMapThrowing` and `flatMap` in Vapor. It transforms a future string into a URL, then fetches data from that URL using an HTTP client. It requires Vapor's `Client` and `Abort` and assumes the availability of a `futureString` from an API.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n/// Supongamos que recuperamos una cadena futura de alguna API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Supongamos que hemos creado un cliente HTTP\nlet client: Client = ... \n\n/// Transforma la cadena en una URL y luego en una respuesta\nlet futureResponse = futureString.flatMapThrowing { string in\n    guard let url = URL(string: string) else {\n        throw Abort(.badRequest, reason: \"Invalid URL string: \\(string)\")\n    }\n    return url\n}.flatMap { url in\n    client.get(url)\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Add SessionRecord Migration - Swift\nDESCRIPTION: Adds the `SessionRecord` migration to the database migrations, preparing the database to store session data in the `_fluent_sessions` schema. This migration is required when using the Fluent session driver.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\napp.migrations.add(SessionRecord.migration)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Schema with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to delete an existing schema (table/collection) named 'planets' using Fluent's schema builder. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.schema(\"planets\").delete()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Port for Vapor Server\nDESCRIPTION: This code snippet configures the Vapor HTTP server to listen on a specific port.  The port determines which TCP port the server will bind to.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Configura un port personalizado.\napp.http.server.configuration.port = 1337\n```\n\n----------------------------------------\n\nTITLE: Leaf For Loop Usage\nDESCRIPTION: Shows how to loop over an array of items in a Leaf template using the `#for` tag. This example iterates over a list of planets and displays them in an unordered list.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_7\n\nLANGUAGE: leaf\nCODE:\n```\nPlanets:\n<ul>\n#for(planet in planets):\n    <li>#(planet)</li>\n#endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Specify Fluent Database - Swift\nDESCRIPTION: Specifies a particular database for the Fluent session driver to use.  This is useful if the app has multiple databases configured and the session data should be stored in one specifically.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\napp.sessions.use(.fluent(.sqlite))\n```\n\n----------------------------------------\n\nTITLE: Handling Optionals with async/await and Abort Error (Swift)\nDESCRIPTION: This snippet demonstrates how to handle optionals using `async/await` and throw an `Abort` error if the optional value is nil.  It showcases a modern way to handle optional results in asynchronous Swift code, providing a cleaner and more readable alternative to futures and flatMaps.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = try await User.find(id, on: db) {\n    throw Abort(.notFound)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Unique Constraint (Swift)\nDESCRIPTION: This snippet shows how to add a unique constraint with a custom name.  This allows for easier management and deletion of the constraint later.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Disallow duplicate email addresses.\n.unique(on: \"email\", name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Ping Events (Swift)\nDESCRIPTION: This code demonstrates how to handle WebSocket ping events using the `ws.onPing` method.  A closure is registered that will be called when a ping frame is received.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nws.onPing { ws in \n    // Se recibió ping.\n}\n```\n\n----------------------------------------\n\nTITLE: Simple GET Route (Swift)\nDESCRIPTION: Defines a simple GET route for /foo/bar/baz.  Returns some response, but the content is omitted in this sample.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /foo/bar/baz\napp.get(\"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponseEncodable for HTML Struct in Swift\nDESCRIPTION: Implements the `ResponseEncodable` protocol for the `HTML` struct. This allows the `HTML` struct to be directly returned as a response from a Vapor route. The implementation sets the `Content-Type` header to `text/html` and uses the `value` property as the response body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: ResponseEncodable {\n  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return request.eventLoop.makeSucceededFuture(.init(\n      status: .ok, headers: headers, body: .init(string: value)\n    ))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables using Environment.process - Swift\nDESCRIPTION: This snippet demonstrates how to access environment variables using the `Environment.process` dynamic member lookup API. It accesses the `FOO` environment variable and its value is of type String?.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet foo = Environment.process.FOO\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Database with Connection String\nDESCRIPTION: This snippet configures the MongoDB database connection using a connection string, following the standard MongoDB connection URI format. Replace `<connection string>` with your actual MongoDB connection string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport FluentMongoDriver\n\ntry app.databases.use(.mongo(connectionString: \"<connection string>\"), as: .mongo)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Environment in entrypoint.swift\nDESCRIPTION: This code demonstrates setting the application's environment using `Environment.detect()` in `entrypoint.swift`. The `detect` method automatically parses the `--env` flag from command-line arguments. This is often the starting point for setting up the application's configuration based on the environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@main\nenum Entrypoint {\n    static func main() async throws {\n        var env = try Environment.detect()\n        try LoggingSystem.bootstrap(from: &env)\n\n        let app = Application(env)\n        defer { app.shutdown() }\n\n        try await configure(app)\n        try await app.runFromAsyncMainEntrypoint()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define User Creation Content Structure\nDESCRIPTION: Defines a `User.Create` struct conforming to `Content` to represent the data expected for creating a new user, including name, email, password, and confirmPassword. This structure is used for decoding the request body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nextension User {\n    struct Create: Content {\n        var name: String\n        var email: String\n        var password: String\n        var confirmPassword: String\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Close Event\nDESCRIPTION: This code demonstrates how to listen for the WebSocket close event using the `onClose` property.  The `whenComplete` closure is executed when the WebSocket connection is closed, whether by the client or the server. The `result` parameter indicates whether the closure was successful or failed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nws.onClose.whenComplete { result in\n    // 关闭成功或失败。\n}\n```\n\n----------------------------------------\n\nTITLE: Performing a Redirect in Vapor (Swift)\nDESCRIPTION: This snippet shows how to perform a redirect from within a route handler in Vapor. It demonstrates how to use `req.redirect(to:)` to redirect the user to a new path, optionally specifying the redirect type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\")\n```\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\", redirectType: .permanent)\n```\n\n----------------------------------------\n\nTITLE: Fetching Planets in Chunks Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to fetch planets in chunks of at most 64 at a time using Fluent's query API. This approach helps control memory usage when dealing with large datasets. The `chunk(max: 64)` method is used to retrieve the data in smaller portions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches all planets in chunks of at most 64 at a time.\nPlanet.query(on: self.database).chunk(max: 64) { planets in\n    // Handle chunk of planets.\n}\n```\n\n----------------------------------------\n\nTITLE: Login Route with JWT without Authenticator\nDESCRIPTION: Defines a login route that generates a JWT token for a user without using an authenticator, requiring manual validation of credentials and retrieval of the user ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_53\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { req async throws -> ClientTokenResponse in\n    // Validate provided credential for user\n    // Get userId for provided user\n    let payload = try SessionToken(userId: userId)\n    return ClientTokenResponse(token: try await req.jwt.sign(payload))\n}\n```\n\n----------------------------------------\n\nTITLE: Writable Service Extension for Vapor Application in Swift\nDESCRIPTION: This snippet demonstrates how to create a writable service extension for Vapor's Application type. It defines a `MyConfiguration` struct and a `StorageKey` to store the configuration within the application's storage. The extension provides a computed property to get and set the `MyConfiguration` instance. Dependencies: Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyConfiguration {\n    var apiKey: String\n}\n\nstruct MyConfigurationKey: StorageKey {\n    typealias Value = MyConfiguration\n}\n\nextension Application {\n    var myConfiguration: MyConfiguration? {\n        get {\n            self.storage[MyConfigurationKey.self]\n        }\n        set {\n            self.storage[MyConfigurationKey.self] = newValue\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter by Subset Swift\nDESCRIPTION: This snippet demonstrates how to filter planets based on whether their type is either a gas giant or a small rocky type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Alle planeten met ofwel gasreus ofwel klein rotsachtig type.\nPlanet.query(on: database)\n    .filter(\\.$type ~~ [.gasGiant, .smallRocky])\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Environment Variable (Shell)\nDESCRIPTION: Shows how to set the log level using the `LOG_LEVEL` environment variable before running the Vapor application.  This allows for configuration-based log level control.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport LOG_LEVEL=debug\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Credentials\nDESCRIPTION: This snippet demonstrates how to configure the MySQL database connection in your `configure.swift` file, specifying hostname, username, password, and database name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport FluentMySQLDriver\n\napp.databases.use(.mysql(hostname: \"localhost\", username: \"vapor\", password: \"vapor\", database: \"vapor\"), as: .mysql)\n```\n\n----------------------------------------\n\nTITLE: Sending a Raw Redis Command - Swift\nDESCRIPTION: This snippet illustrates how to send a raw Redis command using the send method when a command is not directly supported by RediStack's extension methods.  It sends a PING command with an argument and prints the response. It shows both the async/await and .wait() versions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// command 后的每个值都是 Redis 期望的位置参数\ntry app.redis.send(command: \"PING\", with: [\"hello\"])\n    .map {\n        print($0)\n    }\n    .wait()\n// \"hello\"\n\n// or\n\nlet res = try await app.redis.send(command: \"PING\", with: [\"hello\"])\nprint(res)\n// \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Getting Unique Results in Swift\nDESCRIPTION: Shows how to retrieve only distinct results from a query using the `unique()` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nUser.query(on: database).unique().all(\\.$firstName)\n```\n\n----------------------------------------\n\nTITLE: Example Package Manifest (Package.swift)\nDESCRIPTION: This is an example of a `Package.swift` file, which defines the package's metadata, including its name, supported platforms, dependencies (like Vapor), and targets (App and AppTests). It specifies the Swift tools version and how the different parts of the app depend on each other.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\",\n        from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading with Reload in Fluent\nDESCRIPTION: This code shows how to lazily eager load a relationship using the `get(reload:on:)` method after the parent model has already been retrieved. The `reload` parameter ensures that data is fetched from the database, bypassing any cached data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\ntry await planet.$star.get(reload: true, on: database)\nprint(planet.star.name)\n```\n\n----------------------------------------\n\nTITLE: Configuring the HTTP Client (Swift)\nDESCRIPTION: Shows how to configure the underlying HTTP client, specifically disabling automatic redirect following.  This configuration must be done before the client is used for the first time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Disable automatic redirect following.\napp.http.client.configuration.redirectConfiguration = .disallow\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop Outside Route Closure (Swift)\nDESCRIPTION: This snippet demonstrates how to access an available `EventLoop` from the `Application` object outside of a route closure. It retrieves an event loop from the event loop group and creates a promise.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.eventLoopGroup.next().makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job from a Route - Swift\nDESCRIPTION: This snippet shows how to dispatch a queue job from within a Vapor route. It demonstrates how to access the `queue` property of a `Request` object and use the `dispatch` method to enqueue an `EmailJob` with a specific payload. Both the `EventLoopFuture` and `async/await` approaches are shown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\")\n        ).map { \"done\" }\n}\n\n// 或\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"))\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Default HTTP Server in Vapor\nDESCRIPTION: This code configures the Vapor application to use the default HTTP server.  This is typically done during application setup.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.servers.use(.http)\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Middleware in Vapor\nDESCRIPTION: Creates a custom middleware to restrict access to admin users. It checks user roles using `request.auth.get(User.self)` and returns an unauthorized error if the user is not an admin.  It uses the `Middleware` protocol and returns an `EventLoopFuture<Response>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            return request.eventLoop.future(error: Abort(.unauthorized))\n        }\n        return next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global JSON Encoder in Swift\nDESCRIPTION: This code snippet shows how to configure the global JSON encoder for the application.  It creates a new `JSONEncoder` with a custom `dateEncodingStrategy` and then sets it as the global encoder for the `.json` media type. This is typically done in the `configure.swift` file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// maak een nieuwe JSON encoder die unix-timestamp data gebruikt\nlet encoder = JSONEncoder()\nencoder.dateEncodingStrategy = .secondsSince1970\n\n// overschrijf de globale codeur die gebruikt wordt voor het `.json` media type\nContentConfiguration.global.use(encoder: encoder, for: .json)\n```\n\n----------------------------------------\n\nTITLE: Sending APNS in a Route Handler - Swift\nDESCRIPTION: This snippet demonstrates how to send a push notification from within a Vapor route handler using `req.apns.client.send(...)`. It illustrates a simple GET route that triggers the sending of a push notification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Sends a push notification.\napp.get(\"test-push\") { req async throws -> HTTPStatus in\n    try await req.apns.client.send(...)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Model to a Siblings Relationship in Fluent\nDESCRIPTION: This example shows how to attach a model to a siblings relationship using the `attach` method. This creates a new pivot model instance and associates the two models. It can optionally include a closure to configure additional properties on the pivot model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet earth: Planet = ...\nlet inhabited: Tag = ...\n// 添加模型到关系中。\ntry await earth.$tags.attach(inhabited, on: database)\n// 在建立关联时填充枢纽模型的属性。\ntry await earth.$tags.attach(inhabited, on: database) { pivot in\n    pivot.comments = \"This is a life-bearing planet.\"\n    pivot.status = .accepted\n}\n// 将带有属性的多个模型添加到关系中。\nlet volcanic: Tag = ..., oceanic: Tag = ...\ntry await earth.$tags.attach([volcanic, oceanic], on: database) { pivot in\n    pivot.comments = \"This planet has a tag named \\(pivot.$tag.name).\";\n    pivot.status = .pending\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dictionary Field (Swift)\nDESCRIPTION: This Swift code shows how to define a field with a dictionary data type using Fluent. The field named \"pet\" uses the `.dictionary` data type and is marked as required. Fluent SQL database connectors stores dictionary data types as JSON columns.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"pet\", .dictionary, .required)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSessionAuthenticator in Vapor (Swift)\nDESCRIPTION: This code snippet showcases the implementation of an AsyncSessionAuthenticator in Vapor using async/await. It authenticates a user asynchronously based on a session ID, logging them in using the request's authentication system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserSessionAuthenticator: AsyncSessionAuthenticator {\n    typealias User = App.User\n    func authenticate(sessionID: String, for request: Request) async throws {\n        let user = User(email: sessionID)\n        request.auth.login(user)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint with Cascade Delete (Swift)\nDESCRIPTION: This code snippet demonstrates adding a foreign key constraint with a cascade delete action using Fluent. It establishes a relationship between the \"star_id\" field in the current table and the \"id\" field in the \"stars\" table.  When a row in the \"stars\" table is deleted, any rows in the current table with a matching \"star_id\" will also be deleted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n.foreignKey(\"star_id\", references: \"stars\", \"id\", onDelete: .cascade)\n```\n\n----------------------------------------\n\nTITLE: Specifying a Delay for a Job using Async/Await Swift\nDESCRIPTION: This snippet demonstrates how to specify a delay before a queue job is executed using async/await. It dispatches an `EmailJob` with a specified payload, `maxRetryCount` and `delayUntil` parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 1 日後\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3,\n        delayUntil: futureDate)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RedisSessionsDelegate for Redis Hash Storage\nDESCRIPTION: This code snippet demonstrates how to implement the `RedisSessionsDelegate` protocol to store session data as a Redis hash. It includes the `redis(_:store:with:)` function to save session data as hash fields and the `redis(_:fetchDataFor:)` function to retrieve session data from the Redis hash and convert it back to `SessionData`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    store data: SessionData,\n    with key: RedisKey\n) -> EventLoopFuture<Void> {\n    // salva ogni campo dei dati come un campo hash separato\n    return client.hmset(data.snapshot, in: key)\n}\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    fetchDataFor key: RedisKey\n) -> EventLoopFuture<SessionData?> {\n    return client\n        .hgetall(from: key)\n        .map { hash in\n            // hash è [String: RESPValue] quindi dobbiamo provare e spacchettare il\n            // valore come una stringa e salvare ogni valore nel container dei dati\n            return hash.reduce(into: SessionData()) { result, next in\n                guard let value = next.value.string else { return }\n                result[next.key] = value\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: POST route handler for creating users\nDESCRIPTION: Defines a POST route handler that attempts to decode request content into a `CreateUser` object. After decoding, it returns the decoded user. Placeholder provided to indicate further processing of `user` data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"users\") { req -> CreateUser in\n    let user = try req.content.decode(CreateUser.self)\n    // Do something with user.\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Migration to app.migrations\nDESCRIPTION: This snippet adds the `CreateGalaxy` migration to the application's migrations list in `configure.swift`.  This tells Fluent to run the migration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(CreateGalaxy())\n```\n\n----------------------------------------\n\nTITLE: Handling Text Messages - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to handle incoming text messages using the `onText` callback. The callback is executed when a text message is received, providing the WebSocket instance and the received text as arguments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    // String received by this WebSocket.\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AsyncScheduledJob Swift\nDESCRIPTION: Defines a `CleanupJob` that conforms to the `AsyncScheduledJob` protocol. The `run` method defines the task to be executed asynchronously on the schedule using async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nstruct CleanupJob: AsyncScheduledJob {\n    // 追加のサービスが必要な場合は、依存性注入を使用してここに追加します。\n\n    func run(context: QueueContext) async throws {\n        // ここで何か作業を行い、別のジョブをキューに入れるなどします。\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with FileMiddleware in Vapor\nDESCRIPTION: Registers `FileMiddleware` to serve static assets from the `Public` directory.  The middleware uses the `app.directory.publicDirectory` to locate the directory.  Static files such as images, CSS, and JavaScript files can then be accessed via the web.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nlet file = FileMiddleware(publicDirectory: app.directory.publicDirectory)\napp.middleware.use(file)\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint Top-Level (Swift)\nDESCRIPTION: This Swift code adds a foreign key constraint at the top level of the schema using Fluent. It requires that the values in the \"star_id\" field match values in the \"id\" field of the \"stars\" table, thus maintaining referential integrity between the two tables. This method offers flexibility for schema updates and naming the constraint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n.foreignKey(\"star_id\", references: \"stars\", \"id\")\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading Relationships in Fluent\nDESCRIPTION: This code demonstrates how to eagerly load nested relationships using the `with` method with a closure. This allows pre-loading relationships on related models (in this case, preloading the galaxy on the star related to each planet).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nlet planets = try await Planet.query(on: database).with(\\.$star) { star in\n    star.with(\\.$galaxy)\n}.all()\nfor planet in planets {\n    // `star.galaxy` 在这里是同步访问的\n    // 因为它已经被预加载\n    print(planet.star.galaxy.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding the decoder for a specific request - Swift\nDESCRIPTION: This code demonstrates how to override the default decoder for a specific request. A new `JSONDecoder` is created with a custom date decoding strategy. This decoder is then passed as the `using:` parameter to the `req.content.decode` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// create a new JSON decoder that uses unix-timestamp dates\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\n\n// decodes Hello struct using custom decoder\nlet hello = try req.content.decode(Hello.self, using: decoder)\n```\n\n----------------------------------------\n\nTITLE: Creating and Completing Promises in Vapor\nDESCRIPTION: This code shows how to create a promise and fulfill it using `EventLoopPromise` in Vapor. A promise is created using `eventLoop.makePromise(of:)`, which generates a future associated with the promise. The promise can then be fulfilled with a value using `succeed(_:)` or with an error using `fail(_:)`, completing the associated future. A promise can only be fulfilled once; subsequent attempts are ignored. Fulfilling is thread-safe, ensuring execution on the event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nlet eventLoop: EventLoop \n\n// Maak een nieuwe promise voor een string.\nlet promiseString = eventLoop.makePromise(of: String.self)\nprint(promiseString) // EventLoopPromise<String>\nprint(promiseString.futureResult) // EventLoopFuture<String>\n\n// Voltooit de bijbehorende toekomst.\npromiseString.succeed(\"Hello\")\n\n// Laat de geassocieerde toekomst mislukken.\npromiseString.fail(...)\n```\n\n----------------------------------------\n\nTITLE: Decoding query string into a struct - Swift\nDESCRIPTION: This snippet demonstrates how to decode the request's query string into a `Hello` struct using `req.query.decode(Hello.self)`.  It retrieves the `name` property from the decoded struct and returns a greeting string.  If the `name` parameter is not present in the query string, it defaults to \"Anonymous\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in \n    let hello = try req.query.decode(Hello.self)\n    return \"Hello, \\(hello.name ?? \\\"Anonymous\\\")\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding QueuesRedisDriver dependency - Swift\nDESCRIPTION: This snippet shows how to add the QueuesRedisDriver as a dependency to your SwiftPM package manifest file. It specifies the package URL and version, and adds the product to the target dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        /// Any other dependencies ...\n        .package(url: \"https://github.com/vapor/queues-redis-driver.git\", from: \"1.0.0\"),\n    ],\n    targets: [\n        .executableTarget(name: \"App\", dependencies: [\n            // Other dependencies\n            .product(name: \"QueuesRedisDriver\", package: \"queues-redis-driver\")\n        ]),\n        .testTarget(name: \"AppTests\", dependencies: [.target(name: \"App\")]),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Verification in Vapor\nDESCRIPTION: This snippet demonstrates asynchronous password verification using the `async` property on the password hasher. It verifies the plaintext password against a stored digest in a non-blocking manner. Awaits or futures are used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nreq.password.async.verify(\"vapor\", created: digest).map { bool in\n    // Utiliza el resultado.\n}\n\n// o\n\nlet result = try await req.password.async.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponseEncodable for HTML struct in Swift\nDESCRIPTION: This code implements the `ResponseEncodable` protocol for the `HTML` struct. It sets the `Content-Type` header to `text/html` and returns a successful future containing the HTML string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nextension HTML: ResponseEncodable {\n  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return request.eventLoop.makeSucceededFuture(.init(\n      status: .ok, headers: headers, body: .init(string: value)\n    ))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Session in Vapor\nDESCRIPTION: This snippet shows how to destroy a session within a route handler. This will delete the session data from the session driver and invalidate the session cookie.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"del\") { req -> HTTPStatus in\n    req.session.destroy()\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection with Async/Await (Swift)\nDESCRIPTION: This code demonstrates how to close a WebSocket connection using the `ws.close` method with `async/await`.  The `await` keyword blocks execution until the close operation completes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.close()\n```\n\n----------------------------------------\n\nTITLE: Replacing ErrorMiddleware\nDESCRIPTION: This snippet demonstrates how to replace the default `ErrorMiddleware` with a custom error handling middleware. This allows you to customize error handling beyond what `AbortError` and `DebuggableError` provide.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Elimina todos los middleware existentes.\napp.middleware = .init()\n// Añade middleware de manejo de errores personalizado primero.\napp.middleware.use(MyErrorMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware (Ensure Admin User) - Swift (AsyncMiddleware Protocol)\nDESCRIPTION: This code snippet is an asynchronous version of the EnsureAdminUserMiddleware using the `AsyncMiddleware` protocol and `async`/`await`. It checks the user's role and throws an unauthorized error if the user isn't an admin.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            throw Abort(.unauthorized)\n        }\n        return try await next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC key for signing/verification\nDESCRIPTION: This code snippet demonstrates how to add an HMAC key to the application's JWT configuration.  It uses SHA-256 as the digest algorithm. This key will be used for both signing and verifying JWTs.  The `await` keyword is used because the keys collection is an `actor`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport JWT\n\n// HMAC mit SHA-256 Unterzeichner hinzufügen.\nawait app.jwt.keys.addHMAC(key: \"secret\", digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Defining a Content struct for decoding in Swift\nDESCRIPTION: This code shows how to define a struct that conforms to the `Content` protocol in Vapor. Conforming to `Content` automatically adds conformance to `Codable` and provides utilities for working with the content API.  The `Greeting` struct has a single `String` property named `hello`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Greeting: Content {\n    var hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stack Trace Capture Regardless of Log Level (Swift)\nDESCRIPTION: This code snippet shows how to enable stack trace capture for all errors regardless of the application's configured log level.  By setting `StackTrace.isCaptureEnabled` to `true`, stack traces will be recorded even when the log level is higher than `.debug`. This allows for always-on stack trace collection, potentially useful for diagnosing issues in production environments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Leg altijd stack traces vast, ongeacht het log niveau.\nStackTrace.isCaptureEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Using Custom Response Encodable\nDESCRIPTION: Shows how to use the custom `HTML` struct with `ResponseEncodable` implementation as a return type for a route. This allows you to return an `HTML` object directly, and Vapor will handle encoding it into an HTTP response with the correct content type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get { _ in\n  HTML(value: \"\"\"\n  <html>\n    <body>\n      <h1>Hello, World!</h1>\n    </body>\n  </html>\n  \"\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling FileMiddleware in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to enable the `FileMiddleware` in a Vapor application to serve static files from the `Public/` directory. It initializes the middleware with the public directory path and registers it for use by the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Fornisce i file dalla cartella `Public/`\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Fetching the First Planet Named Earth Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to fetch the first planet named 'Earth' from the database using Fluent's query API. It uses the `filter` method to constrain the results and the `first()` method to retrieve the first matching record or nil if no record is found.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches the first planet named Earth.\nlet earth = try await Planet.query(on: database)\n    .filter(\\.$name == \"Earth\")\n    .first()\n```\n\n----------------------------------------\n\nTITLE: YAML Database Username Environment Variable\nDESCRIPTION: This YAML snippet shows how to define a Docker Compose service's environment variable for database username. It retrieves the value from the host environment during deployment and passes the environment variables to the containers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nDATABASE_USERNAME: ${DATABASE_USERNAME}\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading with with() in Swift\nDESCRIPTION: This code demonstrates nested eager loading. It preloads the `star` relationship for planets and then preloads the `galaxy` relationship for the associated `star`. This allows accessing `planet.star.galaxy.name` synchronously. The `database` parameter specifies the database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\nlet planets = try await Planet.query(on: database).with(\\.$star) { star in\n    star.with(\\.$galaxy)\n}.all()\nfor planet in planets {\n    // `star.galaxy` es accesible de manera sincrónica aquí \n    // dado que ha sido precargada.\n    print(planet.star.galaxy.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a file asynchronously in chunks with EventLoopFuture in Vapor\nDESCRIPTION: Reads a file from disk asynchronously and processes it in chunks. The `readFile` method of the `req.fileio` object is used to read the file specified by its path. The provided closure is called for each chunk read from the file. The returned `EventLoopFuture` signals when the read operation is complete or if an error occurred.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Lee un archivo del disco de forma asíncrona.\nlet readComplete: EventLoopFuture<Void> = req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Request Body with Max Size in Vapor\nDESCRIPTION: This snippet demonstrates how to collect the request body up to a specified maximum size for a specific route. This allows customizing the body size limit on a per-route basis.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Recopila la transmisión de Body (hasta 1mb de tamaño) antes de llamar a esta ruta.\napp.on(.POST, \"listings\", body: .collect(maxSize: \"1mb\")) { req in\n    // Administra la petición. \n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Verification\nDESCRIPTION: Verifies a password asynchronously using the `req.password.async.verify()` method. Uses map to handle the boolean result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nreq.password.async.verify(\"vapor\", created: digest).map { bool in\n    // Handle result.\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Read File Vapor\nDESCRIPTION: This snippet shows how to asynchronously read a file from disk using Vapor's `readFile` method, providing a callback handler that processes chunks of the file (ByteBuffer) as they are read. Two ways are shown: using `EventLoopFuture` and using `async/await`. The path to the file is specified, and relative paths are resolved against the process's current working directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Asynchronously reads a file from disk.\nlet readComplete: EventLoopFuture<Void> = req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n\n// Or\n\ntry await req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n// Read is complete\n```\n\n----------------------------------------\n\nTITLE: Querying Related Models in Fluent\nDESCRIPTION: This code shows how to create a query builder for related models using the `query(on:)` method.  It then uses the query builder to filter the related models based on a condition (in this case, planets with names starting with 'M').\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// 获取太阳系中的行星，且命名以 M 开头。\ntry await sun.$planets.query(on: database).filter(\\.$name =~ \"M\").all()\n```\n\n----------------------------------------\n\nTITLE: WebSocket Route Setup in Vapor\nDESCRIPTION: This snippet demonstrates how to add a WebSocket endpoint to a Vapor application using the `webSocket` method within the routing API. It establishes a WebSocket route at the \"echo\" path. The closure receives a `Request` and `WebSocket` instance representing the connection. This route can be grouped and protected by middleware, similar to regular routes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.webSocket(\"echo\") { req, ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response with Synchronous Middleware in Vapor\nDESCRIPTION: Creates a middleware to add a custom header to the response using the `Middleware` protocol. It adds the header \"My-App-Version\" with the value \"v2.5.9\" to every outgoing response. Uses the `map` function to manipulate the `EventLoopFuture<Response>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        next.respond(to: request).map { response in\n            response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n            return response\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification in Route Swift\nDESCRIPTION: Demonstrates how to send a push notification from within a Vapor route handler. Uses `req.apns.client.send` to send the notification and returns an HTTP status.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Envía una notificación push.\napp.get(\"test-push\") { req async throws -> HTTPStatus in\n    try await req.apns.client.send(...)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Planet DTO for Content Encoding/Decoding (Swift)\nDESCRIPTION: Defines a Data Transfer Object (DTO) for the Planet model. Using a DTO is recommended when sending models as HTTP bodies to control the structure of the data and prevent issues with nested relationships. The DTO flattens the `star` relationship to `Star.IDValue`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct PlanetDTO: Content {\n    var id: UUID?\n    var name: String\n    var star: Star.IDValue\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a TOTP Code in Vapor\nDESCRIPTION: This snippet demonstrates how to generate a TOTP (Time-based One-Time Password) code in Vapor. TOTP is a time-based variant of HOTP. It requires a symmetric key, a time interval, and the current time. The snippet generates a code using SHA256, 6 digits, an interval of 60 seconds, and the current date and time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet totp = TOTP(key: key, digest: .sha256, digits: .six, interval: 60)\nlet code = totp.generate(time: Date())\n\n// 或者使用静态生成函数\nTOTP.generate(key: key, digest: .sha256, digits: .six, interval: 60, time: Date())\n```\n\n----------------------------------------\n\nTITLE: Defining a Field in a Fluent Model\nDESCRIPTION: This code snippet demonstrates how to define a simple field in a Fluent model using the `@Field` property wrapper. The `key` parameter specifies the name of the field in the database. This allows mapping Swift property names to potentially different database column names.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Field(key: \"name\")\nvar name: String\n```\n\n----------------------------------------\n\nTITLE: Verifying a Password\nDESCRIPTION: This snippet shows how to verify a password against a previously hashed password using the `req.password.verify` method.  It takes a plain text password and a hash as input and returns a boolean indicating whether the password is valid.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet bool = try req.password.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vapor to Use Leaf (Swift)\nDESCRIPTION: This snippet shows how to configure Vapor to use the Leaf renderer. This step is crucial for enabling Leaf templating within your Vapor application. It involves calling `app.views.use(.leaf)` within the `configure.swift` file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport Leaf\n\napp.views.use(.leaf)\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Commands to Redis in Swift\nDESCRIPTION: This snippet demonstrates how to send raw commands to Redis using the send method on the RedisClient. It shows how to send the PING command with an argument and handle the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.it.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// ogni valore dopo il comando è l'argomento di posizione che Redis si aspetta\ntry app.redis.send(command: \"PING\", with: [\"hello\"])\n    .map {\n        print($0)\n    }\n    .wait()\n// \"hello\"\n\n// oppure\n\nlet res = try await app.redis.send(command: \"PING\", with: [\"hello\"])\nprint(res)\n// \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Planets by Name Prefix Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to filter planets based on whether their name starts with the letter 'M' using Fluent's query API. It uses the `filter` method with the `=~` operator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// All planets whose name starts with the letter M\nPlanet.query(on: database)\n    .filter(\\.$name =~ \"M\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in Optional Child Relation (Swift)\nDESCRIPTION: This code demonstrates how to add a new model to an optional child relation using the `create` method. The parent ID is automatically set on the child model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Example of adding a new model to a relation.\nlet jane = Governor(name: \"Jane Doe\")\ntry await mars.$governor.create(jane, on: database)\n```\n\n----------------------------------------\n\nTITLE: Sending Binary Message via WebSocket\nDESCRIPTION: This snippet demonstrates sending a binary message (array of bytes) through a WebSocket connection. The `send` method is used with an array of `UInt8` values `[1, 2, 3]` representing the binary data to be sent. This is an asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nws.send([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop in Vapor\nDESCRIPTION: This snippet shows how to access an event loop from a Request within a route closure using `req.eventLoop` and how to get an available event loop outside of route closures using `app.eventLoopGroup.next()`.  Promises should be created on the same event loop as the request they serve.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nreq.eventLoop.makePromise(of: ...)\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.eventLoopGroup.next().makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Cowsay Command Definition (Swift)\nDESCRIPTION: This code defines a more complex command named `Cowsay` that accepts an argument (`message`) and two optional options (`eyes` and `tongue`).  The command generates an ASCII art cow saying the provided message using the specified eyes and tongue, and prints it to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct Cowsay: AsyncCommand {\n    struct Signature: CommandSignature {\n        @Argument(name: \"message\")\n        var message: String\n\n        @Option(name: \"eyes\", short: \"e\")\n        var eyes: String?\n\n        @Option(name: \"tongue\", short: \"t\")\n        var tongue: String?\n    }\n\n    var help: String {\n        \"Generates ASCII picture of a cow with a message.\"\n    }\n\n    func run(using context: CommandContext, signature: Signature) async throws {\n        let eyes = signature.eyes ?? \"oo\"\n        let tongue = signature.tongue ?? \"  \"\n        let cow = #\"\"\"\n          < $M >\n                  \\   ^__^\n                   \\  ($E)\\_______\n                      (__)\\       )\\/\\\n                       $T ||----w |\n                          ||     ||\n        \"\"\"#.replacingOccurrences(of: \"$M\", with: signature.message)\n            .replacingOccurrences(of: \"$E\", with: eyes)\n            .replacingOccurrences(of: \"$T\", with: tongue)\n        context.console.print(cow)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get catch-all parameter values as String array\nDESCRIPTION: This snippet shows how to retrieve the values matched by a catch-all (`**`) path component as an array of strings using `req.parameters.getCatchall()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /hello/foo\n// 响应到 GET /hello/foo/bar\n// ...\napp.get(\"hello\", \"**\") { req -> String in\n    let name = req.parameters.getCatchall().joined(separator: \" \")\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Homogenous Dictionary Field (Swift)\nDESCRIPTION: This snippet shows how to define a homogenous dictionary field, such as a dictionary of String to Int. The `.dictionary(of:)` syntax is used to specify the value type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"numbers\", .dictionary(of: .int), .required)\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Middleware in Vapor\nDESCRIPTION: Creates a middleware that ensures only admin users can access a route. It checks the user's role and returns an unauthorized error if the user is not an admin. It uses the `Middleware` protocol, requiring a `respond` function that returns an `EventLoopFuture<Response>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            return request.eventLoop.future(error: Abort(.unauthorized))\n        }\n        return next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Codable Payload for Push Notifications\nDESCRIPTION: This snippet shows how to define a custom `Codable` struct to represent the payload data for a push notification.  The struct can contain any properties that conform to `Codable`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Apple JWT - Swift\nDESCRIPTION: This snippet retrieves and verifies an Apple JWT from the authorization header.  It uses the `req.jwt.apple.verify()` method, which handles the retrieval, decoding, and verification of the JWT.  The `AppleIdentityToken` is returned upon successful verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\n// Apple JWT aus dem Autorisierungs-Header abrufen und überprüfen.\napp.get(\"apple\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.apple.verify()\n    print(token) // AppleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dotenv Variables in Swift\nDESCRIPTION: This code snippet demonstrates how to access variables loaded from a `.env` file using the `Environment.get` method. It retrieves the value of the `FOO` environment variable and prints it to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Streaming Request Body in Vapor\nDESCRIPTION: This example shows how to configure a route to stream the request body instead of collecting it in memory. This is useful for large file uploads or other scenarios where buffering the entire body is impractical.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// El cuerpo de la petición no se recopilará en un búfer.\napp.on(.POST, \"upload\", body: .stream) { req in\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Model to a Siblings Relation (Swift)\nDESCRIPTION: This code demonstrates how to attach a model to a siblings relation using the `attach()` method.  It creates and saves pivot models automatically.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet earth: Planet = ...\nlet inhabited: Tag = ...\n// Adds the model to the relation.\ntry await earth.$tags.attach(inhabited, on: database)\n// Populate pivot attributes when establishing the relation.\ntry await earth.$tags.attach(inhabited, on: database) { pivot in\n    pivot.comments = \"This is a life-bearing planet.\"\n    pivot.status = .accepted\n}\n// Add multiple models with attributes to the relation.\nlet volcanic: Tag = ..., oceanic: Tag = ...\ntry await earth.$tags.attach([volcanic, oceanic], on: database) { pivot in\n    pivot.comments = \"This planet has a tag named \\(pivot.$tag.name).\".replacingOccurrences(of: \"\\\\\", with: \"\\\\\")\n    pivot.status = .pending\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Children Property in Swift Model\nDESCRIPTION: This snippet defines a children property in a Swift model using the `@Children` property wrapper. It takes a key path to the parent's `@Parent` field as the `for` parameter. Its value is an array of child models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_39\n\nLANGUAGE: swift\nCODE:\n```\n// 这个星系的所有恒星。\n@Children(for: \\.$galaxy)\nvar stars: [Star]\n```\n\n----------------------------------------\n\nTITLE: Collecting a file into a buffer in Swift\nDESCRIPTION: This snippet demonstrates how to read the entire file into a buffer using Vapor's `req.fileio.collectFile` method and an `EventLoopFuture`. The method requires the file path as input. The resulting buffer will be a `ByteBuffer`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Leest het bestand in een buffer.\nreq.fileio.collectFile(at: \"/path/to/file\").map { buffer in \n    print(buffer) // ByteBuffer\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a file asynchronously using async/await in Swift\nDESCRIPTION: This snippet demonstrates how to asynchronously read a file from disk using Vapor's `req.fileio.readFile` method and `async`/`await`. The `readFile` function takes the file path as input and a closure that will be executed for each chunk of data read from the file. When the `await` returns, the reading will be complete. If an error occurred, an error message will be given.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Or\n\ntry await req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n// Lezen is voltooid\n```\n\n----------------------------------------\n\nTITLE: Enable TLS in Vapor (Swift)\nDESCRIPTION: This snippet enables TLS (SSL) for the Vapor HTTP server. It sets the `tlsConfiguration` property to a server configuration created from PEM files for the certificate chain and private key.  Requires importing NIOSSL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Schakel TLS in.\napp.http.server.configuration.tlsConfiguration = .makeServerConfiguration(\n    certificateChain: try NIOSSLCertificate.fromPEMFile(\"/path/to/cert.pem\").map { .certificate($0) },\n    privateKey: .privateKey(try NIOSSLPrivateKey(file: \"/path/to/key.pem\", format: .pem))\n)\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: This snippet shows a Systemd service file configuration for a Vapor application named 'Hello'. It defines the service dependencies, user, group, restart policy, working directory, and the execution command to start the Vapor application in production mode. It also specifies logging options.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.zh.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n[Unit]\nDescription=Hello\nRequires=network.target\nAfter=network.target\n\n[Service]\nType=simple\nUser=vapor\nGroup=vapor\nRestart=always\nRestartSec=3\nWorkingDirectory=/home/vapor/hello\nExecStart=/home/vapor/hello/.build/release/App serve --env production\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=vapor-hello\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Throwing Abort Errors in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to throw `Abort` errors in Vapor to return specific HTTP status codes and reasons. It shows examples for both a standard 404 error and a custom 401 error with a specific message. It is used to handle errors directly in route handlers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// 404 fout, standaard \"Not Found\" reden gebruikt.\nthrow Abort(.notFound)\n\n// 401 fout, aangepaste reden gebruikt.\nthrow Abort(.unauthorized, reason: \"Invalid Credentials\")\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Dependency in Package.swift (Swift)\nDESCRIPTION: This snippet demonstrates how to add the JWT dependency to your Package.swift file for a Vapor project. It specifies the package URL and the version to use, and adds the `JWT` product to the target's dependencies. This allows you to use JWT functionality in your Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n\t\t // Andere afhankelijkheden...\n        .package(url: \"https://github.com/vapor/jwt.git\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Andere afhankelijkheden...\n            .product(name: \"JWT\", package: \"jwt\")\n        ]),\n        // Andere targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job within a route\nDESCRIPTION: Dispatches a job to the queue within a Vapor route handler. This demonstrates how to send a job to be processed asynchronously using the `req.queue.dispatch` method. This function exists in both `EventLoopFuture` and `async` implementations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\")\n        ).map { \"done\" }\n}\n\n// o\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"))\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Completing Promises in Vapor\nDESCRIPTION: This snippet demonstrates how to create a promise using `eventLoop.makePromise`, and how to succeed or fail the associated future using `promise.succeed` and `promise.fail`. A promise can only be completed once.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet eventLoop: EventLoop \n\n// Create a new promise for some string.\nlet promiseString = eventLoop.makePromise(of: String.self)\n\nprint(promiseString) // EventLoopPromise<String>\n\nprint(promiseString.futureResult) // EventLoopFuture<String>\n\n// Completes the associated future.\npromiseString.succeed(\"Hello\")\n\n// Fails the associated future.\npromiseString.fail(...)\n```\n\n----------------------------------------\n\nTITLE: Define Client Token Response in Swift\nDESCRIPTION: This code defines a struct `ClientTokenResponse` that conforms to the `Content` protocol. It contains a single property, `token`, which is a string representing the JWT. This struct is used to structure the response sent back to the client after a successful login.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nstruct ClientTokenResponse: Content {\n    var token: String\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a View with Leaf in Vapor\nDESCRIPTION: This snippet demonstrates how to render a Leaf view within a Vapor route handler.  It uses `req.view.render` to specify the template file (hello) and pass data (a dictionary with the name key).  The route returns an `EventLoopFuture<View>` or `View` depending on if you're using async/await.  This is how dynamic content is generated and sent to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<View> in\n    return req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n\n// or\n\napp.get(\"hello\") { req async throws -> View in\n    return try await req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Closing WebSocket with Promise\nDESCRIPTION: This demonstrates closing a WebSocket connection and using a promise to track the completion of the close operation. While the code passes `nil` for the promise, a valid `EventLoopPromise` of type `Void` can be passed to get notified of successful closure or any errors encountered during closing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nws.close(promise: nil)\n```\n\n----------------------------------------\n\nTITLE: Define JWTPayload Struct - Swift\nDESCRIPTION: This snippet defines a struct TestPayload that conforms to the JWTPayload protocol. It includes custom coding keys to map Swift property names to abbreviated keys used in the JWT payload, and it implements a verify method to validate the expiration claim.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// JWT payload 结构。\nstruct TestPayload: JWTPayload {\n    // 将较长的 Swift 属性名称映射到 JWT payload 中使用的缩写密钥。\n    enum CodingKeys: String, CodingKey {\n        case subject = \"sub\"\n        case expiration = \"exp\"\n        case isAdmin = \"admin\"\n    }\n\n    // \"sub\" (主题) 声明标识了作为 JWT 主题的主体。\n    var subject: SubjectClaim\n\n    // “exp” (过期时间) 声明标识了过期时间，过期后 JWT 绝对不能被接受处理。\n    var expiration: ExpirationClaim\n\n    // 自定义数据。\n    // 如果为真，则该用户为管理员。\n    var isAdmin: Bool\n\n    // 在这里运行额外的签名验证逻辑。\n    // 因为我们有 ExpirationClaim，我们将调用其 verify 方法。\n    func verify(using signer: JWTSigner) throws {\n        try self.expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Validation with Operators - Swift\nDESCRIPTION: This snippet demonstrates how to use operators to combine multiple validation conditions for strings.  The `name` field must not be empty, and the `username` field must be at least 3 characters long and contain only alphanumeric characters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"name\", as: String.self, is: !.empty)\nvalidations.add(\"username\", as: String.self, is: .count(3...) && .alphanumeric)\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future Value with Error Handling\nDESCRIPTION: This code snippet demonstrates how to use the `flatMapThrowing` method to transform a future string into a future integer, throwing an error if the conversion fails. This allows for error handling during the transformation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 返回一个 future 字符串。\nlet futureString: EventLoopFuture<String> = ...\n\n/// 把这个字符串转换成整形\nlet futureInt = futureString.flatMapThrowing { string in\n    print(string) // 实际的字符串\n    // 将字符串转换为整数或抛出错误\n    guard let int = Int(string) else {\n        throw Abort(...)\n    }\n    return int\n}\n\n/// 我们现在有一个 future 的整数\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Attaching a Model Conditionally to Siblings Relationship (Swift)\nDESCRIPTION: Demonstrates attaching a model only if it's not already attached, preventing duplicate entries in the pivot table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Solo añade si la relación no es ya existente.\ntry await earth.$tags.attach(inhabited, method: .ifNotExists, on: database)\n```\n\n----------------------------------------\n\nTITLE: Creating Star via HTTP Request - HTTP\nDESCRIPTION: This is an example HTTP request to create a new star. The body contains the star's name and the ID of the galaxy it belongs to.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /stars HTTP/1.1\ncontent-length: 36\ncontent-type: application/json\n\n{\n    \"name\": \"Sun\",\n    \"galaxy\": {\n        \"id\": ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Apple JWT - Swift\nDESCRIPTION: This snippet demonstrates how to retrieve and verify an Apple JWT from the authorization header in a Vapor application using Swift. It utilizes the `req.jwt.apple.verify()` method to verify the JWT and prints the resulting `AppleIdentityToken`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera y verifica el JWT de Apple desde el encabezado de Autorización.\napp.get(\"apple\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.apple.verify()\n    print(token) // AppleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ECDSA Key from PEM String - Swift\nDESCRIPTION: This snippet initializes an ECDSA public key from a PEM-encoded string using the `ES256PublicKey` initializer. The PEM string represents the public key. The resulting `key` variable holds the initialized ECDSA public key object ready for use in JWT operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nlet ecdsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2adMrdG7aUfZH57aeKFFM01dPnkx\nC18ScRb4Z6poMBgJtYlVtd9ly63URv57ZW0Ncs1LiZB7WATb3svu+1c7HQ==\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Initialisiere einen ECDSA-Schlüssel mit öffentlichem PEM.\nlet key = try ES256PublicKey(pem: ecdsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Attaching a Vapor app to a Postgres database\nDESCRIPTION: This command creates a new database and user specifically for the Vapor app and exposes it via the `DATABASE_URL` environment variable.  Replace `name-of-your-postgres-app` with the name of your Postgres app.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly pg attach name-of-your-postgres-app\n```\n\n----------------------------------------\n\nTITLE: Run Heroku Database Migration\nDESCRIPTION: Runs the database migrations on the Heroku application using the Vapor framework's migrate command. It executes in the production environment to update the database schema.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --env production\n```\n\n----------------------------------------\n\nTITLE: Check Git Branch\nDESCRIPTION: This command displays the current Git branch. It's used to verify that the user is on the correct branch (e.g., main or master) before deploying to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration: Serving Static Files\nDESCRIPTION: This Nginx configuration extends the basic proxy to serve static files directly and fall back to the Vapor app for the rest. It uses the try_files directive to check if a file exists before proxying the request. Requires Nginx to be installed and configured with the base proxy.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nserver {\n\t...\n\n\t# Serveer alle publieke/statische bestanden via nginx en val dan terug op Vapor voor de rest\n\tlocation / {\n\t\ttry_files $uri @proxy;\n\t}\n\n\tlocation @proxy {\n\t\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cookie Swift\nDESCRIPTION: This snippet shows how to customize the HTTP cookie generated for sessions. You can change the cookie name and define a custom function to generate the cookie value.  This configuration allows for greater control over session management.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// 更改 cookie 名称为 ”foo“。\napp.sessions.configuration.cookieName = \"foo\"\n\n// 配置 cookie 值创建。\napp.sessions.configuration.cookieFactory = { sessionID in\n    .init(string: sessionID.string, isSecure: true)\n}\n\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Implementing DebuggableError Protocol (Swift)\nDESCRIPTION: Illustrates how to implement the `DebuggableError` protocol to provide more detailed information for error logging and debugging. The example updates the `MyError` enum to a struct and adds the `DebuggableError` conformance, including source code location.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    enum Value {\n        case userNotLoggedIn\n        case invalidEmail(String)\n    }\n\n    var identifier: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"userNotLoggedIn\"\n        case .invalidEmail:\n            return \"invalidEmail\"\n        }\n    }\n\n    var reason: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var value: Value\n    var source: ErrorSource?\n\n    init(\n        _ value: Value,\n        file: String = #file,\n        function: String = #function,\n        line: UInt = #line,\n        column: UInt = #column\n    ) {\n        self.value = value\n        self.source = .init(\n            file: file,\n            function: function,\n            line: line,\n            column: column\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serve Static Files with FileMiddleware in Vapor\nDESCRIPTION: Configures `FileMiddleware` in Vapor to serve static files from the project's public directory.  It sets up the middleware using the application's directory configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet file = FileMiddleware(publicDirectory: app.directory.publicDirectory)\napp.middleware.use(file)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection - Swift\nDESCRIPTION: This snippet demonstrates the minimum configuration required to connect to a Redis server using Vapor. It initializes an `Application` instance and sets the `redis.configuration` property with a `RedisConfiguration` object, specifying the hostname of the Redis server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet app = Application()\n\napp.redis.configuration = try RedisConfiguration(hostname: \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Constraint with Fluent in Swift\nDESCRIPTION: This snippet demonstrates deleting a constraint by name. In this case, it deletes the constraint named 'no_duplicate_emails'. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n.deleteConstraint(name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Adding EdDSA Key to JWT Key Collection (Swift)\nDESCRIPTION: This snippet shows how to add an EdDSA key to the JWT key collection. This allows the application to use the generated key for signing or verifying JWTs using the EdDSA algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(eddsa: key)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncBearerAuthenticator in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to implement an AsyncBearerAuthenticator in Vapor. It authenticates a user based on a bearer token, logging them in if the token matches the expected value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserBearerAuthenticator: AsyncBearerAuthenticator {\n    func authenticate(bearer: BearerAuthorization, for request: Request) async throws {\n        if bearer.token == \"test\" {\n            let user = User(email: \"hello@vapor.codes\")\n            request.auth.login(user)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Errors\nDESCRIPTION: Demonstrates how to provide custom, human-readable error messages for validation failures using the `customFailureDescription` parameter. Includes examples for both `name` and `username` fields.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n\t\"name\",\n\tas: String.self,\n\tis: !.empty,\n\tcustomFailureDescription: \"Provided name is empty!\"\n)\nvalidations.add(\n\t\"username\",\n\tas: String.self,\n\tis: .count(3...) && .alphanumeric,\n\tcustomFailureDescription: \"Provided username is invalid!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Apple JWT - Swift\nDESCRIPTION: This code demonstrates how to fetch and verify an Apple JWT from the Authorization header using the `req.jwt.apple.verify()` method. The verified token is then printed. This provides a convenient way to handle Apple's identity tokens.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch and verify Apple JWT from Authorization header.\napp.get(\"apple\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.apple.verify()\n    print(token) // AppleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to close a WebSocket connection using the `close` method. This initiates a graceful shutdown of the WebSocket.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nws.close()\n```\n\n----------------------------------------\n\nTITLE: Manual Authentication Login Swift\nDESCRIPTION: This code shows how to manually log in a user in Vapor using `req.auth.login(_:)`. This method accepts any `Authenticatable` user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nreq.auth.login(User(name: \"Vapor\"))\n```\n\n----------------------------------------\n\nTITLE: Manually requiring an authenticated User in Swift\nDESCRIPTION: This snippet shows how to manually retrieve an authenticated `User` using `req.auth.require(_:)`. If no user is authenticated, this method will throw an error, indicated by the `try` keyword.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet user: User = try req.auth.require(User.self)\nprint(user.name) // String\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Log Handler in Vapor\nDESCRIPTION: Shows how to override the default logging handler and register a custom one. This example uses `StreamLogHandler` to output logs to the standard output.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Logging\n\nLoggingSystem.bootstrap { label in\n    StreamLogHandler.standardOutput(label: label)\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relations\nDESCRIPTION: This snippet demonstrates eager loading of the `star` relation for `Planet` models.  It uses the `with` method on the query builder to preload the related star for each planet, allowing synchronous access to the star's properties without additional database queries. The `database` parameter specifies the database connection to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Example of eager loading.\nPlanet.query(on: database).with(\\.$star).all().map { planets in\n    for planet in planets {\n        // `star` is accessible synchronously here \n        // since it has been eager loaded.\n        print(planet.star.name)\n    }\n}\n\n// Or\n\nlet planets = try await Planet.query(on: database).with(\\.$star).all()\nfor planet in planets {\n    // `star` is accessible synchronously here \n    // since it has been eager loaded.\n    print(planet.star.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Field to Schema Builder\nDESCRIPTION: This snippet shows how to add a field to a schema builder.  The arguments are name, type, and optional constraints.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nfield(<name>, <type>, <optional constraints>)\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Response with FlatMapThrowing\nDESCRIPTION: Demonstrates how to decode a JSON response using `flatMapThrowing` to handle potential errors during the decoding process. This allows chaining the decoding operation with further processing of the decoded JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nreq.client.get(\"https://httpbin.org/json\").flatMapThrowing { res in\n\ttry res.content.decode(MyJSONResponse.self)\n}.map { json in\n\t// 处理返回的JSON信息\n}\n```\n\n----------------------------------------\n\nTITLE: Add Composite Unique Constraint Swift\nDESCRIPTION: This snippet shows how to add a composite unique constraint, which requires the combination of values in multiple fields to be unique. It prevents users from having the same first name and last name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"first_name\", \"last_name\")\n```\n\n----------------------------------------\n\nTITLE: Defining Cowsay Command with Arguments and Options (Swift)\nDESCRIPTION: This snippet defines a `Cowsay` command in Vapor, demonstrating the use of `@Argument` and `@Option` to define command-line arguments and options. The command takes a message argument and optional eyes and tongue options to customize the cow's appearance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct Cowsay: AsyncCommand {\n    struct Signature: CommandSignature {\n        @Argument(name: \"message\")\n        var message: String\n\n        @Option(name: \"eyes\", short: \"e\")\n        var eyes: String?\n\n        @Option(name: \"tongue\", short: \"t\")\n        var tongue: String?\n    }\n\n    var help: String {\n        \"Generates ASCII picture of a cow with a message.\"\n    }\n\n    func run(using context: CommandContext, signature: Signature) async throws {\n        let eyes = signature.eyes ?? \"oo\"\n        let tongue = signature.tongue ?? \"  \"\n        let cow = #\"\"\"\n          < $M >\n                  \\   ^__^\n                   \\  ($E)\\\\_______\n                      (__)\\\\       )\\/\\\n                       $T ||----w |\n                          ||     ||\n        \"\"\"#.replacingOccurrences(of: \"$M\", with: signature.message)\n            .replacingOccurrences(of: \"$E\", with: eyes)\n            .replacingOccurrences(of: \"$T\", with: tongue)\n        context.console.print(cow)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Planet Names Using Fluent\nDESCRIPTION: This Swift code snippet shows how to fetch only the names of all planets from the database using Fluent's query API. It utilizes the `all(\\$name)` method to retrieve just the name field for each planet.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches all planet names.\nlet names = try await Planet.query(on: database).all(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Collecting a file into a buffer using async/await in Swift\nDESCRIPTION: This snippet demonstrates how to read the entire file into a buffer using Vapor's `req.fileio.collectFile` method and `async/await`. The method requires the file path as input. The resulting buffer will be a `ByteBuffer`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// of\n\nlet buffer = req.fileio.collectFile(at: \"/path/to/file\")\nprint(buffer)\n```\n\n----------------------------------------\n\nTITLE: Filtering Planets by Name Using Grouping in Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to filter planets based on whether their name is either 'Earth' or 'Mars' using Fluent's query API and grouping.  It uses the `group(.or)` method to create a group of filters where only one must match.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// All planets whose name is either Earth or Mars\nPlanet.query(on: database).group(.or) { group in\n    group.filter(\\.$name == \"Earth\").filter(\\.$name == \"Mars\")\n}.all()\n```\n\n----------------------------------------\n\nTITLE: Reading a file asynchronously using EventLoopFuture in Swift\nDESCRIPTION: This snippet demonstrates how to asynchronously read a file from disk using Vapor's `req.fileio.readFile` method and an `EventLoopFuture`. The `readFile` function takes the file path as input and a closure that will be executed for each chunk of data read from the file. The future will signal when the reading is complete or if an error has occurred.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Leest asynchroon een bestand van schijf.\nlet readComplete: EventLoopFuture<Void> = req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DebuggableError with Source Information (Swift)\nDESCRIPTION: This code snippet demonstrates how to conform a custom error type (`MyError`) to the `DebuggableError` protocol in Vapor. It includes source location information, such as file, function, line, and column, to aid in debugging. By conforming to `DebuggableError`, you can provide more detailed information for error logging and reporting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    enum Value {\n        case userNotLoggedIn\n        case invalidEmail(String)\n    }\n\n    var identifier: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"userNotLoggedIn\"\n        case .invalidEmail:\n            return \"invalidEmail\"\n        }\n    }\n\n    var reason: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var value: Value\n    var source: ErrorSource?\n\n    init(\n        _ value: Value,\n        file: String = #file,\n        function: String = #function,\n        line: UInt = #line,\n        column: UInt = #column\n    ) {\n        self.value = value\n        self.source = .init(\n            file: file,\n            function: function,\n            line: line,\n            column: column\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to pass environment variables to Docker containers from the host environment. The `DATABASE_USERNAME` variable retrieves its value from the environment in which the Docker Compose file is executed. This allows for injecting secrets and configuration values at runtime, avoiding hardcoding sensitive information in the Docker Compose file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nDATABASE_USERNAME: ${DATABASE_USERNAME}\n```\n\n----------------------------------------\n\nTITLE: Implementing the LeafTag Protocol in Swift\nDESCRIPTION: This snippet demonstrates the basic structure for creating a custom Leaf tag by conforming to the `LeafTag` protocol in Swift. It defines a `NowTag` struct with a `render` function that needs to be implemented.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS using TLS Authentication in Vapor\nDESCRIPTION: This code snippet shows how to configure the APNS client using TLS authentication.  It uses the `tls` authentication method, requiring the paths to the private key and PEM file, and optionally a PEM password. The placeholders must be replaced with actual values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nauthenticationMethod: .tls(\n    privateKeyPath: <#path to private key#>,\n    pemPath: <#path to pem file#>,\n    pemPassword: <#optional pem password#>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Models in Swift\nDESCRIPTION: This snippet shows how to update multiple models simultaneously using the `update` method in Fluent. It filters the models to be updated based on a condition.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Update alle planeten genaamd \"Pluto\"\nPlanet.query(on: database)\n    .set(\\.$type, to: .dwarf)\n    .filter(\\.$name == \"Pluto\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database with Connection String\nDESCRIPTION: This snippet illustrates how to configure a MySQL database connection using a connection string, offering a more concise way to define connection parameters. Replace `<connection string>` with your actual connection string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\ntry app.databases.use(.mysql(url: \"<connection string>\"), as: .mysql)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Address in Vapor (Swift)\nDESCRIPTION: This snippet shows how to retrieve the client's IP address from the Request object. It accesses the `remoteAddress` property to get the `SocketAddress` and then extracts the IP address.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"ip\") { req -> String in\n    return req.remoteAddress.ipAddress\n}\n```\n\n----------------------------------------\n\nTITLE: Vapor Route with EventLoopFuture\nDESCRIPTION: This snippet shows a Vapor route handler using EventLoopFuture to perform an asynchronous database query and update.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req -> EventLoopFuture<String> in\n    User.query(on: req.db).first().unwrap(or: Abort(.notFound)).flatMap { user in\n        user.lastAccessed = Date()\n        return user.update(on: req.db).map { user.name }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Create Models (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to create multiple model instances in a single batch operation using the `create(on:)` method on an array of models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Voorbeeld van batchcreatie.\n[earth, mars].create(on: database)\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft App Identifier in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure the Microsoft application identifier within a Vapor application's JWT settings. This configuration is necessary to verify Microsoft JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Configureer Microsoft app identifier.\napp.jwt.microsoft.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Use Custom Server Provider in Vapor (Swift)\nDESCRIPTION: This snippet shows how to use a custom server provider in Vapor using leading-dot syntax. It defines an extension on `Application.Servers.Provider` to add a static variable `myServer` that configures the application to use a custom `MyServer` implementation. Requires defining the custom server class and provider.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nextension Application.Servers.Provider {\n    static var myServer: Self {\n        .init {\n            $0.servers.use { app in\n            \tMyServer()\n            }\n        }\n    }\n}\n\napp.servers.use(.myServer)\n```\n\n----------------------------------------\n\nTITLE: Verify Microsoft JWT - Swift\nDESCRIPTION: This snippet showcases how to retrieve and verify a Microsoft JWT from the Authorization header using the req.jwt.microsoft.verify() method. It displays both synchronous and asynchronous versions for retrieving the token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// 从 Authorization 头获取并验证 Microsoft JWT。\napp.get(\"microsoft\") { req -> EventLoopFuture<HTTPStatus> in\n    req.jwt.microsoft.verify().map { token in\n        print(token) // Microsoft 身份令牌\n        return .ok\n    }\n}\n\n// 或\n\napp.get(\"microsoft\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.microsoft.verify()\n    print(token) // Microsoft 身份令牌\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a file asynchronously in chunks with async/await in Vapor\nDESCRIPTION: Reads a file from disk asynchronously and processes it in chunks, using `async/await`. The `readFile` method of the `req.fileio` object is used to read the file specified by its path. The provided closure is called for each chunk read from the file. When the `await` call returns, the read operation is complete. Errors are thrown as exceptions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// O\ntry await req.fileio.readFile(at: \"/path/to/file\") { chunk in\n    print(chunk) // ByteBuffer\n}\n// La lectura ha finalizado\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Message with Async/Await\nDESCRIPTION: This snippet shows sending a message through a WebSocket using the `async`/`await` syntax for handling asynchronous operations.  The `await` keyword is used to wait for the asynchronous `ws.send` operation to complete before proceeding. The try keyword needs to be added since the asynchronous operation might throw an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.send(...)\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with ID and Field in Swift\nDESCRIPTION: Defines a simple model named `Planet` with an ID and a name field using property wrappers. The `Planet` class inherits from `Model` and defines the schema name as \"planets\". It also includes initializers for creating instances of the model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Naam van de tabel of verzameling.\n    static let schema = \"planets\"\n\n    // Unieke identificator voor deze planeet.\n    @ID(key: .id)\n    var id: UUID?\n\n    // De naam van de Planeet.\n    @Field(key: \"name\")\n    var name: String\n\n    // Maakt een nieuwe, lege Planeet aan.\n    init() { }\n\n    // Creëert een nieuwe planeet met alle eigenschappen ingesteld.\n    init(id: UUID? = nil, name: String) {\n        self.id = id\n        self.name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft Delete Swift\nDESCRIPTION: This code snippet demonstrates how to enable soft delete for a Fluent model by adding a `@Timestamp` field with the `.delete` trigger. This will automatically set the `deletedAt` field when the model is deleted, instead of physically removing it from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 当这个行星被删除的时候。\n    @Timestamp(key: \"deleted_at\", on: .delete)\n    var deletedAt: Date?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database\nDESCRIPTION: This snippet shows how to configure a PostgreSQL database using Fluent. It sets up the database connection with hostname, username, password, database name, and TLS settings. The `as: .psql` specifies the identifier for the PostgreSQL database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport FluentPostgresDriver\n\napp.databases.use(\n    .postgres(\n        configuration: .init(\n            hostname: \"localhost\",\n            username: \"vapor\",\n            password: \"vapor\",\n            database: \"vapor\",\n            tls: .disable\n        )\n    ),\n    as: .psql\n)\n```\n\n----------------------------------------\n\nTITLE: FlatMap with Do/Catch for Throwing Methods\nDESCRIPTION: Demonstrates how to use `flatMap` with do/catch to handle throwing methods within a flatMap transformation. This allows handling potential errors when calling synchronous throwing methods inside a future's transformation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n/// Supongamos cadena y cliente futuros del ejemplo anterior.\nlet futureResponse = futureString.flatMap { string in\n    let url: URL\n    do {\n        // Algún método sincrónico con throws.\n        url = try convertToURL(string)\n    } catch {\n        // Utiliza el bucle de eventos para crear un futuro precompletado.\n        return eventLoop.makeFailedFuture(error)\n    }\n    return client.get(url) // EventLoopFuture<ClientResponse>\n}\n```\n\n----------------------------------------\n\nTITLE: Access Authenticated JWT Payload in Swift\nDESCRIPTION: This code shows how to access the authenticated JWT payload within a protected route.  It retrieves the `SessionToken` from the `req.auth` property and prints the user ID. This allows access to the data stored within the JWT after successful authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\n// Restituisce una risposta ok se il token fornito dall'utente è valido.\nsecure.post(\"validateLoggedInUser\") { req -> HTTPStatus in\n    let sessionToken = try req.auth.require(SessionToken.self)\n    print(sessionToken.userId)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Environments Based on Current Environment in Vapor\nDESCRIPTION: This code snippet demonstrates how to use a switch statement to configure different parts of the application based on the current environment. It uses `app.environment` to determine whether the application is running in production or another environment, and configures the databases accordingly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .production:\n    app.databases.use(....)\ndefault:\n    app.databases.use(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BearerAuthenticator in Swift\nDESCRIPTION: Implements an `AsyncBearerAuthenticator` that authenticates a user based on a bearer token. If the token is `\"test\"`, it creates a `User` instance with a predefined email and logs in the user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserBearerAuthenticator: AsyncBearerAuthenticator {\n    func authenticate(bearer: BearerAuthorization, for request: Request) async throws {\n        if bearer.token == \"test\" {\n            let user = User(email: \"hello@vapor.codes\")\n            request.auth.login(user)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Data for Leaf Loop\nDESCRIPTION: Shows Swift code for passing an array of planets to a Leaf template as part of a `Codable` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct SolarSystem: Codable {\n    let planets = [\"Venus\", \"Earth\", \"Mars\"]\n}\n\nreturn req.view.render(\"solarSystem\", SolarSystem())\n```\n\n----------------------------------------\n\nTITLE: Querying with Model Aliases in Vapor/Fluent (Swift)\nDESCRIPTION: Demonstrates how to perform a Fluent query using model aliases. It joins the `Match` model with `HomeTeam` and `AwayTeam` aliases, filters by the home team's name, and sorts by the away team's name.  It requires `HomeTeam`, `AwayTeam`, and `Match` models to be defined.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera todas las coincidencias donde el nombre del equipo local es Vapor\n// y ordena por el nombre del equipo invitado.\nlet matches = try await Match.query(on: self.database)\n    .join(HomeTeam.self, on: \\Match.$homeTeam.$id == \\HomeTeam.$id)\n    .join(AwayTeam.self, on: \\Match.$awayTeam.$id == \\AwayTeam.$id)\n    .filter(HomeTeam.self, \\.$name == \"Vapor\")\n    .sort(AwayTeam.self, \\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model Instance and Saving to the Database (Async)\nDESCRIPTION: This snippet shows how to create a new `Galaxy` model from the request body, save it to the database using `create(on:)`, and return the newly created model using async/await syntax.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"galaxies\") { req async throws -> Galaxy in\n    let galaxy = try req.content.decode(Galaxy.self)\n    try await galaxy.create(on: req.db)\n    return galaxy\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Model Definition - Swift\nDESCRIPTION: This snippet demonstrates how to define a Fluent model in Vapor 4.  It shows the use of the `Model` protocol, `@Field`, `@OptionalField`, `@ID`, and `static let schema`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    static let schema = \"Planet\"    \n    \n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"name\")\n    var name: String\n\n    @OptionalField(key: \"age\")\n    var age: Int?\n\n    init() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Password with Bcrypt in Vapor\nDESCRIPTION: This snippet demonstrates how to verify a password against an existing Bcrypt digest. Because Bcrypt uses a salt, passwords must be verified against the digest rather than compared directly.  It requires importing the Vapor framework.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.it.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet pass = try Bcrypt.verify(\"test\", created: digest)\nif pass {\n\t// La password e il digest combaciano.\n} else {\n\t// La password è sbagliata.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Addresses for Redis Cluster - Swift\nDESCRIPTION: This snippet shows how to create an array of `SocketAddress` instances for connecting to multiple Redis endpoints, such as a Redis cluster. It uses the `makeAddressResolvingHost(_:port:)` static method to create each `SocketAddress`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet serverAddresses: [SocketAddress] = [\n  try .makeAddressResolvingHost(\"localhost\", port: RedisConnection.Configuration.defaultPort)\n]\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job Swift\nDESCRIPTION: This code shows how to schedule a job using the Vapor Queues API. The `CleanupJob` is scheduled to run yearly on May 23rd at noon.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.schedule(CleanupJob())\n    .yearly()\n    .in(.may)\n    .on(23)\n    .at(.noon)\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres database on Fly\nDESCRIPTION: This command creates a Fly application that can host Postgres databases. The created application is separate from the Vapor application and is dedicated to managing Postgres instances. See Fly documentation for specific details of how the database is configured.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly pg create\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortError for Custom Errors\nDESCRIPTION: This code snippet shows how to conform a custom error type to the `AbortError` protocol in Vapor. It defines an enum `MyError` with different cases and provides implementations for the `reason` and `status` properties to customize the HTTP response based on the error type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nenum MyError {\n    case userNotLoggedIn\n    case invalidEmail(String)\n}\n\nextension MyError: AbortError {\n    var reason: String {\n        switch self {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\t\"\n        }\n    }\n\n    var status: HTTPStatus {\n        switch self {\n        case .userNotLoggedIn:\n            return .unauthorized\n        case .invalidEmail:\n            return .badRequest\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Build Command\nDESCRIPTION: This shell command builds a Docker image for the Vapor application using the instructions in the Dockerfile located in the current directory (where the docker-compose.yml file is located). The resulting image is tagged with a name and label (my-dockerized-app:latest).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Logging System in Vapor (Swift)\nDESCRIPTION: This code shows how to bootstrap the `LoggingSystem` in a Vapor project, typically done in `entrypoint.swift`. It configures the default log handler based on command-line arguments and environment variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\n```\n\n----------------------------------------\n\nTITLE: Fetch All Planet Names Swift\nDESCRIPTION: This snippet illustrates how to fetch only the names of all planets using the `all()` method with a key path.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Haalt alle planeetnamen op.\nlet names = try await Planet.query(on: database).all(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Capturing StackTrace in DebuggableError (Swift)\nDESCRIPTION: This code snippet demonstrates how to capture a stack trace within a custom error type conforming to `DebuggableError`.  By capturing the stack trace, developers can get insight into the call stack at the point where the error occurred, aiding in debugging. `StackTrace.capture()` is used to retrieve the current stack trace.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    var identifier: String\n    var reason: String\n    var stackTrace: StackTrace?\n\n    init(\n        identifier: String,\n        reason: String,\n        stackTrace: StackTrace? = .capture()\n    ) {\n        self.identifier = identifier\n        self.reason = reason\n        self.stackTrace = stackTrace\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Span Metadata without Creating a Span in Vapor (Swift)\nDESCRIPTION: This example demonstrates how to restore span metadata without creating a new span.  It uses `ServiceContext.withValue` to ensure that subsequent asynchronous operations are nested under the main request span. This is useful when libraries emit their own tracing spans.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcess\") { req in\n    try await ServiceContext.withValue(req.serviceContext) {\n        try await fetch()\n        return try await process(result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.swift Manifest Example\nDESCRIPTION: This snippet showcases a typical Package.swift manifest file used in a Vapor project. It defines the package name, supported platforms, dependencies (including Vapor), and targets (application and tests). It specifies the minimum Swift tools version and how to link dependencies to targets for use in the application and test code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Use Custom Server in Vapor\nDESCRIPTION: This snippet demonstrates how to replace Vapor's default HTTP server with a custom server implementation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nfinal class MyServer: Server {\n\t...\n}\n\napp.servers.use { app in\n\tMyServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response with Asynchronous Middleware in Vapor\nDESCRIPTION: Creates a middleware to add a custom header to the response using `async`/`await` and the `AsyncMiddleware` protocol.  It adds the header \"My-App-Version\" with the value \"v2.5.9\" to every outgoing response. Uses `try await` to retrieve the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: AsyncMiddleware {\n    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {\n        let response = try await next.respond(to: request)\n        response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n        return response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Environment Variable\nDESCRIPTION: This shows how to configure log level of the Vapor application through the `LOG_LEVEL` environment variable before starting the application. This configuration impacts the amount of logged details. It is a useful technique to alter the logging level depending on the context in which the application executes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport LOG_LEVEL=debug\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Querying Models Swift\nDESCRIPTION: This code shows how to query models from the database using the `query(on:)` method. This method returns a query builder that can be used to filter, sort, and paginate the results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations in Swift\nDESCRIPTION: This snippet demonstrates how to add the migrations to the `app.migrations` array. The order in which the migrations are added is crucial, as `CreateStar` references the `galaxies` schema, so it should be added after `CreateGalaxy`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(CreateGalaxy())\napp.migrations.add(CreateStar())\n```\n\n----------------------------------------\n\nTITLE: Launching a Vapor App on Fly.io\nDESCRIPTION: This command launches a Vapor application on the Fly.io platform. It starts an interactive prompt to configure application settings such as name, region, and database. This command creates a `fly.toml` configuration file in the app's root directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Accessing the HTTP Client in Vapor (Swift)\nDESCRIPTION: Demonstrates how to access the default HTTP client through the `Application` object and within a route handler using the `Request` object. Using the request's client is preferred within route handlers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.client // Cliente\n\napp.get(\"test\") { req in\n\treq.client // Cliente\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variables (YAML)\nDESCRIPTION: Defines shared environment variables used across multiple services within the Docker Compose file. This example shows how to define environment variables such as LOG_LEVEL, DATABASE_HOST, DATABASE_NAME, DATABASE_USERNAME, and DATABASE_PASSWORD. The LOG_LEVEL uses the environment value or defaults to \"debug\". Other variables are hardcoded for local development.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-shared_environment: &shared_environment\n  LOG_LEVEL: ${LOG_LEVEL:-debug}\n  DATABASE_HOST: db\n  DATABASE_NAME: vapor_database\n  DATABASE_USERNAME: vapor_username\n  DATABASE_PASSWORD: vapor_password\n```\n\n----------------------------------------\n\nTITLE: Returning Failed Future with Abort Error\nDESCRIPTION: This snippet demonstrates how to return a failed `EventLoopFuture` with an `Abort` error in asynchronous code, such as within a `flatMap` closure. This is useful in situations where error throwing is not supported.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = user else {\n    req.eventLoop.makeFailedFuture(Abort(.notFound))    \n}\nreturn user.save()\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request example\nDESCRIPTION: Example of an HTTP POST request with a JSON payload. It includes the `content-type` header set to `application/json` and the `content-length` header indicating the size of the JSON data. The body contains a simple JSON object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /greeting HTTP/1.1\ncontent-type: application/json\ncontent-length: 18\n\n{\"hello\": \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionAuthenticator in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to implement a SessionAuthenticator in Vapor to handle user authentication based on a session ID. It retrieves a user based on the session ID and logs the user in to the request's authentication system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserSessionAuthenticator: SessionAuthenticator {\n    typealias User = App.User\n    func authenticate(sessionID: String, for request: Request) -> EventLoopFuture<Void> {\n        let user = User(email: sessionID)\n        request.auth.login(user)\n        return request.eventLoop.makeSucceededFuture(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable TLS (SSL) in Vapor\nDESCRIPTION: This snippet shows how to enable TLS (SSL) for the Vapor HTTP server. It sets the `tlsConfiguration` property of the server configuration to a configuration created from PEM files.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Enable TLS.\napp.http.server.configuration.tlsConfiguration = .makeServerConfiguration(\n    certificateChain: try NIOSSLCertificate.fromPEMFile(\"/path/to/cert.pem\").map { .certificate($0) },\n    privateKey: .privateKey(try NIOSSLPrivateKey(file: \"/path/to/key.pem\", format: .pem))\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Server (Swift)\nDESCRIPTION: This snippet demonstrates how to connect to a WebSocket server using `WebSocket.connect`. It takes the WebSocket URL and an `EventLoop` as parameters. The closure provided to `connect` is called when the connection is established, and it receives the WebSocket instance for sending and receiving messages.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nWebSocket.connect(to: \"ws://echo.websocket.org\", on: eventLoop) { ws in\n    // Verbonden WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Model Aliases in a Query in Swift\nDESCRIPTION: This snippet demonstrates how to use model aliases in a Fluent query in Swift. It joins models using aliases and filters and sorts the results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Haal alle wedstrijden op waar de naam van de thuisploeg Vapor is\n// en sorteer op de naam van het uitteam.\nlet matches = try await Match.query(on: self.database)\n    .join(HomeTeam.self, on: \\Match.$homeTeam.$id == \\HomeTeam.$id)\n    .join(AwayTeam.self, on: \\Match.$awayTeam.$id == \\AwayTeam.$id)\n    .filter(HomeTeam.self, \\.$name == \"Vapor\")\n    .sort(AwayTeam.self, \\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Add RSA Signer with Key - Swift\nDESCRIPTION: This snippet demonstrates how to add an RSA signer to a Vapor application using a public key in PEM format. This allows the application to verify JWTs signed with the corresponding private key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// 添加带有 SHA-256 的 RSA 算法的签名者。\ntry app.jwt.signers.use(.rs256(key: .public(pem: rsaPublicKey)))\n```\n\n----------------------------------------\n\nTITLE: Accessing Catch-All Parameters (Swift)\nDESCRIPTION: Shows how to access catch-all parameters (matched by `**`) using `req.parameters.getCatchall`.  The return type is `[String]`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /hello/foo\n// responds to GET /hello/foo/bar\n// ...\napp.get(\"hello\", \"**\") { req -> String in\n    let name = req.parameters.getCatchall().joined(separator: \" \")\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password\nDESCRIPTION: This code snippet demonstrates how to hash a password using the `req.password.hash` method.  The input is a plain text password, and the output is a hashed password string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet digest = try req.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Add Middleware to Route Groups in Vapor\nDESCRIPTION: Adds middleware to specific route groups in Vapor using the `app.grouped` method. This allows applying middleware only to certain routes, providing more granular control over request processing. The example shows how to add `MyMiddleware` to a route group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet group = app.grouped(MyMiddleware())\ngroup.get(\"foo\") { req in\n\t// This request has passed through MyMiddleware.\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Models in a Transaction (Closure)\nDESCRIPTION: This snippet illustrates saving two models (`sun` and `sirius`) within a transaction using closures in Vapor. If either save operation fails, both will be rolled back, ensuring data consistency. It utilizes `flatMap` to chain the asynchronous save operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.fr.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar sun: Star = ...\nvar sirius: Star = ...\n\nreturn req.db.transaction { database in\n    return sun.save(on: database).flatMap { _ in\n        return sirius.save(on: database)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Transaction Result Swift\nDESCRIPTION: This snippet shows how to transform the result of a transaction into an `HTTPStatus`. It performs database operations within the transaction closure and then transforms the successful completion of the transaction into an HTTP 200 OK status.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.db.transaction { database in\n    // use database and perform transaction\n}.transform(to: HTTPStatus.ok)\n```\n\n----------------------------------------\n\nTITLE: Querying Database in Vapor 4 (Swift)\nDESCRIPTION: Demonstrates the change in accessing the database context in Vapor 4 route handlers.  `req.db` is now used to access the database instead of `req`. It also shows that key paths to fields are now prefixed with `$` to specify the property wrapper instead of the field value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\n+ Planet.query(on: req.db)\n```\n\nLANGUAGE: swift\nCODE:\n```\n+ filter(\\.$foo == ...)\n```\n\n----------------------------------------\n\nTITLE: Automatically Running Migrations on Server Start via CLI - Shell\nDESCRIPTION: This command shows how to automatically run migrations when the Vapor server starts, using the `--auto-migrate` flag. This ensures that the database is always up-to-date before the server starts serving requests. It's useful for development and testing environments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nswift run App serve --auto-migrate\n```\n\n----------------------------------------\n\nTITLE: Generate ECDSA Key - Swift\nDESCRIPTION: This code snippet showcases how to generate a random ECDSA key using the generate() method. This method is useful for testing purposes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet key = try ECDSAKey.generate()\n```\n\n----------------------------------------\n\nTITLE: Registering a Job in Vapor Queues\nDESCRIPTION: This code snippet shows how to register a job with the Vapor Queues system. It creates an instance of the `EmailJob` and adds it to the queues system using the `app.queues.add()` method. This makes the job available for dispatching.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n//Registreer jobs\nlet emailJob = EmailJob()\napp.queues.add(emailJob)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with FileMiddleware in Vapor (Swift)\nDESCRIPTION: Illustrates how to use `FileMiddleware` to serve static files from the public directory.  This middleware allows serving assets like stylesheets and images directly to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nlet file = FileMiddleware(publicDirectory: app.directory.publicDirectory)\napp.middleware.use(file)\n```\n\n----------------------------------------\n\nTITLE: Implementing DebuggableError for Custom Errors\nDESCRIPTION: This snippet illustrates how to conform a custom error type to the `DebuggableError` protocol in Vapor. It defines a struct `MyError` that stores an enum value and the source location of the error. It implements the required properties `identifier` and `reason` to provide detailed information for error logging and debugging.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    enum Value {\n        case userNotLoggedIn\n        case invalidEmail(String)\n    }\n\n    var identifier: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"userNotLoggedIn\"\n        case .invalidEmail:\n            return \"invalidEmail\"\n        }\n    }\n\n    var reason: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var value: Value\n    var source: ErrorSource?\n\n    init(\n        _ value: Value,\n        file: String = #file,\n        function: String = #function,\n        line: UInt = #line,\n        column: UInt = #column\n    ) {\n        self.value = value\n        self.source = .init(\n            file: file,\n            function: function,\n            line: line,\n            column: column\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration File Example\nDESCRIPTION: This snippet provides an example Supervisor configuration file for a Vapor application named 'hello'.  It specifies the command to run the application, the directory where the application is located, the user to run the application as, and the log files for stdout and stderr.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\n[program:hello]\ncommand=/home/vapor/hello/.build/release/App serve --env production\ndirectory=/home/vapor/hello/\nuser=vapor\nstdout_logfile=/var/log/supervisor/%(program_name)s-stdout.log\nstderr_logfile=/var/log/supervisor/%(program_name)s-stderr.log\n```\n\n----------------------------------------\n\nTITLE: Sending a Binary Message via WebSocket (Swift)\nDESCRIPTION: This snippet demonstrates how to send a binary message over a WebSocket connection using the `ws.send` method. The method accepts an array of `UInt8` as input, which represents the binary data to be sent. The sending operation is asynchronous.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nws.send([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with Environment Flag (Swift)\nDESCRIPTION: Shows how to specify the environment when running the Vapor application using the `--env` (or `-e`) flag. This allows selecting different configurations for various deployment scenarios like production or staging.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve --env production\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ID with Int in Swift\nDESCRIPTION: Explains how to use a custom key and type for the `@ID` property wrapper. The example defines the ID with the key \"foo\" and type `Int`. This is compatible with SQL databases using auto-incrementing primary keys, but not NoSQL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Unieke identificatiecode voor deze planeet.\n    @ID(custom: \"foo\")\n    var id: Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding URL Query Parameters in Swift\nDESCRIPTION: This code snippet demonstrates how to decode URL query parameters into a `Hello` struct using `req.query.decode`. It handles cases where the query string is present or omitted, providing a default value when the name is missing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"hello\") { req -> String in \n    let hello = try req.query.decode(Hello.self)\n    return \"Hello, \\(hello.name ?? \\\"Anonymous\\\")\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Schema Builder with raw expression\nDESCRIPTION: This snippet demonstrates using `.custom` with `.sql(raw:)` within a schema builder to define a database-specific field type. It checks if the underlying database is MySQL before defining the `VARCHAR` field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport FluentSQL\n\nlet builder = database.schema(\"planets\").id()\nif database is MySQLDatabase {\n    // The underlying database driver is MySQL.\n    builder.field(\"name\", .sql(raw: \"VARCHAR(64)\"), .required)\n} else {\n    // The underlying database driver is _not_ MySQL.\n    builder.field(\"name\", .string, .required)\n}\nbuilder.create()\n```\n\n----------------------------------------\n\nTITLE: Paginating Results in Swift\nDESCRIPTION: Demonstrates how to paginate query results using the `paginate(for:)` method, automatically handling page and per-page parameters from the request. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"planets\") { req in\n    try await Planet.query(on: req.db).paginate(for: req)\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n.paginate(PageRequest(page: 1, per: 2))\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Routing (Swift)\nDESCRIPTION: Enables case-insensitive routing. Constant path components will be treated case-insensitively for routing purposes but the original casing is retained.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\napp.routes.caseInsensitive = true\n```\n\n----------------------------------------\n\nTITLE: Generating HOTP Code in Vapor\nDESCRIPTION: This code shows how to generate a HOTP (HMAC-based One-Time Password) using a symmetric key and a counter.  The SymmetricKey determines the encryption strength, and the HOTP is initialized with the key, hash algorithm, and number of digits. A counter is provided to generate the one-time password.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\nlet code = hotp.generate(counter: 25)\n\n// Or using the static generate function\nHOTP.generate(key: key, digest: .sha256, digits: .six, counter: 25)\n```\n\n----------------------------------------\n\nTITLE: Returning Failed Future with Abort Error (Swift)\nDESCRIPTION: This code snippet shows how to return a failed `EventLoopFuture` with an `Abort` error in asynchronous situations where throwing isn't directly supported, such as within a `flatMap` closure. It's useful when you need to signal an error condition within asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = user else {\n    req.eventLoop.makeFailedFuture(Abort(.notFound))    \n}\nreturn user.save()\n```\n\n----------------------------------------\n\nTITLE: Configure Apple Application Identifier - Swift\nDESCRIPTION: This snippet configures the Apple application identifier for JWT verification. This is necessary when using the req.jwt.apple.verify() helper function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// 配置 Apple 应用标识符。\napp.jwt.apple.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with TLS Authentication\nDESCRIPTION: This snippet demonstrates how to configure APNS using TLS authentication.  It utilizes the `.tls` authentication method, requiring the path to the private key and PEM file.  Optionally, a PEM password can be included if the PEM file is encrypted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nauthenticationMethod: .tls(\n    privateKeyPath: <#path to private key#>,\n    pemPath: <#path to pem file#>,\n    pemPassword: <#optional pem password#>\n)\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job to a Specific Queue (Async/Await)\nDESCRIPTION: This code demonstrates dispatching a job to a specific queue using the `.queues(.emails)` modifier in an async/await context. The `EmailJob` is dispatched with specific parameters and a retry count. A future date is set for the job's execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 1 dag\n    try await req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        )\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Application with Docker Compose\nDESCRIPTION: This command starts the application and its dependencies as defined in the docker-compose.yml file. It uses the 'app' service name and brings up all services listed in the `depends_on` array.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up app\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing in Vapor\nDESCRIPTION: This snippet demonstrates how to perform asynchronous password hashing to avoid blocking the event loop. It uses the `async` property on the password hasher to offload the hashing process to a background thread pool. Awaits or futures are used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nreq.password.async.hash(\"vapor\").map { digest in\n    // Utiliza el digest.\n}\n\n// o\n\nlet digest = try await req.password.async.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random ECDSA Private Key (Swift)\nDESCRIPTION: This snippet shows how to generate a random ECDSA private key.  This is suitable for testing or scenarios where key management is handled programmatically. The default initializer `ES256PrivateKey()` creates a new random key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet key = ES256PrivateKey()\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Handler in Vapor (Swift)\nDESCRIPTION: Demonstrates using Vapor's Lifecycle handlers to hook into application boot and shutdown events. The `Hello` struct conforms to `LifecycleHandler` and implements the `willBoot`, `didBoot`, and `shutdown` methods, allowing actions to be performed during these lifecycle events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Prints hello during boot.\nstruct Hello: LifecycleHandler {\n    // Called before application boots.\n    func willBoot(_ app: Application) throws {\n        app.logger.info(\"Hello!\")\n    }\n\n    // Called after application boots.\n    func didBoot(_ app: Application) throws {\n        app.logger.info(\"Server is running\")\n    }\n\n    // Called before application shutdown.\n    func shutdown(_ app: Application) {\n        app.logger.info(\"Goodbye!\")\n    }\n}\n\n// Add lifecycle handler.\napp.lifecycle.use(Hello())\n```\n\n----------------------------------------\n\nTITLE: Using EventLoopFuture\nDESCRIPTION: This code snippet demonstrates how to use EventLoopFuture in a Vapor route to fetch and update a user. It returns a future containing the user's name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req -> EventLoopFuture<String> in\n    User.query(on: req.db).first().unwrap(or: Abort(.notFound)).flatMap { user in\n        user.lastAccessed = Date()\n        return user.update(on: req.db).map { \n            return user.name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Open HTTP Port\nDESCRIPTION: This snippet configures the Ubuntu firewall (ufw) to allow traffic on port 8080, which is the default port for Vapor applications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsudo ufw allow 8080\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose (Shell)\nDESCRIPTION: Starts the application defined in the Docker Compose file as a standalone container. This command will also start dependent services as specified in the `depends_on` array in the Docker Compose file. It starts the 'app' and 'db' services.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose up app\n```\n\n----------------------------------------\n\nTITLE: Verifying Microsoft JWT in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to retrieve and verify a Microsoft JWT from the authorization header within a Vapor route. The `req.jwt.microsoft.verify()` method handles the verification. Both synchronous (using `map`) and asynchronous (using `async throws`) route handlers are shown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Haal en verifieer Microsoft JWT van de autorisatie header.\napp.get(\"microsoft\") { req -> EventLoopFuture<HTTPStatus> in\n    req.jwt.microsoft.verify().map { token in\n        print(token) // MicrosoftIdentityToken\n        return .ok\n    }\n}\n\n// Of\n\napp.get(\"microsoft\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.microsoft.verify()\n    print(token) // MicrosoftIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables (Swift)\nDESCRIPTION: Demonstrates how to access process environment variables using `Environment.get(_:)` and `Environment.process`. `Environment.get(_:)` provides a simple string-based API, while `Environment.process` provides a dynamic member lookup API to access environment variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n\nlet foo = Environment.process.FOO\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Conforming to ValidatorResult Protocol\nDESCRIPTION: This snippet demonstrates how to make a custom validator result type conform to the `ValidatorResult` protocol. It defines the `isFailure`, `successDescription`, and `failureDescription` properties, which are required for custom validation results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nextension ValidatorResults.ZipCode: ValidatorResult {\n    public var isFailure: Bool {\n        !self.isValidZipCode\n    }\n    \n    public var successDescription: String? {\n        \"is a valid zip code\"\n    }\n    \n    public var failureDescription: String? {\n        \"is not a valid zip code\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job to a Specific Queue (Futures)\nDESCRIPTION: This code demonstrates dispatching a job to a specific queue using the `.queues(.emails)` modifier with futures. The `EmailJob` is dispatched with specific parameters and a retry count. A future date is set for the job's execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 1 dag\n    return req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        ).map { \"done\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Models from the Database\nDESCRIPTION: This snippet shows how to fetch all `Galaxy` models from the database using a query. It creates a new query builder for the `Galaxy` model, retrieves all the models using `all()`, and returns them.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"galaxies\") { req async throws in\n    try await Galaxy.query(on: req.db).all()\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Connection in Vapor\nDESCRIPTION: This snippet showcases how to connect to a remote WebSocket server using `WebSocket.connect`. It connects to the specified URL, `ws://echo.websocket.org`, and executes the provided closure upon successful connection. The closure receives the newly established `WebSocket` instance, allowing for further interaction with the server. The `eventLoop` is used for asynchronous execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nWebSocket.connect(to: \"ws://echo.websocket.org\", on: eventLoop) { ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Create Query Builder Swift\nDESCRIPTION: This snippet demonstrates how to create a query builder instance using the database object and the Planet model type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Maakt ook een query builder.\ndatabase.query(Planet.self)\n```\n\n----------------------------------------\n\nTITLE: Using Sessions Middleware in Route Group Swift\nDESCRIPTION: This snippet demonstrates how to apply the `SessionsMiddleware` to a specific group of routes. This is useful when only a subset of your application's routes require session support. The `grouped` method is used to apply the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet sessions = app.grouped(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS using JWT Authentication in Vapor\nDESCRIPTION: This code snippet demonstrates configuring the APNS client in a Vapor application using JWT authentication. It initializes an `APNSClientConfiguration` with the private key, key identifier, and team identifier, and then registers it with the application's APNS containers. The placeholders must be replaced with actual values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport APNS\nimport VaporAPNS\nimport APNSCore\n\n// Configurazione di APNS utilizzando l'autenticazione tramite JWT.\nlet apnsConfig = APNSClientConfiguration(\n    authenticationMethod: .jwt(\n        privateKey: try .loadFrom(string: \"<#key.p8 content#>\"),\n        keyIdentifier: \"<#key identifier#>\",\n        teamIdentifier: \"<#team identifier#>\"\n    ),\n    environment: .development\n)\napp.apns.containers.use(\n    apnsConfig,\n    eventLoopGroupProvider: .shared(app.eventLoopGroup),\n    responseDecoder: JSONDecoder(),\n    requestEncoder: JSONEncoder(),\n    as: .default\n)\n```\n\n----------------------------------------\n\nTITLE: Hashing Password on Application\nDESCRIPTION: Hashes a password using the `app.password.hash()` method on the application instance, useful during boot.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try app.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vapor to use Leaf\nDESCRIPTION: This snippet demonstrates how to configure Vapor to use the Leaf templating engine. By using `app.views.use(.leaf)`, Vapor will utilize the `LeafRenderer` when you call `req.view` in your application code. This step is crucial for integrating Leaf into your Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Leaf\n\napp.views.use(.leaf)\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in a Vapor Request\nDESCRIPTION: This code snippet demonstrates how to access cookies from a Vapor request. It retrieves a specific cookie by its name (`my-cookie`) and checks if it exists and is not expired. If the cookie is valid, its string value is returned; otherwise, an error is thrown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"my-cookie\") { req -> String in\n    guard let cookie = req.cookies[\"my-cookie\"] else {\n        throw Abort(.badRequest)\n    }\n    if let expiration = cookie.expires, expiration < Date() {\n        throw Abort(.badRequest)\n    }\n    return cookie.string\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Models from the Database using Fluent\nDESCRIPTION: This code snippet retrieves all instances of a model from the database using Fluent's query builder. It defines a route that, when accessed, returns an array of all `Galaxy` models stored in the database. The route handler is an asynchronous closure that queries the database and returns the results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"galaxies\") { req async throws in\n    try await Galaxy.query(on: req.db).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Automatically convert route parameters to `LosslessStringConvertible` types\nDESCRIPTION: This code shows how to automatically convert a route parameter to a `LosslessStringConvertible` type, such as `Int`. If the conversion fails, an error is thrown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /number/42\n// 响应到 GET /number/1337\n// ...\napp.get(\"number\", \":x\") { req -> String in \n\tguard let int = req.parameters.get(\"x\", as: Int.self) else {\n\t\tthrow Abort(.badRequest)\n\t}\n\treturn \"\\(int) is a great number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Echoing Received Text Messages via WebSocket in Vapor\nDESCRIPTION: This code snippet demonstrates echoing back received text messages through the same WebSocket connection in Vapor. It utilizes the `ws.onText` method to intercept incoming text. The associated closure then uses `ws.send` to transmit the identical text back to the sender, effectively creating an echo.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Echoes received messages.\nws.onText { ws, text in\n    ws.send(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ECDSA Key to JWT Key Collection (Swift)\nDESCRIPTION: This snippet demonstrates how to add an ECDSA key to the JWT key collection using `app.jwt.keys.add(ecdsa:)`.  This allows the key to be used for signing or verifying JWTs using ECDSA algorithms like ES256.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(ecdsa: key)\n```\n\n----------------------------------------\n\nTITLE: Setting maxRetryCount for a Job - Swift\nDESCRIPTION: This snippet shows how to specify the `maxRetryCount` when dispatching a queue job.  This configures the queue system to automatically retry the job if it encounters an error during execution.  Both EventLoopFuture and async/await variations are provided.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3\n        ).map { \"done\" }\n}\n\n// 或\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Unique Constraint (Swift)\nDESCRIPTION: This snippet illustrates how to remove a unique constraint from a schema. It removes the unique constraint on the \"email\" field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Removes duplicate email constraint.\n.deleteUnique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: gitignore entry for .env files - Gitignore\nDESCRIPTION: This is a recommended pattern to add to your `.gitignore` file to ignore all .env* files from your source control. This is used to exclude environment specific configurations with potentially sensitive information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_6\n\nLANGUAGE: Gitignore\nCODE:\n```\n.env.*\n```\n\n----------------------------------------\n\nTITLE: Decoding Response Content (Swift)\nDESCRIPTION: Shows how to decode the response body using Vapor's `Content` API. The `decode` method is called on the response content to parse the JSON into a `MyJSONResponse` struct or class.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.ja.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/json\")\nlet json = try response.content.decode(MyJSONResponse.self)\n```\n\n----------------------------------------\n\nTITLE: Registering a Job in Queues Swift\nDESCRIPTION: This snippet shows how to register a defined job with the Vapor Queues system.  The `emailJob` instance of `EmailJob` is added to the application's queue system, making it available for dispatch.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// ジョブを登録\nlet emailJob = EmailJob()\napp.queues.add(emailJob)\n```\n\n----------------------------------------\n\nTITLE: Define User Create Content Struct in Vapor (Swift)\nDESCRIPTION: This code defines a Content struct named Create within the User model. It represents the data expected for creating a new user, including name, email, password, and confirmPassword.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nextension User {\n    struct Create: Content {\n        var name: String\n        var email: String\n        var password: String\n        var confirmPassword: String\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Google JWT - Swift\nDESCRIPTION: This snippet shows how to retrieve and verify a Google JWT from the authorization header in a Vapor application using Swift. It utilizes the `req.jwt.google.verify()` method to verify the JWT and prints the resulting `GoogleIdentityToken`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera y verifica el JWT de Google desde el encabezado de Autorización.\napp.get(\"google\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.google.verify()\n    print(token) // GoogleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Migration to the Application in Fluent\nDESCRIPTION: This code shows how to add a defined migration to the application's migrations. This step is necessary for Fluent to recognize and execute the migration when the application starts.  This is typically done in the `configure.swift` file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(CreateGalaxy())\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Unique Constraint with Fluent in Swift\nDESCRIPTION: This snippet adds a unique constraint on the 'email' field and names it 'no_duplicate_emails'. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"email\", name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Fetching First Model in Swift\nDESCRIPTION: Shows how to retrieve the first model matching specific criteria using the `first()` method. Returns an optional model. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet earth = try await Planet.query(on: database)\n    .filter(\\.$name == \"Earth\")\n    .first()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model in a Children Relationship (Swift)\nDESCRIPTION: This shows how to add a new model to an existing children relationship using the `create` method. This establishes the relationship by setting the foreign key in the child model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Ejemplo de añadir un nuevo modelo a una relación.\nlet earth = Planet(name: \"Earth\")\ntry await sun.$planets.create(earth, on: database)\n```\n\n----------------------------------------\n\nTITLE: Schema Building in Vapor 4 (Swift)\nDESCRIPTION: Shows how to create a schema builder in Vapor 4 using an instance method on `Database`. Field definitions are now strongly typed and follow the pattern `field(<name>, <type>, <constraints>)`. Schema building can now be chained like a query builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.schema(\"Galaxy\")\n    .id()\n    .field(\"name\", .string, .required)\n    .create()\n```\n\nLANGUAGE: swift\nCODE:\n```\n+ builder.field(\"name\", .string, .required)\n```\n\n----------------------------------------\n\nTITLE: Sorting with Fallbacks in Swift\nDESCRIPTION: This snippet shows how to add fallback sorting options. If the primary sort field has the same value for multiple records, the fallback sort is used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// Zoek gebruikers gesorteerd op naam. Als twee gebruikers dezelfde naam hebben, sorteer ze dan op leeftijd.\nUser.query(on: database).sort(\\.$name).sort(\\.$age)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Middleware\nDESCRIPTION: This snippet illustrates how to add a custom error handling middleware to a Vapor application. It first removes the default error middleware and then adds the custom middleware as the first middleware in the chain, ensuring that it handles errors before any other middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// 移除已存在的中间件。\napp.middleware = .init()\n// 首先添加自定义错误中间件。\napp.middleware.use(MyErrorMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating and Completing a Promise\nDESCRIPTION: This snippet shows how to create a promise and complete it with a success or failure. A promise is associated with a future that can be observed for the result.  Promises can be completed from any thread and guarantee the completion action will be executed on the event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nlet eventLoop: EventLoop\n\n// Create a new promise for some string.\nlet promiseString = eventLoop.makePromise(of: String.self)\nprint(promiseString) // EventLoopPromise<String>\nprint(promiseString.futureResult) // EventLoopFuture<String>\n\n// Completes the associated future.\npromiseString.succeed(\"Hello\")\n\n// Fails the associated future.\npromiseString.fail(...)\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Close Event - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to use `onClose` to get notified when a WebSocket connection is closed by either the client or the server. The `whenComplete` callback provides information on whether the close operation succeeded or failed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nws.onClose.whenComplete { result in\n    // Succeeded or failed to close.\n}\n```\n\n----------------------------------------\n\nTITLE: Start application and database services\nDESCRIPTION: This command starts both the application and database services using Docker Compose. Specifying both services ensures logs are displayed for both.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up app db\n```\n\n----------------------------------------\n\nTITLE: Cowsay Command Definition\nDESCRIPTION: This Swift code defines a `Cowsay` command that uses `@Argument` and `@Option` to receive a message, eyes, and tongue configuration for the cow. It generates an ASCII art cow saying the given message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct Cowsay: AsyncCommand {\n    struct Signature: CommandSignature {\n        @Argument(name: \"message\")\n        var message: String\n\n        @Option(name: \"eyes\", short: \"e\")\n        var eyes: String?\n\n        @Option(name: \"tongue\", short: \"t\")\n        var tongue: String?\n    }\n\n    var help: String {\n        \"Generates ASCII picture of a cow with a message.\"\n    }\n\n    func run(using context: CommandContext, signature: Signature) async throws {\n        let eyes = signature.eyes ?? \"oo\"\n        let tongue = signature.tongue ?? \"  \"\n        let cow = #\"\"\"\n          < $M >\n                  \\   ^__^\n                   \\  ($E)\\_______\n                      (__)\\       )\\/\\\n                       $T ||----w |\n                          ||     ||\n        \"\"\"#.replacingOccurrences(of: \"$M\", with: signature.message)\n            .replacingOccurrences(of: \"$E\", with: eyes)\n            .replacingOccurrences(of: \"$T\", with: tongue)\n        context.console.print(cow)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Buffer Capacity for Response Compression\nDESCRIPTION: This snippet demonstrates how to specify an initial byte buffer capacity when enabling HTTP response compression, providing fine-grained control over memory allocation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n.enabled(initialByteBufferCapacity: 1024)\n```\n\n----------------------------------------\n\nTITLE: Implementing the render method for NowTag in Swift\nDESCRIPTION: This snippet illustrates the implementation of the `render(_:)` method for a custom `NowTag`. It uses the `LeafContext` to handle parameters for formatting the date, and returns a `LeafData` string representing the current date.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nenum NowTagError: Error {\n    case invalidFormatParameter\n    case tooManyParameters\n}\n\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        let formatter = DateFormatter()\n        switch ctx.parameters.count {\n        case 0: formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n        case 1:\n            guard let string = ctx.parameters[0].string else {\n                throw NowTagError.invalidFormatParameter\n            }\n\n            formatter.dateFormat = string\n        default:\n            throw NowTagError.tooManyParameters\n\t    }\n    \n        let dateAsString = formatter.string(from: Date())\n        return LeafData.string(dateAsString)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Content with Futures (Swift)\nDESCRIPTION: Illustrates how to decode content from an HTTP response when working with futures. It chains the `get` request with `flatMapThrowing` to decode the JSON response and then uses `flatMap` to process the decoded JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.client.get(\"https://httpbin.org/json\").flatMapThrowing { res in\n\ttry res.content.decode(MyJSONResponse.self)\n}.flatMap { json in\n\t// Usa JSON aquí\n}\n```\n\n----------------------------------------\n\nTITLE: Using the HelloTag with parameters in a Leaf template\nDESCRIPTION: This snippet shows how to use the `HelloTag` with a parameter in a Leaf template. The `#hello(\"John\")` tag will be replaced with `<p>Hello John</p>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_5\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello(\"John\")\n```\n\n----------------------------------------\n\nTITLE: RedisSessionsDelegate Hash Example in Swift\nDESCRIPTION: This snippet shows an example implementation of the `redis(_:store:with:)` and `redis(_:fetchDataFor:)` methods of the `RedisSessionsDelegate` protocol to store session data as a Hash in Redis. It uses the Redis client to store each data field as a separate hash field and retrieve them accordingly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    store data: SessionData,\n    with key: RedisKey\n) -> EventLoopFuture<Void> {\n    // stores each data field as a separate hash field\n    return client.hmset(data.snapshot, in: key)\n}\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    fetchDataFor key: RedisKey\n) -> EventLoopFuture<SessionData?> {\n    return client\n        .hgetall(from: key)\n        .map { hash in\n            // hash is [String: RESPValue] so we need to try and unwrap the\n            // value as a string and store each value in the data container\n            return hash.reduce(into: SessionData()) { result, next in\n                guard let value = next.value.string else { return }\n                result[next.key] = value\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Response Compression in Vapor\nDESCRIPTION: This code enables HTTP response compression using gzip for the Vapor HTTP server, which can improve performance by reducing the size of the response body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Habilite la compresión de respuesta HTTP.\napp.http.server.configuration.responseCompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Messages - Vapor (Swift)\nDESCRIPTION: This snippet shows how to handle incoming binary messages using the `onBinary` callback. The callback is executed when a binary message is received, providing the WebSocket instance and the received binary data (as an array of `UInt8`) as arguments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nws.onBinary { ws, binary in\n    // [UInt8] received by this WebSocket.\n    print(binary)\n}\n```\n\n----------------------------------------\n\nTITLE: Use Array Data Type Swift\nDESCRIPTION: This code shows how to define a field using the array data type for storing an array of strings. The field is named \"tags\" and it's marked as required.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"tags\", .array(of: .string), .required)\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop via Application\nDESCRIPTION: This code snippet demonstrates how to retrieve an event loop from the `Application` instance outside of a route closure. The `eventLoopGroup.next()` method returns an event loop from the application's event loop group, which can be useful for performing asynchronous tasks outside the context of a request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.eventLoopGroup.next().makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Environment Variable (Shell)\nDESCRIPTION: This example demonstrates how to configure the logging level using the `LOG_LEVEL` environment variable.  Setting the environment variable affects the logging verbosity for the application's execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport LOG_LEVEL=debug\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Request with XCTVapor\nDESCRIPTION: Shows how to send a test request using XCTVapor's `app.test()` method. It demonstrates specifying the HTTP method, URL, and asserting the response status and body using `XCTAssertEqual`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.test(.GET, \"hello\") { res in\n    XCTAssertEqual(res.status, .ok)\n    XCTAssertEqual(res.body.string, \"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Application Locks in Vapor (Swift)\nDESCRIPTION: Illustrates how to synchronize code using locks in Vapor's Application.  It defines a `LockKey` and uses `app.locks.lock(for:)` to obtain a unique, shared lock.  It also demonstrates the use of `app.sync` for application-wide synchronization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct TestKey: LockKey { }\n\nlet test = app.locks.lock(for: TestKey.self)\ntest.withLock {\n    // Do something.\n}\n\napp.sync.withLock {\n    // Do something.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to a Schema (Swift)\nDESCRIPTION: This code shows how to add a new field to a database schema using Fluent.  It adds a field named \"name\" of type string to the schema, with the `.required` constraint. It's assumed that this is part of a larger schema creation or update block.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"name\", .string, .required)\n```\n\n----------------------------------------\n\nTITLE: Using the Application Configuration (Swift)\nDESCRIPTION: Demonstrates how to use the `myConfiguration` property of the `Application` to set and access the API key. Shows setting the configuration and printing the API key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.myConfiguration = .init(apiKey: ...)\nprint(app.myConfiguration?.apiKey)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Nginx\nDESCRIPTION: This snippet demonstrates how to configure Nginx to serve static files directly and proxy the remaining requests to the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nserver {\n\t...\n\n\t# Sirve todos los ficheros públicos/estáticos via nginx y recurre a Vapor para el resto\n\tlocation / {\n\t\ttry_files $uri @proxy;\n\t}\n\n\tlocation @proxy {\n\t\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Hopping to a Different Event Loop\nDESCRIPTION: This code shows how to move a future to a different event loop using the `hop` method. This is useful when you need to perform operations on a specific event loop or when you want to switch contexts between different event loops.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfutureString.hop(to: otherEventLoop)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Jobs with Builder Methods - Swift\nDESCRIPTION: This example demonstrates how to schedule jobs using the builder methods provided by the Vapor Queues scheduler. It shows how to specify different time intervals and helper enums for scheduling.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// 毎年 1 月 \n.yearly().in(.january)\n\n// 毎月 1 日 \n.monthly().on(.first)\n\n// 毎週日曜日 \n.weekly().on(.sunday)\n\n// 毎日深夜\n.daily().at(.midnight)\n```\n\n----------------------------------------\n\nTITLE: Registering a Migration with Vapor - Swift\nDESCRIPTION: This snippet shows how to register a migration with the Vapor application. The `app.migrations.add()` method is used to register the migration. This is necessary for Vapor to recognize and execute the migration during the migration process.  Optionally, a specific database can be targeted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\napp.migrations.add(MyMigration())\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: Defines a systemd service configuration file for a Vapor application. This configuration specifies the service's dependencies, user, working directory, execution command, and logging settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[Unit]\nDescription=Hello\nRequires=network.target\nAfter=network.target\n\n[Service]\nType=simple\nUser=vapor\nGroup=vapor\nRestart=always\nRestartSec=3\nWorkingDirectory=/home/vapor/hello\nExecStart=/home/vapor/hello/.build/release/App serve --env production\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=vapor-hello\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Defining the HelloTag with Data Usage in Swift\nDESCRIPTION: This snippet showcases how to create a `HelloTag` that retrieves data from the view's context using a key.  It looks for the 'name' key in the data dictionary and uses it to generate a personalized greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case nameNotFound\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.data[\"name\"]?.string else {\n            throw HelloTagError.nameNotFound\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Siblings Relationship in Fluent (Swift)\nDESCRIPTION: This defines the inverse siblings relationship in the related model, completing the many-to-many relationship setup.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Tag: Model {\n    // Ejemplo de una relación sibling.\n    @Siblings(through: PlanetTag.self, from: \\.$tag, to: \\.$planet)\n    public var planets: [Planet]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP Request Decompression with No Limit\nDESCRIPTION: This snippet demonstrates how to configure HTTP request decompression with no size limits.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// No decompression size limit\n.enabled(limit: .none)\n```\n\n----------------------------------------\n\nTITLE: Rendering Current Timestamp with Format Control in Swift\nDESCRIPTION: This snippet shows how to implement the `render` function of a custom Leaf tag (`NowTag`) to display the current timestamp with an optional format parameter.  It uses `DateFormatter` to format the date and handles potential errors related to invalid or too many parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nenum NowTagError: Error {\n    case invalidFormatParameter\n    case tooManyParameters\n}\n\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        let formatter = DateFormatter()\n        switch ctx.parameters.count {\n        case 0: formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n        case 1:\n            guard let string = ctx.parameters[0].string else {\n                throw NowTagError.invalidFormatParameter\n            }\n\n            formatter.dateFormat = string\n        default:\n            throw NowTagError.tooManyParameters\n\t    }\n    \n        let dateAsString = formatter.string(from: Date())\n        return LeafData.string(dateAsString)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an RSA Key with Components (Swift)\nDESCRIPTION: This code snippet demonstrates initializing an RSA key using its components (modulus, exponent, and private exponent). It initializes an `RSAKey` object using the provided values. The `privateExponent` is only required for private keys.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// Initialiseer een RSA sleutel met componenten.\nlet key = RSAKey(\n    modulus: \"...\",\n    exponent: \"...\",\n    // Alleen opgenomen in private sleutels.\n    privateExponent: \"...\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Swift\nDESCRIPTION: This code snippet demonstrates how to create a new model in the database using the `create(on:)` method. This method is used to insert a new record into the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet planet = Planet(name: \"Earth\")\nplanet.create(on: database)\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration: TLS\nDESCRIPTION: This Nginx configuration adds TLS (HTTPS) support using certificates from Let's Encrypt.  It listens on port 443, specifies the certificate and key paths, sets up secure TLS protocols and ciphers, and includes other security-related directives. Requires Let's Encrypt certificates to be generated and stored in the specified paths.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nserver {\n    ...\n\n    listen 443 ssl;\n\n    ssl_certificate /etc/letsencrypt/live/hello.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/hello.com/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    add_header Strict-Transport-Security max-age=15768000;\n\n    ...\n\n    location @proxy {\n       ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Tags in Conditional Statements\nDESCRIPTION: This snippet shows how to use a tag like `#count` inside of an `#if` statement to check the size of the users array. Note the omission of the `#` character from `count(users)` when used inside `#if`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_7\n\nLANGUAGE: leaf\nCODE:\n```\n#if(count(users) > 0):\n    You have users!\n#else:\n    There are no users yet :(\n#endif\n```\n\n----------------------------------------\n\nTITLE: Monitoring Application Logs\nDESCRIPTION: This command streams the live logs generated by the Vapor application. This is crucial for debugging and monitoring the application's behavior in real-time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic test suite\nDESCRIPTION: Shows how to set up a basic test suite using `Swift Testing`, including importing necessary modules (App, VaporTesting, Testing), defining a `@Suite` struct, and creating a `@Test` function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n@testable import App\nimport VaporTesting\nimport Testing\n\n@Suite(\"App Tests\")\nstruct AppTests {\n    @Test(\"Test Stub\")\n    func stub() async throws {\n        // Prueba aquí.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Route Groups in Vapor\nDESCRIPTION: Adds middleware to a specific group of routes, limiting its scope. The middleware `MyMiddleware()` is applied only to routes within the `group`.  The code shows how to define a route within the group that will be intercepted by the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet group = app.grouped(MyMiddleware())\ngroup.get(\"foo\") { req in\n\t// Dit verzoek is door MyMiddleware gegaan.\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Shared Environment Variables\nDESCRIPTION: This YAML snippet defines shared environment variables used across multiple Docker Compose services. It uses the YAML reference syntax `<<: *shared_environment` to integrate these variables into different service configurations. `LOG_LEVEL` falls back to `'debug'` if not set, while other variables are hardcoded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-shared_environment: &shared_environment\n  LOG_LEVEL: ${LOG_LEVEL:-debug}\n  DATABASE_HOST: db\n  DATABASE_NAME: vapor_database\n  DATABASE_USERNAME: vapor_username\n  DATABASE_PASSWORD: vapor_password\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Environment Variable in Vapor\nDESCRIPTION: Shows how to set the log level using the `LOG_LEVEL` environment variable. This is an alternative method for configuring the logging verbosity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport LOG_LEVEL=debug\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Defining a WebSocket Route - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to define a WebSocket route in a Vapor application using the `webSocket` method. The closure is executed when a client connects to the 'echo' endpoint. The request and the WebSocket connection are passed as arguments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.webSocket(\"echo\") { req, ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom ID Field to Schema (Swift)\nDESCRIPTION: This code snippet adds a custom identifier field to a database schema using Fluent. It defines a field named \"id\" of type integer and specifies that it's an identifier with auto-generation enabled. It is intended for use cases where the default UUID ID is not suitable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"id\", .int, .identifier(auto: true))\n```\n\n----------------------------------------\n\nTITLE: Setting Database Space Swift\nDESCRIPTION: This code snippet demonstrates how to define the schema and space for a Fluent model.  The `schema` property specifies the database schema, and the `space` property specifies the database space where the model's data will be stored. This allows for partitioning models into different database schemas or spaces.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\npublic static let schema = \"planets\"\npublic static let space: String? = \"mirror_universe\"\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Route Protection with Redirect Middleware\nDESCRIPTION: Demonstrates advanced URL handling with `RedirectMiddleware` using a closure to dynamically generate the redirect path. It includes the original path as a query parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\nlet redirectMiddleware = User.redirectMiddleware { req -> String in\n  return \"/login?authRequired=true&next=\\((req.url.path))\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Middleware (Swift)\nDESCRIPTION: This code shows how to register and use a `ModelMiddleware` with Vapor's database system. It uses `app.databases.middleware.use` to enable the `PlanetMiddleware` for a specific database identifier (`.psql` in this case).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\n// 配置模型中间件示例。\napp.databases.middleware.use(PlanetMiddleware(), on: .psql)\n```\n\n----------------------------------------\n\nTITLE: Receiving Text Messages on WebSocket\nDESCRIPTION: This snippet demonstrates how to handle incoming text messages on a WebSocket connection using the `onText` callback. The closure is executed whenever a text message is received. The closure receives the WebSocket instance (`ws`) and the text message (`text`) as arguments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    // 这个方法接收的是字符串。\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Value with Fluent in Swift\nDESCRIPTION: This snippet illustrates how to filter query results based on a field's value using the `filter(_:_:)` method with an equality operator. It retrieves only planets where the type is `.gasGiant`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// Un ejemplo de filtrado por valor de campo.\nPlanet.query(on: database).filter(\\.$type == .gasGiant)\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order Example in Vapor (Swift)\nDESCRIPTION: Illustrates the order in which middleware is executed, emphasizing the importance of middleware order.  Requests pass through middleware in the order they are added, while responses traverse in reverse order. Route-specific middleware executes after application middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(MiddlewareA())\napp.middleware.use(MiddlewareB())\n\napp.group(MiddlewareC()) {\n\t$0.get(\"hello\") { req in\n\t\t\"Hello, middleware.\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nginx Configuration for Vapor Proxy\nDESCRIPTION: This snippet provides a basic Nginx configuration file for proxying requests to a Vapor application running on port 8080. It sets the server name, listening port, root directory, and proxy settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nserver {\n    server_name hello.com;\n    listen 80;\n\n    root /home/vapor/Hello/Public/;\n\n    location @proxy {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_pass_header Server;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_connect_timeout 3s;\n        proxy_read_timeout 10s;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Contains Operator in Swift\nDESCRIPTION: This demonstrates filtering records using the contains operator (=~) to find planets whose names start with the letter 'M'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n// Todos los planetas que empiecen por M\nPlanet.query(on: database)\n    .filter(\\.$name =~ \"M\")\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future String to an Integer\nDESCRIPTION: This snippet demonstrates using the `map` method on an `EventLoopFuture<String>` to transform it into an `EventLoopFuture<Int>`. It converts the string value to an integer, providing a default value of 0 if the conversion fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet futureInt = futureString.map { string in\n    print(string) // 実際のString\n    return Int(string) ?? 0\n}\n\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job with maxRetryCount\nDESCRIPTION: Dispatches a job to the queue with a specified `maxRetryCount`.  This configures the job to be automatically retried a certain number of times if it fails during processing. This example shows the use of both `EventLoopFuture` and `async` implementations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3\n        ).map { \"done\" }\n}\n\n// o\n\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent and Database Driver Packages\nDESCRIPTION: This snippet demonstrates how to add Fluent and a database driver (represented by `<db>`) as dependencies to your Swift package. Replace `<db>` with the actual database driver name (e.g., `postgres`, `sqlite`).  You must also define the appropriate products for each dependency.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent.git\", from: \"4.0.0\"),\n.package(url: \"https://github.com/vapor/fluent-<db>-driver.git\", from: <version>),\n```\n\nLANGUAGE: Swift\nCODE:\n```\n.target(name: \"App\", dependencies: [\n    .product(name: \"Fluent\", package: \"fluent\"),\n    .product(name: \"Fluent<db>Driver\", package: \"fluent-<db>-driver\"),\n    .product(name: \"Vapor\", package: \"vapor\"),\n]),\n```\n\n----------------------------------------\n\nTITLE: Accessing and Validating Cookies\nDESCRIPTION: This code snippet shows how to access cookies from the Request object using `req.cookies[\"my-cookie\"]`. It validates if a cookie exists and is not expired before returning its string value. Requires `Abort` to be defined.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"my-cookie\") { req -> String in\n    guard let cookie = req.cookies[\"my-cookie\"] else {\n        throw Abort(.badRequest)\n    }\n    if let expiration = cookie.expires, expiration < Date() {\n        throw Abort(.badRequest)\n    }\n    return cookie.string\n}\n```\n\n----------------------------------------\n\nTITLE: EventLoopFuture map Transformation\nDESCRIPTION: This code snippet demonstrates the `map` transformation on an EventLoopFuture. It transforms a future string to a future integer by providing a closure that converts the string to an integer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Map the future string to an integer\nlet futureInt = futureString.map { string in\n    print(string) // The actual String\n    return Int(string) ?? 0\n}\n\n/// We now have a future integer\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Event Delegate\nDESCRIPTION: This code shows how to create a `JobEventDelegate` to receive notifications when a job is dispatched, dequeued, successful, or encounters an error.  Each function provides an `EventLoopFuture<Void>` to indicate completion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyEventDelegate: JobEventDelegate {\n    /// Wordt aangeroepen wanneer de taak wordt verzonden naar de wachtrijwerker vanuit een route\n    func dispatched(job: JobEventData, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Wordt aangeroepen wanneer de taak in de verwerkingswachtrij wordt geplaatst en het werk begint\n    func didDequeue(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Wordt aangeroepen wanneer de taak klaar is met verwerken en verwijderd is uit de wachtrij\n    func success(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Wordt aangeroepen wanneer de opdracht klaar is met verwerken maar een fout had\n    func error(jobId: String, error: Error, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Delay for Job Execution\nDESCRIPTION: This snippet shows how to delay the execution of a job until a specific date and time. The `delayUntil` parameter in the `dispatch` method is used to specify the future date when the job should be executed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 1 dag\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3,\n        delayUntil: futureDate)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket message with Promise (Swift)\nDESCRIPTION: This snippet shows how to send a WebSocket message with an `EventLoopPromise`.  It creates a promise and passes it to the `ws.send` method. The `futureResult` of the promise is used to track the completion of the send operation, whether successful or not.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(..., promise: promise)\npromise.futureResult.whenComplete { result in\n    // Is gelukt of niet gelukt om te verzenden.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Model with a Parent Relationship in Fluent\nDESCRIPTION: This snippet shows how to initialize a Fluent model with a parent relationship. The `starID` parameter is used to set the `$star.id` property during initialization, establishing the parent-child relationship. The `starID` corresponds to the `Star.IDValue` type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninit(name: String, starID: Star.IDValue) {\n    self.name = name\n    // ...\n    self.$star.id = starID\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Binary Messages via WebSocket\nDESCRIPTION: This snippet demonstrates how to receive binary messages over a WebSocket connection using the `onBinary` method. It registers a closure to be executed when a binary message is received. The closure takes the `ws` (WebSocket) and the received `binary` ([UInt8]) as parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nws.onBinary { ws, binary in\n    // [UInt8] ricevuto.\n    print(binary)\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Start Vapor Server\nDESCRIPTION: This snippet demonstrates how to manually start, shutdown, and wait for the shutdown of the Vapor server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Start Vapor's server.\ntry app.server.start()\n// Request server shutdown.\napp.server.shutdown()\n// Wait for the server to shutdown.\ntry app.server.onShutdown.wait()\n```\n\n----------------------------------------\n\nTITLE: Chaining Futures for URL Conversion and Response Handling in Vapor\nDESCRIPTION: This Swift code snippet demonstrates how to chain `flatMapThrowing` and `flatMap` operations on `EventLoopFuture<String>` to convert a string into a URL and then fetch a response using a Vapor HTTP client. It uses `flatMapThrowing` to handle potential errors during URL creation and then `flatMap` to perform the asynchronous HTTP request. The `Abort` error is thrown if the string cannot be converted to a URL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n/// Veronderstel dat we een toekomstige string terugkrijgen van een API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Stel dat we een HTTP-client hebben gemaakt\nlet client: Client = ... \n\n/// Zet de string om in een url, en vervolgens in een antwoord\nlet futureResponse = futureString.flatMapThrowing { string in\n    guard let url = URL(string: string) else {\n        throw Abort(.badRequest, reason: \"Invalid URL string: \\(string)\")\n    }\n    return url\n}.flatMap { url in\n    client.get(url)\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes\nDESCRIPTION: This command removes all unused Docker volumes. It should be used with caution, as it can remove volumes containing important data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Defining a Content struct for URL Query in Swift\nDESCRIPTION: This code defines a `Hello` struct for decoding data from a URL query string.  The `name` property is an optional `String` because URL query parameters are generally optional.  This is important, as missing parameters should not cause errors but instead be handled gracefully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Hello: Content {\n    var name: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields Swift\nDESCRIPTION: This example demonstrates how to select only the `id` and `name` fields of the planet model during a query.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Selecteer alleen het id en naam veld van de planeet\nPlanet.query(on: database)\n    .field(\\.$id).field(\\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Transaction with completion handler in Fluent (Swift)\nDESCRIPTION: This snippet initializes a database transaction using the `req.db.transaction` method. It takes a closure that accepts a database connection as a parameter. All database operations within this closure will be part of the transaction, and will be committed only if the closure executes successfully. If any error occurs, all changes will be rolled back.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nreq.db.transaction { database in\n    // use database\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom JSON Decoder One-Off in Swift\nDESCRIPTION: This code snippet shows how to use a custom JSON decoder for a single `req.content.decode` call. It creates a `JSONDecoder` with a custom date decoding strategy and passes it to the `decode` method using the `using:` parameter, allowing for localized changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// create a new JSON decoder that uses unix-timestamp dates\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\n\n// decodes Hello struct using custom decoder\nlet hello = try req.content.decode(Hello.self, using: decoder)\n```\n\n----------------------------------------\n\nTITLE: Rendering current timestamp with format Swift\nDESCRIPTION: Implements the `render` function for the `NowTag` struct. It takes a `LeafContext` as input and returns a `LeafData`. The context provides access to tag parameters. This code snippet handles different scenarios, including the absence of parameters, a single format parameter, and an excessive number of parameters. It formats the current date based on the provided format string or defaults to \"yyyy-MM-dd HH:mm:ss\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum NowTagError: Error {\n    case invalidFormatParameter\n    case tooManyParameters\n}\n\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        let formatter = DateFormatter()\n        switch ctx.parameters.count {\n        case 0: formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n        case 1:\n            guard let string = ctx.parameters[0].string else {\n                throw NowTagError.invalidFormatParameter\n            }\n\n            formatter.dateFormat = string\n        default:\n            throw NowTagError.tooManyParameters\n\t    }\n    \n        let dateAsString = formatter.string(from: Date())\n        return LeafData.string(dateAsString)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent Product Dependencies\nDESCRIPTION: This snippet shows how to add the Fluent and a database driver product to your application target's dependencies in your Swift Package Manager configuration. Replace `<db>` with the name of your chosen database (e.g. Postgres).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n.target(name: \"App\", dependencies: [\n    .product(name: \"Fluent\", package: \"fluent\"),\n    .product(name: \"Fluent<db>Driver\", package: \"fluent-<db>-driver\"),\n    .product(name: \"Vapor\", package: \"vapor\"),\n]),\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Paginated Data (HTTP)\nDESCRIPTION: Illustrates an HTTP GET request to retrieve paginated planet data.  The request includes `page` and `per` parameters to specify the desired page number and number of items per page, respectively.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET /planets?page=2&per=5 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password using Application in Vapor (Swift)\nDESCRIPTION: This example demonstrates hashing a password using the `app.password.hash()` method, which is available on the `Application` object, useful for startup tasks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet digest = try app.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Logging System in Vapor\nDESCRIPTION: This snippet presents the standard way to bootstrap the logging system within a Vapor application, typically done in `entrypoint.swift`. This sets up the default logging behavior, which leverages command-line arguments and environment variables. `LoggingSystem.bootstrap(from:)` configures the logging system based on the environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment via Entrypoint (Swift)\nDESCRIPTION: Shows how to detect or initialize the environment within the `entrypoint.swift` file. It demonstrates using `Environment.detect()` to automatically parse the `--env` flag and how to initialize an `Environment` struct with a specific name and arguments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@main\nenum Entrypoint {\n    static func main() async throws {\n        var env = try Environment.detect()\n        try LoggingSystem.bootstrap(from: &env)\n        \n        let app = Application(env)\n        defer { app.shutdown() }\n        \n        try await configure(app)\n        try await app.runFromAsyncMainEntrypoint()\n    }\n}\n\nlet env = Environment(name: \"testing\", arguments: [\"vapor\"])\n```\n\n----------------------------------------\n\nTITLE: Protecting a Route with User Authenticator in Swift\nDESCRIPTION: This code snippet shows how to use the authenticator provided by ModelAuthenticatable to protect a route. It groups the app with the User authenticator and requires authentication before accessing the /login route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nlet passwordProtected = app.grouped(User.authenticator())\npasswordProtected.post(\"login\") { req -> User in\n    try req.auth.require(User.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Future Transformations\nDESCRIPTION: This code snippet combines multiple future transformations, mapping to a URL and then to a response.  It uses flatMapThrowing to handle possible URL creation errors, demonstrating chaining future operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 返回一个 future 字符串\nlet futureString: EventLoopFuture<String> = ...\n\n/// 假设我们已经创建了一个 HTTP 客户端\nlet client: Client = ... \n\n/// 将字符串转换为 url，然后转换为响应\nlet futureResponse = futureString.flatMapThrowing { string in\n    guard let url = URL(string: string) else {\n        throw Abort(.badRequest, reason: \"Invalid URL string: \\(string)\")\n    }\n    return url\n}.flatMap { url in\n    client.get(url)\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: DTO for PATCH requests Swift\nDESCRIPTION: This code shows a sample DTO for handling PATCH requests to only update fields that are provided in the request content. This prevents decoding failures when using the main Model type and not all parameters are passed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// 删节的用户模型供参考。\nfinal class User: Model {\n    @ID(key: .id)\n    var id: UUID?\n\n    @Field(key: \"first_name\")\n    var firstName: String\n\n    @Field(key: \"last_name\")\n    var lastName: String\n}\n\n// PATCH 请求结构 /users/:id。\nstruct PatchUser: Decodable {\n    var firstName: String?\n    var lastName: String?\n}\n\napp.patch(\"users\", \":id\") { req async throws -> User in \n    // 解码请求数据。\n    let patch = try req.content.decode(PatchUser.self)\n    // 从数据库中获取所需的用户。\n    guard let user = try await User.find(req.parameters.get(\"id\"), on: req.db) else {\n        throw Abort(.notFound)\n    }\n    // 如果提供了名字，则更新它。\n    if let firstName = patch.firstName {\n        user.firstName = firstName\n    }\n    // 如果提供了新的姓氏，则更新它。\n    if let lastName = patch.lastName {\n        user.lastName = lastName\n    }\n    // 保存并返回用户信息\n    try await user.save(on: req.db)\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Xcode Bundle in Vapor\nDESCRIPTION: Configures `FileMiddleware` to serve static files from the Xcode bundle's Public directory, which is useful for iOS apps or when integrating with an existing Xcode project. Ensure that the folder containing the files is added as a Folder Reference, not a Group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet file = try FileMiddleware(bundle: .main, publicDirectory: \"Public\")\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Pipelining in Vapor (Swift)\nDESCRIPTION: This snippet enables support for HTTP request and response pipelining in the Vapor HTTP server.  It sets the `supportPipelining` property to `true`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Ondersteuning HTTP pipelining.\napp.http.server.configuration.supportPipelining = true\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Message with Async/Await\nDESCRIPTION: This snippet demonstrates sending a WebSocket message using `async/await` to handle asynchronous completion. The `await` keyword is used to pause execution until the send operation completes or throws an error. Requires an environment that supports async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.send(...)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Field in Swift\nDESCRIPTION: Shows how to filter query results by comparing the values of two fields using the `filter` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nUser.query(on: database)\n    .filter(\\.$firstName == \\.$lastName)\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation (macOS)\nDESCRIPTION: This shell command checks if the Vapor Toolbox is installed correctly by displaying its help information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.es.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations to Application - Swift\nDESCRIPTION: This snippet demonstrates how to add the `CreateGalaxy` and `CreateStar` migrations to the Vapor application's migration list. The order is important because `CreateStar` depends on `CreateGalaxy`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(CreateGalaxy())\napp.migrations.add(CreateStar())\n```\n\n----------------------------------------\n\nTITLE: Define Patch DTO (Swift)\nDESCRIPTION: This Swift code defines a `PatchUser` DTO (Data Transfer Object) for handling PATCH requests to update user information. It specifies optional `firstName` and `lastName` properties, allowing only the fields to be updated to be sent in the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Structuur van PATCH /users/:id verzoek.\nstruct PatchUser: Decodable {\n    var firstName: String?\n    var lastName: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Add Top-Level Foreign Key Constraint Swift\nDESCRIPTION: This snippet shows how to add a foreign key constraint as a top-level constraint. It enforces that the \"star_id\" field must reference the \"id\" field in the \"stars\" table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n.foreignKey(\"star_id\", references: \"stars\", \"id\")\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Supervisor\nDESCRIPTION: This example shows how to set environment variables for a Vapor application in the Supervisor configuration.  Values containing non-alphanumeric characters should be quoted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nenvironment=PORT=8123,ANOTHERVALUE=\"/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Migration for In-Memory SQLite\nDESCRIPTION: This snippet shows how to add a migration and then either synchronously or asynchronously run auto-migration when using an in-memory SQLite database. This is necessary because in-memory databases are not persisted between runs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(CreateTodo())\ntry app.autoMigrate().wait()\n// or\ntry await app.autoMigrate()\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Extension\nDESCRIPTION: Shows how to extend a template using the `#extend` tag.  This is useful for including shared content, like a footer. The template name should be provided without the .leaf extension.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_11\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Validating request content\nDESCRIPTION: Demonstrates how to validate the request content against the defined validations by calling the static `validate(content:)` function on the `CreateUser` type, passing in the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(content: req)\n```\n\n----------------------------------------\n\nTITLE: FlatMapThrowing EventLoopFuture Value\nDESCRIPTION: Illustrates how to use `flatMapThrowing` to transform the value of an EventLoopFuture or throw an error. This is useful when the transformation might fail and needs to propagate an error.  It converts a future value to a different value or throws an error if the conversion is not possible.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n/// Supongamos que recuperamos una cadena futura de alguna API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Asigna la cadena futura a un número entero\nlet futureInt = futureString.flatMapThrowing { string in\n    print(string) // La cadena de futuro\n    // Convierta la cadena a un número entero o arroje un error\n    guard let int = Int(string) else {\n        throw Abort(...)\n    }\n    return int\n}\n\n/// Ahora tenemos un futuro entero\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Adding Username Validation\nDESCRIPTION: Adds validation for the `username` property to ensure it has at least 3 characters and contains only alphanumeric characters. This uses `&&` to combine two validators.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\"username\", as: String.self, is: .count(3...) && .alphanumeric)\n```\n\n----------------------------------------\n\nTITLE: Binding Vapor Server to a Specific Address and Port\nDESCRIPTION: This shell command uses the `--bind` (`-b`) flag to override the configured hostname and port of the Vapor server, binding it to a specific address and port.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nswift run App serve -b 0.0.0.0:80\n```\n\n----------------------------------------\n\nTITLE: Running the Vapor application\nDESCRIPTION: Runs the Vapor application using the `swift run App serve` command. The `--hostname 0.0.0.0` flag allows the application to listen on all available network interfaces, and `--port 8080` specifies the port number. This command starts the Vapor server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --hostname 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Create a basic redirect\nDESCRIPTION: This code shows how to redirect a request to a new path.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\")\n```\n\n----------------------------------------\n\nTITLE: Converting Async/Await to EventLoopFuture (alternative)\nDESCRIPTION: This snippet shows how to convert async/await back to EventLoopFuture using promises for interoperability between both.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = request.eventLoop.makePromise(of: String.self)\npromise.completeWithTask {\n    try await someAsyncFunctionThatGetsAString()\n}\nlet futureString: EventLoopFuture<String> = promise.futureResult\n```\n\n----------------------------------------\n\nTITLE: ZipCode Validator Implementation - Swift\nDESCRIPTION: This snippet implements a custom validator for US zip codes.  It uses a regular expression to check if the input string matches the expected zip code format. It extends the `Validator` type where the input is a String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nprivate let zipCodeRegex: String = \"^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$\"\n\nextension Validator where T == String {\n    /// Validates whether a `String` is a valid zip code.\n    public static var zipCode: Validator<T> {\n        .init { input in\n            guard let range = input.range(of: zipCodeRegex, options: [.regularExpression]),\n                  range.lowerBound == input.startIndex && range.upperBound == input.endIndex\n            else {\n                return ValidatorResults.ZipCode(isValidZipCode: false)\n            }\n            return ValidatorResults.ZipCode(isValidZipCode: true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a JWT and returning it\nDESCRIPTION: This snippet demonstrates how to sign a new JWT using the configured signer and return it as a string.  It creates an instance of the `TestPayload`, signs it using `req.jwt.sign`, and returns the signed JWT in a JSON response. The `kid` parameter specifies the key ID to use for signing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Erstellen und Zurückgeben eines neuen JWT.\napp.post(\"login\") { req async throws -> [String: String] in\n    // Erzeuge eine neue Instanz unseres JWTPayload\n    let payload = TestPayload(\n        subject: \"vapor\",\n        expiration: .init(value: .distantFuture),\n        isAdmin: true\n    )\n    // Gib das signierte JWT zurück\n    return try await [\n        \"token\": req.jwt.sign(payload, kid: \"a\"),\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger in Vapor\nDESCRIPTION: Illustrates how to create a custom logger instance in situations where access to the application or request logger is not available.  Note that logs from custom loggers won't contain request-specific metadata.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet logger = Logger(label: \"dev.logger.my\")\nlogger.info(...)\n```\n\n----------------------------------------\n\nTITLE: Application Locks in Vapor\nDESCRIPTION: This code demonstrates how to use locks in Vapor to synchronize code execution. It defines a `LockKey` and uses `app.locks.lock(for:)` to obtain a shared lock.  The `withLock` method is then used to execute code within the lock's critical section, ensuring that only one thread can execute the code at a time. It also shows the usage of `app.sync` for application-wide synchronization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct TestKey: LockKey { }\n\nlet test = app.locks.lock(for: TestKey.self)\ntest.withLock {\n    // Do something.\n}\n\napp.sync.withLock {\n    // Do something.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelCredentialsAuthenticatable (Swift)\nDESCRIPTION: This code snippet shows how to make a model conform to `ModelCredentialsAuthenticatable` for form-based login.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\nextension User: ModelCredentialsAuthenticatable {\n    static let usernameKey = \\User.$email\n    static let passwordHashKey = \\User.$password\n\n    func verify(password: String) throws -> Bool {\n        try Bcrypt.verify(password, created: self.password)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Completion Callback\nDESCRIPTION: This code snippet demonstrates how to add a callback function using `whenComplete` that executes when the future completes, either successfully or with an error. The callback receives a `Result` enum indicating success or failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 返回一个 future 字符串\nlet futureString: EventLoopFuture<String> = ...\n\nfutureString.whenComplete { result in\n    switch result {\n    case .success(let string):\n        print(string) // 实际的字符串\n    case .failure(let error):\n        print(error) // A Swift Error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Response Compression in Vapor\nDESCRIPTION: This snippet shows how to enable HTTP response compression for the Vapor HTTP server. It sets the `responseCompression` property of the server configuration to `.enabled`. The default is `.disabled`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Enable HTTP response compression.\napp.http.server.configuration.responseCompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Throwing Abort Errors in Vapor\nDESCRIPTION: This snippet demonstrates how to throw `Abort` errors in Vapor to return specific HTTP status codes and reasons. It shows examples for a 404 error with a default reason and a 401 error with a custom reason.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// 404 错误，默认原因”未找到“。\nthrow Abort(.notFound)\n\n// 401 错误，自定义错误原因。\nthrow Abort(.unauthorized, reason: \"Invalid Credentials\")\n```\n\n----------------------------------------\n\nTITLE: Open File with NIO's NonBlockingFileIO - Swift\nDESCRIPTION: This snippet shows how to directly use NIO's `NonBlockingFileIO` to open a file. It requires specifying an `EventLoop` for the operation. Two examples are provided: one for the main thread using `app.fileio`, and another for a route handler using `req.application.fileio`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.zh.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// 主线程。\nlet fileHandle = try await app.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: app.eventLoopGroup.next()\n).get()\nprint(fileHandle)\n\n// 在路由处理程序中。\nlet fileHandle = try await req.application.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: req.eventLoop)\nprint(fileHandle)\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Formatting\nDESCRIPTION: Shows how to use the `#date` tag to format a date in Leaf. Demonstrates default formatting and custom formatting with a specified pattern and timezone.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_17\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #date(now)\n```\n\nLANGUAGE: leaf\nCODE:\n```\nThe date is #date(now, \"yyyy-MM-dd\")\n```\n\nLANGUAGE: leaf\nCODE:\n```\nThe date is #date(now, \"yyyy-MM-dd\", \"America/New_York\")\n```\n\n----------------------------------------\n\nTITLE: Creating an APNSAlertNotification in Swift\nDESCRIPTION: This snippet shows how to create an APNSAlertNotification in Swift, including setting the title, subtitle, expiration, priority, topic, and payload.  It allows customizing the content of the push notification alert.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching First 5 Planets Using Fluent Range\nDESCRIPTION: This Swift code snippet shows how to fetch the first 5 planets from the database using Fluent's query API with the `range` method. It uses a Swift range operator `..<5` to specify the subset of results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch the first 5 planets.\nPlanet.query(on: self.database)\n    .range(..<5)\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Middleware in Vapor (Swift)\nDESCRIPTION: This snippet illustrates how to apply middleware to a group of routes using `app.grouped`.  This can be used for rate limiting or authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fast-thing\") { req in\n    ...\n}\napp.group(RateLimitMiddleware(requestsPerMinute: 5)) { rateLimited in\n    rateLimited.get(\"slow-thing\") { req in\n        ...\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { ... }\nlet auth = app.grouped(AuthMiddleware())\nauth.get(\"dashboard\") { ... }\nauth.get(\"logout\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Command\nDESCRIPTION: This Swift code snippet shows how to register a custom command with the Vapor application's `asyncCommands` to make it available via `swift run`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.asyncCommands.use(HelloCommand(), as: \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Package Dependency - Swift\nDESCRIPTION: This snippet demonstrates how to add the Vapor Redis package as a dependency to your Package.swift file. It includes both the package dependency and the product dependency for your target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    // ...\n    .package(url: \"https://github.com/vapor/redis.git\", from: \"4.0.0\")\n]\n// ...\ntargets: [\n    .target(name: \"App\", dependencies: [\n        // ...\n        .product(name: \"Redis\", package: \"redis\")\n    ])\n]\n```\n\n----------------------------------------\n\nTITLE: Sorting with Fallbacks (Swift)\nDESCRIPTION: Shows how to add fallback sorting options to a query.  It retrieves users and sorts them by name, then by age if names are the same.  Requires a `User` model with `name` and `age` properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera los usuarios ordenados por su nombre. Si dos usuarios tienen el mismo nombre, se ordenan por su edad.\nUser.query(on: database).sort(\\$name).sort(\\$age)\n```\n\n----------------------------------------\n\nTITLE: Sending a Binary Message via WebSocket\nDESCRIPTION: This snippet shows how to send binary data over a WebSocket connection using the `send` method. A `[UInt8]` array containing the binary data is passed as the parameter.  The `ws` object represents the established WebSocket connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nws.send([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Updating Models with Fluent (Swift)\nDESCRIPTION: Demonstrates updating multiple models at once using the `update` method in Fluent. It sets the `type` property of all `Planet` models with the name \"Pluto\" to `.dwarf`.  Requires `Planet` model with `type` and `name` properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Actualiza todos los planetas llamados \"Pluto\"\nPlanet.query(on: database)\n    .set(\\$type, to: .dwarf)\n    .filter(\\$name == \"Pluto\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Awaiting WebSocket Send Operation (Swift)\nDESCRIPTION: This snippet demonstrates how to use `async`/`await` to wait for a WebSocket send operation to complete. It uses `try await ws.send(...)` to asynchronously send the message and wait for the result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// TODO Check this actually works\nlet result = try await ws.send(...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Middleware to Modify Response Headers in Vapor\nDESCRIPTION: Creates a middleware that adds a custom header to the response. This is achieved by implementing the `Middleware` protocol and modifying the response headers in the `respond` function, before returning the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        next.respond(to: request).map { response in\n            response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n            return response\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Middleware Swift\nDESCRIPTION: This code shows how to configure and enable the `PlanetMiddleware` for a specific database connection (.psql in this case).  It uses `app.databases.middleware.use` to register the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Example of configuring model middleware.\napp.databases.middleware.use(PlanetMiddleware(), on: .psql)\n```\n\n----------------------------------------\n\nTITLE: Opening the Vapor project in Xcode\nDESCRIPTION: This command opens the 'Package.swift' file in Xcode, which initiates the Swift Package Manager to download project dependencies and set up the Xcode project. This step is specific to macOS.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.it.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Initialize RSA Key with Components - Swift\nDESCRIPTION: This snippet initializes an RSA key using its components (modulus, exponent, and private exponent). This is used when the components are already available and need to be assembled into an RSA key object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// 使用组件初始化 RSA 密钥。\nlet key = RSAKey(\n    modulus: \"...\",\n    exponent: \"...\",\n    // 仅包含在私钥中。\n    privateExponent: \"...\"\n)\n```\n\n----------------------------------------\n\nTITLE: Systemd Environment File Configuration\nDESCRIPTION: This snippet shows how to specify environment files for a systemd service. Multiple `EnvironmentFile` directives can be used to load variables from different files. These environment files should contain key-value pairs that define the environment variables to be used by the service.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.es.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nEnvironmentFile=/path/to/environment/file1\nEnvironmentFile=/path/to/environment/file2\n```\n\n----------------------------------------\n\nTITLE: Sending a Push Notification with Custom Payload in Vapor\nDESCRIPTION: This code snippet shows how to send a push notification with a custom payload from within a Vapor route handler. It defines a custom `Codable` struct for the payload, creates an `APNSAlertNotification` and then sends the notification using `req.apns.client.sendAlertNotification`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Payload Codable personalizzato\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: String\n}\n// Creazione di un Alert per la notifica push\nlet dt = \"70075697aa918ebddd64efb165f5b9cb92ce095f1c4c76d995b384c623a258bb\"\nlet payload = Payload(acme1: \"hey\", acme2: 2)\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n// Send the notification\ntry! await req.apns.client.sendAlertNotification(\n    alert, \n    deviceToken: dt, \n    deadline: .distantFuture\n)\n```\n\n----------------------------------------\n\nTITLE: Read-Only Service Extension for Vapor Request in Swift\nDESCRIPTION: This snippet demonstrates how to create a read-only service extension for Vapor's Request type. It defines a `MyAPI` struct that depends on a `Client` and provides an extension to `Request` to initialize `MyAPI` using the request's client. This allows easy access to the API from within request handlers. Dependencies: Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyAPI {\n    let client: Client\n\n    func foos() async throws -> [String] { ... }\n}\n\nextension Request {\n    var myAPI: MyAPI {\n        .init(client: self.client)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request example with URL Query Parameters\nDESCRIPTION: Example of an HTTP GET request with URL query parameters. The query parameters are appended to the URL after a question mark (`?`). The `content-length` is set to `0` because GET requests typically don't have a body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /hello?name=Vapor HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Hopping to Another Event Loop in Vapor\nDESCRIPTION: This snippet demonstrates how to switch a future to a different event loop using the `hop(to:)` method. This is useful for ensuring that work is performed on the correct event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nfutureString.hop(to: otherEventLoop)\n```\n\n----------------------------------------\n\nTITLE: Decoding URL Query String\nDESCRIPTION: Defines a `Hello` struct conforming to the `Content` protocol. The `name` property is an optional String as URL query strings are always optional. This struct is then used to decode an URL query string using `req.query.decode`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Hello: Content {\n    var name: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Route with Parameter Component\nDESCRIPTION: Registers a route with a parameter path component `bar`. Demonstrates how requests like `/foo/qux/baz` are matched.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op GET /foo/bar/baz\n// reageert op GET /foo/qux/baz\n// ...\napp.get(\"foo\", \":bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Custom Tag in Vapor - Swift\nDESCRIPTION: This code shows how to register the custom `NowTag` within the Vapor application's Leaf renderer. This is typically done in the `configure.swift` file to make the tag available for use in Leaf templates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.leaf.tags[\"now\"] = NowTag()\n```\n\n----------------------------------------\n\nTITLE: Convert Async/Await to EventLoopFuture\nDESCRIPTION: Shows how to convert an async/await function into an EventLoopFuture using a promise. This allows interoperability with code that requires EventLoopFuture. This is useful for legacy code or APIs that still expect EventLoopFuture.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nlet myString = try await someAsyncFunctionThatGetsAString()\n```\n\nLANGUAGE: Swift\nCODE:\n```\nlet promise = request.eventLoop.makePromise(of: String.self)\npromise.completeWithTask {\n    try await someAsyncFunctionThatGetsAString()\n}\nlet futureString: EventLoopFuture<String> = promise.futureResult\n```\n\n----------------------------------------\n\nTITLE: Database Transaction with async/await Swift\nDESCRIPTION: This code demonstrates how to perform a database transaction in Vapor using the `async/await` syntax. This allows for a more structured and readable way to execute asynchronous operations within the transaction.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await req.db.transaction { database in\n    try await sun.save(on: database)\n    try await sirius.save(on: database)\n}\nreturn .ok\n```\n\n----------------------------------------\n\nTITLE: Verifying Password with Bcrypt in Vapor\nDESCRIPTION: This snippet demonstrates how to verify a plaintext password against an existing Bcrypt hash in a Vapor application. It requires importing the Vapor module and using the `Bcrypt.verify` method. It returns a boolean indicating if the password matches the given hash.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet pass = try Bcrypt.verify(\"test\", created: digest)\nif pass {\n\t// Password and digest match.\n} else {\n\t// Wrong password.\n}\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket message with Promise for Async Handling in Vapor\nDESCRIPTION: This snippet sends a message via WebSocket and uses a promise for asynchronous handling of the send operation. An `EventLoopPromise` is created to track the completion of the `send` operation. The promise's `futureResult` provides a callback (`whenComplete`) to handle the success or failure of sending the message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(..., promise: promise)\npromise.futureResult.whenComplete { result in\n    // Succeeded or failed to send.\n}\n```\n\n----------------------------------------\n\nTITLE: Sign JWT and Return - Swift\nDESCRIPTION: This snippet demonstrates how to generate a JWT and return it in the response using Vapor's req.jwt.sign method. It creates an instance of JWTPayload, signs it using the configured signer, and returns the JWT as a string within a JSON dictionary.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// 生成并返回一个新的 JWT。\napp.post(\"login\") { req -> [String: String] in\n    // 创建一个 JWTPayload 实例\n    let payload = TestPayload(\n        subject: \"vapor\",\n        expiration: .init(value: .distantFuture),\n        isAdmin: true\n    )\n    // 返回签名的 JWT。\n    return try [\n        \"token\": req.jwt.sign(payload)\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Future Completion with whenComplete in Vapor\nDESCRIPTION: This snippet demonstrates how to use `whenComplete` to add a callback that executes when a future either succeeds or fails. The callback receives a `Result` enum that can be either a success case with the resolved value or a failure case with an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\nfutureString.whenComplete { result in\n    switch result {\n    case .success(let string):\n        print(string) // The actual String\n    case .failure(let error):\n        print(error) // A Swift Error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Data with SHA256 using SwiftCrypto in Vapor\nDESCRIPTION: This snippet demonstrates how to use SwiftCrypto's SHA256 hash function to hash data in Vapor. It imports the Vapor library and calculates the SHA256 hash of the string \"hello\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = SHA256.hash(data: Data(\"hello\".utf8))\nprint(digest)\n```\n\n----------------------------------------\n\nTITLE: Set macOS Platform Version in Package.swift\nDESCRIPTION: This snippet demonstrates setting the macOS platform version to v12 in the Package.swift file. This specifies the minimum macOS version required to run the Vapor application when using async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nplatforms: [\n   .macOS(.v12)\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop in Route Closure (Swift)\nDESCRIPTION: This snippet demonstrates how to access the current `EventLoop` within a route closure using the `Request` object. It shows how to create a promise using the request's event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nreq.eventLoop.makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Adding PSS key for signing\nDESCRIPTION: This snippet adds an RSA public key with PSS padding to the application's JWT keys.  The digest algorithm is specified as SHA-256. This enables signing and verifying JWTs using the RSA-PSS algorithm, considered more secure than standard RSA.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet key = Insecure.RSA.PublicKey(pem: publicKey)\ntry app.jwt.keys.addPSS(key: key, digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model is Attached to Siblings Relationship (Swift)\nDESCRIPTION: Demonstrates how to check if two models are already related using the isAttached method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Comprueba que los modelos estén conectados.\nearth.$tags.isAttached(to: inhabited)\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Session Driver Swift\nDESCRIPTION: This snippet shows how to configure Vapor to use the in-memory session driver. This driver is suitable for testing as it does not persist session data between application restarts. It's enabled using the `.memory` option.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.sessions.use(.memory)\n```\n\n----------------------------------------\n\nTITLE: Launch a Fly application\nDESCRIPTION: This command launches a new application on the Fly.io platform.  It prompts for a name, region, and database configuration. It creates a `fly.toml` configuration file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Generating Random EdDSA Private Key in Swift\nDESCRIPTION: This snippet demonstrates how to generate a random EdDSA private key in Swift using `EdDSA.PrivateKey`. The `curve` parameter is set to `.ed25519`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet key = EdDSA.PrivateKey(curve: .ed25519)\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Hostname in Vapor\nDESCRIPTION: This snippet shows how to configure a custom hostname for the Vapor HTTP server. It sets the `hostname` property of the server configuration to a specific value. The default is `127.0.0.1`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Configure custom hostname.\napp.http.server.configuration.hostname = \"dev.local\"\n```\n\n----------------------------------------\n\nTITLE: Model Session Authentication\nDESCRIPTION: Enables a Fluent model to be persisted in sessions, using the model's unique identifier as the session identifier and automatically performing a database lookup to restore the model from the session.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_40\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\nfinal class User: Model { ... }\n\n// Allow this model to be persisted in sessions.\nextension User: ModelSessionAuthenticatable { }\n```\n\n----------------------------------------\n\nTITLE: Deploy Docker Stack\nDESCRIPTION: This command deploys a Docker stack using the docker-compose.yml file. The stack is named 'test'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy -c docker-compose.yml test\n```\n\n----------------------------------------\n\nTITLE: Getting User Input via Console (Swift)\nDESCRIPTION: This code snippet shows how to get user input using the console.  The `context.console.ask` function prompts the user for their name, and the response is stored in the `name` variable, and then prints a greeting to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name = context.console.ask(\"What is your \\(\"name\", color: .blue)?\")\ncontext.console.print(\"Hello, \\(name) 👋\")\n```\n\n----------------------------------------\n\nTITLE: Logging during Application Setup in Vapor\nDESCRIPTION: Shows how to access the application-level logger to log messages during the application's startup and configuration phase. This is useful for tracking the progress of migrations or other setup tasks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.logger.info(\"Setting up migrations...\")\napp.migrations.use(...)\n```\n\n----------------------------------------\n\nTITLE: Defining custom error name not found Swift\nDESCRIPTION: Defines a custom error enum `HelloTagError` for the `HelloTag`. This helps handle specific errors related to missing name in context data inside the Leaf tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nenum HelloTagError: Error {\n    case nameNotFound\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Microsoft JWT - Swift\nDESCRIPTION: This snippet shows how to retrieve and verify a Microsoft JWT from the authorization header in a Vapor application using Swift. It utilizes the `req.jwt.microsoft.verify()` method to verify the JWT and prints the resulting `MicrosoftIdentityToken`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera y verifica el JWT de Microsoft desde el encabezado de Autorización.\napp.get(\"microsoft\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.microsoft.verify()\n    print(token) // MicrosoftIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Echoing Received Text Messages on WebSocket\nDESCRIPTION: This snippet demonstrates how to echo received text messages back to the sender. It uses the `onText` callback to receive text messages and then uses the `send` method of the WebSocket instance (`ws`) to send the same text back.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Echoes received messages.\nws.onText { ws, text in\n    ws.send(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Create Custom Middleware (Synchronous) in Vapor\nDESCRIPTION: Creates a custom middleware in Vapor that checks if a user has administrator privileges. It implements the `Middleware` protocol and its `respond` method. If the user is not an administrator, it returns an unauthorized error; otherwise, it continues processing the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct EnsureAdminUserMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        guard let user = request.auth.get(User.self), user.role == .admin else {\n            return request.eventLoop.future(error: Abort(.unauthorized))\n        }\n        return next.respond(to: request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plaintext Passwords for Testing in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to configure the application to use plaintext passwords, which is insecure and should only be used for testing purposes.  It is conditionally enabled based on the application environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .testing:\n    app.passwords.use(.plaintext)\ndefault: break\n}\n```\n\n----------------------------------------\n\nTITLE: Override Hostname via Command Line\nDESCRIPTION: This snippet demonstrates how to override the configured hostname for the Vapor HTTP server using the `--hostname` or `-H` flag when running the `serve` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Override configured hostname.\nswift run App serve --hostname dev.local\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This Swift snippet shows how to access environment variables within a Vapor application using `Environment.get`. The method retrieves the value associated with the specified key (environment variable name).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data in Vapor\nDESCRIPTION: This snippet demonstrates how to retrieve data from a session within a route handler. It retrieves the value associated with the key \"name\" from the session data. If the key does not exist, it returns \"n/a\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"get\") { req -> String in\n    req.session.data[\"name\"] ?? \"n/a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating request query parameters\nDESCRIPTION: Demonstrates how to validate the request query parameters against the defined validations using the `validate(query:)` function on the `CreateUser` type, passing in the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ntry CreateUser.validate(query: req)\nreq.query.decode(CreateUser.self)\n```\n\n----------------------------------------\n\nTITLE: Model Aliases in Swift\nDESCRIPTION: Shows how to create and use model aliases to join the same table multiple times.  Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfinal class HomeTeam: ModelAlias {\n    static let name = \"home_teams\"\n    let model = Team()\n}\nfinal class AwayTeam: ModelAlias {\n    static let name = \"away_teams\"\n    let model = Team()\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet matches = try await Match.query(on: self.database)\n    .join(HomeTeam.self, on: \\Match.$homeTeam.$id == \\HomeTeam.$id)\n    .join(AwayTeam.self, on: \\Match.$awayTeam.$id == \\AwayTeam.$id)\n    .filter(HomeTeam.self, \\.$name == \"Vapor\")\n    .sort(AwayTeam.self, \\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Combining Session and Bearer Authentication in Vapor\nDESCRIPTION: Combines session and bearer authentication in a Vapor application. It creates a protected route group that uses `SessionsMiddleware`, `UserSessionAuthenticator`, `UserBearerAuthenticator`, and `User.guardMiddleware()` to ensure that the user is authenticated either via session or bearer token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\n// Create protected route group which requires user auth.\nlet protected = app.routes.grouped([\n    app.sessions.middleware,\n    UserSessionAuthenticator(),\n    UserBearerAuthenticator(),\n    User.guardMiddleware(),\n])\n\n// Add GET /me route for reading user's email.\nprotected.get(\"me\") { req -> String in\n    try req.auth.require(User.self).email\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Date Creation for Leaf\nDESCRIPTION: Swift code to create a `Date` object which can be passed as context to Leaf.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nrender(..., [\"now\": Date()])\n```\n\n----------------------------------------\n\nTITLE: Using Locks in Vapor (Swift)\nDESCRIPTION: Demonstrates how to use locks in Vapor to synchronize code execution. A `LockKey` is defined, and the `lock(for:)` method is used to obtain a lock. The `withLock` method ensures that the code is executed within the lock.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct TestKey: LockKey { }\n\nlet test = app.locks.lock(for: TestKey.self)\ntest.withLock {\n    // Doe iets.\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Defined Fields Structure as a Group in Swift\nDESCRIPTION: Demonstrates how to use the `Pet` structure defined previously as a `@Group` property within a `User` model. This allows nesting the pet's information directly within the user's data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfinal class User: Model {\n    // The user's nested pet.\n    @Group(key: \"pet\")\n    var pet: Pet\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Environment Detection in Vapor\nDESCRIPTION: This snippet shows how to override the default environment detection by initializing a custom `Environment` struct with specific name and arguments. This is particularly useful for testing, where you can simulate passing command-line arguments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet env = Environment(name: \"testing\", arguments: [\"vapor\"])\n```\n\n----------------------------------------\n\nTITLE: Leaf Lowercased Tag Usage\nDESCRIPTION: Shows how to use the `#lowercased` tag to convert a string variable 'name' to lowercase. This is useful for case-insensitive comparisons or formatting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_15\n\nLANGUAGE: leaf\nCODE:\n```\n#lowercased(name)\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key to JWT Key Collection (Swift)\nDESCRIPTION: This snippet shows how to add an HMAC key with SHA-256 digest algorithm to the JWT key collection in the `configure.swift` file. The `app.jwt.keys.add` method is used to add the key.  The key is used for signing and verifying JWTs with the HS256 algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport JWT\n\n// Agrega HMAC con firmante SHA-256.\nawait app.jwt.keys.add(hmac: \"secret\", digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Using Plaintext Password Hashing (Testing)\nDESCRIPTION: Configures the application to use plaintext password hashing. This should only be used for testing purposes as it is insecure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .testing:\n    app.passwords.use(.plaintext)\ndefault: break\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bcrypt Cost in Vapor (Swift)\nDESCRIPTION: This example shows how to configure the Bcrypt cost parameter to adjust the hashing strength. Higher costs increase security but require more computation time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.it.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.passwords.use(.bcrypt(cost: 8))\n```\n\n----------------------------------------\n\nTITLE: Create Model (Swift)\nDESCRIPTION: This Swift code snippet shows how to create a new model instance in the database using the `create(on:)` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nlet planet = Planet(name: \"Earth\")\nplanet.create(on: database)\n```\n\n----------------------------------------\n\nTITLE: Sign JWT with Key ID - Swift\nDESCRIPTION: This snippet shows how to sign a JWT using a specific signer identified by its key identifier (kid). It's crucial to specify the kid when multiple signers are configured to ensure the correct key is used for signing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// 使用签名者 ”a“ 进行签名\nreq.jwt.sign(payload, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Using JWK with Key Identifier - Swift\nDESCRIPTION: This snippet shows how to use a JSON Web Key (JWK) that already contains a key identifier (`kid`).  When using a JWK, there's no need to explicitly specify the `kid` during configuration. The library automatically extracts the `kid` from the JWK.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\n// JWKs enthalten bereits das \"kid\"-Feld.\nlet jwk: JWK = ...\ntry await app.jwt.keys.use(jwk: jwk)\n```\n\n----------------------------------------\n\nTITLE: Specifying Middleware Order in Vapor\nDESCRIPTION: Demonstrates the order in which middleware is executed for both application-level and route-specific middleware.  It highlights the request flow through A, B, and C and the reverse flow on the response.  This is key to managing dependencies and side-effects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(MiddlewareA())\napp.middleware.use(MiddlewareB())\n\napp.group(MiddlewareC()) {\n\t$0.get(\"hello\") { req in\n\t\t\"Hello, middleware.\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ContentEncoder Protocol Definition in Swift\nDESCRIPTION: This code shows the definition of the `ContentEncoder` protocol in Vapor. This protocol defines the `encode` function, which is responsible for encoding an encodable object into a `ByteBuffer` and setting the appropriate HTTP headers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ContentEncoder {\n    func encode<E>(_ encodable: E, to body: inout ByteBuffer, headers: inout HTTPHeaders) throws\n        where E: Encodable\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Example\nDESCRIPTION: This is an example of an HTTP 200 OK response with a body. The `content-length` header indicates the length of the body in bytes. The body contains the string \"Hello, Vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 12\n\nHello, Vapor\n```\n\n----------------------------------------\n\nTITLE: Overriding Global JSON Encoder\nDESCRIPTION: Creates a new `JSONEncoder` with a custom date encoding strategy (seconds since 1970) and overrides the global encoder used for the `.json` media type using `ContentConfiguration.global.use`. This affects how the entire application serializes JSON data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// crea un nuevo JSON encoder que use fechas de marca de tiempo de Unix\nlet encoder = JSONEncoder()\nencoder.dateEncodingStrategy = .secondsSince1970\n\n// sobreescriba el codificador global utilizado para el media type `.json`\nContentConfiguration.global.use(encoder: encoder, for: .json)\n```\n\n----------------------------------------\n\nTITLE: Disabling Address Reuse for Vapor Server\nDESCRIPTION: This code disables the reuse of local addresses for the Vapor HTTP server. Setting `reuseAddress` to `false` prevents the server from quickly rebinding to the same address after a restart.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Deshabilitar la reutilización de direcciones.\napp.http.server.configuration.reuseAddress = false\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Job (ScheduledJob Protocol) - Swift\nDESCRIPTION: This snippet demonstrates how to create a scheduled job using the `ScheduledJob` (or `AsyncScheduledJob`) protocol in Vapor Queues. It defines a `CleanupJob` struct conforming to the protocol, which contains the logic to execute when the scheduled job runs. The `run` function is the entry point for the job's execution, and can optionally queue more jobs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\nimport Queues\n\nstruct CleanupJob: ScheduledJob {\n    // 如果你需要，可以通过依赖注入在这里添加额外的服务。\n\n    func run(context: QueueContext) -> EventLoopFuture<Void> {\n        // 在这里做一些工作，也许队列等待另一个 job。\n        return context.eventLoop.makeSucceededFuture(())\n    }\n}\n\nstruct CleanupJob: AsyncScheduledJob {\n    // 如果你需要，可以通过依赖注入在这里添加额外的服务。\n\n    func run(context: QueueContext) async throws {\n        // 在这里做一些工作，也许队列等待另一个 job。\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Request\nDESCRIPTION: Illustrates how to send a test request to a Vapor application using `app.testing().test()`. It shows how to specify the HTTP method, URL, and assert the response status and body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n@Test(\"Test Hello World Route\")\nfunc helloWorld() async throws {\n    try await withApp { app in\n        try await app.testing().test(.GET, \"hello\") { res async in\n            #expect(res.status == .ok)\n            #expect(res.body.string == \"Hello, world!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionAuthenticatable in Swift\nDESCRIPTION: This code snippet demonstrates how to conform a User struct to the SessionAuthenticatable protocol. It specifies the sessionID, which is the email address in this case.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nextension User: SessionAuthenticatable {\n    var sessionID: String {\n        self.email\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add UserToken Migration to App\nDESCRIPTION: Adds the `UserToken` migration to the Vapor application's migration list to enable the creation of the table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(UserToken.Migration())\n```\n\n----------------------------------------\n\nTITLE: Adding enum validation with null support\nDESCRIPTION: Demonstrates how to support null values for the `favoriteColor` validation. The validation type is changed to `String?` and the `.nil ||` validator is used to check if the value is nil or one of the allowed enum values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String?.self,\n    is: .nil || .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Testing\nDESCRIPTION: Explains how to configure the database specifically for testing, using an in-memory SQLite database. This ensures that the production database is not used during tests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\napp.databases.use(.sqlite(.memory), as: .sqlite)\n```\n\n----------------------------------------\n\nTITLE: Protecting a Route with Token Authenticator in Swift\nDESCRIPTION: This code snippet shows how to use the UserToken authenticator to protect a route. It groups the app with the UserToken authenticator and requires authentication before accessing the /me route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nlet tokenProtected = app.grouped(UserToken.authenticator())\ntokenProtected.get(\"me\") { req -> User in\n    try req.auth.require(User.self)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Eager Loaded Children\nDESCRIPTION: This snippet shows the expected JSON response containing eager loaded children. The galaxy data now includes an array of stars associated with that galaxy.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": ...,\n        \"name\": \"Milky Way\",\n        \"stars\": [\n            {\n                \"id\": ...,\n                \"name\": \"Sun\",\n                \"galaxy\": {\n                    \"id\": ...\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in fly.toml\nDESCRIPTION: This snippet demonstrates how to define environment variables within the `fly.toml` configuration file. These variables can be accessed by the Vapor application at runtime.  It defines two variables: `MAX_API_RETRY_COUNT` and `SMS_LOG_LEVEL`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_10\n\nLANGUAGE: TOML\nCODE:\n```\n[env]\n  MAX_API_RETRY_COUNT = \"3\"\n  SMS_LOG_LEVEL = \"error\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Scheduled Job\nDESCRIPTION: This code shows the definition of a `ScheduledJob` and an `AsyncScheduledJob`. These structures conform to the `ScheduledJob` or `AsyncScheduledJob` protocol and implement the `run` method, which contains the logic to be executed when the job is triggered.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Queues\n\nstruct CleanupJob: ScheduledJob {\n    // Voeg hier extra diensten toe via dependency injection, als je die nodig hebt.\n\n    func run(context: QueueContext) -> EventLoopFuture<Void> {\n        // Doe wat werk hier, misschien een andere job.\n        return context.eventLoop.makeSucceededFuture(())\n    }\n}\n\nstruct CleanupJob: AsyncScheduledJob {\n    // Voeg hier extra diensten toe via dependency injection, als je die nodig hebt.\n\n    func run(context: QueueContext) async throws {\n        // Doe wat werk hier, misschien een andere job.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Override Hostname and Port using Bind Flag in Vapor (Shell)\nDESCRIPTION: This command demonstrates how to override the configured hostname and port using the `--bind` (or `-b`) flag with the `serve` command. This combines hostname and port into a single argument separated by a colon.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve -b 0.0.0.0:80\n```\n\n----------------------------------------\n\nTITLE: Start Vapor Server Manually (Swift)\nDESCRIPTION: This snippet demonstrates how to manually start, shutdown, and wait for the Vapor server to complete its shutdown process. It utilizes `app.server.start()`, `app.server.shutdown()`, and `app.server.onShutdown.wait()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Start Vapor's server.\ntry app.server.start()\n// Verzoek server shutdown.\napp.server.shutdown()\n// Wacht tot de server is afgesloten.\ntry app.server.onShutdown.wait()\n```\n\n----------------------------------------\n\nTITLE: Sending a Text Message via WebSocket (Swift)\nDESCRIPTION: This snippet demonstrates how to send a text message using the `ws.send` method of a WebSocket instance. It takes a string as input and sends it as a UTF-8 encoded text message to the connected peer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nws.send(\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database with File\nDESCRIPTION: This snippet shows how to configure the SQLite database connection, pointing to a specific file (`db.sqlite`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport FluentSQLiteDriver\n\napp.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variable in Vapor (Swift)\nDESCRIPTION: This snippet shows two ways to retrieve environment variables in Vapor. The first uses `Environment.get(_: String)`, and the second accesses the variable dynamically through `Environment.process.VARIABLE_NAME`. Both return an optional String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n\n```\n\n----------------------------------------\n\nTITLE: Using flatMap with a throwing method\nDESCRIPTION: This code demonstrates how to use a throwing (synchronous) method inside of a `flatMap` closure. Swift's `do/catch` and `eventLoop.makeFailedFuture(error)` are used to create a failed future if an error is thrown in the `try` block.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume future string and client from previous example.\nlet futureResponse = futureString.flatMap { string in\n    let url: URL\n    do {\n        // Some synchronous throwing method.\n        url = try convertToURL(string)\n    } catch {\n        // Use event loop to make pre-completed future.\n        return eventLoop.makeFailedFuture(error)\n    }\n    return client.get(url) // EventLoopFuture<ClientResponse>\n}\n```\n\n----------------------------------------\n\nTITLE: Flexible Data with Document in MongoDB\nDESCRIPTION: This snippet shows how to add flexible data storage using the `Document` type in MongoDB.  It allows storing arbitrary data in a grouped manner. Note that strictly typed queries are not supported on these values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@Field(key: \"document\")\nvar document: Document\n```\n\n----------------------------------------\n\nTITLE: Using Plaintext Password Hashing for Testing in Vapor\nDESCRIPTION: This snippet demonstrates how to configure the password hasher to use plaintext hashing, which is insecure and only recommended for testing environments. It is conditionally applied based on the application environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .testing:\n    app.passwords.use(.plaintext)\ndefault: break\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP in Vapor\nDESCRIPTION: This snippet generates a TOTP (Time-based One-Time Password) using a symmetric key, SHA256 digest, six-digit output, and a 60-second interval. It shows both instance and static method generation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.it.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet totp = TOTP(key: key, digest: .sha256, digits: .six, interval: 60)\nlet code = totp.generate(time: Date())\n\n// Oppure utilizzando la funzione statica generate\nTOTP.generate(key: key, digest: .sha256, digits: .six, interval: 60, time: Date())\n```\n\n----------------------------------------\n\nTITLE: Getting Related Models in Fluent\nDESCRIPTION: This code demonstrates how to retrieve related models using the `get(on:)` method. It fetches all planets associated with a given star. The result is then processed in a `map` closure or directly awaited using `try await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// 获取太阳系的行星。\nsun.$planets.get(on: database).map { planets in\n    print(planets)\n}\n\n// 或者\n\nlet planets = try await sun.$planets.get(on: database)\nprint(planets)\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Path Prefix (Swift)\nDESCRIPTION: Demonstrates grouping routes with a path prefix using the `app.grouped` method.  All routes registered within the group will have the prefix applied.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nlet users = app.grouped(\"users\")\n// GET /users\nusers.get { req in\n    ...\n}\n// POST /users\nusers.post { req in\n    ...\n}\n// GET /users/:id\nusers.get(\":id\") { req in\n    let id = req.parameters.get(\"id\")!\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.toml for Migrations\nDESCRIPTION: Configures the `fly.toml` file to run database migrations before starting the Vapor application. This is done by setting the `release_command` property within the `[deploy]` section to `migrate -y`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n release_command = \"migrate -y\"\n```\n\n----------------------------------------\n\nTITLE: Custom Services Usage - Swift\nDESCRIPTION: This snippet showcases how to access custom services in Vapor 4 using extensions, replacing the Vapor 3 `make` function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nreq.myAPI.foo()\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB with Connection String\nDESCRIPTION: This snippet configures MongoDB using a connection string. Replace `<connection string>` with the actual connection string for your MongoDB database in standard MongoDB URI format.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport FluentMongoDriver\n\ntry app.databases.use(.mongo(connectionString: \"<connection string>\"), as: .mongo)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Models in Swift\nDESCRIPTION: Demonstrates how to retrieve all records of a specific model from the database using the `all()` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet planets = try await Planet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data - Swift\nDESCRIPTION: Defines a route handler that sets a value in the session data. It retrieves a dynamic route parameter named \"value\" and stores it in the session's data dictionary under the key \"name\". Returns a HTTP 200 OK status.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"set\", \":value\") { req -> HTTPStatus in\n    req.session.data[\"name\"] = req.parameters.get(\"value\")\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Heroku CLI with Homebrew\nDESCRIPTION: Installs the Heroku Command Line Interface (CLI) using Homebrew, a package manager for macOS. This allows users to interact with the Heroku platform from the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap heroku/brew && brew install heroku\n```\n\n----------------------------------------\n\nTITLE: EventLoopFuture flatMapThrowing Transformation\nDESCRIPTION: This code snippet demonstrates the `flatMapThrowing` transformation on an EventLoopFuture. It transforms a future string to a future integer or throws an error if the conversion fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Map the future string to an integer\nlet futureInt = futureString.flatMapThrowing { string in\n    print(string) // The actual String\n    // Convert the string to an integer or throw an error\n    guard let int = Int(string) else {\n        throw Abort(...)\n    }\n    return int\n}\n\n/// We now have a future integer\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Logging into Heroku CLI\nDESCRIPTION: Logs the user into the Heroku CLI, prompting for Heroku credentials. This allows the user to manage their Heroku applications from the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\n----------------------------------------\n\nTITLE: Create Procfile\nDESCRIPTION: Creates a `Procfile` that tells Heroku how to run the Vapor application. It specifies the command to start the web server in production mode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \"web: App serve --env production\" \\\n  \"--hostname 0.0.0.0 --port \\$PORT\" > Procfile\n```\n\n----------------------------------------\n\nTITLE: Accessing the HTTP Client in Vapor (Swift)\nDESCRIPTION: Demonstrates how to access the default HTTP client instance from both the Application and Request objects in a Vapor application.  The Application client is used for configuration, while the Request client is used within route handlers. Accessing via `req.client` is preferred within route handlers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.client // Client\n\napp.get(\"test\") { req in\n\treq.client // Client\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future Value\nDESCRIPTION: This code snippet demonstrates how to use the `map` method to transform a future string into a future integer. It prints the string and converts it to an integer, defaulting to 0 if the conversion fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 返回一个 future 字符串\nlet futureString: EventLoopFuture<String> = ...\n\n/// 把这个字符串转换成整形\nlet futureInt = futureString.map { string in\n    print(string) // 实际的字符串\n    return Int(string) ?? 0\n}\n\n/// 我们现在有一个 future 的整数\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Saving a Model to the Database in Swift\nDESCRIPTION: Illustrates the basic usage of the `save(on:)` method to persist a `planet` model to the database. The method handles both creation and update operations automatically.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nplanet.save(on: database)\n```\n\n----------------------------------------\n\nTITLE: Content Decoder Protocol in Swift\nDESCRIPTION: This code shows the definition of the ContentDecoder protocol, used for decoding data from HTTP message bodies. It defines a function `decode` which takes a decodable type, a ByteBuffer, and HTTPHeaders as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol ContentDecoder {\n    func decode<D>(_ decodable: D.Type, from body: ByteBuffer, headers: HTTPHeaders) throws -> D\n        where D: Decodable\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Identifier - Swift\nDESCRIPTION: This snippet shows how to configure the Apple application identifier for verifying Apple JWTs.  The `applicationIdentifier` property of the `app.jwt.apple` object is set to the appropriate value. This configuration is required before verifying Apple JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Configure Apple app identifier.\napp.jwt.apple.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT with Key Identifier - Swift\nDESCRIPTION: This snippet demonstrates how to verify a JWT.  If the JWT header contains a `kid` (key identifier), the corresponding key will be used for verification. If no `kid` is present, the default key is used.  The `verify` method returns the decoded payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\n// Überprüfung mit dem im \"kid\"-Kopf angegebenen Unterzeichner.\n// Wenn kein \"kid\"-Header vorhanden ist, wird der Standardunterzeichner verwendet.\nlet payload = try await req.jwt.verify(as: TestPayload.self)\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Error Middleware (Swift)\nDESCRIPTION: Explains how to replace the default `ErrorMiddleware` with custom error handling logic. This involves clearing the existing middleware and adding custom middleware in its place. The example demonstrates initializing the middleware stack, adding back default route logging, and then adding the custom error handling middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Clear all default middleware (then, add back route logging)\napp.middleware = .init()\napp.middleware.use(RouteLoggingMiddleware(logLevel: .info))\n// Add custom error handling middleware first.\napp.middleware.use(MyErrorMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Redis Channels (Swift)\nDESCRIPTION: This snippet demonstrates how to subscribe to Redis channels in pub/sub mode. It uses the `subscribe` method to listen to messages published to specific channels.  It shows how to provide a `messageReceiver` closure to handle incoming messages and an optional `onUnsubscribe` closure to handle unsubscribe events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// creates 2 subscriptions, one for each given channel\napp.redis.subscribe\n  to: \"channel_1\", \"channel_2\",\n  messageReceiver: { channel, message in\n    switch channel {\n    case \"channel_1\": // do something with the message\n    default: break\n    }\n  },\n  onUnsubscribe: { channel, subscriptionCount in\n    print(\"unsubscribed from \\(channel)\")\n    print(\"subscriptions remaining: \\(subscriptionCount)\")\n  }\n```\n\n----------------------------------------\n\nTITLE: Exiting and re-connecting via SSH\nDESCRIPTION: Exits the current SSH session as root and establishes a new SSH connection as the newly created user `vapor`. This is done to work with the newly configured user for subsequent steps.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexit\nssh vapor@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Message with Promise\nDESCRIPTION: This example demonstrates sending a message via WebSocket and using a promise to track the completion status. An `EventLoopPromise` is created to monitor the send operation. The promise's `futureResult` is observed to determine if the message was sent successfully or if an error occurred. The ellipsis (...) in the code signifies where the message content and related configurations should be placed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(..., promise: promise)\npromise.futureResult.whenComplete { result in\n    // 发送成功或失败。\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cowsay Command (Shell)\nDESCRIPTION: This command executes the `cowsay` command with a message and custom eye and tongue options.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nswift run App cowsay sup --eyes ^^ --tongue \"U \"\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: This snippet shows a sample Systemd service file for a Vapor application.  It defines the application's description, dependencies, service type, user, group, restart policy, working directory, execution command, standard output, standard error, syslog identifier, and installation target. Requires Systemd to be installed and configured correctly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.nl.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[Unit]\nDescription=Hello\nRequires=network.target\nAfter=network.target\n\n[Service]\nType=simple\nUser=vapor\nGroup=vapor\nRestart=always\nRestartSec=3\nWorkingDirectory=/home/vapor/hello\nExecStart=/home/vapor/hello/.build/release/App serve --env production\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=vapor-hello\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Signers with Key Identifiers in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to add HMAC signers with SHA-256 and different key identifiers ('kid') to a Vapor application's JWT signers. It allows distinguishing between multiple algorithms. The `kid` parameter is used to assign a unique identifier to each signer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Voeg HMAC toe met SHA-256 ondertekenaar genaamd \"a\".\napp.jwt.signers.use(.hs256(key: \"foo\"), kid: \"a\")\n// Voeg HMAC toe met SHA-256 ondertekenaar genaamd \"b\".\napp.jwt.signers.use(.hs256(key: \"bar\"), kid: \"b\")\n```\n\n----------------------------------------\n\nTITLE: Define a GET route using `on` method\nDESCRIPTION: This snippet shows how to define a GET route using the `on` method, which explicitly specifies the HTTP method. This is an alternative to using the method-specific helpers like `app.get`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.on(.GET, \"hello\", \"vapor\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Deleting a Field from a Schema (Swift)\nDESCRIPTION: This Swift code snippet shows how to delete a field from a database schema using Fluent. It removes the field named \"age\" from the schema. This action is typically performed during schema updates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n.deleteField(\"age\")\n```\n\n----------------------------------------\n\nTITLE: Shutting Down the Vapor Server\nDESCRIPTION: This code snippet shows how to request a shutdown of the Vapor server and wait for the shutdown to complete. It uses `app.server.shutdown()` and `app.server.onShutdown.wait()` to gracefully shut down the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Request server shutdown.\napp.server.shutdown()\n\n// Wait for the server to shutdown.\ntry app.server.onShutdown.wait()\n```\n\n----------------------------------------\n\nTITLE: Deleting Planets by Name Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to delete all planets named 'Vulcan' using Fluent's query API. It uses the `filter` method to specify which records to delete and then the `delete` method to perform the deletion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Delete all planets named \"Vulcan\"\nPlanet.query(on: database)\n    .filter(\\.$name == \"Vulcan\")\n    .delete()\n```\n\n----------------------------------------\n\nTITLE: Initialize Application for testing (Swift)\nDESCRIPTION: This snippet demonstrates initializing a Vapor `Application` in the `.testing` environment.  It also demonstrates how to use defer to ensure `app.shutdown()` is called after each test to release resources and prevent precondition failures with thread allocation.  `configure(app)` is called to apply the application configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.it.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet app = Application(.testing)\ndefer { app.shutdown() }\ntry configure(app)\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Fluent in Swift\nDESCRIPTION: This example demonstrates how to count the number of records in a database using the `count()` method on a Fluent query builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n// Número de planetas en la base de datos. \nPlanet.query(on: database).count()\n```\n\n----------------------------------------\n\nTITLE: Chaining Future Transformations\nDESCRIPTION: This snippet demonstrates chaining multiple transformations on a future. It first transforms a string to a URL and then flatMaps it to a future response, handling any potential errors during the URL conversion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet client: Client = ...\n\nlet futureResponse = futureString.flatMapThrowing { string in\n    guard let url = URL(string: string) else {\n        throw Abort(.badRequest, reason: \"Invalid URL string: \\(string)\")\n    }\n    return url\n}.flatMap { url in\n    client.get(url)\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Vapor Application Locks Usage in Swift\nDESCRIPTION: This snippet demonstrates how to use locks in a Vapor application for thread synchronization. It defines a `LockKey` and uses `app.locks.lock(for:)` to obtain a shared lock. The `withLock` method ensures that the code block is executed exclusively.  It also shows usage of `app.sync.withLock` for application-level locking. Dependencies: Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct TestKey: LockKey { }\n\nlet test = app.locks.lock(for: TestKey.self)\ntest.withLock {\n    // Hacer algo.\n}\n\napp.sync.withLock {\n    // Hacer algo.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in Shell\nDESCRIPTION: This command shows how to set an environment variable in the shell using the `export` command. This allows you to set environment variables before running your Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport FOO=BAR\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Unique Results Swift\nDESCRIPTION: This snippet shows how to retrieve all unique first names of users from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Geeft als resultaat alle unieke voornamen van gebruikers. \nUser.query(on: database).unique().all(\\.$firstName)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Payload\nDESCRIPTION: This snippet shows how to define a custom payload using a Codable struct. This allows you to send arbitrary data along with your push notifications. The payload can then be passed with the APNSAlertNotification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// 自定义遵循 `Codable` 协议的 Payload\n struct Payload: Codable {\n     let acme1: String\n     let acme2: Int\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Fluent in Swift\nDESCRIPTION: This snippet shows how to find the minimum value of a field in the database using the `min(_:)` method on a Fluent query builder. It finds the lowest planet name in alphabetical order.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n// Nombre más bajo en orden alfabético.\nPlanet.query(on: database).min(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Setting Model Space - Swift\nDESCRIPTION: This snippet demonstrates how to define the database space for a model using the `schema(_:space:)` method. In this example, the 'planets' table is created within the 'mirror_universe' space.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\ntry await db.schema(\"planets\", space: \"mirror_universe\")\n    .id()\n    // ...\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Map EventLoopFuture Value\nDESCRIPTION: Demonstrates how to use `map` to transform the value of an EventLoopFuture. The closure provided to `map` receives the value of the future and returns a transformed value. It's used to change the type or value of the future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n/// Supongamos que recuperamos una cadena futura de alguna API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Asigna la cadena futura a un número entero\nlet futureInt = futureString.map { string in\n    print(string) // La cadena de futuro\n    return Int(string) ?? 0\n}\n\n/// Ahora tenemos un futuro entero\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key Constraint with Cascade Delete in Swift\nDESCRIPTION: This snippet adds a top-level foreign key constraint with the onDelete action set to cascade. This means that if a referenced star is deleted, the associated records in the planets table will also be deleted. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n.foreignKey(\"star_id\", references: \"stars\", \"id\", onDelete: .cascade)\n```\n\n----------------------------------------\n\nTITLE: Auto Migrate on Server Start Shell\nDESCRIPTION: This command runs database migrations automatically when the Vapor application starts. Requires Vapor CLI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nswift run App serve --auto-migrate\n```\n\n----------------------------------------\n\nTITLE: Run Vapor Application using Serve Command (Swift)\nDESCRIPTION: This code snippet executes the Vapor application using the `serve` command. This command starts the Vapor server based on the configured settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Statements\nDESCRIPTION: Shows how to use conditional statements (`#if`, `#else`, `#elseif`) in Leaf templates.  These examples demonstrate how to evaluate expressions and render different content based on the result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\n#if(1 + 1 == 2):\n    Hello!\n#endif\n\n#if(index % 2 == 0):\n    This is even index.\n#else:\n    This is odd index.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Add TracingMiddleware in Vapor\nDESCRIPTION: Adds the `TracingMiddleware` to the Vapor application's middleware stack. This automatically creates a span for each incoming request, allowing you to track the request lifecycle.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(TracingMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Handler (Swift)\nDESCRIPTION: Shows how to override Vapor's default log handler with a custom one. This example uses `StreamLogHandler` to output logs to standard output.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Logging\n\nLoggingSystem.bootstrap { label in\n    StreamLogHandler.standardOutput(label: label)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field for Parent Relation (Swift)\nDESCRIPTION: This snippet shows how to define the database field for the parent relation using Fluent's schema builder. The `.references` constraint is used to link the field to the parent table's `id` column.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .required, .references(\"star\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Group routes with middleware\nDESCRIPTION: This snippet shows how to group routes and apply middleware to them. This can be useful for applying authentication or rate limiting to a subset of routes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fast-thing\") { req in\n    ...\n}\napp.group(RateLimitMiddleware(requestsPerMinute: 5)) { rateLimited in\n    rateLimited.get(\"slow-thing\") { req in\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Ubuntu\nDESCRIPTION: These commands update the package list and install Supervisor on an Ubuntu system using the apt package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: flatMap with Throwing Method and Error Handling\nDESCRIPTION: This snippet demonstrates how to call a throwing method within a flatMap closure and handle potential errors by creating a failed future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResponse = futureString.flatMap { string in\n    let url: URL\n    do {\n        // Een of andere synchrone werpmethode.\n        url = try convertToURL(string)\n    } catch {\n        // Gebruik een event lus om vooraf voltooide toekomst te maken.\n        return eventLoop.makeFailedFuture(error)\n    }\n    return client.get(url) // EventLoopFuture<ClientResponse>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL with Disabled Certificate Verification\nDESCRIPTION: This snippet shows how to configure a MySQL connection with disabled certificate verification.  This should ONLY be done for local development and never in production.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nvar tls = TLSConfiguration.makeClientConfiguration()\ntls.certificateVerification = .none\n    \napp.databases.use(.mysql(\n    hostname: \"localhost\",\n    username: \"vapor\",\n    password: \"vapor\",\n    database: \"vapor\",\n    tlsConfiguration: tls\n), as: .mysql)\n```\n\n----------------------------------------\n\nTITLE: Initializing Application\nDESCRIPTION: Illustrates how to initialize an `Application` instance using the `.testing` environment and configure it. It also demonstrates the importance of calling `app.shutdown()` in a `defer` block to release resources and prevent test failures.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nlet app = Application(.testing)\ndefer { app.shutdown() }\ntry configure(app)\n```\n\n----------------------------------------\n\nTITLE: Leaf Tag Example\nDESCRIPTION: Demonstrates a basic usage of a Leaf tag to display the number of users.  The tag consists of a token, name, and parameter list.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_0\n\nLANGUAGE: leaf\nCODE:\n```\nThere are #count(users) users.\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database\nDESCRIPTION: This snippet shows how to configure a MySQL database using Fluent. It specifies the hostname, username, password, and database name. The `as: .mysql` specifies the identifier for the MySQL database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport FluentMySQLDriver\n\napp.databases.use(.mysql(hostname: \"localhost\", username: \"vapor\", password: \"vapor\", database: \"vapor\"), as: .mysql)\n```\n\n----------------------------------------\n\nTITLE: Querying for Models in Swift\nDESCRIPTION: Demonstrates how to use the `query(on:)` method to start a query builder for the `Planet` model and retrieve all instances using `all()`.  This shows the basic way to query for all models of a specific type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: Signing JWT with Key Identifier - Swift\nDESCRIPTION: This snippet shows how to sign a JWT using a specific key identifier (`kid`). The `kid` parameter is passed to the `sign` method, which includes the identifier in the JWT header.  This allows the verifier to identify the correct key to use for verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\n// Unterschreiben mit Unterzeichner \"a\"\ntry await req.jwt.sign(payload, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Creating a SessionAuthenticator for a Fluent Model (Swift)\nDESCRIPTION: This code shows how to create a SessionAuthenticator for a Fluent model, using either the default database or a specified database identifier.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_42\n\nLANGUAGE: swift\nCODE:\n```\nUser.sessionAuthenticator()\n\nUser.sessionAuthenticator(.sqlite)\n```\n\n----------------------------------------\n\nTITLE: Leaf Else If Example\nDESCRIPTION: Demonstrates using `#elseif` to create multiple conditional branches in Leaf template. The code shows checking multiple values of a variable `title` and displaying a message for each case.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_8\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    Hello new user!\n#elseif(title == \"Welcome back!\"):\n    Hello old user\n#else:\n    Unexpected page!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Updating Package.swift for Vapor 4\nDESCRIPTION: This code snippet demonstrates the necessary changes to a Package.swift file when upgrading from Vapor 3 to Vapor 4. It includes updating the swift-tools-version, adding platform support, updating package versions, and modifying target dependencies. The changes are shown in a diff format.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-// swift-tools-version:4.0\n+// swift-tools-version:5.2\n import PackageDescription\n \n let package = Package(\n     name: \"api\",\n+    platforms: [\n+        .macOS(.v10_15),\n+    ],\n     dependencies: [\n-        .package(url: \"https://github.com/vapor/fluent-postgresql.git\", from: \"1.0.0\"),\n+        .package(url: \"https://github.com/vapor/fluent.git\", from: \"4.0.0-rc\"),\n+        .package(url: \"https://github.com/vapor/fluent-postgres-driver.git\", from: \"2.0.0-rc\"),\n-        .package(url: \"https://github.com/vapor/jwt.git\", from: \"3.0.0\"),\n+        .package(url: \"https://github.com/vapor/jwt.git\", from: \"4.0.0-rc\"),\n-        .package(url: \"https://github.com/vapor/vapor.git\", from: \"3.0.0\"),\n+        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.3.0\"),\n     ],\n     targets: [\n         .target(name: \"App\", dependencies: [\n-            \"FluentPostgreSQL\", \n+            .product(name: \"Fluent\", package: \"fluent\"),\n+            .product(name: \"FluentPostgresDriver\", package: \"fluent-postgres-driver\"),\n-            \"Vapor\", \n+            .product(name: \"Vapor\", package: \"vapor\"),\n-            \"JWT\", \n+            .product(name: \"JWT\", package: \"jwt\"),\n         ]),\n-        .target(name: \"Run\", dependencies: [\"App\"]),\n-        .testTarget(name: \"AppTests\", dependencies: [\"App\"])\n+        .target(name: \"Run\", dependencies: [\n+            .target(name: \"App\"),\n+        ]),\n+        .testTarget(name: \"AppTests\", dependencies: [\n+            .target(name: \"App\"),\n+        ])\n     ]\n )\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment with Custom Arguments\nDESCRIPTION: This code demonstrates how to initialize a custom `Environment` struct with a specific name and arguments. The arguments array simulates command line arguments and is useful for testing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet env = Environment(name: \"testing\", arguments: [\"vapor\"])\n```\n\n----------------------------------------\n\nTITLE: Set Heroku Buildpack\nDESCRIPTION: This command sets the Heroku buildpack for the application to the Vapor buildpack. This tells Heroku how to build and run the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:set vapor/vapor\n```\n\n----------------------------------------\n\nTITLE: Using Custom Servers in Vapor\nDESCRIPTION: This code snippet demonstrates how to replace the default Vapor server with a custom server implementation. It shows how to create a custom server class, register it with the application, and use the leading-dot syntax to register the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nfinal class MyServer: Server {\n\t...\n}\n\napp.servers.use { app in\n\tMyServer()\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension Application.Servers.Provider {\n    static var myServer: Self {\n        .init {\n            $0.servers.use { app in\n            \tMyServer()\n            }\n        }\n    }\n}\n\napp.servers.use(.myServer)\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branch\nDESCRIPTION: Switches the current Git branch to the specified branch (e.g., main). This ensures that the correct branch is used for deployment to Heroku.  The target branch, 'main', is a parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Run (Shell)\nDESCRIPTION: Runs a one-off command within the Docker Compose environment, in this case to run database migrations. This is useful for tasks such as running migrations or seeders.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose run migrate\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Vapor Client\nDESCRIPTION: Demonstrates how to make a GET request to a specified URL using the Vapor client. The response is returned as a future containing the HTTP status, headers, and content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/status/200\")\n```\n\n----------------------------------------\n\nTITLE: Access parameter values from a request\nDESCRIPTION: This snippet illustrates how to access parameter values from the `req.parameters` object. The value is retrieved using the name specified in the path component (e.g., `:name`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /hello/foo\n// 响应到 GET /hello/bar\n// ...\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Environment Variables in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet defines shared environment variables for Docker Compose services, including database connection details and log level. The `LOG_LEVEL` variable falls back to 'debug' if not set in the environment. These shared variables are reused in multiple service definitions using YAML anchors and references.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-shared_environment: &shared_environment\n  LOG_LEVEL: ${LOG_LEVEL:-debug}\n  DATABASE_HOST: db\n  DATABASE_NAME: vapor_database\n  DATABASE_USERNAME: vapor_username\n  DATABASE_PASSWORD: vapor_password\n```\n\n----------------------------------------\n\nTITLE: Grouping Filters with Fluent in Swift\nDESCRIPTION: This shows how to group filters with an OR operator to find planets where the name is either Earth or Mars.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n// Todos los planetas cuyo nombre sea Earth o Mars\nPlanet.query(on: database).group(.or) { group in\n    group.filter(\\.$name == \"Earth\").filter(\\.$name == \"Mars\")\n}.all()\n```\n\n----------------------------------------\n\nTITLE: Attach Vapor app to Postgres database\nDESCRIPTION: This command attaches an existing Vapor application to a Postgres database created on Fly.io.  It creates a database and user, and exposes the connection URL via the `DATABASE_URL` environment variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfly pg attach name-of-your-postgres-app\n```\n\n----------------------------------------\n\nTITLE: Handle NIO EventLoopFuture Boundaries in Vapor Tracing\nDESCRIPTION: Demonstrates how to manually restore the context when crossing NIO `EventLoopFuture` boundaries. This ensures that spans are linked correctly, regardless of whether automatic propagation is enabled.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcessNIO\") { req in\n    withSpan(\"fetch\", context: req.serviceContext) { span in\n        fetchSomething().map { result in\n            withSpan(\"process\", context: span.context) { _ in\n                process(result)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Supported HTTP Versions in Vapor (Swift)\nDESCRIPTION: This snippet configures the Vapor HTTP server to only support HTTP/2. It demonstrates how to modify the `supportVersions` property of the server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Ondersteunt alleen HTTP/2\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Delete Schema Swift\nDESCRIPTION: This snippet shows how to delete a schema for a \"planets\" table. It uses the `delete()` method to remove the table or collection from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.schema(\"planets\").delete()\n```\n\n----------------------------------------\n\nTITLE: Collect File into Buffer - Swift\nDESCRIPTION: This snippet shows how to read an entire file into a `ByteBuffer` using `req.fileio.collectFile`. This method loads the entire file into memory at once, so it should be used with caution for large files. Consider using chunked or streaming reads instead to limit memory usage.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.zh.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// 去读文件到缓冲区\nreq.fileio.collectFile(at: \"/path/to/file\").map { buffer in \n    print(buffer) // ByteBuffer\n}\n\n// 或者\n\nlet buffer = req.fileio.collectFile(at: \"/path/to/file\")\nprint(buffer)\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Example for Employee Validation in Swift\nDESCRIPTION: This code demonstrates how to use the `Custom` validator to validate employee names against a list of company employees. It defines an `Employee` struct conforming to `Content` and adds a custom validation for the `nameAndSurname` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nlet allCompanyEmployees: [String] = [\n  \"Everett Erickson\",\n  \"Sabrina Manning\",\n  \"Seth Gates\",\n  \"Melina Hobbs\",\n  \"Brendan Wade\",\n  \"Evie Richardson\",\n]\n\nstruct Employee: Content {\n  var nameAndSurname: String\n  var email: String\n  var age: Int\n  var role: String\n\n  static func validations(_ validations: inout Validations) {\n    validations.add(\n      \"nameAndSurname\",\n      as: String.self,\n      is: .custom(\"Validates whether employee is part of XYZ company by looking at name and surname.\") { nameAndSurname in\n          for employee in allCompanyEmployees {\n            if employee == nameAndSurname {\n              return true\n            }\n          }\n          return false\n        }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job with Vapor Queues in Swift\nDESCRIPTION: This code snippet shows how to schedule a `CleanupJob` to run yearly on May 23rd at noon using the Vapor Queues API. It utilizes the `yearly()`, `in()`, `on()`, and `at()` methods to define the schedule.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.schedule(CleanupJob())\n    .yearly()\n    .in(.may)\n    .on(23)\n    .at(.noon)\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Port in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure a custom port for the Vapor HTTP server. It assigns the value `1337` to the port property of the server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Configureer aangepaste poort.\napp.http.server.configuration.port = 1337\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Optional Future with Abort Error\nDESCRIPTION: This snippet demonstrates how to use the `unwrap(or:)` extension in Vapor to unwrap an optional future. If the future contains `nil`, it fails with the provided `Abort` error. Otherwise, it provides the unwrapped value to the subsequent `flatMap` closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nUser.find(id, on: db)\n    .unwrap(or: Abort(.notFound))\n    .flatMap \n{\n    user in\n    // 非可选，提供给闭包的用户。\n}\n```\n\n----------------------------------------\n\nTITLE: Query Models (Swift)\nDESCRIPTION: This Swift code snippet shows how to create a query builder for a model and retrieve all instances using the `all()` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Response Content with Vapor\nDESCRIPTION: Shows how to decode the response body of an HTTP request using Vapor's Content API. It decodes the JSON response into a custom Swift struct `MyJSONResponse`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await req.client.get(\"https://httpbin.org/json\")\nlet json = try response.content.decode(MyJSONResponse.self)\n```\n\n----------------------------------------\n\nTITLE: Configure testable method (Swift)\nDESCRIPTION: This snippet demonstrates configuring which method `testable` to use to test the application (inMemory or running).  The `inMemory` testing is done programmatically, the `running` testing is done by launching an HTTP server. The port can also be specified when using the `running` option.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.it.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// Usa il testing programmatico.\napp.testable(method: .inMemory).test(...)\n\n// Esegui i test attraverso un server HTTP attivo.\napp.testable(method: .running).test(...)\n```\n\nLANGUAGE: Swift\nCODE:\n```\n.running(port: 8123)\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Leaf Template in Vapor (Swift)\nDESCRIPTION: This snippet shows how to pass data to a Leaf template from a Vapor controller. It renders the \"home\" template and provides a dictionary containing the \"name\" value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nreturn try await req.view.render(\"home\", [\"name\": \"John\"])\n```\n\n----------------------------------------\n\nTITLE: Check Vapor Toolbox Installation\nDESCRIPTION: This command prints the help content of the Vapor Toolbox to ensure that it is installed correctly. It displays a list of available commands and options provided by the Vapor CLI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.zh.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Nginx TLS Configuration\nDESCRIPTION: This Nginx configuration snippet shows how to configure TLS/SSL for secure communication with a Vapor application. It includes settings for SSL certificates, protocols, ciphers, and session management to ensure a secure connection.  The configuration assumes the SSL certificate files are located in `/etc/letsencrypt/live/hello.com/`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.zh.md#_snippet_5\n\nLANGUAGE: Nginx\nCODE:\n```\nserver {\n    ...\n\n    listen 443 ssl;\n\n    ssl_certificate /etc/letsencrypt/live/hello.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/hello.com/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    add_header Strict-Transport-Security max-age=15768000;\n\n    ...\n\n    location @proxy {\n       ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension to Add Validatable Conformance\nDESCRIPTION: Adds conformance to the `Validatable` protocol to the `CreateUser` struct using an extension. This allows defining validation rules within the `validations(_:)` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nextension CreateUser: Validatable {\n    static func validations(_ validations: inout Validations) {\n        // Validations go here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Log Handler (Swift)\nDESCRIPTION: This snippet demonstrates how to override Vapor's default log handler and register your own.  It uses `LoggingSystem.bootstrap` to provide a closure that returns a custom `LogHandler`.  This example uses `StreamLogHandler` to output to standard output.  It requires importing `Logging`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport Logging\n\nLoggingSystem.bootstrap { label in\n    StreamLogHandler.standardOutput(label: label)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox via Homebrew\nDESCRIPTION: This command installs the Vapor Toolbox using Homebrew. The Vapor Toolbox is a command-line tool that assists in creating and managing Vapor projects. Homebrew must be installed prior to running this command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.it.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Parent Relationship in Fluent (Swift)\nDESCRIPTION: This code defines an optional parent relationship using `@OptionalParent`. This allows the parent relationship to be nil if it's appropriate for the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Ejemplo de una relación parent opcional.\n    @OptionalParent(key: \"star_id\")\n    var star: Star?\n}\n```\n\n----------------------------------------\n\nTITLE: Diverse Leaf Tag Examples\nDESCRIPTION: This snippet showcases various Leaf tag usages, including variable insertion, template extension, data export, content import, and loop iterations. These examples demonstrate the versatility of Leaf's templating capabilities.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_1\n\nLANGUAGE: leaf\nCODE:\n```\n#(variable)\n#extend(\"template\"): I'm added to a base template! #endextend\n#export(\"title\"): Welcome to Vapor #endexport\n#import(\"body\")\n#count(friends)\n#for(friend in friends): <li>#(friend.name)</li> #endfor\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Request Decompression in Vapor (Swift)\nDESCRIPTION: This snippet enables HTTP request decompression using gzip for the Vapor HTTP server. It sets the `requestDecompression` property to `.enabled`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Inschakelen van HTTP verzoek decompressie.\napp.http.server.configuration.requestDecompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job with a Delay\nDESCRIPTION: Dispatches a job to the queue with a specified delay.  This configures the job to be executed only after a certain date and time. This example shows only the `async` implementation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // Un día\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3,\n        delayUntil: futureDate)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP POST request with invalid email\nDESCRIPTION: An example HTTP POST request with a JSON payload containing an invalid email address ('foo'). This is used to demonstrate the email validation in action.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /users HTTP/1.1\nContent-Length: 67\nContent-Type: application/json\n\n{\n    \"age\": 4,\n    \"email\": \"foo\",\n    \"favoriteColor\": \"green\",\n    \"name\": \"Foo\",\n    \"username\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stop a Docker container\nDESCRIPTION: This command stops a running Docker container. Replace `<container_id>` with the ID of the container to stop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker container stop <container_id>\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Session Driver Swift\nDESCRIPTION: This snippet demonstrates how to configure Vapor to use the Fluent session driver, which stores session data in a database. It requires that Fluent has been previously configured. It sets the driver to use the default database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\napp.sessions.use(.fluent)\n```\n\n----------------------------------------\n\nTITLE: Add SessionsMiddleware Globally - Swift\nDESCRIPTION: Adds the `SessionsMiddleware` globally to the Vapor application. This ensures that all requests pass through the middleware, enabling session support for all routes.  The middleware should be added after the cookie factory is declared.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Implementing BasicAuthenticator in Swift\nDESCRIPTION: This code implements a `BasicAuthenticator` that verifies the username and password from the `Authorization` header. The `authenticate(basic:for:)` method checks if the provided credentials match hardcoded values. If the credentials are valid, it logs in a `User` with the name \"Vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: BasicAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        basic: BasicAuthorization,\n        for request: Request\n    ) -> EventLoopFuture<Void> {\n        if basic.username == \"test\" && basic.password == \"secret\" {\n            request.auth.login(User(name: \"Vapor\"))\n        }\n        return request.eventLoop.makeSucceededFuture(())\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Scale Heroku web dyno\nDESCRIPTION: This command scales the number of web dynos for your Heroku application to 1. Dynos are containers that run your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nheroku ps:scale web=1\n```\n\n----------------------------------------\n\nTITLE: Create Schema Swift\nDESCRIPTION: This snippet shows how to create a simple schema for a \"planets\" table, including an ID field and a required name field of type String. It uses the `create()` method to execute the schema creation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Microsoft JWT - Swift\nDESCRIPTION: This code demonstrates how to fetch and verify a Microsoft JWT from the Authorization header using the `req.jwt.microsoft.verify()` method. The verified token is printed. This simplifies the process of handling Microsoft's identity tokens.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch and verify Microsoft JWT from Authorization header.\napp.get(\"microsoft\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.microsoft.verify()\n    print(token) // MicrosoftIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Server Name Header in Vapor\nDESCRIPTION: This code configures the `serverName` option, which controls the value of the `Server` header in outgoing HTTP responses. Setting this allows you to brand your server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Agregue la cabecera 'Servidor: vapor' a las respuestas.\napp.http.server.configuration.serverName = \"vapor\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Field's Data Type (Swift)\nDESCRIPTION: This snippet demonstrates updating a field's data type using the `updateField` method.  In this case, it's changing the \"age\" field to be of type double.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Updates the field to `double` data type.\n.updateField(\"age\", .double)\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future String to an Integer with Error Handling\nDESCRIPTION: This snippet showcases the usage of `flatMapThrowing` on an `EventLoopFuture<String>` to map it to an `EventLoopFuture<Int>`, while also handling potential errors during the conversion. It throws an error if the string cannot be converted to an integer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet futureInt = futureString.flatMapThrowing { string in\n    print(string) // The actual String\n    // Convert the string to an integer or throw an error\n    guard let int = Int(string) else {\n        throw Abort(...)\n    }\n    return int\n}\n\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Database Repositories in Vapor 4 (Swift)\nDESCRIPTION: Illustrates the changes in creating database repositories in Vapor 4. Instead of a `final class` conforming to a protocol, a `struct` is used. The `ServiceType` conformance is removed, and a `UserRepositoryFactory` is introduced to return a `UserRepository` for a `Request`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\n+ struct DatabaseUserRepository: UserRepository {\n      let database: Database\n      func all() -> EventLoopFuture<[User]> {\n          return User.query(on: database).all()\n      }\n  }\n```\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserRepositoryFactory {\n    var make: ((Request) -> UserRepository)?\n    mutating func use(_ make: @escaping ((Request) -> UserRepository)) {\n        self.make = make\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension Application {\n    private struct UserRepositoryKey: StorageKey { \n        typealias Value = UserRepositoryFactory \n    }\n\n    var users: UserRepositoryFactory {\n        get {\n            self.storage[UserRepositoryKey.self] ?? .init()\n        }\n        set {\n            self.storage[UserRepositoryKey.self] = newValue\n        }\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension Request {\n    var users: UserRepository {\n        self.application.users.make!(self)\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.users.use { req in\n    DatabaseUserRepository(database: req.db)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future String to an Integer\nDESCRIPTION: This code snippet demonstrates how to use the `map` function on an `EventLoopFuture<String>` to transform the future string into a future integer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Map the future string to an integer\nlet futureInt = futureString.map { string in\n    print(string) // The actual String\n    return Int(string) ?? 0\n}\n\n/// We now have a future integer\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket - Vapor (Swift)\nDESCRIPTION: This snippet shows how to connect to a remote WebSocket endpoint using `WebSocket.connect`. It takes the WebSocket URL and an `EventLoop` as parameters.  The closure is executed when the connection is established, providing the WebSocket instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nWebSocket.connect(to: \"ws://echo.websocket.org\", on: eventLoop) { ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Field in a Model Swift\nDESCRIPTION: This code snippet demonstrates how to define a field in a Fluent model using the `@Field` property wrapper. The field represents a column in the database table. The `key` parameter specifies the name of the column.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 行星名\n    @Field(key: \"name\")\n    var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Using FileMiddleware in Xcode Project in Vapor\nDESCRIPTION: This code snippet demonstrates the usage of `FileMiddleware` within an Xcode project, such as an iOS app.  It initializes the middleware with the bundle and public directory and uses Folder References to maintain folder structure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet file = try FileMiddleware(bundle: .main, publicDirectory: \"Public\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Schema in Fluent (Swift)\nDESCRIPTION: This code shows how to completely remove a table schema from the database. It uses the delete() method after specifying the table name via schema(). It represents a destructive operation and permanently removes the table and its associated data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// An example schema deletion.\ndatabase.schema(\"planets\").delete()\n```\n\n----------------------------------------\n\nTITLE: Deploying to Heroku\nDESCRIPTION: Deploys the application to Heroku by pushing the code to the Heroku Git remote. This triggers the build process on Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push heroku main\n```\n\n----------------------------------------\n\nTITLE: Setting a Parent Relationship ID in Fluent\nDESCRIPTION: This code snippet illustrates how to set the ID of a parent relationship in Fluent. It accesses the `$star` property (created by the `@Parent` wrapper) and assigns the `id` of the `sun` object to it. This establishes the relationship between the `Planet` and `Star` models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// 设置 parent 关系的 id 字段\nearth.$star.id = sun.id\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with TLS Swift\nDESCRIPTION: Configures APNS using TLS authentication.  This requires specifying the paths to the private key, the PEM file, and an optional password. It allows for certificate-based authentication with APNS.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nauthenticationMethod: .tls(\n    privateKeyPath: <#path to private key#>,\n    pemPath: <#path to pem file#>,\n    pemPassword: <#optional pem password#>\n)\n```\n\n----------------------------------------\n\nTITLE: Log Out User in Vapor (Swift)\nDESCRIPTION: This code demonstrates how to unauthenticate a user in Vapor using req.auth.logout(_:).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nreq.auth.logout(User.self)\n```\n\n----------------------------------------\n\nTITLE: Manually Starting and Stopping the Vapor Server\nDESCRIPTION: This code snippet shows how to manually start, shutdown and wait for the shutdown of Vapor's server using `app.server`. This gives more control over server lifecycle.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// 启动 Vapor 服务器。\ntry app.server.start()\n// 请求服务器关闭。\napp.server.shutdown()\n// 等待服务器关闭。\ntry app.server.onShutdown.wait()\n```\n\n----------------------------------------\n\nTITLE: Logging during Application Boot (Swift)\nDESCRIPTION: This snippet illustrates how to use the application's logger for logging messages during the application's startup and configuration phase. It showcases logging a message related to setting up migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.logger.info(\"Setting up migrations...\")\napp.migrations.use(...)\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Closure Notification (Swift)\nDESCRIPTION: This code demonstrates how to be notified when the WebSocket connection is closed by the peer (client or server). It uses the `ws.onClose` future. The closure passed to `whenComplete` is executed when the connection is closed, allowing you to handle the closure event.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nws.onClose.whenComplete { result in\n    // Cierre exitoso o fallido.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Content struct in Swift\nDESCRIPTION: This code defines a simple `struct` called `Greeting` that conforms to the `Content` protocol.  Conforming to `Content` automatically conforms to `Codable` and provides additional utilities for working with Vapor's content API.  The `Greeting` struct has a single property, `hello`, which is a String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Greeting: Content {\n    var hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Environment (Swift)\nDESCRIPTION: Shows how to extend the `Environment` enum to define custom environment names. This allows creating specific environments like `staging` with tailored configurations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension Environment {\n    static var staging: Environment {\n        .custom(name: \"staging\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a String-Backed Enum in Database (Swift)\nDESCRIPTION: This code demonstrates how to create a native database enum with string representations using the Vapor framework. The `database.enum` method is used to define a new enum type named `planet_type`, and the `case` method adds possible values for the enum. Finally, the `create` method persists the enum definition to the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Un ejemplo de creación de enums.\ndatabase.enum(\"planet_type\")\n    .case(\"smallRocky\")\n    .case(\"gasGiant\")\n    .case(\"dwarf\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Define TodosController with CRUD Operations in Vapor (Swift)\nDESCRIPTION: This code defines a `TodosController` struct that conforms to the `RouteCollection` protocol in Vapor. It defines CRUD (Create, Read, Update, Delete) operations for a `Todo` model, including methods for indexing, creating, showing, updating, and deleting todos. It uses asynchronous operations and interacts with a database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.ja.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct TodosController: RouteCollection {\n    func boot(routes: RoutesBuilder) throws {\n        let todos = routes.grouped(\"todos\")\n        todos.get(use: index)\n        todos.post(use: create)\n\n        todos.group(\":id\") { todo in\n            todo.get(use: show)\n            todo.put(use: update)\n            todo.delete(use: delete)\n        }\n    }\n\n    func index(req: Request) async throws -> [Todo] {\n        try await Todo.query(on: req.db).all()\n    }\n\n    func create(req: Request) async throws -> Todo {\n        let todo = try req.content.decode(Todo.self)\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func show(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        return todo\n    }\n\n    func update(req: Request) async throws -> Todo {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        let updatedTodo = try req.content.decode(Todo.self)\n        todo.title = updatedTodo.title\n        try await todo.save(on: req.db)\n        return todo\n    }\n\n    func delete(req: Request) async throws -> HTTPStatus {\n        guard let todo = try await Todo.find(req.parameters.get(\"id\"), on: req.db) else {\n            throw Abort(.notFound)\n        }\n        try await todo.delete(on: req.db)\n        return .ok\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ZipCode Validator - Swift\nDESCRIPTION: This snippet shows how to use the newly created zip code validator in the application's validation setup. The validation is added for the `zipCode` field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"zipCode\", as: String.self, is: .zipCode)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with FileMiddleware in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to configure FileMiddleware in a Vapor application to serve static files from the `Public/` directory. It initializes `FileMiddleware` with the public directory path and adds it to the application's middleware stack. This enables the server to handle requests for files like images, stylesheets, and browser scripts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Dient bestanden op uit `Public/` directory\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations via CLI - Shell\nDESCRIPTION: This command shows how to run database migrations using the Vapor CLI. The `swift run App migrate` command will execute any pending migrations.  Requires the Vapor application to be built and executable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswift run App migrate\n```\n\n----------------------------------------\n\nTITLE: Deleting a Unique Constraint with Fluent in Swift\nDESCRIPTION: This snippet shows how to delete a unique constraint on the 'email' field using the `.deleteUnique()` method. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n.deleteUnique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Swift\nDESCRIPTION: Demonstrates how to update multiple records in the database using the `update()` method in conjunction with `set` and `filter`. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database)\n    .set(\\.$type, to: .dwarf)\n    .filter(\\.$name == \"Pluto\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncResponseEncodable in Swift\nDESCRIPTION: Shows how to implement `AsyncResponseEncodable` protocol to create a custom response type named `HTML`. The `encodeResponse` function returns a `Response` with the specified `Content-Type` header and HTML content. This example uses `async`/`await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: AsyncResponseEncodable {\n  public func encodeResponse(for request: Request) async throws -> Response {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return .init(status: .ok, headers: headers, body: .init(string: value))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ping Messages via WebSocket in Vapor\nDESCRIPTION: This code snippet demonstrates how to listen for ping messages on a WebSocket connection using Vapor. The `ws.onPing` method is used to register a closure that is executed whenever a ping message is received from the other peer. The closure receives the WebSocket connection (`ws`) as a parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nws.onPing { ws in \n    // Ping was received.\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model Exists Swift\nDESCRIPTION: This snippet demonstrates how to check if a Fluent model instance already exists in the database using the `$id.exists` property.  This property is mutable and will be false when initialized, and true after the model is saved or fetched from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nif planet.$id.exists {\n    // 数据库中已经存在该模型\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Optional Future with Abort Error\nDESCRIPTION: This snippet shows how to use the `unwrap(or:)` extension to unwrap an optional future. If the future resolves to `nil`, it will fail with the specified `Abort` error; otherwise, the value is passed to the `flatMap` closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nUser.find(id, on: db)\n    .unwrap(or: Abort(.notFound))\n    .flatMap \n{\n    user in\n    // User no opcional proporcionado al closure.\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request with JWT\nDESCRIPTION: This snippet shows an example of an HTTP request with a JWT included in the `Authorization` header as a Bearer token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nauthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXBvciIsImV4cCI6NjQwOTIyMTEyMDAsImFkbWluIjp0cnVlfQ.lS5lpwfRNSZDvpGQk6x5JI1g40gkYCOWqbc3J_ghowo\n```\n\n----------------------------------------\n\nTITLE: Verifying Heroku CLI Login\nDESCRIPTION: Verifies the currently logged-in user in the Heroku CLI. This confirms the user's identity and ensures that subsequent commands are executed under the correct account.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku auth:whoami\n```\n\n----------------------------------------\n\nTITLE: Swift Code for Looping\nDESCRIPTION: Swift code snippet to create a `SolarSystem` struct with a list of planets, intended for use with a Leaf template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct SolarSystem: Codable {\n    let planets = [\"Venus\", \"Earth\", \"Mars\"]\n}\n\nreturn req.view.render(\"solarSystem\", SolarSystem())\n```\n\n----------------------------------------\n\nTITLE: Adding age validation\nDESCRIPTION: Adds a validation rule to ensure that the `age` field is an integer greater than or equal to 13.  It uses the `.range` validator with a closed range starting at 13.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"age\", as: Int.self, is: .range(13...))\n```\n\n----------------------------------------\n\nTITLE: Manually logging in a User in Swift\nDESCRIPTION: This snippet shows how to manually log in a `User` using `req.auth.login(_:)`. This is useful for testing purposes or for situations where authentication is handled outside of Vapor's built-in mechanisms.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nreq.auth.login(User(name: \"Vapor\"))\n```\n\n----------------------------------------\n\nTITLE: Deleting a Field from a Schema (Swift)\nDESCRIPTION: This snippet demonstrates removing a field from a schema using `deleteField`.  The example shows the deletion of the \"age\" field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Deletes the field \"age\".\n.deleteField(\"age\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Application Identifier and Domain - Swift\nDESCRIPTION: This snippet configures the Google application identifier and G Suite domain name. This is necessary for verifying Google JWTs. The values are set on the `app.jwt.google.applicationIdentifier` and `app.jwt.google.gSuiteDomainName` properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\n// Konfiguriere den Bezeichner der Google-App und den Domänennamen.\napp.jwt.google.applicationIdentifier = \"...\"\napp.jwt.google.gSuiteDomainName = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Fetching All Models with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to retrieve all records of a specific model from the database using the `all()` method on a Fluent query builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera todos los planetas.\nlet planets = try await Planet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: Verifying Google JWT in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to retrieve and verify a Google JWT from the authorization header within a Vapor route. It uses the `req.jwt.google.verify()` method to verify the token. It shows both synchronous (using `map`) and asynchronous (using `async throws`) route handler versions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Haal en verifieer Google JWT uit de autorisatie header.\napp.get(\"google\") { req -> EventLoopFuture<HTTPStatus> in\n    req.jwt.google.verify().map { token in\n        print(token) // GoogleIdentityToken\n        return .ok\n    }\n}\n\n// of\n\napp.get(\"google\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.google.verify()\n    print(token) // GoogleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Children Relationships with Property Wrappers in Vapor 4 (Swift)\nDESCRIPTION: Shows how to define children relationships in Vapor 4 using the `@Children` property wrapper. It replaces the older method using the `children` function. The `for` parameter uses a key path to the related `@Parent` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\n+ @Children(for: \\.$server) \n+ var apps: [App]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Leaf view with Vapor\nDESCRIPTION: This snippet demonstrates how to render a Leaf view named `hello` from a Vapor route. It passes a dictionary containing the `name` variable to the view.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<View> in\n    return req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n\n// or\n\napp.get(\"hello\") { req async throws -> View in\n    return try await req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Routes Using Vapor CLI (Shell)\nDESCRIPTION: This snippet illustrates how to use the Vapor command-line interface (CLI) to display all available routes in a formatted table.  The command `swift run App routes` executes the application and prints the routes to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ swift run App routes\n+--------+----------------+\n| GET    | /              |\n+--------+----------------+\n| GET    | /hello         |\n+--------+----------------+\n| GET    | /todos         |\n+--------+----------------+\n| POST   | /todos         |\n+--------+----------------+\n| DELETE | /todos/:todoID |\n+--------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Connect to Heroku Git Remote\nDESCRIPTION: This command connects the local Git repository to the Heroku application, allowing code to be pushed to Heroku for deployment. Replace `your-apps-name-here` with the actual name of the Heroku application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ heroku git:remote -a your-apps-name-here\n```\n\n----------------------------------------\n\nTITLE: Route Registration with OPTIONS\nDESCRIPTION: Registers a route that responds to OPTIONS requests for `/foo/bar/baz` using the `on` method and specifying the HTTP method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op OPTIONS /foo/bar/baz\napp.on(.OPTIONS, \"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling FileMiddleware in Vapor\nDESCRIPTION: This snippet shows how to enable the `FileMiddleware` in the `configure.swift` file to serve static files from the `Public/` directory. It initializes the middleware with the public directory path and registers it for use by the application.  This allows the Vapor app to serve static assets like images and stylesheets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.ja.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Serves files from `Public/` directory\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported HTTP Versions in Vapor\nDESCRIPTION: This code snippet demonstrates how to configure the supported HTTP versions for the Vapor HTTP server using the `app.http.server.configuration.supportVersions` property. It demonstrates how to disable HTTP/1 support and only support HTTP/2.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Disable HTTP/1 support.\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Closing WebSocket with Async/Await - Vapor (Swift)\nDESCRIPTION: This snippet shows how to close a WebSocket connection using `async/await`. It uses the `await` keyword to wait for the close operation to complete.  The `try` keyword handles potential exceptions during the close.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.close()\n```\n\n----------------------------------------\n\nTITLE: Overriding the global JSON encoder - Swift\nDESCRIPTION: This code snippet shows how to override the global JSON encoder used by Vapor for the `.json` media type. It creates a new `JSONEncoder` that uses Unix timestamp dates and then sets it as the global encoder using `ContentConfiguration.global.use(encoder:encoder, for: .json)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// create a new JSON encoder that uses unix-timestamp dates\nlet encoder = JSONEncoder()\nencoder.dateEncodingStrategy = .secondsSince1970\n\n// override the global encoder used for the `.json` media type\nContentConfiguration.global.use(encoder: encoder, for: .json)\n```\n\n----------------------------------------\n\nTITLE: Scale Heroku Web Dynos\nDESCRIPTION: Scales the number of web dynos (web servers) running the application to 1.  This ensures the application can handle incoming requests. Requires a Heroku plan that allows scaling.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nheroku ps:scale web=1\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with ElseIf\nDESCRIPTION: Demonstrates the use of `#elseif` statements within a Leaf conditional block to handle multiple conditions. This allows for more complex branching logic based on different values of the `title` variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_8\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    Hello new user!\n#elseif(title == \"Welcome back!\"):\n    Hello old user\n#else:\n    Unexpected page!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncCommand Protocol (Swift)\nDESCRIPTION: This code snippet illustrates the basic implementation of the `AsyncCommand` protocol in Vapor. It includes defining a `Signature`, providing help text, and implementing the `run` method, which contains the command's logic.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct HelloCommand: AsyncCommand {\n    struct Signature: CommandSignature { }\n\n    var help: String {\n        \"Says hello\"\n    }\n\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context.console.print(\"Hello, world!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Email Validation to CreateUser - Swift\nDESCRIPTION: This snippet demonstrates how to add a validation rule to the `CreateUser` struct using Vapor's validation framework.  It extends `CreateUser` to conform to the `Validatable` protocol and uses the `validations` method to add a rule that checks if the `email` field is a valid email address.  The `email` field is expected to be a String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension CreateUser: Validatable {\n\n    static func validations(_ validations: inout Validations) {\n        validations.add(\"email\", as: String.self, is: .email)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Environment in Vapor (Swift)\nDESCRIPTION: Accesses the current environment using `app.environment` within the `configure(_:)` function and performs different configuration logic based on the environment. This snippet demonstrates a conditional database configuration based on whether the environment is production or not.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nswitch app.environment {\ncase .production:\n    app.databases.use(....)\ndefault:\n    app.databases.use(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in Application Startup (Swift)\nDESCRIPTION: This snippet shows how to log messages during application startup or configuration using the `Application`'s logger.  It's useful for logging migration setups or other initialization tasks. It requires access to the `Application` object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\napp.logger.info(\"Setting up migrations...\")\napp.migrations.use(...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Query Value in Swift\nDESCRIPTION: Shows how to retrieve a single query parameter value from the URL using subscript notation on `req.query`. In this example, the `name` parameter is accessed, and the result is an optional String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name: String? = req.query[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Serve Static Files with Bundle in Vapor\nDESCRIPTION: Demonstrates how to configure `FileMiddleware` when the server is included in an Xcode project (like an iOS app). Uses the bundle's resource path and sets the public directory name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet file = try FileMiddleware(bundle: .main, publicDirectory: \"Public\")\n```\n\n----------------------------------------\n\nTITLE: Aggregate Min Swift\nDESCRIPTION: This code shows an example of finding the planet with the lowest name alphabetically.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Laagste naam alfabetisch gesorteerd.\nPlanet.query(on: database).min(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Adding Enum String Validation\nDESCRIPTION: This snippet demonstrates how to validate a string against a set of allowed values, representing the valid cases of an enum.  It uses the `.in` validator to check if the 'favoriteColor' field is one of the allowed values ('red', 'blue', 'green'). `required` is set to false to allow the value to be optional.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String.self,\n    is: .in(\"red\", \"blue\",\"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Supervisor Environment Variable Configuration\nDESCRIPTION: This example shows how to export environment variables to a Vapor application using Supervisor. It defines the PORT and ANOTHERVALUE environment variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nenvironment=PORT=8123,ANOTHERVALUE=\"/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Session Driver with Specific DB Swift\nDESCRIPTION: This snippet shows how to configure the Fluent session driver to use a specific database identifier. This is useful when your application uses multiple databases. The database identifier must be configured in your Fluent setup.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.sessions.use(.fluent(.sqlite))\n```\n\n----------------------------------------\n\nTITLE: Adding Zip Code Validation\nDESCRIPTION: Adds the custom `zipCode` validator to the `validations` collection.  This will check if the `zipCode` field is a valid US zip code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\"zipCode\", as: String.self, is: .zipCode)\n```\n\n----------------------------------------\n\nTITLE: Counting Planets in Fluent\nDESCRIPTION: This Swift code snippet shows how to count the number of planets in the database using Fluent's query API. It uses the `count()` method on a query builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Number of planets in database. \nPlanet.query(on: database).count()\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination in Swift\nDESCRIPTION: This snippet demonstrates how to manually request a specific page using `PageRequest`. This allows developers to programmatically control pagination parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Voorbeeld van handmatige paginering.\n.paginate(PageRequest(page: 1, per: 2))\n```\n\n----------------------------------------\n\nTITLE: Specifying Port for Running Tests\nDESCRIPTION: Shows how to specify a custom port when using the `.running` testing method. It defaults to port 8080 if not specified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\napp.testing(method: .running(port: 8123)).test(...)\n```\n\n----------------------------------------\n\nTITLE: Adding ECDSA with SHA-256 signer (Swift)\nDESCRIPTION: This code demonstrates how to add an ECDSA signer with SHA-256 to your Vapor application's JWT configuration using an ECDSA public key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n// ECDSA toevoegen met SHA-256 ondertekenaar.\ntry app.jwt.signers.use(.es256(key: .public(pem: ecdsaPublicKey)))\n```\n\n----------------------------------------\n\nTITLE: Customizing Logging Provider\nDESCRIPTION: This code demonstrates how to customize the logging provider in a Vapor application. It overrides the default provider with a custom StreamLogHandler that outputs to standard output. This allows for using any SwiftLog compatible backend.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport Logging\n\nLoggingSystem.bootstrap { label in\n    StreamLogHandler.standardOutput(label: label)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Sessions - Swift\nDESCRIPTION: Configures the application to use Fluent for session storage. This requires Fluent to be configured and connected to a database. It shows how to use the default database and a specific SQLite database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\napp.sessions.use(.fluent)\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.sessions.use(.fluent(.sqlite))\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration File Example\nDESCRIPTION: This configuration file defines how Supervisor should manage a Vapor application.  It specifies the command to run, the working directory, the user to run as, and log file locations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[program:hello]\ncommand=/home/vapor/hello/.build/release/App serve --env production\ndirectory=/home/vapor/hello/\nuser=vapor\nstdout_logfile=/var/log/supervisor/%(program_name)s-stdout.log\nstderr_logfile=/var/log/supervisor/%(program_name)s-stderr.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Application Identifier - Swift\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft application identifier for JWT verification in a Vapor application using Swift. It sets the `app.jwt.microsoft.applicationIdentifier` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Configurar el identificador de la aplicación de Microsoft.\napp.jwt.microsoft.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cookie - Swift\nDESCRIPTION: Configures the session cookie's name and factory. The cookie name is set to \"foo\", and a custom cookie factory is defined to create cookies with the session ID and secure flag set to true. The middleware use is called after the configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Cambia el nombre de la cookie a \"foo\".\napp.sessions.configuration.cookieName = \"foo\"\n\n// Configura la creación del valor de la cookie.\napp.sessions.configuration.cookieFactory = { sessionID in\n    .init(string: sessionID.string, isSecure: true)\n}\n\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Verify Swift Installation\nDESCRIPTION: This snippet checks the Swift installation by printing the Swift version. It expects Swift to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor Project\nDESCRIPTION: Uses the Vapor Toolbox to create a new Vapor project named \"HelloWorld\". The `-n` flag indicates that the basic template should be used and answers all questions with \"no\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nvapor new HelloWorld -n\n```\n\n----------------------------------------\n\nTITLE: Update Swift Tools Version in Package.swift\nDESCRIPTION: This snippet updates the Swift tools version in the Package.swift file to 5.5 to enable async/await support.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.5\nimport PackageDescription\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Registering a Controller in Vapor\nDESCRIPTION: This code snippet shows how to register a `RouteCollection`, specifically a `TodosController`, within the Vapor application's routes configuration file (`routes.swift`). This registration makes the controller's defined routes accessible.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.register(collection: TodosController())\n```\n\n----------------------------------------\n\nTITLE: Integer Range Validation - Swift\nDESCRIPTION: This snippet shows how to validate that an integer value falls within a specified range. In this case, the `age` field must be greater than or equal to 13.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"age\", as: Int.self, is: .range(13...))\n```\n\n----------------------------------------\n\nTITLE: Composing Authenticator Route Group in Vapor (Swift)\nDESCRIPTION: This code demonstrates how to chain authenticators for different user types (Admin and User) in a Vapor application. It adds both AdminAuthenticator and UserAuthenticator to a route group and checks for authentication in the route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.grouped(AdminAuthenticator())\n    .grouped(UserAuthenticator())\n    .get(\"secure\") \n{ req in\n    guard req.auth.has(Admin.self) || req.auth.has(User.self) else {\n        throw Abort(.unauthorized)\n    }\n    // Do something.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Validating Headers\nDESCRIPTION: This code snippet demonstrates how to access headers from the Request object using `req.headers`. It specifically checks for the `Content-Type` header and validates if it's JSON before returning a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"json\") { req -> String in\n    guard let contentType = req.headers.contentType, contentType == .json else {\n        throw Abort(.badRequest)\n    }\n    return \"JSON\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unique Constraint on a Child Model (Swift)\nDESCRIPTION: Demonstrates how to define a unique constraint in the database schema for the child model to enforce the one-to-one relationship. This prevents multiple child records from being associated with the same parent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(Governor.schema)\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"planet_id\", .uuid, .required, .references(\"planets\", \"id\"))\n    // Ejemplo de una restricción única\n    .unique(on: \"planet_id\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Defining Siblings Relationships with Property Wrappers in Vapor 4 (Swift)\nDESCRIPTION: Illustrates how to define siblings relationships in Vapor 4 using the `@Siblings` property wrapper. It replaces the older method using the `siblings` function. The `through`, `from`, and `to` parameters specify the pivot model and key paths to the related parent properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\n+ @Siblings(through: Permission.self, from: \\.$user, to: \\.$company) \n+ var companies: [Company]\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification from a Vapor Route\nDESCRIPTION: This snippet demonstrates how to send a push notification from within a Vapor route. It shows the basic structure of a route handler using `app.get` and calls `req.apns.client.send(...)` to send the notification. The actual `send` parameters are omitted for brevity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Invia una notifica push.\napp.get(\"test-push\") { req async throws -> HTTPStatus in\n    try await req.apns.client.send(...) \n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: User Create Content Swift\nDESCRIPTION: This code defines a `User.Create` struct conforming to `Content` to represent the data required to create a new user in Vapor. It includes properties for name, email, password, and confirmPassword.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nextension User {\n    struct Create: Content {\n        var name: String\n        var email: String\n        var password: String\n        var confirmPassword: String\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Initializes a Git repository in the current directory. This is necessary to track changes to the application code and deploy it to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox using Homebrew\nDESCRIPTION: This command uses Homebrew to install the Vapor Toolbox, which provides helpful command-line tools for Vapor development, including project creation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.nl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Run Vapor Application\nDESCRIPTION: This command builds and runs the Vapor application, making it accessible on all network interfaces (0.0.0.0) on port 8080.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --hostname 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with Specified Environment via Command Line (Swift)\nDESCRIPTION: This command shows how to start a Vapor application in a specific environment using the `--env` flag. It allows you to easily switch between different configurations (e.g., production, development) without modifying the code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve --env production\n```\n\n----------------------------------------\n\nTITLE: Using HTML as Response Type in Vapor Route in Swift\nDESCRIPTION: This code demonstrates how to use the `HTML` struct as a response type in a Vapor route.  It returns an `HTML` instance, which will be automatically encoded as an HTTP response with the `Content-Type` set to `text/html`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\napp.get { _ in\n  HTML(value: \"\"\"\n  <html>\n    <body>\n      <h1>Hello, World!</h1>\n    </body>\n  </html>\n  \"\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Join Query Swift\nDESCRIPTION: This snippet retrieves all planets with a star named 'Sun' by joining the Planet and Star models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Haalt alle planeten met een ster genaamd Zon op.\nPlanet.query(on: database)\n    .join(Star.self, on: \\Planet.$star.$id == \\Star.$id)\n    .filter(Star.self, \\.$name == \"Sun\")\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/2 Support in Vapor\nDESCRIPTION: This code snippet demonstrates how to configure the Vapor HTTP server to support only HTTP/2. By setting the `supportVersions` property of the server's configuration, you can specify which HTTP versions the server will accept.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// 仅支持 HTTP/2\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Set Swift Tools Version in Package.swift\nDESCRIPTION: This snippet shows how to set the Swift tools version to 5.5 in the Package.swift file. This is a prerequisite for using async/await in a Vapor project. Ensure the `// swift-tools-version` is set to 5.5.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.5\nimport PackageDescription\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponseEncodable in Swift\nDESCRIPTION: Shows how to implement `ResponseEncodable` protocol to create a custom response type named `HTML`. The `encodeResponse` function returns a future that resolves to a `Response` with the specified `Content-Type` header and HTML content. This example uses `EventLoopFuture`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: ResponseEncodable {\n  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return request.eventLoop.makeSucceededFuture(.init(\n      status: .ok, headers: headers, body: .init(string: value)\n    ))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP request with Bearer Authentication\nDESCRIPTION: This example shows an HTTP request using Bearer Authentication. The `Authorization` header contains the token, prefixed with `Bearer `. In this case, the token is `foo`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nAuthorization: Bearer foo\n```\n\n----------------------------------------\n\nTITLE: Mark Run Target as Executable\nDESCRIPTION: This code snippet shows how to mark the `Run` target as an executable target in the Package.swift file. This is required for running the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n```\n\n----------------------------------------\n\nTITLE: Defining Soft Delete Timestamp in Swift\nDESCRIPTION: Shows how to implement soft deletion by adding a `@Timestamp` with the `.delete` trigger to a model. Soft-deleted models remain in the database but are excluded from regular queries.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Wanneer deze planeet werd verwijderd.\n    @Timestamp(key: \"deleted_at\", on: .delete)\n    var deletedAt: Date?\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Example with Query Parameter\nDESCRIPTION: This is an example of HTTP GET request with a query parameter.  The URL includes a query string `?name=Vapor`, which sets the `name` parameter to `Vapor`. The `content-length` is 0 as no body is attached.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /hello?name=Vapor HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Send Test Request in Swift\nDESCRIPTION: This snippet demonstrates how to send a test request to your Vapor application using the `test` method. It sends a GET request to the \"hello\" endpoint and uses `XCTAssertEqual` to verify the response status and body.  The `res` parameter provides access to the HTTP response for assertions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry app.test(.GET, \"hello\") { res in\n    XCTAssertEqual(res.status, .ok)\n    XCTAssertEqual(res.body.string, \"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Integer Range\nDESCRIPTION: Adds a validation to ensure that the `age` field is within the range of 13 or greater (13...). This uses the `.range` validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"age\", as: Int.self, is: .range(13...))\n```\n\n----------------------------------------\n\nTITLE: Basic Leaf Tag Usage\nDESCRIPTION: Demonstrates the basic syntax of a Leaf tag, including the token, name, and parameter list. This example shows how to display the number of users.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_0\n\nLANGUAGE: leaf\nCODE:\n```\nThere are #count(users) users.\n```\n\n----------------------------------------\n\nTITLE: Handling Optional with Async/Await and Abort Error\nDESCRIPTION: This snippet illustrates how to handle optionals in `async`/`await` code using `guard let` and throw an `Abort` error if the optional is `nil`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = try await User.find(id, on: db) {\n    throw Abort(.notFound)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Login Request\nDESCRIPTION: Illustrates an example HTTP request to log in a user using Basic Authentication. The `Authorization` header contains the base64 encoded username and password. The user must be a created User in the system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /login HTTP/1.1\nAuthorization: Basic dGVzdEB2YXBvci5jb2RlczpzZWNyZXQ0Mg==\n\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Decompression in Vapor\nDESCRIPTION: This code snippet enables HTTP request decompression using gzip for the Vapor HTTP server, allowing the server to handle compressed requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Habilite la descompresión de solicitudes HTTP.\napp.http.server.configuration.requestDecompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Client in Vapor\nDESCRIPTION: This snippet demonstrates how to connect to a remote WebSocket endpoint using `WebSocket.connect`. It takes the WebSocket URL and an `EventLoop` as input and executes a closure upon successful connection.  The newly established WebSocket is passed to the closure and printed to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nWebSocket.connect(to: \"ws://echo.websocket.org\", on: eventLoop) { ws in\n    // WebSocket connesso.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP request with Basic Authentication\nDESCRIPTION: This example shows a HTTP request with Basic Authentication.  The `Authorization` header contains the username and password, separated by a colon, base64 encoded, and prefixed with `Basic `.  In this case, the username is `test` and the password is `secret`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nAuthorization: Basic dGVzdDpzZWNyZXQ=\n```\n\n----------------------------------------\n\nTITLE: Simple Leaf Template\nDESCRIPTION: This snippet shows a basic Leaf template that displays a greeting with a dynamic name. The `#()` syntax is used to insert the value of the `name` variable into the template. This template will be rendered by the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.nl.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\nHello, #(name)!\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Query with ILIKE (PostgreSQL)\nDESCRIPTION: This snippet demonstrates how to use the `.custom` case to execute a database-specific query, specifically using the `ILIKE` operator in PostgreSQL. It checks if the underlying database is PostgreSQL before applying the custom filter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport FluentPostgresDriver\n\nlet query = Planet.query(on: req.db)\nif req.db is PostgresDatabase {\n    // ILIKE supported.\n    query.filter(\\.$name, .custom(\"ILIKE\"), \"earth\")\n} else {\n    // ILIKE not supported.\n    query.group(.or) { or in\n        or.filter(\\.$name == \"earth\").filter(\\.$name == \"Earth\")\n    }\n}\nquery.all()\n```\n\n----------------------------------------\n\nTITLE: Initializing an RSA Key with a Public PEM (Swift)\nDESCRIPTION: This snippet initializes an RSA key from a public key in PEM format. It demonstrates how to load the PEM-encoded public key and create an `RSAKey` object using the `.public(pem:)` initializer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nlet rsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0cOtPjzABybjzm3fCg1aCYwnx\nPmjXpbCkecAWLj/CcDWEcuTZkYDiSG0zgglbbbhcV0vJQDWSv60tnlA3cjSYutAv\n7FPo5Cq8FkvrdDzeacwRSxYuIq1LtYnd6I30qNaNthntjvbqyMmBulJ1mzLI+Xg/\naX4rbSL49Z3dAQn8vQIDAQAB\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Initialiseer een RSA sleutel met publieke pem.\nlet key = RSAKey.public(pem: rsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncResponseEncodable - Swift\nDESCRIPTION: This example shows how to implement `AsyncResponseEncodable` on a custom type, `HTML`, for use with `async`/`await`. The `encodeResponse` function asynchronously creates a `Response` object with the HTML content and sets the `Content-Type` header to `text/html`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: AsyncResponseEncodable {\n  public func encodeResponse(for request: Request) async throws -> Response {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return .init(status: .ok, headers: headers, body: .init(string: value))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Route Groups in Vapor\nDESCRIPTION: This snippet shows how to add middleware to specific route groups. The `app.grouped()` function is used to create a group with the specified middleware. All routes defined within this group will be processed by the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet group = app.grouped(MyMiddleware())\ngroup.get(\"foo\") { req in\n\t// This request has passed through MyMiddleware.\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Statements\nDESCRIPTION: Illustrates conditional statements using the `#if` tag in Leaf. It covers basic comparisons and the use of `#else` and `#elseif` for multiple conditions. Demonstrates usage with arithmetic expressions and other Leaf tags.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\n#if(1 + 1 == 2):\n    Hello!\n#endif\n\n#if(index % 2 == 0):\n    This is even index.\n#else:\n    This is odd index.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Route Returning JWT without authenticator (Swift)\nDESCRIPTION: This code demonstrates how to create a login route that returns a signed JWT without using authenticator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_51\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { req -> ClientTokenResponse in\n    // 验证为用户提供的凭据\n    // 获取提供的用户的 userId\n    let payload = try SessionToken(userId: userId)\n    return ClientTokenResponse(token: try req.jwt.sign(payload))\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password with Application\nDESCRIPTION: This code snippet demonstrates how to hash a password using the `app.password.hash` method. The input is a plain text password, and the output is a hashed password string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet digest = try app.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Rollback Heroku Database Migration\nDESCRIPTION: This command rolls back the database migrations on Heroku to a previous state.  It is executed remotely using `heroku run` in the production environment. `--all` ensures all migrations are reverted and `--yes` bypasses the confirmation prompt.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --revert --all --yes --env production\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Body Size for Vapor Application\nDESCRIPTION: This snippet shows how to configure the default maximum body size for requests in a Vapor application. This sets a limit on how much data will be collected in memory before being processed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Aumenta el límite de recopilación de la transmisión de Body hasta 500kb\napp.routes.defaultMaxBodySize = \"500kb\"\n```\n\n----------------------------------------\n\nTITLE: Prompting User Input in a Command\nDESCRIPTION: This Swift code shows how to prompt the user for input using `context.console.ask` and print a personalized greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name = context.console.ask(\"What is your \\(\"name\", color: .blue)?\")\ncontext.console.print(\"Hello, \\(name) 👋\")\n```\n\n----------------------------------------\n\nTITLE: Defining Homogeneous Dictionary Field (Swift)\nDESCRIPTION: This Swift code shows how to define a field with a homogeneous dictionary data type, [String: Int], using Fluent. The field named \"numbers\" uses the `.dictionary(of: .int)` data type and is marked as required. Fluent SQL database connectors stores dictionary data types as JSON columns.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"numbers\", .dictionary(of: .int), .required)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL with Connection String\nDESCRIPTION: This snippet demonstrates configuring MySQL using a connection string.  Replace `<connection string>` with the actual connection string for your MySQL database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.databases.use(.mysql(url: \"<connection string>\"), as: .mysql)\n```\n\n----------------------------------------\n\nTITLE: Manual Authentication Logout Swift\nDESCRIPTION: This code shows how to log out a user in Vapor using `req.auth.logout(_:)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nreq.auth.logout(User.self)\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key with Key Identifier - Swift\nDESCRIPTION: This snippet shows how to add HMAC keys with specific key identifiers (`kid`) to the JWT key collection. This allows for differentiating between multiple keys when signing or verifying JWTs.  It demonstrates adding two HMAC keys with different `kid` values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\n// HMAC mit SHA-256 Unterzeichner namens \"a\" hinzufügen.\nawait app.jwt.keys.addHMAC(key: \"foo\", digestAlgorithm: .sha256, kid: \"a\")\n// HMAC mit SHA-256 Unterzeichner namens \"b\" hinzufügen.\nawait app.jwt.keys.addHMAC(key: \"bar\", digestAlgorithm: .sha256, kid: \"b\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Siblings Relation (Swift)\nDESCRIPTION: This snippet shows how to define a siblings relation using the `@Siblings` property wrapper.  It requires the pivot model type and key paths to the parent relations in the pivot.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Example of a siblings relation.\n    @Siblings(through: PlanetTag.self, from: \\.$planet, to: \\.$tag)\n    public var tags: [Tag]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Aliases in Swift\nDESCRIPTION: This snippet demonstrates how to define model aliases in Swift using the `ModelAlias` protocol. Model aliases allow you to use the same model multiple times in a query.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Voorbeeld van model aliassen.\nfinal class HomeTeam: ModelAlias {\n    static let name = \"home_teams\"\n    let model = Team()\n}\nfinal class AwayTeam: ModelAlias {\n    static let name = \"away_teams\"\n    let model = Team()\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variable via Process (Swift)\nDESCRIPTION: Illustrates accessing an environment variable dynamically through the `Environment.process` property in Vapor. This approach also returns an optional String if the variable is not set.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet foo = Environment.process.FOO\nprint(foo) // String?\n\n```\n\n----------------------------------------\n\nTITLE: Static Route Components (Swift)\nDESCRIPTION: Defines a GET route with static path components.  It will only respond to the exact path /foo/bar/baz.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /foo/bar/baz\napp.get(\"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Add XCTVapor dependency to Package.swift (Swift)\nDESCRIPTION: This snippet demonstrates how to add XCTVapor as a dependency to the test target in your Package.swift file. This ensures that your test suite can access the XCTVapor testing tools.  It requires defining a test target that depends on both your main application target and the XCTVapor product from the vapor package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\")\n    ],\n    targets: [\n        ...\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Download and Extract Swift Toolchain\nDESCRIPTION: This snippet downloads the Swift 5.7.3 toolchain for Ubuntu 22.04 and extracts the archive. Replace the download link with the appropriate version if needed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nwget https://download.swift.org/swift-5.7.3-release/ubuntu2204/swift-5.7.3-RELEASE/swift-5.7.3-RELEASE-ubuntu22.04.tar.gz\ntar xzf swift-5.7.3-RELEASE-ubuntu22.04.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Environment (Swift)\nDESCRIPTION: This snippet demonstrates how to create a custom environment in Vapor by extending the `Environment` enum. This allows you to define new environments with specific configurations for your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nextension Environment {\n    static var staging: Environment {\n        .custom(name: \"staging\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Login to DigitalOcean Server\nDESCRIPTION: This command is used to establish a secure shell connection to the DigitalOcean server as the root user. Replace `your_server_ip` with the actual IP address of the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh root@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Nginx Serving Static Files\nDESCRIPTION: This snippet shows an Nginx configuration to serve static files directly and fallback to Vapor for dynamic requests.  The `try_files` directive attempts to serve the requested URI as a file and if not found, proxies the request to the `@proxy` location.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n\t...\n\n\t# Serve all public/static files via nginx and then fallback to Vapor for the rest\n\tlocation / {\n\t\ttry_files $uri @proxy;\n\t}\n\n\tlocation @proxy {\n\t\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Override Port via Command Line\nDESCRIPTION: This snippet demonstrates how to override the configured port for the Vapor HTTP server using the `--port` or `-p` flag when running the `serve` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Override configured port.\nswift run App serve --port 1337\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag with Default Formatting\nDESCRIPTION: Demonstrates using the `#date` tag to format a `Date` object. When no format is provided, it defaults to ISO8601 format. The 'now' variable is expected to be a `Date` object passed in from the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_20\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #date(now)\n```\n\n----------------------------------------\n\nTITLE: Start Application and Database Services\nDESCRIPTION: This command explicitly starts both the application and database services. This ensures that logs for both services are displayed in the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up app db\n```\n\n----------------------------------------\n\nTITLE: Implementing JobEventDelegate in Swift\nDESCRIPTION: This code snippet demonstrates how to implement the `JobEventDelegate` protocol in Swift. It defines a struct `MyEventDelegate` that conforms to the protocol and implements the required methods: `dispatched`, `didDequeue`, `success`, and `error`. Each method receives job-related data and an `EventLoop`, and returns an `EventLoopFuture<Void>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyEventDelegate: JobEventDelegate {\n    /// 当 job 从路由中分派给队列工作者时调用\n    func dispatched(job: JobEventData, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// 当 job 放入处理队列并开始工作时调用\n    func didDequeue(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// 当 job 完成处理并从队列中删除时调用\n    func success(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// 当 job 完成处理但出现错误时调用\n    func error(jobId: String, error: Error, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job - Swift\nDESCRIPTION: This snippet demonstrates how to model a Job object using the Job protocol. It defines a struct for the job's payload and implements the dequeue and error methods for processing and error handling.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor \nimport Foundation \nimport Queues \n\nstruct Email: Codable {\n    let to: String\n    let message: String\n}\n\nstruct EmailJob: Job {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) -> EventLoopFuture<Void> {\n        // This is where you would send the email\n        return context.eventLoop.future()\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) -> EventLoopFuture<Void> {\n        // If you don't want to handle errors you can simply return a future. You can also omit this function entirely. \n        return context.eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Platform Version in Package.swift\nDESCRIPTION: This snippet sets the platform version to macOS 12 in the Package.swift file, required for async/await support.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nplatforms: [\n   .macOS(.v12)\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Server in Vapor\nDESCRIPTION: This code snippet demonstrates how to implement a custom server for Vapor by conforming to the `Server` protocol and registering it with the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nfinal class MyServer: Server {\n\t...\n}\n\napp.servers.use { app in\n\tMyServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Run Heroku Database Migration\nDESCRIPTION: This command runs the database migrations on Heroku. It is executed remotely using `heroku run` in the production environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --env production\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Command Line\nDESCRIPTION: This command shows how to set the log level using the `--log` parameter when running the Vapor application. This overrides the default log level and allows for more detailed logging during development or debugging.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nswift run App serve --log debug\n```\n\n----------------------------------------\n\nTITLE: Set Server Name Header in Vapor (Swift)\nDESCRIPTION: This snippet sets the `Server` header for outgoing HTTP responses in the Vapor HTTP server. It configures the `serverName` property to \"vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Voeg \"Server: vapor\" header toe aan antwoorden.\napp.http.server.configuration.serverName = \"vapor\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job from a Command Context\nDESCRIPTION: This code snippet shows how to dispatch a job from a context where the `Request` object is not available, such as within a `Command`. It uses the `context.application.queues.queue.dispatch()` method to enqueue the `EmailJob` with a specific payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\")\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define JWT Payload in Swift\nDESCRIPTION: This code snippet defines a `SessionToken` struct that conforms to `Content`, `Authenticatable`, and `JWTPayload` protocols. It includes properties for expiration time, user ID, and methods for initialization and verification. The `expirationTime` constant determines the token's validity duration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\n// Esempio di payload JWT.\nstruct SessionToken: Content, Authenticatable, JWTPayload {\n\n    // Costanti\n    let expirationTime: TimeInterval = 60 * 15\n    \n    // Dati del payload\n    var expiration: ExpirationClaim\n    var userId: UUID\n    \n    init(userId: UUID) {\n        self.userId = userId\n        self.expiration = ExpirationClaim(value: Date().addingTimeInterval(expirationTime))\n    }\n    \n    init(with user: User) throws {\n        self.userId = try user.requireID()\n        self.expiration = ExpirationClaim(value: Date().addingTimeInterval(expirationTime))\n    }\n\n    func verify(using signer: JWTSigner) throws {\n        try expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command (Swift)\nDESCRIPTION: This code snippet demonstrates how to define a custom Vapor command by creating a struct that conforms to the `AsyncCommand` protocol. This allows you to create custom command-line functions within your Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct HelloCommand: AsyncCommand {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ping Messages - Vapor (Swift)\nDESCRIPTION: This snippet shows how to handle incoming Ping messages using the `onPing` callback. This allows reacting when a Ping message is received from the peer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nws.onPing { ws in \n    // Ping was received.\n}\n```\n\n----------------------------------------\n\nTITLE: Update Field Swift\nDESCRIPTION: This snippet shows how to update the data type of an existing field. It updates the field \"age\" to the `double` data type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.updateField(\"age\", .double)\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor (Swift)\nDESCRIPTION: This Swift code shows how to access an environment variable that was set in the Supervisor configuration using `Environment.get`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Copy and edit .env.development file - Shell\nDESCRIPTION: This snippet demonstrates how to copy the `.env` template file to `.env.development` and open it in the vim editor.  This facilitates setting environment specific values for the development environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncp .env .env.development\nvim .env.development\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Leaf Template (Leaf)\nDESCRIPTION: Creates a basic Leaf template that displays a greeting message with a dynamic name. The `#(name)` syntax is used to inject the value of the `name` variable into the template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.ja.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\nHello, #(name)!\n```\n\n----------------------------------------\n\nTITLE: Group routes with a path prefix using closure syntax\nDESCRIPTION: This snippet shows how to group routes with a path prefix using the `group` method and a closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { req in\n        ...\n    }\n    // POST /users\n    users.post { req in\n        ...\n    }\n    // GET /users/:id\n    users.get(\":id\") { req in\n        let id = req.parameters.get(\"id\")!\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order Example in Vapor\nDESCRIPTION: Demonstrates the execution order of middleware. Global middleware is executed before route-specific middleware for incoming requests, and the order is reversed for outgoing responses. This code defines two global middleware (A and B) and one route-specific middleware (C).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(MiddlewareA())\napp.middleware.use(MiddlewareB())\n\napp.group(MiddlewareC()) {\n\t$0.get(\"hello\") { req in\n\t\t\"Hello, middleware.\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure of a Swift Package\nDESCRIPTION: This code snippet illustrates the typical folder structure of a Swift package, including the Sources directory for application code, the Tests directory for test code, and the Package.swift file at the root.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.de.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Sources\n│   └── App\n│       └── (Source code)\n├── Tests\n│   └── AppTests\n└── Package.swift\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for JWT Signing\nDESCRIPTION: This snippet displays an HTTP POST request to the /login endpoint, triggering the JWT signing and return functionality. This route will create a new JWT.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /login HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema Field for an Optional Parent Relationship in Fluent\nDESCRIPTION: This example shows how to define a schema field for an optional parent relationship. The `.required` constraint is omitted, indicating that the relationship is not mandatory. The `.references` constraint can still be used to ensure referential integrity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .references(\"star\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Ping (Swift)\nDESCRIPTION: This snippet demonstrates listening for a ping event on the WebSocket.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nws.onPing { ws in \n    // Ping is ontvangen.\n}\n```\n\n----------------------------------------\n\nTITLE: Prepending Middleware in Vapor (Swift)\nDESCRIPTION: Demonstrates how to prepend middleware to the beginning of the middleware stack using `at: .beginning`. This is useful for inserting middleware before any automatically added middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(someMiddleware, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Setting swift-tools-version in Package.swift\nDESCRIPTION: This code snippet demonstrates how to set the swift-tools-version to 5.5 in the Package.swift file. This is a necessary step when migrating to async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.5\nimport PackageDescription\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Example without Query Parameter\nDESCRIPTION: This is an example of HTTP GET request without any query parameters. The `content-length` is 0 as there is no body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /hello HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Handling Pong Messages - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to handle incoming Pong messages using the `onPong` callback. This allows reacting when a Pong message is received from the peer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nws.onPong { ws in\n    // Pong was received.\n}\n```\n\n----------------------------------------\n\nTITLE: Send a complex test request (Swift)\nDESCRIPTION: This snippet demonstrates sending a more complex POST request with a body, beforeRequest and afterResponse closures. `beforeRequest` allows modifying the request, in this case encoding content. The `afterResponse` closure allows verifying the response including decoding the content and asserting values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.it.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.test(.POST, \"promemoria\", beforeRequest: { req in\n\ttry req.content.encode([\"titolo\": \"Test\"])\n}, afterResponse: { res in\n    XCTAssertEqual(res.status, .created)\n    let todo = try res.content.decode(Todo.self)\n    XCTAssertEqual(todo.title, \"Test\")\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Setting a Relationship Value in Fluent\nDESCRIPTION: This code demonstrates how to manually set the value of a relationship using the `value` property. This is useful if you already have the related model in memory and want to associate it without making a database query.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nplanet.$star.value = star\n```\n\n----------------------------------------\n\nTITLE: Scale the Application Service\nDESCRIPTION: This command scales the application service to a specific number of replicas. This is used to test how well the application handles scaling.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ndocker service scale test_app=5\n```\n\n----------------------------------------\n\nTITLE: Generación de Rango de Códigos HOTP en Vapor (Swift)\nDESCRIPTION: Este snippet muestra cómo generar un rango de códigos HOTP, permitiendo un margen de error en el contador. Esto es útil para compensar desincronizaciones del contador. Requiere la importación del módulo Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\n\n// Generar un rango de contadores correctos.\nlet codes = hotp.generate(counter: 25, range: 2)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Identifier Swift\nDESCRIPTION: This code snippet shows how to define a custom identifier for a Fluent model using the `@ID(custom:)` property wrapper. It allows you to specify a custom key and type for the identifier, such as an `Int` with a custom key like 'foo'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 行星的唯一标识符。\n    @ID(custom: \"foo\")\n    var id: Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Enum String Validation - Swift\nDESCRIPTION: This snippet demonstrates how to validate a string value against a set of allowed enum values.  The `favoriteColor` field must be one of \"red\", \"blue\", or \"green\". The `required: false` parameter indicates that the validation will not fail if the value is missing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"favoriteColor\", as: String.self, is: .in(\"red\", \"blue\", \"green\"), required: false)\n```\n\n----------------------------------------\n\nTITLE: HTTP Request to Create Star\nDESCRIPTION: This snippet demonstrates an HTTP request used to create a new star referencing a previously created galaxy.  The `content-type` header is set to `application/json` and the body contains the star's name and the galaxy's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nPOST /stars HTTP/1.1\ncontent-length: 36\ncontent-type: application/json\n\n{\n    \"name\": \"Sun\",\n    \"galaxy\": {\n        \"id\": ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger in Vapor\nDESCRIPTION: This snippet demonstrates how to create a custom logger instance with a specified label. While this allows for logging in situations where an `Application` or `Request` is not available, it lacks the automatic metadata provided by the built-in loggers. The `Logger` is initialized with a label to identify its source.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet logger = Logger(label: \"dev.logger.my\")\nlogger.info(...)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Vapor Project on Linux\nDESCRIPTION: Builds and runs the Vapor project using the Swift command-line tool.  This will compile the code, fetch dependencies and start the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Change directory to Vapor project\nDESCRIPTION: This command changes the current directory to the newly created 'HelloWorld' Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncd HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Displaying Heroku Configuration\nDESCRIPTION: Displays the configuration variables for the Heroku application. This includes the DATABASE_URL which contains the credentials for the PostgreSQL database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nheroku config\n```\n\n----------------------------------------\n\nTITLE: Using Data in Leaf Templates\nDESCRIPTION: Shows how to access data passed from Swift within a Leaf template.  This example demonstrates displaying a title and iterating through a list of numbers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_4\n\nLANGUAGE: leaf\nCODE:\n```\n<h1>#(title)</h1>\n#for(number in numbers):\n    <p>#(number)</p>\n#endfor\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Models with Attributes to Siblings Relationship (Swift)\nDESCRIPTION: Demonstrates attaching multiple models to a siblings relationship and populating additional attributes on the pivot model for each relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Añadir varios modelos con atributos a la relación.\nlet volcanic: Tag = ..., oceanic: Tag = ...\ntry await earth.$tags.attach([volcanic, oceanic], on: database) { pivot in\n    pivot.comments = \"This planet has a tag named \\(pivot.$tag.name).\";\n    pivot.status = .pending\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Static File Handling\nDESCRIPTION: This Nginx configuration snippet demonstrates how to configure Nginx to serve static files directly and fallback to the Vapor application for dynamic requests. The `try_files` directive attempts to serve the requested URI as a file or directory, and if not found, it passes the request to the `@proxy` location.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.zh.md#_snippet_4\n\nLANGUAGE: Nginx\nCODE:\n```\nserver {\n    ...\n\n    # nginx 直接处理所有静态资源文件的请求，其余请求则回落 (fallback) 到 Vapor 应用\n    location / {\n        try_files $uri @proxy;\n    }\n\n    location @proxy {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Galaxy with Stars Response - JSON\nDESCRIPTION: This JSON represents the response after eager loading the `stars` relationship. It includes the Galaxy's ID and name, and an array of associated `Star` objects, each containing their own ID, name and galaxy ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": ...,\n        \"name\": \"Milky Way\",\n        \"stars\": [\n            {\n                \"id\": ...,\n                \"name\": \"Sun\",\n                \"galaxy\": {\n                    \"id\": ...\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Binary Messages (Swift)\nDESCRIPTION: This snippet demonstrates how to handle incoming binary messages using the `ws.onBinary` callback. It registers a closure that is called whenever a binary message is received on the WebSocket. The closure receives the WebSocket instance and the received binary data (as `[UInt8]`) as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nws.onBinary { ws, binary in\n    // [UInt8] ontvangen door deze WebSocket.\n    print(binary)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Redis Commands (Swift)\nDESCRIPTION: This snippet demonstrates how to send a Redis command using the `.redis` property on an `Application` instance. It retrieves a value associated with a key using the `get` method and prints the result. Both async/await and future-based implementations are shown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet value = try app.redis.get(\"my_key\", as: String.self).wait()\nprint(value)\n// Optional(\"my_value\")\n\n// or\n\nlet value = try await app.redis.get(\"my_key\", as: String.self)\nprint(value)\n// Optional(\"my_value\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to an app instance via SSH\nDESCRIPTION: This command establishes an SSH connection to a running instance of a Fly.io application.  The `-s` flag creates a pseudo-terminal session for interactive use. It requires a running instance of the app to connect to.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console -s\n```\n\n----------------------------------------\n\nTITLE: Adding a Field Foreign Key Constraint (Swift)\nDESCRIPTION: This snippet demonstrates adding a foreign key constraint to a field using the `.references` method. It constrains the \"star_id\" field to reference the \"id\" field in the \"stars\" table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Example of adding a field foreign key constraint.\n.field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Configuration in SwiftPM\nDESCRIPTION: This code snippet demonstrates how to add the `queues-redis-driver` package as a dependency to a Swift Package Manager project. It shows the necessary configuration within the `Package.swift` manifest file, including specifying the package URL and the product dependency in the target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        /// Any other dependencies ...\n        .package(url: \"https://github.com/vapor/queues-redis-driver.git\", from: \"1.0.0\"),\n    ],\n    targets: [\n        .executableTarget(name: \"App\", dependencies: [\n            // Other dependencies\n            .product(name: \"QueuesRedisDriver\", package: \"queues-redis-driver\")\n        ]),\n        .testTarget(name: \"AppTests\", dependencies: [.target(name: \"App\")]),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Extension for Zip Code\nDESCRIPTION: Defines a custom validator for checking if a string is a valid zip code. It uses a regular expression to validate the input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nprivate let zipCodeRegex: String = \"^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$\"\n\nextension Validator where T == String {\n    /// Validates whether a `String` is a valid zip code.\n    public static var zipCode: Validator<T> {\n        .init { input in\n            guard let range = input.range(of: zipCodeRegex, options: [.regularExpression]),\n                  range.lowerBound == input.startIndex && range.upperBound == input.endIndex\n            else {\n                return ValidatorResults.ZipCode(isValidZipCode: false)\n            }\n            return ValidatorResults.ZipCode(isValidZipCode: true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Message with Promise\nDESCRIPTION: This snippet demonstrates sending a WebSocket message with an `EventLoopPromise` to handle asynchronous completion.  A promise is created and passed to the `send` function, and the `futureResult` is observed for completion or failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(..., promise: promise)\npromise.futureResult.whenComplete { result in\n    // Riuscito o non riuscito a inviare.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating .swift-version File\nDESCRIPTION: Creates a `.swift-version` file that specifies the Swift version to use for building the application on Heroku. Replace `5.8.1` with the appropriate Swift version required by the project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \"5.8.1\" > .swift-version\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Ping Event\nDESCRIPTION: This snippet shows how to listen for ping messages on a WebSocket connection using the `onPing` callback. The closure is executed when a ping message is received from the other endpoint. The closure receives the WebSocket instance (`ws`) as an argument.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nws.onPing { ws in \n    // 接收到了 Ping 消息。\n}\n```\n\n----------------------------------------\n\nTITLE: Add Unique Constraint Name Swift\nDESCRIPTION: This snippet shows how to add a named unique constraint to a schema.  This allows specific constraints to be removed by name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"email\", name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Adding Default ID Field to Schema (Swift)\nDESCRIPTION: This Swift code adds a default identifier field to a database schema using Fluent. It uses the `.id()` helper which adds a field with the special key `.id` and a `UUID` value type. This is typically used for primary keys.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.id()\n```\n\n----------------------------------------\n\nTITLE: Creating a Succeeded and Failed Future\nDESCRIPTION: This snippet shows how to create both succeeded and failed futures using the event loop. `makeSucceededFuture` creates a future that has already completed with a value, while `makeFailedFuture` creates a future that has already failed with an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Create a pre-succeeded future.\nlet futureString: EventLoopFuture<String> = eventLoop.makeSucceededFuture(\"hello\")\n\n// Create a pre-failed future.\nlet futureString: EventLoopFuture<String> = eventLoop.makeFailedFuture(error)\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Leaf Templates with Swift\nDESCRIPTION: Demonstrates how to pass data to Leaf templates using Swift.  It highlights the preferred method of using `Encodable` structs and provides an example of creating a context object and rendering a template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct WelcomeContext: Encodable {\n    var title: String\n    var numbers: [Int]\n}\nreturn req.view.render(\"home\", WelcomeContext(title: \"Hello!\", numbers: [42, 9001]))\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Relation ID (Swift)\nDESCRIPTION: This snippet shows how to set the parent relation's ID. It accesses the `$star` property (projected value of the `@Parent` property) and assigns the `id` of the parent model to it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Set parent relation id\nearth.$star.id = sun.id\n```\n\n----------------------------------------\n\nTITLE: Enum Definition for Color Validation - Swift\nDESCRIPTION: This code snippet defines a simple enum `Color` with three possible values: red, blue, and green. It's used as an example to demonstrate the limitations of default Swift Codable error messages when validating input data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nenum Color: String, Codable {\n    case red, blue, green\n}\n```\n\n----------------------------------------\n\nTITLE: Conforming UserToken to ModelTokenAuthenticatable in Swift\nDESCRIPTION: Extends `UserToken` to conform to `ModelTokenAuthenticatable`. This allows authenticating users via tokens. The `valueKey` and `userKey` specify the fields used for token lookup and user association, respectively.  `isValid` determines if the token is valid.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Fluent\n\nextension UserToken: ModelTokenAuthenticatable {\n    static var valueKey: KeyPath<UserToken, Field<String>> { \\.$value }\n    static var userKey: KeyPath<UserToken, Parent<User>> { \\.$user }\n\n    var isValid: Bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS (SSL) in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable TLS (SSL) for the Vapor server. This involves providing the certificate chain and private key for secure communication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// 启用 TLS.\napp.http.server.configuration.tlsConfiguration = .makeServerConfiguration(\n    certificateChain: try NIOSSLCertificate.fromPEMFile(\"/path/to/cert.pem\").map { .certificate($0) },\n    privateKey: .privateKey(try NIOSSLPrivateKey(file: \"/path/to/key.pem\", format: .pem))\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Query Value in Swift\nDESCRIPTION: This code shows how to fetch a single value from the URL query string using a subscript on `req.query`. The example retrieves the value associated with the key \"name\" and assigns it to a `String?` variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name: String? = req.query[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Leaf For Loop\nDESCRIPTION: Illustrates how to iterate over an array (planets) in Leaf using the `#for` tag and display each element in a list. This shows using the `#` symbol to insert the value of the `planet` variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_10\n\nLANGUAGE: leaf\nCODE:\n```\nPlanets:\n<ul>\n#for(planet in planets):\n    <li>#(planet)</li>\n#endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Models with get(on:) in Swift\nDESCRIPTION: This code snippet demonstrates how to retrieve related models using the `get(on:)` method in Fluent. It fetches all planets associated with a sun from the database. The `database` parameter specifies the database connection to use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera todos los planetas del sol.\nsun.$planets.get(on: database).map { planets in\n    print(planets)\n}\n\n// O\n\nlet planets = try await sun.$planets.get(on: database)\nprint(planets)\n```\n\n----------------------------------------\n\nTITLE: Updating configure.swift for Vapor 4\nDESCRIPTION: This code snippet shows how to update the signature of the configure function in configure.swift for Vapor 4. The function now accepts an Application instance instead of separate Config, Environment, and Services instances. It also shows a sample configure function that sets up an SQLite database and migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- public func configure(_ config: inout Config, _ env: inout Environment, _ services: inout Services) throws\n+ public func configure(_ app: Application) throws\n```\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport FluentSQLiteDriver\nimport Vapor\n\n// Wordt aangeroepen voordat uw toepassing initialiseert.\npublic func configure(_ app: Application) throws {\n    // Serveert bestanden uit `Public/` directory\n    // app.middleware.use(FileMiddleware(publicDirectory: app.directory.publicDirectory))\n    // Configureer SQLite database\n    app.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)\n\n    // Migraties configureren\n    app.migrations.add(CreateTodo())\n    \n    try routes(app)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Favorite Color Validation with Null Support\nDESCRIPTION: Adds validation for the `favoriteColor` property, which is an optional string. Supports null values in the request in addition to the valid `Color` enum cases.  It is configured so that it will pass if the key is missing from the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String?.self,\n    is: .nil || .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger Instance\nDESCRIPTION: This code shows how to create a custom Logger instance with a specific label. This allows for more granular control over logging and helps in identifying the source of log messages. It initializes logger and uses info level.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet logger = Logger(label: \"dev.logger.my\")\nlogger.info(...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote IP Address in Vapor\nDESCRIPTION: This code snippet demonstrates how to access the remote IP address of the client making the request within a Vapor route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.it.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"ip\") { req -> String in\n    return req.remoteAddress.ipAddress\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Ubuntu\nDESCRIPTION: These commands update the package list and install Nginx on Ubuntu.  They use the apt-get package manager.  No specific inputs or outputs beyond typical package manager behavior.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Defining a Grouped Field Swift\nDESCRIPTION: This code snippet shows how to define a nested structure using the `Fields` protocol, and using the `@Group` property wrapper to group them into a flattened structure inside of the model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// 带有名称和动物类型的宠物。\nfinal class Pet: Fields {\n    // 宠物名。\n    @Field(key: \"name\")\n    var name: String\n\n    // 宠物类型。\n    @Field(key: \"type\")\n    var type: String\n\n    // 创建一个空的宠物。\n    init() { }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfinal class User: Model {\n    // 用户的宠物。\n    @Group(key: \"pet\")\n    var pet: Pet\n}\n```\n\n----------------------------------------\n\nTITLE: Credentials Authenticator Middleware\nDESCRIPTION: Applies the `ModelCredentialsAuthenticator` middleware to the login route, protecting it and handling user authentication based on provided credentials.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_48\n\nLANGUAGE: swift\nCODE:\n```\nlet credentialsProtectedRoute = sessionRoutes.grouped(User.credentialsAuthenticator())\ncredentialsProtectedRoute.post(\"login\", use: loginPostHandler)\n```\n\n----------------------------------------\n\nTITLE: Register a Migration to Specific Database (Swift)\nDESCRIPTION: This code snippet demonstrates how to register a migration to a specific database using the `to` parameter in `app.migrations.add()`.  It allows directing the migration to a non-default database, enabling more granular control over database schema changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\napp.migrations.add(MyMigration(), to: .myDatabase)\n```\n\n----------------------------------------\n\nTITLE: Run Swift Project (Linux/No Xcode)\nDESCRIPTION: This command executes the Swift project directly using the 'swift run' command. It compiles and runs the project, resolving dependencies as needed. This is commonly used on Linux or when not using Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.de.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Generating a range of HOTP codes in Vapor\nDESCRIPTION: This snippet shows how to generate a range of HOTP codes with a specified margin for counter values using Vapor. It initializes a symmetric key, creates a HOTP instance, and generates a range of codes around a given counter value, allowing for flexibility during validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\n\n// Genereer een venster met correcte tellers\nlet codes = hotp.generate(counter: 25, range: 2)\n```\n\n----------------------------------------\n\nTITLE: Leaf UnsafeHTML Tag Usage\nDESCRIPTION: Shows the usage of `#unsafeHTML` tag, which allows rendering HTML content without escaping. It's important to ensure the variable used with this tag doesn't expose users to XSS attacks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_23\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #unsafeHTML(styledTitle)\n```\n\n----------------------------------------\n\nTITLE: Route with All Component\nDESCRIPTION: Registers a route with an 'all' path component `*`. Demonstrates how requests like `/foo/bar/baz` are matched.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op GET /foo/bar/baz\n// reageert op GET /foo/qux/baz\n// ...\napp.get(\"foo\", \"*\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Heroku Configuration Variables\nDESCRIPTION: This command retrieves the configuration variables for the Heroku application. It is useful for verifying that the DATABASE_URL is correctly set.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nheroku config\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl on Linux\nDESCRIPTION: This command installs the `flyctl` command-line tool on Linux. It uses `curl` to download the installation script from Fly.io and then executes it using `sh`. The script handles the installation process, making `flyctl` available in the system's PATH.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://fly.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables via export - Shell\nDESCRIPTION: This snippet shows how to set environment variables in the terminal using the `export` command.  This sets the FOO variable to the value BAR, allowing the Vapor app to access the environment variable when it's running.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nexport FOO=BAR\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: SSH into server as root\nDESCRIPTION: This command establishes a secure shell connection to the specified server as the root user, allowing for administrative tasks to be performed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh root@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Connecting to Heroku Git Remote\nDESCRIPTION: Connects the local Git repository to the Heroku application's Git remote. This allows the user to push code changes to Heroku for deployment. Replace `your-apps-name-here` with the actual Heroku application name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ heroku git:remote -a your-apps-name-here\n```\n\n----------------------------------------\n\nTITLE: Sending a Binary Message through a WebSocket in Vapor\nDESCRIPTION: This code snippet demonstrates sending a binary message through a WebSocket connection in Vapor. The `ws.send` method is used, passing an array of `UInt8` as the message content, which is interpreted as binary data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nws.send([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ResponseEncodable Type in Swift\nDESCRIPTION: Defines a simple `HTML` struct that encapsulates an HTML string.  This type will be used to demonstrate custom response encoding.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct HTML {\n  let value: String\n}\n```\n\n----------------------------------------\n\nTITLE: Application Storage - Swift\nDESCRIPTION: This snippet shows how to use the `Storage` helper to store values on the Application in Vapor 4. It defines a `StorageKey` and accesses the storage using the key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyNumber: StorageKey {\n    typealias Value = Int\n}\napp.storage[MyNumber.self] = 5\nprint(app.storage[MyNumber.self]) // 5\n```\n\n----------------------------------------\n\nTITLE: Deploy to Heroku\nDESCRIPTION: Pushes the current Git branch (usually `main`) to Heroku, triggering the deployment process. Heroku will build and deploy the application based on the specified buildpack and configuration files.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push heroku main\n```\n\n----------------------------------------\n\nTITLE: Listening for WebSocket Close Events\nDESCRIPTION: This snippet demonstrates how to listen for the `onClose` event of a WebSocket.  It registers a closure that is executed when the WebSocket connection is closed, whether initiated by the server or the client. The result parameter indicates success or failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nws.onClose.whenComplete { result in\n    // WebSocket chiuso.\n}\n```\n\n----------------------------------------\n\nTITLE: Open HTTP Port\nDESCRIPTION: This command configures the Uncomplicated Firewall (UFW) to allow incoming traffic on port 8080, which is the default port for Vapor applications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo ufw allow 8080\n```\n\n----------------------------------------\n\nTITLE: Mark Run Target as Executable in Package.swift\nDESCRIPTION: This snippet illustrates updating the `Run` target to be marked as an executable target in the Package.swift file. This is necessary for the Vapor application to be executed correctly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n```\n\n----------------------------------------\n\nTITLE: Example HTTP response\nDESCRIPTION: This is an example HTTP response for the previous request, showing the status code, headers, and body. It confirms successful routing and parameter extraction.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 13\ncontent-type: text/plain; charset=utf-8\n\nHello, swift!\n```\n\n----------------------------------------\n\nTITLE: withApp Function\nDESCRIPTION: Defines a private `withApp` function to streamline the setup and teardown of the `Application` instance for tests.  This function encapsulates the application lifecycle management, ensuring proper initialization, configuration, and shutdown for each test. It also includes the crucial `asyncShutdown()` call to release threads.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nprivate func withApp(_ test: (Application) async throws -> ()) async throws {\n    let app = try await Application.make(.testing)\n    do {\n        try await configure(app)\n        try await test(app)\n    }\n    catch {\n        try await app.asyncShutdown()\n        throw error\n    }\n    try await app.asyncShutdown()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Ping Events\nDESCRIPTION: This snippet demonstrates how to handle ping events on a WebSocket connection using the `onPing` method. A closure is registered to be executed when a ping message is received from the other peer.  It provides the WebSocket instance to the closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nws.onPing { ws in \n    // Ping ricevuto.\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Context Example\nDESCRIPTION: Shows how to define a Swift struct that conforms to `Encodable` to pass data to a Leaf template. This provides a strongly-typed way to provide variables to the template engine. Requires Vapor framework.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct WelcomeContext: Encodable {\n    var title: String\n    var numbers: [Int]\n}\nreturn req.view.render(\"home\", WelcomeContext(title: \"Hello!\", numbers: [42, 9001]))\n```\n\n----------------------------------------\n\nTITLE: Validating Request Query\nDESCRIPTION: Demonstrates validating the request query parameters using `CreateUser.validate(query:)`. This allows validation rules to be applied to query string parameters in GET requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\ntry CreateUser.validate(query: req)\nreq.query.decode(CreateUser.self)\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Tag in a Leaf Template - Leaf\nDESCRIPTION: This snippet demonstrates how to use the newly registered custom tag `#now()` in a Leaf template.  The tag will be replaced with the current timestamp based on the logic implemented in the `NowTag` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_3\n\nLANGUAGE: Leaf\nCODE:\n```\nThe time is #now()\n```\n\n----------------------------------------\n\nTITLE: Attaching a Postgres database to a Vapor App\nDESCRIPTION: This command attaches an existing Postgres database to a Vapor application on Fly.io. It creates a database and user for the Vapor app and exposes the connection URL through the `DATABASE_URL` environment variable, allowing the app to connect to the database. Replace `name-of-your-postgres-app` with the actual database app name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly pg attach name-of-your-postgres-app\n```\n\n----------------------------------------\n\nTITLE: Implementing a JobEventDelegate in Swift\nDESCRIPTION: This code snippet demonstrates how to create a `JobEventDelegate` that receives notifications when a job is dispatched, dequeued, succeeds, or errors. It shows the structure and methods to implement for monitoring job events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyEventDelegate: JobEventDelegate {\n    /// Se llama cuando el trabajo es enviado al queue worker desde una ruta\n    func dispatched(job: JobEventData, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Se llama cuando el trabajo se coloca en la cola de procesamiento y comienza a trabajar\n    func didDequeue(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Se llama cuando el trabajo ha terminado de procesarse y se ha eliminado de la cola\n    func success(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Se llama cuando el trabajo ha terminado de procesarse pero ha tenido un error\n    func error(jobId: String, error: Error, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize RSA Key from Public PEM - Swift\nDESCRIPTION: This snippet demonstrates how to initialize an RSA key from a public PEM file using Vapor's JWT library.  It shows a multi-line string containing the PEM data and then initializes the RSAKey using the public PEM.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet rsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0cOtPjzABybjzm3fCg1aCYwnx\nPmjXpbCkecAWLj/CcDWEcuTZkYDiSG0zgglbbbhcV0vJQDWSv60tnlA3cjSYutAv\n7FPo5Cq8FkvrdDzeacwRSxYuIq1LtYnd6I30qNaNthntjvbqyMmBulJ1mzLI+Xg/\naX4rbSL49Z3dAQn8vQIDAQAB\n-----END PUBLIC KEY-----\n\"\"\"\n\n// 使用公共 pem 初始化 RSA 密钥。\nlet key = RSAKey.public(pem: rsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Updating a Database Enum with Fluent in Swift\nDESCRIPTION: This snippet updates an existing database enum named 'planet_type' by deleting the case 'gasGiant'. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.enum(\"planet_type\")\n    .deleteCase(\"gasGiant\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Extend Application.Servers.Provider for Custom Server\nDESCRIPTION: This snippet demonstrates how to extend `Application.Servers.Provider` for leading-dot syntax when using a custom server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nextension Application.Servers.Provider {\n    static var myServer: Self {\n        .init {\n            $0.servers.use { app in\n            \tMyServer()\n            }\n        }\n    }\n}\n\napp.servers.use(.myServer)\n```\n\n----------------------------------------\n\nTITLE: Updating routes.swift for Vapor 4\nDESCRIPTION: This code snippet shows how to update the signature of the routes function in routes.swift for Vapor 4. The function now accepts an Application instance instead of a Router and a Container.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- public func routes(_ router: Router, _ container: Container) throws\n+ public func routes(_ app: Application) throws\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Message with Promise (Swift)\nDESCRIPTION: This code illustrates the usage of `EventLoopPromise` with the WebSocket's `send` method. It creates a promise and passes it to `send`. The promise's future result allows you to handle the success or failure of the send operation once it completes asynchronously.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(..., promise: promise)\npromise.futureResult.whenComplete { result in\n    // Envío exitoso o fallido.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Migration to Specific Database - Swift\nDESCRIPTION: This snippet shows how to register a migration to a specific database within the Vapor application using the `to` parameter. This allows you to target a specific database configuration for the migration, instead of using the default. This provides more control over which database is modified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(MyMigration(), to: .myDatabase)\n```\n\n----------------------------------------\n\nTITLE: Hello Tag Implementation with Parameters in Swift\nDESCRIPTION: This snippet shows the implementation of a `HelloTag` using parameters passed into the tag in Leaf. It retrieves the name parameter from the `LeafContext` and returns a formatted greeting string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case missingNameParameter\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.parameters[0].string else {\n            throw HelloTagError.missingNameParameter\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Pivot Model for a Siblings Relationship in Fluent\nDESCRIPTION: This code defines a pivot model (`PlanetTag`) used for establishing a many-to-many relationship between `Planet` and `Tag` models. It includes `@Parent` relationships to both models and can contain additional properties like `comments` and `status`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nenum PlanetTagStatus: String, Codable { case accepted, pending }\n\n// pivot 模型示例。\nfinal class PlanetTag: Model {\n    static let schema = \"planet+tag\"\n    \n    @ID(key: .id)\n    var id: UUID?\n\n    @Parent(key: \"planet_id\")\n    var planet: Planet\n\n    @Parent(key: \"tag_id\")\n    var tag: Tag\n\n    init() { }\n\n    init(id: UUID? = nil, planet: Planet, tag: Tag, comments: String?, status: PlanetTagStatus?) throws {\n        self.id = id\n        self.$planet.id = try planet.requireID()\n        self.$tag.id = try tag.requireID()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf UnsafeHTML Tag Example\nDESCRIPTION: Illustrates the use of the `#unsafeHTML` tag to display HTML without escaping it. Caution: use with care to avoid XSS vulnerabilities.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_22\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #unsafeHTML(styledTitle)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Command Line (Shell)\nDESCRIPTION: This command shows how to override the default logging level using the `--log` flag when running the Vapor application.  This approach allows for dynamic control of logging verbosity during execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --log debug\n```\n\n----------------------------------------\n\nTITLE: Converting Async/Await to EventLoopFuture\nDESCRIPTION: This code snippet demonstrates how to convert an `async` function to an `EventLoopFuture`. This is useful when you need to integrate `async/await` code with code that expects an `EventLoopFuture`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet myString = try await someAsyncFunctionThatGetsAString()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = request.eventLoop.makePromise(of: String.self)\npromise.completeWithTask {\n    try await someAsyncFunctionThatGetsAString()\n}\nlet futureString: EventLoopFuture<String> = promise.futureResult\n```\n\n----------------------------------------\n\nTITLE: Setting platform version in Package.swift\nDESCRIPTION: This code snippet shows how to set the platform version to macOS 12 in the Package.swift file. This is required to use async/await features.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nplatforms: [\n   .macOS(.v12)\n],\n```\n\n----------------------------------------\n\nTITLE: Add and Commit Git Changes\nDESCRIPTION: These commands add all changes to the Git staging area and commit them with a descriptive message. This prepares the changes for deployment to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"a description of the changes I made\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Route using app.on() in Vapor\nDESCRIPTION: This code snippet shows how to register a route using the `app.on()` method with a specified HTTP method. It's functionally equivalent to the `app.get()` example, but more explicit about the HTTP method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.on(.GET, \"hello\", \"vapor\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command (Swift)\nDESCRIPTION: This shows how to declare a struct conforming to `AsyncCommand`.  This command is not fully defined here, it's the basic setup.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct HelloCommand: AsyncCommand {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Addresses for Redis - Swift\nDESCRIPTION: This example shows how to create an array of SocketAddress instances, which are needed for connecting to a Redis cluster.  It uses the makeAddressResolvingHost method to resolve the hostname and port.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet serverAddresses: [SocketAddress] = [\n  try .makeAddressResolvingHost(\"localhost\", port: RedisConnection.Configuration.defaultPort)\n]\n```\n\n----------------------------------------\n\nTITLE: Create a New Vapor Project\nDESCRIPTION: This command uses the Vapor Toolbox to create a new Vapor project named 'hello' in the current directory. The `-n` flag automatically answers 'no' to all interactive prompts, creating a basic template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Registering a Migration to Specific Database Swift\nDESCRIPTION: This code snippet shows how to register a defined migration with the Vapor application's migration system for a specific database named `.myDatabase`.  This allows migrations to be targeted to different databases within the same application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(MyMigration(), to: .myDatabase)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Application Identifier - Swift\nDESCRIPTION: This snippet shows how to configure the Apple application identifier for JWT verification in a Vapor application using Swift. It sets the `app.jwt.apple.applicationIdentifier` property to the application's identifier.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Configurar el identificador de la aplicación Apple.\napp.jwt.apple.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Service in Vapor (Swift)\nDESCRIPTION: Defines a read-only service `MyAPI` that extends the `Request` type in Vapor.  It uses the request's `Client` to perform operations. The service is accessed via `req.myAPI`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyAPI {\n    let client: Client\n\n    func foos() async throws -> [String] { ... }\n}\n\nextension Request {\n    var myAPI: MyAPI {\n        .init(client: self.client)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Builder in Swift\nDESCRIPTION: Shows how to create a query builder using the `query` method on a database object with a model type. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.query(Planet.self)\n```\n\n----------------------------------------\n\nTITLE: Open File with NonBlockingFileIO Vapor\nDESCRIPTION: This snippet demonstrates how to use NIO's `NonBlockingFileIO` type directly to open a file.  It shows how to open a file both on the main thread, accessing the application's `FileIO` and event loop group, and within a route handler, accessing the request's application and event loop. This provides lower-level control over file operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Main thread.\nlet fileHandle = try await app.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: app.eventLoopGroup.next()\n).get()\nprint(fileHandle)\n\n// In a route handler.\nlet fileHandle = try await req.application.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: req.eventLoop)\nprint(fileHandle)\n```\n\n----------------------------------------\n\nTITLE: Install Swift using Swiftly CLI\nDESCRIPTION: This command installs the latest stable Swift release using the Swiftly CLI tool.  It fetches and extracts the toolchain. Requires Swiftly to be installed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ swiftly install latest\n```\n\n----------------------------------------\n\nTITLE: Start application in detached mode\nDESCRIPTION: This command starts the application in detached mode, meaning it runs in the background. The `--detach` flag ensures the application continues to run even after the terminal is closed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up --detach app\n```\n\n----------------------------------------\n\nTITLE: Install flyctl on macOS\nDESCRIPTION: This command installs the `flyctl` command-line tool on macOS using the Homebrew package manager. `flyctl` is essential for interacting with the Fly.io platform.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install flyctl\n```\n\n----------------------------------------\n\nTITLE: Creating Spans with Manual Propagation in Vapor (Swift)\nDESCRIPTION: This snippet illustrates creating spans within a route handler using manual span propagation.  It retrieves the `serviceContext` from the `Request` and passes it to the `withSpan` function's `context` parameter. This avoids the performance overhead of automatic propagation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcess\") { req in\n    let result = try await fetch()\n    return try await withSpan(\"getNameParameter\", context: req.serviceContext) { _ in\n        try await process(result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RSA key for signing with Algorithm\nDESCRIPTION: This code snippet shows how to add an RSA public key to the application's JWT configuration for signing and verification. It uses SHA-256 as the digest algorithm. This allows the application to sign and verify tokens using the RSA algorithm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// RSA mit SHA-256 Signierer hinzufügen.\ntry await app.jwt.keys.addRSA(\n    key: Insecure.RSA.PublicKey(pem: rsaPublicKey),\n    digestAlgorithm: .sha256\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Hostname via Command Line\nDESCRIPTION: This command-line snippet demonstrates how to override the hostname configuration of the Vapor server using the `serve` command with the `--hostname` flag. This allows you to specify a different hostname when running the server from the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# 重写主机名配置\nswift run App serve --hostname dev.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Space (Swift)\nDESCRIPTION: This code demonstrates how to configure the database space for a model in Vapor. It passes the desired space to the `schema(_:space:)` method during table creation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\ntry await db.schema(\"planets\", space: \"mirror_universe\")\n    .id()\n    // ...\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Building and Moving Vapor Toolbox\nDESCRIPTION: Builds the Vapor Toolbox in release mode, disabling the sandbox and enabling test discovery.  Then, it moves the compiled binary to the `/usr/local/bin` directory, making it accessible globally. This step requires `sudo` for root permissions to move the file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nswift build -c release --disable-sandbox --enable-test-discovery\nsudo mv .build/release/vapor /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Initial User Migration - Swift\nDESCRIPTION: This snippet demonstrates a basic migration for creating a \"users\" table. It defines a UUID `id` field as the primary key with auto-generation disabled and a `name` field as a required string. The `revert` function deletes the table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"id\", .uuid, .identifier(auto: false))\n            .field(\"name\", .string, .required)\n            .create()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check logged-in Heroku email\nDESCRIPTION: This command is used to verify the currently logged-in Heroku email account via the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku auth:whoami\n```\n\n----------------------------------------\n\nTITLE: Example JSON Representation of Parent Relation\nDESCRIPTION: This example shows how a parent relation might be represented in JSON when encoding a model.  The `star` property is an object containing the parent's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"A616B398-A963-4EC7-9D1D-B1AA8A6F1107\",\n    \"star\": {\n        \"id\": \"A1B2C3D4-1234-5678-90AB-CDEF12345678\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Validating Cookies in Vapor (Swift)\nDESCRIPTION: This snippet shows how to access cookies from a request and validate their properties, such as existence and expiration date. It retrieves a cookie named 'my-cookie' and checks if it has expired.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"my-cookie\") { req -> String in\n    guard let cookie = req.cookies[\"my-cookie\"] else {\n        throw Abort(.badRequest)\n    }\n    if let expiration = cookie.expires, expiration < Date() {\n        throw Abort(.badRequest)\n    }\n    return cookie.string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterDecode hook in Swift\nDESCRIPTION: Shows how to implement the `afterDecode` hook on a `Content` type.  This hook is called after the content has been decoded. The example trims whitespace from the `name` property and throws an error if the name is empty after trimming. `mutating` is required for structs because it modifies the struct's properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// この　Content　がデコードされた後に実行されます。`mutating` は構造体のみに必要で、クラスには必要ありません。\nmutating func afterDecode() throws {\n    // 名前は渡されないことがありますが、渡される場合は空文字列であってはなりません。\n    self.name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines)\n    if let name = self.name, name.isEmpty {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Handler in Vapor (Swift)\nDESCRIPTION: Shows how to implement a `LifecycleHandler` to hook into Vapor's application lifecycle events such as startup and shutdown.  The `Hello` struct conforms to `LifecycleHandler` and prints messages to the logger.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Drukt \"hello\" af tijdens het opstarten.\nstruct Hello: LifecycleHandler {\n    // Wordt aangeroepen voordat de toepassing opstart.\n    func willBoot(_ app: Application) throws {\n        app.logger.info(\"Hello!\")\n    }\n\n    // Wordt aangeroepen nadat de applicatie is opgestart.\n    func didBoot(_ app: Application) throws {\n        app.logger.info(\"Server is running\")\n    }\n\n    // Wordt aangeroepen voordat de applicatie wordt afgesloten.\n    func shutdown(_ app: Application) {\n        app.logger.info(\"Goodbye!\")\n    }\n}\n\n// Voeg levenscyclus handler toe.\napp.lifecycle.use(Hello())\n```\n\n----------------------------------------\n\nTITLE: Adding APNS Package Dependency Swift\nDESCRIPTION: Adds the VaporAPNS package dependency to a Swift Package Manager project. This allows the project to use APNS for sending push notifications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n         // Otras dependencias...\n        .package(url: \"https://github.com/vapor/apns.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Otras dependencias...\n            .product(name: \"VaporAPNS\", package: \"apns\")\n        ]),\n        // Otros targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Backlog for Vapor Server\nDESCRIPTION: This snippet configures the `backlog` parameter of the Vapor HTTP server.  The backlog defines the maximum length of the queue of pending connections.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Configura un backlog personalizado.\napp.http.server.configuration.backlog = 128\n```\n\n----------------------------------------\n\nTITLE: Updating a Schema with Unique Constraint and Field Deletion (Swift)\nDESCRIPTION: This code snippet shows how to update an existing database schema using Fluent. It modifies the \"planets\" table or collection by adding a unique constraint on the \"name\" field and deleting the \"star_id\" field. The snippet relies on the Fluent framework and an active database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .unique(on: \"name\")\n    .deleteField(\"star_id\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Using Environment Property in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to use the `app.environment` property in Vapor to configure different behaviors based on the current environment. It shows how to use different database configurations for production versus other environments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\nswitch app.environment {\ncase .production:\n    app.databases.use(....)\ndefault:\n    app.databases.use(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Validation - Nullable Enum Value Check\nDESCRIPTION: Adds a validation to ensure that the `favoriteColor` field is either nil or one of the allowed enum values (\"red\", \"blue\", or \"green\"). It uses `String?` as the base type and the `.nil || .in` validator combination. The `required: false` parameter indicates that the validation should not fail if the field is missing from the request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String?.self,\n    is: .nil || .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Private key with components\nDESCRIPTION: This snippet illustrates how to initialize an RSA private key by passing its modulus, public exponent, and private exponent components. This is part of setting up RSA-based JWT signing and verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Initialisiere einen privaten RSA-Schlüssel mit Komponenten.\nlet key = try Insecure.RSA.PrivateKey(\n    modulus: modulus, \n    exponent: publicExponent, \n    privateExponent: privateExponent\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Identifier in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure the Apple application identifier within a Vapor application's JWT settings.  This is a prerequisite for verifying Apple JWTs. The application identifier should be set to the correct value for your Apple application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Configureer Apple app identificatie.\napp.jwt.apple.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Add metadata to a route\nDESCRIPTION: This snippet illustrates how to add metadata (in this case, a description) to a route's `userInfo` dictionary.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req in\n\t...\n}.description(\"says hello\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vapor to Use Leaf (Swift)\nDESCRIPTION: Configures the Vapor application to use the Leaf templating engine by setting the `views.use` property to `.leaf`. This tells Vapor to use the `LeafRenderer` when `req.view` is called.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Leaf\n\napp.views.use(.leaf)\n```\n\n----------------------------------------\n\nTITLE: Echoing Received Messages - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates a simple echo server implementation that sends back any text message received.  It uses the `onText` callback to receive messages and the `send` method to send them back.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Echoes received messages.\nws.onText { ws, text in\n    ws.send(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Define a route with a parameter path component\nDESCRIPTION: This snippet demonstrates how to define a route with a dynamic parameter path component using the `:` prefix. Any string in that position will be captured as a parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /foo/bar/baz\n// 响应到 GET /foo/qux/baz\n// ...\napp.get(\"foo\", \":bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Middleware in Vapor\nDESCRIPTION: This code snippet shows how to configure model middleware in a Vapor application. It uses the `app.databases.middleware.use` method to register the `PlanetMiddleware` for the `.psql` database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\n// Voorbeeld van het configureren van model middleware.\napp.databases.middleware.use(PlanetMiddleware(), on: .psql)\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Parameter in Vapor\nDESCRIPTION: This snippet illustrates how to define a route with a dynamic parameter using the `:` prefix.  The route matches `/hello/<name>`, and retrieves the value of `<name>` from `req.parameters` to generate a dynamic greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Swift on Fedora\nDESCRIPTION: This snippet shows how to install Swift on Fedora using the `dnf` package manager. It requires sudo privileges to install the `swift-lang` package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.es.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Overriding Port Configuration via Command Line\nDESCRIPTION: This shell command overrides the port configuration of the Vapor server by using the `--port` flag when executing the `serve` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Sobreescribiendo la configuración de port.\nswift run App serve --port 1337\n```\n\n----------------------------------------\n\nTITLE: Run Database Migrations\nDESCRIPTION: This command runs the database migrations defined in the application. It uses the 'migrate' service defined in the docker-compose.yml file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run migrate\n```\n\n----------------------------------------\n\nTITLE: Creating and Completing a Promise\nDESCRIPTION: This code snippet demonstrates how to create a promise, which can be used to fulfill a future. The promise can be either succeeded with a value or failed with an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nlet eventLoop: EventLoop \n\n// 为某个字符串创建一个新的 promise。\nlet promiseString = eventLoop.makePromise(of: String.self)\nprint(promiseString) // EventLoopPromise<String>\nprint(promiseString.futureResult) // EventLoopFuture<String>\n\n// 关联成功的 future。\npromiseString.succeed(\"Hello\")\n\n// 关联的未来 future。\npromiseString.fail(...)\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Redis Command - Swift\nDESCRIPTION: This snippet demonstrates how to send a custom Redis command using the `send` method on the `RedisClient` instance. It sends the `PING` command with the argument \"hello\". It assumes a Redis server is running and accessible.  The example includes both synchronous (`wait()`) and asynchronous (`await`) approaches.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// elke waarde na het commando is het positionele argument dat Redis verwacht\ntry app.redis.send(command: \"PING\", with: [\"hello\"])\n    .map {\n        print($0)\n    }\n    .wait()\n// \"hello\"\n\n// of\n\nlet res = try await app.redis.send(command: \"PING\", with: [\"hello\"])\nprint(res)\n// \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Child Relation (Swift)\nDESCRIPTION: This snippet shows how to define an optional child relation using the `@OptionalChild` property wrapper. It creates a one-to-one relationship between two models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Example of an optional child relation.\n    @OptionalChild(for: \\.$planet)\n    var governor: Governor?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Parent Relationship in Fluent\nDESCRIPTION: This code snippet demonstrates how to define a parent relationship using the `@Parent` property wrapper in a Fluent model.  It stores a reference to the ID of another model (Star, in this case) using the `star_id` key.  The `key` parameter specifies the field used to store the parent's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // parent 关系示例。\n    @Parent(key: \"star_id\")\n    var star: Star\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Model Swift\nDESCRIPTION: This code snippet demonstrates how to update an existing model in the database using the `update(on:)` method. First you need to find the model, then you can change its parameters and then save it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nguard let planet = try await Planet.find(..., on: database) else {\n    throw Abort(.notFound)\n}\nplanet.name = \"Earth\"\ntry await planet.update(on: database)\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox with Homebrew (macOS)\nDESCRIPTION: Installs the Vapor Toolbox, a command-line interface (CLI) tool, using Homebrew, a package manager for macOS. This simplifies Vapor project creation. Requires Homebrew to be installed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration - Swift\nDESCRIPTION: This snippet demonstrates how to configure middleware in Vapor 4 using `app.middleware`. It shows how to add middleware to the application's configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nlet corsMiddleware = CORSMiddleware(configuration: ...)\napp.middleware.use(corsMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Checking if Model is Attached (Swift)\nDESCRIPTION: This code snippet checks if a model is related using the `isAttached` method\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Checks if the models are related.\nearth.$tags.isAttached(to: inhabited)\n```\n\n----------------------------------------\n\nTITLE: Defining a Codable struct for query string binding - Swift\nDESCRIPTION: Defines a struct `Hello` that conforms to the `Content` protocol for binding query string parameters.  The `name` property is declared as optional because query parameters are always optional.  This struct can then be used with `req.query.decode`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Hello: Content {\n    var name: String?\n}\n```\n\n----------------------------------------\n\nTITLE: EventLoopFuture flatMap with Throwing Method\nDESCRIPTION: This code snippet shows how to call a throwing method inside a `flatMap` transformation using `do/catch` and `makeFailedFuture`. This is needed to handle synchronous errors within an asynchronous context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume future string and client from previous example.\nlet futureResponse = futureString.flatMap { string in\n    let url: URL\n    do {\n        // Some synchronous throwing method.\n        url = try convertToURL(string)\n    } catch {\n        // Use event loop to make pre-completed future.\n        return eventLoop.makeFailedFuture(error)\n    }\n    return client.get(url) // EventLoopFuture<ClientResponse>\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response example with OK status\nDESCRIPTION: Example of an HTTP response with a 200 OK status code.  It includes the `content-length` header and the response body, which is the greeting \"Hello, Vapor\". This demonstrates the successful completion of a request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 12\n\nHello, Vapor\n```\n\n----------------------------------------\n\nTITLE: Blocking the Event Loop with Sleep in Vapor\nDESCRIPTION: This code demonstrates how calling `sleep(_:)` directly on a Vapor route closure will block the event loop thread. Blocking the event loop prevents it from processing other requests, which can lead to significant delays for other clients. To avoid this, blocking operations should be performed on a background thread, with promises used to notify the event loop when the operation is complete.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    /// Brengt de thread van de event-loop in slaap.\n    sleep(5)\n    \n    /// Geeft een eenvoudige string terug zodra de draad opnieuw ontwaakt.\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Request XCTVapor\nDESCRIPTION: Demonstrates how to send a more complex test request using XCTVapor with request body encoding and response validation. Uses the `beforeRequest` closure to encode the request content and the `afterResponse` closure to validate the response content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.test(.POST, \"todos\", beforeRequest: { req in\n\ttry req.content.encode([\"title\": \"Test\"])\n}, afterResponse: { res in\n    XCTAssertEqual(res.status, .created)\n    let todo = try res.content.decode(Todo.self)\n    XCTAssertEqual(todo.title, \"Test\")\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the Vapor App with Supervisor\nDESCRIPTION: These commands are used to load the Supervisor configuration, add the application to Supervisor's control, and start the application. The `add` command may also start the app.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsupervisorctl reread\nsupervisorctl add hello\nsupervisorctl start hello\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with Short Environment Flag\nDESCRIPTION: This command shows how to run a Vapor application and specify the environment using the short `-e` flag.  This is a shorthand way to override the default `development` environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve -e prod\n```\n\n----------------------------------------\n\nTITLE: Configure environment variables in fly.toml\nDESCRIPTION: This TOML snippet shows how to configure environment variables in the `fly.toml` file. These variables are accessible to the application at runtime.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  MAX_API_RETRY_COUNT = \"3\"\n  SMS_LOG_LEVEL = \"error\"\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: This snippet shows a systemd service file configuration for a Vapor application named 'Hello'. It defines the service description, dependencies, user, group, restart policy, working directory, execution command, and logging configuration. The `ExecStart` command specifies the path to the compiled Vapor application and sets the environment to production, disabling verbose logging.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n[Unit]\nDescription=Hello\nRequires=network.target\nAfter=network.target\n\n[Service]\nType=simple\nUser=vapor\nGroup=vapor\nRestart=always\nRestartSec=3\nWorkingDirectory=/home/vapor/hello\nExecStart=/home/vapor/hello/.build/release/App serve --env production\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=vapor-hello\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: View Docker Container Logs\nDESCRIPTION: This command displays the logs for a specific Docker container.  The `<container_id>` needs to be replaced with the actual container ID obtained from `docker container ls`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs <container_id>\n```\n\n----------------------------------------\n\nTITLE: Environment File Example (Shell)\nDESCRIPTION: This snippet shows the syntax for defining environment variables in a `.env` file. Each line contains a key-value pair, where the key is the environment variable name and the value is its value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Key=Value\nFOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Adding APNS Package Dependency - Swift\nDESCRIPTION: This snippet demonstrates how to add the VaporAPNS package dependency to your Swift project using Swift Package Manager. It specifies the package URL and version, as well as the product dependency for the App target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n         // Other dependencies...\n        .package(url: \"https://github.com/vapor/apns.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Other dependencies...\n            .product(name: \"VaporAPNS\", package: \"apns\")\n        ]),\n        // Other targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Ranges with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to use ranges to select a subset of results.  It retrieves the first 5 planets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera los 5 primeros planetas.\nPlanet.query(on: self.database)\n    .range(..<5)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP GET Request\nDESCRIPTION: This shows a simple HTTP GET request that triggers the dynamic vapor route\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /hello/swift HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Set Fly secrets\nDESCRIPTION: This command sets a secret environment variable for a Fly.io application.  Secrets are used for sensitive data like API keys and passwords.  The value is encrypted and securely stored.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set MYSECRET=A_SUPER_SECRET_VALUE\n```\n\n----------------------------------------\n\nTITLE: Using HTML as a response type - Swift\nDESCRIPTION: This snippet shows how to use the `HTML` struct, which implements `ResponseEncodable`, as a response type in a Vapor route.  It creates an `HTML` object with a simple HTML document and returns it as the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get { _ in\n  HTML(value: \"\"\"\n  <html>\n    <body>\n      <h1>Hello, World!</h1>\n    </body>\n  </html>\n  \"\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Environment File Configuration\nDESCRIPTION: This snippet shows how to configure environment variables for a Vapor application using a Systemd environment file. It allows exporting environment variables to the application. Requires Systemd to be installed and configured correctly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.nl.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nEnvironmentFile=/path/to/environment/file1\nEnvironmentFile=/path/to/environment/file2\n```\n\n----------------------------------------\n\nTITLE: Receiving Text Messages via WebSocket\nDESCRIPTION: This snippet demonstrates how to receive text messages over a WebSocket connection using the `onText` method. It registers a closure to be executed when a text message is received. The closure takes the `ws` (WebSocket) and the received `text` (String) as parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    // Testo ricevuto.\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Create Swift version file\nDESCRIPTION: This command creates a `.swift-version` file and writes the specified Swift version to it. Heroku uses this file to determine the Swift version for your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \"5.8.1\" > .swift-version\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Request\nDESCRIPTION: Shows how to send a more complex test request with request body encoding and response validation. Uses `beforeRequest` closure to encode the request content and `afterResponse` closure to validate the response and database state.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet newDTO = TodoDTO(id: nil, title: \"test\")\n\ntry await app.testing().test(.POST, \"todos\", beforeRequest: { req in\n    try req.content.encode(newDTO)\n}, afterResponse: { res async throws in\n    #expect(res.status == .ok)\n    let models = try await Todo.query(on: app.db).all()\n    #expect(models.map({ $0.toDTO().title }) == [newDTO.title])\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Async/Await to EventLoopFuture\nDESCRIPTION: This code snippet demonstrates how to convert an async/await function to an EventLoopFuture by creating a promise and completing it with the result of the async function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet myString = try await someAsyncFunctionThatGetsAString()\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation\nDESCRIPTION: This command checks if the Vapor Toolbox is installed correctly by displaying the help information. It should output a list of available commands.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.it.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Attaching a Model with Pivot Attributes to Siblings Relationship (Swift)\nDESCRIPTION: Demonstrates attaching a model and populating additional attributes on the pivot model during attachment using a closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Poblar los atributos del pivote al establecer la relación.\ntry await earth.$tags.attach(inhabited, on: database) { pivot in\n    pivot.comments = \"This is a life-bearing planet.\"\n    pivot.status = .accepted\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp with ISO 8601 format Swift\nDESCRIPTION: This snippet showcases how to define a `@Timestamp` with the `.iso8601` format. This allows you to store the timestamp as an ISO 8601 string in the database. Requires a schema migration that stores the field as a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// 存储ISO 8601格式的时间戳\n// 此模型最后一次更新的时间。\n@Timestamp(key: \"updated_at\", on: .update, format: .iso8601)\nvar updatedAt: Date?\n```\n\n----------------------------------------\n\nTITLE: Hashing Data with SHA256 using SwiftCrypto in Vapor\nDESCRIPTION: This snippet demonstrates how to hash data using SHA256 from SwiftCrypto, which is automatically available when importing Vapor. It hashes the string \"hello\" and prints the resulting digest.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = SHA256.hash(data: Data(\"hello\".utf8))\nprint(digest)\n```\n\n----------------------------------------\n\nTITLE: Registering a Job\nDESCRIPTION: Registers a job with the Vapor Queues system. This makes the job available for dispatching and processing by the queue workers.  The snippet demonstrates how to add an `EmailJob` instance to the `app.queues` configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Registrar trabajos\nlet emailJob = EmailJob()\napp.queues.add(emailJob)\n```\n\n----------------------------------------\n\nTITLE: Check Swift Version\nDESCRIPTION: This command checks the installed Swift version.  It is useful for verifying the installation was successful. Requires Swift to be installed and accessible in the PATH.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ swift --version\n```\n\n----------------------------------------\n\nTITLE: Making Requests in Route Handlers (Vapor 4)\nDESCRIPTION: This code snippet shows how to make requests within a route handler in Vapor 4. Instead of using `req.make(Client.self)`, the client is now directly available as a property on the Request instance: `req.client`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n// Doe een verzoek in een route handler.\n- try req.make(Client.self).get(\"https://vapor.codes\")\n+ req.client.get(\"https://vapor.codes\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Planet Fields Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to select only the `id` and `name` fields of the Planet model when querying the database using Fluent's query API. Using `.field` limits the data retrieved.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Select only the planet's id and name field\nPlanet.query(on: database)\n    .field(\\.$id).field(\\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Non-Throwing Map - Swift\nDESCRIPTION: Example of a non-throwing map operation on a Future in SwiftNIO.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Non-throwing map.\nfutureA.map { a in\n    return b\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Heroku Database\nDESCRIPTION: Migrates the database on the Heroku application. This command uses the `App` command to interact with the Vapor application and execute the `migrate` command to apply the latest database migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --env production\n```\n\n----------------------------------------\n\nTITLE: Returning Failed Future with Abort Error\nDESCRIPTION: This snippet shows how to return a failed `EventLoopFuture` with an `Abort` error when throwing errors is not supported, specifically in older asynchronous contexts. It constructs a failed future using `req.eventLoop.makeFailedFuture`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = user else {\n    req.eventLoop.makeFailedFuture(Abort(.notFound))    \n}\nreturn user.save()\n```\n\n----------------------------------------\n\nTITLE: Vapor Application Lifecycle Handler in Swift\nDESCRIPTION: This snippet demonstrates how to register lifecycle handlers with Vapor's Application.  It defines a `Hello` struct conforming to `LifecycleHandler` which implements `willBoot`, `didBoot`, and `shutdown` methods to hook into the application's startup and shutdown events, logging messages at each stage.  It then registers the handler using `app.lifecycle.use(Hello())`. Dependencies: Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Imprime Hello! durante el arranque.\nstruct Hello: LifecycleHandler {\n    // Se llama antes de que se inicie la aplicación.\n    func willBoot(_ app: Application) throws {\n        app.logger.info(\"Hello!\")\n    }\n\n    // Se llama después de que se inicie la aplicación.\n    func didBoot(_ app: Application) throws {\n        app.logger.info(\"Server is running\")\n    }\n\n    // Se llama antes de que se apague la aplicación.\n    func shutdown(_ app: Application) {\n        app.logger.info(\"Goodbye!\")\n    }\n}\n\n// Añade el manejador del ciclo de vida\napp.lifecycle.use(Hello())\n```\n\n----------------------------------------\n\nTITLE: Setting Database Space for a Model\nDESCRIPTION: This code snippet shows how to define the schema and space for a Fluent model. The `schema` static property defines the database schema and the `space` static property defines the database space.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\npublic static let schema = \"planets\"\npublic static let space: String? = \"mirror_universe\"\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Typed GET Route (Swift)\nDESCRIPTION: Demonstrates specifying a return type for a GET route where the compiler cannot infer it. In this case the route returns a String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"foo\") { req -> String in\n\treturn \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with FileMiddleware from Bundle in Vapor (Swift)\nDESCRIPTION: Illustrates how to use `FileMiddleware` to serve static files from the bundle when running Vapor inside an Xcode project (like an iOS app). This middleware allows serving assets like stylesheets and images directly to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nlet file = try FileMiddleware(bundle: .main, publicDirectory: \"Public\")\n```\n\n----------------------------------------\n\nTITLE: Defining a HelloTag using parameters in Swift\nDESCRIPTION: This snippet defines the `HelloTag` which implements `UnsafeUnescapedLeafTag`. It extracts the name from the first parameter passed to the tag and returns a greeting string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case missingNameParameter\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.parameters[0].string else {\n            throw HelloTagError.missingNameParameter\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Package.swift file in Xcode\nDESCRIPTION: Opens the Package.swift file using Xcode, which triggers the Swift Package Manager to download and resolve project dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by ID Swift\nDESCRIPTION: This code demonstrates how to find a model instance by its ID using the `find(_:on:)` method. The first parameter is the ID to search for, and the second parameter is the database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.find(req.parameters.get(\"id\"), on: database)\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Registration for Vapor 4\nDESCRIPTION: This code snippet demonstrates how to register middleware in Vapor 4. Instead of creating a MiddlewareConfig and registering it with services, middleware can now be added directly to the Application's middleware property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// Registreer cors middleware\nlet corsConfiguration = CORSMiddleware.Configuration(\n    allowedOrigin: .all,\n    allowedMethods: [.POST, .GET, .PATCH, .PUT, .DELETE, .OPTIONS]\n)\nlet corsMiddleware = CORSMiddleware(configuration: corsConfiguration)\n- var middlewares = MiddlewareConfig() // Create _empty_ middleware config\n- middlewares.use(corsMiddleware)\n- services.register(middlewares)\n+ app.middleware.use(corsMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Endpoint as a Client with Vapor\nDESCRIPTION: This code snippet shows how to connect to a remote WebSocket endpoint using Vapor. The `WebSocket.connect` method is used to establish the connection. It requires the WebSocket URL (e.g., \"ws://echo.websocket.org\") and an `EventLoop`. Upon successful connection, the provided closure is executed, receiving the newly established WebSocket connection (`ws`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nWebSocket.connect(to: \"ws://echo.websocket.org\", on: eventLoop) { ws in\n    // Connected WebSocket.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the empty initializer for Fluent Models Swift\nDESCRIPTION: This code snippet shows the required empty initializer for Fluent models. Fluent internally requires this method to initialize models returned from queries or for reflection purposes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 初始化一个空的行星。\n    init() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Struct to Conform to Validatable\nDESCRIPTION: This extension allows you to add custom validation logic to a struct. The `validations` method is used to define validation rules for the `CreateUser` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension CreateUser: Validatable {\n    static func validations(_ validations: inout Validations) {\n        // Validations go here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Unique Constraint (Swift)\nDESCRIPTION: This code snippet shows how to delete a unique constraint from a schema using Fluent. It removes the unique constraint on the \"email\" field, allowing duplicate email addresses. This action is done during schema updates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n.deleteUnique(on: \"email\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Future Completion\nDESCRIPTION: This code snippet demonstrates how to synchronously wait for a future to complete using the `.wait()` method. This is a blocking operation and can throw an error if the future fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 返回一个 future 字符串\nlet futureString: EventLoopFuture<String> = ...\n\n/// 阻塞，直到字符串准备好\nlet string = try futureString.wait()\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: Login to Fly.io\nDESCRIPTION: This command authenticates the user with the Fly.io platform using the `flyctl` tool.  It opens a browser window for login and stores the authentication token for subsequent commands.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly auth login\n```\n\n----------------------------------------\n\nTITLE: Create a Vapor Project\nDESCRIPTION: This command uses the Vapor Toolbox to create a new Vapor project named 'HelloWorld'. The `-n` flag indicates that default options should be used during project creation, creating a bare bones project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nvapor new HelloWorld -n\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Application Identifier - Swift\nDESCRIPTION: This snippet configures the Apple application identifier for JWT verification.  This is a necessary step when working with Apple JWTs to ensure proper validation. The application identifier is set on the `app.jwt.apple.applicationIdentifier` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\n// Konfiguriere die Apple-App-Kennung.\napp.jwt.apple.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Manually getting an authenticated User in Swift\nDESCRIPTION: This snippet shows how to manually retrieve an authenticated `User` using `req.auth.get(_:)`. If no user is authenticated, this method will return nil instead of throwing an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet user = req.auth.get(User.self)\nprint(user?.name) // String?\n```\n\n----------------------------------------\n\nTITLE: Define Get User DTO (Swift)\nDESCRIPTION: This Swift code defines a `GetUser` DTO for formatting API responses when retrieving user information. It includes an `id` and a computed `name` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Structuur van GET /users antwoord.\nstruct GetUser: Content {\n    var id: UUID\n    var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting User Input from the Console (Swift)\nDESCRIPTION: This code snippet shows how to use the `context.console` to interact with the user. It asks for the user's name and then prints a greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name = context.console.ask(\"What is your \\(\"name\", color: .blue)?\")\ncontext.console.print(\"Hello, \\(name) 👋\")\n```\n\n----------------------------------------\n\nTITLE: Filtering with Contains Operator in Swift\nDESCRIPTION: Demonstrates how to filter string fields based on whether they contain a given substring using the `filter` method and contains operators. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database)\n    .filter(\\.$name =~ \"M\")\n```\n\n----------------------------------------\n\nTITLE: Configure Testable Method in Swift\nDESCRIPTION: This snippet demonstrates how to configure the testable method to use either in-memory or running mode for testing. The `.inMemory` option uses programmatic testing, while the `.running` option uses a live HTTP server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// 使用程序化测试。\napp.testable(method: .inMemory).test(...)\n\n// 通过一个实时的 HTTP 服务器运行测试。\napp.testable(method: .running).test(...)\n```\n\n----------------------------------------\n\nTITLE: Verifying JWTs with Key Identifier in Vapor (Swift)\nDESCRIPTION: This snippet shows how to verify a JWT using the signer specified by the 'kid' header. If no 'kid' header is present, the default signer will be used. This relies on the framework to lookup the signer based on the 'kid' value present in the JWT header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Verifieer met de ondertekenaar gespecificeerd door de \"kid\" header.\n// Als er geen \"kid\" header aanwezig is, zal de standaard ondertekenaar gebruikt worden.\nlet payload = try req.jwt.verify(as: TestPayload.self)\n```\n\n----------------------------------------\n\nTITLE: Adding Job Event Delegate to Application\nDESCRIPTION: This code snippet shows how to add a `JobEventDelegate` instance to the application's queues.  This registers the delegate to receive notifications about job events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.add(MyEventDelegate())\n```\n\n----------------------------------------\n\nTITLE: Initializing environment with custom arguments - Swift\nDESCRIPTION: This code snippet shows how to initialize the `Environment` with a custom name and an array of arguments. This can be used for testing purposes or when you want to simulate command-line argument passing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nlet env = Environment(name: \"testing\", arguments: [\"vapor\"])\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Pipelining in Vapor\nDESCRIPTION: This code enables support for HTTP pipelining, allowing multiple HTTP requests to be sent on a single TCP connection without waiting for the corresponding responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Admite HTTP pipelining.\napp.http.server.configuration.supportPipelining = true\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox with Homebrew\nDESCRIPTION: This snippet shows how to install Vapor Toolbox using Homebrew. It assumes that Homebrew is already installed on the system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.es.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Pipelining Support in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable support for HTTP request and response pipelining. The `supportPipelining` parameter controls whether pipelining is enabled.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// 启用管道支持。\napp.http.server.configuration.supportPipelining = true\n```\n\n----------------------------------------\n\nTITLE: Update Schema Swift\nDESCRIPTION: This snippet demonstrates how to update an existing schema. It adds a unique constraint on the \"name\" field and deletes the \"star_id\" field from the \"planets\" table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .unique(on: \"name\")\n    .deleteField(\"star_id\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Updating a Database Enum - Swift\nDESCRIPTION: This snippet demonstrates how to update an existing database enum. In this case, it deletes the \"gasGiant\" case from the \"planet_type\" enum using `.deleteCase(\"gasGiant\")` and persists the changes with `.update()`. This assumes that the enum has already been created.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// An example of enum update.\ndatabase.enum(\"planet_type\")\n    .deleteCase(\"gasGiant\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Streaming a file as an HTTP response asynchronously in Vapor\nDESCRIPTION: Streams a file as an HTTP response asynchronously using the `streamFile` method of the `req.fileio` object.  This sets appropriate headers like `ETag` and `Content-Type`. The returned `EventLoopFuture` is mapped to print the `Response` object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Transmite el archivo como una respuesta HTTP de forma asíncrona.\nreq.fileio.streamFile(at: \"/path/to/file\").map { res in\n    print(res) // Response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vapor Project with Toolbox\nDESCRIPTION: This command uses the Vapor Toolbox to create a new Vapor project in the current directory. The `-n` flag automatically selects \"no\" for all prompts, providing a basic template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.zh.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Attaching with IfNotExists Method (Swift)\nDESCRIPTION: This code demonstrates attaching to a Siblings relation only if the relationship doesn't already exist.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Only attaches if the relation doesn't already exist.\ntry await earth.$tags.attach(inhabited, method: .ifNotExists, on: database)\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Sessions Middleware - Swift\nDESCRIPTION: Adds the `SessionsMiddleware` to a specific group of routes. This limits session support to only the routes within the group.  Creates a new route group named `sessions` with the sessions middleware applied.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet sessions = app.grouped(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Getting Value from Redis using RedisClient in Swift\nDESCRIPTION: This snippet shows how to get a value from Redis using the RedisClient available through the Application instance. It retrieves a value associated with the key \"my_key\" and casts it as a String.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.it.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet value = try app.redis.get(\"my_key\", as: String.self).wait()\nprint(value)\n// Optional(\"my_value\")\n\n// oppure\n\nlet value = try await app.redis.get(\"my_key\", as: String.self)\nprint(value)\n// Optional(\"my_value\")\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in Terminal\nDESCRIPTION: This command demonstrates how to set an environment variable in the terminal using the `export` command. This allows the variable to be accessible to the Vapor application when it's run from the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport FOO=BAR\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Using Custom Response Type in Vapor Route\nDESCRIPTION: Demonstrates how to use the custom `HTML` type as a response in a Vapor route. The route returns an `HTML` instance with a simple HTML document, which Vapor automatically encodes into an HTTP response with the correct `Content-Type` header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napp.get { _ in\n  HTML(value: \"\"\"\n  <html>\n    <body>\n      <h1>Hello, World!</h1>\n    </body>\n  </html>\n  \"\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database\nDESCRIPTION: This snippet shows how to configure an SQLite database using Fluent. It creates a file-based SQLite database named `db.sqlite`. The `as: .sqlite` specifies the identifier for the SQLite database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport FluentSQLiteDriver\n\napp.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)\n```\n\n----------------------------------------\n\nTITLE: Scaling Application Service (Shell)\nDESCRIPTION: Scales the application service.  This command will scale the `test_app` to 5 replicas for testing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service scale test_app=5\n```\n\n----------------------------------------\n\nTITLE: View Docker container logs\nDESCRIPTION: This command retrieves and displays the logs for a specific Docker container. The `<container_id>` should be replaced with the actual ID of the container you want to inspect.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs <container_id>\n```\n\n----------------------------------------\n\nTITLE: XCTestCase Setup\nDESCRIPTION: Shows how to create a basic test case using XCTestCase, including importing XCTVapor and creating a class that extends `XCTestCase`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nimport XCTVapor\n\nfinal class MyTests: XCTestCase {\n    func testStub() throws {\n        // Prueba aquí.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding APNS Dependency to Package.swift\nDESCRIPTION: This code snippet demonstrates how to add the APNS dependency to your Package.swift file. It specifies the URL of the APNS package and adds it as a product dependency to the App target.  This is the first step in integrating APNS into your Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n         // Other dependencies...\n        .package(url: \"https://github.com/vapor/apns.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Other dependencies...\n            .product(name: \"VaporAPNS\", package: \"apns\")\n        ]),\n        // Other targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Plaintext\nDESCRIPTION: This code snippet shows how to use the plaintext password hasher for testing environments. This hasher is insecure and should not be used in production.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nswitch app.environment {\ncase .testing:\n    app.passwords.use(.plaintext)\ndefault: break\n}\n```\n\n----------------------------------------\n\nTITLE: Install Swift using Swiftly\nDESCRIPTION: This command installs the latest version of Swift using the Swiftly command-line tool. It fetches the latest stable Swift release, downloads and extracts the toolchain, and installs Swift successfully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.it.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ swiftly install latest\n\nFetching the latest stable Swift release...\nInstalling Swift 5.9.1\nDownloaded 488.5 MiB of 488.5 MiB\nExtracting toolchain...\nSwift 5.9.1 installed successfully!\n\n$ swift --version\n\nSwift version 5.9.1 (swift-5.9.1-RELEASE)\nTarget: x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Application Identifier and Domain - Swift\nDESCRIPTION: This snippet demonstrates how to configure the Google application identifier and G Suite domain name for JWT verification in a Vapor application using Swift. It sets the `app.jwt.google.applicationIdentifier` and `app.jwt.google.gSuiteDomainName` properties.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Configurar el identificador de la aplicación de Google y el nombre de dominio.\napp.jwt.google.applicationIdentifier = \"...\"\napp.jwt.google.gSuiteDomainName = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Async Verifying a Password\nDESCRIPTION: This snippet shows how to asynchronously verify a password against a digest using the `async` property on a password hasher. It is intended for use within a request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nreq.password.async.verify(\"vapor\", created: digest).map { bool in\n    // Resultaat afhandelen.\n}\n\n// of\n\nlet result = try await req.password.async.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Using Plaintext for Password Hashing\nDESCRIPTION: This example shows how to configure plaintext password hashing, which is only suitable for testing environments.  It checks the environment and only uses plaintext in the testing environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.zh.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nswitch app.environment {\ncase .testing:\n    app.passwords.use(.plaintext)\ndefault: break\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaf in Vapor 4\nDESCRIPTION: This code snippet shows how to configure Leaf (a templating engine) in Vapor 4.  Instead of registering a LeafProvider with services and preferring a LeafRenderer, the `app.views.use(.leaf)` property is used.  Disabling caching is done through the `app.leaf.cache.isEnabled` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n// Gebruik Leaf voor het renderen van views. \n- try services.register(LeafProvider())\n- config.prefer(LeafRenderer.self, for: ViewRenderer.self)\n+ app.views.use(.leaf)\n```\n\nLANGUAGE: diff\nCODE:\n```\n// Uitschakelen van de caching van de bladweergave.\n- services.register { container -> LeafConfig in\n-     return LeafConfig(tags: ..., viewsDir: ..., shouldCache: false)\n- }\n+ app.leaf.cache.isEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Registering Custom RedisSessionsDelegate in Vapor\nDESCRIPTION: This snippet demonstrates how to register a custom `RedisSessionsDelegate` in a Vapor application to customize how session data is stored in Redis. It defines a struct conforming to the `RedisSessionsDelegate` protocol and registers it with the application's sessions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Redis\n\nstruct CustomRedisSessionsDelegate: RedisSessionsDelegate {\n    // implementation\n}\n\napp.sessions.use(.redis(delegate: CustomRedisSessionsDelegate()))\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS/Amazon Linux\nDESCRIPTION: This snippet shows how to install Supervisor on CentOS or Amazon Linux using the yum package manager. It installs the supervisor package directly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nsudo yum install supervisor\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable via Export (Shell)\nDESCRIPTION: This command demonstrates how to set an environment variable `FOO` to the value `BAR` in the shell before running the Vapor application. This variable will then be accessible within the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport FOO=BAR\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Clone Vapor Toolbox Repository\nDESCRIPTION: This command clones the Vapor Toolbox repository from GitHub. This is the first step in building the Vapor command-line tool.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\n```\n\n----------------------------------------\n\nTITLE: Adding QueuesRedisDriver dependency in SwiftPM\nDESCRIPTION: Adds the `QueuesRedisDriver` as a dependency to a Swift Package Manager project. This allows the project to use Redis as a queue driver for Vapor Queues.  The snippet demonstrates how to add the dependency in the `Package.swift` manifest file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        /// Cualquier otra dependencia ...\n        .package(url: \"https://github.com/vapor/queues-redis-driver.git\", from: \"1.0.0\"),\n    ],\n    targets: [\n        .executableTarget(name: \"App\", dependencies: [\n            // Otras dependencias\n            .product(name: \"QueuesRedisDriver\", package: \"queues-redis-driver\")\n        ]),\n        .testTarget(name: \"AppTests\", dependencies: [.target(name: \"App\")])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic XCTestCase (Swift)\nDESCRIPTION: This snippet shows how to create a basic XCTestCase using XCTVapor.  It imports XCTVapor and defines a test class with a sample test function. Each function starting with `test` will be executed during testing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport XCTVapor\n\nfinal class MyTests: XCTestCase {\n    func testStub() throws {\n    \t// Test hier.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl on macOS\nDESCRIPTION: This command installs the `flyctl` command-line tool on macOS using the Homebrew package manager.  `flyctl` is the primary tool for interacting with the Fly.io platform and managing applications. It is essential for subsequent steps like logging in, launching, and deploying apps.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install flyctl\n```\n\n----------------------------------------\n\nTITLE: Opening the Project in Xcode\nDESCRIPTION: This command opens the Package.swift file in Xcode, which triggers Xcode to download the Swift Package Manager dependencies and allows the project to be built and run within the IDE.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.zh.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Route Specific Max Body Size\nDESCRIPTION: Configures the maximum size for streaming body collection for a specific route. Overrides the application-wide default for this route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Verzamelt streaming bodies (tot 1mb groot) voordat deze route wordt aangeroepen.\napp.on(.POST, \"listings\", body: .collect(maxSize: \"1mb\")) { req in\n    // Verzoek afhandelen. \n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Pong Event\nDESCRIPTION: This snippet shows how to listen for pong messages on a WebSocket connection using the `onPong` callback. The closure is executed when a pong message is received, indicating a response to a previously sent ping message. The closure receives the WebSocket instance (`ws`) as an argument.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nws.onPong { ws in\n    // 接收到了 Pong 消息。\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Swift using Swiftly CLI\nDESCRIPTION: This snippet shows how to install the latest stable Swift release using the Swiftly CLI tool. It fetches the latest release, downloads, extracts, and installs the Swift toolchain. It also verifies the installation by checking the Swift version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.zh.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ swiftly install latest\n\nFetching the latest stable Swift release...\nInstalling Swift 5.9.1\nDownloaded 488.5 MiB of 488.5 MiB\nExtracting toolchain...\nSwift 5.9.1 installed successfully!\n\n$ swift --version\n\nSwift version 5.9.1 (swift-5.9.1-RELEASE)\nTarget: x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response\nDESCRIPTION: This shows the http response to the dynamic vapor route\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 13\ncontent-type: text/plain; charset=utf-8\n\nHello, swift!\n```\n\n----------------------------------------\n\nTITLE: Configure release_command in fly.toml\nDESCRIPTION: This TOML snippet shows how to configure the `release_command` in the `fly.toml` file. This command will be executed before the main server process starts. It is used here to run database migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n release_command = \"migrate -y\"\n```\n\n----------------------------------------\n\nTITLE: Open HTTP Port\nDESCRIPTION: This command opens port 8080 on the server's firewall to allow HTTP traffic to reach the Vapor application. `sudo` is required to modify firewall rules.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo ufw allow 8080\n```\n\n----------------------------------------\n\nTITLE: Test Vapor endpoint with curl\nDESCRIPTION: This command uses curl to send an HTTP request to the Vapor application running on the specified IP address and port, verifying that the application is accessible and responding correctly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://134.122.126.139:8080\nIt works!\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Vapor\nDESCRIPTION: Registers a middleware globally, applying it to every route in the application.  This is done within the `configure(_:)` function.  The middleware `MyMiddleware()` needs to be defined elsewhere. It modifies all requests and responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(MyMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Increase streaming body collection limit\nDESCRIPTION: This snippet shows how to increase the default limit of streaming body collection size.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// 将流体收集限制增加到500kb\napp.routes.defaultMaxBodySize = \"500kb\"\n```\n\n----------------------------------------\n\nTITLE: OPTIONS Route (Swift)\nDESCRIPTION: Demonstrates using `app.on` to define an OPTIONS route. The handler's contents are omitted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// responds to OPTIONS /foo/bar/baz\napp.on(.OPTIONS, \"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Field with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to retrieve only a specific field from all records of a model using the `all(_:)` method on a Fluent query builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera todos los nombres de los planetas.\nlet names = try await Planet.query(on: database).all(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Returning Failed EventLoopFuture with Abort (Swift)\nDESCRIPTION: Illustrates how to return a failed `EventLoopFuture` with an `Abort` error. This is necessary in asynchronous contexts where throwing errors is not directly supported, such as within `flatMap` closures. This approach propagates the error through the future, allowing Vapor's error handling to catch and process it.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = user else {\n    req.eventLoop.makeFailedFuture(Abort(.notFound))    \n}\nreturn user.save()\n```\n\n----------------------------------------\n\nTITLE: Leaf Contains Tag Usage\nDESCRIPTION: Shows how to use the `#contains` tag to check if an array ('planets') contains a specific value ('Earth'). A conditional statement displays different messages based on whether the value is present or not.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_18\n\nLANGUAGE: leaf\nCODE:\n```\n#if(contains(planets, \"Earth\")):\n    Earth is here!\n#else:\n    Earth is not in this array.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Buildpack for Vapor\nDESCRIPTION: Sets the Heroku buildpack to vapor/vapor, which is designed to build and deploy Vapor applications. This tells Heroku how to handle the Swift-based Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:set vapor/vapor\n```\n\n----------------------------------------\n\nTITLE: Enable Case-Insensitive Routing in Vapor (Swift)\nDESCRIPTION: This snippet configures the Vapor application to handle routes in a case-insensitive manner.  This means that the router will match routes regardless of the case of the characters in the URL path. It affects `Constant` path components. No changes are made to the original request; the route handlers receive the request path components without modification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.routes.caseInsensitive = true\n```\n\n----------------------------------------\n\nTITLE: Filtering by Subset in Swift\nDESCRIPTION: Demonstrates how to filter query results based on whether a field's value is within a given set of values using the `filter` method with a subset operator. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database)\n    .filter(\\.$type ~~ [.gasGiant, .smallRocky])\n```\n\n----------------------------------------\n\nTITLE: Manual Authentication Require Swift\nDESCRIPTION: This code shows how to require an authenticated user in Vapor using `req.auth.require(_:)`. It throws an error if the user is not authenticated.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet user: User = try req.auth.require(User.self)\nprint(user.name) // String\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Builder in Fluent\nDESCRIPTION: This Swift code snippet shows how to create a query builder in Fluent using a database object and a model type (Planet.self). This allows for constructing queries for a specific model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Also creates a query builder.\ndatabase.query(Planet.self)\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Environment Variables\nDESCRIPTION: This snippet shows how to set environment variables directly within a Systemd service file.  These variables are then available to the Vapor application. Requires Systemd.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.nl.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nEnvironment=\"PORT=8123\"\nEnvironment=\"ANOTHERVALUE=/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Accessing All Routes (Swift)\nDESCRIPTION: Shows how to access all registered routes in the application using `app.routes.all`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nprint(app.routes.all) // [Route]\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox with Homebrew (macOS)\nDESCRIPTION: This shell command installs the Vapor Toolbox using Homebrew. The Toolbox provides a CLI for creating and managing Vapor projects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.es.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox with Homebrew\nDESCRIPTION: This command installs the Vapor Toolbox using Homebrew.  It installs the 'vapor' package.  Requires Homebrew to be installed and configured.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Finding the Minimum Planet Name Alphabetically in Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to find the lowest planet name when sorted alphabetically using Fluent's query API. It utilizes the `min(\\$name)` method to get the minimum value of the name field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Lowest name sorted alphabetically.\nPlanet.query(on: database).min(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This Swift code snippet demonstrates how to access environment variables within a Vapor application using the `Environment.get` method. It retrieves the value of the PORT environment variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Clone Vapor Toolbox Repository\nDESCRIPTION: This command clones the Vapor Toolbox repository from GitHub, which is necessary for installing and managing Vapor projects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\n```\n\n----------------------------------------\n\nTITLE: Hashing con SHA256 usando SwiftCrypto en Vapor (Swift)\nDESCRIPTION: Este snippet demuestra cómo calcular un hash SHA256 de una cadena usando SwiftCrypto, que está integrado en Vapor. Requiere la importación del módulo Vapor. El código calcula el hash de la cadena \"hello\" codificada en UTF-8 y luego imprime el resultado.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = SHA256.hash(data: Data(\"hello\".utf8))\nprint(digest)\n```\n\n----------------------------------------\n\nTITLE: Database Migration and Reversion\nDESCRIPTION: Demonstrates how to use `autoMigrate()` and `autoRevert()` to manage the database schema and data lifecycle during tests. This ensures that each test starts with a clean and consistent database state.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nprivate func withApp(_ test: (Application) async throws -> ()) async throws {\n    let app = try await Application.make(.testing)\n    app.databases.use(.sqlite(.memory), as: .sqlite)\n    do {\n        try await configure(app)\n        try await app.autoMigrate()\n        try await test(app)\n        try await app.autoRevert()   \n    }\n    catch {\n        try? await app.autoRevert()\n        try await app.asyncShutdown()\n        throw error\n    }\n    try await app.asyncShutdown()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation\nDESCRIPTION: This command is used to verify that the Vapor Toolbox has been successfully installed. It displays a list of available commands provided by the Toolbox.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.nl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Command Line in Vapor\nDESCRIPTION: Demonstrates how to set the log level using the `--log` flag when running the Vapor application. This allows for dynamic adjustment of the logging verbosity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --log debug\n```\n\n----------------------------------------\n\nTITLE: Logging within a Request in Vapor\nDESCRIPTION: Demonstrates how to access the request-specific logger within a Vapor route handler to log information associated with a particular request. This logger includes a unique UUID for tracking.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    req.logger.info(\"Hello, logs!\")\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Identifier Field (Swift)\nDESCRIPTION: This snippet demonstrates adding a field for a custom identifier using the `.field()` method with `.identifier` constraint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Adds field for custom identifier.\n.field(\"id\", .int, .identifier(auto: true))\n```\n\n----------------------------------------\n\nTITLE: Example HTML Response\nDESCRIPTION: This is an example of the HTML that is served by the Vapor application at the root endpoint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.nl.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Adding a Compound Unique Constraint with Fluent in Swift\nDESCRIPTION: This snippet adds a unique constraint on the combination of 'first_name' and 'last_name' fields. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n.unique(on: \"first_name\", \"last_name\")\n```\n\n----------------------------------------\n\nTITLE: Get Authenticated User in Vapor (Swift)\nDESCRIPTION: This code shows how to get the authenticated user in Vapor using req.auth.get(_:). If authentication fails, it does not throw an error and returns an optional user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet user = req.auth.get(User.self)\nprint(user?.name) // String?\n```\n\n----------------------------------------\n\nTITLE: Stream File as HTTP Response - Swift\nDESCRIPTION: This snippet demonstrates how to stream a file as an HTTP response using `req.fileio.streamFile`. The method automatically sets appropriate response headers like `ETag` and `Content-Type`. The result can be directly returned from a route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.zh.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// 异步流文件作为HTTP响应。\nreq.fileio.streamFile(at: \"/path/to/file\").map { res in\n    print(res) // 响应\n}\n\n// 或者\n\nlet res = req.fileio.streamFile(at: \"/path/to/file\")\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Key with Public PEM - Swift\nDESCRIPTION: This snippet demonstrates how to initialize an RSA key using a public key in PEM format. It requires the `Insecure.RSA.PublicKey` initializer, which takes the PEM string as input.  The key is then ready for use in JWT signing or verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet rsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0cOtPjzABybjzm3fCg1aCYwnx\nPmjXpbCkecAWLj/CcDWEcuTZkYDiSG0zgglbbbhcV0vJQDWSv60tnlA3cjSYutAv\n7FPo5Cq8FkvrdDzeacwRSxYuIq1LtYnd6I30qNaNthntjvbqyMmBulJ1mzLI+Xg/\naX4rbSL49Z3dAQn8vQIDAQAB\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Initialize an RSA key with public pem.\nlet key = try Insecure.RSA.PublicKey(pem: rsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Create .swift-version File\nDESCRIPTION: This command creates a `.swift-version` file in the project root, specifying the Swift version to use. Replace `5.8.1` with the desired Swift version for the project. This is important for the buildpack to use the correct swift version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \"5.8.1\" > .swift-version\n```\n\n----------------------------------------\n\nTITLE: Verify Vapor Toolbox Installation\nDESCRIPTION: Verifies that the Vapor Toolbox has been installed correctly by displaying the help information. The vapor --help command should output a list of available commands if the installation was successful.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.pl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Implementing the AsyncCommand Protocol\nDESCRIPTION: This Swift code demonstrates a basic implementation of the `AsyncCommand` protocol, including defining a `Signature`, `help` text, and the `run` method that prints a greeting to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct HelloCommand: AsyncCommand {\n    struct Signature: CommandSignature { }\n\n    var help: String {\n        \"Says hello\"\n    }\n\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context.console.print(\"Hello, world!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Spans with Manual Propagation in Vapor\nDESCRIPTION: Shows how to manually propagate span metadata using the `Request.serviceContext` property. This avoids the performance overhead of automatic propagation while still allowing you to create nested spans.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcess\") { req in\n    let result = try await fetch()\n    return try await withSpan(\"getNameParameter\", context: req.serviceContext) { _ in\n        try await process(result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Text Message via WebSocket (Swift)\nDESCRIPTION: This code shows how to send a text message over a WebSocket connection using the `ws.send` method. The method accepts a `String` as input, which represents the text message to be sent. The sending operation is asynchronous.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nws.send(\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Download and Add JWKS - Swift\nDESCRIPTION: This snippet demonstrates downloading a JSON Web Key Set (JWKS) from a URL, decoding it, and adding it to the application's JWT signers. This allows the application to verify JWTs using the keys provided in the JWKS.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport JWT\nimport Vapor\n\n// 下载 JWKS.\n// 如果需要，这可以异步完成。\nlet jwksData = try Data(\n    contentsOf: URL(string: \"https://appleid.apple.com/auth/keys\")!\n)\n\n// 对下载的 JSON 进行解码。\nlet jwks = try JSONDecoder().decode(JWKS.self, from: jwksData)\n\n// 创建签名者并添加 JWKS。\ntry app.jwt.signers.use(jwks: jwks)\n```\n\n----------------------------------------\n\nTITLE: Defining environment variables in fly.toml\nDESCRIPTION: This TOML snippet demonstrates how to define non-sensitive environment variables in the `fly.toml` file. Environment variables can be used to configure the application at runtime. These are set within the `[env]` section of the configuration file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  MAX_API_RETRY_COUNT = \"3\"\n  SMS_LOG_LEVEL = \"error\"\n```\n\n----------------------------------------\n\nTITLE: Blocking Code on the Event Loop in Vapor (Example)\nDESCRIPTION: This snippet shows an example of blocking code (`sleep(5)`) being executed directly on the event loop. This should be avoided as it can prevent the server from responding to other clients.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    /// Puts the event loop's thread to sleep.\n    sleep(5)\n    \n    /// Returns a simple string once the thread re-awakens.\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking out Vapor Toolbox Version\nDESCRIPTION: Navigates into the cloned Vapor Toolbox directory and checks out a specific version of the toolbox. This ensures consistency and avoids potential compatibility issues with newer or older versions. The specified version is 18.6.0.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd toolbox\ngit checkout 18.6.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with ID and Name (Swift)\nDESCRIPTION: This Swift code snippet showcases the creation of a simple database schema with an ID and a name field. It utilizes the Fluent framework to create a table or collection named \"planets\" with an auto-generated ID and a required string field named \"name\". It assumes a pre-existing database connection named `database`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Streaming Request Body\nDESCRIPTION: Configures a route to stream the request body instead of collecting it in memory. Useful for large requests like file uploads. `req.body.data` will be `nil` and `req.body.drain` should be used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// De inhoud van het verzoek wordt niet in een buffer verzameld.\napp.on(.POST, \"upload\", body: .stream) { req in\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Session Authenticator Creation\nDESCRIPTION: Creates a `SessionAuthenticator` for a model. By default, it uses the application's default database. You can specify a database by passing the identifier.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_41\n\nLANGUAGE: swift\nCODE:\n```\nUser.sessionAuthenticator()\n```\n\n----------------------------------------\n\nTITLE: Disabling Decompression Limit for Vapor Requests\nDESCRIPTION: This shows how to disable size limits on request decompression in Vapor.  This means that there is no limit to the decompressed size.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Sin límite de tamaño de descompresión\n.enabled(limit: .none)\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future String to an Integer with flatMapThrowing\nDESCRIPTION: This code snippet demonstrates using `flatMapThrowing` to convert a `futureString` to `futureInt`, throwing an error if the conversion fails. `flatMapThrowing` allows for throwing errors during the transformation of the future value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Map the future string to an integer\nlet futureInt = futureString.flatMapThrowing { string in\n    print(string) // The actual String\n    // Convert the string to an integer or throw an error\n    guard let int = Int(string) else {\n        throw Abort(...)\n    }\n    return int\n}\n\n/// We now have a future integer\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Dotenv File Example\nDESCRIPTION: This is an example `.env` file that contains a key-value pair. This file will be automatically loaded into the environment when the application boots.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nFOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Joining HomeTeam and AwayTeam Models in Fluent\nDESCRIPTION: This Swift code snippet shows how to join the HomeTeam and AwayTeam models to the Match model in a Fluent query.  It also filters results by a joined model, and sorts by another. Model aliases allow the same model to be joined multiple times.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch all matches where the home team's name is Vapor\n// and sort by the away team's name.\nlet matches = try await Match.query(on: self.database)\n    .join(HomeTeam.self, on: \\Match.$homeTeam.$id == \\HomeTeam.$id)\n    .join(AwayTeam.self, on: \\Match.$awayTeam.$id == \\AwayTeam.$id)\n    .filter(HomeTeam.self, \\.$name == \"Vapor\")\n    .sort(AwayTeam.self, \\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection (Swift)\nDESCRIPTION: This code demonstrates how to close a WebSocket connection using the `ws.close` method. This method initiates the closing handshake.  The operation is asynchronous.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nws.close()\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag Usage\nDESCRIPTION: Shows how to use the `#date` tag to display a formatted date.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_20\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #date(now)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Vapor App\nDESCRIPTION: This shell command builds a Docker image for a Vapor application using the `docker-compose.yml` file. It builds the image based on the instructions provided in the Dockerfile located in the same directory as the `docker-compose.yml` file. This command must be executed from the root directory of the Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Group routes with a path prefix using builder syntax\nDESCRIPTION: This snippet shows how to group routes with a path prefix using the `grouped` method, which returns a `RouteBuilder`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet users = app.grouped(\"users\")\n// GET /users\nusers.get { req in\n    ...\n}\n// POST /users\nusers.post { req in\n    ...\n}\n// GET /users/:id\nusers.get(\":id\") { req in\n    let id = req.parameters.get(\"id\")!\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag Usage\nDESCRIPTION: This snippet illustrates the use of the `#date` tag to format a date object (now) into a readable string. By default, it uses the ISO8601 format, and a custom format can be specified as a second parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_19\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #date(now)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Models in Batch Swift\nDESCRIPTION: This code shows how to create multiple models in a single batch using the `create(on:)` method on an array of models. This can improve performance by reducing the number of database queries.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// 批量创建示例。\n[earth, mars].create(on: database)\n```\n\n----------------------------------------\n\nTITLE: Hashing Data with SHA256 using SwiftCrypto in Vapor\nDESCRIPTION: This snippet demonstrates how to hash data using the SHA256 algorithm provided by SwiftCrypto within a Vapor application. It requires importing the Vapor module and converts the input string to UTF8 encoded data. The resulting hash digest is then printed to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet digest = SHA256.hash(data: Data(\"hello\".utf8))\nprint(digest)\n```\n\n----------------------------------------\n\nTITLE: Verifying Microsoft JWT - Swift\nDESCRIPTION: This snippet retrieves and verifies a Microsoft JWT from the authorization header using `req.jwt.microsoft.verify()`. It returns the `MicrosoftIdentityToken` after verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\n// Microsoft JWT aus dem Autorisierungs-Header abrufen und überprüfen.\napp.get(\"microsoft\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.microsoft.verify()\n    print(token) // MicrosoftIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Environment Variable (Shell)\nDESCRIPTION: This command shows how to set the log level using the `LOG_LEVEL` environment variable.  This allows configuring the log level without modifying the application code or command-line arguments.  The log level should be one of the supported SwiftLog levels (trace, debug, info, notice, warning, error, critical).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nexport LOG_LEVEL=debug\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: EventLoopFuture transform Transformation\nDESCRIPTION: This code snippet demonstrates the `transform` transformation on an EventLoopFuture. It transforms a void future to a future HTTP status, ignoring the original value. This is useful when only completion or failure is relevant.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a void future back from some API\nlet userDidSave: EventLoopFuture<Void> = ...\n\n/// Transform the void future to an HTTP status\nlet futureStatus = userDidSave.transform(to: HTTPStatus.ok)\nprint(futureStatus) // EventLoopFuture<HTTPStatus>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Leaf Tag in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to register a custom Leaf tag with the Vapor application using `app.leaf.tags`. This allows the tag to be used within Leaf templates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.leaf.tags[\"now\"] = NowTag()\n```\n\n----------------------------------------\n\nTITLE: Deploying Docker Stack (Shell)\nDESCRIPTION: Deploys a Docker stack using a Docker Compose file. The stack is named `test` and the configuration is loaded from `docker-compose.yml`. This command is used to deploy a multi-service application on a Docker Swarm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ndocker stack deploy -c docker-compose.yml test\n```\n\n----------------------------------------\n\nTITLE: Leaf Uppercased Tag Usage\nDESCRIPTION: Demonstrates how to use the `#uppercased` tag to convert a string to uppercase.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_13\n\nLANGUAGE: leaf\nCODE:\n```\n#uppercased(name)\n```\n\n----------------------------------------\n\nTITLE: Exit SSH session and Login as New User\nDESCRIPTION: These commands terminate the current SSH session and then establish a new SSH connection to the server using the newly created user 'vapor'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexit\nssh vapor@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection - Swift\nDESCRIPTION: This snippet shows the basic configuration of Redis in a Vapor application using a hostname.  It initializes a RedisConfiguration struct and assigns it to the app.redis.configuration property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet app = Application()\n\napp.redis.configuration = try RedisConfiguration(hostname: \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Logging within a Request Handler in Vapor\nDESCRIPTION: This code snippet demonstrates how to access the request's logger within a route handler. The `req.logger.info` method logs an informational message that includes a request-specific UUID, useful for tracing requests. The logger is accessed via the `req` object, which represents the incoming request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    req.logger.info(\"Hello, logs!\")\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag\nDESCRIPTION: Shows how to use the `#date` tag to format a date. The example shows default formatting, as well as custom formatting and time zone specification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nrender(..., [\"now\": Date()])\n```\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #date(now)\nThe date is #date(now, \"yyyy-MM-dd\")\nThe date is #date(now, \"yyyy-MM-dd\", \"America/New_York\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database Enum in Swift\nDESCRIPTION: This snippet shows how to delete a database enum. The `database.enum(\"planet_type\").delete()` method removes the \"planet_type\" enum from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Een voorbeeld van het wissen van een enum.\ndatabase.enum(\"planet_type\").delete()\n```\n\n----------------------------------------\n\nTITLE: Adding Arbitrary SQL to a Field with Fluent in Swift\nDESCRIPTION: This snippet adds arbitrary SQL to a field definition. It sets the default value of the 'active' field to true. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"active\", .bool, .required, .sql(.default(true)))\n```\n\n----------------------------------------\n\nTITLE: Defining a Leaf Tag Structure (NowTag) - Swift\nDESCRIPTION: This code snippet defines a `NowTag` struct, which conforms to the `LeafTag` protocol.  It serves as the basis for a custom Leaf tag that will display the current timestamp.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Validations to User Create Struct in Vapor (Swift)\nDESCRIPTION: This code adds validations to the User.Create struct to ensure that the name is not empty, the email is a valid email address, and the password has a minimum length of 8 characters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nextension User.Create: Validatable {\n    static func validations(_ validations: inout Validations) {\n        validations.add(\"name\", as: String.self, is: !.empty)\n        validations.add(\"email\", as: String.self, is: .email)\n        validations.add(\"password\", as: String.self, is: .count(8...))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Convenience Initializer in Swift\nDESCRIPTION: Shows how to define a convenience initializer for a Fluent model that accepts all properties as arguments.  This simplifies the creation of new instances of the model and eases future property additions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Maakt een nieuwe planeet aan met alle eigenschappen ingesteld.\n    init(id: UUID? = nil, name: String) {\n        self.id = id\n        self.name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Child Relationship in Fluent\nDESCRIPTION: This code snippet shows how to define an optional child relationship using the `@OptionalChild` property wrapper. It creates a one-to-one relationship between two models without storing any value on the root model. The `for` parameter specifies the key path to the parent relationship on the child model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 可选 child 关系示例。\n    @OptionalChild(for: \\.$planet)\n    var governor: Governor?\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a JWT (Swift)\nDESCRIPTION: This snippet shows how to verify a JWT from the `Authorization` header using `req.jwt.verify`. It retrieves the token, verifies its signature and claims, and returns the decoded payload as a `TestPayload` instance. If verification fails, a 401 Unauthorized error is thrown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Recupera y verifica JWT de la solicitud entrante.\napp.get(\"me\") { req async throws -> HTTPStatus in\n    let payload = try await req.jwt.verify(as: TestPayload.self)\n    print(payload)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Install Vapor Toolbox\nDESCRIPTION: This command builds the Vapor toolbox in release mode and then moves the resulting executable to `/usr/local/bin`, making it accessible from anywhere in the system. `sudo` is required to move the file to the `/usr/local/bin` directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nswift build -c release --disable-sandbox --enable-test-discovery\nsudo mv .build/release/vapor /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job from Command with Priority Swift\nDESCRIPTION: Dispatching job from Command with priority.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue(.emails)\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\"),\n                maxRetryCount: 3,\n                delayUntil: futureDate\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: List Running Docker Containers\nDESCRIPTION: This command lists all running Docker containers. It is used to verify that the application and its dependencies are running.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker container ls\n```\n\n----------------------------------------\n\nTITLE: Example Server Output\nDESCRIPTION: This is the console output expected when the Vapor server starts successfully. It displays the address where the server is running.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ko.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Printing Received Text Message via WebSocket\nDESCRIPTION: This snippet demonstrates how to print a received text message.  It receives the WebSocket instance and the message. It then prints the received `text` to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Fields Structure for a Group in Swift\nDESCRIPTION: Defines a `Pet` structure conforming to the `Fields` protocol. This structure contains two fields: `name` and `type`, both strings. It provides a basic initializer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// A pet with name and animal type.\nfinal class Pet: Fields {\n    // The pet's name.\n    @Field(key: \"name\")\n    var name: String\n\n    // The type of pet. \n    @Field(key: \"type\")\n    var type: String\n\n    // Creates a new, empty Pet.\n    init() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Driver Dependency\nDESCRIPTION: This snippet adds the Fluent MongoDB driver as a dependency to your Swift package, enabling your Vapor application to connect to MongoDB databases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent-mongo-driver.git\", from: \"1.0.0\"),\n```\n\n----------------------------------------\n\nTITLE: Create Procfile\nDESCRIPTION: This command creates a `Procfile` that tells Heroku how to run the Vapor application. The `Procfile` specifies the command to start the application, including setting the environment to production and binding to the port provided by Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"web: App serve --env production\" \\\n  \"--hostname 0.0.0.0 --port \\$PORT\" > Procfile\n```\n\n----------------------------------------\n\nTITLE: ByteBuffer Conversion to Data - Swift\nDESCRIPTION: This snippet demonstrates how to convert a `ByteBuffer` to `Data` in SwiftNIO, allowing you to work with the more performant byte storage type and then convert it to the standard `Data` type when needed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nData(buffer.readableBytesView)\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications in Vapor Route Handler\nDESCRIPTION: This snippet demonstrates sending a push notification within a Vapor route handler. It uses the request's APNS client to send the notification and returns an HTTP 200 OK status. It assumes that APNS is configured and the route is properly set up.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// Stuur een push notificatie.\napp.get(\"test-push\") { req async throws -> HTTPStatus in\n    try await req.apns.client.send(...)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: RedisSessionsDelegate Hash Example - Swift\nDESCRIPTION: This code snippet demonstrates an example implementation of the `redis(_:store:with:)` and `redis(_:fetchDataFor:)` methods of the `RedisSessionsDelegate` protocol, which store session data as a Hash in Redis. The `redis(_:store:with:)` function stores each data field as a separate hash field, while the `redis(_:fetchDataFor:)` function retrieves all hash fields and stores them in the SessionData container.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    store data: SessionData,\n    with key: RedisKey\n) -> EventLoopFuture<Void> {\n    // slaat elk gegevensveld op als een afzonderlijk hash-veld\n    return client.hmset(data.snapshot, in: key)\n}\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    fetchDataFor key: RedisKey\n) -> EventLoopFuture<SessionData?> {\n    return client\n        .hgetall(from: key)\n        .map { hash in\n            // hash is [String: RESPValue] dus we moeten proberen de\n            // waarde uit te pakken als een string en elke waarde in de data container op te slaan\n            return hash.reduce(into: SessionData()) { result, next in\n                guard let value = next.value.string else { return }\n                result[next.key] = value\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response with Middleware (Synchronous) in Vapor (Swift)\nDESCRIPTION: Demonstrates how to create middleware to modify the response by adding a custom header using the synchronous `Middleware` protocol. The middleware adds the `My-App-Version` header with the value `v2.5.9` to every response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.es.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        next.respond(to: request).map { response in\n            response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n            return response\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Queues Scheduler\nDESCRIPTION: This command shows how to start the queue scheduler, which is responsible for executing scheduled jobs. The scheduler must be run as a separate worker process.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nswift run App queues --scheduled\n```\n\n----------------------------------------\n\nTITLE: Deploy to Heroku\nDESCRIPTION: This command pushes the code to the Heroku Git repository, triggering a build and deployment of the application. The `heroku main` argument specifies the branch to deploy from.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\ngit push heroku main\n```\n\n----------------------------------------\n\nTITLE: Scheduling Helper Enum Example in Swift\nDESCRIPTION: This example shows how to utilize the helper enums for scheduling, for example, scheduling something yearly in January.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Cada año en enero\n.yearly().in(.january)\n\n// El primer día de cada mes\n.monthly().on(.first)\n\n// Cada domingo de la semana\n.weekly().on(.sunday)\n\n// Cada día a medianoche\n.daily().at(.midnight)\n```\n\n----------------------------------------\n\nTITLE: Start application with specified log level\nDESCRIPTION: This command starts the application with a specific log level (in this case, `trace`). The `LOG_LEVEL` environment variable configures the level of detail in the application's logs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nLOG_LEVEL=trace docker-compose up app\n```\n\n----------------------------------------\n\nTITLE: Use In-Memory Session Driver - Swift\nDESCRIPTION: Configures Vapor to use the in-memory session driver. In-memory sessions are suitable for testing as they don't persist data between application restarts and require no configuration. It's not recommended for production environments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\napp.sessions.use(.memory)\n```\n\n----------------------------------------\n\nTITLE: Using GuardMiddleware to protect a route group in Swift\nDESCRIPTION: This snippet shows how to use `GuardMiddleware` to ensure that a user is authenticated before reaching a route handler.  The `GuardMiddleware` is added to a route group alongside the `UserAuthenticator`.  This guarantees that `req.auth.require` will succeed in the route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet protected = app.grouped(UserAuthenticator())\n    .grouped(User.guardMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl on Linux\nDESCRIPTION: Installs the Fly CLI tool (flyctl) on Linux using a shell script provided by Fly.io. Flyctl is required to interact with the Fly.io platform.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://fly.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Running the Project on Linux\nDESCRIPTION: This command compiles and runs the Vapor project using the Swift command-line tools. It retrieves dependencies if necessary and then starts the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.zh.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Add SessionsMiddleware to Route Group - Swift\nDESCRIPTION: Adds the `SessionsMiddleware` to a specific route group in the Vapor application. This limits session support to only the routes within the group. This is useful when only a subset of routes require session management.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet sessions = app.grouped(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Backlog in Vapor\nDESCRIPTION: This snippet shows how to configure a custom backlog for the Vapor HTTP server. It sets the `backlog` property of the server configuration to a specific value. The default is `256`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Configure custom backlog.\napp.http.server.configuration.backlog = 128\n```\n\n----------------------------------------\n\nTITLE: Systemd Environment Variables\nDESCRIPTION: Shows how to directly add environment variables to the systemd service file. These variables can then be accessed by the Vapor application at runtime.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nEnvironment=\"PORT=8123\"\nEnvironment=\"ANOTHERVALUE=/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current directory in the terminal to the newly created Vapor project directory, allowing further actions to be performed within the project context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.zh.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Addresses for Redis Cluster in Swift\nDESCRIPTION: This snippet shows how to create an array of SocketAddress instances for connecting to a Redis cluster. It uses the makeAddressResolvingHost method to create SocketAddress instances from hostnames and ports.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.it.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet serverAddresses: [SocketAddress] = [\n  try .makeAddressResolvingHost(\"localhost\", port: RedisConnection.Configuration.defaultPort)\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL with TLS\nDESCRIPTION: This snippet configures MySQL to disable certificate verification for a local connection. This is useful for connecting to a MySQL database within Docker, but it is crucial to enable certificate verification in production environments by providing the appropriate certificates in `TLSConfiguration`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nvar tls = TLSConfiguration.makeClientConfiguration()\ntls.certificateVerification = .none\n    \napp.databases.use(.mysql(\n    hostname: \"localhost\",\n    username: \"vapor\",\n    password: \"vapor\",\n    database: \"vapor\",\n    tlsConfiguration: tls\n), as: .mysql)\n```\n\n----------------------------------------\n\nTITLE: Scale a Docker Service\nDESCRIPTION: This command scales a Docker service to a specific number of replicas. This is used to run database migrations in Swarm mode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ndocker service scale --detach test_migrate=1\n```\n\n----------------------------------------\n\nTITLE: Catch-All Route Component (Swift)\nDESCRIPTION: Demonstrates the catch-all route component, indicated by `**`. It matches one or more path components.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /foo/bar\n// responds to GET /foo/bar/baz\n// ...\napp.get(\"foo\", \"**\") { req in\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Random ECDSA Key (Swift)\nDESCRIPTION: This snippet shows how to generate a random ECDSA key using the `generate()` method. This can be useful for testing purposes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nlet key = try ECDSAKey.generate()\n```\n\n----------------------------------------\n\nTITLE: Signing JWT with Specific Key Identifier - Swift\nDESCRIPTION: This snippet demonstrates how to sign a JWT using a specific key identifier (kid). The `sign(payload:kid:)` method is used, providing the payload and the desired kid. This ensures that the JWT is signed with the key associated with the specified kid.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await req.jwt.sign(payload, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Model Middleware Example (Swift)\nDESCRIPTION: This code demonstrates how to create a `ModelMiddleware` to capitalize the name of a `Planet` model before it is created and print a message after creation. It utilizes the `create` lifecycle event. It uses the synchronous `EventLoopFuture` API.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// 名称大写的中间件示例。\nstruct PlanetMiddleware: ModelMiddleware {\n    func create(model: Planet, on db: Database, next: AnyModelResponder) -> EventLoopFuture<Void> {\n        // 在创建模型之前，可以在这里修改模型。\n        model.name = model.name.capitalized()\n        return next.create(model, on: db).map {\n            //一旦行星被创建，代码将被执行。\n            print (\"Planet \\(model.name) was created\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Access application routes\nDESCRIPTION: This snippet demonstrates how to access the application's routes using `app.routes.all`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nprint(app.routes.all) // [Route]\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection using async/await in Vapor\nDESCRIPTION: This snippet shows how to close a WebSocket connection using `async`/`await` for managing the asynchronous operation. The `await ws.close()` line ensures that the code execution pauses until the connection is completely closed before proceeding.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Translations in mkdocs.yml\nDESCRIPTION: This snippet demonstrates how to add navigation translations to the `mkdocs.yml` file. This allows translating the navigation components of the documentation site.\nSOURCE: https://github.com/vapor/docs/blob/main/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnav_translations:\n  # Structure\n  <language code>:\n    <keyword>: <translation>\n\n  # Example\n  nl:\n    Welcome: Welkom\n    Install: Installeren\n```\n\n----------------------------------------\n\nTITLE: Use Default HTTP Server in Vapor\nDESCRIPTION: This snippet shows how to explicitly specify that Vapor should use the built-in HTTP server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.servers.use(.http)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Shell\nDESCRIPTION: This code demonstrates how to set an environment variable in the shell before running a Vapor application. This allows for configuration values to be passed to the application without hardcoding them.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport FOO=BAR\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Route Parameters - Swift\nDESCRIPTION: This snippet shows how to define and access route parameters in Vapor 4 using named parameters.  It replaces the `Parameter` protocol with explicit parameter names.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"planets\", \":id\") { req in\n    let id = req.parameters.get(\"id\")\n     return \"Planet id: \\(id)\"\n }\n```\n\n----------------------------------------\n\nTITLE: JWT Route Group Authentication\nDESCRIPTION: Creates a route group that requires a `SessionToken` JWT for access, automatically fetching and verifying the token before the route is called.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_54\n\nLANGUAGE: swift\nCODE:\n```\n// Create a route group that requires the SessionToken JWT.\nlet secure = app.grouped(SessionToken.authenticator(), SessionToken.guardMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Creating a Star Model - POST Endpoint (Swift)\nDESCRIPTION: This Swift code creates a new `Star` model via a POST endpoint. It decodes the `Star` from the request and saves it to the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"stars\") { req async throws -> Star in\n    let star = try req.content.decode(Star.self)\n    try await star.create(on: req.db)\n    return star\n}\n```\n\n----------------------------------------\n\nTITLE: Convert EventLoopFuture to Async/Await with .get()\nDESCRIPTION: Demonstrates how to use `.get()` to convert an EventLoopFuture to an async/await compatible value. This allows integration with existing APIs that return EventLoopFuture. It blocks until the future completes and returns the result or throws an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nreturn someMethodCallThatReturnsAFuture().flatMap { futureResult in\n    // usar futureResult\n}\n```\n\nLANGUAGE: Swift\nCODE:\n```\nlet futureResult = try await someMethodThatReturnsAFuture().get()\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with Minimal Fields (Swift)\nDESCRIPTION: This snippet showcases a simplified schema creation with only essential fields, namely the id and name. It highlights the concise syntax for defining basic table structures using Fluent's schema builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// An example schema creation.\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Example .gitignore entry for environment files\nDESCRIPTION: This code snippet shows an example entry for the .gitignore file to exclude environment-specific files, ensuring sensitive information is not committed to the repository.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_7\n\nLANGUAGE: gitignore\nCODE:\n```\n.env.*\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation\nDESCRIPTION: This command is used to verify that the Vapor Toolbox has been successfully installed. It should print help information about the available vapor commands.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.de.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Build and Install Vapor Toolbox\nDESCRIPTION: This snippet builds the Vapor Toolbox in release mode, disabling the sandbox, enabling test discovery, and then moves the compiled binary to `/usr/local/bin` for system-wide access.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nswift build -c release --disable-sandbox --enable-test-discovery\nsudo mv .build/release/vapor /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Set macOS Platform Version in Package.swift\nDESCRIPTION: Sets the minimum macOS platform version to 12 in the Package.swift file. This is a prerequisite for using async/await in a Vapor project targeting macOS. It ensures that the deployment target supports the necessary concurrency features.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nplatforms: [\n   .macOS(.v12)\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This snippet shows how to access environment variables within a Vapor application using the `Environment.get` method. The code retrieves the value of the 'PORT' environment variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Vapor Transactions\nDESCRIPTION: This snippet demonstrates how to use `async`/`await` to perform a transaction in Vapor. It simplifies the syntax for asynchronous operations within the transaction, making the code more readable and maintainable. The return `.ok` is outside of the transaction scope.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.fr.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await req.db.transaction { transaction in\n    try await sun.save(on: transaction)\n    try await sirius.save(on: transaction)\n}\nreturn .ok\n```\n\n----------------------------------------\n\nTITLE: Running Vapor Commands with Help Option (Shell)\nDESCRIPTION: This command executes a Vapor application and uses the `--help` option to display available commands and options. It's useful for discovering the functionality provided by the application's CLI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift run App --help\n```\n\n----------------------------------------\n\nTITLE: Starting Vapor Application with Supervisor\nDESCRIPTION: These commands instruct Supervisor to reread its configuration files, add the 'hello' application to its managed processes, and start the 'hello' application. The `add` command may start the application immediately.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsupervisorctl reread\nsupervisorctl add hello\nsupervisorctl start hello\n```\n\n----------------------------------------\n\nTITLE: Initialize Docker Swarm\nDESCRIPTION: This command initializes a Docker Swarm on the current machine. This creates a manager node for the Swarm.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndocker swarm init\n```\n\n----------------------------------------\n\nTITLE: Configure Firewall for OpenSSH\nDESCRIPTION: This snippet configures the Ubuntu firewall (ufw) to allow OpenSSH connections and then enables the firewall.  This is a basic security measure to allow SSH access.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nufw allow OpenSSH\nufw enable\n```\n\n----------------------------------------\n\nTITLE: Defining a simple HTML wrapper struct in Swift\nDESCRIPTION: This code defines a simple `struct` called `HTML` that wraps a string. This is used in the example to showcase `ResponseEncodable`\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nstruct HTML {\n  let value: String\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting with Fallbacks in Fluent (Swift)\nDESCRIPTION: This snippet shows how to add fallback sorting criteria using multiple `sort` method calls.  If two users have the same name, they will be sorted by age. Requires a database connection (`database`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch users sorted by name. If two users have the same name, sort them by age.\nUser.query(on: database).sort(\\.$name).sort(\\.$age)\n```\n\n----------------------------------------\n\nTITLE: Launching a Vapor app on Fly.io\nDESCRIPTION: This command starts an interactive prompt to configure the settings of your Fly application, including name, region and database configuration. It creates a `fly.toml` configuration file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Adding JobEventDelegate to App - Swift\nDESCRIPTION: This code snippet demonstrates how to add a custom `JobEventDelegate` instance to the Vapor application's queues configuration. This will register the delegate to receive events for all jobs processed by the queues.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.add(MyEventDelegate())\n```\n\n----------------------------------------\n\nTITLE: Testing Queues with XCTQueue\nDESCRIPTION: This code snippet shows how to configure the application for testing with `XCTQueue` and `AsyncTestQueuesDriver`. This ensures deterministic testing by overriding the driver being used. The override is done in the `setUp` method and the app is shutdown in `tearDown` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfinal class UserCreationServiceTests: XCTestCase {\n    var app: Application!\n\n    override func setUp() async throws {\n        self.app = try await Application.make(.testing)\n        try await configure(app)\n\n        // Override the driver being used for testing\n        app.queues.use(.asyncTest)\n    }\n\n    override func tearDown() async throws {\n        try await self.app.asyncShutdown()\n        self.app = nil\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Response\nDESCRIPTION: This is the expected HTML output when accessing the default route of the Vapor application. It demonstrates a simple 'Hello, world!' message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ko.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Using Redis Sessions - Swift\nDESCRIPTION: Configures the application to use Redis for session storage. Requires Redis to be configured and accessible. Shows how to configure the sessions to use Redis with the default behavior.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Redis\n\napp.sessions.use(.redis)\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations Shell\nDESCRIPTION: This command runs the database migrations for the Vapor application. It checks for new migrations and applies them to the database. Requires Vapor CLI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswift run App migrate\n```\n\n----------------------------------------\n\nTITLE: Initializing Vapor Application for Testing (Swift)\nDESCRIPTION: This snippet demonstrates how to initialize a Vapor Application instance using the `.testing` environment. It includes a defer block to ensure the application is properly shut down after each test, releasing resources.  The `configure` function is called to apply the application's configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet app = Application(.testing)\ndefer { app.shutdown() }\ntry configure(app)\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with Abbreviated Environment Flag (Swift)\nDESCRIPTION: This command demonstrates how to use the abbreviated form `-e` of the `--env` flag to specify the environment in which to run the Vapor application. It's a shorter alternative to the full flag name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve -e prod\n```\n\n----------------------------------------\n\nTITLE: Configure Microsoft Application Identifier - Swift\nDESCRIPTION: This snippet configures the Microsoft application identifier, required for verifying Microsoft JWTs using Vapor's JWT library.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// 配置 Microsoft 应用标识符.\napp.jwt.microsoft.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Leaf UnsafeHTML Tag Usage\nDESCRIPTION: Demonstrates how to use the `#unsafeHTML` tag to render a variable without escaping HTML.  This should be used with caution to avoid XSS vulnerabilities.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_18\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #unsafeHTML(styledTitle)\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag with Custom Format\nDESCRIPTION: Demonstrates how to use the `#date` tag with a custom date format string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_21\n\nLANGUAGE: leaf\nCODE:\n```\nThe date is #date(now, \"yyyy-MM-dd\")\n```\n\n----------------------------------------\n\nTITLE: Using the NowTag in a Leaf template\nDESCRIPTION: This snippet demonstrates how to use the custom `NowTag` in a Leaf template to display the current time. The tag is called using `#now()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_3\n\nLANGUAGE: Leaf\nCODE:\n```\nThe time is #now()\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Vapor Server\nDESCRIPTION: This code enables TLS (SSL) for the Vapor HTTP server by providing a certificate chain and a private key. This configuration requires the NIOSSL dependency.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Habilitar TLS.\napp.http.server.configuration.tlsConfiguration = .makeServerConfiguration(\n    certificateChain: try NIOSSLCertificate.fromPEMFile(\"/path/to/cert.pem\").map { .certificate($0) },\n    privateKey: .privateKey(try NIOSSLPrivateKey(file: \"/path/to/key.pem\", format: .pem))\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching a Postgres database to Vapor App\nDESCRIPTION: Attaches an existing Postgres database instance on Fly.io to a Vapor application using the Fly CLI. The placeholder `name-of-your-postgres-app` must be replaced with the actual name of the postgres app.  This creates a database and user, and exposes the connection details via the `DATABASE_URL` environment variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly pg attach name-of-your-postgres-app\n```\n\n----------------------------------------\n\nTITLE: Creating a simple Leaf template\nDESCRIPTION: This snippet creates a simple Leaf template named `hello.leaf`. It displays a greeting using a variable named `name`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.md#_snippet_3\n\nLANGUAGE: leaf\nCODE:\n```\nHello, #(name)!\n```\n\n----------------------------------------\n\nTITLE: Transforming a Future String to Integer using map\nDESCRIPTION: This snippet shows how to use the `map` method to transform the value of a future string into a future integer. The closure accepts the string and returns the integer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet futureInt = futureString.map { string in\n    print(string) // De eigenlijke String\n    return Int(string) ?? 0\n}\n\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Master Template Importing Content\nDESCRIPTION: This snippet demonstrates the master template that imports the body content exported from the child template. The `#import(\"body\")` tag replaces itself with the exported content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_13\n\nLANGUAGE: leaf\nCODE:\n```\n<html>\n    <head>\n        <title>#(title)</title>\n    </head>\n    <body>#import(\"body\")</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: View Docker Service Logs\nDESCRIPTION: This command displays the logs for a specific Docker service. The `-f` flag follows the logs in real-time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ndocker service logs -f test_app\n```\n\n----------------------------------------\n\nTITLE: Sending a Text Message - Vapor (Swift)\nDESCRIPTION: This snippet demonstrates sending a text message over a WebSocket connection using the `send` method. The method takes a string as input, which is then sent as a text message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nws.send(\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Queue Priority - Swift\nDESCRIPTION: This snippet demonstrates how to specify a queue priority (or queue name) when dispatching a job. It shows how to extend the `QueueName` enum and then use the `queues(_:)` method to select a specific queue before dispatching the job. Using queue priorities allows jobs to be processed in different queues based on their requirements.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nextension QueueName {\n    static let emails = QueueName(string: \"emails\")\n}\n\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 一天\n    return req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        ).map { \"done\" }\n}\n\n// 或\n\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // 一天\n    try await req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        )\n    return \"done\"\n}\n```\n\nLANGUAGE: Swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue(.emails)\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\"),\n                maxRetryCount: 3,\n                delayUntil: futureDate\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Property in Fluent Model\nDESCRIPTION: This snippet shows how to set the `schema` property in a Fluent model. The `schema` property tells Fluent which table or collection the model corresponds to in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nstatic let schema = \"galaxies\"\n```\n\n----------------------------------------\n\nTITLE: Systemd Environment File\nDESCRIPTION: Illustrates how to configure environment variables using EnvironmentFile. Each line specifies a file containing environment variables that systemd will load.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nEnvironmentFile=/path/to/environment/file1\nEnvironmentFile=/path/to/environment/file2\n```\n\n----------------------------------------\n\nTITLE: Defining an Array Field (Swift)\nDESCRIPTION: This snippet demonstrates how to define a field that stores an array of strings. The `array(of:)` method is used to specify the array's element type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"tags\", .array(of: .string), .required)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Relationship ID in Fluent (Swift)\nDESCRIPTION: This snippet illustrates how to set the ID of a parent relationship. The `$star` property is a `ParentProperty` and its `id` property is used to assign the parent's ID. This ensures the relationship between the two models is correctly established in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Establece el id de la relación parent\nearth.$star.id = sun.id\n```\n\n----------------------------------------\n\nTITLE: Adding a Migration to App Migrations\nDESCRIPTION: This snippet shows how to add a migration to the `app.migrations` array in `configure.swift`. This registers the migration with Fluent, allowing it to be executed when the application migrates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\napp.migrations.add(CreateGalaxy())\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft App Identifier - Swift\nDESCRIPTION: This snippet configures the Microsoft application identifier for verifying Microsoft JWTs.  The `applicationIdentifier` property of the `app.jwt.microsoft` object is set to the appropriate value. This configuration is required before verifying Microsoft JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// Configure Microsoft app identifier.\napp.jwt.microsoft.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Fluent Query API Example Swift\nDESCRIPTION: This code snippet demonstrates a basic example of using Fluent's query API to fetch planets of type 'gasGiant', sort them by name, and include their associated star information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Een voorbeeld van Fluent's query API.\nlet planets = try await Planet.query(on: database)\n    .filter(\\.$type == .gasGiant)\n    .sort(\\.$name)\n    .with(\\.$star)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag with Timezone Formatting\nDESCRIPTION: Illustrates using the `#date` tag with a custom format string and timezone ID. The 'America/New_York' timezone is specified to render the date in that specific timezone.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_22\n\nLANGUAGE: leaf\nCODE:\n```\nThe date is #date(now, \"yyyy-MM-dd\", \"America/New_York\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Address Reuse in Vapor\nDESCRIPTION: This code snippet shows how to disable address reuse for the Vapor HTTP server.  The `app.http.server.configuration.reuseAddress` property is set to `false` to prevent reuse of local addresses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Disable address reuse.\napp.http.server.configuration.reuseAddress = false\n```\n\n----------------------------------------\n\nTITLE: Middleware Ordering Example in Vapor\nDESCRIPTION: Illustrates the order in which middleware is executed for requests and responses in Vapor. Application-level middleware is executed before route-specific middleware. Responses traverse the middleware in reverse order.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(MiddlewareA())\napp.middleware.use(MiddlewareB())\n\napp.group(MiddlewareC()) {\n\t$0.get(\"hello\") { req in\n\t\t\"Hello, middleware.\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting EventLoopFuture to Async/Await\nDESCRIPTION: This snippet demonstrates how to convert a function returning an `EventLoopFuture` to use `async`/`await`.  The `.get()` method is called on the future to synchronously wait for the result within an async context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResult = try await someMethodThatReturnsAFuture().get()\n```\n\n----------------------------------------\n\nTITLE: Setting Supported HTTP Versions in Vapor\nDESCRIPTION: This code snippet configures the Vapor HTTP server to only support HTTP/2. This setting affects which HTTP versions the server will accept connections from.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Solo soporta HTTP/2\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Replacing Default ErrorMiddleware (Swift)\nDESCRIPTION: Illustrates how to replace the default `ErrorMiddleware` with custom error handling logic.  This involves removing existing middleware and adding a custom error handling middleware as the first middleware in the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Remove all existing middleware.\napp.middleware = .init()\n// Add custom error handling middleware first.\napp.middleware.use(MyErrorMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Replacing ErrorMiddleware in Vapor (Swift)\nDESCRIPTION: This code snippet demonstrates how to replace the default `ErrorMiddleware` with custom error handling logic in Vapor. By removing the existing middleware and adding custom error handling middleware, developers can fully control how errors are processed and transformed into HTTP responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Verwijder alle bestaande middleware.\napp.middleware = .init()\n// Voeg eerst aangepaste foutafhandeling middleware toe.\napp.middleware.use(MyErrorMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Overriding Hostname Configuration via Command Line\nDESCRIPTION: This shell command demonstrates how to override the hostname configuration of the Vapor server using the `--hostname` flag when running the `serve` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Sobreescribiendo la configuración de hostname.\nswift run App serve --hostname dev.local\n```\n\n----------------------------------------\n\nTITLE: Run Vapor Project (Linux)\nDESCRIPTION: This command builds and runs the Vapor project from the command line. It requires Swift to be installed and configured on the system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.pl.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Anything Route Component (Swift)\nDESCRIPTION: Demonstrates the \"Anything\" route component, indicated by `*`. It matches any string in that location, but the value is discarded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /foo/bar/baz\n// responds to GET /foo/qux/baz\n// ...\napp.get(\"foo\", \"*\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Sessions in Vapor\nDESCRIPTION: This snippet demonstrates how to configure Vapor to use Fluent for storing session data in your application's database. Assumes Fluent has already been configured.  The session driver should be configured before adding the middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\napp.sessions.use(.fluent)\n```\n\n----------------------------------------\n\nTITLE: Build and Install Vapor Toolbox from Source\nDESCRIPTION: These commands clone the Vapor Toolbox repository, navigate into the directory, check out a specific version, and install the Toolbox using `make install`. Requires Git and Make to be installed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: HTTP Response with Dynamic Path\nDESCRIPTION: Example HTTP response from the route with a dynamic path component.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 13\ncontent-type: text/plain; charset=utf-8\n\nHello, swift!\n```\n\n----------------------------------------\n\nTITLE: Disable Address Reuse in Vapor\nDESCRIPTION: This snippet demonstrates how to disable address reuse for the Vapor HTTP server. It sets the `reuseAddress` property of the server configuration to `false`. The default is `true`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Disable address reuse.\napp.http.server.configuration.reuseAddress = false\n```\n\n----------------------------------------\n\nTITLE: Starting the Scheduled Queues Worker\nDESCRIPTION: This command is used to start a dedicated worker process for handling scheduled jobs.  This worker needs to be running for scheduled jobs to execute at their configured times.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nswift run App queues --scheduled\n```\n\n----------------------------------------\n\nTITLE: HTML struct definition in Swift\nDESCRIPTION: This code defines a simple `HTML` struct that wraps a `String` value. This is used as an example for implementing `ResponseEncodable` to customize HTTP responses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nstruct HTML {\n  let value: String\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an HMAC Key (Swift)\nDESCRIPTION: This snippet demonstrates how to add an HMAC key to the keychain using the `add(hmac:digestAlgorithm:)` method.  This is used for signing/verifying JWTs using HMAC-based algorithms like HS256, HS384, and HS512.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Agrega una clave HS256.\nawait app.jwt.keys.add(hmac: \"secret\", digestAlgorithm: .sha256)\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Decompression in Vapor\nDESCRIPTION: This code snippet shows how to enable HTTP request decompression using gzip for the Vapor HTTP server. The `requestDecompression` parameter controls the decompression of HTTP requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// 启用 HTTP 请求解压\napp.http.server.configuration.requestDecompression = .enabled\n```\n\n----------------------------------------\n\nTITLE: Run Swift Project (Linux/macOS)\nDESCRIPTION: Builds and runs the Vapor project using the Swift command-line tool. This command is suitable for Linux, other OSes, or macOS when not using Xcode. It compiles the project and starts the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ja.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Accessing Catch-all Parameters in Vapor\nDESCRIPTION: This example shows how to access catch-all parameters (captured by `**`) in a Vapor route handler.  It retrieves all the components matched by the wildcard and joins them into a single string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /hello/foo\n// responde a GET /hello/foo/bar\n// ...\napp.get(\"hello\", \"**\") { req -> String in\n    let name = req.parameters.getCatchall().joined(separator: \" \")\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Fly.io\nDESCRIPTION: This command initiates the login process to Fly.io using the `flyctl` command-line tool. It opens a browser window to authenticate the user with their Fly.io account. After successful authentication, the CLI is configured with the user's credentials.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly auth login\n```\n\n----------------------------------------\n\nTITLE: Build Vapor Toolbox from Source (macOS)\nDESCRIPTION: Builds and installs the Vapor Toolbox from source code using a Makefile. This involves cloning the repository, checking out a specific version, and running the `make install` command. Requires `git` and `make`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Generating a Range of HOTP Codes in Vapor\nDESCRIPTION: This snippet demonstrates how to generate a range of HOTP codes in Vapor to allow for clock drift or missed codes. The `range` parameter specifies the number of codes to generate before and after the given counter value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\n\n// 生成一个正确计数器窗口\nlet codes = hotp.generate(counter: 25, range: 2)\n```\n\n----------------------------------------\n\nTITLE: Leaf Capitalized Tag Usage\nDESCRIPTION: Demonstrates the use of the `#capitalized` tag to capitalize the first letter of each word in the string variable 'name'. This is commonly used for formatting names or titles.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_17\n\nLANGUAGE: leaf\nCODE:\n```\n#capitalized(name)\n```\n\n----------------------------------------\n\nTITLE: Read and Use a Database Enum with Fluent in Swift\nDESCRIPTION: This snippet reads an existing database enum and uses its type to define a new field named 'type' in the 'planets' schema. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.enum(\"planet_type\").read().flatMap { planetType in\n    database.schema(\"planets\")\n        .field(\"type\", planetType, .required)\n        .update()\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet planetType = try await database.enum(\"planet_type\").read()\ntry await database.schema(\"planets\")\n    .field(\"type\", planetType, .required)\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Route with CatchAll Component\nDESCRIPTION: Registers a route with a catch-all path component `**`. Shows how requests like `/foo/bar` and `/foo/bar/baz` are matched.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// reageert op GET /foo/bar\n// reageert op GET /foo/bar/baz\n// ...\napp.get(\"foo\", \"**\") { req in \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Warning Message\nDESCRIPTION: This snippet illustrates the warning message that appears when Xcode is not configured with a custom working directory for a Vapor project. It indicates that Vapor cannot find required files and folders due to Xcode running the project from the DerivedData directory instead of the project root.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.nl.md#_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n[ WARNING ] No custom working directory set for this scheme, using /path/to/DerivedData/project-abcdef/Build/\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Matching First and Last Names Using Fluent\nDESCRIPTION: This Swift code snippet demonstrates how to filter users based on whether their first name is equal to their last name using Fluent's query API. It uses the `filter` method with two field key paths.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// All users with same first and last name.\nUser.query(on: database)\n    .filter(\\.$firstName == \\.$lastName)\n```\n\n----------------------------------------\n\nTITLE: Adding VaporTesting to Package\nDESCRIPTION: Demonstrates how to add the VaporTesting module to the test target in your Package.swift file. It includes specifying the dependency on the Vapor package and adding VaporTesting as a product dependency for the test target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.110.1\")\n    ],\n    targets: [\n        ...\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"VaporTesting\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Constraint (Swift)\nDESCRIPTION: This code snippet demonstrates deleting a constraint by name using Fluent. It removes a constraint named \"no_duplicate_emails\" from the database schema. Constraint name are useful for managing and removing particular constraint when more than one constraint apply to a column.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n.deleteConstraint(name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Routes (Swift)\nDESCRIPTION: This snippet shows how to access and print all registered routes of the Vapor application. It uses the `app.routes.all` property to get an array of `Route` objects which can then be printed or further processed. This is helpful for debugging and understanding the application's routing configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nprint(app.routes.all) // [Route]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Decoder for One-Off Decoding\nDESCRIPTION: Creates a new `JSONDecoder` with a custom date decoding strategy (seconds since 1970) and uses it to decode a `Hello` struct from the request content using `req.content.decode`. This overrides the global decoder for this specific decoding operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// crea un nuevo JSON decoder que use fechas de marca de tiempo de Unix\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\n\n// decodifica el struct Hello usando un decodificador personalizado\nlet hello = try req.content.decode(Hello.self, using: decoder)\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Example in Swift\nDESCRIPTION: This is an example of a Package.swift manifest file, illustrating the structure and key configurations used in a Swift Package Manager project. It defines the package name, supported platforms, dependencies (including Vapor), and targets (App and AppTests). This manifest is crucial for managing project dependencies and building the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.ja.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Chunking Results Swift\nDESCRIPTION: This snippet retrieves all planets in chunks of up to 64 at a time, processing each chunk in a closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Haalt alle planeten op in stukken van maximaal 64 per keer.\nPlanet.query(on: self.database).chunk(max: 64) { planets in\n    // Behandel een stuk planeten.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ECDSA Public Key with PEM (Swift)\nDESCRIPTION: This snippet shows how to initialize an ECDSA public key from a PEM-encoded string.  This is useful for using pre-existing or externally generated ECDSA keys. The `ES256PublicKey(pem:)` initializer is used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet ecdsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2adMrdG7aUfZH57aeKFFM01dPnkx\nC18ScRb4Z6poMBgJtYlVtd9ly63URv57ZW0Ncs1LiZB7WATb3svu+1c7HQ==\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Inicializa una clave ECDSA con PEM público.\nlet key = try ES256PublicKey(pem: ecdsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Getting Route Parameter\nDESCRIPTION: This code snippet demonstrates how to retrieve a route parameter from the Request object using `req.parameters.get(\"name\")`.  It defines a route that takes a name parameter and returns a greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ECDSA Public Key from PEM in Swift\nDESCRIPTION: This snippet shows how to initialize an ECDSA public key from a PEM formatted string in Swift, using `ES256PublicKey`.  It requires a valid PEM encoded public key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet ecdsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2adMrdG7aUfZH57aeKFFM01dPnkx\nC18ScRb4Z6poMBgJtYlVtd9ly63URv57ZW0Ncs1LiZB7WATb3svu+1c7HQ==\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Initialize an ECDSA key with public PEM.\nlet key = try ES256PublicKey(pem: ecdsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Create .swift-version File\nDESCRIPTION: Creates a `.swift-version` file and specifies the Swift version to use for the Vapor application.  Replace `5.8.1` with the appropriate Swift version for your project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho \"5.8.1\" > .swift-version\n```\n\n----------------------------------------\n\nTITLE: Verify Swift Installation with Command Line\nDESCRIPTION: This shell command verifies the Swift installation and displays the Swift version installed on the system. It's used to confirm that Swift was installed correctly with Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.de.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Content hooks implementation in Swift\nDESCRIPTION: These snippets show implementations for `afterDecode` and `beforeEncode` hooks. These methods allow for custom logic to be executed after decoding and before encoding `Content` types. They are useful for data validation and modification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// Wordt uitgevoerd nadat deze inhoud is gedecodeerd. `muteren` is alleen nodig voor structs, niet voor klassen.\nmutating func afterDecode() throws {\n    // Naam mag niet worden doorgegeven, maar als dat wel het geval is, mag het geen lege string zijn.\n    self.name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines)\n    if let name = self.name, name.isEmpty {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n}\n\n// Wordt uitgevoerd voordat deze inhoud wordt gecodeerd. `muteren` is alleen nodig voor structs, niet voor klassen.\nmutating func beforeEncode() throws {\n    // Je moet *altijd* een naam teruggeven, en het mag geen lege string zijn.\n    guard \n        let name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines), \n        !name.isEmpty \n    else {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n    self.name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in fly.toml\nDESCRIPTION: This configuration snippet shows how to define non-sensitive environment variables within the fly.toml file.  These variables are used to configure the application's behavior at runtime.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  MAX_API_RETRY_COUNT = \"3\"\n  SMS_LOG_LEVEL = \"error\"\n```\n\n----------------------------------------\n\nTITLE: Set Session with HTTP Response\nDESCRIPTION: HTTP response example showing the `set-cookie` header that is automatically added to the response after adding data to `req.session`. The browser will store this cookie and send it with subsequent requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 0\nset-cookie: vapor-session=123; Expires=Fri, 10 Apr 2020 21:08:09 GMT; Path=/\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Field in a Model Swift\nDESCRIPTION: This code snippet demonstrates how to define an optional field in a Fluent model using the `@OptionalField` property wrapper.  This allows for fields that may not always be populated with a value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@OptionalField(key: \"tag\")\nvar tag: String?\n```\n\n----------------------------------------\n\nTITLE: Running App with Help Option\nDESCRIPTION: This shell command is used to display the default commands available in a Vapor application using the `--help` option.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift run App --help\n```\n\n----------------------------------------\n\nTITLE: View Fly logs\nDESCRIPTION: This command streams the logs from the Fly.io application. It displays real-time output from the application's processes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Create a new Vapor project\nDESCRIPTION: This command creates a new Vapor project using the Vapor Toolbox.  Replace `app-name` with the desired name for the application. The command will prompt for configuration options, including database selection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvapor new app-name\n```\n\n----------------------------------------\n\nTITLE: Systemd Environment Variable Configuration\nDESCRIPTION: This snippet demonstrates how to set environment variables directly within the systemd service file. The `Environment` directive is used to define key-value pairs that will be available to the Vapor application. Quoting the values is recommended but optional.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.es.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nEnvironment=\"PORT=8123\"\nEnvironment=\"ANOTHERVALUE=/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-completed Futures\nDESCRIPTION: This code snippet demonstrates how to create pre-completed futures with either a successful value or an error using the event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// 创造一个预先成功的 future。\nlet futureString: EventLoopFuture<String> = eventLoop.makeSucceededFuture(\"hello\")\n\n// 创造一个预先失败的 future。\nlet futureString: EventLoopFuture<String> = eventLoop.makeFailedFuture(error)\n```\n\n----------------------------------------\n\nTITLE: Defining a Fluent Model (Galaxy)\nDESCRIPTION: This code defines a `Galaxy` model with an ID and a name. It includes the schema name, property wrappers for the ID and name fields, and initializers for creating instances of the model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Galaxy: Model {\n    // 表或集合名。\n    static let schema = \"galaxies\"\n\n    // 星系唯一标识符。\n    @ID(key: .id)\n    var id: UUID?\n\n    // 星系名称。\n    @Field(key: \"name\")\n    var name: String\n\n    // 创建一个空的星系。\n    init() { }\n\n    // 创建一个新的星系并设置所有属性。\n    init(id: UUID? = nil, name: String) {\n        self.id = id\n        self.name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ValidatorResults for ZipCode Validation in Swift\nDESCRIPTION: This code snippet extends the `ValidatorResults` enum to include a `ZipCode` struct for representing the validation result of a zip code. It defines a boolean property `isValidZipCode` to indicate whether the input is a valid zip code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nextension ValidatorResults {\n    /// Represents the result of a validator that checks if a string is a valid zip code.\n    public struct ZipCode {\n        /// Indicates whether the input is a valid zip code.\n        public let isValidZipCode: Bool\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection with Promise (Swift)\nDESCRIPTION: This code demonstrates how to close a WebSocket connection using the `ws.close` method and a promise.  A promise is passed to the close method to be notified when the close operation completes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nws.close(promise: nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Route Metadata (Swift)\nDESCRIPTION: Demonstrates how to add metadata to a route using the `description` method. This metadata is stored in the `userInfo` dictionary of the `Route` object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req in\n\t...\n}.description(\"says hello\")\n```\n\n----------------------------------------\n\nTITLE: Log in to Heroku via CLI\nDESCRIPTION: This command is used to log in to your Heroku account through the command line interface. It prompts for your Heroku email and password.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\n----------------------------------------\n\nTITLE: Read-only Service Example in Vapor (Swift)\nDESCRIPTION: Demonstrates creating a read-only service in Vapor by extending the Request type. It defines a custom API struct `MyAPI` and adds a computed variable `myAPI` to the Request type to access it.  This allows accessing the API functionality directly from the request object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyAPI {\n    let client: Client\n\n    func foos() async throws -> [String] { ... }\n}\n\nextension Request {\n    var myAPI: MyAPI {\n        .init(client: self.client)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Relationship Manually in Swift\nDESCRIPTION: This snippet illustrates how to manually set a relationship between two models using the `value` property. This avoids an extra database query when the related model is already available. It binds a related model to the parent model as if it was eagerly or lazily loaded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nplanet.$star.value = star\n```\n\n----------------------------------------\n\nTITLE: Content hooks: beforeEncode and afterDecode - Swift\nDESCRIPTION: Illustrates the use of `beforeEncode` and `afterDecode` hooks, which are automatically called by Vapor before encoding and after decoding a `Content` object, respectively. These hooks can be used to perform validation or data transformation. The example shows how to trim whitespace from the `name` property and throw an error if the name is empty.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Runs before this Content is encoded. `mutating` is only required for structs, not classes.\nmutating func beforeEncode() throws {\n\n    guard \n        let name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines), \n        !name.isEmpty \n    else {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n    self.name = name\n}\n\n// Runs after this Content is decoded. `mutating` is only required for structs, not classes.\nmutating func afterDecode() throws {\n\n    self.name = self.name?.trimmingCharacters(in: .whitespacesAndNewlines)\n    if let name = self.name, name.isEmpty {\n        throw Abort(.badRequest, reason: \"Name must not be empty.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Vapor Server\nDESCRIPTION: This code snippet demonstrates how to manually start the Vapor server using the `app.server.start()` method. This allows for programmatically starting the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Start Vapor's server.\ntry app.server.start()\n```\n\n----------------------------------------\n\nTITLE: Checking Swift Version (macOS)\nDESCRIPTION: This command is used to check the installed Swift version on macOS. It opens the Terminal and prints the Swift version information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.nl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Vapor Server Startup Message\nDESCRIPTION: This output indicates that the Vapor server has successfully started and is listening for incoming requests on the specified address (127.0.0.1:8080). It confirms that the application is running and ready to serve content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Leaf Capitalized Tag\nDESCRIPTION: Shows the usage of the `#capitalized` tag which capitalizes the first letter of each word in a string, lowercasing the rest.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_17\n\nLANGUAGE: leaf\nCODE:\n```\n#capitalized(name)\n```\n\n----------------------------------------\n\nTITLE: Transforming Transaction Result to HTTP Status Swift\nDESCRIPTION: This code snippet demonstrates how to transform the result of a database transaction to an HTTP status code, indicating the completion status of the transaction. It uses the `.transform(to:)` method to achieve this.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.it.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.db.transaction { database in\n    // usa il database e esegui la transazione\n}.transform(to: HTTPStatus.ok)\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP No Delay for Vapor Server\nDESCRIPTION: This code enables the `tcpNoDelay` option, attempting to minimize TCP packet delay for the Vapor HTTP server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Minimizar el retraso de los paquetes.\napp.http.server.configuration.tcpNoDelay = true\n```\n\n----------------------------------------\n\nTITLE: Running Custom Command (Shell)\nDESCRIPTION: This command executes the registered `hello` command via the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswift run App hello\n```\n\n----------------------------------------\n\nTITLE: Rendering a Leaf View (Swift)\nDESCRIPTION: Registers a route that renders a Leaf view and passes data to it. The `req.view.render` method is used to render the view, passing the template name and a dictionary of data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.ja.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<View> in\n    return req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n\n// or\n\napp.get(\"hello\") { req async throws -> View in\n    return try await req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JWTPayload Structure in Swift\nDESCRIPTION: This snippet defines a custom payload structure conforming to the `JWTPayload` protocol. It includes properties for subject, expiration, and a custom boolean, along with a custom `verify` function to validate the expiration claim. The `CodingKeys` enum maps shortened keys for the JWT payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// JWT payload structure.\nstruct TestPayload: JWTPayload {\n    // Maps the longer Swift property names to the\n    // shortened keys used in the JWT payload.\n    enum CodingKeys: String, CodingKey {\n        case subject = \"sub\"\n        case expiration = \"exp\"\n        case isAdmin = \"admin\"\n    }\n\n    // The \"sub\" (subject) claim identifies the principal that is the\n    // subject of the JWT.\n    var subject: SubjectClaim\n\n    // The \"exp\" (expiration time) claim identifies the expiration time on\n    // or after which the JWT MUST NOT be accepted for processing.\n    var expiration: ExpirationClaim\n\n    // Custom data.\n    // If true, the user is an admin.\n    var isAdmin: Bool\n\n    // Run any additional verification logic beyond\n    // signature verification here.\n    // Since we have an ExpirationClaim, we will\n    // call its verify method.\n    func verify(using algorithm: some JWTAlgorithm) async throws {\n        try self.expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Authentication Get Swift\nDESCRIPTION: This code shows how to get an authenticated user in Vapor using `req.auth.get(_:)`. It returns an optional user, avoiding automatic error throwing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet user = req.auth.get(User.self)\nprint(user?.name) // String?\n```\n\n----------------------------------------\n\nTITLE: Route with any component\nDESCRIPTION: This snippet demonstrates how to define a route with a `*`.  The route matches `/foo/*/baz`. The value is discarded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /foo/bar/baz\n// responde a GET /foo/qux/baz\n// ...\napp.get(\"foo\", \"*\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Vapor Application Output\nDESCRIPTION: This HTML snippet represents the basic output of a Vapor application, displaying the text \"Hello, world!\" in a web browser. It serves as a confirmation that the application is running correctly and serving content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.es.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Update Dockerfile Swift Version\nDESCRIPTION: This diff shows how to update the Swift version in a Dockerfile from 5.2 to 5.5. This is necessary to use async/await when deploying Vapor applications in a Docker container.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-FROM swift:5.2-focal as build\n+FROM swift:5.5-focal as build\n...\n-FROM swift:5.2-focal-slim\n+FROM swift:5.5-focal-slim\n```\n\n----------------------------------------\n\nTITLE: Creating Hello Tag with data Swift\nDESCRIPTION: Implements a `HelloTag` that retrieves the name from the `data` property of the `LeafContext`.  It constructs a paragraph element with a greeting using the retrieved name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.data[\"name\"]?.string else {\n            throw HelloTagError.nameNotFound\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx TLS Configuration\nDESCRIPTION: This snippet demonstrates how to configure TLS (HTTPS) in Nginx using Let's Encrypt certificates. It includes settings for SSL certificates, protocols, ciphers, session management, and HTTP Strict Transport Security (HSTS).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ...\n\n    listen 443 ssl;\n\n    ssl_certificate /etc/letsencrypt/live/hello.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/hello.com/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    add_header Strict-Transport-Security max-age=15768000;\n\n    ...\n\n    location @proxy {\n       ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Inverse Siblings Relationship in Fluent\nDESCRIPTION: This code snippet shows the definition of the inverse side of a `@Siblings` relationship. It completes the many-to-many relationship by referencing the other model (`Planet`) through the same pivot model (`PlanetTag`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Tag: Model {\n    // siblings 关系示例。\n    @Siblings(through: PlanetTag.self, from: \\.$tag, to: \\.$planet)\n    public var planets: [Planet]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation\nDESCRIPTION: This snippet demonstrates how to verify the installation of the Vapor Toolbox by running the `vapor --help` command. It expects to see a list of available commands if the installation was successful.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.zh.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Arrays in Leaf\nDESCRIPTION: This snippet showcases how to iterate through an array in a Leaf template using the `#for` tag.  It iterates through the `planets` array and displays each planet in an unordered list.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_10\n\nLANGUAGE: leaf\nCODE:\n```\nPlanets:\n<ul>\n#for(planet in planets):\n    <li>#(planet)</li>\n#endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Generating a HOTP code in Vapor\nDESCRIPTION: This snippet demonstrates how to generate a HOTP (HMAC-based One-Time Password) code using Vapor. It initializes a symmetric key, creates a HOTP instance with specified parameters (digest algorithm and number of digits), and generates a code based on a counter value. Alternatively, the static generate function can be used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\nlet code = hotp.generate(counter: 25)\n\n// Of met behulp van de statische genereer functie\nHOTP.generate(key: key, digest: .sha256, digits: .six, counter: 25)\n```\n\n----------------------------------------\n\nTITLE: Checkout Git Branch\nDESCRIPTION: This command switches the current Git branch to the specified branch (e.g., main). This ensures that the correct branch is deployed to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Commit Heroku build files\nDESCRIPTION: These commands add and commit changes related to Heroku build files to the Git repository.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"adding heroku build files\"\n```\n\n----------------------------------------\n\nTITLE: Throwing Abort Errors in Vapor\nDESCRIPTION: This snippet shows how to throw `Abort` errors in Vapor to return specific HTTP status codes and reasons. It demonstrates throwing a `404 Not Found` error with the default reason and a `401 Unauthorized` error with a custom reason.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Error 404, motivo (reason) por defecto \"Not Found\" usado.\nthrow Abort(.notFound)\n\n// Error 401,motivo (reason) personalizada usado.\nthrow Abort(.unauthorized, reason: \"Invalid Credentials\")\n```\n\n----------------------------------------\n\nTITLE: Ignoring .env Files in Git (gitignore)\nDESCRIPTION: Suggests a pattern for ignoring specific environment files (like `.env.development`, `.env.production`) in `.gitignore`, to prevent sensitive information from being committed to version control. The `.env` template should be committed but populated with default values, not secrets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_6\n\nLANGUAGE: gitignore\nCODE:\n```\n.env.*\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditional Branches with elseif\nDESCRIPTION: This snippet demonstrates using the `#elseif` tag to create multiple conditional branches based on the value of the `title` variable.  Different messages are displayed depending on whether the title is \"Welcome\", \"Welcome back!\", or another value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_8\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    Hello new user!\n#elseif(title == \"Welcome back!\"):\n    Hello old user\n#else:\n    Unexpected page!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Pipelining in Vapor\nDESCRIPTION: This snippet illustrates how to enable support for HTTP request and response pipelining in the Vapor HTTP server. It sets the `supportPipelining` property of the server configuration to `true`. The default is `false`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Support HTTP pipelining.\napp.http.server.configuration.supportPipelining = true\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Content Structure in Swift\nDESCRIPTION: Defines a `Hello` struct to represent the expected structure of a URL query string. The `name` property is optional, reflecting that URL query string parameters are typically optional. The `Content` protocol adoption makes it usable with Vapor's Content API.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Hello: Content {\n    var name: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Environment Variable\nDESCRIPTION: This command shows how to set the log level using the `LOG_LEVEL` environment variable before running the Vapor application. This is useful for configuring the log level in deployment environments where command-line arguments may not be easily accessible.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nexport LOG_LEVEL=debug\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom RedisSessionsDelegate - Swift\nDESCRIPTION: This code snippet demonstrates how to register a custom `RedisSessionsDelegate` object to customize how session data is read from and written to Redis. It involves creating a struct that conforms to the `RedisSessionsDelegate` protocol and then registering it with the `app.sessions.use()` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Redis\n\nstruct CustomRedisSessionsDelegate: RedisSessionsDelegate {\n    // implementatie\n}\n\napp.sessions.use(.redis(delegate: CustomRedisSessionsDelegate()))\n```\n\n----------------------------------------\n\nTITLE: Showing Docker Service Logs (Shell)\nDESCRIPTION: Shows the logs for a service. This command streams logs from the `test_app` service in real-time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service logs -f test_app\n```\n\n----------------------------------------\n\nTITLE: Exit SSH Session\nDESCRIPTION: This command is used to exit the current SSH session. After exiting, you can log in with the newly created user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Setting a secret using fly secrets\nDESCRIPTION: This command sets a secret environment variable in Fly.io. Secrets are used to store sensitive information like API keys and passwords. Replace `MYSECRET` with the name of your secret and `A_SUPER_SECRET_VALUE` with its value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set MYSECRET=A_SUPER_SECRET_VALUE\n```\n\n----------------------------------------\n\nTITLE: Registering a Controller in Vapor with Swift\nDESCRIPTION: This code snippet demonstrates how to register a `TodosController` instance with the Vapor application.  It utilizes the `register(collection:)` method on the `app` object, making the controller's routes available within the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// [routes.swift]\n\ntry app.register(collection: TodosController())\n```\n\n----------------------------------------\n\nTITLE: Creating EdDSA Public and Private Keys from Coordinates in Swift\nDESCRIPTION: This snippet demonstrates how to create EdDSA public and private keys using their base-64 encoded coordinates. It uses the `EdDSA.PublicKey` and `EdDSA.PrivateKey` initializers, specifying the `ed25519` curve.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet publicKey = try EdDSA.PublicKey(x: \"0ZcEvMCSYqSwR8XIkxOoaYjRQSAO8frTMSCpNbUl4lE\", curve: .ed25519)\n\nlet privateKey = try EdDSA.PrivateKey(d: \"d1H3/dcg0V3XyAuZW2TE5Z3rhY20M+4YAfYu/HUQd8w=\", curve: .ed25519)\n```\n\n----------------------------------------\n\nTITLE: Setting Secrets with Flyctl\nDESCRIPTION: This command sets a sensitive value as an environment variable using the flyctl command-line tool. It is important to be cautious when setting secrets this way due to shell history.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set MYSECRET=A_SUPER_SECRET_VALUE\n```\n\n----------------------------------------\n\nTITLE: Using Hello Tag without parameters Leaf\nDESCRIPTION: Demonstrates using the `#hello` tag in a Leaf template without any parameters. The name will be retrieved from the data context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_9\n\nLANGUAGE: leaf\nCODE:\n```\n#hello()\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in Vapor\nDESCRIPTION: This code snippet demonstrates how to access cookies within a Vapor route handler. It retrieves a cookie named 'my-cookie', checks for its expiration, and returns its string value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"my-cookie\") { req -> String in\n    guard let cookie = req.cookies[\"my-cookie\"] else {\n        throw Abort(.badRequest)\n    }\n    if let expiration = cookie.expires, expiration < Date() {\n        throw Abort(.badRequest)\n    }\n    return cookie.string\n}\n```\n\n----------------------------------------\n\nTITLE: Define a route with a constant path component\nDESCRIPTION: This snippet illustrates how to define a route with static, constant path components. Only requests with the exact specified path will match this route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /foo/bar/baz\napp.get(\"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf UnsafeHTML Tag Usage\nDESCRIPTION: This snippet demonstrates the `#unsafeHTML` tag, which renders a variable without escaping HTML tags. Use this with caution to avoid XSS vulnerabilities.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_22\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #unsafeHTML(styledTitle)\n```\n\n----------------------------------------\n\nTITLE: Installing Swift on Fedora\nDESCRIPTION: This command installs the Swift programming language on Fedora using the dnf package manager. It's a quick way to set up Swift if you're using Fedora.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.de.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Navigate to the project directory\nDESCRIPTION: Navigates the user from the current directory to the newly created 'hello' directory using the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ja.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Swift Date Example for Date Tag\nDESCRIPTION: This snippet demonstrates passing a Date object from Swift to the Leaf template, for use with the `#date` tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nrender(..., [\"now\": Date()])\n```\n\n----------------------------------------\n\nTITLE: Initialize Git repository\nDESCRIPTION: This command initializes a new Git repository in the current directory. It is used to start tracking changes in your project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Successful Star Creation Response - JSON\nDESCRIPTION: This JSON shows the expected response after successfully creating a new star.  The `id` field represents the unique identifier generated by the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": ...,\n    \"name\": \"Sun\",\n    \"galaxy\": {\n        \"id\": ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Fields Group (Swift)\nDESCRIPTION: This Swift code defines a `Pet` struct conforming to the `Fields` protocol with `name` and `type` fields. This allows grouping these fields within another model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Een huisdier met naam en diersoort.\nfinal class Pet: Fields {\n    // De naam van het huisdier.\n    @Field(key: \"name\")\n    var name: String\n\n    // Het soort huisdier. \n    @Field(key: \"type\")\n    var type: String\n\n    // Maakt een nieuw, leeg huisdier aan.\n    init() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Fly via CLI\nDESCRIPTION: Authenticates the user with the Fly.io platform using the Fly CLI. This command opens a browser window for login and authorization.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly auth login\n```\n\n----------------------------------------\n\nTITLE: Create a Postgres database on Fly\nDESCRIPTION: This command creates a new Postgres database application on the Fly.io platform.  It sets up a dedicated application to provide database services.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly pg create\n```\n\n----------------------------------------\n\nTITLE: Content Structure with Data Property in Swift\nDESCRIPTION: Defines a `Profile` struct containing `name`, `email`, and an `image` property of type `Data`.  The `Content` protocol adoption makes it usable with Vapor's Content API, and `Data` is used for handling file uploads.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Profile: Content {\n    var name: String\n    var email: String\n    var image: Data\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request example with URL-Encoded Form\nDESCRIPTION: Example of an HTTP POST request with URL-encoded form data.  It sets the `content-type` to `application/x-www-form-urlencoded` and the body includes the encoded key-value pair.  This format is often used for submitting form data from web pages.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /greeting HTTP/1.1\ncontent-type: application/x-www-form-urlencoded\ncontent-length: 11\n\nhello=world\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in FlatMap - Swift\nDESCRIPTION: This snippet demonstrates how to handle errors within a flatMap operation by catching the error and returning a failed future. This allows you to propagate errors in asynchronous code without throwing.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Een gevangen fout als een toekomst teruggeven.\nfutureA.flatMap { a in\n    do {\n        try doSomething()\n        return futureB\n    } catch {\n        return eventLoop.makeFailedFuture(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Empty Initializer for a Fluent Model\nDESCRIPTION: This snippet showcases the required empty initializer for all Fluent models. Fluent uses this initializer to create new instances of the model, particularly when fetching data from the database or performing other ORM operations. Omitting this can lead to unexpected behavior.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ninit() { }\n```\n\n----------------------------------------\n\nTITLE: Leaf Template with Context Data\nDESCRIPTION: Example Leaf template utilizing data passed from a Swift context. It displays a title and iterates over an array of numbers using the `#for` tag. This shows how to access and render data within a Leaf template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_4\n\nLANGUAGE: leaf\nCODE:\n```\n<h1>#(title)</h1>\n#for(number in numbers):\n    <p>#(number)</p>\n#endfor\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Port in Vapor\nDESCRIPTION: This code snippet demonstrates how to configure a custom port for the Vapor HTTP server. By setting the `port` property of the server's configuration, you can specify the port on which the server will listen for new connections.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// 配置自定义端口。\napp.http.server.configuration.port = 1337\n```\n\n----------------------------------------\n\nTITLE: Verify Google JWT - Swift\nDESCRIPTION: This snippet retrieves and verifies a Google JWT from the Authorization header using the req.jwt.google.verify() method. It showcases both synchronous and asynchronous versions of the code for token retrieval.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// 从 Authorization 头获取并验证 Google JWT。\napp.get(\"google\") { req -> EventLoopFuture<HTTPStatus> in\n    req.jwt.google.verify().map { token in\n        print(token) // Google 身份令牌\n        return .ok\n    }\n}\n\n// 或\n\napp.get(\"google\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.google.verify()\n    print(token) // Google 身份令牌\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Server in Vapor\nDESCRIPTION: This code demonstrates how to replace the default HTTP server with a custom server implementation in Vapor, conforming to the `Server` protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nfinal class MyServer: Server {\n\t...\n}\n\napp.servers.use { app in\n\tMyServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose with Volumes (Shell)\nDESCRIPTION: Stops and removes containers and volumes that were started by `docker compose up`. This command additionally removes the persistent data volumes. Use with caution as data will be lost.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Command (Swift)\nDESCRIPTION: This code registers a custom command with the Vapor application, making it available via `swift run`. `HelloCommand` is registered as `hello`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.asyncCommands.use(HelloCommand(), as: \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Constraint on a Pivot Model in Fluent\nDESCRIPTION: This example shows how to prevent duplicate entries in the pivot table by defining a unique constraint on the combination of the foreign keys. This ensures that each relationship between two models is only represented once.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// 不允许重复的关系。\n.unique(on: \"planet_id\", \"tag_id\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Passwords using Request in Vapor\nDESCRIPTION: This snippet demonstrates how to verify a password against a stored hash using the `verify` method on a `Request` object. It checks if the provided plaintext password matches the given digest.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet bool = try req.password.verify(\"vapor\", created: digest)\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose (Shell)\nDESCRIPTION: Stops and removes containers that were started by `docker compose up`.  This command stops containers defined in docker-compose.yml.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Fedora\nDESCRIPTION: This snippet shows how to install Nginx on Fedora using the dnf package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install nginx\n```\n\n----------------------------------------\n\nTITLE: Committing Git Changes\nDESCRIPTION: Adds all changes to the Git staging area and commits them with a specified message. This prepares the changes for deployment to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"a description of the changes I made\"\n```\n\n----------------------------------------\n\nTITLE: Modeling a Job Object (AsyncJob Protocol) - Swift\nDESCRIPTION: This snippet demonstrates defining a job using the `AsyncJob` protocol with `async`/`await` syntax. This defines the same `EmailJob` as the prior example but uses async functions, which simplify the `dequeue` and `error` functions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.zh.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nstruct EmailJob: AsyncJob {\n    typealias Payload = Email\n    \n    func dequeue(_ context: QueueContext, _ payload: Email) async throws {\n        // 这是你要发送电子邮件的位置\n    }\n    \n    func error(_ context: QueueContext, _ error: Error, _ payload: Email) async throws {\n        // 如果你不想处理错误，只需 return。你也可以完全省略此功能。\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install flyctl on Linux\nDESCRIPTION: This command installs the `flyctl` command-line tool on Linux by downloading and executing an installation script. `flyctl` is the primary tool for managing Fly.io applications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://fly.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Checking if a Relation is Loaded\nDESCRIPTION: This snippet demonstrates how to check if a relation has been loaded using the `value` property. This allows you to conditionally access the related model to avoid errors if it hasn't been fetched yet.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nif planet.$star.value != nil {\n    // Relation has been loaded.\n    print(planet.star.name)\n} else {\n    // Relation has not been loaded.\n    // Attempting to access planet.star will fail.\n}\n```\n\n----------------------------------------\n\nTITLE: Set Session Data - Swift\nDESCRIPTION: Sets a value in the session data.  This example route handler accepts a dynamic route parameter and stores it in `req.session.data` under the key \"name\". New sessions are automatically initialized when data is added to `req.session`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"set\", \":value\") { req -> HTTPStatus in\n    req.session.data[\"name\"] = req.parameters.get(\"value\")\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: URLQueryEncoder Protocol in Swift\nDESCRIPTION: Defines the `URLQueryEncoder` protocol, which requires an `encode` function to encode an `Encodable` value to a `URI`. This facilitates creating custom encoders for URL query strings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol URLQueryEncoder {\n    func encode<E>(_ encodable: E, to url: inout URI) throws\n        where E: Encodable\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Count Tag Example\nDESCRIPTION: Demonstrates using the `#count` tag to display the number of matched pages in a search.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_14\n\nLANGUAGE: leaf\nCODE:\n```\nYour search matched #count(matches) pages.\n```\n\n----------------------------------------\n\nTITLE: Logging with Application Logger (Swift)\nDESCRIPTION: Shows how to access the application-wide logger for logging messages during application startup and configuration. This is useful for logging events not tied to a specific request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.logger.info(\"Setting up migrations...\")\napp.migrations.use(...)\n```\n\n----------------------------------------\n\nTITLE: Leaf ElseIf Example\nDESCRIPTION: Demonstrates using `#elseif` statements for multiple conditional checks in Leaf.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_8\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    Hello new user!\n#elseif(title == \"Welcome back!\"):\n    Hello old user\n#else:\n    Unexpected page!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Updating a Field's Data Type (Swift)\nDESCRIPTION: This snippet demonstrates how to update the data type of an existing field in a database schema using Fluent. It changes the data type of the field named \"age\" to a double. This code is intended for schema updates, where a pre-existing field needs to be modified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.updateField(\"age\", .double)\n```\n\n----------------------------------------\n\nTITLE: Enum definition with Codable conformance\nDESCRIPTION: Defines an enum `Color` with raw type String and conforms to the `Codable` protocol. This allows easy encoding and decoding of Color values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nenum Color: String, Codable {\n    case red, blue, green\n}\n```\n\n----------------------------------------\n\nTITLE: Generación de Código HOTP en Vapor (Swift)\nDESCRIPTION: Este snippet muestra cómo generar un código HOTP (HMAC-based One-time Password).  Requiere la importación del módulo Vapor.  Se inicializa una clave simétrica, se crea una instancia de HOTP y luego se genera un código basado en un contador.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\nlet code = hotp.generate(counter: 25)\n\n// O utilizando la función estática generate.\nHOTP.generate(key: key, digest: .sha256, digits: .six, counter: 25)\n```\n\n----------------------------------------\n\nTITLE: Building Vapor Toolbox from Source\nDESCRIPTION: These commands clone the Vapor Toolbox repository, navigate to the toolbox directory, checkout the desired version, and then build and install it using the make command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.nl.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Verify Vapor Toolbox Installation (Makefile)\nDESCRIPTION: This snippet shows how to verify the successful installation of Vapor Toolbox using the `vapor --help` command after installing it from the Makefile.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.es.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Product Dependency\nDESCRIPTION: This snippet adds the Fluent MongoDB driver as a product dependency to your application target. This is necessary to use the MongoDB driver in your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"FluentMongoDriver\", package: \"fluent-mongo-driver\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Route for OPTIONS Method in Vapor\nDESCRIPTION: This code snippet registers a route specifically for the HTTP OPTIONS method. It utilizes the `app.on` method to specify the HTTP method explicitly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// responde a OPTIONS /foo/bar/baz\napp.on(.OPTIONS, \"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Parameter Casting (Swift)\nDESCRIPTION: Demonstrates how `req.parameters.get` can automatically cast a route parameter to a `LosslessStringConvertible` type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// responds to GET /number/42\n// responds to GET /number/1337\n// ...\napp.get(\"number\", \":x\") { req -> String in\n\tguard let int = req.parameters.get(\"x\", as: Int.self) else {\n\t\tthrow Abort(.badRequest)\n\t}\n\treturn \"\\(int) is a great number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Leaf View with Vapor Swift\nDESCRIPTION: Registers a route in Vapor to render a Leaf view. This example shows two ways to render the view using closure-based route handlers, both synchronous and asynchronous versions are provided. It uses the `req.view.render` method to render the `hello.leaf` template, passing a dictionary with the 'name' variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<View> in\n    return req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n\n// or\n\napp.get(\"hello\") { req async throws -> View in\n    return try await req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Add Leaf Dependency - Swift Package Manager\nDESCRIPTION: Adds the Leaf package as a dependency to your Swift Package Manager (SPM) project. This allows you to use Leaf's templating capabilities within your Vapor application. The `url` specifies the location of the Leaf repository, and `from` specifies the minimum compatible version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.pl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n    dependencies: [\n        /// Inne zależności ...\n        .package(url: \"https://github.com/vapor/leaf.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            .product(name: \"Leaf\", package: \"leaf\"),\n            // Inne zależności\n        ]),\n        // Inne \"targety\" (cele)\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating to the newly created project directory\nDESCRIPTION: This command changes the current directory to the 'hello' directory created by the 'vapor new' command.  This is necessary to work within the newly created project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.it.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Switch Git branch\nDESCRIPTION: This command switches the current Git branch to the specified branch (in this case, 'main'). It allows you to work on different versions of your project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container (Shell)\nDESCRIPTION: Stops a running Docker container. Requires the container ID, which can be obtained from `docker container ls`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker container stop <container_id>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Vapor Environment in Swift\nDESCRIPTION: This code snippet shows how to extend the `Environment` enum to define a custom environment, such as `staging`. This allows for specific configurations tailored to different deployment stages.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nextension Environment {\n    static var staging: Environment {\n        .custom(name: \"staging\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration: Basic Proxy\nDESCRIPTION: This Nginx configuration file sets up a basic reverse proxy for a Vapor application. It listens on port 80 for the hello.com domain and forwards requests to 127.0.0.1:8080. It assumes the Vapor project binds to port 8080 in production mode. Requires Nginx to be installed. Vapor application should be running at 127.0.0.1:8080.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nserver {\n    server_name hello.com;\n    listen 80;\n\n    root /home/vapor/Hello/Public/;\n\n    location @proxy {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_pass_header Server;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_connect_timeout 3s;\n        proxy_read_timeout 10s;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: Demonstrates how to retrieve environment variables within a Vapor application using Environment.get. This allows the application to dynamically configure its behavior based on the environment it's running in.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Mocked Repositories for Testing in Vapor 4 (Swift)\nDESCRIPTION: Shows how to use a mocked repository in tests in Vapor 4.  A `TestUserRepository` is created that conforms to the `UserRepository` protocol. The mocked repository can then be used within tests by specifying the factory in the test setup.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\nfinal class TestUserRepository: UserRepository {\n    var users: [User]\n    let eventLoop: EventLoop\n\n    init(users: [User] = [], eventLoop: EventLoop) {\n        self.users = users\n        self.eventLoop = eventLoop\n    }\n\n    func all() -> EventLoopFuture<[User]> {\n        eventLoop.makeSuccededFuture(self.users)\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfinal class MyTests: XCTestCase {\n    func test() throws {\n        let users: [User] = []\n        app.users.use { TestUserRepository(users: users, eventLoop: $0.eventLoop) }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Password Hasher\nDESCRIPTION: This code snippet demonstrates how to set the password hasher for the Application using `app.passwords.use(...)`.  It imports the Vapor framework.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\napp.passwords.use(...)\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with Nested Tag\nDESCRIPTION: Demonstrates using another Leaf tag within a conditional statement. The example checks if the count of users is greater than zero using `#count(users)` inside the `#if` condition. Note the omission of `#` for the internal tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_7\n\nLANGUAGE: leaf\nCODE:\n```\n#if(count(users) > 0):\n    You have users!\n#else:\n    There are no users yet :(\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using a convenience initializer for Fluent Models Swift\nDESCRIPTION: This code snippet shows an example of a convenience initializer to setup all properties when initializing a Fluent model. It is suggested to add this convenience initializer to make it easier to add new properties to the model in the future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 初始化行星时设置所有属性。\n    init(id: UUID? = nil, name: String) {\n        self.id = id\n        self.name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection (Swift)\nDESCRIPTION: This snippet demonstrates how to close a WebSocket connection using the `ws.close` method. It returns a future that completes when the WebSocket is closed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nws.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Settings\nDESCRIPTION: Illustrates how to configure the underlying HTTP client using the `application` object.  This example disables automatic redirects. It's important to configure the client before its first use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// 禁止自动跳转\napp.http.client.configuration.redirectConfiguration = .disallow\n```\n\n----------------------------------------\n\nTITLE: Configure Postgres TLS connection in Vapor\nDESCRIPTION: Configures a TLS (Transport Layer Security) connection to a PostgreSQL database in a Vapor application. It retrieves the database URL from the environment variables and sets up a secure connection using a non-verified TLS configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nif let databaseURL = Environment.get(\"DATABASE_URL\") {\n    var tlsConfig: TLSConfiguration = .makeClientConfiguration()\n    tlsConfig.certificateVerification = .none\n    let nioSSLContext = try NIOSSLContext(configuration: tlsConfig)\n\n    var postgresConfig = try SQLPostgresConfiguration(url: databaseURL)\n    postgresConfig.coreConfiguration.tls = .require(nioSSLContext)\n\n    app.databases.use(.postgres(configuration: postgresConfig), as: .psql)\n} else {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checkout Vapor Toolbox Release\nDESCRIPTION: These commands change the current directory to the cloned Vapor Toolbox repository and checkout a specific release version (18.6.0 in this case).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd toolbox\ngit checkout 18.6.0\n```\n\n----------------------------------------\n\nTITLE: Redirecting a Request (Swift)\nDESCRIPTION: Demonstrates how to redirect a request to a new path using `req.redirect(to:)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\")\n```\n\n----------------------------------------\n\nTITLE: Using WhenComplete to Observe Future Completion\nDESCRIPTION: This snippet demonstrates using the `whenComplete` method to execute a callback when a future completes, either successfully or with an error. The callback receives a `Result` enum indicating the outcome of the future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nfutureString.whenComplete { result in\n    switch result {\n    case .success(let string):\n        print(string) // The actual String\n    case .failure(let error):\n        print(error) // A Swift Error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP Response Compression with Buffer Capacity\nDESCRIPTION: This snippet demonstrates how to configure HTTP response compression with an initial buffer capacity.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n.enabled(initialByteBufferCapacity: 1024)\n```\n\n----------------------------------------\n\nTITLE: Implementing RedisSessionsDelegate for Hash Storage (Swift)\nDESCRIPTION: This code shows how to implement the RedisSessionsDelegate protocol to store session data as a hash in Redis. It includes methods for storing and fetching session data, converting it to and from a dictionary of string key-value pairs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    store data: SessionData,\n    with key: RedisKey\n) -> EventLoopFuture<Void> {\n    // 将每个数据字段存储为单独的哈希字段\n    return client.hmset(data.snapshot, in: key)\n}\nfunc redis<Client: RedisClient>(\n    _ client: Client,\n    fetchDataFor key: RedisKey\n) -> EventLoopFuture<SessionData?> {\n    return client\n        .hgetall(from: key)\n        .map { hash in\n            // hash 是 [String: RESPValue] 这种类型，因此我们需要尝试解包为字符串\n            // 并将每个值存储在数据容器中\n            return hash.reduce(into: SessionData()) { result, next in\n                guard let value = next.value.string else { return }\n                result[next.key] = value\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Open Project in Xcode\nDESCRIPTION: This command opens the Package.swift file in Xcode, which triggers the Swift Package Manager to download project dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.pl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Example Project Path\nDESCRIPTION: This is an example of the output from the pwd command, showing the full path to the project directory. This path can then be used within Xcode's scheme editor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.de.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom Logger (Swift)\nDESCRIPTION: This code demonstrates how to create a custom logger instance with a specified label. It shows how to initialize a new `Logger` and log an informational message. Note that custom loggers lack request UUID metadata.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet logger = Logger(label: \"dev.logger.my\")\nlogger.info(...)\n```\n\n----------------------------------------\n\nTITLE: Set Heroku Buildpack\nDESCRIPTION: Sets the Heroku buildpack to `vapor/vapor`. This tells Heroku how to build and run the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:set vapor/vapor\n```\n\n----------------------------------------\n\nTITLE: Example .gitignore Entry for Environment Files\nDESCRIPTION: This is an example of how to exclude environment specific files from git using .gitignore.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_6\n\nLANGUAGE: gitignore\nCODE:\n```\n.env.*\n```\n\n----------------------------------------\n\nTITLE: Connecting to Application Instances via SSH\nDESCRIPTION: This command allows connecting to application instances using SSH. The -s flag likely refers to a specific server or instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console -s\n```\n\n----------------------------------------\n\nTITLE: Leaf DumpContext Tag\nDESCRIPTION: Illustrates how to use the `#dumpContext` tag for debugging purposes. This tag renders the entire context in a readable string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_21\n\nLANGUAGE: leaf\nCODE:\n```\nHello, world!\n#dumpContext\n```\n\n----------------------------------------\n\nTITLE: Build and Install Vapor Toolbox\nDESCRIPTION: These commands build the Vapor Toolbox in release mode, disabling the sandbox, and then moves the built binary to /usr/local/bin, making it globally accessible.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nswift build -c release --disable-sandbox --enable-test-discovery\nsudo mv .build/release/vapor /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Update Run Target in Package.swift\nDESCRIPTION: Updates the Run target in Package.swift to be an executable target. This is a required step for ensuring that the Vapor application can be executed directly. It defines the application entry point.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n.executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Fedora\nDESCRIPTION: This command installs the Supervisor process control system using the dnf package manager on Fedora.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install supervisor\n```\n\n----------------------------------------\n\nTITLE: Leaf Capitalized Tag Usage\nDESCRIPTION: This snippet demonstrates the `#capitalized` tag, which capitalizes the first letter of each word in a string. The input string (name) is passed as a parameter to the tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_17\n\nLANGUAGE: leaf\nCODE:\n```\n#capitalized(name)\n```\n\n----------------------------------------\n\nTITLE: Create New Vapor Project\nDESCRIPTION: This command uses the Vapor toolbox to create a new Vapor project named `HelloWorld`. The `-n` flag automatically answers 'no' to all configuration questions, creating a basic project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nvapor new HelloWorld -n\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on CentOS/Amazon Linux\nDESCRIPTION: This command installs Nginx on CentOS or Amazon Linux using the yum package manager.  It installs the nginx package from the configured repositories. No specific inputs or outputs beyond typical package manager behavior.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install nginx\n```\n\n----------------------------------------\n\nTITLE: Blocking the Event Loop with Sleep\nDESCRIPTION: This code snippet illustrates the problem of blocking the event loop with a synchronous `sleep` call. Calling `sleep` directly on the event loop thread will prevent it from processing other requests, leading to performance issues and delays.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    /// Puts the event loop's thread to sleep.\n    sleep(5)\n\n    /// Returns a simple string once the thread re-awakens.\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Fedora\nDESCRIPTION: This command installs Supervisor on Fedora using the dnf package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install supervisor\n```\n\n----------------------------------------\n\nTITLE: Planet Initializer with Star ID in Fluent (Swift)\nDESCRIPTION: This code shows an example of a Planet initializer that takes a Star.IDValue as input and sets the relationship using the key. This initializes the planet with a connection to the parent Star model by setting the star's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninit(name: String, starID: Star.IDValue) {\n    self.name = name\n    // ...\n    self.$star.id = starID\n}\n```\n\n----------------------------------------\n\nTITLE: Using whenComplete to Handle Future Results (Swift)\nDESCRIPTION: This snippet demonstrates how to use `whenComplete` to add a callback that will be executed when a future either succeeds or fails. It accesses the result of the future, handles both the success and failure cases, and prints the string or error accordingly. It requires an existing `futureString` of type `EventLoopFuture<String>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n/// Supongamos que recuperamos una cadena futura de alguna API\nlet futureString: EventLoopFuture<String> = ...\n\nfutureString.whenComplete { result in\n    switch result {\n    case .success(let string):\n        print(string) // La cadena del futuro\n    case .failure(let error):\n        print(error) // Un Error de Swift\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Invalid GET Request\nDESCRIPTION: Example GET request with an invalid email format in query parameters used to test email validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /users?age=4&email=foo&favoriteColor=green&name=Foo&username=foo HTTP/1.1\n\n```\n\n----------------------------------------\n\nTITLE: Setting the Environment in entrypoint.swift\nDESCRIPTION: This code snippet shows how to detect and set the environment within the `entrypoint.swift` file during application startup. It also shows how to bootstrap the logging system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@main\nenum Entrypoint {\n    static func main() async throws {\n        var env = try Environment.detect()\n        try LoggingSystem.bootstrap(from: &env)\n        \n        let app = Application(env)\n        defer { app.shutdown() }\n        \n        try await configure(app)\n        try await app.runFromAsyncMainEntrypoint()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Settings in Vapor\nDESCRIPTION: Demonstrates how to configure the underlying HTTP client, such as disabling automatic redirect following. Configuration must happen before the client is first used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.it.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// Disabilita il redirect automatico seguente.\napp.http.client.configuration.redirectConfiguration = .disallow\n```\n\n----------------------------------------\n\nTITLE: Add HMAC Signers with Key IDs - Swift\nDESCRIPTION: This snippet demonstrates adding two HMAC signers, each with a unique key identifier (kid). This is useful when using multiple signing algorithms and needing to distinguish between them during JWT verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// 添加名为 ”a“ 带有 SHA-256 的 HMAC 算法的签名者\napp.jwt.signers.use(.hs256(key: \"foo\"), kid: \"a\")\n// 添加名为 ”b“ 带有 SHA-256 的 HMAC 算法的签名者\napp.jwt.signers.use(.hs256(key: \"bar\"), kid: \"b\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Redis Channels in Pub/Sub Mode in Swift\nDESCRIPTION: This snippet shows how to subscribe to Redis channels using the Pub/Sub mode. It demonstrates creating subscriptions for channels \"channel_1\" and \"channel_2\", handling messages received, and handling unsubscription events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.it.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// crea 2 abbonamenti, uno per ogni canale fornito\napp.redis.subscribe\n  to: \"channel_1\", \"channel_2\",\n  messageReceiver: { channel, message in\n    switch channel {\n    case \"channel_1\": // fai qualcosa col messaggio\n    default: break\n    }\n  },\n  onUnsubscribe: { channel, subscriptionCount in\n    print(\"unsubscribed from \\(channel)\")\n    print(\"subscriptions remaining: \\(subscriptionCount)\")\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding EdDSA Key to Keychain in Swift\nDESCRIPTION: This snippet demonstrates how to add an EdDSA key to the keychain in Vapor. It calls `app.jwt.keys.add(eddsa: key)` to register the key for use with JWT operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nawait app.jwt.keys.add(eddsa: key)\n```\n\n----------------------------------------\n\nTITLE: Configuring the HTTP Client\nDESCRIPTION: This snippet shows how to configure the underlying HTTP client through the application. In this example, automatic redirection is disabled by setting the `redirectConfiguration` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Automatische doorverwijzing uitschakelen.\napp.http.client.configuration.redirectConfiguration = .disallow\n```\n\n----------------------------------------\n\nTITLE: Set Session with HTTP Request\nDESCRIPTION: HTTP request example showing how to set a session value by sending a GET request to the `/set/vapor` endpoint.  The server will return a `set-cookie` header with the session ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /set/vapor HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Leaf Tag Examples\nDESCRIPTION: Illustrates various uses of Leaf tags, including variable insertion, template extension, exporting and importing content, and looping through data. These examples showcase different ways to leverage Leaf's built-in tags.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_1\n\nLANGUAGE: leaf\nCODE:\n```\n#(variable)\n#extend(\"template\"): I'm added to a base template! #endextend\n#export(\"title\"): Welcome to Vapor #endexport\n#import(\"body\")\n#count(friends)\n#for(friend in friends): <li>#(friend.name)</li> #endfor\n```\n\n----------------------------------------\n\nTITLE: Checking Git Branch\nDESCRIPTION: Displays the current Git branch. This is important to ensure that the correct branch (e.g., main) is used for deployment to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in Memory\nDESCRIPTION: This snippet configures SQLite to use an in-memory database.  This is often used for testing purposes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.databases.use(.sqlite(.memory), as: .sqlite)\n```\n\n----------------------------------------\n\nTITLE: Filter Grouping Swift\nDESCRIPTION: This code shows an example of creating a filter group using the `.or` logic to find planets named either 'Earth' or 'Mars'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Alle planeten die Aarde of Mars heten\nPlanet.query(on: database).group(.or) { group in\n    group.filter(\\.$name == \"Earth\").filter(\\.$name == \"Mars\")\n}.all()\n```\n\n----------------------------------------\n\nTITLE: Delete Field Swift\nDESCRIPTION: This snippet shows how to delete a field from a schema. It removes the field named \"age\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n.deleteField(\"age\")\n```\n\n----------------------------------------\n\nTITLE: Deploy a Docker stack\nDESCRIPTION: This command deploys a stack of services defined in the `docker-compose.yml` file to a Docker Swarm. The stack is named `test` in this example.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy -c docker-compose.yml test\n```\n\n----------------------------------------\n\nTITLE: Example JWT Response in JSON\nDESCRIPTION: This snippet shows an example of a signed JWT returned in a JSON response.  The `token` field contains the base64 encoded JWT string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXBvciIsImV4cCI6NjQwOTIyMTEyMDAsImFkbWluIjp0cnVlfQ.lS5lpwfRNSZDvpGQk6x5JI1g40gkYCOWqbc3J_ghowo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Google Application and G Suite Domain - Swift\nDESCRIPTION: This snippet configures both the Google application identifier and the G Suite domain name, which are necessary for verifying Google JWTs using Vapor's JWT library.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// 配置 Google 应用标识符和域名。\napp.jwt.google.applicationIdentifier = \"...\"\napp.jwt.google.gSuiteDomainName = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Logging in to Fly.io\nDESCRIPTION: This command initiates the login process for the Fly.io CLI, allowing users to authenticate and manage their applications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly auth login\n```\n\n----------------------------------------\n\nTITLE: Redirecting a Request with Type (Swift)\nDESCRIPTION: Demonstrates how to redirect a request and specify the redirect type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\", type: .permanent)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Environment in Vapor\nDESCRIPTION: This snippet shows how to extend the `Environment` enum to define a custom environment, such as `staging`. This allows for environment-specific configuration based on the defined custom environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension Environment {\n    static var staging: Environment {\n        .custom(name: \"staging\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data Swift\nDESCRIPTION: This snippet demonstrates how to set data in a session. It retrieves a value from the route parameters and stores it in the session's data dictionary. Adding data to the `req.session.data` will automatically initialize a new session.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"set\", \":value\") { req -> HTTPStatus in\n    req.session.data[\"name\"] = req.parameters.get(\"value\")\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Redis Sessions Delegate in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to register a custom RedisSessionsDelegate in a Vapor application, allowing for customized data handling between Vapor sessions and Redis.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Redis\n\nstruct CustomRedisSessionsDelegate: RedisSessionsDelegate {\n    // implementation\n}\n\napp.sessions.use(.redis(delegate: CustomRedisSessionsDelegate()))\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection in Vapor\nDESCRIPTION: This code snippet shows how to close an established WebSocket connection using Vapor. The `ws.close()` method is called to initiate the closing of the connection. This method returns a Future that signals when the closing process is complete.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nws.close()\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Command with Help Option\nDESCRIPTION: This shell command is used to display the options and parameters available for a specific command in a Vapor application, such as `serve`, using the `--help` option.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --help\n```\n\n----------------------------------------\n\nTITLE: Adding Leaf Package Dependency (Swift)\nDESCRIPTION: Adds the Leaf package as a dependency to a Swift Package Manager project. This includes specifying the package URL and a minimum version requirement.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n    dependencies: [\n        /// Any other dependencies ...\n        .package(url: \"https://github.com/vapor/leaf.git\", from: \"4.4.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            .product(name: \"Leaf\", package: \"leaf\"),\n            // Any other dependencies\n        ]),\n        // Other targets\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Model Aliases in Vapor/Fluent (Swift)\nDESCRIPTION: Defines model aliases for `Team` model to be used in Fluent queries. `ModelAlias` protocol allows referencing the same model multiple times in a query.  The `name` property is a static string that represents the alias name and `model` is an instance of the aliased model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Ejemplo de alias de modelo.\nfinal class HomeTeam: ModelAlias {\n    static let name = \"home_teams\"\n    let model = Team()\n}\nfinal class AwayTeam: ModelAlias {\n    static let name = \"away_teams\"\n    let model = Team()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncCommand (Swift)\nDESCRIPTION: This snippet demonstrates the basic structure of an `AsyncCommand` implementation. It includes defining a `Signature` (which is empty in this simple case), help text, and the `run` method which contains the command's logic.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct HelloCommand: AsyncCommand {\n    struct Signature: CommandSignature { }\n\n    var help: String {\n        \"Says hello\"\n    }\n\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context.console.print(\"Hello, world!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting maxRetryCount for a Job using Async/Await Swift\nDESCRIPTION: This snippet demonstrates how to set the `maxRetryCount` when dispatching a queue job using async/await within a Vapor route handler. It dispatches an `EmailJob` with a specified payload and `maxRetryCount`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req async throws -> String in\n    try await req.queue.dispatch(\n        EmailJob.self, \n        .init(to: \"email@email.com\", message: \"message\"),\n        maxRetryCount: 3)\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading a Relationship in Fluent\nDESCRIPTION: This code shows how to lazily eager load a relationship using the `get(reload:on:)` method after the parent model has already been retrieved.  This retrieves the related model from the database (or cache) and allows synchronous access.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nplanet.$star.get(on: database).map {\n    print(planet.star.name)\n}\n\n// Or\n\ntry await planet.$star.get(on: database)\nprint(planet.star.name)\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP No Delay in Vapor\nDESCRIPTION: This code snippet enables the TCP No Delay option to minimize packet delay for the Vapor HTTP server. The `app.http.server.configuration.tcpNoDelay` property is set to `true`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Minimize packet delay.\napp.http.server.configuration.tcpNoDelay = true\n```\n\n----------------------------------------\n\nTITLE: Open Package.swift with Xcode\nDESCRIPTION: This command opens the 'Package.swift' file using the 'open' command on macOS, which defaults to opening the file with Xcode.  This allows Xcode to load the project and its dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.de.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Docker Image List Command\nDESCRIPTION: This shell command lists all Docker images available on the system. This is useful for verifying that the Docker image for the Vapor application was built successfully after running `docker compose build`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Example Server Output\nDESCRIPTION: This snippet represents the expected output in the console when the Vapor server starts successfully. It indicates the server is running and listening on the specified address and port.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.zh.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Echoing Received Text Messages (Swift)\nDESCRIPTION: This snippet demonstrates how to echo received text messages back to the sender. It uses the `ws.onText` callback to handle incoming text messages and then uses `ws.send` to send the same message back to the peer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Echo's van ontvangen berichten.\nws.onText { ws, text in\n    ws.send(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HOTP in Vapor\nDESCRIPTION: This snippet generates an HOTP (HMAC-based One-Time Password) using a symmetric key, SHA256 digest, and six-digit output. It shows both instance and static method generation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.it.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\nlet code = hotp.generate(counter: 25)\n\n// Oppure utilizzando la funzione statica generate\nHOTP.generate(key: key, digest: .sha256, digits: .six, counter: 25)\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This snippet demonstrates how to access environment variables in a Vapor application using `Environment.get`. The `PORT` environment variable is retrieved in this example.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to sort query results by a specific field using the `sort` method. It sorts planets by their names. The database connection (`database`) is required.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Fetch planets sorted by name.\nPlanet.query(on: database).sort(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Verifying Google JWT - Swift\nDESCRIPTION: This snippet retrieves and verifies a Google JWT from the authorization header. It uses the `req.jwt.google.verify()` method to handle the retrieval, decoding, and verification. The `GoogleIdentityToken` is returned upon successful verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\n// Google JWT aus der Autorisierungskopfzeile abrufen und überprüfen.\napp.get(\"google\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.google.verify()\n    print(token) // GoogleIdentityToken\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Field in Swift\nDESCRIPTION: Shows how to define an optional field property using the `@OptionalField` property wrapper in a Fluent model.  This is used for fields that can have a nil value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@OptionalField(key: \"tag\")\nvar tag: String?\n```\n\n----------------------------------------\n\nTITLE: Defining Field in Fluent Model\nDESCRIPTION: This snippet illustrates how to define a field in a Fluent model using the `@Field` property wrapper. The `key` parameter specifies the name of the field in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n@Field(key: \"name\")\nvar name: String\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Example in Swift\nDESCRIPTION: This is an example of a Package.swift manifest file, which is used by Swift Package Manager to define the package's name, platforms, dependencies, and targets. It specifies the minimum Swift tools version, the package's name, supported platforms, external dependencies (like Vapor), and the targets (executable and test targets) that the package contains.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request to Set Session Data\nDESCRIPTION: This is an example HTTP request to the `/set/vapor` route to initialize a session with the value \"vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /set/vapor HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Request with Content Encoding (Swift)\nDESCRIPTION: This snippet demonstrates how to send a test request with content encoding using the `beforeRequest` closure. It encodes a JSON payload in the request body and then decodes the response body as a `Todo` object, verifying the status and content. Vapor's Content API is used for encoding and decoding.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ntry app.test(.POST, \"todos\", beforeRequest: { req in\n\ttry req.content.encode([\"title\": \"Test\"])\n}, afterResponse: { res in\n    XCTAssertEqual(res.status, .created)\n    let todo = try res.content.decode(Todo.self)\n    XCTAssertEqual(todo.title, \"Test\")\n})\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Product Dependency\nDESCRIPTION: This snippet demonstrates how to add the Fluent MySQL driver as a product dependency to your target in Package.swift. This makes MySQL functionalities available in your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"FluentMySQLDriver\", package: \"fluent-mysql-driver\")\n```\n\n----------------------------------------\n\nTITLE: Scale application service in Swarm\nDESCRIPTION: Scales the application service `test_app` to 5 replicas in the Docker Swarm. `--detach` flag makes the scaling operation asynchronous.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ndocker service scale test_app=5\n```\n\n----------------------------------------\n\nTITLE: Writable Service with StorageKey in Vapor\nDESCRIPTION: This code demonstrates how to create a writable service in Vapor using `StorageKey` and an `Application` extension. It defines a `MyConfiguration` struct and a `MyConfigurationKey` to store the configuration. The `Application` extension provides a computed property to get and set the configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyConfiguration {\n    var apiKey: String\n}\n\nstruct MyConfigurationKey: StorageKey {\n    typealias Value = MyConfiguration\n}\n\nextension Application {\n    var myConfiguration: MyConfiguration? {\n        get {\n            self.storage[MyConfigurationKey.self]\n        }\n        set {\n            self.storage[MyConfigurationKey.self] = newValue\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cowsay Command with Arguments\nDESCRIPTION: This shell command shows how to execute the `cowsay` command with a message, eyes, and tongue specified as arguments and options.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nswift run App cowsay sup --eyes ^^ --tongue \"U \"\n```\n\n----------------------------------------\n\nTITLE: Converting EventLoopFuture to async/await (alternative)\nDESCRIPTION: This snippet shows converting an EventLoopFuture to async/await syntax, using a helper function to extract the value when available.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResult = try await someMethodThatReturnsAFuture().get()\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Logging System in Vapor\nDESCRIPTION: Demonstrates the standard way to bootstrap the logging system in Vapor using `LoggingSystem.bootstrap(from:)`. This configures the default logging handler based on command line arguments and environment variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on CentOS/Amazon Linux\nDESCRIPTION: This snippet shows how to install Nginx on CentOS and Amazon Linux using the yum package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install nginx\n```\n\n----------------------------------------\n\nTITLE: Checkout Specific Toolbox Version\nDESCRIPTION: This command navigates into the toolbox directory and checks out a specific release version (18.6.0 in this case). This ensures that a specific, known version of the toolbox is used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd toolbox\ngit checkout 18.6.0\n```\n\n----------------------------------------\n\nTITLE: Update Swift Version in Dockerfile (Diff)\nDESCRIPTION: This code snippet shows the diff for updating the Swift version in a Dockerfile to support async/await. It involves changing the base image to use Swift 5.5 or greater.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-FROM swift:5.2-focal as build\n+FROM swift:5.5-focal as build\n...\n-FROM swift:5.2-focal-slim\n+FROM swift:5.5-focal-slim\n```\n\n----------------------------------------\n\nTITLE: Verify Swift Installation\nDESCRIPTION: This command checks the installed Swift version to verify successful installation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ swift --version\n```\n\n----------------------------------------\n\nTITLE: Check Swift Version (macOS)\nDESCRIPTION: Checks the installed Swift version using the command line. This confirms that Swift is installed correctly and meets the minimum version requirement for Vapor (5.9 or greater). The output displays the Swift version details.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Set macOS Platform Version in Package.swift\nDESCRIPTION: This code snippet sets the target macOS platform version in the Package.swift file. Setting the macOS version is required to use async/await features on macOS.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nplatforms: [\n   .macOS(.v12)\n],\n```\n\n----------------------------------------\n\nTITLE: Basic Leaf Tag Example\nDESCRIPTION: Demonstrates a simple Leaf tag usage for displaying the number of users. The `#count` tag takes `users` as a parameter and outputs the count. The `#` symbol initiates the tag parser.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_0\n\nLANGUAGE: leaf\nCODE:\n```\nThere are #count(users) users.\n```\n\n----------------------------------------\n\nTITLE: Setting Timestamp Value Manually in Swift\nDESCRIPTION: Demonstrates accessing and setting the raw timestamp value directly using the `timestamp` property of the `@Timestamp` property wrapper.  This allows for manual manipulation of the timestamp value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Stel handmatig de tijdstempelwaarde in op deze\n// ISO 8601-geformatteerde @Timestamp.\nmodel.$updatedAt.timestamp = \"2020-06-03T16:20:14+00:00\"\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with JWT Authentication in Vapor\nDESCRIPTION: This snippet demonstrates how to configure the APNS client in a Vapor application using JWT authentication. It sets the authentication method, environment, and provides encoders/decoders for requests and responses.  It requires a private key, key identifier, and team identifier.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport APNS\nimport VaporAPNS\nimport APNSCore\n\n// Configureer APNS met JWT-authenticatie.\nlet apnsConfig = APNSClientConfiguration(\n    authenticationMethod: .jwt(\n        privateKey: try .loadFrom(string: \"<#key.p8 content#>\"\n),\n        keyIdentifier: \"<#key identifier#>\",\n        teamIdentifier: \"<#team identifier#>\"\n    ),\n    environment: .development\n)\napp.apns.containers.use(\n    apnsConfig,\n    eventLoopGroupProvider: .shared(app.eventLoopGroup),\n    responseDecoder: JSONDecoder(),\n    requestEncoder: JSONEncoder(),\n    as: .default\n)\n```\n\n----------------------------------------\n\nTITLE: Install Heroku CLI using Homebrew\nDESCRIPTION: This command installs the Heroku Command Line Interface (CLI) using Homebrew, a package manager for macOS. The command first taps the heroku/brew repository and then installs the heroku package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap heroku/brew && brew install heroku\n```\n\n----------------------------------------\n\nTITLE: Streaming a file as an HTTP response asynchronously with async/await in Vapor\nDESCRIPTION: Streams a file as an HTTP response asynchronously using the `streamFile` method with `async/await`. This sets appropriate headers like `ETag` and `Content-Type`. The resulting response is then printed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// O\nlet res = req.fileio.streamFile(at: \"/path/to/file\")\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Writing a ByteBuffer to a file asynchronously in Vapor\nDESCRIPTION: Writes a `ByteBuffer` to a file asynchronously using the `writeFile` method of the `req.fileio` object. The `ByteBuffer` contains the string \"Hello, world\".  The future returned will signal when the write has completed or if an error has occurred.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// Escribe un buffer a un archivo.\nreq.fileio.writeFile(ByteBuffer(string: \"Hello, world\"), at: \"/path/to/file\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Model Initializer in Swift\nDESCRIPTION: Demonstrates defining an empty initializer for a Fluent model. Fluent requires this empty initializer internally for initializing models returned by queries and for reflection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // Maakt een nieuwe, lege planeet aan.\n    init() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Public Key with PEM - Swift\nDESCRIPTION: This snippet demonstrates how to initialize an RSA public key using its PEM format in Swift. It uses the `Insecure.RSA.PublicKey` initializer to create the key from a PEM-formatted string. The `Insecure` namespace indicates that RSA is considered less secure and should be used with caution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet rsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0cOtPjzABybjzm3fCg1aCYwnx\nPmjXpbCkecAWLj/CcDWEcuTZkYDiSG0zgglbbbhcV0vJQDWSv60tnlA3cjSYutAv\n7FPo5Cq8FkvrdDzeacwRSxYuIq1LtYnd6I30qNaNthntjvbqyMmBulJ1mzLI+Xg/\naX4rbSL49Z3dAQn8vQIDAQAB\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Inicializa una clave RSA con pem público.\nlet key = try Insecure.RSA.PublicKey(pem: rsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Firewall Configuration for OpenSSH\nDESCRIPTION: Configures the Uncomplicated Firewall (UFW) to allow OpenSSH connections and then enables the firewall. This step is essential for securing the server by only allowing necessary traffic.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nufw allow OpenSSH\nufw enable\n```\n\n----------------------------------------\n\nTITLE: Requiring a Model ID Swift\nDESCRIPTION: This code shows how to obtain the non-optional ID of a Fluent model instance using the `requireID()` method. This method either returns the ID if it exists or throws an error if the ID is nil, which is common before the model is saved.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet id = try planet.requireID()\n```\n\n----------------------------------------\n\nTITLE: Example .env file - Shell\nDESCRIPTION: This shows the contents of a typical `.env` file, which defines environment variables as key-value pairs.  These variables can be accessed by the Vapor application when the application is run, using the dotenv functionality.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nFOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Disable HTTP/1 Support in Vapor\nDESCRIPTION: This snippet demonstrates how to disable HTTP/1 support for the Vapor HTTP server, leaving only HTTP/2 enabled. It modifies the `supportVersions` property of the server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Disable HTTP/1 support.\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Route Handler with EventLoopFuture\nDESCRIPTION: This snippet showcases a route handler that returns an `EventLoopFuture<String>`. It queries a user from the database, updates the user's last accessed time, and returns the user's name. This demonstrates the traditional way of handling asynchronous operations in Vapor before async/await.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req -> EventLoopFuture<String> in\n    User.query(on: req.db).first().unwrap(or: Abort(.notFound)).flatMap { user in\n        user.lastAccessed = Date()\n        return user.update(on: req.db).map {\n            return user.name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unique with Fluent in Swift\nDESCRIPTION: This snippet shows how to use the `unique()` method to return only unique values for a specified field. It retrieves all unique first names from the User model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\n// Devuelve todos los nombres de usuario únicos. \nUser.query(on: database).unique().all(\\.$firstName)\n```\n\n----------------------------------------\n\nTITLE: Modify Response Headers (Synchronous) in Vapor\nDESCRIPTION: Demonstrates how to modify a response by adding a custom header using middleware in Vapor. It implements the `Middleware` protocol and adds the `My-App-Version` header to the response before sending it to the client.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct AddVersionHeaderMiddleware: Middleware {\n    func respond(to request: Request, chainingTo next: Responder) -> EventLoopFuture<Response> {\n        next.respond(to: request).map { response in\n            response.headers.add(name: \"My-App-Version\", value: \"v2.5.9\")\n            return response\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating APNSAlertNotification - Swift\nDESCRIPTION: This snippet shows how to construct an `APNSAlertNotification` object, including setting the title, subtitle, expiration, priority, topic, and payload.  It exemplifies the basic structure for defining the notification content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n```\n\n----------------------------------------\n\nTITLE: Create User HTTP Request\nDESCRIPTION: This is an example HTTP request to create a new user using the POST /users endpoint. It includes the user's name, email, password, and confirmPassword in the request body.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /users HTTP/1.1\nContent-Length: 97\nContent-Type: application/json\n\n{\n    \"name\": \"Vapor\",\n    \"email\": \"test@vapor.codes\",\n    \"password\": \"secret42\",\n    \"confirmPassword\": \"secret42\"\n}\n```\n\n----------------------------------------\n\nTITLE: View Docker service logs\nDESCRIPTION: This command displays the logs for a specific service in the Docker Swarm. The `-f` flag follows the logs in real-time, showing updates as they occur.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ndocker service logs -f test_app\n```\n\n----------------------------------------\n\nTITLE: Establishing SSH Connection\nDESCRIPTION: This command allows establishing a secure shell (SSH) connection to the instances of the deployed Vapor application.  It enables direct interaction with the application's environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nfly ssh console -s\n```\n\n----------------------------------------\n\nTITLE: Enum Definition for Color\nDESCRIPTION: Defines a Swift enum called `Color` that conforms to `String` and `Codable` protocols. This enum represents a set of predefined colors (red, blue, green). It's used as a property type in the `CreateUser` struct for validating favorite color.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nenum Color: String, Codable {\n    case red, blue, green\n}\n```\n\n----------------------------------------\n\nTITLE: Prepending Middleware in Vapor\nDESCRIPTION: This code shows how to prepend a middleware to run before Vapor's default middleware. The `at: .beginning` parameter is used to insert the middleware at the beginning of the middleware chain.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(someMiddleware, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Leaf UnsafeHTML Tag\nDESCRIPTION: Shows the usage of the `#unsafeHTML` tag, which renders a variable without escaping any HTML it may contain.  This should be used with caution to prevent XSS attacks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_20\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #unsafeHTML(styledTitle)\n```\n\n----------------------------------------\n\nTITLE: Adding Leaf Dependency using Swift Package Manager\nDESCRIPTION: This snippet shows how to add Leaf as a dependency to your project's Package.swift file using Swift Package Manager.  It defines the package's name, platform, dependencies (including the Leaf package from GitHub), and targets. This is required to use Leaf in your Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n    dependencies: [\n        /// Eventuele andere afhankelijkheden ...\n        .package(url: \"https://github.com/vapor/leaf.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            .product(name: \"Leaf\", package: \"leaf\"),\n            // Eventuele andere afhankelijkheden\n        ]),\n        // Andere targets\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Container Logs (Shell)\nDESCRIPTION: Displays the logs for a specific Docker container. This command requires the container ID, which can be obtained from `docker container ls`. It's useful for debugging and monitoring the application's output.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndocker logs <container_id>\n```\n\n----------------------------------------\n\nTITLE: Install Swift with Swiftly CLI\nDESCRIPTION: This command uses the Swiftly CLI to install the latest version of Swift on the server. It fetches, downloads, and extracts the toolchain.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ swiftly install latest\n```\n\n----------------------------------------\n\nTITLE: Migrate Heroku Database\nDESCRIPTION: This command executes a migrate command within the Heroku environment to migrate the database.  It runs the command 'App --migrate --env production' on the Heroku dyno.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --env production\n```\n\n----------------------------------------\n\nTITLE: Extending QueueName in Swift\nDESCRIPTION: This code snippet shows how to extend the `QueueName` enum to define custom queue names for prioritizing jobs in Vapor Queues.  It creates a custom queue name 'emails'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nextension QueueName {\n    static let emails = QueueName(string: \"emails\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Vapor Application with curl\nDESCRIPTION: Uses the `curl` command to send an HTTP request to the Vapor application running on the specified IP address and port. This verifies that the application is accessible and responding correctly. The expected output is \"It works!\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://134.122.126.139:8080\nIt works!\n```\n\n----------------------------------------\n\nTITLE: Setting Model Space with Fluent in Swift\nDESCRIPTION: This snippet shows how to define a model space when creating a table using the `schema(_:space:)` method.  Model spaces allow for logically grouping related tables. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\ntry await db.schema(\"planets\", space: \"mirror_universe\")\n    .id()\n    // ...\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Run Vapor Application\nDESCRIPTION: This snippet runs the Vapor application using `swift run App serve`. The `--hostname 0.0.0.0` flag makes the server accessible from any IP address, and `--port 8080` specifies the port number.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --hostname 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Auto Migrate on Serve (Shell)\nDESCRIPTION: This shell command automatically runs database migrations before starting the Vapor application server. It passes the `--auto-migrate` flag to the `swift run App serve` command, ensuring that the database schema is up-to-date before serving requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nswift run App serve --auto-migrate\n```\n\n----------------------------------------\n\nTITLE: Extension for Validatable conformance\nDESCRIPTION: Extends the `CreateUser` struct to conform to the `Validatable` protocol. The `validations(_:)` function is where validation rules are defined.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension CreateUser: Validatable {\n    static func validations(_ validations: inout Validations) {\n        // Validations go here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox from Source (Makefile)\nDESCRIPTION: This snippet shows how to install Vapor Toolbox from source using a Makefile. It clones the repository, checks out the desired version, and then uses `make install` to build and install the toolbox. Replace `<desired version>` with a specific version tag or branch.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.es.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Deploy Vapor application to Fly\nDESCRIPTION: This command deploys the Vapor application to the Fly.io platform.  It reads the `Dockerfile` and `fly.toml` files to build and run the application. It monitors health checks for deployment success.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Register a Migration (Swift)\nDESCRIPTION: This code demonstrates how to register a migration with the Vapor application using `app.migrations.add()`. The migration is added to the default database. It requires importing `Fluent` and `Vapor` modules.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\napp.migrations.add(MyMigration())\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Vapor\nDESCRIPTION: This snippet shows how to access environment variables in a Vapor application using `Environment.get`. It retrieves the value of an environment variable by its name. Requires the Vapor framework.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet port = Environment.get(\"PORT\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database Enum - Swift\nDESCRIPTION: This snippet shows how to delete an existing database enum using Vapor.  It calls `database.enum(\"planet_type\").delete()` to completely remove the enum named \"planet_type\" from the database.  This operation is irreversible and will remove all type safety associated with the enum.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// An example of enum deletion.\ndatabase.enum(\"planet_type\").delete()\n```\n\n----------------------------------------\n\nTITLE: JSON Response After Star Creation\nDESCRIPTION: This snippet shows the expected JSON response after successfully creating a new star. The response includes the unique identifier of the newly created star, its name, and the identifier of the associated galaxy.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": ...,\n    \"name\": \"Sun\",\n    \"galaxy\": {\n        \"id\": ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Management Commands\nDESCRIPTION: This snippet shows common Systemd commands for managing a Vapor application. These commands allow loading, enabling, starting, stopping, and restarting the application as a service. Requires root privileges.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.nl.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable hello\nsystemctl start hello\nsystemctl stop hello\nsystemctl restart hello\n```\n\n----------------------------------------\n\nTITLE: Paginating Results in Swift\nDESCRIPTION: This snippet demonstrates how to paginate query results using the `paginate` method in Fluent. It retrieves a specific page of results based on request parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Voorbeeld van paginering op verzoek.\napp.get(\"planets\") { req in\n    try await Planet.query(on: req.db).paginate(for: req)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Middleware (Async)\nDESCRIPTION: This code snippet demonstrates how to implement model middleware to capitalize the name of a planet before it's created using async/await.  It uses the `AsyncModelMiddleware` protocol and overrides the `create` function. This function uses `async throws` and awaits the result of `next.create`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nstruct PlanetMiddleware: AsyncModelMiddleware {\n    func create(model: Planet, on db: Database, next: AnyAsyncModelResponder) async throws {\n        // Het model kan hier worden gewijzigd voordat het wordt gemaakt.\n        model.name = model.name.capitalized()\n        try await next.create(model, on: db)\n        // Zodra de planeet is gecreëerd, zal de code \n        // hier worden uitgevoerd.\n        print (\"Planet \\(model.name) was created\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check current Git branch\nDESCRIPTION: This command displays the current Git branch. The asterisk (*) indicates the active branch.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\n----------------------------------------\n\nTITLE: Opening a file using NonBlockingFileIO directly in Vapor (Route Handler)\nDESCRIPTION: Opens a file directly using the `NonBlockingFileIO` type from NIO within a route handler. This snippet demonstrates opening a file using the `req.application.fileio` and `req.eventLoop` to ensure correct event loop association. It requires a valid `req` object from a route handler. Errors need to be handled through `try await`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n// En un controlador de ruta.\nlet fileHandle = try await req.application.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: req.eventLoop)\nprint(fileHandle)\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with Specified Environment\nDESCRIPTION: This command shows how to start a Vapor application with a specific environment, using the `--env` or `-e` flag. It's useful for specifying environments like production, development, or testing when running the application from the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --env production\n```\n\n----------------------------------------\n\nTITLE: Configure Session Cookie - Swift\nDESCRIPTION: Configures the HTTP cookie used by Vapor sessions. It allows customization of the cookie name and the function used to generate cookie values.  `cookieFactory` allows custom cookie value generation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Verander de cookie naam in \"foo\".\napp.sessions.configuration.cookieName = \"foo\"\n\n// Configureert cookie waarde creatie.\napp.sessions.configuration.cookieFactory = { sessionID in\n    .init(string: sessionID.string, isSecure: true)\n}\n\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection\nDESCRIPTION: This code snippet illustrates how to close a WebSocket connection using the `close` method.  Calling `ws.close()` initiates the closing handshake.  The method returns a future that completes when the WebSocket is fully closed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nws.close()\n```\n\n----------------------------------------\n\nTITLE: Configure Testable Method with Custom Port in Swift\nDESCRIPTION: This snippet shows how to configure the `running` testable method with a custom port. By default, port 8080 is used, but you can specify a different port like 8123 as demonstrated.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n.running(port: 8123)\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Logs with Flyctl\nDESCRIPTION: This command allows viewing live logs of the application using the flyctl command-line tool. This is useful for monitoring the application's behavior and debugging issues.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Setting the Server Name in Vapor\nDESCRIPTION: This code snippet shows how to set the 'Server' header in HTTP responses for the Vapor HTTP server. It uses the `app.http.server.configuration.serverName` property to set the server name to 'vapor'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Add 'Server: vapor' header to responses.\napp.http.server.configuration.serverName = \"vapor\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation\nDESCRIPTION: This command checks if the Vapor Toolbox is installed correctly by displaying a list of available commands using the --help flag. It expects a list of available commands as output.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.nl.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Transforming a Void Future to an HTTP Status\nDESCRIPTION: This code snippet shows how to transform an `EventLoopFuture<Void>` to an `EventLoopFuture<HTTPStatus>` using the `transform(to:)` method. This is useful for signaling completion of an asynchronous operation with an HTTP status code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a void future back from some API\nlet userDidSave: EventLoopFuture<Void> = ...\n\n/// Transform the void future to an HTTP status\nlet futureStatus = userDidSave.transform(to: HTTPStatus.ok)\nprint(futureStatus) // EventLoopFuture<HTTPStatus>\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data Swift\nDESCRIPTION: This snippet shows how to retrieve data from a session. It accesses the session's data dictionary using a key and returns the value or \"n/a\" if the key is not found.  It demonstrates how to access session data in a route handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"get\") { req -> String in\n    req.session.data[\"name\"] ?? \"n/a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request\nDESCRIPTION: Demonstrates a simple GET HTTP request to a specified URL. This example shows the HTTP method, request path, and host header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /hello/vapor HTTP/1.1\nhost: vapor.codes\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Typical SPM Folder Structure\nDESCRIPTION: This code block illustrates the typical folder structure of a Swift Package Manager project, showing the placement of source code, tests, and the Package.swift manifest file.  The `Sources` directory contains the application code, the `Tests` directory contains the test code, and the `Package.swift` file resides at the root.  The code is shown in a tree-like format.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.ja.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n.\n├── Sources\n│   └── App\n│       └── (Source code)\n├── Tests\n│   └── AppTests\n└── Package.swift\n```\n\n----------------------------------------\n\nTITLE: Define a route with an \"any\" path component\nDESCRIPTION: This snippet shows how to define a route with an \"any\" path component specified by `*`. Any string in that position will be matched, but the value is discarded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /foo/bar/baz\n// 响应到 GET /foo/qux/baz\n// ...\napp.get(\"foo\", \"*\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Port via Command Line\nDESCRIPTION: This command-line snippet demonstrates how to override the port configuration of the Vapor server using the `serve` command with the `--port` flag. This allows you to specify a different port when running the server from the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# 重写端口配置\nswift run App serve --port 1337\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Public key with PEM\nDESCRIPTION: This snippet demonstrates how to initialize an RSA public key from a PEM-formatted string. The PEM string contains the encoded public key data. This is a common way to load public keys for JWT verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet rsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0cOtPjzABybjzm3fCg1aCYwnx\nPmjXpbCkecAWLj/CcDWEcuTZkYDiSG0zgglbbbhcV0vJQDWSv60tnlA3cjSYutAv\n7FPo5Cq8FkvrdDzeacwRSxYuIq1LtYnd6I30qNaNthntjvbqyMmBulJ1mzLI+Xg/\naX4rbSL49Z3dAQn8vQIDAQAB\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Initialisieren Sie einen RSA-Schlüssel mit public pem.\nlet key = try Insecure.RSA.PublicKey(pem: rsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Redis Pub/Sub Channels - Swift\nDESCRIPTION: This code snippet shows how to subscribe to Redis Pub/Sub channels using the `subscribe` method. It subscribes to two channels, 'channel_1' and 'channel_2', and provides a message receiver closure to handle incoming messages. It also includes an optional unsubscribe handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// creëert 2 abonnementen, een voor elk gegeven kanaal\napp.redis.subscribe\n  to: \"channel_1\", \"channel_2\",\n  messageReceiver: { channel, message in\n    switch channel {\n    case \"channel_1\": // doe iets met de boodschap\n    default: break\n    }\n  },\n  onUnsubscribe: { channel, subscriptionCount in\n    print(\"unsubscribed from \\(channel)\")\n    print(\"subscriptions remaining: \\(subscriptionCount)\")\n  }\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Decompression in Vapor\nDESCRIPTION: This code snippet shows how to enable HTTP request decompression using Gzip for the Vapor HTTP server. It includes examples for enabling decompression with size limits based on size or ratio, and disabling size limits using `app.http.server.configuration.requestDecompression`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Enable HTTP request decompression.\napp.http.server.configuration.requestDecompression = .enabled\n\n// Enable HTTP request decompression with size limit\napp.http.server.configuration.requestDecompression = .enabled(limit: .ratio(10))\n\n// Enable HTTP request decompression with no size limit\napp.http.server.configuration.requestDecompression = .enabled(limit: .none)\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket with Promise (Swift)\nDESCRIPTION: This snippet demonstrates closing the websocket and attaching a promise to be resolved when the close operation completes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nws.close(promise: nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring the NowTag in Vapor using Swift\nDESCRIPTION: This snippet shows how to register a custom tag with Leaf in Vapor, typically done in `configure.swift`. This allows the tag to be used in Leaf templates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.leaf.tags[\"now\"] = NowTag()\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Swift\nDESCRIPTION: Demonstrates how to select only a subset of model fields during a query using the `field(_:)` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database)\n    .field(\\.$id).field(\\.$name)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Controlling Nginx Service\nDESCRIPTION: This snippet shows how to stop, start, and restart the Nginx service using the `service` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo service nginx stop\nsudo service nginx start\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-propagation of Traces in Vapor\nDESCRIPTION: Sets the `traceAutoPropagation` property of the Vapor application to `true`.  This enables automatic propagation of spans between middleware and route callbacks. Note that this may impact performance on high-throughput APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.traceAutoPropagation = true\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Siblings Relation (Swift)\nDESCRIPTION: This code defines the inverse siblings relation on the related model (`Tag`).  It is symmetrical to the original siblings relation on `Planet`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Tag: Model {\n    // Example of a siblings relation.\n    @Siblings(through: PlanetTag.self, from: \\.$tag, to: \\.$planet)\n    public var planets: [Planet]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Cookie for Sessions in Vapor\nDESCRIPTION: This snippet demonstrates how to configure the HTTP cookie generated by Vapor's session middleware. You can customize the cookie name and define a custom function for generating cookie values. Configuration must happen before using `SessionsMiddleware`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Change the cookie name to \"foo\".\napp.sessions.configuration.cookieName = \"foo\"\n\n// Configures cookie value creation.\napp.sessions.configuration.cookieFactory = { sessionID in\n    .init(string: sessionID.string, isSecure: true)\n}\n\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: Checks the status of the Git repository, showing any uncommitted changes. This helps identify files that need to be added and committed before deploying to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit status --porcelain\n```\n\n----------------------------------------\n\nTITLE: Start Application with Log Level\nDESCRIPTION: This command starts the application with a specific log level. The `LOG_LEVEL` environment variable is set to `trace` before starting the application, which enables the most granular logging.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nLOG_LEVEL=trace docker-compose up app\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB with Regular Expressions\nDESCRIPTION: This snippet demonstrates how to query MongoDB using regular expressions through the `.custom()` case. It constructs a query document with `$regex` and `$options` for case-insensitive matching on the `name` field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport FluentMongoDriver\n       \nvar queryDocument = Document()\nqueryDocument[\"name\"][\"$regex\"] = \"e\"\nqueryDocument[\"name\"][\"$options\"] = \"i\"\n\nlet planets = try Planet.query(on: req.db).filter(.custom(queryDocument)).all()\n```\n\n----------------------------------------\n\nTITLE: Setting Case-Insensitive Routes in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure routes to be case-insensitive in a Vapor application.  Setting `app.routes.caseInsensitive = true` before the app starts will cause the router to ignore case when matching constant route components.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\napp.routes.caseInsensitive = true\n```\n\n----------------------------------------\n\nTITLE: Handling Optionals with async/await (Swift)\nDESCRIPTION: Shows how to handle optionals with `async` / `await` and throw Abort errors when the result is nil.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = try await User.find(id, on: db) {\n    throw Abort(.notFound)\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Example\nDESCRIPTION: This Nginx configuration file example configures Nginx as a reverse proxy for a Vapor application. It assumes the Vapor application is running on localhost port 8080 and serves static files from the `/home/vapor/Hello/Public/` directory. The server name is set to `hello.com` and listens on port 80.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.zh.md#_snippet_3\n\nLANGUAGE: Nginx\nCODE:\n```\nserver {\n    server_name hello.com;\n    listen 80;\n\n    root /home/vapor/Hello/Public/;\n\n    location @proxy {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_pass_header Server;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_connect_timeout 3s;\n        proxy_read_timeout 10s;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Override Port using Serve Command in Vapor (Shell)\nDESCRIPTION: This command demonstrates how to override the configured port using the `--port` flag with the `serve` command.  It is used to change the port when starting the server from the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Overschrijf geconfigureerde poort.\nswift run App serve --port 1337\n```\n\n----------------------------------------\n\nTITLE: Configure Firewall for OpenSSH\nDESCRIPTION: These commands configure the Uncomplicated Firewall (UFW) to allow OpenSSH connections, enabling secure remote access to the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nufw allow OpenSSH\nufw enable\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl on macOS\nDESCRIPTION: Installs the Fly CLI tool (flyctl) on macOS using the Homebrew package manager. Flyctl is required to interact with the Fly.io platform.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install flyctl\n```\n\n----------------------------------------\n\nTITLE: Run database migrations\nDESCRIPTION: This command executes the database migrations defined for the application within a Docker container. It ensures that the database schema is up-to-date.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run migrate\n```\n\n----------------------------------------\n\nTITLE: Shell Output Example\nDESCRIPTION: This snippet provides an example output of the `pwd` command, demonstrating the absolute path to the project directory. This path should be used to set the custom working directory in Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.nl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Bundle FileMiddleware in Vapor\nDESCRIPTION: Registers `FileMiddleware` to serve static assets from the `Public` directory within an Xcode project bundle. This is useful when integrating the Vapor server into an iOS app. It assumes you are using Folder References in Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nlet file = try FileMiddleware(bundle: .main, publicDirectory: \"Public\")\n```\n\n----------------------------------------\n\nTITLE: Accessing individual query parameters - Swift\nDESCRIPTION: This code shows how to access individual query parameters directly from the `req.query` dictionary. The `name` parameter is retrieved as an optional string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> String in \n    let name: String? = req.query[\"name\"]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers (Shell)\nDESCRIPTION: Lists all running Docker containers. This command verifies that the application and its database are running in containers after starting them with `docker compose up --detach app`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ndocker container ls\n```\n\n----------------------------------------\n\nTITLE: Defining a HelloTag using data in Swift\nDESCRIPTION: This snippet defines the `HelloTag` which uses the view data to get the name. It looks up the \"name\" key in the context data and returns a greeting string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case nameNotFound\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.data[\"name\"]?.string else {\n            throw HelloTagError.nameNotFound\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conforming ZipCode to ValidatorResult in Swift\nDESCRIPTION: This code snippet extends the `ValidatorResults.ZipCode` struct to conform to the `ValidatorResult` protocol. It provides implementations for the `isFailure`, `successDescription`, and `failureDescription` properties to define the behavior of the zip code validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nextension ValidatorResults.ZipCode: ValidatorResult {\n    public var isFailure: Bool {\n        !self.isValidZipCode\n    }\n    \n    public var successDescription: String? {\n        \"is a valid zip code\"\n    }\n    \n    public var failureDescription: String? {\n        \"is not a valid zip code\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Promises in Swift\nDESCRIPTION: This code demonstrates how to create a promise using `eventLoop.makePromise(of:)` and how to succeed or fail the associated future using `promiseString.succeed(_:)` and `promiseString.fail(_:)`. Promises allow you to manually control the lifecycle of a future.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet eventLoop: EventLoop \n\n// Create a new promise for some string.\nlet promiseString = eventLoop.makePromise(of: String.self)\nprint(promiseString) // EventLoopPromise<String>\nprint(promiseString.futureResult) // EventLoopFuture<String>\n\n// Completes the associated future.\npromiseString.succeed(\"Hello\")\n\n// Fails the associated future.\npromiseString.fail(...)\n```\n\n----------------------------------------\n\nTITLE: Passing data to Leaf context Swift\nDESCRIPTION: This snippet shows how to pass data to the Leaf context when rendering a view in Vapor. It assigns the value \"John\" to the key \"name\", which can then be accessed within the Leaf template by the HelloTag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nreturn try await req.view.render(\"home\", [\"name\": \"John\"])\n```\n\n----------------------------------------\n\nTITLE: Disable HTTP/1 Support in Vapor (Swift)\nDESCRIPTION: This snippet disables HTTP/1 support, configuring the Vapor HTTP server to only use HTTP/2.  It sets the `supportVersions` property to `[.two]`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Schakel HTTP/1 ondersteuning uit.\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Opening Vapor Project in Xcode\nDESCRIPTION: This command opens the Vapor project's Package.swift file in Xcode. This initiates the Swift Package Manager to download project dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ko.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Enum String Validation with Null Support\nDESCRIPTION: This code snippet demonstrates how to validate a String? type that is optional and can be `null` against a set of allowed string values, representing the valid cases of an enum. It ensures the validation passes if the value is nil or one of the allowed colors.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String?.self,\n    is: .nil || .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Basic Authentication Request\nDESCRIPTION: This HTTP request demonstrates the Basic authentication scheme. The username `test` and password `secret` are concatenated with a colon, base64 encoded, and prefixed with \"Basic \". This encoded string is then included in the `Authorization` header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nAuthorization: Basic dGVzdDpzZWNyZXQ=\n```\n\n----------------------------------------\n\nTITLE: Running Specific Vapor Command with Help Option (Shell)\nDESCRIPTION: This command executes a specific command (e.g., `serve`) within a Vapor application and uses the `--help` option to display the available arguments and options for that specific command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --help\n```\n\n----------------------------------------\n\nTITLE: Generating Random EdDSA Private Key (Swift)\nDESCRIPTION: This snippet demonstrates generating a random EdDSA private key using `EdDSA.PrivateKey(curve:)`.  This method creates a new Ed25519 private key, suitable for testing or scenarios where programmatic key management is appropriate.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet key = EdDSA.PrivateKey(curve: .ed25519)\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Database using SQLKit\nDESCRIPTION: This code snippet demonstrates how to cast a Fluent `Database` to a `SQLDatabase` and execute a raw SQL query using SQLKit. It checks if the underlying database driver is SQL before executing the query.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport FluentSQL\n\nif let sql = req.db as? SQLDatabase {\n    // The underlying database driver is SQL.\n    let planets = try await sql.raw(\"SELECT * FROM planets\").all(decoding: Planet.self)\n} else {\n    // The underlying database driver is _not_ SQL.\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag with Custom Format\nDESCRIPTION: This snippet demonstrates how to use the `#date` tag with a custom date format string.  The `DateFormatter` documentation should be consulted for available format options.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_21\n\nLANGUAGE: leaf\nCODE:\n```\nThe date is #date(now, \"yyyy-MM-dd\")\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model is Attached in a Siblings Relationship in Fluent\nDESCRIPTION: This example shows how to verify if a model is related in a siblings relationship using the `isAttached` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// 检查模型是否有关。\nearth.$tags.isAttached(to: inhabited)\n```\n\n----------------------------------------\n\nTITLE: Application Lifecycle Handler - Swift\nDESCRIPTION: This snippet demonstrates how to register lifecycle handlers using the `Lifecycle` helper in Vapor 4, allowing you to hook into the application's lifecycle.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nstruct PrintHello: LifecycleHandler {\n    func willBoot(_ app: Application) throws {\n        print(\"Hello!\")\n    }\n}\n\napp.lifecycle.use(PrintHello())\n```\n\n----------------------------------------\n\nTITLE: Implementing BearerAuthenticator in Swift\nDESCRIPTION: This Swift code implements a `BearerAuthenticator` in Vapor. It checks the bearer token against a hard-coded value. If the token matches, a `User` is logged in using `request.auth.login`. This example uses `EventLoopFuture` for asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct UserAuthenticator: BearerAuthenticator {\n    typealias User = App.User\n\n    func authenticate(\n        bearer: BearerAuthorization,\n        for request: Request\n    ) -> EventLoopFuture<Void> {\n       if bearer.token == \"foo\" {\n           request.auth.login(User(name: \"Vapor\"))\n       }\n       return request.eventLoop.makeSucceededFuture(())\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Routes via Command Line (Shell)\nDESCRIPTION: This snippet demonstrates how to use the `routes` command to print all available routes of the Vapor application in an ASCII-formatted table in the command line. This command provides a clear and concise overview of the application's endpoints, HTTP methods, and associated paths.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ swift run App routes\n+--------+----------------+\n| GET    | /              |\n+--------+----------------+\n| GET    | /hello         |\n+--------+----------------+\n| GET    | /todos         |\n+--------+----------------+\n| POST   | /todos         |\n+--------+----------------+\n| DELETE | /todos/:todoID |\n+--------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Response Compression in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable HTTP response compression using Gzip for the Vapor HTTP server. It shows enabling compression with and without an initial buffer capacity via the `app.http.server.configuration.responseCompression` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Enable HTTP response compression.\napp.http.server.configuration.responseCompression = .enabled\n\n// Enable HTTP response compression with an initial buffer capacity\napp.http.server.configuration.responseCompression = .enabled(initialByteBufferCapacity: 1024)\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Logging System in Vapor\nDESCRIPTION: This code demonstrates how the LoggingSystem is bootstrapped in a Vapor application.  It detects the environment and then bootstraps the logging system from the environment, which can be configured via command line arguments or environment variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Request Sample\nDESCRIPTION: Example of an HTTP GET request for a dynamic route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nGET /hello/swift HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Commit Git changes\nDESCRIPTION: These commands add all changes to the staging area and then commits them with a message describing the changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"a description of the changes I made\"\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response\nDESCRIPTION: A sample HTTP response from the Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 13\ncontent-type: text/plain; charset=utf-8\n\nHello, vapor!\n```\n\n----------------------------------------\n\nTITLE: Remove a Docker Stack\nDESCRIPTION: This command removes a Docker stack from the Swarm. This stops and removes all services in the stack.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack rm test\n```\n\n----------------------------------------\n\nTITLE: SSH Login as New User\nDESCRIPTION: This command is used to log in to the server using the newly created `vapor` user via SSH. Replace `your_server_ip` with the server's IP address.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nssh vapor@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Check Swift Version\nDESCRIPTION: This command checks the installed version of Swift. It relies on Swift being installed and accessible in the system's PATH.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ko.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Copying .env template to environment specific file\nDESCRIPTION: Demonstrates how to copy the `.env` template file to an environment-specific file (e.g., `.env.development`) and then open it for editing.  This is a common pattern for configuring environment-specific settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.ja.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncp .env .env.development\nvim .env.development\n```\n\n----------------------------------------\n\nTITLE: Get Current Directory Path (pwd) - Shell\nDESCRIPTION: This command retrieves the absolute path of the current directory, which is useful for setting the custom working directory in Xcode. It outputs the full path to the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.zh.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 获取当前目录的路径\npwd\n```\n\n----------------------------------------\n\nTITLE: Leaf Count Tag Usage\nDESCRIPTION: Demonstrates the usage of the `#count` tag to display the number of elements in an array called 'matches'. This is typically used to show search result counts or similar data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_14\n\nLANGUAGE: leaf\nCODE:\n```\nYour search matched #count(matches) pages.\n```\n\n----------------------------------------\n\nTITLE: Creating EdDSA Keys with Coordinates (Swift)\nDESCRIPTION: This snippet shows how to create EdDSA public and private keys using their base64 encoded coordinates.  `EdDSA.PublicKey` and `EdDSA.PrivateKey` are initialized with the `x` and `d` parameters respectively, specifying the public and private key coordinates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet publicKey = try EdDSA.PublicKey(x: \"0ZcEvMCSYqSwR8XIkxOoaYjRQSAO8frTMSCpNbUl4lE\", curve: .ed25519)\n\nlet privateKey = try EdDSA.PrivateKey(d: \"d1H3/dcg0V3XyAuZW2TE5Z3rhY20M+4YAfYu/HUQd8w=\", curve: .ed25519)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Log Handler (Swift)\nDESCRIPTION: This snippet illustrates how to override Vapor's default log handler and register a custom one. It demonstrates using `StreamLogHandler` to output logs to the standard output. Changing the log level via command line or env variables only works with Vapor's default log handler.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Logging\n\nLoggingSystem.bootstrap { label in\n    StreamLogHandler.standardOutput(label: label)\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Text Messages via WebSocket (Swift)\nDESCRIPTION: This code demonstrates how to handle incoming text messages on a WebSocket connection using the `ws.onText` method. It registers a closure that is executed whenever a text message is received. The closure receives the WebSocket object and the text message as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nws.onText { ws, text in\n    // Cadena recibida por este WebSocket.\n    print(text)\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Throwing FlatMap - Swift\nDESCRIPTION: Example of a non-throwing flatMap operation on a Future in SwiftNIO.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Non-throwing flatMap.\nfutureA.flatMap { a in\n    return futureB\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a LeafTag struct in Swift\nDESCRIPTION: This snippet shows how to define a struct that conforms to the `LeafTag` protocol. This is the basic structure for creating custom tags in Leaf.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox from Source\nDESCRIPTION: This snippet explains how to install the Vapor Toolbox by cloning the repository, checking out a specific version, and building it using make. Requires git and make to be installed. Provides instructions to confirm installation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.zh.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Mapping a Future String to a Future Response with flatMap\nDESCRIPTION: This snippet demonstrates how to use `flatMap` to transform a future string into a future client response. `flatMap` avoids creating nested futures (`EventLoopFuture<EventLoopFuture<T>>`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Assume we have created an HTTP client\nlet client: Client = ... \n\n/// flatMap the future string to a future response\nlet futureResponse = futureString.flatMap { string in\n    client.get(string) // EventLoopFuture<ClientResponse>\n}\n\n/// We now have a future response\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Composing User Authenticators Swift\nDESCRIPTION: This code demonstrates how to compose authenticators for different user types in Vapor. It uses `AdminAuthenticator` and `UserAuthenticator` to authenticate `Admin` and `User` respectively. Route handler checks if either `Admin` or `User` is authenticated.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.grouped(AdminAuthenticator())\n    .grouped(UserAuthenticator())\n    .get(\"secure\") \n{\n    req in\n    guard req.auth.has(Admin.self) || req.auth.has(User.self) else {\n        throw Abort(.unauthorized)\n    }\n    // Fai qualcosa.\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Nginx Service\nDESCRIPTION: These commands manage the Nginx service (stop, start, restart) using the `service` command. They require `sudo` privileges.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.zh.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo service nginx stop\nsudo service nginx start\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: This shell command lists all Docker images available on the system. It displays information such as the image name, tag, image ID, creation date, and size. This command is useful for verifying that the Docker image for the Vapor application has been built successfully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key Constraint (Field) with Fluent in Swift\nDESCRIPTION: This snippet adds a foreign key constraint to the 'star_id' field, referencing the 'id' field in the 'stars' table. It also specifies that the field is required. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .required, .references(\"stars\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Range Results Swift\nDESCRIPTION: This code demonstrates how to fetch the first 5 planets using a range.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Haal de eerste 5 planeten op.\nPlanet.query(on: self.database)\n    .range(..<5)\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Sla de eerste 2 resultaten over.\n.range(2...)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validator Result\nDESCRIPTION: This code snippet defines a custom validator result struct, `ZipCode`, which contains a boolean `isValidZipCode` to indicate whether the input is a valid zip code. It's a part of creating a custom validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nextension ValidatorResults {\n    /// 表示验证器的结果，该验证器检查一个字符串是否为有效的邮政编码。\n    public struct ZipCode {\n        /// 指示输入是否为有效的邮政编码。\n        public let isValidZipCode: Bool\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox\nDESCRIPTION: This shell command uses Homebrew to install the Vapor Toolbox, a command-line interface for Vapor. It requires Homebrew to be installed. The Toolbox provides useful enhancements such as project creation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.pl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Enabling File Middleware in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable the FileMiddleware in a Vapor application. The FileMiddleware serves static files from the `Public/` directory. It initializes the middleware with the public directory path and registers it for use with the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Serves files from `Public/` directory\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification Inside a Route\nDESCRIPTION: This snippet demonstrates how to send a push notification from within a Vapor route using `req.apns.client.send(...)`.  It shows a simple GET route that triggers sending a push notification and returns an HTTP status code of .ok upon completion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// 发送通知\napp.get(\"test-push\") { req async throws -> HTTPStatus in\n    try await req.apns.client.send(...) \n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Heroku Config\nDESCRIPTION: Retrieves the configuration variables set for the Heroku application. This includes environment variables like `DATABASE_URL` which are important for application configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nheroku config\n```\n\n----------------------------------------\n\nTITLE: Decoding Response with Futures in Vapor\nDESCRIPTION: Shows how to handle decoding response content when using futures, leveraging `flatMapThrowing` for asynchronous processing and error handling.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.it.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nreturn req.client.get(\"https://httpbin.org/json\").flatMapThrowing { res in\n\ttry res.content.decode(MyJSONResponse.self)\n}.flatMap { json in\n\t// Usa il JSON qui\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field for Optional Parent Relation (Swift)\nDESCRIPTION: This code shows the field definition for an optional parent relation.  The `.required` constraint is omitted, allowing the `star_id` field to be nullable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"star_id\", .uuid, .references(\"star\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Span Propagation in Vapor (Swift)\nDESCRIPTION: This snippet shows how to enable automatic span propagation in a Vapor application. Setting `app.traceAutoPropagation` to `true` ensures that spans are automatically propagated between middleware and route callbacks. Be aware that enabling this may impact performance in high-performance APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.traceAutoPropagation = true\n```\n\n----------------------------------------\n\nTITLE: Stop Docker Compose services and remove volumes\nDESCRIPTION: This command stops all services defined in the `docker-compose.yml` file and also removes any volumes associated with those services. This is useful for resetting the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: JSON Response with JWT\nDESCRIPTION: This snippet represents the JSON response returned after successfully signing a JWT. The JSON contains a single key, \"token\", whose value is the newly generated JWT.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXBvciIsImV4cCI6NjQwOTIyMTEyMDAsImFkbWluIjp0cnVlfQ.lS5lpwfRNSZDvpGQk6x5JI1g40gkYCOWqbc3J_ghowo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add Default Identifier Swift\nDESCRIPTION: This snippet adds a default identifier field to the schema. It uses the `id()` helper method which configures an `UUID` type primary key named `id`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n.id()\n```\n\n----------------------------------------\n\nTITLE: Create a new user\nDESCRIPTION: This command creates a new user named 'vapor' on the system.  It's a prerequisite to avoid running the Vapor app as root.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadduser vapor\n```\n\n----------------------------------------\n\nTITLE: Run Database Migration (Shell)\nDESCRIPTION: This shell command runs the database migrations. It uses the `swift run App migrate` command, which checks for new migrations and applies them to the database.  A confirmation prompt appears before execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nswift run App migrate\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Package Dependency in Swift\nDESCRIPTION: This snippet shows how to add the Redis package as a dependency to your Swift project using Swift Package Manager. It specifies the URL of the Redis package and its version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\ndependencies: [\n    // ...\n    .package(url: \"https://github.com/vapor/redis.git\", from: \"4.0.0\")\n]\n// ...\ntargets: [\n    .target(name: \"App\", dependencies: [\n        // ...\n        .product(name: \"Redis\", package: \"redis\")\n    ])\n]\n```\n\n----------------------------------------\n\nTITLE: Fluent Timestamp - Swift\nDESCRIPTION: Demonstrates the `@Timestamp` property wrapper used to define timestamp fields in Fluent models, which are now indicated via property wrappers instead of static variables.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n@Timestamp(key: \"createdAt\", on: .create)\nvar createdAt: Date?\n```\n\n----------------------------------------\n\nTITLE: Configuring Google App Identifier and G Suite Domain in Vapor (Swift)\nDESCRIPTION: This snippet shows how to configure the Google application identifier and G Suite domain name within a Vapor application's JWT settings.  This is a prerequisite for verifying Google JWTs. Both the application identifier and the G Suite domain must be set.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Configureer Google app identifier en domeinnaam.\napp.jwt.google.applicationIdentifier = \"...\"\napp.jwt.google.gSuiteDomainName = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Install Swift on Fedora\nDESCRIPTION: This command installs Swift on Fedora using the dnf package manager. It provides a straightforward way to set up Swift on Fedora systems.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ko.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Throwing Map - Swift\nDESCRIPTION: This snippet demonstrates the corrected way to handle a throwing map operation in Vapor 4 using `flatMapThrowing`.  It shows the replacement for `map` when the closure can throw an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfutureA.flatMapThrowing { a in\n    if ... {\n        throw SomeError()\n    } else {\n        return b\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Migration Swift\nDESCRIPTION: This code defines a Fluent migration for the `User` model in Vapor. It creates the `users` schema with fields for ID, name, email, and password hash, and sets a unique constraint on the email field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\nimport Vapor\n\nextension User {\n    struct Migration: AsyncMigration {\n        var name: String { \"CreateUser\" }\n\n        func prepare(on database: Database) async throws {\n            try await database.schema(\"users\")\n                .id()\n                .field(\"name\", .string, .required)\n                .field(\"email\", .string, .required)\n                .field(\"password_hash\", .string, .required)\n                .unique(on: \"email\")\n                .create()\n        }\n\n        func revert(on database: Database) async throws {\n            try await database.schema(\"users\").delete()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Session Driver Swift\nDESCRIPTION: This snippet shows how to configure Vapor to use the Redis session driver. This driver stores session data in a Redis instance.  It requires that Redis has been previously configured and accessible. Using default behavior for the Redis session driver\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Redis\n\napp.sessions.use(.redis)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom JSON Decoder for a Single Request in Swift\nDESCRIPTION: This code shows how to use a custom JSON decoder for a single request. It creates a new `JSONDecoder` with a specific `dateDecodingStrategy` and passes it to the `req.content.decode` method. This allows for request-specific decoding behavior without affecting the global configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n// maak een nieuwe JSON encoder die unix-timestamp data gebruikt\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\n\n// decodeert Hello struct met behulp van aangepaste decoder\nlet hello = try req.content.decode(Hello.self, using: decoder)\n```\n\n----------------------------------------\n\nTITLE: Initializing an ECDSA Key with a Public PEM (Swift)\nDESCRIPTION: This snippet demonstrates initializing an ECDSA key from a public key in PEM format. It loads a PEM-encoded public key and creates an `ECDSAKey` object using the `.public(pem:)` initializer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nlet ecdsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2adMrdG7aUfZH57aeKFFM01dPnkx\nC18ScRb4Z6poMBgJtYlVtd9ly63URv57ZW0Ncs1LiZB7WATb3svu+1c7HQ==\n-----END PUBLIC KEY-----\n\"\"\"\n\n// Initialiseer een ECDSA sleutel met publieke PEM.\nlet key = ECDSAKey.public(pem: ecdsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Sending a Binary Message - Vapor (Swift)\nDESCRIPTION: This snippet shows how to send a binary message over a WebSocket connection using the `send` method. The method takes an array of `UInt8` as input, which is then sent as a binary message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nws.send([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Opening a file using NonBlockingFileIO directly in Vapor (Main Thread)\nDESCRIPTION: Opens a file directly using the `NonBlockingFileIO` type from NIO. This snippet demonstrates opening a file from the main thread, using the `app.fileio` and `app.eventLoopGroup.next()` to get an event loop. It requires the `app` instance, typically available in the configure function. Errors need to be handled through `try await ... .get()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.es.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// Hilo principal\nlet fileHandle = try await app.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: app.eventLoopGroup.next()\n).get()\nprint(fileHandle)\n```\n\n----------------------------------------\n\nTITLE: Create XCTestCase subclass (Swift)\nDESCRIPTION: This snippet illustrates how to create a test case by subclassing `XCTestCase`. You'll need to import `XCTVapor` and then define a class inheriting from `XCTestCase`. Individual test methods within the class should start with the prefix `test` to be automatically executed when the test suite runs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.it.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport XCTVapor\n\nfinal class MyTests: XCTestCase {\n    func testStub() throws {\n    \t// Esegui il test qui.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HOTP Codes with Range in Vapor\nDESCRIPTION: This snippet generates a range of HOTP codes around a central counter value. This creates a window of valid OTPs to account for counter drift. The range parameter specifies how many counter values to calculate codes for on either side of the central counter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\n\n// Generate a window of correct counters\nlet codes = hotp.generate(counter: 25, range: 2)\n```\n\n----------------------------------------\n\nTITLE: Create User Endpoint Swift\nDESCRIPTION: This code defines a `POST /users` endpoint in Vapor to create new users. It validates the request, decodes the `User.Create` struct, checks if passwords match, and saves the user to the database after hashing the password using Bcrypt.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"users\") { req async throws -> User in\n    try User.Create.validate(content: req)\n    let create = try req.content.decode(User.Create.self)\n    guard create.password == create.confirmPassword else {\n        throw Abort(.badRequest, reason: \"Passwords did not match\")\n    }\n    let user = try User(\n        name: create.name,\n        email: create.email,\n        passwordHash: Bcrypt.hash(create.password)\n    )\n    try await user.save(on: req.db)\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Priority - Swift\nDESCRIPTION: This snippet demonstrates how to specify a priority for a job by extending the QueueName enum and using the queues(_:) method to specify a custom queue.  It uses both EventLoopFuture and async/await examples.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nextension QueueName {\n    static let emails = QueueName(string: \"emails\")\n}\n\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // One day\n    return req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        ).map { \"done\" }\n}\n\n// or\n\napp.get(\"email\") { req async throws -> String in\n    let futureDate = Date(timeIntervalSinceNow: 60 * 60 * 24) // One day\n    try await req\n        .queues(.emails)\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3,\n            delayUntil: futureDate\n        )\n    return \"done\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting In-Process Jobs\nDESCRIPTION: Starts the queue workers within the same process as the Vapor application. This allows jobs to be processed without requiring a separate worker process. The `startInProcessJobs` function needs an event loop to run. \nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry app.queues.startInProcessJobs(on: .default)\n```\n\n----------------------------------------\n\nTITLE: Verificación de Contraseña con Bcrypt en Vapor (Swift)\nDESCRIPTION: Este snippet demuestra cómo verificar una contraseña en texto plano contra un hash Bcrypt existente. Requiere la importación del módulo Vapor. El código compara la contraseña proporcionada con el hash almacenado y devuelve un booleano indicando si coinciden.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nlet pass = try Bcrypt.verify(\"test\", created: digest)\nif pass {\n\t// La contraseña y el hash coinciden.\n} else {\n\t// Contraseña incorrecta.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vapor Project\nDESCRIPTION: This command creates a new Vapor project in the current directory. The `-n` flag automatically answers 'no' to all questions, using the default template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ko.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Set Heroku buildpack\nDESCRIPTION: This command sets the buildpack for your Heroku application to `vapor/vapor`. Buildpacks are used to prepare the application for deployment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:set vapor/vapor\n```\n\n----------------------------------------\n\nTITLE: Use Custom Server Implementation in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to replace Vapor's default HTTP server with a custom server implementation.  It uses `app.servers.use` with a closure that creates and returns an instance of `MyServer`, a custom `Server` type. The custom server class, `MyServer`, needs to be defined separately.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nfinal class MyServer: Server {\n\t...\n}\n\napp.servers.use { app in\n\tMyServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HOTP with Counter Range in Vapor\nDESCRIPTION: This snippet generates a range of HOTP codes around a given counter value.  The `range` parameter specifies the number of counters to include before and after the specified `counter` value. This allows for clock drift or lost counters in OTP implementations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.it.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\n\n// Genera una finestra di contatori corretti\nlet codes = hotp.generate(counter: 25, range: 2)\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes with Path Prefix (Closure) (Swift)\nDESCRIPTION: Demonstrates grouping routes using the closure-based syntax.  All routes registered inside the closure will have the prefix applied.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { req in\n        ...\n    }\n    // POST /users\n    users.post { req in\n        ...\n    }\n    // GET /users/:id\n    users.get(\":id\") { req in\n        let id = req.parameters.get(\"id\")!\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define User Structure for Session Authentication\nDESCRIPTION: Defines a simple `User` structure to be used with session-based authentication.  Includes a single property, `email`, which will be used as the session identifier.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct User {\n    var email: String\n}\n```\n\n----------------------------------------\n\nTITLE: Check Heroku CLI Login Status\nDESCRIPTION: This command verifies the currently logged-in Heroku user via the CLI. It displays the email address associated with the authenticated account, confirming successful login and the active user context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku auth:whoami\n```\n\n----------------------------------------\n\nTITLE: Systemd Control Commands\nDESCRIPTION: This snippet provides a set of Systemd commands to manage a Vapor application service.  These commands allow you to reload the daemon, enable the service, start the service, stop the service, and restart the service.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.zh.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable hello\nsystemctl start hello\nsystemctl stop hello\nsystemctl restart hello\n```\n\n----------------------------------------\n\nTITLE: HTTP Response - Invalid Email Error\nDESCRIPTION: The expected error response when the email validation fails. It indicates that the email address is not valid.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nemail is not a valid email address\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponseEncodable - Swift\nDESCRIPTION: This example shows how to implement `ResponseEncodable` on a custom type, `HTML`. The `encodeResponse` function creates a `Response` object with the HTML content and sets the `Content-Type` header to `text/html`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: ResponseEncodable {\n  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return request.eventLoop.makeSucceededFuture(.init(\n      status: .ok, headers: headers, body: .init(string: value)\n    ))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HelloTag with Parameter - Swift\nDESCRIPTION: This code defines a custom Leaf tag `HelloTag` that accepts a name parameter and returns a greeting within a paragraph element. It conforms to `UnsafeUnescapedLeafTag` to prevent HTML escaping.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case missingNameParameter\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.parameters[0].string else {\n            throw HelloTagError.missingNameParameter\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Failed Future with Abort Error (Swift)\nDESCRIPTION: Shows how to return a failed `EventLoopFuture` with an `Abort` error when throwing an error directly is not possible. This is useful in asynchronous contexts like `flatMap` closures where a future must be returned.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = user else {\n    req.eventLoop.makeFailedFuture(Abort(.notFound))    \n}\nreturn user.save()\n```\n\n----------------------------------------\n\nTITLE: Conforming to DebuggableError\nDESCRIPTION: This snippet demonstrates how to conform a custom error type (`MyError`) to the `DebuggableError` protocol. This allows you to provide additional debugging information such as a unique identifier, source location, and stack trace for the error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    enum Value {\n        case userNotLoggedIn\n        case invalidEmail(String)\n    }\n\n    var identifier: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"userNotLoggedIn\"\n        case .invalidEmail:\n            return \"invalidEmail\"\n        }\n    }\n\n    var reason: String {\n        switch self.value {\n        case .userNotLoggedIn:\n            return \"User is not logged in.\"\n        case .invalidEmail(let email):\n            return \"Email address is not valid: \\(email).\"\n        }\n    }\n\n    var value: Value\n    var source: ErrorSource?\n\n    init(\n        _ value: Value,\n        file: String = #file,\n        function: String = #function,\n        line: UInt = #line,\n        column: UInt = #column\n    ) {\n        self.value = value\n        self.source = .init(\n            file: file,\n            function: function,\n            line: line,\n            column: column\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching a Model from Siblings Relationship (Swift)\nDESCRIPTION: Demonstrates how to detach a model from a siblings relationship, removing the corresponding entry in the pivot table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Elimina el modelo de la relación.\ntry await earth.$tags.detach(inhabited, on: database)\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP/2 Support in Vapor\nDESCRIPTION: This snippet demonstrates how to configure the Vapor HTTP server to only support HTTP/2. It modifies the `supportVersions` property of the server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Only support HTTP/2\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Define a route using the `on` method with an HTTP method parameter\nDESCRIPTION: This snippet shows how to define a route using the `on` method, explicitly specifying the HTTP method using the `.OPTIONS` enum case.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 OPTIONS /foo/bar/baz\napp.on(.OPTIONS, \"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox using Homebrew\nDESCRIPTION: This shell command installs the Vapor Toolbox using Homebrew. The Vapor Toolbox provides helpful commands for Vapor development.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.de.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Custom Services Extension - Swift\nDESCRIPTION: This snippet demonstrates how to register custom services with extensions in Vapor 4, replacing the Vapor 3 method of registering services with the container.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyAPI {\n    let client: Client\n    func foo() { ... }\n}\n\nextension Request {\n    var myAPI: MyAPI { \n        .init(client: self.client)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Log In\nDESCRIPTION: Provides an HTML form example with username and password fields for logging in, sending a POST request to the `/login` endpoint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n <form method=\"POST\" action=\"/login\">\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\" placeholder=\"Username\" name=\"username\" autocomplete=\"username\" required autofocus>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" placeholder=\"Password\" name=\"password\" autocomplete=\"current-password\" required>\n    <input type=\"submit\" value=\"Sign In\">    \n</form>\n```\n\n----------------------------------------\n\nTITLE: Sorting Results in Swift\nDESCRIPTION: Shows how to sort query results by a field's value using the `sort(_:)` method. Also shows how to add secondary sorting criteria. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).sort(\\.$name)\n```\n\nLANGUAGE: swift\nCODE:\n```\nUser.query(on: database).sort(\\.$name).sort(\\.$age)\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in Leaf\nDESCRIPTION: This snippet demonstrates conditional logic within Leaf templates using `#if`, `#else`, and `#elseif` tags. It shows how to evaluate expressions and display different content based on the result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\n#if(1 + 1 == 2):\n    Hello!\n#endif\n\n#if(index % 2 == 0):\n    This is even index.\n#else:\n    This is odd index.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Filtering Planets by Type Using Fluent\nDESCRIPTION: This Swift code snippet shows how to filter planets based on their type (e.g., gas giant) using Fluent's query API. It employs the `filter` method with a key path and a value to match.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// An example of field value filtering.\nPlanet.query(on: database).filter(\\.$type == .gasGiant)\n```\n\n----------------------------------------\n\nTITLE: Verifying a password against a Bcrypt hash in Vapor\nDESCRIPTION: This snippet shows how to verify a plain text password against an existing Bcrypt hash in Vapor. It imports the Vapor module and then uses the Bcrypt.verify function to compare the provided password with the stored digest. The function returns a boolean indicating whether the password matches the hash.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Vapor\n\nlet pass = try Bcrypt.verify(\"test\", created: digest)\nif pass {\n\t// Wachtwoord en digest komen overeen.\n} else {\n\t// Verkeerd wachtwoord.\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Stack Trace in Custom Errors\nDESCRIPTION: This snippet demonstrates how to capture a stack trace when initializing a custom error type in Vapor by using the `StackTrace.capture()` method. It defines a struct `MyError` that conforms to `DebuggableError` and stores the captured stack trace in the `stackTrace` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    var identifier: String\n    var reason: String\n    var stackTrace: StackTrace?\n\n    init(\n        identifier: String,\n        reason: String,\n        stackTrace: StackTrace? = .capture()\n    ) {\n        self.identifier = identifier\n        self.reason = reason\n        self.stackTrace = stackTrace\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Leaf Templates with Swift\nDESCRIPTION: This Swift snippet illustrates how to pass data to Leaf templates using an `Encodable` struct.  It defines a `WelcomeContext` struct with properties for the title and numbers, and then uses `req.view.render` to pass the struct to the \"home\" template.  This ensures data is properly formatted for use in the Leaf template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct WelcomeContext: Encodable {\n    var title: String\n    var numbers: [Int]\n}\nreturn req.view.render(\"home\", WelcomeContext(title: \"Hello!\", numbers: [42, 9001]))\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with Environment Flag\nDESCRIPTION: This command shows how to run a Vapor application and specify the environment using the `--env` or `-e` flag.  This allows you to override the default `development` environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve --env production\n```\n\n----------------------------------------\n\nTITLE: Opening the project in Xcode\nDESCRIPTION: This command opens the `Package.swift` file in Xcode, which will trigger Xcode to download the Swift Package Manager dependencies. This may take some time on the first run.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.nl.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Extending Application.Servers.Provider for Custom Server\nDESCRIPTION: This code snippet demonstrates how to extend `Application.Servers.Provider` to use a custom server with dot syntax.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nextension Application.Servers.Provider {\n    static var myServer: Self {\n        .init {\n            $0.servers.use { app in\n            \tMyServer()\n            }\n        }\n    }\n}\n\napp.servers.use(.myServer)\n```\n\n----------------------------------------\n\nTITLE: Add a New User\nDESCRIPTION: This snippet adds a new user named `vapor` to the system and grants the user sudo privileges. It also copies the SSH keys from the root user to the new user, allowing SSH access.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadduser vapor\nusermod -aG sudo vapor\nrsync --archive --chown=vapor:vapor ~/.ssh /home/vapor\nexit\nssh vapor@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Leaf Master Template\nDESCRIPTION: Demonstrates a master Leaf template using `#import` to inject content provided by extending child templates.  The `title` is passed as a variable, and the body is imported from the extended template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_13\n\nLANGUAGE: leaf\nCODE:\n```\n<html>\n    <head>\n        <title>#(title)</title>\n    </head>\n    <body>#import(\"body\")</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Signing JWTs with Key Identifier in Vapor (Swift)\nDESCRIPTION: This snippet shows how to sign a JWT payload with a specific signer identified by its 'kid'. The `kid` parameter is passed when signing the JWT to specify which signer to use. This will automatically include the signer's name in the JWT header's `kid` field.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Onderteken met ondertekenaar \"a\"\nreq.jwt.sign(payload, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job with Yearly Interval\nDESCRIPTION: This code snippet shows how to schedule a `CleanupJob` to run yearly on May 23rd at noon. The `yearly()`, `in()`, `on()`, and `at()` methods are chained together to define the schedule. The `.in(.may)` and `.at(.noon)` are helper enums.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.schedule(CleanupJob())\n    .yearly()\n    .in(.may)\n    .on(23)\n    .at(.noon)\n```\n\n----------------------------------------\n\nTITLE: Serving Public Files with FileMiddleware in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable the `FileMiddleware` in Vapor to serve public files from the `Public/` directory. It initializes the middleware with the directory path and registers it for use by the application. This enables serving static assets like images and stylesheets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.ko.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Serves files from `Public/` directory\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Custom Response Encodable Implementation\nDESCRIPTION: Demonstrates a custom implementation of `ResponseEncodable` for an `HTML` struct. The `encodeResponse` function creates a response with `text/html` content type and the HTML content in the response body. This allows `HTML` to be used directly as a return type for routes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: ResponseEncodable {\n  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return request.eventLoop.makeSucceededFuture(.init(\n      status: .ok, headers: headers, body: .init(string: value)\n    ))\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension HTML: AsyncResponseEncodable {\n  public func encodeResponse(for request: Request) async throws -> Response {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return .init(status: .ok, headers: headers, body: .init(string: value))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop in Route Closures (Swift)\nDESCRIPTION: This snippet demonstrates how to access the event loop within a Vapor route closure using `req.eventLoop`. This allows you to create promises associated with the request's event loop, ensuring that any completion actions are executed on the correct thread.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nreq.eventLoop.makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Run Vapor application\nDESCRIPTION: This command runs the Vapor application, serving it on all network interfaces (0.0.0.0) and port 8080.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --hostname 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Adding a Top-Level Foreign Key Constraint (Swift)\nDESCRIPTION: This snippet shows how to add a top-level foreign key constraint using the `foreignKey` method.  It achieves the same result as the field-level constraint but is added as a top-level constraint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Example of adding a top-level foreign key constraint.\n.foreignKey(\"star_id\", references: \"stars\", \"id\")\n```\n\n----------------------------------------\n\nTITLE: FileMiddleware Setup in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to enable the FileMiddleware in Vapor to serve static files from the `Public/` directory. It creates a FileMiddleware instance and registers it with the application's middleware stack. This allows Vapor to serve files like images, stylesheets, and browser scripts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.pl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Serwuje pliki folderu `Public/`\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Installing Swift on Fedora\nDESCRIPTION: This snippet demonstrates the installation of Swift on Fedora using the dnf package manager. It requires root privileges and installs the swift-lang package. For Fedora 35, it mentions the need to add EPEL 8 for Swift 5.9 or newer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.zh.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Using Custom Server with Provider Extension\nDESCRIPTION: This snippet shows how to create a custom server using an `Application.Servers.Provider` extension, offering a more convenient syntax for server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nextension Application.Servers.Provider {\n    static var myServer: Self {\n        .init {\n            $0.servers.use { app in\n            \tMyServer()\n            }\n        }\n    }\n}\n\napp.servers.use(.myServer)\n```\n\n----------------------------------------\n\nTITLE: Response with Eager Loaded Children - JSON\nDESCRIPTION: This JSON shows the response from the `GET /galaxies` endpoint after implementing eager loading. The `stars` array within each galaxy object contains the related star objects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": ...,\n        \"name\": \"Milky Way\",\n        \"stars\": [\n            {\n                \"id\": ...,\n                \"name\": \"Sun\",\n                \"galaxy\": {\n                    \"id\": ...\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Copy SSH Keys to New User\nDESCRIPTION: This command copies the SSH keys from the `root` user's directory to the `vapor` user's home directory. This allows the new user to log in via SSH without a password. The ownership of the copied files is changed to the vapor user and group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrsync --archive --chown=vapor:vapor ~/.ssh /home/vapor\n```\n\n----------------------------------------\n\nTITLE: Reading and Using a Database Enum (Swift)\nDESCRIPTION: This code shows how to read a database enum and use it when defining a field in the schema using Vapor. The `database.enum(\"planet_type\").read()` reads the previously defined enum. It then uses the enum type to define a `type` field in the `planets` schema, marking it as required. The example uses flatMap and async/await to handle the asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Un ejemplo de leer un enum y usarlo para definir un campo nuevo.\ndatabase.enum(\"planet_type\").read().flatMap { planetType in\n    database.schema(\"planets\")\n        .field(\"type\", planetType, .required)\n        .update()\n}\n\n// O\n\nlet planetType = try await database.enum(\"planet_type\").read()\ntry await database.schema(\"planets\")\n    .field(\"type\", planetType, .required)\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Fetching a Value From Redis - Swift\nDESCRIPTION: This snippet demonstrates how to use the app.redis property to fetch a value from Redis using the get method. The value is retrieved as a String and printed to the console.  It shows both the async/await and .wait() versions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet value = try app.redis.get(\"my_key\", as: String.self).wait()\nprint(value)\n// Optional(\"my_value\")\n\n// or\n\nlet value = try await app.redis.get(\"my_key\", as: String.self)\nprint(value)\n// Optional(\"my_value\")\n```\n\n----------------------------------------\n\nTITLE: Specifying a Priority from Application Object - Swift\nDESCRIPTION: This snippet demonstrates how to specify a priority for a job from the Application object by extending the QueueName enum and using the queue(_:) method to specify a custom queue.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue(.emails)\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\"),\n                maxRetryCount: 3,\n                delayUntil: futureDate\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor project\nDESCRIPTION: This command uses the Vapor toolbox to create a new Vapor project named `app-name`. The user is prompted to select features and configure the project interactively, including options for using Fluent and Postgres.  Replace `app-name` with the desired project name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvapor new app-name\n```\n\n----------------------------------------\n\nTITLE: Creating Hello Tag with parameters Swift\nDESCRIPTION: Implements a `HelloTag` that takes a name as a parameter. The function retrieves the name parameter from the `LeafContext` and returns a string with a paragraph element containing \"Hello [name]\". The tag conforms to `UnsafeUnescapedLeafTag` to prevent HTML escaping.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.parameters[0].string else {\n            throw HelloTagError.missingNameParameter\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add user to sudo group\nDESCRIPTION: This command adds the newly created user 'vapor' to the sudo group, granting them administrative privileges.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nusermod -aG sudo vapor\n```\n\n----------------------------------------\n\nTITLE: Alternative Route Registration\nDESCRIPTION: Registers a route using `app.on` with the HTTP method specified. It is an alternative way to register routes, providing more flexibility by explicitly specifying the HTTP method. Dependencies: Vapor's `Application` object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.on(.GET, \"hello\", \"vapor\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Usage\nDESCRIPTION: Demonstrates the use of `#if` blocks for conditional rendering in Leaf. Shows how to check for variable existence and perform comparisons.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_5\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title):\n    The title is #(title)\n#else:\n    No title was provided.\n#endif\n```\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    This is a friendly web page.\n#else:\n    No strangers allowed!\n#endif\n```\n\nLANGUAGE: leaf\nCODE:\n```\n#if(count(users) > 0):\n    You have users!\n#else:\n    There are no users yet :(\n#endif\n```\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    Hello new user!\n#elseif(title == \"Welcome back!\"):\n    Hello old user\n#else:\n    Unexpected page!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Setting maxRetryCount for a Job using EventLoopFuture Swift\nDESCRIPTION: This snippet demonstrates how to set the `maxRetryCount` when dispatching a queue job using `EventLoopFuture` within a Vapor route handler. It dispatches an `EmailJob` with a specified payload and `maxRetryCount`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"email\") { req -> EventLoopFuture<String> in\n    return req\n        .queue\n        .dispatch(\n            EmailJob.self, \n            .init(to: \"email@email.com\", message: \"message\"),\n            maxRetryCount: 3\n        ).map { \"done\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Logging System (Swift)\nDESCRIPTION: Demonstrates how to bootstrap the `LoggingSystem` to configure the default log handler. Vapor projects typically do this in the `entrypoint.swift` file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\n```\n\n----------------------------------------\n\nTITLE: User Name Migration with Fluent in Swift\nDESCRIPTION: This migration modifies the 'users' table by deleting the 'name' field and adding 'first_name' and 'last_name' fields. This allows for splitting user names into first and last name columns. The revert function attempts to delete the 'users' table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserNameMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .deleteField(\"name\")\n            .field(\"first_name\", .string)\n            .field(\"last_name\", .string)\n            .update()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Docker Swarm\nDESCRIPTION: This command initializes a Docker Swarm on the current machine, making it the manager node. It's the first step in deploying applications in Swarm mode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndocker swarm init\n```\n\n----------------------------------------\n\nTITLE: Accessing Headers in Vapor\nDESCRIPTION: This code snippet shows how to access HTTP headers within a Vapor route handler. It retrieves the 'Content-Type' header and checks if it's JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.it.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"json\") { req -> String in\n    guard let contentType = req.headers.contentType, contentType == .json else {\n        throw Abort(.badRequest)\n    }\n    return \"JSON\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Timestamp with Fluent in Swift\nDESCRIPTION: This snippet demonstrates how to define a default value for a timestamp field using SQL. It sets the default value of the 'created_at' field to the current timestamp using the `SQLFunction(\"now\")`. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"created_at\", .datetime, .required, .sql(.default(SQLFunction(\"now\"))))\n```\n\n----------------------------------------\n\nTITLE: Creating Star Migration (Swift)\nDESCRIPTION: This Swift code creates a migration for the `Star` model, defining the database schema with an ID, name, and a foreign key referencing the `Galaxy` model.  It includes `prepare` and `revert` functions for applying and rolling back the migration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateStar: AsyncMigration {\n    // Star モデルを格納するためのデータベースの準備\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"stars\")\n            .id()\n            .field(\"name\", .string)\n            .field(\"galaxy_id\", .uuid, .references(\"galaxies\", \"id\"))\n            .create()\n    }\n\n    // 必要に応じて、prepare メソッドで行った変更を元に戻します\n    func revert(on database: Database) async throws {\n        try await database.schema(\"stars\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Model Conditionally to a Siblings Relationship in Fluent\nDESCRIPTION: This example shows how to conditionally attach a model to a siblings relationship using the `attach` method with the `ifNotExists` method. This ensures the model is only attached if the relationship doesn't already exist.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// 只有当关系不存在时才附加。\ntry await earth.$tags.attach(inhabited, method: .ifNotExists, on: database)\n```\n\n----------------------------------------\n\nTITLE: Chunking Results in Swift\nDESCRIPTION: Shows how to process query results in chunks to manage memory usage using the `chunk(max:)` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: self.database).chunk(max: 64) { planets in\n    // 处理查询到的行星数据\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Key with Components - Swift\nDESCRIPTION: This snippet illustrates initializing an RSA private key using its individual components: modulus, public exponent, and private exponent. It uses the `Insecure.RSA.PrivateKey` initializer.  Ensure that the modulus and exponents are properly encoded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Initialize an RSA private key with components.\nlet key = try Insecure.RSA.PrivateKey(\n    modulus: modulus, \n    exponent: publicExponent, \n    privateExponent: privateExponent\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Parent Relationship in Fluent\nDESCRIPTION: This code snippet demonstrates how to define an optional parent relationship using the `@OptionalParent` property wrapper.  Similar to `@Parent`, it stores a reference to the ID of another model, but allows the relationship to be `nil`. The `star_id` key specifies the field used to store the parent's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // 可选 parent 关系示例。\n    @OptionalParent(key: \"star_id\")\n    var star: Star?\n}\n```\n\n----------------------------------------\n\nTITLE: Vapor Route Handler Using EventLoopFuture\nDESCRIPTION: This code snippet demonstrates a Vapor route handler that uses EventLoopFuture for asynchronous operations. It queries for the first user, updates the lastAccessed property, and returns the user's name. It uses flatMap to chain the asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req -> EventLoopFuture<String> in\n    User.query(on: req.db).first().unwrap(or: Abort(.notFound)).flatMap { user in\n        user.lastAccessed = Date()\n        return user.update(on: req.db).map {            return user.name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Streaming Body Size (Swift)\nDESCRIPTION: This snippet shows how to set the maximum size for streaming bodies that Vapor will collect before calling the route handler. The size is specified as a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Increases the streaming body collection limit to 500kb\napp.routes.defaultMaxBodySize = \"500kb\"\n```\n\n----------------------------------------\n\nTITLE: Set Swift Tools Version in Package.swift\nDESCRIPTION: Sets the Swift tools version in the Package.swift file to 5.5. This is required to enable async/await support in Vapor projects. It specifies the version of the Swift build tools to use when building the package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.5\nimport PackageDescription\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Create XCTestCase subclass in Swift\nDESCRIPTION: This snippet demonstrates how to create a subclass of `XCTestCase` for writing test cases in Swift. It imports the `XCTVapor` module and defines a simple test function named `testStub`. All functions starting with `test` are automatically executed when the application is tested.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport XCTVapor\n\nfinal class MyTests: XCTestCase {\n    func testStub() throws {\n    \t// 在这里测试。\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a single query parameter value in Swift\nDESCRIPTION: Demonstrates how to access a single query parameter value directly using the subscript operator on `req.query`. The value is an optional `String` because the parameter may be absent in the URL.  This provides a simple way to retrieve individual query parameters without defining a full `Content` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet name: String? = req.query[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Define a route using the HTTP method helper\nDESCRIPTION: This snippet shows how to define a GET route using the `get` helper method. This helper accepts a list of PathComponent which could be strings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// 响应到 GET /foo/bar/baz\napp.get(\"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: User Migration with Fluent in Swift\nDESCRIPTION: This migration creates a 'users' table with 'id' (UUID) and 'name' (String) fields. It's used to set up the database schema for user models. The revert function deletes the 'users' table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"id\", .uuid, .identifier(auto: false))\n            .field(\"name\", .string, .required)\n            .create()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching a Model from a Siblings Relationship in Fluent\nDESCRIPTION: This example shows how to detach a model from a siblings relationship using the `detach` method. This removes the corresponding pivot model instance, effectively breaking the association between the two models.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// 从关系中删除模型。\ntry await earth.$tags.detach(inhabited, on: database)\n```\n\n----------------------------------------\n\nTITLE: Transforming a Future String to Integer Using flatMapThrowing\nDESCRIPTION: This snippet shows how to use the `flatMapThrowing` method to transform the value of a future string into a future integer, or throw an error if the transformation fails. The closure either returns the integer or throws an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet futureInt = futureString.flatMapThrowing { string in\n    print(string) // De eigenlijke String\n    guard let int = Int(string) else {\n        throw Abort(...)\n    }\n    return int\n}\n\nprint(futureInt) // EventLoopFuture<Int>\n```\n\n----------------------------------------\n\nTITLE: Revert Database Migration (Shell)\nDESCRIPTION: This shell command reverts the last batch of migrations on the database. It utilizes the `--revert` flag with the `swift run App migrate` command, rolling back the changes made by the most recently applied migrations. A confirmation is requested before reverting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.nl.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nswift run App migrate --revert\n```\n\n----------------------------------------\n\nTITLE: Configuring Google App Identifier and Domain - Swift\nDESCRIPTION: This snippet configures the Google application identifier and G Suite domain name for verifying Google JWTs. The `applicationIdentifier` and `gSuiteDomainName` properties of the `app.jwt.google` object are set. These configurations are required before verifying Google JWTs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Configure Google app identifier and domain name.\napp.jwt.google.applicationIdentifier = \"...\"\napp.jwt.google.gSuiteDomainName = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Add JWT Dependency - Swift Package Manager\nDESCRIPTION: This snippet demonstrates how to add the JWT dependency to your Package.swift file using Swift Package Manager. It specifies the URL and version of the JWT package to include in your project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n\t\t // Other dependencies...\n        .package(url: \"https://github.com/vapor/jwt.git\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Other dependencies...\n            .product(name: \"JWT\", package: \"jwt\")\n        ]),\n        // Other targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial Buffer Capacity for Compression\nDESCRIPTION: This code snippet demonstrates how to specify the initial buffer capacity when enabling HTTP response compression in Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n.enabled(initialByteBufferCapacity: 1024)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor project\nDESCRIPTION: This command creates a new Vapor project using the Vapor toolbox.  Replace `app-name` with your desired application name. This launches an interactive prompt to configure your Vapor project, where you can select Fluent and Postgres.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvapor new app-name\n```\n\n----------------------------------------\n\nTITLE: Managing Nginx Service\nDESCRIPTION: This snippet contains commands to stop, start, and restart the Nginx service.  These are standard commands for managing system services on Linux.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo service nginx stop\nsudo service nginx start\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Serving Public Files with FileMiddleware in Vapor (Swift)\nDESCRIPTION: This snippet shows how to enable the `FileMiddleware` in your `configure.swift` file to serve public files from the `Public/` directory. It initializes the middleware with the public directory and registers it for use by the application. This allows Vapor to serve static files like images and stylesheets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.es.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Serves files from `Public/` directory\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Ubuntu\nDESCRIPTION: These commands update the package lists and install the Supervisor process control system on Ubuntu. It ensures that the system has the latest package information before installing Supervisor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: List running Docker containers\nDESCRIPTION: This command lists all currently running Docker containers, displaying information such as container ID, image, and status. It's used to verify that the application and its dependencies are running.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker container ls\n```\n\n----------------------------------------\n\nTITLE: Filtering by Subset with Fluent in Swift\nDESCRIPTION: This example shows how to filter records based on whether a field's value is within a specified set of values (subset). The code retrieves planets that are either gas giants or small rocky planets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// Todos los planetas de tipo gas giant o small rocky.\nPlanet.query(on: database)\n    .filter(\\.$type ~~ [.gasGiant, .smallRocky])\n```\n\n----------------------------------------\n\nTITLE: Delete Constraint By Name Swift\nDESCRIPTION: This snippet removes a previously created constraint by name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n.deleteConstraint(name: \"no_duplicate_emails\")\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level to Debug in Swift\nDESCRIPTION: This snippet demonstrates how to set the log level to debug in your Vapor application.  This configuration enables detailed logging, including the SQL statements generated by Fluent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_42\n\nLANGUAGE: swift\nCODE:\n```\napp.logger.logLevel = .debug\n```\n\n----------------------------------------\n\nTITLE: Raw Access to MongoDatabase\nDESCRIPTION: This code snippet demonstrates how to access the raw `MongoDatabase` instance by casting the Fluent database instance to `MongoDatabaseRepresentable`. This allows using all of the MongoKitten APIs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nguard let db = req.db as? MongoDatabaseRepresentable else {\n  throw Abort(.internalServerError)\n}\n\nlet mongodb = db.raw\n```\n\n----------------------------------------\n\nTITLE: Remove a Docker volume\nDESCRIPTION: This command removes a specific Docker volume. Replace `my-dockerized-app_db_data` with the name of the volume to remove.  Be cautious when removing volumes as data loss is possible.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume rm my-dockerized-app_db_data\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Query with raw expression\nDESCRIPTION: This code shows how to use `.custom` with `.sql(raw:)` to execute a raw SQL expression as a filter.  It checks if the underlying database is SQL before applying the filter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport FluentSQL\n\nlet query = Planet.query(on: req.db)\nif req.db is SQLDatabase {\n    // The underlying database driver is SQL.\n    query.filter(.sql(raw: \"LOWER(name) = 'earth'\"))\n} else {\n    // The underlying database driver is _not_ SQL.\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with String Comparison\nDESCRIPTION: Shows how to perform string comparisons within a Leaf conditional statement. The `#if` tag checks if the `title` variable is equal to \"Welcome\" and displays a different message based on the result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_6\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    This is a friendly web page.\n#else:\n    No strangers allowed!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Scale Heroku Web Dyno\nDESCRIPTION: This command scales the number of web dynos for the Heroku application to 1. A dyno is a container that runs the application. Scaling up the number of dynos increases the capacity of the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nheroku ps:scale web=1\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Closure (Swift)\nDESCRIPTION: This snippet demonstrates how to listen for the WebSocket close event using the `ws.onClose` callback. This allows you to execute code when either the client or the server closes the WebSocket connection. The future is completed when the WebSocket is closed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nws.onClose.whenComplete { result in\n    // Geslaagd of mislukt om te sluiten.\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering Auto Migrate Swift\nDESCRIPTION: This code snippet shows how to programmatically trigger database migrations within a Vapor application. It utilizes `app.autoMigrate()` to initiate the migration process, using both `wait()` for synchronous execution and `await` for asynchronous execution in an `async` context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ntry app.autoMigrate().wait()\n\n// or\ntry await app.autoMigrate()\n```\n\n----------------------------------------\n\nTITLE: Logging within a Vapor Application\nDESCRIPTION: This snippet shows how to use the application's logger for messages related to application startup or configuration. Accessing the logger through `app.logger.info` allows logging of important events during the application's lifecycle. This is crucial for monitoring and debugging application initialization processes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.logger.info(\"Setting up migrations...\")\napp.migrations.use(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Environment Struct in Swift\nDESCRIPTION: This code snippet illustrates how to create a custom `Environment` struct with a specific name and arguments. This approach provides full control over the environment configuration, particularly useful for testing or specific deployment scenarios.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet env = Environment(name: \"testing\", arguments: [\"vapor\"])\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Example\nDESCRIPTION: Demonstrates using `#if` and `#else` to check for a title variable and display different content accordingly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_5\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title):\n    The title is #(title)\n#else:\n    No title was provided.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Registering Cowsay Command (Swift)\nDESCRIPTION: This registers the `Cowsay` command with the Vapor application, allowing it to be called from the command line as `cowsay`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.asyncCommands.use(Cowsay(), as: \"cowsay\")\n```\n\n----------------------------------------\n\nTITLE: Running Vapor App with environment variable - Shell\nDESCRIPTION: This command demonstrates how to specify the environment when running a Vapor application using the `--env` flag. It sets the environment to `production` which may affect how the application behaves.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nswift run App serve --env production\n```\n\n----------------------------------------\n\nTITLE: Supervisor Environment Variable Configuration\nDESCRIPTION: This example shows how to define environment variables that will be available to the Vapor application when run by Supervisor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nenvironment=PORT=8123,ANOTHERVALUE=\"/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration File Example\nDESCRIPTION: This is an example Supervisor configuration file for a Vapor application. It specifies the command to run, the working directory, the user to run as, and the log files.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[program:hello]\ncommand=/home/vapor/hello/.build/release/App serve --env production\ndirectory=/home/vapor/hello/\nuser=vapor\nstdout_logfile=/var/log/supervisor/%(program_name)s-stdout.log\nstderr_logfile=/var/log/supervisor/%(program_name)s-stderr.log\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag with Custom Formatting\nDESCRIPTION: Shows how to customize the date format using the `#date` tag by providing a format string as the second argument. The example uses \"yyyy-MM-dd\" to format the date.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_21\n\nLANGUAGE: leaf\nCODE:\n```\nThe date is #date(now, \"yyyy-MM-dd\")\n```\n\n----------------------------------------\n\nTITLE: Setting a Relation's Value Manually\nDESCRIPTION: This snippet demonstrates how to manually set the value of a relation using the `value` property. This attaches the related model to the parent without a database query. Useful when the related model is already available.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.md#_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nplanet.$star.value = star\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with RedirectMiddleware (Swift)\nDESCRIPTION: This code snippet shows how to protect routes using `RedirectMiddleware` to redirect unauthenticated users to a login page.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_44\n\nLANGUAGE: swift\nCODE:\n```\nlet protectedRoutes = app.grouped(User.redirectMiddleware(path: \"/login?loginRequired=true\"))\n\nlet redirectMiddleware = User.redirectMiddleware { req -> String in\n  return \"/login?authRequired=true&next=\\(req.url.path)\"\n}\n\nlet protectedRoutes = app.grouped([User.sessionAuthenticator(), redirectMiddleware])\n```\n\n----------------------------------------\n\nTITLE: Handling a simple GET request in Vapor\nDESCRIPTION: This code snippet demonstrates how to define a simple GET route in Vapor that extracts a parameter from the URL and returns a personalized greeting. It accesses the `name` parameter from the URL using `req.parameters.get(\"name\")!` and includes it in the response string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.es.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req -> String in\n    let name = req.parameters.get(\"name\")!\n    return \"Hello, \\(name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding a Response Body with Futures\nDESCRIPTION: This snippet illustrates how to decode a response body when using futures in Vapor. It utilizes `flatMapThrowing` to decode the content into a `MyJSONResponse` struct and then performs further operations using the decoded JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.client.get(\"https://httpbin.org/json\").flatMapThrowing { res in\n\ttry res.content.decode(MyJSONResponse.self)\n}.flatMap { json in\n\t// Gebruik JSON hier\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Creation Request\nDESCRIPTION: Illustrates an example HTTP request to create a new user using the `POST /users` endpoint with a JSON payload containing user details like name, email, password, and confirmPassword. Content-Type must be application/json.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /users HTTP/1.1\nContent-Length: 97\nContent-Type: application/json\n\n{\n    \"name\": \"Vapor\",\n    \"email\": \"test@vapor.codes\",\n    \"password\": \"secret42\",\n    \"confirmPassword\": \"secret42\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Testable Method (Swift)\nDESCRIPTION: This snippet demonstrates how to configure the testable method to use either in-memory or a running HTTP server for testing.  The `.inMemory` option is the default. The `.running` option can be used to specify a port.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Gebruik programmatische testen.\napp.testable(method: .inMemory).test(...)\n\n// Voer testen uit via een live HTTP server.\napp.testable(method: .running).test(...)\n```\n\nLANGUAGE: swift\nCODE:\n```\n.running(port: 8123)\n```\n\n----------------------------------------\n\nTITLE: Generating Random ECDSA Key - Swift\nDESCRIPTION: This snippet generates a random ECDSA private key using the default initializer of `ES256PrivateKey`. This is particularly useful for testing purposes where a pre-existing key is not required.  The resulting `key` variable holds the newly generated ECDSA private key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nlet key = ES256PrivateKey()\n```\n\n----------------------------------------\n\nTITLE: Conform Model to Content (Swift)\nDESCRIPTION: This Swift code demonstrates how to conform a `Planet` model to the `Content` protocol to enable serialization and deserialization with Vapor's content API. It also shows an example route that returns all planets.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nextension Planet: Content { }\n\napp.get(\"planets\") { req async throws in \n    // Geef een array van alle planeten.\n    try await Planet.query(on: req.db).all()\n}\n```\n\n----------------------------------------\n\nTITLE: Transform EventLoopFuture Value\nDESCRIPTION: Demonstrates how to use `transform` to change the value of an EventLoopFuture to a predefined value, ignoring the original value.  This is particularly useful for EventLoopFuture<Void>, where the completion is important but not the result value itself. It sets the future's result to a constant value upon completion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n/// Supongamos que recuperamos un futuro vacío de alguna API\nlet userDidSave: EventLoopFuture<Void> = ...\n\n/// Transforma el futuro vacío a un estado HTTP\nlet futureStatus = userDidSave.transform(to: HTTPStatus.ok)\nprint(futureStatus) // EventLoopFuture<HTTPStatus>\n```\n\n----------------------------------------\n\nTITLE: Create a New Vapor Project\nDESCRIPTION: This snippet uses the `vapor new` command to create a new Vapor project named `HelloWorld`. The `-n` flag skips interactive prompts, creating a barebones project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nvapor new HelloWorld -n\n```\n\n----------------------------------------\n\nTITLE: Start application as a standalone container\nDESCRIPTION: This command starts the application and its dependencies (defined in `depends_on`) as standalone containers using Docker Compose. It reads the configuration from the `docker-compose.yml` file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up app\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Pong Events (Swift)\nDESCRIPTION: This code demonstrates how to handle WebSocket pong events using the `ws.onPong` method.  A closure is registered that will be called when a pong frame is received.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nws.onPong { ws in\n    // Se recibió pong.\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Results with Fluent in Swift\nDESCRIPTION: This snippet illustrates how to retrieve data in chunks to manage memory usage when dealing with large datasets.  It processes planets in chunks of up to 64 at a time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n// Recupera todos los planetas en fragmentos de, como máximo, 64 a la vez.\nPlanet.query(on: self.database).chunk(max: 64) { planets in\n    // Handle chunk of planets.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp with ISO8601 Format in Swift\nDESCRIPTION: Shows how to define a `@Timestamp` with a specific format, in this case, ISO8601.  This allows customizing how the timestamp is stored in the database. The example requires a string field in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Slaat een ISO 8601 geformatteerd tijdstempel op dat weergeeft\n// wanneer dit model voor het laatst werd bijgewerkt.\n@Timestamp(key: \"updated_at\", on: .update, format: .iso8601)\nvar updatedAt: Date?\n```\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"updated_at\", .string)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Command Line Argument\nDESCRIPTION: This shows how to set the log level for a Vapor application using the `--log` command-line argument when starting the application. This allows for dynamic adjustment of the verbosity of logs without modifying code. The level set will persist for the current application instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.zh.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --log debug\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Relationship with @Parent - Swift\nDESCRIPTION: This code snippet demonstrates how to define a parent relationship in a Fluent model using the `@Parent` property wrapper. The `key` parameter specifies the field name in the database that stores the parent's ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.nl.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@Parent(key: \"galaxy_id\")\nvar galaxy: Galaxy\n```\n\n----------------------------------------\n\nTITLE: Transforming a Future String to Future Response Using flatMap\nDESCRIPTION: This snippet shows how to use the `flatMap` method to transform the value of a future string into another future value (ClientResponse). It avoids nested futures by returning another future from the closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet client: Client = ... \n\nlet futureResponse = futureString.flatMap { string in\n    client.get(string) // EventLoopFuture<ClientResponse>\n}\n\nprint(futureResponse) // EventLoopFuture<ClientResponse>\n```\n\n----------------------------------------\n\nTITLE: Add Foreign Key Cascade Swift\nDESCRIPTION: This snippet demonstrates how to add a top-level foreign key constraint with an `onDelete` action set to `.cascade`. This means that when a referenced record is deleted, the corresponding records in this table will also be deleted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n.foreignKey(\"star_id\", references: \"stars\", \"id\", onDelete: .cascade)\n```\n\n----------------------------------------\n\nTITLE: Updating a Schema with Fluent in Swift\nDESCRIPTION: This snippet demonstrates updating an existing schema ('planets') by adding a unique constraint on the 'name' field and deleting the 'star_id' field, using the `.update()` method to apply the changes. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .unique(on: \"name\")\n    .deleteField(\"star_id\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Test Vapor Application with curl\nDESCRIPTION: This snippet uses `curl` to send an HTTP request to the Vapor application running on the specified IP address. It expects the application to respond with \"It works!\". Replace the IP address with the actual IP of the droplet.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://157.245.244.228\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox from Source\nDESCRIPTION: These commands clone the Vapor Toolbox repository, check out a specific version, and install it. This method is required on Linux, as pre-built binaries are not available.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ko.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Open Vapor Project in Xcode\nDESCRIPTION: This command opens the `Package.swift` file in Xcode, triggering Swift Package Manager to download project dependencies and set up the Xcode project for development.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.es.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Stop Docker Compose Services and Remove Volumes\nDESCRIPTION: This command stops all services defined in the docker-compose.yml file and removes the volumes associated with those services. This is useful for resetting the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Rendering the View with Data - Swift\nDESCRIPTION: This code snippet demonstrates how to render a Leaf view from a Vapor controller, passing a dictionary containing the `name` that the HelloTag accesses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nreturn try await req.view.render(\"home\", [\"name\": \"John\"])\n```\n\n----------------------------------------\n\nTITLE: Attaching a Model to Siblings Relationship (Swift)\nDESCRIPTION: Demonstrates how to attach a model to a siblings relationship using the `attach` method. This creates a new entry in the pivot model to establish the relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nlet earth: Planet = ...\nlet inhabited: Tag = ...\n// Añadir el modelo a la relación.\ntry await earth.$tags.attach(inhabited, on: database)\n```\n\n----------------------------------------\n\nTITLE: Registering custom Leaf tag in Vapor Swift\nDESCRIPTION: Registers the `NowTag` with the Leaf renderer.  This configuration allows Leaf to recognize and process the `#now` tag within Leaf templates. This is typically done in the `configure.swift` file of a Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.leaf.tags[\"now\"] = NowTag()\n```\n\n----------------------------------------\n\nTITLE: Filter Contains Substring Swift\nDESCRIPTION: This example shows how to filter planets whose names start with the letter 'M'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Alle planeten waarvan de naam begint met de letter M\nPlanet.query(on: database)\n    .filter(\\.$name =~ \"M\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger from Application in Vapor\nDESCRIPTION: This code demonstrates how to access the Logger instance from the Application instance in a Vapor application. This is useful for logging information during startup or setup processes, such as setting up migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.logger.info(\"Setting up migrations...\")\napp.migrations.use(...)\n```\n\n----------------------------------------\n\nTITLE: Generación de Código TOTP en Vapor (Swift)\nDESCRIPTION: Este snippet muestra cómo generar un código TOTP (Time-based One-time Password). Requiere la importación del módulo Vapor. Se inicializa una clave simétrica, se crea una instancia de TOTP y luego se genera un código basado en la hora actual.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet totp = TOTP(key: key, digest: .sha256, digits: .six, interval: 60)\nlet code = totp.generate(time: Date())\n\n// O utilizando la función estática generate.\nTOTP.generate(key: key, digest: .sha256, digits: .six, interval: 60, time: Date())\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL with Connection String\nDESCRIPTION: This snippet demonstrates configuring PostgreSQL using a connection string.  Replace `<connection string>` with the actual connection string for your PostgreSQL database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.databases.use(.postgres(url: \"<connection string>\"), as: .psql)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Codable Payload for APNS in Swift\nDESCRIPTION: This snippet illustrates how to define a custom Codable struct for the payload of an APNS push notification in Swift. This enables developers to include custom data in their notifications that can be accessed by the receiving application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// Aangepaste codeerbare lading\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize a Git Repository\nDESCRIPTION: This command initializes a new Git repository in the current directory. This is necessary for Heroku to track and deploy changes to the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Install Swift Dependencies\nDESCRIPTION: This snippet updates the package lists and installs the necessary dependencies for Swift on Ubuntu. It uses `apt-get` to install required packages.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install binutils git gnupg2 libc6-dev libcurl4-openssl-dev \\\n \tlibedit2 libgcc-9-dev libpython3.8 libsqlite3-0 libstdc++-9-dev \\\n \tlibxml2-dev libz3-dev pkg-config tzdata unzip zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Builder in Swift\nDESCRIPTION: This snippet illustrates how to create a Fluent query builder using either the `query` method on the model type or by passing the model type to the `query` method on a database object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// También crea un constructor de consultas.\ndatabase.query(Planet.self)\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request example with no query parameters\nDESCRIPTION: Example of an HTTP GET request without any URL query parameters. The URL simply points to the `/hello` endpoint, and the `content-length` is set to `0`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /hello HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor project\nDESCRIPTION: Creates a new Vapor project using the Vapor toolbox.  The `app-name` placeholder needs to be replaced with the desired name of the application. This triggers an interactive wizard to configure project options.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvapor new app-name\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in Swift\nDESCRIPTION: Illustrates how to find the minimum value of a specific field in the query results using the `min(_:)` method. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database).min(\\.$name)\n```\n\n----------------------------------------\n\nTITLE: Registering the Cowsay Command\nDESCRIPTION: This Swift code registers the `Cowsay` command with the Vapor application's `asyncCommands`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.asyncCommands.use(Cowsay(), as: \"cowsay\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Future to complete in Vapor\nDESCRIPTION: This code snippet demonstrates how to use the `wait()` method on an `EventLoopFuture<String>` to synchronously wait for the future to complete and retrieve its value. The `wait()` method can throw an error if the future fails. It's crucial to avoid using `wait()` on event loop threads to prevent blocking the application. It should only be used on background threads or during application configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n/// Veronderstel dat we een toekomstige string terugkrijgen van een API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Blokkeer tot de string klaar is\nlet string = try futureString.wait()\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: Leaf Date Tag Example\nDESCRIPTION: Illustrates using the `#date` tag to format a date in a readable string, using the default ISO8601 format.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nrender(..., [\"now\": Date()])\n```\n\n----------------------------------------\n\nTITLE: Install Swift Toolchain (Move and Link)\nDESCRIPTION: This snippet moves the extracted Swift toolchain to `/swift/5.7.3` and creates a symbolic link in `/usr/bin` to make Swift accessible from the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /swift\nsudo mv swift-5.7.3-RELEASE-ubuntu22.04 /swift/5.7.3\nsudo ln -s /swift/5.7.3/usr/bin/swift /usr/bin/swift\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in Leaf Template\nDESCRIPTION: Illustrates how to display data passed from Swift in a Leaf template using tags.  The struct properties passed from Swift are accessible as tag parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_4\n\nLANGUAGE: leaf\nCODE:\n```\n<h1>#(title)</h1>\n#for(number in numbers):\n    <p>#(number)</p>\n#endfor\n```\n\n----------------------------------------\n\nTITLE: Updating a Field's Type with Fluent in Swift\nDESCRIPTION: This snippet shows how to update an existing field's data type. In this case, it updates the 'age' field to the `.double` type. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.updateField(\"age\", .double)\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Inheritance\nDESCRIPTION: Demonstrates how to use `#extend`, `#export`, and `#import` to create template inheritance. It creates a child template (`child.leaf`) that exports its body to a master template (`master.leaf`).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_12\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"master\"):\n    #export(\"body\"):\n        <p>Welcome to Vapor!</p>\n    #endexport\n#endextend\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP Code in Vapor\nDESCRIPTION: This example generates a TOTP (Time-based One-Time Password) using a symmetric key and the current time.  The TOTP is initialized with a key, hash algorithm, number of digits, and an interval (in seconds) for which the code is valid.  The `Date()` function returns the current time, which is used to generate the password.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet totp = TOTP(key: key, digest: .sha256, digits: .six, interval: 60)\nlet code = totp.generate(time: Date())\n\n// Or using the static generate function\nTOTP.generate(key: key, digest: .sha256, digits: .six, interval: 60, time: Date())\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Zip Code Validator\nDESCRIPTION: This snippet shows how to add the custom `zipCode` validator to the `Validations` collection, allowing you to validate a zip code field. It specifies that the 'zipCode' field should be a string and uses the custom validator.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\"zipCode\", as: String.self, is: .zipCode)\n```\n\n----------------------------------------\n\nTITLE: Updating Server Port Configuration for Vapor 4\nDESCRIPTION: This code snippet demonstrates how to change the default server port in Vapor 4. Instead of registering a NIOServerConfig with services, the server configuration is now directly accessible as properties on the Application instance.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// Verander de standaardpoort van de server in 8281\n- services.register { container -> NIOServerConfig in\n-     return .default(port: 8281)\n- }\n+ app.http.server.configuration.port = 8281\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example\nDESCRIPTION: Illustrates the typical folder structure for a SPM package.  Each `.target` or `.executableTarget` corresponds to a directory within the `Sources` directory, and each `.testTarget` is associated with a directory in the `Tests` directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.nl.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n.\n├── Sources\n│   └── App\n│       └── (Source code)\n├── Tests\n│   └── AppTests\n└── Package.swift\n```\n\n----------------------------------------\n\nTITLE: Throwing Abort Errors in Vapor (Swift)\nDESCRIPTION: Demonstrates throwing `Abort` errors in Vapor to return specific HTTP status codes and reasons. It uses `Abort(.notFound)` for a 404 error and `Abort(.unauthorized, reason:)` for a 401 error with a custom message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// 404 error, default \"Not Found\" reason used.\nthrow Abort(.notFound)\n\n// 401 error, custom reason used.\nthrow Abort(.unauthorized, reason: \"Invalid Credentials\")\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in FlatMap with Do/Catch\nDESCRIPTION: This snippet demonstrates error handling within a `flatMap` closure using Swift's `do`/`catch` block. If an error occurs during the synchronous conversion of a string to a URL, a pre-failed future is created using the event loop.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet futureResponse = futureString.flatMap { string in\n    let url: URL\n    do {\n        // Some synchronous throwing method.\n        url = try convertToURL(string)\n    } catch {\n        // Use event loop to make pre-completed future.\n        return eventLoop.makeFailedFuture(error)\n    }\n    return client.get(url) // EventLoopFuture<ClientResponse>\n}\n```\n\n----------------------------------------\n\nTITLE: Set Swift Tools Version in Package Description\nDESCRIPTION: This code snippet shows how to set the minimum Swift tools version to 5.5 in the Package.swift file. This is a prerequisite for using async/await in Vapor projects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.5\nimport PackageDescription\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Update Swift Version in Dockerfile\nDESCRIPTION: Updates the Swift version in the Dockerfile to 5.5. This is important for ensuring that the Docker container uses a Swift version that supports async/await. It applies specifically to Linux deployments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-FROM swift:5.2-focal as build\n+FROM swift:5.5-focal as build\n...\n-FROM swift:5.2-focal-slim\n+FROM swift:5.5-focal-slim\n```\n\n----------------------------------------\n\nTITLE: Checking application logs\nDESCRIPTION: This command retrieves the live logs from a Fly.io application. It displays real-time output from the application, allowing for monitoring and debugging. It requires the application to be actively running.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Checking if a Relationship is Loaded in Fluent\nDESCRIPTION: This code shows how to check if a relationship has been loaded using the `value` property on the relationship property wrapper. This is useful to avoid attempting to access a relationship that hasn't been loaded yet.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nif planet.$star.value != nil {\n    // 关系已被加载。\n    print(planet.star.name)\n} else {\n    // 关系还未加载。\n    // 试图访问 planet.star 将会失败。\n}\n```\n\n----------------------------------------\n\nTITLE: Install Swift (Swiftly example)\nDESCRIPTION: These commands demonstrate how to install Swift using the Swiftly CLI tool.  It fetches the latest stable Swift release, installs it and then verifies the installation by printing the Swift version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ swiftly install latest\n\nFetching the latest stable Swift release...\nInstalling Swift 5.9.1\nDownloaded 488.5 MiB of 488.5 MiB\nExtracting toolchain...\nSwift 5.9.1 installed successfully!\n\n$ swift --version\n\nSwift version 5.9.1 (swift-5.9.1-RELEASE)\nTarget: x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for JWT Verification\nDESCRIPTION: This snippet shows an example HTTP request used to test JWT verification. It includes the Authorization header with a bearer token.  The token is sent to the /me endpoint to trigger verification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nauthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXBvciIsImV4cCI6NjQwOTIyMTEyMDAsImFkbWluIjp0cnVlfQ.lS5lpwfRNSZDvpGQk6x5JI1g40gkYCOWqbc3J_ghowo\n```\n\n----------------------------------------\n\nTITLE: Content Structure for File Uploads\nDESCRIPTION: Defines a `Profile` struct conforming to the `Content` protocol. The `image` property is defined as `Data` type, which is suitable for file uploads. This struct is used to decode multipart form data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Profile: Content {\n    var name: String\n    var email: String\n    var image: Data\n}\n```\n\n----------------------------------------\n\nTITLE: Use Redis Session Driver - Swift\nDESCRIPTION: Configures Vapor to use Redis as the session driver, storing session data in the Redis instance.  This requires that Redis is configured and the application can communicate with the Redis instance.  Redis allows for session persistence and sharing across multiple instances of an application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport Redis\n\napp.sessions.use(.redis)\n```\n\n----------------------------------------\n\nTITLE: URLQueryDecoder Protocol in Swift\nDESCRIPTION: Defines the `URLQueryDecoder` protocol, which requires a `decode` function to decode a `Decodable` type from a `URI`. This enables creating custom decoders for URL query strings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol URLQueryDecoder {\n    func decode<D>(_ decodable: D.Type, from url: URI) throws -> D\n        where D: Decodable\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dictionary Field (Swift)\nDESCRIPTION: This snippet demonstrates how to define a field that stores a dictionary, leveraging the `.dictionary` data type.  In this example, no 'of' parameter is specified implying the dictionary is heterogenous like a Codable struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"pet\", .dictionary, .required)\n```\n\n----------------------------------------\n\nTITLE: Register TodosController in routes.swift (Swift)\nDESCRIPTION: This code shows how to register a `TodosController` instance with the Vapor application's routes. This allows the application to route requests to the controller's methods.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/controllers.ja.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.register(collection: TodosController())\n```\n\n----------------------------------------\n\nTITLE: Running Specific Vapor Command Help (Shell)\nDESCRIPTION: This command displays help information for a specific Vapor command (e.g., `serve`). This provides details on the arguments and options accepted by that command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --help\n```\n\n----------------------------------------\n\nTITLE: Create Token Protected Me Route\nDESCRIPTION: Creates a `GET /me` endpoint protected by token authentication.  Groups the application with `UserToken.authenticator()` to require a valid token. Upon successful authentication, returns the authenticated `User`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nlet tokenProtected = app.grouped(UserToken.authenticator())\ntokenProtected.get(\"me\") { req -> User in\n    try req.auth.require(User.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Contains Tag\nDESCRIPTION: Demonstrates using the `#contains` tag to check if an array contains a specific value. It showcases a conditional statement using the tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_18\n\nLANGUAGE: leaf\nCODE:\n```\n#if(contains(planets, \"Earth\")):\n    Earth is here!\n#else:\n    Earth is not in this array.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using the HelloTag with data in a Leaf template\nDESCRIPTION: This snippet shows how to use the `HelloTag` with data injected into the view context. The `#hello()` tag will be replaced with `<p>Hello John</p>` if the view is rendered with `[\"name\": \"John\"]`\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_7\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello()\n```\n\n----------------------------------------\n\nTITLE: Copying SSH keys to new user\nDESCRIPTION: Copies the authorized SSH keys from the root user's directory to the newly created user's directory. This allows passwordless SSH login for the new user.  The `rsync` command ensures proper permissions and ownership are preserved.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrsync --archive --chown=vapor:vapor ~/.ssh /home/vapor\n```\n\n----------------------------------------\n\nTITLE: Setting Parent ID in Swift Init Method\nDESCRIPTION: This snippet demonstrates how to set the parent identifier in the init method of a Swift model using the `@Parent` property wrapper. By prefixing the parent property name with `$`, it accesses the underlying property wrapper to set the actual identifier value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\nself.$galaxy.id = galaxyID\n```\n\n----------------------------------------\n\nTITLE: Leaf Contains Tag Usage\nDESCRIPTION: This snippet demonstrates the `#contains` tag, which checks if an array (planets) contains a specific value (Earth).  It uses the `#if` tag to conditionally render different messages based on the result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_18\n\nLANGUAGE: leaf\nCODE:\n```\n#if(contains(planets, \"Earth\")):\n    Earth is here!\n#else:\n    Earth is not in this array.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Application Storage Extension - Swift\nDESCRIPTION: This snippet creates a computed property extension on `Application` to provide a concise API for accessing stored values. This encapsulates the storage access using a specific key.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nextension Application {\n    var myNumber: Int? {\n        get { self.storage[MyNumber.self] }\n        set { self.storage[MyNumber.self] = newValue }\n    }\n}\n\napp.myNumber = 42\nprint(app.myNumber) // 42\n```\n\n----------------------------------------\n\nTITLE: Writing a buffer to a file in Swift\nDESCRIPTION: This snippet demonstrates how to write a buffer to a file using Vapor's `req.fileio.writeFile` method. The method requires a `ByteBuffer` containing the data to be written and the destination file path as input. The future returned will signal when writing is complete.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Schrijft buffer naar bestand.\nreq.fileio.writeFile(ByteBuffer(string: \"Hello, world\"), at: \"/path/to/file\")\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request with Bearer Token\nDESCRIPTION: An example HTTP request demonstrating the use of a Bearer token for authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nauthorization: Bearer test\n```\n\n----------------------------------------\n\nTITLE: Running the Vapor Server via Command Line\nDESCRIPTION: This command-line snippet demonstrates how to start the Vapor server using the `serve` command. This is the default way to run the server from the terminal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Explicit Services (Shell)\nDESCRIPTION: Starts specific services defined in the Docker Compose file. This command explicitly starts the 'app' and 'db' services, showing logs from both.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose up app db\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with Bearer Token\nDESCRIPTION: An example HTTP request with a bearer token to be used for initial authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nauthorization: Bearer test\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket with Promise\nDESCRIPTION: This snippet demonstrates closing a WebSocket connection with an optional `EventLoopPromise`.  This allows for asynchronous notification of the close completion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nws.close(promise: nil)\n```\n\n----------------------------------------\n\nTITLE: Using Sessions Middleware Globally in Vapor\nDESCRIPTION: This snippet demonstrates how to add `SessionsMiddleware` to your Vapor application globally, enabling session support for all routes. This middleware must be added after the cookie factory is declared.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(app.sessions.middleware)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Field from a Schema with Fluent in Swift\nDESCRIPTION: This snippet shows how to delete a field named 'age' from a schema using the `.deleteField()` method. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n.deleteField(\"age\")\n```\n\n----------------------------------------\n\nTITLE: Use Dictionary Data Type Swift\nDESCRIPTION: This code demonstrates how to define a field using the dictionary data type. This field stores a Pet struct and is marked as required.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"pet\", .dictionary, .required)\n```\n\n----------------------------------------\n\nTITLE: POST Route for Creating Users\nDESCRIPTION: Defines a POST route for creating users. It decodes the request content into a `CreateUser` struct using `req.content.decode`. Then returns the decoded user. `Content` protocol is a requirement for the type to be decoded.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\napp.post(\"users\") { req -> CreateUser in\n    let user = try req.content.decode(CreateUser.self)\n    // Do something with user.\n    return user\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Binary Messages on WebSocket\nDESCRIPTION: This code shows how to handle incoming binary messages on a WebSocket connection using the `onBinary` callback. The closure is called when a binary message is received, providing the WebSocket instance (`ws`) and the binary data (`binary`) as an array of bytes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nws.onBinary { ws, binary in\n    // 这个方法接收二进制数组。\n    print(binary)\n}\n```\n\n----------------------------------------\n\nTITLE: Render View Using Leaf\nDESCRIPTION: Renders a Leaf template with provided data. This example uses the `req.view.render` method to generate a view from the `hello.leaf` template, passing a dictionary containing the value for the `name` variable. It returns an `EventLoopFuture<View>` or uses async/await to return a `View` directly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.pl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req -> EventLoopFuture<View> in\n    return req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n\n// lub\n\napp.get(\"hello\") { req async throws -> View in\n    return try await req.view.render(\"hello\", [\"name\": \"Leaf\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Route with Return Type\nDESCRIPTION: Registers a route with a specified return type (`String`). This is useful when the compiler cannot automatically infer the return type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"foo\") { req -> String in\n\treturn \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Docker Compose services\nDESCRIPTION: This command stops all services defined in the `docker-compose.yml` file. It gracefully shuts down the containers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Addresses for Redis (Swift)\nDESCRIPTION: This snippet shows how to create an array of `SocketAddress` instances for connecting to multiple Redis endpoints, such as a Redis cluster. It uses `makeAddressResolvingHost` to resolve hostnames and ports into socket addresses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet serverAddresses: [SocketAddress] = [\n  try .makeAddressResolvingHost(\"localhost\", port: RedisConnection.Configuration.defaultPort)\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation\nDESCRIPTION: This command is used to verify that the Vapor Toolbox has been installed correctly. It displays the help information and a list of available commands if the installation was successful.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ja.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Updating main.swift for Vapor 4\nDESCRIPTION: This code snippet shows the updated structure of the main.swift file in a Vapor 4 project.  It imports App and Vapor, detects the environment, bootstraps the logging system, creates the Application instance, and runs the application.  The `defer` block ensures the application shuts down properly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport App\nimport Vapor\n\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\nlet app = Application(env)\ndefer { app.shutdown() }\ntry configure(app)\ntry app.run()\n```\n\n----------------------------------------\n\nTITLE: Generating an HOTP Code in Vapor\nDESCRIPTION: This snippet demonstrates how to generate an HOTP (HMAC-based One-Time Password) code in Vapor. HOTP requires a symmetric key and a counter. The snippet generates a code using SHA256 and 6 digits, with a counter value of 25.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet hotp = HOTP(key: key, digest: .sha256, digits: .six)\nlet code = hotp.generate(counter: 25)\n\n// 或者使用静态生成函数\nHOTP.generate(key: key, digest: .sha256, digits: .six, counter: 25)\n```\n\n----------------------------------------\n\nTITLE: Fluent Configuration in Vapor 4 (Swift)\nDESCRIPTION: Demonstrates how to configure databases and migrations in Vapor 4 using `app.databases` and `app.migrations` respectively. It shows how to register a PostgreSQL database and a migration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\ntry app.databases.use(.postgres(url: \"postgres://...\"), as: .psql)\n```\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.use(CreatePlanet(), on: .psql)\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Relationships with Property Wrappers in Vapor 4 (Swift)\nDESCRIPTION: Demonstrates the change in defining parent relationships in Vapor 4 using the `@Parent` property wrapper.  It replaces the older method of defining the relationship with a computed property that calls the `parent` function. The `key` parameter specifies the name of the field storing the identifier in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\n+ @Parent(key: \"serverID\") \n+ var server: Server\n```\n\n----------------------------------------\n\nTITLE: Middleware Order Example in Vapor\nDESCRIPTION: This example illustrates the order in which middleware are executed when both global and route-specific middleware are used. Requests flow through middleware in the order they are added, while responses flow in reverse order.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(MiddlewareA())\napp.middleware.use(MiddlewareB())\n\napp.group(MiddlewareC()) {\n\t$0.get(\"hello\") { req in\n\t\t\"Hello, middleware.\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Override Hostname using Serve Command in Vapor (Shell)\nDESCRIPTION: This command demonstrates how to override the configured hostname using the `--hostname` flag with the `serve` command.  It is used to change the hostname when starting the server from the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Overschrijf geconfigureerde hostnaam.\nswift run App serve --hostname dev.local\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await\nDESCRIPTION: This code snippet demonstrates how to use async/await in a Vapor route to fetch and update a user. It returns the user's name using async/await syntax.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nroutes.get(\"firstUser\") { req async throws -> String in\n    guard let user = try await User.query(on: req.db).first() else {\n        throw Abort(.notFound)\n    }\n    user.lastAccessed = Date()\n    try await user.update(on: req.db)\n    return user.name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with Fluent in Swift\nDESCRIPTION: This snippet shows how to create a schema with an ID and a required string field named 'name'. It uses the `.create()` method to finalize the schema creation. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(\"planets\")\n    .id()\n    .field(\"name\", .string, .required)\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Checking Content Type Header in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to access and validate the Content-Type header of a request. It checks if the Content-Type is JSON and returns a string indicating that the request is JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"json\") { req -> String in\n    guard let contentType = req.headers.contentType, contentType == .json else {\n        throw Abort(.badRequest)\n    }\n    return \"JSON\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-completed Futures in Vapor\nDESCRIPTION: This snippet shows how to create pre-succeeded or pre-failed futures using `eventLoop.makeSucceededFuture` and `eventLoop.makeFailedFuture`. This is useful for testing or providing default values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Create a pre-succeeded future.\nlet futureString: EventLoopFuture<String> = eventLoop.makeSucceededFuture(\"hello\")\n\n// Create a pre-failed future.\nlet futureString: EventLoopFuture<String> = eventLoop.makeFailedFuture(error)\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection with Promise in Vapor\nDESCRIPTION: This snippet demonstrates closing a WebSocket connection in Vapor, using a Promise to handle the asynchronous operation. A `promise` object can be passed to the `ws.close` method. However, in this specific example the promise is set to `nil`\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nws.close(promise: nil)\n```\n\n----------------------------------------\n\nTITLE: Testing Method XCTVapor\nDESCRIPTION: Demonstrates how to configure the testing method (in-memory or running) using `app.testable(method:)`. It shows how to specify whether to use programmatic testing or run tests through a live HTTP server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\n// Utilizar pruebas programáticas.\napp.testable(method: .inMemory).test(...)\n\n// Ejecutar pruebas a través de un servidor HTTP en vivo.\napp.testable(method: .running).test(...)\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Command\nDESCRIPTION: This shell command shows how to execute a custom command named 'hello' from the command line using `swift run App`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.zh.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswift run App hello\n```\n\n----------------------------------------\n\nTITLE: Adding Queues Redis Driver Package Dependency Swift\nDESCRIPTION: This snippet shows how to add the queues-redis-driver dependency to your SwiftPM package manifest file. This is necessary to use the Redis driver with Vapor Queues.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        /// 他の依存関係...\n        .package(url: \"https://github.com/vapor/queues-redis-driver.git\", from: \"1.0.0\"),\n    ],\n    targets: [\n        .executableTarget(name: \"App\", dependencies: [\n            // 他の依存関係\n            .product(name: \"QueuesRedisDriver\", package: \"queues-redis-driver\")\n        ]),\n        .testTarget(name: \"AppTests\", dependencies: [.target(name: \"App\")]),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Sending a Text Message via WebSocket\nDESCRIPTION: This snippet shows how to send a text message over a WebSocket connection using the `send` method. The `ws` object represents the established WebSocket connection.  A String is passed as the parameter, specifying the text message to be sent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nws.send(\"Ciao, mondo\")\n```\n\n----------------------------------------\n\nTITLE: Add New User\nDESCRIPTION: This command adds a new user named `vapor` to the system. This is a recommended security practice to avoid using the `root` account for everyday tasks.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadduser vapor\n```\n\n----------------------------------------\n\nTITLE: Writable Service Usage in Vapor (Swift)\nDESCRIPTION: Shows how to set and access the `MyConfiguration` property on the `Application` instance after the extension is added.  This demonstrates using the Application storage to manage stateful service configurations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.myConfiguration = .init(apiKey: ...)\nprint(app.myConfiguration?.apiKey)\n```\n\n----------------------------------------\n\nTITLE: Install Heroku CLI with Homebrew\nDESCRIPTION: This command uses Homebrew to install the Heroku Command Line Interface (CLI). The `brew tap` command adds the Heroku repository, and `brew install heroku` installs the CLI tool.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap heroku/brew && brew install heroku\n```\n\n----------------------------------------\n\nTITLE: Change Directory to the New Project\nDESCRIPTION: This command navigates the terminal to the newly created 'hello' directory, allowing subsequent commands to be executed within the project's context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.es.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Overriding Environment Detection (Swift)\nDESCRIPTION: This code shows how to override the default environment detection.  It creates a new `Environment` instance directly with a specified name and arguments. The arguments must include \"vapor\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet env = Environment(name: \"testing\", arguments: [\"vapor\"])\n```\n\n----------------------------------------\n\nTITLE: Accessing the timestamp property of a timestamp field Swift\nDESCRIPTION: This code demonstrates how to directly access the raw timestamp value of a `@Timestamp` field using the `timestamp` property. Allows manual setting of timestamp values.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// 手动设置 ISO 8601上的时间戳值\n// 格式化 @Timestamp.\nmodel.$updatedAt.timestamp = \"2020-06-03T16:20:14+00:00\"\n```\n\n----------------------------------------\n\nTITLE: Example of Verified Payload in Swift\nDESCRIPTION: This snippet shows the output of the verified payload in Swift. It displays the subject, expiration date and admin status extracted from the JWT.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nTestPayload(\n    subject: \"vapor\", \n    expiration: 4001-01-01 00:00:00 +0000, \n    isAdmin: true\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing All Routes in Vapor (Swift)\nDESCRIPTION: This snippet demonstrates how to access and print all the registered routes in a Vapor application.  It retrieves the array of `Route` objects using `app.routes.all` and prints them to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nprint(app.routes.all) // [Route]\n```\n\n----------------------------------------\n\nTITLE: Start Application in Detached Mode\nDESCRIPTION: This command starts the application in detached mode, meaning it runs in the background. This is useful for preventing the terminal from being blocked while the application is running.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up --detach app\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on CentOS/Amazon Linux\nDESCRIPTION: This snippet demonstrates how to install Nginx on CentOS or Amazon Linux using the yum package manager.  It's a simple one-line command assuming the yum repository is already configured.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install nginx\n```\n\n----------------------------------------\n\nTITLE: Defining Model Space in Swift\nDESCRIPTION: This code defines the space for a model by passing the space to `schema(_:space:)` when creating the table. This allows organizing models into different spaces within the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\ntry await db.schema(\"planets\", space: \"mirror_universe\")\n    .id()\n    // ...\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Terminal (Bash)\nDESCRIPTION: Illustrates how to set environment variables in the terminal using the `export` command. This allows the Vapor application to access these variables during runtime.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport FOO=BAR\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key with Key ID (kid) - Swift\nDESCRIPTION: This snippet demonstrates how to add an HMAC key to the JWT key collection in a Vapor application with a specified Key ID (kid) using Swift. It utilizes the `app.jwt.keys.add` method, specifying the `hmac` key, the `digestAlgorithm` as `.sha256`, and the `kid` as \"a\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Agregue HMAC con la clave SHA-256 denominada \"a\".\nawait app.jwt.keys.add(hmac: \"foo\", digestAlgorithm: .sha256, kid: \"a\")\n```\n\n----------------------------------------\n\nTITLE: Decoding with Futures (Swift)\nDESCRIPTION: Demonstrates how to decode the response content when using futures. The `flatMapThrowing` method is used to transform the response future into a future containing the decoded JSON.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/client.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nreturn req.client.get(\"https://httpbin.org/json\").flatMapThrowing { res in\n\ttry res.content.decode(MyJSONResponse.self)\n}.flatMap { json in\n\t// Use JSON here\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Swift version in Dockerfile\nDESCRIPTION: This code snippet demonstrates how to update the Swift version in a Dockerfile when migrating to Swift 5.5 to support async/await. The Dockerfile base images are updated from swift:5.2-focal to swift:5.5-focal.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-FROM swift:5.2-focal as build\n+FROM swift:5.5-focal as build\n...\n-FROM swift:5.2-focal-slim\n+FROM swift:5.5-focal-slim\n```\n\n----------------------------------------\n\nTITLE: Defining Array Field in Database Schema (Swift)\nDESCRIPTION: This snippet shows how to define the `tags` field in the database schema using the Vapor framework. It specifies that the `tags` field should be treated as an array of strings and is required.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"tags\", .array(of: .string), .required)\n```\n\n----------------------------------------\n\nTITLE: Adding Content Protocol to Model\nDESCRIPTION: This code adds conformance to the `Content` protocol for the `Galaxy` model.  This allows the model to be directly returned in a response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Galaxy: Model, Content {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP No Delay in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable TCP no delay for the Vapor HTTP server. Enabling `tcpNoDelay` attempts to minimize TCP packet latency.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// 降低数据包延迟。\napp.http.server.configuration.tcpNoDelay = true\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with Dynamic Path\nDESCRIPTION: Example HTTP request to a route with a dynamic path component.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /hello/swift HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Defining a Field Property in Swift\nDESCRIPTION: Illustrates how to define a field property using the `@Field` property wrapper in a Fluent model. The database key must be explicitly defined, and it doesn't have to match the property name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Planet: Model {\n    // De naam van de planeet.\n    @Field(key: \"name\")\n    var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server Endpoint in Vapor\nDESCRIPTION: This snippet demonstrates how to create a WebSocket endpoint in a Vapor application using the `app.webSocket` method.  It registers a route that upgrades HTTP requests to WebSocket connections, providing access to the `req` (request) and `ws` (WebSocket) objects. The WebSocket is then printed to the console.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\napp.webSocket(\"echo\") { req, ws in\n    // WebSocket connesso.\n    print(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Scale a Docker service\nDESCRIPTION: This command scales a specific service in the Docker Swarm to a desired number of replicas. In this case, the `test_migrate` service is scaled to 1 replica, effectively running the database migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ndocker service scale --detach test_migrate=1\n```\n\n----------------------------------------\n\nTITLE: Create Database Enum with Fluent in Swift\nDESCRIPTION: This snippet creates a database enum named 'planet_type' with three cases: 'smallRocky', 'gasGiant', and 'dwarf'. Database enums provide an additional layer of type safety. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.enum(\"planet_type\")\n    .case(\"smallRocky\")\n    .case(\"gasGiant\")\n    .case(\"dwarf\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Setting the Port in Vapor\nDESCRIPTION: This code snippet shows how to configure a custom port for the Vapor HTTP server. It utilizes the `app.http.server.configuration.port` property to set the port number to a value other than the default of 8080.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Configure custom port.\napp.http.server.configuration.port = 1337\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Pipelining in Vapor\nDESCRIPTION: This code snippet shows how to enable support for HTTP pipelining in the Vapor HTTP server by setting `app.http.server.configuration.supportPipelining` to `true`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Support HTTP pipelining.\napp.http.server.configuration.supportPipelining = true\n```\n\n----------------------------------------\n\nTITLE: Leaf Lowercased Tag Usage\nDESCRIPTION: Demonstrates how to use the `#lowercased` tag to convert a string to lowercase.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_12\n\nLANGUAGE: leaf\nCODE:\n```\n#lowercased(name)\n```\n\n----------------------------------------\n\nTITLE: Using custom Leaf tag in template Leaf\nDESCRIPTION: Demonstrates how to use the custom `#now` tag in a Leaf template. When rendered, this line will display the current time, formatted according to the logic defined in the `NowTag` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_3\n\nLANGUAGE: leaf\nCODE:\n```\nThe time is #now()\n```\n\n----------------------------------------\n\nTITLE: Passing Array Data with Swift\nDESCRIPTION: This snippet presents Swift code to pass an array of planets to a Leaf template. A `SolarSystem` struct conforming to `Codable` is defined, containing a `planets` array. This is then rendered within the \"solarSystem\" Leaf template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct SolarSystem: Codable {\n    let planets = [\"Venus\", \"Earth\", \"Mars\"]\n}\n\nreturn req.view.render(\"solarSystem\", SolarSystem())\n```\n\n----------------------------------------\n\nTITLE: Leaf Count Tag\nDESCRIPTION: Shows the usage of the `#count` tag to return the number of items in an array.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_14\n\nLANGUAGE: leaf\nCODE:\n```\nYour search matched #count(matches) pages.\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox from Github\nDESCRIPTION: These commands clone the Vapor Toolbox repository from GitHub, navigate to the toolbox directory, checkout a specific version, and then install the toolbox using the make command.  You'll need git and make installed for this to work.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.de.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Synchronous Content Decoding - Swift\nDESCRIPTION: This snippet shows how to decode request content synchronously in Vapor 4 using `req.content.decode`. This simplifies content decoding for most cases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet payload = try req.content.decode(MyPayload.self)\nprint(payload) // MyPayload\n```\n\n----------------------------------------\n\nTITLE: Serialized Test Suite\nDESCRIPTION: Demonstrates how to ensure tests run serially by including `.serialized` option in the `@Suite` declaration. This is useful when tests interact with a database or other shared resources.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n@Suite(\"App Tests with DB\", .serialized)\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Management Commands\nDESCRIPTION: Presents a set of systemctl commands used to manage a systemd service. These commands enable reloading the systemd daemon, enabling the service, starting, stopping, and restarting the service.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable hello\nsystemctl start hello\nsystemctl stop hello\nsystemctl restart hello\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables using Environment.get() - Swift\nDESCRIPTION: This snippet showcases how to access environment variables using the `Environment.get()` method. It retrieves the value of the `FOO` environment variable as a String, which might be nil if the variable isn't set.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet foo = Environment.get(\"FOO\")\nprint(foo) // String?\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Backlog in Vapor (Swift)\nDESCRIPTION: This snippet configures a custom backlog for the Vapor HTTP server, setting the maximum length of the queue for pending connections. The backlog is set to `128`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Configureer aangepaste backlog.\napp.http.server.configuration.backlog = 128\n```\n\n----------------------------------------\n\nTITLE: Destroying a Session Swift\nDESCRIPTION: This snippet demonstrates how to destroy a session. It calls the `destroy()` method on the session object, which removes the session data and invalidates the session cookie. The session is invalidated immediately.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"del\") { req -> HTTPStatus in\n    req.session.destroy()\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Vapor Project\nDESCRIPTION: Changes the current working directory to the newly created \"HelloWorld\" Vapor project directory. This allows subsequent commands to be executed within the context of the project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncd HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Collect streaming body with a given maxSize\nDESCRIPTION: This snippet shows how to use the `body` parameter to collect the streaming body with a given `maxSize` for a specific route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// 在调用此路由之前收集流体（大小不超过1mb）。\napp.on(.POST, \"listings\", body: .collect(maxSize: \"1mb\")) { req in\n    // 处理请求。\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox from Source\nDESCRIPTION: These commands demonstrate how to install the Vapor Toolbox from source on Linux. It clones the toolbox repository, checks out the desired version, and uses make to build and install the tool. The `vapor --help` command verifies the installation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ja.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Future Synchronously with wait() in Vapor\nDESCRIPTION: This snippet shows how to use `wait()` to synchronously wait for a future to complete. This call is throwing because the future may fail. It should be used carefully and not on event loop threads.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n/// Assume we get a future string back from some API\nlet futureString: EventLoopFuture<String> = ...\n\n/// Block until the string is ready\nlet string = try futureString.wait()\n\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: SSH connection to server\nDESCRIPTION: Establishes an SSH connection to the DigitalOcean server as the root user. Replace `your_server_ip` with the actual IP address of your Droplet. This allows initial configuration and setup of the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh root@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: ContentDecoder Protocol Definition in Swift\nDESCRIPTION: This code shows the definition of the `ContentDecoder` protocol in Vapor.  This protocol defines the `decode` function, which is responsible for decoding a decodable type from a `ByteBuffer` using the provided HTTP headers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ContentDecoder {\n    func decode<D>(_ decodable: D.Type, from body: ByteBuffer, headers: HTTPHeaders) throws -> D\n        where D: Decodable\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaf with Vapor Swift\nDESCRIPTION: Configures Vapor to use Leaf as its view renderer. This allows Vapor to render `.leaf` files using the Leaf templating engine. The `app.views.use(.leaf)` line registers Leaf for rendering views.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Leaf\n\napp.views.use(.leaf)\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Models in Swift\nDESCRIPTION: This snippet demonstrates how to delete multiple models at once using the `delete` method in Fluent. It filters the models to be deleted based on a condition.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Verwijder alle planeten genaamd \"Vulcan\"\nPlanet.query(on: database)\n    .filter(\\.$name == \"Vulcan\")\n    .delete()\n```\n\n----------------------------------------\n\nTITLE: Delete Session - Swift\nDESCRIPTION: Destroys the current session.  This example route handler calls `req.session.destroy()`, which removes the session data from the session driver and invalidates the session cookie.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"del\") { req -> HTTPStatus in\n    req.session.destroy()\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Using the NowTag in a Leaf template\nDESCRIPTION: This snippet demonstrates how to use the newly created `NowTag` in a Leaf template.  The `#now()` tag will be replaced with the current date and time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_3\n\nLANGUAGE: Leaf\nCODE:\n```\nThe time is #now()\n```\n\n----------------------------------------\n\nTITLE: Example Log Output from Request\nDESCRIPTION: This shows an example of log output when accessing logger from request, including info level, message, request id, and the location in the project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.de.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n[ INFO ] Hello, logs! [request-id: C637065A-8CB0-4502-91DC-9B8615C5D315] (App/routes.swift:10)\n```\n\n----------------------------------------\n\nTITLE: Set Swift Tools Version in Package.swift\nDESCRIPTION: This code snippet sets the Swift tools version in the Package.swift file. It's a prerequisite for using async/await features by specifying the Swift language version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.5\nimport PackageDescription\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Verify Vapor Toolbox Installation (macOS)\nDESCRIPTION: Verifies the successful installation of the Vapor Toolbox by printing help information. This command lists available commands in the Vapor CLI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Reverting Database Migrations Shell\nDESCRIPTION: This command reverts the last batch of database migrations for the Vapor application. Requires Vapor CLI and the migrations must have a `revert` implementation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nswift run App migrate --revert\n```\n\n----------------------------------------\n\nTITLE: Leaf DumpContext Tag Example\nDESCRIPTION: Demonstrates using the `#dumpContext` tag to display the entire context in a human-readable string for debugging purposes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_23\n\nLANGUAGE: leaf\nCODE:\n```\nHello, world!\n#dumpContext\n```\n\n----------------------------------------\n\nTITLE: Write Buffer Data to File - Swift\nDESCRIPTION: This snippet demonstrates how to write buffer data to a file using `req.fileio.writeFile`. The method takes a `ByteBuffer` and a file path as input. The returned `EventLoopFuture` signals completion or error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.zh.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// 将缓冲区数据写入文件\nreq.fileio.writeFile(ByteBuffer(string: \"Hello, world\"), at: \"/path/to/file\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key Constraint (Top-Level) with Fluent in Swift\nDESCRIPTION: This snippet adds a foreign key constraint as a top-level constraint. It references the 'id' field in the 'stars' table from the 'star_id' field. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n.foreignKey(\"star_id\", references: \"stars\", \"id\")\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with Nested Tag\nDESCRIPTION: Illustrates how to use another tag within the condition of an `#if` tag.  Note that the `#` is omitted for the nested tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_7\n\nLANGUAGE: leaf\nCODE:\n```\n#if(count(users) > 0):\n    You have users!\n#else:\n    There are no users yet :(\n#endif\n```\n\n----------------------------------------\n\nTITLE: Defining the HelloTag with Parameter Usage in Swift\nDESCRIPTION: This snippet demonstrates how to create a `HelloTag` that uses parameters passed to it from a Leaf template.  It accesses the first parameter as the name and returns a LeafData string with a personalized greeting.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case missingNameParameter\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.parameters[0].string else {\n            throw HelloTagError.missingNameParameter\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller code to render the Leaf view with data in Swift\nDESCRIPTION: This snippet shows the controller code that renders the Leaf view with a dictionary containing the `name` key and its value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nreturn try await req.view.render(\"home\", [\"name\": \"John\"])\n```\n\n----------------------------------------\n\nTITLE: Running Cowsay Command with Options (Shell)\nDESCRIPTION: This command executes the `Cowsay` command with specific arguments and options, customizing the message, eyes, and tongue of the cow.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nswift run App cowsay sup --eyes ^^ --tongue \"U \"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Hostname in Vapor\nDESCRIPTION: This code snippet shows how to configure a custom hostname for the Vapor HTTP server. By setting the `hostname` property of the server's configuration, you can specify the address on which the server will listen for new connections.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// 配置自定义主机名\napp.http.server.configuration.hostname = \"dev.local\"\n```\n\n----------------------------------------\n\nTITLE: Starting/Stopping Nginx Service\nDESCRIPTION: These commands are used to stop, start, or restart the Nginx service. They require root privileges (sudo). The service commands interact with the system's service manager to control the Nginx server process. No expected outputs or inputs besides service feedback.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo service nginx stop\nsudo service nginx start\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Query Value in Swift\nDESCRIPTION: This code demonstrates how to access a single value from the query string using subscripts on `req.query`. This is a simple way to get a single parameter without defining an entire `Content` struct.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet name: String? = req.query[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Transforming a Void Future to an HTTP Status\nDESCRIPTION: This snippet illustrates using the `transform` method to change an `EventLoopFuture<Void>` to an `EventLoopFuture<HTTPStatus>`. The existing value is ignored and replaced with a predefined HTTP status.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet userDidSave: EventLoopFuture<Void> = ...\n\nlet futureStatus = userDidSave.transform(to: HTTPStatus.ok)\nprint(futureStatus) // EventLoopFuture<HTTPStatus>\n```\n\n----------------------------------------\n\nTITLE: Package Description using Swift Package Manager\nDESCRIPTION: This code snippet demonstrates the structure of a Package.swift file, defining a Swift package with its name, supported platforms, dependencies (including Vapor), and targets for the main application and tests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.de.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hostname for Vapor Server\nDESCRIPTION: This snippet shows how to set a custom hostname for the Vapor HTTP server. The hostname determines the network interface the server will bind to.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Configura un hostname personalizado.\napp.http.server.configuration.hostname = \"dev.local\"\n```\n\n----------------------------------------\n\nTITLE: Awaiting WebSocket Close Operation (Swift)\nDESCRIPTION: This snippet demonstrates using async/await to close a WebSocket connection and wait for completion.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ntry await ws.close()\n```\n\n----------------------------------------\n\nTITLE: Validating JWT in Protected Route (Swift)\nDESCRIPTION: This code demonstrates how to access the authenticated JWT payload in a protected route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_53\n\nLANGUAGE: swift\nCODE:\n```\n// 如果用户提供的令牌有效，则返回响应 ok 。\nsecure.post(\"validateLoggedInUser\") { req -> HTTPStatus in\n    let sessionToken = try req.auth.require(SessionToken.self)\n    print(sessionToken.userId)\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Hostname in Vapor\nDESCRIPTION: This code snippet demonstrates how to configure a custom hostname for the Vapor HTTP server using the `app.http.server.configuration.hostname` property. It shows how to change the default hostname to a custom value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// Configure custom hostname.\napp.http.server.configuration.hostname = \"dev.local\"\n```\n\n----------------------------------------\n\nTITLE: Scaling Docker Service (Shell)\nDESCRIPTION: Scales a Docker service in a Swarm. This command changes the number of replicas for the `test_migrate` service to 1. This example is used to run database migrations in cluster mode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service scale --detach test_migrate=1\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Example (Leaf)\nDESCRIPTION: This is a simple Leaf template file (hello.leaf) that demonstrates how to use Leaf's syntax for embedding dynamic content. The `#(name)` syntax is used to insert the value of the `name` variable into the template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.it.md#_snippet_2\n\nLANGUAGE: Leaf\nCODE:\n```\nHello, #(name)!\n```\n\n----------------------------------------\n\nTITLE: Creating Migrations in Vapor 4 (Swift)\nDESCRIPTION: Illustrates the shift to manual migrations in Vapor 4.  Models no longer support reflection-based automatic migrations. Migrations must now conform to the `Migration` protocol, and the `prepare` and `revert` methods are no longer static.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\n+ struct CreatePlanet: Migration {\n+     ...\n+}\n```\n\nLANGUAGE: swift\nCODE:\n```\n+ struct CreateGalaxy: Migration {\n```\n\nLANGUAGE: swift\nCODE:\n```\n+ func prepare(on database: Database) -> EventLoopFuture<Void> \n```\n\n----------------------------------------\n\nTITLE: Making a Fluent Model Session Authenticatable (Swift)\nDESCRIPTION: This code snippet demonstrates how to make a Fluent model session authenticatable by conforming to the `ModelSessionAuthenticatable` protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_41\n\nLANGUAGE: swift\nCODE:\n```\nimport Fluent\n\nfinal class User: Model { ... }\n\n// 允许在会话中持久化此模型。\nextension User: ModelSessionAuthenticatable { }\n```\n\n----------------------------------------\n\nTITLE: Leaf Count Tag Usage\nDESCRIPTION: This snippet shows how to use the `#count` tag to display the number of items in an array (matches). This tag is useful for displaying summary information to the user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_14\n\nLANGUAGE: leaf\nCODE:\n```\nYour search matched #count(matches) pages.\n```\n\n----------------------------------------\n\nTITLE: Fluent Query Example in Swift\nDESCRIPTION: Demonstrates a basic Fluent query to fetch planets, filter by type, sort by name, include related data, and retrieve all results. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet planets = try await Planet.query(on: database)\n    .filter(\\.$type == .gasGiant)\n    .sort(\\.$name)\n    .with(\\.$star)\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Adding a SQL Default Value Constraint (Swift)\nDESCRIPTION: This snippet demonstrates adding an arbitrary SQL default value constraint using the `.sql` parameter. In this case, it sets the default value of the 'active' field to true.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"active\", .bool, .required, .sql(.default(true)))\n```\n\n----------------------------------------\n\nTITLE: List Docker services\nDESCRIPTION: This command lists all services currently running in the Docker Swarm, showing their status, replicas, and other details. It's used to monitor the deployment of services.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Extending Templates in Leaf\nDESCRIPTION: This snippet demonstrates the use of the `#extend` tag in Leaf to inherit content from another template (footer.leaf). The .leaf extension should be omitted when specifying the template to extend.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_11\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Closing WebSocket with Promise - Vapor (Swift)\nDESCRIPTION: This snippet illustrates closing a WebSocket connection and utilizing a promise to manage the completion of the closing process. It allows monitoring the closing operation for success or failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nws.close(promise: nil)\n```\n\n----------------------------------------\n\nTITLE: Adding SessionRecord Migration - Swift\nDESCRIPTION: Adds the `SessionRecord.migration` to the application's migrations. This prepares the database to store session data in the `_fluent_sessions` schema. Must be called before running migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(SessionRecord.migration)\n```\n\n----------------------------------------\n\nTITLE: Adding XCTVapor dependency to Package.swift (Swift)\nDESCRIPTION: This snippet demonstrates how to add the XCTVapor dependency to the test target in your Package.swift file. This is required to use XCTVapor's testing helpers in your Vapor application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\")\n    ],\n    targets: [\n        ...\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data Request - HTTP\nDESCRIPTION: HTTP request to access session data. Includes the `cookie` header with the session ID obtained from the previous response. Sends a GET request to the `/get` endpoint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET /get HTTP/1.1\ncookie: vapor-session=123\n```\n\n----------------------------------------\n\nTITLE: Receiving Binary Messages via WebSocket (Swift)\nDESCRIPTION: This snippet shows how to handle incoming binary messages on a WebSocket connection using the `ws.onBinary` method. It registers a closure that is executed whenever a binary message is received. The closure receives the WebSocket object and the binary message (as an array of `UInt8`) as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.es.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nws.onBinary { ws, binary in\n    // [UInt8] recibido por este WebSocket.\n    print(binary)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger (Swift)\nDESCRIPTION: Illustrates how to initialize a custom logger with a specific label. While functional, custom loggers lack request-specific metadata found in request or application loggers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet logger = Logger(label: \"dev.logger.my\")\nlogger.info(...)\n```\n\n----------------------------------------\n\nTITLE: Copying .env Template (Bash)\nDESCRIPTION: Demonstrates how to copy a `.env` template to create a specific environment file (e.g., `.env.development`) and then edit it to configure the environment-specific settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.zh.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncp .env .env.development\nvim .env.development\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Payload Swift\nDESCRIPTION: Defines a custom codable struct to represent the payload of the APNS notification. This allows sending custom data along with the push notification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Carga útil codificable personalizada\nstruct Payload: Codable {\n    let acme1: String\n    let acme2: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox using Homebrew\nDESCRIPTION: This command installs the Vapor Toolbox using Homebrew, a package manager for macOS. The Vapor Toolbox provides helpful utilities for Vapor development, such as creating new projects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.zh.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Galaxy Creation Response - JSON\nDESCRIPTION: This JSON represents the response after successfully creating a new Galaxy. It includes the ID of the newly created Galaxy and its name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": ...,\n    \"name\": \"Milky Way\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLite Product Dependency\nDESCRIPTION: This snippet adds the Fluent SQLite driver product dependency to your application target. This makes SQLite functionalities available in your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"FluentSQLiteDriver\", package: \"fluent-sqlite-driver\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random ECDSA Private Key in Swift\nDESCRIPTION: This snippet demonstrates how to generate a random ECDSA private key using `ES256PrivateKey` in Swift. This is useful for testing purposes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet key = ES256PrivateKey()\n```\n\n----------------------------------------\n\nTITLE: Example HTML Response\nDESCRIPTION: Illustrates the HTML content returned by the Vapor server when accessing the root URL. This indicates a successful setup and basic functionality.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Defining User struct for Session Authentication in Swift\nDESCRIPTION: Defines a simple `User` struct with an email address for session authentication. This example uses the email address as the unique identifier for the user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct User {\n    var email: String\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request to Get Session Data\nDESCRIPTION: This is an example HTTP request to the `/get` route, including the session cookie. The server will use this cookie to retrieve the session data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.md#_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /get HTTP/1.1\ncookie: vapor-session=123\n```\n\n----------------------------------------\n\nTITLE: Enable TCP No Delay in Vapor (Swift)\nDESCRIPTION: This snippet enables the `tcpNoDelay` parameter, attempting to minimize TCP packet delay for the Vapor HTTP server.  It sets the `tcpNoDelay` property to `true`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Minimaliseer de pakketvertraging.\napp.http.server.configuration.tcpNoDelay = true\n```\n\n----------------------------------------\n\nTITLE: Enable TCP No Delay in Vapor\nDESCRIPTION: This snippet illustrates how to enable TCP no delay for the Vapor HTTP server. It sets the `tcpNoDelay` property of the server configuration to `true`. The default is `true`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Minimize packet delay.\napp.http.server.configuration.tcpNoDelay = true\n```\n\n----------------------------------------\n\nTITLE: Leaf Capitalized Tag Usage\nDESCRIPTION: Demonstrates how to use the `#capitalized` tag to capitalize the first letter of each word in a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_14\n\nLANGUAGE: leaf\nCODE:\n```\n#capitalized(name)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Leaf Tag in Leaf Template\nDESCRIPTION: This snippet shows how to use the custom `#now` tag within a Leaf template. It demonstrates a simple example of rendering the current time.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_3\n\nLANGUAGE: Leaf\nCODE:\n```\nThe time is #now()\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Detached (Shell)\nDESCRIPTION: Starts the application defined in the Docker Compose file as a detached container. The `--detach` flag runs the application in the background.  The 'app' service is run detached.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose up --detach app\n```\n\n----------------------------------------\n\nTITLE: MongoDB Model Definition with ObjectId\nDESCRIPTION: This snippet defines a Fluent model for MongoDB using `ObjectId` as the identifier. It includes properties such as email and passwordHash, and defines initializers for creating new instances.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/advanced.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class User: Model {\n    // Name of the table or collection.\n    static let schema = \"users\"\n\n    // Unique identifier for this User.\n    // In this case, ObjectId is used\n    // Fluent recommends using UUID by default, however ObjectId is also supported\n    @ID(custom: .id)\n    var id: ObjectId?\n\n    // The User's email address\n    @Field(key: \"email\")\n    var email: String\n\n    // The User's password stores as a BCrypt hash\n    @Field(key: \"password\")\n    var passwordHash: String\n\n    // Creates a new, empty User instance, for use by Fluent\n    init() { }\n\n    // Creates a new User with all properties set.\n    init(id: ObjectId? = nil, email: String, passwordHash: String, profile: Profile) {\n        self.id = id\n        self.email = email\n        self.passwordHash = passwordHash\n        self.profile = profile\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ZipCode ValidatorResult Extension - Swift\nDESCRIPTION: This snippet extends the `ValidatorResults.ZipCode` struct to conform to the `ValidatorResult` protocol. It implements the required properties `isFailure`, `successDescription`, and `failureDescription` to provide information about the validation result.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nextension ValidatorResults.ZipCode: ValidatorResult {\n    public var isFailure: Bool {\n        !self.isValidZipCode\n    }\n    \n    public var successDescription: String? {\n        \"is a valid zip code\"\n    }\n    \n    public var failureDescription: String? {\n        \"is not a valid zip code\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination in Fluent (Swift)\nDESCRIPTION: This snippet demonstrates how to manually specify the page number and results per page using the `PageRequest` struct. This allows for more control over the pagination process.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Example of manual pagination.\n.paginate(PageRequest(page: 1, per: 2))\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Product Dependency\nDESCRIPTION: This snippet adds the Fluent PostgreSQL driver product dependency to your application target. This is required to link the PostgreSQL driver to your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"FluentPostgresDriver\", package: \"fluent-postgres-driver\")\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Command (Shell)\nDESCRIPTION: This command executes a custom command named 'hello' within a Vapor application. It assumes that the command has been registered with the application as shown in a previous snippet.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswift run App hello\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Services (Shell)\nDESCRIPTION: Lists all services running in the Docker Swarm. This command shows the state of each service, including the number of replicas.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Basic Leaf Tag Usage\nDESCRIPTION: Demonstrates the basic syntax of a Leaf tag, including the token, name, and parameter list.  It shows how to access a variable named 'users' and display its count.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_0\n\nLANGUAGE: leaf\nCODE:\n```\nThere are #count(users) users.\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response\nDESCRIPTION: Shows the HTTP response generated by the registered route. It includes the HTTP status code, content length, content type, and the returned message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 13\ncontent-type: text/plain; charset=utf-8\n\nHello, vapor!\n```\n\n----------------------------------------\n\nTITLE: Verify Vapor Toolbox Installation\nDESCRIPTION: This command verifies that the Vapor Toolbox is installed correctly by displaying the help menu. Successful execution indicates that the toolbox is ready for use.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ko.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Running Vapor Project on Linux\nDESCRIPTION: This command builds and runs the Vapor project using the Swift command-line tool. It handles dependency resolution and starts the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ko.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Run Vapor App with Bind Flag\nDESCRIPTION: This snippet demonstrates how to use the `--bind` or `-b` flag to override the configured hostname and port when running the `serve` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve -b 0.0.0.0:80\n```\n\n----------------------------------------\n\nTITLE: Mark Run Target as Executable in Package.swift\nDESCRIPTION: This snippet updates the `Run` target in Package.swift to be an executable target, which is a standard practice.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n```\n\n----------------------------------------\n\nTITLE: Auto-Migrating SQLite in Memory\nDESCRIPTION: These snippets show how to automatically migrate an in-memory SQLite database.  `app.autoMigrate()` applies any pending migrations when the application starts. It is important to add your migrations before running auto-migration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\napp.migrations.add(CreateTodo())\ntry app.autoMigrate().wait()\n// or\ntry await app.autoMigrate()\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Job from an Application Object\nDESCRIPTION: This snippet demonstrates how to dispatch a job from the `Application` object. It retrieves the queue by name and then dispatches the `EmailJob` with its parameters, retry count, and delay.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue(.emails)\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\"),\n                maxRetryCount: 3,\n                delayUntil: futureDate\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ContentDecoder Protocol in Swift\nDESCRIPTION: Defines the `ContentDecoder` protocol, which requires a `decode` function to decode a `Decodable` type from a `ByteBuffer`. This allows you to define custom decoders for different content types.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ContentDecoder {\n    func decode<D>(_ decodable: D.Type, from body: ByteBuffer, headers: HTTPHeaders) throws -> D\n        where D: Decodable\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Install Vapor Toolbox from Source\nDESCRIPTION: Clones the Vapor Toolbox repository, checks out a specific version, and installs it using make. This is required on Linux systems to get the Vapor CLI tool.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.pl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Leaf Extend Tag Example\nDESCRIPTION: Illustrates how to extend a base template in Leaf using the `#extend` tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_11\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with Comparison\nDESCRIPTION: Demonstrates how to use comparison operators within the `#if` tag.  It shows how to check if the `title` variable is equal to a specific string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_6\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    This is a friendly web page.\n#else:\n    No strangers allowed!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Leaf Master Template\nDESCRIPTION: Defines a master template (`master.leaf`) that imports content exported by a child template using the `#import` tag. This template also displays a title passed from the Swift context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_13\n\nLANGUAGE: leaf\nCODE:\n```\n<html>\n    <head>\n        <title>#(title)</title>\n    </head>\n    <body>#import(\"body\")</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Verify Apple JWT - Swift\nDESCRIPTION: This snippet retrieves and verifies an Apple JWT from the Authorization header using the req.jwt.apple.verify() method. It shows both a synchronous and an asynchronous version for retrieving the token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// 从 Authorization 头获取并验证 Apple JWT。\napp.get(\"apple\") { req -> EventLoopFuture<HTTPStatus> in\n    req.jwt.apple.verify().map { token in\n        print(token) // Apple 身份令牌\n        return .ok\n    }\n}\n\n// Or\n\napp.get(\"apple\") { req async throws -> HTTPStatus in\n    let token = try await req.jwt.apple.verify()\n    print(token) // Apple 身份令牌\n    return .ok\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy to Heroku\nDESCRIPTION: This command pushes the current branch to the Heroku remote, triggering a deployment of your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\ngit push heroku main\n```\n\n----------------------------------------\n\nTITLE: Vapor Server Startup Message\nDESCRIPTION: This is the console output indicating that the Vapor server has started successfully and is listening on the specified address and port.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.pl.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: HTTP Request - Invalid Email in Query\nDESCRIPTION: An example HTTP GET request with an invalid email address in the query string. This is used to test the query string validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /users?age=4&email=foo&favoriteColor=green&name=Foo&username=foo HTTP/1.1\n\n```\n\n----------------------------------------\n\nTITLE: Leaf Uppercased Tag Usage\nDESCRIPTION: This snippet demonstrates the `#uppercased` tag, which converts a string to uppercase. The input string (name) is passed as a parameter to the tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_16\n\nLANGUAGE: leaf\nCODE:\n```\n#uppercased(name)\n```\n\n----------------------------------------\n\nTITLE: Swift Date for Leaf Context\nDESCRIPTION: Swift code to pass a `Date` object named 'now' into the Leaf context. The context is then used to render the template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nrender(..., [\"now\": Date()])\n```\n\n----------------------------------------\n\nTITLE: Leaf Lowercased Tag Usage\nDESCRIPTION: This snippet demonstrates the `#lowercased` tag, which converts a string to lowercase. The input string (name) is passed as a parameter to the tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_15\n\nLANGUAGE: leaf\nCODE:\n```\n#lowercased(name)\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware at the beginning in Vapor\nDESCRIPTION: Demonstrates adding a middleware at the beginning of the middleware stack. This is useful when you want your middleware to be executed before any default middleware added by Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(someMiddleware, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Verifying Swift Version\nDESCRIPTION: This command checks the installed Swift version. It ensures that Swift 5.9 or higher is installed, which is a prerequisite for using Vapor 4.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.it.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Adding Job Event Delegate to Queues\nDESCRIPTION: This code snippet shows how to add the implemented `JobEventDelegate` to the application's queues configuration using `app.queues.add(MyEventDelegate())`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.add(MyEventDelegate())\n```\n\n----------------------------------------\n\nTITLE: Adding user to sudo group\nDESCRIPTION: Adds the newly created user `vapor` to the `sudo` group, granting it administrative privileges. This allows the user to execute commands with root permissions when necessary.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nusermod -aG sudo vapor\n```\n\n----------------------------------------\n\nTITLE: Paginated Response Structure (JSON)\nDESCRIPTION: Shows the JSON response structure for paginated data.  The response contains an `items` array with the paginated data and a `metadata` object with information about the current page, items per page, and total number of results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [...],\n    \"metadata\": {\n        \"page\": 2,\n        \"per\": 5,\n        \"total\": 8\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example with URL-Encoded Form Data\nDESCRIPTION: This is an example of HTTP POST request with `application/x-www-form-urlencoded` content type. The `content-length` header specifies the length of the form data in the body. The body contains a single key-value pair, `hello=world`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /greeting HTTP/1.1\ncontent-type: application/x-www-form-urlencoded\ncontent-length: 11\n\nhello=world\n```\n\n----------------------------------------\n\nTITLE: Creating APNS Alert Swift\nDESCRIPTION: Creates an APNS alert notification. The alert defines the title, subtitle, and other properties of the push notification alert.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Application Identifier - Swift\nDESCRIPTION: This snippet configures the Microsoft application identifier for JWT verification. The application identifier is set on the `app.jwt.microsoft.applicationIdentifier` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.de.md#_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\n// Konfiguriere die Kennung der Microsoft-App.\napp.jwt.microsoft.applicationIdentifier = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Star - HTTP Request\nDESCRIPTION: This HTTP request creates a new Star named \"Sun\" and associates it with a Galaxy using the galaxy's ID.  It's a POST request to the `/stars` endpoint with a JSON payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPOST /stars HTTP/1.1\ncontent-length: 36\ncontent-type: application/json\n\n{\n    \"name\": \"Sun\",\n    \"galaxy\": {\n        \"id\": ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Bearer Authentication Request\nDESCRIPTION: This HTTP request demonstrates the Bearer authentication scheme. The token `foo` is prefixed with \"Bearer \" and included in the `Authorization` header.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\nAuthorization: Bearer foo\n```\n\n----------------------------------------\n\nTITLE: Starting Scheduled Jobs - Swift\nDESCRIPTION: This snippet shows how to start scheduled jobs in the same process as the application, using the startScheduledJobs method on the application's queues.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ntry app.queues.startScheduledJobs()\n```\n\n----------------------------------------\n\nTITLE: Streaming Request Body (Swift)\nDESCRIPTION: This snippet demonstrates how to handle a streamed request body without collecting it into a buffer.  `req.body.data` will be nil, and `req.body.drain` should be used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Request body will not be collected into a buffer.\napp.on(.POST, \"upload\", body: .stream) { req in\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request - Invalid Email\nDESCRIPTION: An example HTTP POST request with an invalid email address in the JSON payload. This is used to test the email validation rule.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /users HTTP/1.1\nContent-Length: 67\nContent-Type: application/json\n\n{\n    \"age\": 4,\n    \"email\": \"foo\",\n    \"favoriteColor\": \"green\",\n    \"name\": \"Foo\",\n    \"username\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Comparison\nDESCRIPTION: Shows an example of using `#if` and `#else` to compare the value of the title variable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_6\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title == \"Welcome\"):\n    This is a friendly web page.\n#else:\n    No strangers allowed!\n#endif\n```\n\n----------------------------------------\n\nTITLE: Globally Enabling Session and User Authentication (Swift)\nDESCRIPTION: This code snippet shows how to globally enable session support and user authentication in a Vapor application using middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_43\n\nLANGUAGE: swift\nCODE:\n```\napp.middleware.use(app.sessions.middleware)\napp.middleware.use(User.sessionAuthenticator())\n```\n\n----------------------------------------\n\nTITLE: Swift Struct for Leaf Context\nDESCRIPTION: Defines a Swift struct `WelcomeContext` conforming to `Encodable` to pass data to a Leaf template. It includes a title string and an array of integers. Demonstrates how to structure data for use in Leaf templates.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct WelcomeContext: Encodable {\n    var title: String\n    var numbers: [Int]\n}\nreturn req.view.render(\"home\", WelcomeContext(title: \"Hello!\", numbers: [42, 9001]))\n```\n\n----------------------------------------\n\nTITLE: Testing Method Configuration\nDESCRIPTION: Demonstrates how to configure the testing method (in-memory or running) using `app.testing(method:)`. It shows how to specify whether to use programmatic testing or run tests through a live HTTP server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// Utiliza pruebas programáticas.\napp.testing(method: .inMemory).test(...)\n\n// Ejecuta pruebas a través de un servidor HTTP activo.\napp.testing(method: .running).test(...)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Field Comparison with Fluent in Swift\nDESCRIPTION: This code demonstrates filtering records based on the comparison of two fields within the same model, finding users with identical first and last names.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// Todos los usuarios con el mismo nombre y apellido.\nUser.query(on: database)\n    .filter(\\.$firstName == \\.$lastName)\n```\n\n----------------------------------------\n\nTITLE: Remove a Docker stack\nDESCRIPTION: This command removes a stack of services from the Docker Swarm, effectively stopping and removing all containers associated with the stack.  Here the stack named `test` is removed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack rm test\n```\n\n----------------------------------------\n\nTITLE: Alternative Login Route with JWT in Swift\nDESCRIPTION: This code demonstrates an alternative login route where user credentials are validated manually.  After validation and retrieval of the user ID, a `SessionToken` payload is created, signed with a JWT, and returned in a `ClientTokenResponse`. Requires manual credential validation and user ID retrieval.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\napp.post(\"login\") { req -> ClientTokenResponse in\n    // Valida le credenziali dell'utente\n    // Ottieni lo userId dell'utente\n    let payload = try SessionToken(userId: userId)\n    return ClientTokenResponse(token: try req.jwt.sign(payload))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Dependency in Swift Package Manager\nDESCRIPTION: This snippet demonstrates how to add the `JWT` dependency to your Vapor project's `Package.swift` file using Swift Package Manager. It specifies the package URL and version requirement for the JWT library.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.10\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n        // Other dependencies...\n        .package(url: \"https://github.com/vapor/jwt.git\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Other dependencies...\n            .product(name: \"JWT\", package: \"jwt\")\n        ]),\n        // Other targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Content struct for URL Query Parameters\nDESCRIPTION: Defines a `Hello` struct for decoding URL query parameters. The `name` property is an optional `String` because URL query parameters are always optional.  This allows the API to handle cases where the parameter is not present in the URL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.ja.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Hello: Content {\n    var name: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Grant Sudo Privileges to User\nDESCRIPTION: This command adds the `vapor` user to the `sudo` group, granting them administrative privileges to execute commands with `sudo`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nusermod -aG sudo vapor\n```\n\n----------------------------------------\n\nTITLE: HTML Response from Vapor Server\nDESCRIPTION: This is the expected HTML response when accessing the `/hello` endpoint of the running Vapor application via a web browser. It represents the successful creation and execution of the basic Vapor project.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.it.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data Response - HTTP\nDESCRIPTION: HTTP response after setting session data. Includes the `set-cookie` header, which the client needs to send in subsequent requests to maintain the session. The cookie contains the session ID.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 0\nset-cookie: vapor-session=123; Expires=Fri, 10 Apr 2020 21:08:09 GMT; Path=/\n```\n\n----------------------------------------\n\nTITLE: Nesting Route Groups (Swift)\nDESCRIPTION: Demonstrates nesting route groups to create a hierarchical API structure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\napp.group(\"users\") { users in\n    // GET /users\n    users.get { ... }\n    // POST /users\n    users.post { ... }\n\n    users.group(\":id\") { user in\n        // GET /users/:id\n        user.get { ... }\n        // PATCH /users/:id\n        user.patch { ... }\n        // PUT /users/:id\n        user.put { ... }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database Schema with Migration in Swift\nDESCRIPTION: This snippet shows how to update a database schema by deleting the \"name\" field and adding \"first_name\" and \"last_name\" fields to the \"users\" table. The `deleteField`, `field`, and `update` methods are used to modify the schema. The revert function deletes the table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserNameMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .deleteField(\"name\")\n            .field(\"first_name\", .string)\n            .field(\"last_name\", .string)\n            .update()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\").delete()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP/1 Support in Vapor\nDESCRIPTION: This code snippet demonstrates how to disable HTTP/1 support for the Vapor server. By setting the `supportVersions` parameter, you can specify the supported HTTP versions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// 禁用 HTTP/1 。\napp.http.server.configuration.supportVersions = [.two]\n```\n\n----------------------------------------\n\nTITLE: Define a GET route using app.on with HTTP method (Swift)\nDESCRIPTION: This code snippet shows an alternative way to define a GET route using the `app.on` method, explicitly specifying the HTTP method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\napp.on(.GET, \"hello\", \"vapor\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding Leaf Package Dependency Swift\nDESCRIPTION: Adds the Leaf package as a dependency to the project's Swift Package Manager (SPM) manifest. This ensures that Leaf is available for use in the project. The version is specified to be from 4.0.0.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n    dependencies: [\n        /// Any other dependencies ...\n        .package(url: \"https://github.com/vapor/leaf.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            .product(name: \"Leaf\", package: \"leaf\"),\n            // Any other dependencies\n        ]),\n        // Other targets\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing JobEventDelegate - Swift\nDESCRIPTION: This snippet demonstrates how to implement a `JobEventDelegate` in Vapor Queues. The delegate allows receiving notifications when a job is dispatched, dequeued, succeeds, or encounters an error.  It requires conforming to the `JobEventDelegate` protocol and implementing the required methods.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyEventDelegate: JobEventDelegate {\n    /// ジョブがルートからキューワーカーにディスパッチされたときに呼び出されます\n    func dispatched(job: JobEventData, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// ジョブが処理キューに置かれ、作業が開始されたときに呼び出されます\n    func didDequeue(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// ジョブが処理を完了し、キューから削除されたときに呼び出されます\n    func success(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// ジョブが処理を完了したがエラーが発生したときに呼び出されます\n    func error(jobId: String, error: Error, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension for ZipCode ValidatorResult\nDESCRIPTION: This code snippet defines the structures and extensions required to create a custom validator for checking if a string is a valid zip code. ValidatorResults.ZipCode stores the boolean result of the validation, and the extensions provide the logic for describing the validation's success or failure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nextension ValidatorResults {\n    /// Represents the result of a validator that checks if a string is a valid zip code.\n    public struct ZipCode {\n        /// Indicates whether the input is a valid zip code.\n        public let isValidZipCode: Bool\n    }\n}\n\nextension ValidatorResults.ZipCode: ValidatorResult {\n    public var isFailure: Bool {\n        !self.isValidZipCode\n    }\n    \n    public var successDescription: String? {\n        \"is a valid zip code\"\n    }\n    \n    public var failureDescription: String? {\n        \"is not a valid zip code\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Count Swift\nDESCRIPTION: This snippet demonstrates how to count the total number of planets in the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Aantal planeten in de database.\nPlanet.query(on: database).count()\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Ubuntu\nDESCRIPTION: This snippet shows how to install Supervisor on Ubuntu using the apt-get package manager.  It first updates the package list and then installs the supervisor package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nsudo apt-get update\nsudo apt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Variable Presence\nDESCRIPTION: This snippet demonstrates how to use the `#if` tag to conditionally render content based on the presence of a variable (title) in the Leaf context.  If the title exists, it is displayed; otherwise, a default message is shown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_5\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title):\n    The title is #(title)\n#else:\n    No title was provided.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Leaf Lowercased Tag Example\nDESCRIPTION: Illustrates the use of the `#lowercased` tag to convert a string to lowercase.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_15\n\nLANGUAGE: leaf\nCODE:\n```\n#lowercased(name)\n```\n\n----------------------------------------\n\nTITLE: Generating a TOTP code in Vapor\nDESCRIPTION: This snippet demonstrates how to generate a TOTP (Time-based One-Time Password) code using Vapor. It initializes a symmetric key, creates a TOTP instance with specified parameters (digest algorithm, number of digits, and interval), and generates a code based on the current time. Alternatively, the static generate function can be used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/crypto.nl.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet key = SymmetricKey(size: .bits128)\nlet totp = TOTP(key: key, digest: .sha256, digits: .six, interval: 60)\nlet code = totp.generate(time: Date())\n\n// Of met behulp van de statische genereer functie\nTOTP.generate(key: key, digest: .sha256, digits: .six, interval: 60, time: Date())\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor project\nDESCRIPTION: Creates a new Vapor project named 'hello' in the current directory using the Vapor Toolbox. The `-n` flag skips interactive questions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Using HelloTag with Data Context - Leaf\nDESCRIPTION: Example usage of the `#hello` tag in a Leaf template. It requires the `name` to be present in the view data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_7\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello()\n```\n\n----------------------------------------\n\nTITLE: Defining a User struct for Session Authentication in Swift\nDESCRIPTION: This code snippet defines a simple User struct with an email property, used for session-based authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct User {\n    var email: String\n}\n```\n\n----------------------------------------\n\nTITLE: Check Git Branch\nDESCRIPTION: Displays the current Git branch. It's important to be on the correct branch (e.g., main or master) before deploying to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\n----------------------------------------\n\nTITLE: Running Vapor Server with the Serve Command\nDESCRIPTION: This shell command starts the Vapor server using the `serve` command. This is the default command if no other command is specified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Conforming Model to Content\nDESCRIPTION: This snippet shows how to conform a Model to Content so you can return the Model in the body of an HTTP response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nfinal class Galaxy: Model, Content {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Migration Swift\nDESCRIPTION: This code snippet shows how to add the `User.Migration()` to `app.migrations` to execute the migration on application startup.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(User.Migration())\n```\n\n----------------------------------------\n\nTITLE: Check Vapor Installation\nDESCRIPTION: This shell command is used to verify the successful installation of the Vapor Toolbox. It displays a list of available commands if Vapor is correctly installed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.pl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Check Git Status\nDESCRIPTION: Checks the status of the Git repository to see if there are any uncommitted changes. The `--porcelain` flag is used for machine-readable output.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit status --porcelain\n```\n\n----------------------------------------\n\nTITLE: Protecting Login Route with CredentialsAuthenticator (Swift)\nDESCRIPTION: This code demonstrates how to protect a login route with `CredentialsAuthenticator` middleware.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_46\n\nLANGUAGE: swift\nCODE:\n```\nlet credentialsProtectedRoute = sessionRoutes.grouped(User.credentialsAuthenticator())\ncredentialsProtectedRoute.post(\"login\", use: loginPostHandler)\n```\n\n----------------------------------------\n\nTITLE: URLQueryDecoder Protocol Definition in Swift\nDESCRIPTION: This code shows the definition of the `URLQueryDecoder` protocol in Vapor. This protocol defines the `decode` function, which is responsible for decoding a decodable type from a URI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol URLQueryDecoder {\n    func decode<D>(_ decodable: D.Type, from url: URI) throws -> D\n        where D: Decodable\n}\n```\n\n----------------------------------------\n\nTITLE: Specify a route's return type\nDESCRIPTION: This snippet demonstrates how to specify the return type of a route using `-> T` before `in`. This is useful when the compiler cannot infer the return type.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"foo\") { req -> String in\n\treturn \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a String from a Vapor Route\nDESCRIPTION: This example shows how to explicitly declare the return type of a Vapor route handler. This can be useful when the compiler cannot infer the return type automatically.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"foo\") { req -> String in\n\treturn \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output\nDESCRIPTION: This HTML code snippet represents the expected output when accessing the root URL (or /hello) of the running Vapor application. It displays the \"Hello, world!\" message in the browser.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.zh.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Log in to Heroku CLI\nDESCRIPTION: Logs in to the Heroku CLI using your Heroku account credentials. This authenticates your local machine with your Heroku account.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\n----------------------------------------\n\nTITLE: Using HelloTag with Parameter - Leaf\nDESCRIPTION: Example usage of the `#hello` tag in a Leaf template. The tag receives the name \"John\" as a parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_5\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello(\"John\")\n```\n\n----------------------------------------\n\nTITLE: Creating Succeeded and Failed Futures (Swift)\nDESCRIPTION: This snippet shows how to create pre-completed futures with either a success value or a failure error using the `makeSucceededFuture` and `makeFailedFuture` methods of the `EventLoop`. It demonstrates creating both a successful future with a string value and a failed future with an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Crear un futuro pre-éxito.\nlet futureString: EventLoopFuture<String> = eventLoop.makeSucceededFuture(\"hello\")\n\n// Crea un futuro pre-fallido.\nlet futureString: EventLoopFuture<String> = eventLoop.makeFailedFuture(error)\n```\n\n----------------------------------------\n\nTITLE: Route with wildcard component\nDESCRIPTION: This snippet demonstrates how to define a route with a `**`.  The route matches `/foo/bar`, `/foo/bar/baz`, etc...\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /foo/bar\n// responde a GET /foo/bar/baz\n// ...\napp.get(\"foo\", \"**\") { req in \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Extension\nDESCRIPTION: Shows how to extend a Leaf template using the `#extend` tag.  This allows copying content from one template (e.g., \"footer\") into another, promoting code reuse.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_11\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Leaf Contains Tag Example\nDESCRIPTION: Demonstrates using the `#contains` tag to check if an array contains a specific value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_18\n\nLANGUAGE: leaf\nCODE:\n```\n#if(contains(planets, \"Earth\")):\n    Earth is here!\n#else:\n    Earth is not in this array.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Transforming Transaction Result to HTTP Status (Swift)\nDESCRIPTION: This snippet illustrates how to transform the result of a successful database transaction in Vapor's Fluent to an HTTP status code. This is useful for returning a response indicating that the transaction has completed successfully. The transform(to:) method is used to map the transaction's result to HTTPStatus.ok.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/transaction.es.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nreturn req.db.transaction { database in\n    // usa la base de datos y ejecuta la transacción\n}.transform(to: HTTPStatus.ok)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor project with the Vapor Toolbox\nDESCRIPTION: This command uses the Vapor Toolbox to create a new Vapor project named 'hello' in the current directory. The '-n' flag skips interactive questions, using default settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.it.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Blocking Event Loop with sleep in Swift\nDESCRIPTION: This code demonstrates how blocking the event loop with the `sleep(_:)` function can prevent the application from responding to incoming requests. It highlights the importance of avoiding blocking calls on the event loop thread.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    /// Puts the event loop's thread to sleep.\n    sleep(5)\n    \n    /// Returns a simple string once the thread re-awakens.\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox via Homebrew (Shell)\nDESCRIPTION: This command installs the Vapor Toolbox using Homebrew, a package manager for macOS. The Vapor Toolbox provides helpful utilities, such as a project creator, to facilitate Vapor development.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ja.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Import Example\nDESCRIPTION: Shows how to import exported content in a master template using the `#import` tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_13\n\nLANGUAGE: leaf\nCODE:\n```\n<html>\n    <head>\n        <title>#(title)</title>\n    </head>\n    <body>#import(\"body\")</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing the render Method for NowTag - Swift\nDESCRIPTION: This snippet implements the `render(_:)` method for the `NowTag` struct. It retrieves the date format from the Leaf context parameters, formats the current date, and returns it as a `LeafData.string`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nenum NowTagError: Error {\n    case invalidFormatParameter\n    case tooManyParameters\n}\n\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        let formatter = DateFormatter()\n        switch ctx.parameters.count {\n        case 0: formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n        case 1:\n            guard let string = ctx.parameters[0].string else {\n                throw NowTagError.invalidFormatParameter\n            }\n\n            formatter.dateFormat = string\n        default:\n            throw NowTagError.tooManyParameters\n\t    }\n    \n        let dateAsString = formatter.string(from: Date())\n        return LeafData.string(dateAsString)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check Git status\nDESCRIPTION: This command checks the current status of the Git repository, showing any uncommitted changes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit status --porcelain\n```\n\n----------------------------------------\n\nTITLE: Installing Swift on Fedora\nDESCRIPTION: This command shows how to install Swift on Fedora using the dnf package manager. It installs the swift-lang package. Users on Fedora 35 may need to add EPEL8 to access Swift 5.9 or later.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ja.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Initialize Git Repository\nDESCRIPTION: Initializes a new Git repository in the current directory. This is necessary to track changes to your project and deploy it to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database Enum with Fluent in Swift\nDESCRIPTION: This snippet deletes an existing database enum named 'planet_type'. Requires Fluent and a configured database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.zh.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.enum(\"planet_type\").delete()\n```\n\n----------------------------------------\n\nTITLE: Open Package.swift with Xcode\nDESCRIPTION: Opens the Package.swift file with Xcode, triggering the Swift Package Manager to download project dependencies. This command is specific to macOS.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ja.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen Package.swift\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Pong Events\nDESCRIPTION: This snippet demonstrates how to handle pong events on a WebSocket connection using the `onPong` method. A closure is registered to be executed when a pong message is received from the other peer. It provides the WebSocket instance to the closure.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nws.onPong { ws in\n    // Pong ricevuto.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Headers in a Vapor Request\nDESCRIPTION: This code snippet demonstrates how to access HTTP headers from a Vapor request. It retrieves the `Content-Type` header and checks if it is set to `application/json`. If the header is present and has the expected value, it returns the string \"JSON\"; otherwise, it throws a `BadRequest` error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.es.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"json\") { req -> String in\n    guard let contentType = req.headers.contentType, contentType == .json else {\n        throw Abort(.badRequest)\n    }\n    return \"JSON\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS/Amazon Linux\nDESCRIPTION: This command installs Supervisor on CentOS and Amazon Linux using the yum package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install supervisor\n```\n\n----------------------------------------\n\nTITLE: Set Server Name in Vapor\nDESCRIPTION: This snippet demonstrates how to set the `Server` header in outgoing HTTP responses. It modifies the `serverName` property of the server configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Add 'Server: vapor' header to responses.\napp.http.server.configuration.serverName = \"vapor\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Response Sample\nDESCRIPTION: Example HTTP Response for a dynamic route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-length: 13\ncontent-type: text/plain; charset=utf-8\n\nHello, swift!\n```\n\n----------------------------------------\n\nTITLE: Leaf DumpContext Tag Usage\nDESCRIPTION: Demonstrates how to use the `#dumpContext` tag to display the entire Leaf context for debugging purposes. This is useful for understanding what data is available during template rendering.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_24\n\nLANGUAGE: leaf\nCODE:\n```\nHello, world!\n#dumpContext\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level Environment Variable (Shell)\nDESCRIPTION: Sets the `LOG_LEVEL` environment variable and then starts the application using Docker Compose.  This command demonstrates how to configure logging verbosity. The logging level options can be found in the linked documentation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nLOG_LEVEL=trace docker-compose up app\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Error Middleware\nDESCRIPTION: This code snippet shows how to remove the default `ErrorMiddleware` from a Vapor application by setting `app.middleware` to a new, empty `MiddlewareGroup`. This is the first step in replacing the default error handling with custom logic.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.zh.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// 移除已存在的中间件。\napp.middleware = .init()\n```\n\n----------------------------------------\n\nTITLE: Get Current Working Directory\nDESCRIPTION: This shell command is used to determine the current working directory. It's useful for finding the correct project path to set in Xcode's scheme options.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.de.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# get path to this folder\npwd\n```\n\n----------------------------------------\n\nTITLE: FlatMapThrowing with Tuple Chaining - Swift\nDESCRIPTION: This example shows how to convert a throwing method into a `flatMapThrowing` operation and chain it with a subsequent `flatMap` using tuples. This is useful when you need to perform a throwing operation and then use its result in another asynchronous operation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Methode voor gooien omgebouwd tot flatMapThrowing met tuple-ketting.\nfutureA.flatMapThrowing { a in\n    try (a, doSomeThing())\n}.flatMap { (a, result) in\n    // resultaat is de waarde van doSomething.\n    return futureB\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Ubuntu\nDESCRIPTION: This snippet shows how to install Nginx on Ubuntu using apt-get package manager. It first updates the package list and then installs Nginx.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Swift Array for Leaf Iteration\nDESCRIPTION: Defines a Swift struct containing an array of planets, ready for rendering with Leaf. Requires Codable protocol for data transfer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct SolarSystem: Codable {\n    let planets = [\"Venus\", \"Earth\", \"Mars\"]\n}\n\nreturn req.view.render(\"solarSystem\", SolarSystem())\n```\n\n----------------------------------------\n\nTITLE: Basic Leaf Tag Example\nDESCRIPTION: This snippet demonstrates a basic Leaf tag used to display the number of users. The tag consists of a marker (#), a name (count), and a parameter list (users).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_0\n\nLANGUAGE: leaf\nCODE:\n```\nThere are #count(users) users.\n```\n\n----------------------------------------\n\nTITLE: Defining HelloTag with Data Context - Swift\nDESCRIPTION: This code defines the `HelloTag` using the `data` property of `LeafContext`. The `name` is passed into the data dictionary when rendering the view.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.es.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case nameNotFound\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.data[\"name\"]?.string else {\n            throw HelloTagError.nameNotFound\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prune unused Docker volumes\nDESCRIPTION: This command removes all unused Docker volumes. It cleans up volumes that are no longer associated with any containers. Exercise caution as this will permanently delete the data in those volumes.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Install Swift on Fedora\nDESCRIPTION: This command installs Swift on Fedora using the dnf package manager. It installs the swift-lang package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.it.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs from Application Object - Swift\nDESCRIPTION: This snippet demonstrates how to dispatch a queue job from a context where the Request object is not available, using the queues property inside the Application object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct SendEmailCommand: AsyncCommand {\n    func run(using context: CommandContext, signature: Signature) async throws {\n        context\n            .application\n            .queues\n            .queue\n            .dispatch(\n                EmailJob.self, \n                .init(to: \"email@email.com\", message: \"message\")\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Decompression Limit\nDESCRIPTION: This code snippet demonstrates how to disable the decompression size limit when enabling HTTP request decompression in Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// 无解压大小限制\n.enabled(limit: .none)\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Ubuntu\nDESCRIPTION: This snippet shows the commands to update the package list and install Nginx on Ubuntu using the apt-get package manager. It is a standard installation process for Debian-based systems.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a ScheduledJob Swift\nDESCRIPTION: Defines a `CleanupJob` that conforms to the `ScheduledJob` protocol.  The `run` method defines the task to be executed on the schedule.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.ja.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Queues\n\nstruct CleanupJob: ScheduledJob {\n    // 追加のサービスが必要な場合は、依存性注入を使用してここに追加します。\n\n    func run(context: QueueContext) -> EventLoopFuture<Void> {\n        // ここで何か作業を行い、別のジョブをキューに入れるなどします。\n        return context.eventLoop.makeSucceededFuture(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkout Vapor Toolbox Release\nDESCRIPTION: This snippet navigates into the `toolbox` directory and checks out the specified release version (18.6.0) of the Vapor Toolbox.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd toolbox\ngit checkout 18.6.0\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional Statements\nDESCRIPTION: Shows examples of using `#if` and `#else` tags for conditional logic in Leaf templates, including comparisons and checking variable existence.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\n#if(1 + 1 == 2):\n    Hello!\n#endif\n\n#if(index % 2 == 0):\n    This is even index.\n#else:\n    This is odd index.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Leaf Contains Tag Usage\nDESCRIPTION: Demonstrates how to use the `#contains` tag to check if an array contains a specific value.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_15\n\nLANGUAGE: leaf\nCODE:\n```\n#if(contains(planets, \"Earth\")):\n    Earth is here!\n#else:\n    Earth is not in this array.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Verify Vapor Toolbox Installation\nDESCRIPTION: This snippet demonstrates how to verify the successful installation of Vapor Toolbox by displaying its help information. It uses the `vapor --help` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.es.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Set macOS Deployment Target in Package Description\nDESCRIPTION: This code snippet shows how to set the minimum macOS deployment target to version 12 in the Package.swift file. This is a prerequisite for using async/await in Vapor projects when deploying to macOS.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.de.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n    platforms: [\n       .macOS(.v12)\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Vapor to use Leaf Renderer\nDESCRIPTION: This snippet shows how to configure Vapor to use the LeafRenderer for rendering views. It uses the `app.views.use(.leaf)` to register Leaf as the view renderer.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Leaf\n\napp.views.use(.leaf)\n```\n\n----------------------------------------\n\nTITLE: Updating User Schema and Migrating Data (Swift)\nDESCRIPTION: This code defines a Vapor migration to update the user schema by replacing the `name` field with `first_name` and `last_name`. It also migrates the data from the old `name` column to the new `first_name` column using a raw SQL expression due to the limitations of Vapor's schema builder.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserNameMigration: AsyncMigration {\n    func prepare(on database: Database) async throws {\n        try await database.schema(\"users\")\n             .field(\"first_name\", .string, .required)\n             .field(\"last_name\", .string, .required)\n             .update()\n\n         // Actualmente no es posible expresar esta actualización sin usar SQL personalizado.\n         // Esto tampoco intenta dividir el nombre en nombre y apellido,\n         // ya que eso requiere sintaxis específica de la base de datos.\n         try await User.query(on: database)\n             .set([\"first_name\": .sql(embed: \"name\")])\n             .run()\n\n        try await database.schema(\"users\")\n            .deleteField(\"name\")\n            .update()\n    }\n\n    func revert(on database: Database) async throws {\n        try await database.schema(\"users\")\n            .field(\"name\", .string, .required)\n            .update()\n        try await User.query(on: database)\n            .set([\"name\": .sql(embed: \"concat(first_name, ' ', last_name)\")])\n            .run()\n        try await database.schema(\"users\")\n            .deleteField(\"first_name\")\n            .deleteField(\"last_name\")\n            .update()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Write Buffer to File Vapor\nDESCRIPTION: This snippet shows how to write a buffer to a file using Vapor's `writeFile` method. The example writes a string to a specified file path, and the returned future signals completion or error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Writes buffer to file.\nreq.fileio.writeFile(ByteBuffer(string: \"Hello, world\"), at: \"/path/to/file\")\n```\n\n----------------------------------------\n\nTITLE: Installing Swift with Swiftly CLI\nDESCRIPTION: This snippet demonstrates how to install the latest stable Swift release using the Swiftly command-line tool. It fetches the release, extracts the toolchain, and installs Swift. The swift --version command verifies the installation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.ja.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ swiftly install latest\n\nFetching the latest stable Swift release...\nInstalling Swift 5.9.1\nDownloaded 488.5 MiB of 488.5 MiB\nExtracting toolchain...\nSwift 5.9.1 installed successfully!\n\n$ swift --version\n\nSwift version 5.9.1 (swift-5.9.1-RELEASE)\nTarget: x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Revert Heroku Database Migration\nDESCRIPTION: Reverts the database migrations on the Heroku application using the Vapor framework's migrate command. It runs in production environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --revert --all --yes --env production\n```\n\n----------------------------------------\n\nTITLE: Calling Hello Tag in Leaf Template\nDESCRIPTION: This snippet demonstrates how to call the custom `#hello` tag without any parameters. The tag expects the \"name\" to be provided through the data context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_7\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello()\n```\n\n----------------------------------------\n\nTITLE: Reset Heroku Database\nDESCRIPTION: This command executes a revert command within the Heroku environment to reset the database.  It runs the command 'App --revert --all --yes --env production' on the Heroku dyno.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- revert --all --yes --env production\n```\n\n----------------------------------------\n\nTITLE: Defining a Content Struct in Swift\nDESCRIPTION: This code defines a struct `CreateUser` that conforms to the `Content` protocol, which is part of Vapor's data serialization framework. This structure represents the data expected in a request body for creating a user. It includes properties such as name, username, age, email, and an optional favorite color.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct CreateUser: Content {\n    var name: String\n    var username: String\n    var age: Int\n    var email: String\n    var favoriteColor: Color?\n}\n```\n\n----------------------------------------\n\nTITLE: Content Encoder Protocol in Swift\nDESCRIPTION: This code shows the definition of the ContentEncoder protocol, used for encoding data in HTTP message bodies. It defines a function `encode` which takes an encodable object, a ByteBuffer, and HTTPHeaders as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol ContentEncoder {\n    func encode<E>(_ encodable: E, to body: inout ByteBuffer, headers: inout HTTPHeaders) throws\n        where E: Encodable\n}\n```\n\n----------------------------------------\n\nTITLE: Install Swift using Swiftly CLI\nDESCRIPTION: This snippet demonstrates the installation of the latest stable Swift release using the Swiftly CLI. It fetches, downloads, extracts, and installs Swift. After installation, it checks the Swift version.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.es.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ swiftly install latest\n\nFetching the latest stable Swift release...\nInstalling Swift 5.9.1\nDownloaded 488.5 MiB of 488.5 MiB\nExtracting toolchain...\nSwift 5.9.1 installed successfully!\n\n$ swift --version\n\nSwift version 5.9.1 (swift-5.9.1-RELEASE)\nTarget: x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Example User Token\nDESCRIPTION: Example of a user token string that can be returned after a login request.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n8gtg300Jwdhc/Ffw784EXA==\n```\n\n----------------------------------------\n\nTITLE: Stop a Docker Container\nDESCRIPTION: This command stops a running Docker container.  The `<container_id>` needs to be replaced with the actual container ID obtained from `docker container ls`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker container stop <container_id>\n```\n\n----------------------------------------\n\nTITLE: Example HTTP request\nDESCRIPTION: This is an example of an HTTP GET request with a dynamic parameter in the URL.  It demonstrates the structure of an HTTP request including the method, path, and headers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /hello/swift HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Leaf DumpContext Tag Usage\nDESCRIPTION: Demonstrates using the `#dumpContext` tag for debugging the context available during Leaf rendering.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_19\n\nLANGUAGE: leaf\nCODE:\n```\nHello, world!\n#dumpContext\n```\n\n----------------------------------------\n\nTITLE: Creating and Completing a Promise (Swift)\nDESCRIPTION: This snippet demonstrates how to create a promise associated with an `EventLoop` in Vapor. It creates a promise for a string, prints the promise and its associated future, and then completes the future by succeeding with a value.  Access to an `EventLoop` instance is required.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet eventLoop: EventLoop\n\n// Crea una nueva promesa para alguna cadena.\nlet promiseString = eventLoop.makePromise(of: String.self)\nprint(promiseString) // EventLoopPromise<String>\nprint(promiseString.futureResult) // EventLoopFuture<String>\n\n// Completa el futuro asociado.\npromiseString.succeed(\"Hello\")\n\n// Falla el futuro asociado.\npromiseString.fail(...)\n```\n\n----------------------------------------\n\nTITLE: Adding SessionRecord Migration Swift\nDESCRIPTION: This snippet shows how to add the `SessionRecord` migration to your database migrations. This migration creates the table required to store session data when using the Fluent session driver.  The migration must be run to prepare the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(SessionRecord.migration)\n```\n\n----------------------------------------\n\nTITLE: Example Project Path Output\nDESCRIPTION: This is an example output of the `pwd` command, showing the absolute path to the project's root directory. This path is then used in Xcode to set the custom working directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.it.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/percorso/al/progetto\n```\n\n----------------------------------------\n\nTITLE: Adding JWK to Vapor JWT Signers (Swift)\nDESCRIPTION: This snippet demonstrates how to add a JSON Web Key (JWK) to the JWT signers in a Vapor application.  JWKs contain the 'kid' field, so it does not need to be manually specified during configuration. The code assumes a `JWK` object is already available.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// JWK's bevatten al het \"kid\" veld.\nlet jwk: JWK = ...\napp.jwt.signers.use(jwk: jwk)\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request with Session Cookie\nDESCRIPTION: An example HTTP request demonstrating the use of a session cookie for authentication.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\ncookie: vapor_session=123\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx using APT\nDESCRIPTION: These commands update the APT package list and then install Nginx on a Debian-based system. They require `sudo` privileges. After installation, Nginx should be accessible via the server's IP address or domain name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.zh.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Validating Nginx Installation\nDESCRIPTION: This snippet demonstrates how to check if Nginx was installed correctly by accessing your server's IP address or domain name in a web browser.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhttp://server_domain_name_or_IP\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Fedora\nDESCRIPTION: This snippet shows how to install Nginx on Fedora using the dnf package manager. It is the standard installation command for Fedora systems.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install nginx\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Package Dependency - Swift\nDESCRIPTION: This snippet shows how to add the Vapor Redis package as a dependency in your Swift package manifest file. It includes the package URL and version constraint, as well as the product dependency for the App target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/overview.nl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    // ...\n    .package(url: \"https://github.com/vapor/redis.git\", from: \"4.0.0\")\n]\n// ...\ntargets: [\n    .target(name: \"App\", dependencies: [\n        // ...\n        .product(name: \"Redis\", package: \"redis\")\n    ])\n]\n```\n\n----------------------------------------\n\nTITLE: Building Swift with Debug Symbols for Stack Traces\nDESCRIPTION: This shell command shows how to build a Swift project in release mode with debug symbols enabled. This is necessary to generate stack traces on Linux systems after a fatal error.  The `-Xswiftc -g` flag instructs the Swift compiler to include debug information in the compiled executable.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswift build -c release -Xswiftc -g\n```\n\n----------------------------------------\n\nTITLE: Leaf Uppercased Tag\nDESCRIPTION: Shows the usage of the `#uppercased` tag which converts all characters in a string to uppercase.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_16\n\nLANGUAGE: leaf\nCODE:\n```\n#uppercased(name)\n```\n\n----------------------------------------\n\nTITLE: Restore Span Metadata without Creating a Span in Vapor\nDESCRIPTION: Illustrates how to restore span metadata without creating a new span using `ServiceContext.withValue`. This is useful when downstream libraries emit their own tracing spans and should be nested under the parent request span.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/tracing.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"fetchAndProcess\") { req in\n    try await ServiceContext.withValue(req.serviceContext) {\n        try await fetch()\n        return try await process(result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a custom Environment - Swift\nDESCRIPTION: This extension defines a custom environment called `staging`. This can be used to configure settings that are specific to a staging environment in your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.nl.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nextension Environment {\n    static var staging: Environment {\n        .custom(name: \"staging\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Example Swift\nDESCRIPTION: This code snippet shows an example of a Package.swift manifest file, which defines the structure and dependencies of a Swift package. It includes the package name, platform support, dependencies on other packages (like Vapor), and target definitions for the main application and tests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.pl.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: ContentEncoder Protocol in Swift\nDESCRIPTION: Defines the `ContentEncoder` protocol, which requires an `encode` function to encode an `Encodable` value to a `ByteBuffer`. This allows you to define custom encoders for different content types.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.zh.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ContentEncoder {\n    func encode<E>(_ encodable: E, to body: inout ByteBuffer, headers: inout HTTPHeaders) throws\n        where E: Encodable\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Failure Descriptions\nDESCRIPTION: Demonstrates how to add custom, human-readable error messages to validations using the `customFailureDescription` parameter.  This is used when the default failure description is not informative enough.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nvalidations.add(\n\t\"name\",\n\tas: String.self,\n\tis: !.empty,\n\tcustomFailureDescription: \"Provided name is empty!\"\n)\nvalidations.add(\n\t\"username\",\n\tas: String.self,\n\tis: .count(3...) && .alphanumeric,\n\tcustomFailureDescription: \"Provided username is invalid!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Install Swift on Fedora\nDESCRIPTION: This command installs Swift on Fedora using the DNF package manager.  It installs the swift-lang package.  Requires root privileges.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Defining a LeafTag in Swift\nDESCRIPTION: This snippet defines a struct `NowTag` that conforms to the `LeafTag` protocol. This is the initial step in creating a custom Leaf tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct NowTag: LeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Private Key with Components - Swift\nDESCRIPTION: This snippet shows how to initialize an RSA private key using its components (modulus, public exponent, and private exponent) in Swift.  It initializes the key using `Insecure.RSA.PrivateKey`, which is within the `Insecure` namespace, indicating potential security concerns. Values for `modulus`, `publicExponent`, and `privateExponent` are expected to be pre-defined.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Inicializa una clave privada RSA con componentes.\nlet key = try Insecure.RSA.PrivateKey(\n    modulus: modulus, \n    exponent: publicExponent, \n    privateExponent: privateExponent\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a String-Based Enum in Swift\nDESCRIPTION: This snippet demonstrates how to define a simple string-based enum in Swift, conforming to the `Codable` protocol. This is used as an example to show how validation can improve error messages beyond basic `Codable` decoding.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nenum Color: String, Codable {\n    case red, blue, green\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Vapor Toolbox Installation (Makefile)\nDESCRIPTION: This command checks if the Vapor Toolbox is installed correctly after installing using Makefile by displaying the help information. It should output a list of available commands.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.it.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Adding a JobEventDelegate to the Application in Swift\nDESCRIPTION: This snippet shows how to add a `JobEventDelegate` instance to the application's queues, enabling it to receive notifications about job events.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.add(MyEventDelegate())\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Middleware (Sync)\nDESCRIPTION: This code snippet demonstrates how to implement model middleware to capitalize the name of a planet before it's created. It uses the `ModelMiddleware` protocol and overrides the `create` function. This version uses synchronous operations and returns an `EventLoopFuture<Void>`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.nl.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\n// Voorbeeld middleware die namen met hoofdletters schrijft.\nstruct PlanetMiddleware: ModelMiddleware {\n    func create(model: Planet, on db: Database, next: AnyModelResponder) -> EventLoopFuture<Void> {\n        // Het model kan hier worden gewijzigd voordat het wordt gemaakt.\n        model.name = model.name.capitalized()\n        return next.create(model, on: db).map {\n            // Zodra de planeet is gecreëerd, zal de code \n            // hier worden uitgevoerd.\n            print (\"Planet \\(model.name) was created\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the HelloTag with a Parameter in Leaf\nDESCRIPTION: This snippet demonstrates how to call the `HelloTag` from a Leaf template, passing a name as a parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_5\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello(\"John\")\n```\n\n----------------------------------------\n\nTITLE: Transforming a Future Void to HTTP Status Using transform\nDESCRIPTION: This snippet shows how to use the `transform` method to transform the value of a future void into a predefined HTTP status. It ignores the existing value and simply returns the new one.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet userDidSave: EventLoopFuture<Void> = ...\n\nlet futureStatus = userDidSave.transform(to: HTTPStatus.ok)\nprint(futureStatus) // EventLoopFuture<HTTPStatus>\n```\n\n----------------------------------------\n\nTITLE: Add APNS Package Dependency using Swift Package Manager\nDESCRIPTION: This snippet shows how to add the VaporAPNS package as a dependency to your Swift project using Swift Package Manager. The package URL and minimum version are specified. This allows the project to use the VaporAPNS library.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.2\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n         // Andere afhankelijkheden...\n        .package(url: \"https://github.com/vapor/apns.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Andere afhankelijkheden...\n            .product(name: \"VaporAPNS\", package: \"apns\")\n        ]),\n        // Andere targets...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Create Procfile\nDESCRIPTION: This command creates a `Procfile` and writes the specified command to it. Heroku uses the Procfile to determine how to run your application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"web: App serve --env production\" \\\n  \"--hostname 0.0.0.0 --port \\$PORT\" > Procfile\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data Request - HTTP\nDESCRIPTION: HTTP request to initialize a session and set session data with the name Vapor.  Sends a GET request to the `/set/vapor` endpoint.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /set/vapor HTTP/1.1\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Leaf Tag Examples\nDESCRIPTION: Illustrates various Leaf tag examples, including variable display, template extension, data exporting, importing, and looping.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_1\n\nLANGUAGE: leaf\nCODE:\n```\n#(variable)\n#extend(\"template\"): I'm added to a base template! #endextend\n#export(\"title\"): Welcome to Vapor #endexport\n#import(\"body\")\n#count(friends)\n#for(friend in friends): <li>#(friend.name)</li> #endfor\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Swift\nDESCRIPTION: Shows how to delete multiple records from the database using the `delete()` method along with `filter`. Requires `import Fluent`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nPlanet.query(on: database)\n    .filter(\\.$name == \"Vulcan\")\n    .delete()\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Loop Outside Route Closures (Swift)\nDESCRIPTION: This code shows how to access an event loop outside of a route closure, using `app.eventLoopGroup.next()`.  This is useful for creating promises and futures outside of the context of an incoming request.  `app.eventLoopGroup.next()` returns the next event loop in the group.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.eventLoopGroup.next().makePromise(of: ...)\n```\n\n----------------------------------------\n\nTITLE: Using the Default HTTP Server in Vapor\nDESCRIPTION: This code snippet shows how to configure Vapor to use its default built-in HTTP server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\napp.servers.use(.http)\n```\n\n----------------------------------------\n\nTITLE: Disabling Leaf's cache\nDESCRIPTION: This snippet demonstrates how to disable Leaf's internal cache. Disabling the cache is useful during development to immediately see changes to templates. However, it's not recommended for production due to performance implications.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\napp.leaf.cache.isEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote IP Address\nDESCRIPTION: This code snippet shows how to access the remote IP address of the client using `req.remoteAddress.ipAddress`. It returns the IP address as a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.zh.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"ip\") { req -> String in\n    return req.remoteAddress.ipAddress\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Vapor Toolbox Repository\nDESCRIPTION: Clones the Vapor Toolbox repository from GitHub. This provides the necessary tools for creating and managing Vapor projects. It downloads the source code to the local machine.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\n```\n\n----------------------------------------\n\nTITLE: pwd Output Example - Shell\nDESCRIPTION: This is an example output of the `pwd` command. It shows the absolute path to the project root directory, which needs to be set as the custom working directory in the Xcode scheme.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.zh.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Install Swift on Fedora\nDESCRIPTION: Installs Swift on Fedora using the dnf package manager. This command directly installs the swift-lang package, providing the necessary Swift compiler and tools.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.pl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Installing Swift on Fedora using DNF\nDESCRIPTION: This command uses the DNF package manager on Fedora to install the Swift programming language. It directly installs swift-lang.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.nl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install swift-lang\n```\n\n----------------------------------------\n\nTITLE: Checking if a Relationship is Loaded in Swift\nDESCRIPTION: This code shows how to check if a relationship has been loaded using the `value` property. This can be used to avoid accessing a relationship that has not been loaded. Trying to access a non-loaded relationship will cause an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nif planet.$star.value != nil {\n    // La relación se ha cargado.\n    print(planet.star.name)\n} else {\n    // La relación no se ha cargado.\n    // Intentar acceder a planet.star fallará.\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Struct for Array Data\nDESCRIPTION: Swift code defining a struct `SolarSystem` with a `planets` array.  This struct, conforming to `Codable`, is used to pass the array of planet names to a Leaf template for rendering.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct SolarSystem: Codable {\n    let planets = [\"Venus\", \"Earth\", \"Mars\"]\n}\n\nreturn req.view.render(\"solarSystem\", SolarSystem())\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data - Swift\nDESCRIPTION: Defines a route handler that retrieves a value from the session data. It retrieves the value associated with the key \"name\" from the session's data dictionary. If the key is not found, it returns \"n/a\".\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.es.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"get\") { req -> String in\n    req.session.data[\"name\"] ?? \"n/a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Public Files with FileMiddleware in Vapor\nDESCRIPTION: This code snippet demonstrates how to enable the FileMiddleware in Vapor's `configure.swift` file. It creates a `FileMiddleware` instance, specifying the public directory, and then registers it for use by the application, allowing Vapor to serve static files from the specified directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.zh.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// 从 'Public/' 目录提供文件\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Get Session with HTTP Request\nDESCRIPTION: HTTP request example showing how to access a session value by sending a GET request to the `/get` endpoint. The `cookie` header includes the `vapor-session` cookie obtained from a previous response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/sessions.nl.md#_snippet_13\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /get HTTP/1.1\ncookie: vapor-session=123\n```\n\n----------------------------------------\n\nTITLE: Changing a Future's Event Loop in Vapor\nDESCRIPTION: This Swift code demonstrates how to change the event loop that a future is associated with using the `hop(to:)` method. This is useful when you need to ensure that a future's completion handler runs on a specific event loop. The `otherEventLoop` variable represents the event loop to which the future will be hopped.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nfutureString.hop(to: otherEventLoop)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple JWKs to JWT Key Collection - Swift\nDESCRIPTION: This snippet demonstrates how to add multiple JWKs (JSON Web Keys) from a JSON string to the JWT key collection in a Vapor application using Swift. The `app.jwt.keys.use(jwksJSON:)` method parses the JSON string and adds the JWKs to the collection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.es.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nlet json = \"\"\"\n{\n    \"keys\": [\n        {\"kty\": \"RSA\", \"alg\": \"RS256\", \"kid\": \"a\", \"n\": \"\\(rsaModulus)\", \"e\": \"AQAB\"},\n        {\"kty\": \"RSA\", \"alg\": \"RS512\", \"kid\": \"b\", \"n\": \"\\(rsaModulus)\", \"e\": \"AQAB\"},\n    ]\n}\n\"\"\"\n\ntry await app.jwt.keys.use(jwksJSON: json)\n```\n\n----------------------------------------\n\nTITLE: Capturing StackTrace for DebuggableError (Swift)\nDESCRIPTION: Demonstrates how to capture a stack trace when initializing a custom error type that conforms to `DebuggableError`. This allows including the stack trace in error logs when the application's log level is set to `.debug` or lower.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\nstruct MyError: DebuggableError {\n    var identifier: String\n    var reason: String\n    var stackTrace: StackTrace?\n\n    init(\n        identifier: String,\n        reason: String,\n        stackTrace: StackTrace? = .capture()\n    ) {\n        self.identifier = identifier\n        self.reason = reason\n        self.stackTrace = stackTrace\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Heroku Build Files\nDESCRIPTION: Stages and commits the newly created `.swift-version` and `Procfile` to the Git repository. This ensures Heroku can use these files during deployment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"adding heroku build files\"\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Fedora\nDESCRIPTION: This snippet shows how to install Supervisor on Fedora using the dnf package manager. It installs the supervisor package directly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\nsudo dnf install supervisor\n```\n\n----------------------------------------\n\nTITLE: Hello Tag Implementation with Data Context in Swift\nDESCRIPTION: This snippet shows the implementation of a `HelloTag` that retrieves the name from the data context passed to the Leaf template. It accesses the \"name\" key from the `LeafContext`'s data dictionary.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nenum HelloTagError: Error {\n    case nameNotFound\n}\n\nstruct HelloTag: UnsafeUnescapedLeafTag {\n    func render(_ ctx: LeafContext) throws -> LeafData {\n        guard let name = ctx.data[\"name\"]?.string else {\n            throw HelloTagError.nameNotFound\n        }\n\n        return LeafData.string(\"<p>Hello \\(name)</p>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hello Tag with Parameter in Leaf Template\nDESCRIPTION: This snippet illustrates how to call the custom `#hello` tag with a name parameter in a Leaf template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.zh.md#_snippet_5\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello(\"John\")\n```\n\n----------------------------------------\n\nTITLE: Prepending Middleware in Vapor\nDESCRIPTION: Demonstrates how to prepend middleware using `at: .beginning`, useful for adding middleware before default Vapor middleware. The `someMiddleware` will be executed before all other registered middleware including the default ones added by Vapor.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/middleware.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\napp.middleware.use(someMiddleware, at: .beginning)\n```\n\n----------------------------------------\n\nTITLE: Using the HelloTag with Data in Leaf\nDESCRIPTION: This snippet illustrates how to call the `HelloTag` from a Leaf template when it expects data from the view context.  No parameters are passed directly to the tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.nl.md#_snippet_7\n\nLANGUAGE: Leaf\nCODE:\n```\n#hello()\n```\n\n----------------------------------------\n\nTITLE: URL Query Encoder Protocol in Swift\nDESCRIPTION: This code shows the definition of the URLQueryEncoder protocol, used for encoding data into URL query strings. It defines a function `encode` which takes an encodable object and a URI as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol URLQueryEncoder {\n    func encode<E>(_ encodable: E, to url: inout URI) throws\n        where E: Encodable\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Vapor Toolbox Installation (Makefile, macOS)\nDESCRIPTION: Verifies the successful installation of the Vapor Toolbox after building from source, by printing help information. This command lists available commands in the Vapor CLI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Leaf Uppercased Tag Example\nDESCRIPTION: Demonstrates the use of the `#uppercased` tag to convert a string to uppercase.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_16\n\nLANGUAGE: leaf\nCODE:\n```\n#uppercased(name)\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Pong (Swift)\nDESCRIPTION: This snippet demonstrates listening for a pong event on the WebSocket.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.nl.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nws.onPong { ws in\n    // Pong werd ontvangen.\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch All Planets Swift\nDESCRIPTION: This code snippet shows how to retrieve all planets from the database using the `all()` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Haalt alle planeten op.\nlet planets = try await Planet.query(on: database).all()\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Paginated Results\nDESCRIPTION: This JSON response shows the structure of the data returned when paginating results. It includes the items and metadata about the current page and total results.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [...],\n    \"metadata\": {\n        \"page\": 2,\n        \"per\": 5,\n        \"total\": 8\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Definition for CreateUser\nDESCRIPTION: Defines a Swift struct named `CreateUser` that conforms to the `Content` protocol. This struct represents the data structure for creating a user, including properties like name, username, age, email, and favoriteColor. It's used to decode request content and validate user data.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nstruct CreateUser: Content {\n    var name: String\n    var username: String\n    var age: Int\n    var email: String\n    var favoriteColor: Color?\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom RedisSessionsDelegate in Vapor\nDESCRIPTION: This code snippet demonstrates how to register a custom `RedisSessionsDelegate` object in a Vapor application. It imports the Redis module, defines a custom delegate struct conforming to `RedisSessionsDelegate`, and then registers the delegate with the Vapor application's sessions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/redis/sessions.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Redis\n\nstruct CustomRedisSessionsDelegate: RedisSessionsDelegate {\n    // implementazione\n}\n\napp.sessions.use(.redis(delegate: CustomRedisSessionsDelegate()))\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Fedora\nDESCRIPTION: This command installs Nginx on Fedora using the dnf package manager. It installs the nginx package from the configured repositories. No specific inputs or outputs beyond typical package manager behavior.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.nl.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install nginx\n```\n\n----------------------------------------\n\nTITLE: Opening HTTP port\nDESCRIPTION: Opens port 8080 on the server's firewall to allow HTTP traffic. This is necessary for accessing the Vapor application from outside the server.  `sudo` is required because it modifies firewall settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo ufw allow 8080\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Symbols During Build (Shell)\nDESCRIPTION: Shows how to enable debug symbols during the build process for stack traces in Vapor using the swift build command. This ensures that the application includes debugging information required for stack trace generation on Linux.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswift build -c release -Xswiftc -g\n```\n\n----------------------------------------\n\nTITLE: Fetching Apple JWKS (HTTP)\nDESCRIPTION: This HTTP snippet shows the URL for fetching Apple's JSON Web Key Set (JWKS). This JWKS contains the public keys needed to verify JWTs issued by Apple.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.nl.md#_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET https://appleid.apple.com/auth/keys\n```\n\n----------------------------------------\n\nTITLE: Leaf Tag Examples\nDESCRIPTION: Illustrates several common Leaf tags, including variable interpolation, template extension, exporting/importing content, and looping.  It showcases the different ways these tags can be used within a Leaf template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_1\n\nLANGUAGE: leaf\nCODE:\n```\n#(variable)\n#extend(\"template\"): I'm added to a base template! #endextend\n#export(\"title\"): Welcome to Vapor #endexport\n#import(\"body\")\n#count(friends)\n#for(friend in friends): <li>#(friend.name)</li> #endfor\n```\n\n----------------------------------------\n\nTITLE: Scaling Heroku Application\nDESCRIPTION: Scales the Heroku application by setting the number of web workers to 1. This starts at least one instance of the web server to handle incoming requests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nheroku ps:scale web=1\n```\n\n----------------------------------------\n\nTITLE: Swift Version Output Example\nDESCRIPTION: This is example output showing a Swift version that meets Vapor's requirements. The output includes the swift-driver version, Apple Swift version, and target information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.it.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nswift-driver version: 1.75.2 Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)\nTarget: arm64-apple-macosx13.0\n```\n\n----------------------------------------\n\nTITLE: Create New Vapor Project\nDESCRIPTION: This command creates a new Vapor project named 'hello' in the current directory. The '-n' flag creates a project using a minimalistic template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.pl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Star Creation Response - JSON\nDESCRIPTION: This JSON represents the response after successfully creating a new Star.  It includes the star's ID, name, and the ID of the associated galaxy.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": ...,\n    \"name\": \"Sun\",\n    \"galaxy\": {\n        \"id\": ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supervisor Environment Variable Configuration\nDESCRIPTION: This snippet shows how to configure environment variables for a Vapor application using Supervisor. Multiple environment variables can be specified in a comma-separated string. The values of the variables will then be accessible from within the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_4\n\nLANGUAGE: Shell Script\nCODE:\n```\nenvironment=PORT=8123,ANOTHERVALUE=\"/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Get Project Root Path with pwd (Shell)\nDESCRIPTION: This code snippet demonstrates how to retrieve the absolute path to the root directory of a project using the `pwd` command in a terminal. This path is then used to set the custom working directory in Xcode's scheme settings, ensuring that Vapor can correctly locate project files.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.nl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# haal het pad naar deze map op\npwd\n```\n\n----------------------------------------\n\nTITLE: Example Server Output\nDESCRIPTION: Shows the typical output when the Vapor server starts successfully, indicating the address it's listening on.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Test Application with Curl\nDESCRIPTION: This command uses `curl` to send an HTTP request to the Vapor application running on the server. Replace `134.122.126.139` with the actual IP address of the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://134.122.126.139:8080\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger (Swift)\nDESCRIPTION: This snippet demonstrates how to initialize a custom `Logger` instance with a specific label. This is useful when you don't have access to an `Application` or `Request`. The custom logger will output to the configured logging backend, but will not include request UUID metadata.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet logger = Logger(label: \"dev.logger.my\")\nlogger.info(...)\n```\n\n----------------------------------------\n\nTITLE: Various Leaf Tag Examples\nDESCRIPTION: Shows different Leaf tag usage examples including variable display, template extension, exporting and importing content, and looping through a collection. These examples illustrate the versatility of Leaf tags.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_1\n\nLANGUAGE: leaf\nCODE:\n```\n#(variable)\n#extend(\"template\"): I'm added to a base template! #endextend\n#export(\"title\"): Welcome to Vapor #endexport\n#import(\"body\")\n#count(friends)\n#for(friend in friends): <li>#(friend.name)</li> #endfor\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Command Line (Shell)\nDESCRIPTION: This command shows how to set the log level when starting the application using the `--log` flag.  This will override the default log level or the level set via environment variables. The log level should be one of the supported SwiftLog levels (trace, debug, info, notice, warning, error, critical).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nswift run App serve --log debug\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl on macOS\nDESCRIPTION: This command uses Homebrew to install the flyctl command-line tool on macOS. flyctl is used to interact with the Fly.io platform.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install flyctl\n```\n\n----------------------------------------\n\nTITLE: Get Project Root Path - Shell\nDESCRIPTION: This command retrieves the full path to the project's root directory from the terminal. It is used to configure the custom working directory in Xcode scheme options, ensuring Vapor can locate necessary files like .env and Public folders.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.ja.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# get path to this folder\npwd\n```\n\n----------------------------------------\n\nTITLE: JWT Response Definition\nDESCRIPTION: Defines a struct representing a client token response, which contains a signed JWT token.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_51\n\nLANGUAGE: swift\nCODE:\n```\nstruct ClientTokenResponse: Content {\n    var token: String\n}\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Project\nDESCRIPTION: This command navigates the terminal's current directory to the newly created 'hello' project directory. This is necessary to execute commands within the project's context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.de.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Log in to Heroku via CLI\nDESCRIPTION: This command initiates the Heroku login process in the terminal, prompting the user to enter their credentials or authenticate via a web browser. After successful authentication, the Heroku CLI is authorized to manage applications under the user's account.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration File Example\nDESCRIPTION: This configuration file defines how Supervisor manages a Vapor application named 'hello'. It specifies the command to run the application, the working directory, the user to run as, and the locations for standard output and standard error logs.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[program:hello]\ncommand=/home/vapor/hello/.build/release/App serve --env production\ndirectory=/home/vapor/hello/\nuser=vapor\nstdout_logfile=/var/log/supervisor/%(program_name)-stdout.log\nstderr_logfile=/var/log/supervisor/%(program_name)-stderr.log\n```\n\n----------------------------------------\n\nTITLE: Check Vapor Toolbox Installation\nDESCRIPTION: This command verifies the Vapor Toolbox installation by printing the help message. It lists available commands. Requires Vapor Toolbox to be installed and accessible in the PATH.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Heroku Configuration\nDESCRIPTION: This command retrieves the configuration variables for the Heroku application. Configuration variables are environment variables used to configure the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nheroku config\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl on Linux\nDESCRIPTION: This command downloads and executes the flyctl installation script on Linux systems. The script automates the process of installing flyctl.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://fly.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Event Delegate\nDESCRIPTION: This code snippet demonstrates how to implement the `JobEventDelegate` protocol to receive notifications when the queue worker takes action on a job.  The delegate methods are called when a job is dispatched, dequeued, succeeds, or encounters an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyEventDelegate: JobEventDelegate {\n    /// Called when the job is dispatched to the queue worker from a route\n    func dispatched(job: JobEventData, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Called when the job is placed in the processing queue and work begins\n    func didDequeue(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Called when the job has finished processing and has been removed from the queue\n    func success(jobId: String, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n\n    /// Called when the job has finished processing but had an error\n    func error(jobId: String, error: Error, eventLoop: EventLoop) -> EventLoopFuture<Void> {\n        eventLoop.future()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Directly\nDESCRIPTION: This snippet demonstrates how to directly set environment variables within the Systemd service file using the `Environment` directive. These variables can be accessed within the Vapor application using the `Environment.get` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.zh.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nEnvironment=\"PORT=8123\"\nEnvironment=\"ANOTHERVALUE=/something/else\"\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Handler in Vapor\nDESCRIPTION: This code demonstrates how to use lifecycle handlers in Vapor to execute code at different stages of the application lifecycle. It defines a `Hello` struct conforming to `LifecycleHandler` and implements the `willBoot`, `didBoot`, and `shutdown` methods to log messages. The handler is then registered with the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// 启动间打印 Hello!。\nstruct Hello: LifecycleHandler {\n    // 程序启动前调用。\n    func willBoot(_ app: Application) throws {\n        app.logger.info(\"Hello!\")\n    }\n\n    // 应用程序启动后调用。\n    func didBoot(_ app: Application) throws {\n        app.logger.info(\"Server is running\")\n    }\n\n    // 在应用程序关闭前调用。\n    func shutdown(_ app: Application) {\n        app.logger.info(\"Goodbye!\")\n    }\n}\n\n// 添加生命周期处理程序。\napp.lifecycle.use(Hello())\n```\n\n----------------------------------------\n\nTITLE: Using Hello Tag with parameters Leaf\nDESCRIPTION: Demonstrates using the `#hello` tag in a Leaf template, passing \"John\" as a parameter.  This will render as `<p>Hello John</p>` when processed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_6\n\nLANGUAGE: leaf\nCODE:\n```\n#hello(\"John\")\n```\n\n----------------------------------------\n\nTITLE: Serving Public Files with FileMiddleware in Vapor (Swift)\nDESCRIPTION: This code snippet shows how to serve static files from the `Public/` directory in a Vapor application using `FileMiddleware`. It initializes `FileMiddleware` with the public directory path and registers it as middleware, allowing Vapor to serve files like images, CSS, and JavaScript.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/folder-structure.de.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Serves files from `Public/` directory\nlet fileMiddleware = FileMiddleware(\n    publicDirectory: app.directory.publicDirectory\n)\napp.middleware.use(fileMiddleware)\n```\n\n----------------------------------------\n\nTITLE: ZipCode ValidatorResult Struct - Swift\nDESCRIPTION: This snippet defines a struct `ValidatorResults.ZipCode` to represent the result of a zip code validation. It contains a boolean `isValidZipCode` to indicate whether the input is a valid zip code.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.de.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension ValidatorResults {\n    /// Represents the result of a validator that checks if a string is a valid zip code.\n    public struct ZipCode {\n        /// Indicates whether the input is a valid zip code.\n        public let isValidZipCode: Bool\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP GET request with invalid email in query\nDESCRIPTION: An example HTTP GET request with an invalid email address ('foo') in the query string. This is used to demonstrate the query parameter validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /users?age=4&email=foo&favoriteColor=green&name=Foo&username=foo HTTP/1.1\n\n```\n\n----------------------------------------\n\nTITLE: Package Manifest Example Swift\nDESCRIPTION: This is an example of a Package Manifest file (Package.swift) for a Vapor application. It defines the package name, supported platforms, dependencies (including Vapor), and targets for the application and tests.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.ko.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v12)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.76.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ]\n        ),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: SPM Folder Structure\nDESCRIPTION: Demonstrates the folder structure that SPM (Swift Package Manager) expects. The `Sources` directory contains the source code, organized by target, and the `Tests` directory contains the test code. The `Package.swift` file defines the package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.it.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Sources\n│   └── App\n│       └── (Codice sorgente)\n├── Tests\n│   └── AppTests\n└── Package.swift\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres database in Fly\nDESCRIPTION: Creates a new Postgres database instance on the Fly.io platform using the Fly CLI. This command creates a Fly app to host Postgres databases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.es.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly pg create\n```\n\n----------------------------------------\n\nTITLE: Leaf Capitalized Tag Example\nDESCRIPTION: Illustrates the use of the `#capitalized` tag to capitalize the first letter of each word in a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_17\n\nLANGUAGE: leaf\nCODE:\n```\n#capitalized(name)\n```\n\n----------------------------------------\n\nTITLE: Connect to Heroku application\nDESCRIPTION: This command connects your local Git repository to the specified Heroku application. Replace `your-apps-name-here` with your actual Heroku app name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.zh.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ heroku git:remote -a your-apps-name-here\n```\n\n----------------------------------------\n\nTITLE: Updating Fluent Dependency for Vapor 4\nDESCRIPTION: This code snippet shows how to update the Fluent dependency in Package.swift when upgrading to Vapor 4. It replaces the database-specific package (e.g., fluent-postgresql) with the core fluent package and a separate driver package (e.g., fluent-postgres-driver).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- .package(url: \"https://github.com/vapor/fluent-postgresql.git\", from: \"1.0.0\"),\n+ .package(url: \"https://github.com/vapor/fluent.git\", from: \"4.0.0-rc\"),\n+ .package(url: \"https://github.com/vapor/fluent-postgres-driver.git\", from: \"2.0.0-rc\"),\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Body Collection - Swift\nDESCRIPTION: This snippet demonstrates how to register a route that uses the `.stream` body collection strategy. This makes the request asynchronous and requires collecting the body manually.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\napp.on(.POST, \"streaming\", body: .stream) { req in\n    // Het verzoek is nu asynchroon.\n    req.body.collect().map { buffer in\n        HTTPStatus.ok\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models with Fluent (Swift)\nDESCRIPTION: Shows how to delete multiple models at once using the `delete` method in Fluent. It deletes all `Planet` models with the name \"Vulcan\". Requires a `Planet` model with a `name` property.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Borra todos los planetas llamados \"Vulcan\"\nPlanet.query(on: database)\n    .filter(\\$name == \"Vulcan\")\n    .delete()\n```\n\n----------------------------------------\n\nTITLE: Configuring Language in mkdocs.yml\nDESCRIPTION: This snippet demonstrates how to add a new language configuration to the `mkdocs.yml` file for translating the Vapor documentation. It includes the language ISO code, language name, translated site name, and a build flag.\nSOURCE: https://github.com/vapor/docs/blob/main/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguages:\n  # Structure\n  <language iso code>:\n    name: <The name of the language>\n    site_name: <The translated site name>\n    build: true # Whether the documentation gets build or not. You can disable this if you don't want to build your language or want to temporarily disable other languages\n\n  # Example\n  nl:\n    name: Nederlands\n    site_name: Vapor Documentatie\n    build: true\n```\n\n----------------------------------------\n\nTITLE: SSH to DigitalOcean Server as Root\nDESCRIPTION: This snippet establishes an SSH connection to the DigitalOcean server using the root user account. Replace `your_server_ip` with the actual IP address of the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh root@your_server_ip\n```\n\n----------------------------------------\n\nTITLE: Configure Firewall for OpenSSH\nDESCRIPTION: These commands configure the Ubuntu firewall (ufw) to allow OpenSSH connections and then enable the firewall. This ensures that SSH access to the server is permitted.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nufw allow OpenSSH\nufw enable\n```\n\n----------------------------------------\n\nTITLE: Verify Heroku CLI Email\nDESCRIPTION: Verifies the currently logged-in email address associated with the Heroku CLI.  Useful to confirm the correct Heroku account is being used.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku auth:whoami\n```\n\n----------------------------------------\n\nTITLE: Changing directory to the project folder\nDESCRIPTION: Changes the current directory to the newly created 'hello' folder, allowing you to execute commands within the project's context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Defining a Storage Key in Vapor (Swift)\nDESCRIPTION: Declares a `StorageKey` to identify the `MyConfiguration` type in Vapor's application storage. This key is used to get and set the configuration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyConfigurationKey: StorageKey {\n    typealias Value = MyConfiguration\n}\n```\n\n----------------------------------------\n\nTITLE: List Docker Volumes\nDESCRIPTION: This command lists all Docker volumes on the system. It is used to identify volumes that can be removed to reset the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume ls\n```\n\n----------------------------------------\n\nTITLE: Verify Toolbox Installation (Makefile)\nDESCRIPTION: This command verifies that the toolbox was successfully installed using the Makefile method.  It displays help information.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Accessing Joined Model Data via Alias in Swift\nDESCRIPTION: This snippet demonstrates how to access the joined model data through the model alias type using `@dynamicMemberLookup`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Toegang tot het samengevoegde model vanuit het resultaat.\nlet home = try match.joined(HomeTeam.self)\nprint(home.name)\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with Variable Existence\nDESCRIPTION: Demonstrates checking for the existence of a variable in a Leaf context using the `#if` tag. If the `title` variable exists, its value is displayed; otherwise, a default message is shown.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_5\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title):\n    The title is #(title)\n#else:\n    No title was provided.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Transforming a Future Value\nDESCRIPTION: This code snippet demonstrates the `transform` method for converting an `EventLoopFuture<Void>` to an `EventLoopFuture<HTTPStatus.ok>`. The actual value of the initial future is ignored.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n/// 假设我们从某个 API 那里得到了一个 void future\nlet userDidSave: EventLoopFuture<Void> = ...\n\n/// 将 void future 转换为 HTTP 状态\nlet futureStatus = userDidSave.transform(to: HTTPStatus.ok)\nprint(futureStatus) // EventLoopFuture<HTTPStatus>\n```\n\n----------------------------------------\n\nTITLE: Leaf Count Tag Usage\nDESCRIPTION: Demonstrates how to use the `#count` tag to display the number of items in an array.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_11\n\nLANGUAGE: leaf\nCODE:\n```\nYour search matched #count(matches) pages.\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelTokenAuthenticatable in Swift\nDESCRIPTION: This code snippet shows how to conform a UserToken model to the ModelTokenAuthenticatable protocol. It specifies the key paths for the token value and the parent User relationship.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.it.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport Fluent\n\nextension UserToken: ModelTokenAuthenticatable {\n    static var valueKey: KeyPath<UserToken, Field<String>> { \\.$value }\n    static var userKey: KeyPath<UserToken, Parent<User>> { \\.$user }\n\n    var isValid: Bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox from Source (macOS)\nDESCRIPTION: These shell commands clone the Vapor Toolbox repository, checkout a specific version, and install it using make.  This method is an alternative to using Homebrew.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.es.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Volume (Shell)\nDESCRIPTION: Removes a specific Docker volume. Replace `my-dockerized-app_db_data` with the actual volume name to delete.  This command should be used with caution, as it permanently deletes the data stored in the specified volume.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ndocker volume rm my-dockerized-app_db_data\n```\n\n----------------------------------------\n\nTITLE: Verifying Swift Version (macOS)\nDESCRIPTION: This shell command checks the installed Swift version. Vapor 4 requires Swift 5.9 or higher.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.es.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Defining a Codable struct for content binding - Swift\nDESCRIPTION: Defines a struct `Greeting` that conforms to the `Content` protocol. This is necessary to allow Vapor to automatically decode the request body into a `Greeting` object. The `Content` protocol inherits from `Codable`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.de.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Greeting: Content {\n    var hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configure case-insensitive routing\nDESCRIPTION: This snippet shows how to configure case-insensitive routing for constant path components.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\napp.routes.caseInsensitive = true\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job\nDESCRIPTION: This code demonstrates how to schedule a job to run yearly on May 23rd at noon. It uses the `app.queues.schedule` method to configure the scheduling parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\napp.queues.schedule(CleanupJob())\n    .yearly()\n    .in(.may)\n    .on(23)\n    .at(.noon)\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Promise - Vapor (Swift)\nDESCRIPTION: This snippet illustrates how to use a promise to track the status of a WebSocket message send operation. It creates an `EventLoopPromise`, passes it to the `send` method, and then uses `whenComplete` to handle the result (success or failure).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.de.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet promise = eventLoop.makePromise(of: Void.self)\nws.send(..., promise: promise)\npromise.futureResult.whenComplete { result in\n    // Succeeded or failed to send.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Space for a Model (Swift)\nDESCRIPTION: This code demonstrates how to define a custom database space for a Fluent model using the `space` static property. The `schema` static property is also set. This allows models to be partitioned into different PostgreSQL schemas, MySQL databases, or SQLite databases.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\npublic static let schema = \"planets\"\npublic static let space: String? = \"mirror_universe\"\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination Example (Swift)\nDESCRIPTION: Demonstrates manual pagination of query results using the `PageRequest` struct.  This specifies the page and items per page explicitly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.es.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Ejemplo de paginación manual.\n.paginate(PageRequest(page: 1, per: 2))\n```\n\n----------------------------------------\n\nTITLE: Copying and Editing Environment Files in Shell\nDESCRIPTION: These commands demonstrate how to copy a default `.env` file to a specific environment file (e.g., `.env.development`) and then edit it to configure environment-specific settings.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.es.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncp .env .env.development\nvim .env.development\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level to Debug (Swift)\nDESCRIPTION: This Swift code snippet sets the application's log level to debug, enabling detailed logging output, including SQL statements generated by Fluent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\napp.logger.logLevel = .debug\n```\n\n----------------------------------------\n\nTITLE: Adding Platform Support to Package.swift\nDESCRIPTION: This code snippet demonstrates how to explicitly add platform support (macOS 10.15 or higher) to the Package.swift file. This is a requirement for Vapor 4 projects.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/upgrading.nl.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ platforms: [\n+     .macOS(.v10_15),\n+ ],\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Extension with Export and Import\nDESCRIPTION: Illustrates extending a master template and injecting content using `#export` and `#import`. The `child.leaf` template exports its body content to be imported by `master.leaf`.  This facilitates creating reusable layouts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_12\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"master\"):\n    #export(\"body\"):\n        <p>Welcome to Vapor!</p>\n    #endexport\n#endextend\n```\n\n----------------------------------------\n\nTITLE: HTML Form for User Login\nDESCRIPTION: An HTML form used to log in users, including username and password fields.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n <form method=\"POST\" action=\"/login\">\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\" placeholder=\"Username\" name=\"username\" autocomplete=\"username\" required autofocus>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" placeholder=\"Password\" name=\"password\" autocomplete=\"current-password\" required>\n    <input type=\"submit\" value=\"Sign In\">    \n</form>\n```\n\n----------------------------------------\n\nTITLE: Using whenComplete to handle Future results in Vapor\nDESCRIPTION: This code snippet demonstrates how to use the `whenComplete` method on an `EventLoopFuture<String>` to execute a callback when the future either succeeds or fails. The callback receives a `Result` enum that contains either the successful string value or an error. A switch statement is used to handle both cases, printing the string or the error accordingly. Multiple callbacks can be attached to a future using `whenComplete`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n/// Veronderstel dat we een toekomstige string terugkrijgen van een API\nlet futureString: EventLoopFuture<String> = ...\n\nfutureString.whenComplete { result in\n    switch result {\n    case .success(let string):\n        print(string) // De eigenlijke String\n    case .failure(let error):\n        print(error) // Een Swift Error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check Swift Version\nDESCRIPTION: This shell command is used to check the installed version of Swift on macOS. It requires Swift and Xcode to be installed. The command outputs the Swift version, driver version, and target platform.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.pl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: SSH console to Fly app\nDESCRIPTION: This command opens an SSH console to a running instance of the Fly.io application.  The `-s` flag starts an interactive session.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.zh.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console -s\n```\n\n----------------------------------------\n\nTITLE: Commit Git Changes\nDESCRIPTION: Stages all changes in the current directory and commits them with a descriptive message.  This prepares the changes for deployment to Heroku.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"a description of the changes I made\"\n```\n\n----------------------------------------\n\nTITLE: Migration Field Definition with Foreign Key\nDESCRIPTION: This snippet shows how to define a field in a database migration that includes a foreign key constraint. This ensures data integrity by referencing a specific field in another table.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.zh.md#_snippet_43\n\nLANGUAGE: swift\nCODE:\n```\nfield(\"galaxy_id\", .uuid, .references(\"galaxies\", \"id\"))\n```\n\n----------------------------------------\n\nTITLE: Logging in Request Handler (Swift)\nDESCRIPTION: This snippet demonstrates how to use the request-specific logger within a Vapor route handler.  The logger automatically includes a unique UUID for tracking the request.  It requires access to the `Request` object.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\napp.get(\"hello\") { req -> String in\n    req.logger.info(\"Hello, logs!\")\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove a Docker Volume\nDESCRIPTION: This command removes a specific Docker volume. Replace `my-dockerized-app_db_data` with the actual volume name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume rm my-dockerized-app_db_data\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Refresh Redirection\nDESCRIPTION: This HTML snippet redirects the user to the specified URL after 0 seconds. It is used to automatically forward users from the old documentation location to the new one.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/version/legacy-docs.nl.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0; url=https://legacy.docs.vapor.codes/\">\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Ubuntu\nDESCRIPTION: These commands install Supervisor on Ubuntu using the apt package manager. It updates the package list and installs the supervisor package.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Paginating Results\nDESCRIPTION: This HTTP request shows how to request a specific page of paginated results using the `page` and `per` query parameters.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/query.nl.md#_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET /planets?page=2&per=5 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Manually Enabling Stack Trace Capture (Swift)\nDESCRIPTION: Shows how to manually enable stack trace capture regardless of the log level by setting `StackTrace.isCaptureEnabled` to `true` within the application's `configure` function.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.ja.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Always capture stack traces, regardless of log level.\nStackTrace.isCaptureEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Management Commands\nDESCRIPTION: These shell commands are used to manage the lifecycle of a systemd service. They allow you to reload the systemd daemon, enable the service on boot, start, stop, and restart the service. These commands must be executed with root privileges.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/systemd.es.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable hello\nsystemctl start hello\nsystemctl stop hello\nsystemctl restart hello\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox from source using Makefile\nDESCRIPTION: These commands clone the Vapor Toolbox repository, navigate to the directory, checkout the desired version, and install the Toolbox using make. The <desired version> needs to be replaced with an actual version number.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.it.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Loading and Starting the Vapor App with Supervisor\nDESCRIPTION: These commands instruct Supervisor to reload its configuration, add the application to the managed processes, and start the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsupervisorctl reread\nsupervisorctl add hello\nsupervisorctl start hello\n```\n\n----------------------------------------\n\nTITLE: Running Vapor with Docker Compose\nDESCRIPTION: This snippet demonstrates how to start the Vapor application using Docker Compose. It assumes that Docker and Docker Compose are installed on the system and that the repository has been cloned.\nSOURCE: https://github.com/vapor/docs/blob/main/README.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Reverting Database Migrations via CLI - Shell\nDESCRIPTION: This command demonstrates how to revert the last batch of database migrations using the Vapor CLI.  The `--revert` flag is added to the `swift run App migrate` command.  This undoes the changes made by the previous migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/migration.zh.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nswift run App migrate --revert\n```\n\n----------------------------------------\n\nTITLE: Initialize ECDSA Key from Public PEM - Swift\nDESCRIPTION: This snippet illustrates how to initialize an ECDSA key using a public PEM file with Vapor's JWT library. It represents a multi-line string containing the PEM data and uses it to initialize an ECDSAKey.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet ecdsaPublicKey = \"\"\"\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2adMrdG7aUfZH57aeKFFM01dPnkx\nC18ScRb4Z6poMBgJtYlVtd9ly63URv57ZW0Ncs1LiZB7WATb3svu+1c7HQ==\n-----END PUBLIC KEY-----\n\"\"\"\n\n// 使用公共 PEM 初始化 ECDSA 密钥。\nlet key = ECDSAKey.public(pem: ecdsaPublicKey)\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Logging System (Swift)\nDESCRIPTION: This snippet demonstrates how to bootstrap the `LoggingSystem` using Vapor's helper method.  This is typically done in `entrypoint.swift` and sets up the default log handler based on command-line arguments and environment variables. It requires importing `Logging` and `Vapor`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.ja.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &env)\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images (Shell)\nDESCRIPTION: Lists all available Docker images on the system. This command is used to verify that the Docker image for the Vapor application has been successfully built after running the `docker compose build` command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory SQLite Database\nDESCRIPTION: This snippet demonstrates configuring an in-memory SQLite database.  This is useful for testing and prototyping because the database is not persisted to disk.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\napp.databases.use(.sqlite(.memory), as: .sqlite)\n```\n\n----------------------------------------\n\nTITLE: Registering the Cowsay Command (Swift)\nDESCRIPTION: This code snippet shows how to register the `Cowsay` command, making it available for use via the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.es.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.asyncCommands.use(Cowsay(), as: \"cowsay\")\n```\n\n----------------------------------------\n\nTITLE: Copy SSH keys to new user\nDESCRIPTION: This command copies the root user's SSH keys to the newly created user 'vapor', enabling passwordless SSH login for the new user.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrsync --archive --chown=vapor:vapor ~/.ssh /home/vapor\n```\n\n----------------------------------------\n\nTITLE: Vapor Toolbox Help\nDESCRIPTION: This command displays the help information for the Vapor Toolbox. This is useful for verifying that the toolbox has been installed correctly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ko.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Creating an APNS Alert Notification\nDESCRIPTION: This snippet shows how to create an `APNSAlertNotification` with a title and subtitle. The `APNSAlertNotification` struct is used to define the metadata for the push notification.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet alert = APNSAlertNotification(\n    alert: .init(\n        title: .raw(\"Hello\"),\n        subtitle: .raw(\"This is a test from vapor/apns\")\n    ),\n    expiration: .immediately,\n    priority: .immediately,\n    topic: \"<#my topic#>\",\n    payload: payload\n)\n```\n\n----------------------------------------\n\nTITLE: URL Query Decoder Protocol in Swift\nDESCRIPTION: This code shows the definition of the URLQueryDecoder protocol, used for decoding data from URL query strings. It defines a function `decode` which takes a decodable type and a URI as input.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol URLQueryDecoder {\n    func decode<D>(_ decodable: D.Type, from url: URI) throws -> D\n        where D: Decodable\n}\n```\n\n----------------------------------------\n\nTITLE: Server Startup Log Output\nDESCRIPTION: This is the expected output in the console when the Vapor server starts successfully. It indicates the server is listening on the specified address and port. The address is localhost (127.0.0.1) and the port is 8080 by default.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.it.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Get Project Root Path - Shell\nDESCRIPTION: This shell command retrieves the absolute path to the current directory, which should be the root directory of the Vapor project. This path is then used to set the custom working directory in Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# get path to this folder\npwd\n```\n\n----------------------------------------\n\nTITLE: Leaf DumpContext Tag Usage\nDESCRIPTION: This snippet demonstrates the `#dumpContext` tag, which renders the entire Leaf context as a readable string.  This is useful for debugging the data available to the template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.zh.md#_snippet_23\n\nLANGUAGE: leaf\nCODE:\n```\nHello, world!\n#dumpContext\n```\n\n----------------------------------------\n\nTITLE: Hello World Leaf Template\nDESCRIPTION: A basic Leaf template that displays a personalized greeting. It expects a 'name' variable to be passed in the rendering context. The template uses the `#()` syntax for variable interpolation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.zh.md#_snippet_2\n\nLANGUAGE: leaf\nCODE:\n```\nHello, #(name)!\n```\n\n----------------------------------------\n\nTITLE: Example Invalid POST Request\nDESCRIPTION: Example POST request with an invalid email format used to test email validation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.ja.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /users HTTP/1.1\nContent-Length: 67\nContent-Type: application/json\n\n{\n    \"age\": 4,\n    \"email\": \"foo\",\n    \"favoriteColor\": \"green\",\n    \"name\": \"Foo\",\n    \"username\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Route with Multiple Path Components in Vapor\nDESCRIPTION: This snippet demonstrates registering a route with multiple static path components.  It defines a route that only matches `GET /foo/bar/baz`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.es.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// responde a GET /foo/bar/baz\napp.get(\"foo\", \"bar\", \"baz\") { req in\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm (Shell)\nDESCRIPTION: Initializes a Docker Swarm cluster. This command creates a new Swarm and makes the current machine the manager node.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ndocker swarm init\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level via Command Line (Shell)\nDESCRIPTION: Demonstrates how to set the log level using the `--log` flag when running the Vapor application. This overrides the default log level for the current execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/logging.nl.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nswift run App serve --log debug\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Fedora\nDESCRIPTION: This command installs Supervisor on Fedora using the dnf package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install supervisor\n```\n\n----------------------------------------\n\nTITLE: Overriding Hostname and Port via Bind Option\nDESCRIPTION: This command-line snippet demonstrates how to override both the hostname and port configuration using the `--bind` option with the `serve` command. This allows specifying the host and port in a single parameter.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve -b 0.0.0.0:80\n```\n\n----------------------------------------\n\nTITLE: Connect Heroku App to Git Repository\nDESCRIPTION: Connects the local Git repository to the Heroku application, allowing you to deploy changes to Heroku.  Replace `your-apps-name-here` with the actual Heroku application name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ heroku git:remote -a your-apps-name-here\n```\n\n----------------------------------------\n\nTITLE: Example Server Output\nDESCRIPTION: This is example output from the Vapor server after it has started successfully.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.nl.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Check Vapor Toolbox Installation (Shell)\nDESCRIPTION: This command is used to check if the Vapor Toolbox was installed successfully. It displays a list of available commands and options, confirming that the toolbox is accessible and functioning correctly.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ja.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Leaf Template with Context Variables\nDESCRIPTION: Illustrates how to access variables passed from the Swift context within a Leaf template.  It shows how to display a title and iterate over a list of numbers.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_4\n\nLANGUAGE: leaf\nCODE:\n```\n<h1>#(title)</h1>\n#for(number in numbers):\n    <p>#(number)</p>\n#endfor\n```\n\n----------------------------------------\n\nTITLE: Configuring Backlog Queue Length in Vapor\nDESCRIPTION: This code snippet demonstrates how to configure the backlog queue length for the Vapor HTTP server. The `backlog` parameter defines the maximum length of the queue for pending connections.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// 自定义积压队列长度\napp.http.server.configuration.backlog = 128\n```\n\n----------------------------------------\n\nTITLE: Create Vapor Project\nDESCRIPTION: This command creates a new Vapor project named 'hello'. The '-n' flag likely indicates a non-interactive mode, accepting default values for project creation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.de.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Using Application-Wide Lock in Vapor (Swift)\nDESCRIPTION: Shows how to use the `app.sync.withLock` method to obtain an application-wide lock for synchronizing code execution.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\napp.sync.withLock {\n    // Doe iets.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS and Amazon Linux\nDESCRIPTION: This command installs the Supervisor process control system using the yum package manager on CentOS and Amazon Linux distributions.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.es.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install supervisor\n```\n\n----------------------------------------\n\nTITLE: Adding Route Description Metadata (Swift)\nDESCRIPTION: This snippet shows how to add a description to a route using the `description` method, which extends the `Route` object. This metadata can be used for documentation or other purposes. The description is stored in the `userInfo` dictionary of the route.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.nl.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\", \":name\") { req in\n\t...\n}.description(\"says hello\")\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Extension with Export\nDESCRIPTION: Demonstrates extending a master template and exporting content using the `#extend` and `#export` tags in a child template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_12\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"master\"):\n    #export(\"body\"):\n        <p>Welcome to Vapor!</p>\n    #endexport\n#endextend\n```\n\n----------------------------------------\n\nTITLE: Leaf Conditional with Variable Check\nDESCRIPTION: Shows how to use the `#if` tag to check if a variable exists in the context and display different content based on its presence. If the variable `title` exists in the context its value will be displayed, otherwise a default message.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_5\n\nLANGUAGE: leaf\nCODE:\n```\n#if(title):\n    The title is #(title)\n#else:\n    No title was provided.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Update Dockerfile Swift Version\nDESCRIPTION: This snippet provides a diff showing how to update the Swift version in a Dockerfile from 5.2 to 5.5. This is required when deploying to platforms like Heroku or using Docker, to ensure the correct Swift version is used for building and running the Vapor application with async/await support. This is important for linux deployment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-FROM swift:5.2-focal as build\n+FROM swift:5.5-focal as build\n...\n-FROM swift:5.2-focal-slim\n+FROM swift:5.5-focal-slim\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Volumes (Shell)\nDESCRIPTION: Removes all unused Docker volumes.  This command removes any volumes that are not currently in use by any container. It's useful for cleaning up disk space, but it should be used with caution, as it can remove volumes that contain data you want to keep.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox\nDESCRIPTION: This command installs the Vapor Toolbox using Homebrew. Homebrew needs to be installed prior to running this command.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ko.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Starting In-Process Jobs in Vapor Queues\nDESCRIPTION: This code snippet demonstrates how to start the queues worker within the same process as the main application. The `app.queues.startInProcessJobs(on: .default)` method is called to start processing jobs using the default event loop group. Scheduled jobs can also be run in process with `app.queues.startScheduledJobs()`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.nl.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry app.queues.startInProcessJobs(on: .default)\n\ntry app.queues.startScheduledJobs()\n```\n\n----------------------------------------\n\nTITLE: Opening a file with NonBlockingFileIO on main thread in Swift\nDESCRIPTION: This snippet shows how to open a file directly using NIO's `NonBlockingFileIO` through Vapor. It opens the file on the main thread's event loop. The path to the file is required. Returns a `FileHandle`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/files.nl.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Main thread.\nlet fileHandle = try await app.fileio.openFile(\n    path: \"/path/to/file\", \n    eventLoop: app.eventLoopGroup.next()\n).get()\nprint(fileHandle)\n```\n\n----------------------------------------\n\nTITLE: Run Vapor Project on Linux\nDESCRIPTION: This command compiles and runs the Vapor project using the Swift command-line tool. It resolves dependencies and starts the Vapor server, making the application accessible via HTTP.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.es.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Disabling Address Reuse in Vapor\nDESCRIPTION: This code snippet shows how to disable address reuse for the Vapor HTTP server. The `reuseAddress` parameter controls whether the local address can be reused.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// 禁用地址复用\napp.http.server.configuration.reuseAddress = false\n```\n\n----------------------------------------\n\nTITLE: Accessing Nginx in Browser\nDESCRIPTION: This is a sample URL that can be used in a browser to verify if Nginx is correctly installed and running on the server.  Replace `server_domain_name_or_IP` with the actual domain name or IP address of the server.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.zh.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhttp://server_domain_name_or_IP\n```\n\n----------------------------------------\n\nTITLE: Get Project Root Path - Shell Script\nDESCRIPTION: This shell script command retrieves the full path to the current directory. It's used to determine the project's root directory for setting the custom working directory in Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.ko.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n# get path to this folder\npwd\n```\n\n----------------------------------------\n\nTITLE: Supervisor Control Commands\nDESCRIPTION: This snippet shows the commands to reread the Supervisor configuration, add the 'hello' application, and start the 'hello' application. The `add` command may automatically start the app.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.zh.md#_snippet_6\n\nLANGUAGE: Shell Script\nCODE:\n```\nsupervisorctl reread\nsupervisorctl add hello\nsupervisorctl start hello\n```\n\n----------------------------------------\n\nTITLE: Typical Folder Structure for SPM Package\nDESCRIPTION: This code block represents the folder structure for a typical Swift Package Manager (SPM) package.  It shows the Sources directory containing the application code, the Tests directory for unit tests, and the Package.swift file at the root level. Each target defined in the Package.swift file corresponds to a folder within the Sources or Tests directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.es.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n.\n├── Sources\n│   └── App\n│       └── (Source code)\n├── Tests\n│   └── AppTests\n└── Package.swift\n```\n\n----------------------------------------\n\nTITLE: Closing a WebSocket Connection\nDESCRIPTION: This snippet demonstrates how to close a WebSocket connection using the `close` method. The `ws` object represents the WebSocket connection to be closed. Calling this method initiates the closing handshake.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/websockets.it.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nws.close()\n```\n\n----------------------------------------\n\nTITLE: Run Vapor App with Serve Command\nDESCRIPTION: This snippet shows how to start up the Vapor server using the `serve` command. This command is the default if no other commands are specified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nswift run App serve\n```\n\n----------------------------------------\n\nTITLE: Get Project Path via Terminal\nDESCRIPTION: This shell command retrieves the absolute path to the current working directory. It's used to find the project's root directory, which is needed to configure the custom working directory in Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.it.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# ottenere il percorso di questa cartella\npwd\n```\n\n----------------------------------------\n\nTITLE: Updating Run target in Package.swift\nDESCRIPTION: This code snippet demonstrates how to update the Run target to be an executable target with a dependency on the App target within Package.swift.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Optional Future with Abort Error (Swift)\nDESCRIPTION: This code snippet demonstrates the use of Vapor's `unwrap(or:)` helper extension to unwrap a future containing an optional value. If the future resolves to `nil`, it fails with the provided `Abort` error, otherwise, the unwrapped value is passed to the closure. This is useful for handling optional results from database queries or other asynchronous operations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/errors.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nUser.find(id, on: db)\n    .unwrap(or: Abort(.notFound))\n    .flatMap \n{\n    // Niet-optionele gebruiker geleverd aan closure.\n}\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Extension\nDESCRIPTION: Demonstrates how to use the `#extend` tag to inherit content from another Leaf template. This example shows extending a \"footer\" template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_8\n\nLANGUAGE: leaf\nCODE:\n```\n#extend(\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Migration for ISO 8601 Timestamp Swift\nDESCRIPTION: This is the required migration code to handle an ISO 8601 timestamp. The migration needs to store the timestamp as a string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n.field(\"updated_at\", .string)\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with Session Cookie\nDESCRIPTION: An example HTTP request using a session cookie. The `vapor_session` cookie contains the session identifier. This request assumes the user has already been authenticated in a previous request and a session cookie has been set.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.md#_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nGET /me HTTP/1.1\ncookie: vapor_session=123\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Collection Strategy (Swift)\nDESCRIPTION: Demonstrates how to configure the body collection strategy for a specific route using the `body` parameter of the `app.on` method.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Collects streaming bodies (up to 1mb in size) before calling this route.\napp.on(.POST, \"listings\", body: .collect(maxSize: \"1mb\")) { req in\n    // Handle request.\n}\n```\n\n----------------------------------------\n\nTITLE: Example Swift Version Output (Shell)\nDESCRIPTION: This is an example output of the `swift --version` command.  It provides details about the Swift driver version, the Swift version, and the target platform. It's used to confirm the installation and version of Swift.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ja.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift-driver version: 1.75.2 Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)\nTarget: arm64-apple-macosx13.0\n```\n\n----------------------------------------\n\nTITLE: Blocking Event Loop with sleep() (Swift)\nDESCRIPTION: This snippet demonstrates a dangerous practice of blocking the event loop thread with the `sleep()` function. This will prevent the application from responding to incoming requests in a timely manner and can degrade performance. This example is to illustrate what NOT to do.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.es.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    /// Pone en suspensión el hilo del bucle de eventos.\n    sleep(5)\n    \n    /// Devuelve una cadena simple una vez que el hilo se reactiva.\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Server Name Header in Vapor\nDESCRIPTION: This code snippet demonstrates how to set the `Server` header in HTTP responses sent by the Vapor server. This header can be used to identify the server software.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.zh.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// 添加 'Server: vapor' 到响应头。\napp.http.server.configuration.serverName = \"vapor\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and running the Vapor project via command line\nDESCRIPTION: This command compiles and runs the Vapor project using the Swift command-line tool.  Dependencies will be downloaded and indexed if it's the first time running the project. This is suitable for Linux or macOS without Xcode.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.it.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres database app\nDESCRIPTION: This command creates a Fly app that can host databases, making them available to other apps on the Fly.io platform.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/fly.nl.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly pg create\n```\n\n----------------------------------------\n\nTITLE: Leaf Uppercased Tag Usage\nDESCRIPTION: Illustrates the usage of the `#uppercased` tag to convert the string variable 'name' to uppercase. This is helpful for standardization or specific display requirements.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.es.md#_snippet_16\n\nLANGUAGE: leaf\nCODE:\n```\n#uppercased(name)\n```\n\n----------------------------------------\n\nTITLE: Check Vapor Toolbox Installation\nDESCRIPTION: This command checks if the Vapor Toolbox is installed correctly by printing the help menu.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.it.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvapor --help\n```\n\n----------------------------------------\n\nTITLE: Extending Application to Store Configuration (Swift)\nDESCRIPTION: Extends the `Application` type to provide a computed property `myConfiguration` for accessing and setting the `MyConfiguration` in Vapor's application storage. Uses the `MyConfigurationKey` to manage the storage.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nextension Application {\n    var myConfiguration: MyConfiguration? {\n        get {\n            self.storage[MyConfigurationKey.self]\n        }\n        set {\n            self.storage[MyConfigurationKey.self] = newValue\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Reuse Address in Vapor (Swift)\nDESCRIPTION: This snippet disables the reuse of local addresses for the Vapor HTTP server. Setting `reuseAddress` to `false` prevents the server from reusing local addresses.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Adreshergebruik uitschakelen.\napp.http.server.configuration.reuseAddress = false\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vapor project\nDESCRIPTION: This command uses the Vapor Toolbox to create a new Vapor project named 'hello'. The `-n` flag automatically answers 'no' to all questions, providing a bare template.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.nl.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nvapor new hello -n\n```\n\n----------------------------------------\n\nTITLE: Reverting Heroku Database\nDESCRIPTION: Reverts the database migrations on the Heroku application. This command uses the `App` command to interact with the Vapor application and execute the `migrate` command with the `--revert` and `--all` flags to revert all migrations.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nheroku run App -- migrate --revert --all --yes --env production\n```\n\n----------------------------------------\n\nTITLE: Navigating to the project directory\nDESCRIPTION: This command changes the current directory to the newly created 'hello' directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.nl.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Install Vapor Toolbox via Homebrew\nDESCRIPTION: This command installs the Vapor Toolbox using Homebrew. It assumes that Homebrew is already installed on the system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/linux.it.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install vapor\n```\n\n----------------------------------------\n\nTITLE: Check Swift Version in Terminal\nDESCRIPTION: This command checks the installed Swift version by printing version information to the console. It verifies that Swift and its dependencies are correctly installed and that the version meets Vapor's requirements.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.zh.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Get Project Root Directory (pwd) Shell Script\nDESCRIPTION: This command retrieves the absolute path to the project's root directory. It's used to identify the correct path to set as the custom working directory in Xcode, allowing Vapor to access necessary files and folders.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.es.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# obtener la dirección de la carpeta\npwd\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created `HelloWorld` project directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.zh.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncd HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Starting Scheduled Jobs\nDESCRIPTION: Starts scheduled jobs within the same process as the Vapor application. This enables the execution of jobs that are scheduled to run at specific times. Scheduled Jobs need to be dispatched with the scheduler for them to run.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/queues.es.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ntry app.queues.startScheduledJobs()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Vapor project directory, allowing further operations within the project context.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ko.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: URLQueryEncoder Protocol Definition in Swift\nDESCRIPTION: This code shows the definition of the `URLQueryEncoder` protocol in Vapor. This protocol defines the `encode` function, which is responsible for encoding an encodable object to a URI.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol URLQueryEncoder {\n    func encode<E>(_ encodable: E, to url: inout URI) throws\n        where E: Encodable\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Read-Only Service in Vapor (Swift)\nDESCRIPTION: Demonstrates how to use the previously defined read-only service `myAPI` on a `Request` object. This example shows calling the `foos()` function on the service.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nreq.myAPI.foos()\n```\n\n----------------------------------------\n\nTITLE: Updating a Database Enum in Swift\nDESCRIPTION: This code updates an existing database enum by deleting a case. The `deleteCase(\"gasGiant\")` method removes the \"gasGiant\" case from the \"planet_type\" enum. The `update()` method then applies the changes to the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.nl.md#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Een voorbeeld van een enum update.\ndatabase.enum(\"planet_type\")\n    .deleteCase(\"gasGiant\")\n    .update()\n```\n\n----------------------------------------\n\nTITLE: Swift Version Output Example\nDESCRIPTION: This is an example output of the swift --version command.  It shows the Swift version, driver version, and target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ko.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nswift-driver version: 1.75.2 Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)\nTarget: arm64-apple-macosx13.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Vapor Application in Browser\nDESCRIPTION: This snippet shows the URL to access the Vapor application in a web browser. It assumes the application is running on port 8000.\nSOURCE: https://github.com/vapor/docs/blob/main/README.md#_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nhttp://127.0.1.1:8000\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple JWKs to Key Collection - Swift\nDESCRIPTION: This snippet demonstrates how to add multiple JWKs from a JSON string to the key collection using the `use(jwksJSON:)` method. The JSON string should contain a \"keys\" array, where each element is a JWK object.  This allows adding a set of keys at once.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/jwt.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet json = \"\"\"\n{\n    \"keys\": [\n        {\"kty\": \"RSA\", \"alg\": \"RS256\", \"kid\": \"a\", \"n\": \"\\(rsaModulus)\", \"e\": \"AQAB\"},\n        {\"kty\": \"RSA\", \"alg\": \"RS512\", \"kid\": \"b\", \"n\": \"\\(rsaModulus)\", \"e\": \"AQAB\"},\n    ]\n}\n\"\"\"\n\ntry await app.jwt.keys.use(jwksJSON: json)\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Vapor Server Manually\nDESCRIPTION: This code snippet shows how to manually start, shutdown, and wait for the shutdown of the Vapor server using `app.server`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.es.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Inicia el servidor de Vapor.\ntry app.server.start()\n// Solicita el cierre del servidor.\napp.server.shutdown()\n// Espera a que se apague el servidor.\ntry app.server.onShutdown.wait()\n```\n\n----------------------------------------\n\nTITLE: Example Server Startup Message\nDESCRIPTION: This message indicates that the Vapor server has successfully started and is listening for incoming requests on the specified address (127.0.0.1) and port (8080).\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.de.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[ INFO ] Server starting on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Specifying Port for XCTVapor Running Tests\nDESCRIPTION: Shows how to specify a custom port when using the `.running` testing method in XCTVapor. It defaults to port 8080 if not specified.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\n.running(port: 8123)\n```\n\n----------------------------------------\n\nTITLE: Hello World HTML Output\nDESCRIPTION: This is the expected HTML output that the Vapor application will return when accessed via a web browser. It confirms that the application is running and serving content.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.pl.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Leaf Template Master\nDESCRIPTION: Illustrates using `#import` tag to fetch content passed to the `#extend` tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.md#_snippet_10\n\nLANGUAGE: leaf\nCODE:\n```\n<html>\n    <head>\n        <title>#(title)</title>\n    </head>\n    <body>#import(\"body\")</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Succeeded and Failed Futures in Swift\nDESCRIPTION: This code demonstrates how to create a pre-completed future with a value or an error using the `makeSucceededFuture` and `makeFailedFuture` methods of the `EventLoop` in Swift. These methods are used to create futures that are already resolved, either successfully with a value or with an error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Create a pre-succeeded future.\nlet futureString: EventLoopFuture<String> = eventLoop.makeSucceededFuture(\"hello\")\n\n// Create a pre-failed future.\nlet futureString: EventLoopFuture<String> = eventLoop.makeFailedFuture(error)\n```\n\n----------------------------------------\n\nTITLE: Leaf For Loop Example\nDESCRIPTION: Demonstrates looping through an array of planets in a Leaf template using the `#for` tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_10\n\nLANGUAGE: leaf\nCODE:\n```\nPlanets:\n<ul>\n#for(planet in planets):\n    <li>#(planet)</li>\n#endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Hashing Password on Application\nDESCRIPTION: This code shows how to hash a password using the `password` helper on the `Application` object, for use during app startup. It throws if hashing fails.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/passwords.nl.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nlet digest = try app.password.hash(\"vapor\")\n```\n\n----------------------------------------\n\nTITLE: Creating a new user\nDESCRIPTION: Creates a new user named `vapor` on the server. It is recommended to avoid using the root user for security reasons.  The command `adduser vapor` prompts for user details like password and full name.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadduser vapor\n```\n\n----------------------------------------\n\nTITLE: Mark Run Target as Executable in Package.swift\nDESCRIPTION: This code snippet marks the 'Run' target as an executable target in the Package.swift file. This is needed for executing the application.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created 'hello' project directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.pl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd hello\n```\n\n----------------------------------------\n\nTITLE: Check Git Status\nDESCRIPTION: This command displays the status of the Git repository, showing any uncommitted changes. It's used to ensure all changes are tracked before deployment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.nl.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit status --porcelain\n```\n\n----------------------------------------\n\nTITLE: Leaf Lowercased Tag\nDESCRIPTION: Shows the usage of the `#lowercased` tag which converts all characters in a string to lowercase.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.it.md#_snippet_15\n\nLANGUAGE: leaf\nCODE:\n```\n#lowercased(name)\n```\n\n----------------------------------------\n\nTITLE: Async Model Middleware Example (Swift)\nDESCRIPTION: This code demonstrates how to create an `AsyncModelMiddleware` to capitalize the name of a `Planet` model before it is created and print a message after creation, using the `async`/`await` syntax. This version utilizes the `create` lifecycle event and the asynchronous `AnyAsyncModelResponder` protocol.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/model.zh.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nstruct PlanetMiddleware: AsyncModelMiddleware {\n    func create(model: Planet, on db: Database, next: AnyAsyncModelResponder) async throws {\n        // 在创建模型之前，可以在这里修改模型。\n        model.name = model.name.capitalized()\n        try await next.create(model, on: db)\n        //一旦行星被创建，代码将被执行。\n        print (\"Planet \\(model.name) was created\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Relationships with get(reload:on:) in Swift\nDESCRIPTION: This snippet shows how to force a reload of a relationship from the database using the `get(reload:on:)` method. The `reload: true` parameter ensures that the relationship is fetched from the database and not from cache. The `database` parameter specifies the database connection.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.es.md#_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\ntry await sun.$planets.get(reload: true, on: database)\n```\n\n----------------------------------------\n\nTITLE: Display Current Directory Path - Shell\nDESCRIPTION: This command retrieves and displays the full path of the current directory in the terminal. It is used to identify the project's root directory for setting the custom working directory in Xcode, ensuring Vapor can access necessary files like '.env'.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.pl.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n# Uzyskaj ścieżkę do tego folderu\npwd\n```\n\n----------------------------------------\n\nTITLE: Stop Docker Compose Services\nDESCRIPTION: This command stops all services defined in the docker-compose.yml file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Running Vapor Commands with Help Option (Shell)\nDESCRIPTION: This command displays help information for the Vapor application, listing available commands and options. This is useful for understanding the application's command-line interface.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/commands.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift run App --help\n```\n\n----------------------------------------\n\nTITLE: Install Heroku CLI with Homebrew\nDESCRIPTION: Installs the Heroku Command Line Interface (CLI) using Homebrew. This allows you to interact with Heroku from the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/heroku.es.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap heroku/brew && brew install heroku\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent MongoDB Driver Package\nDESCRIPTION: This snippet demonstrates how to add Fluent's MongoDB driver as a dependency to your Swift package. This allows your Vapor application to interact with a MongoDB database using Fluent.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/overview.ja.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n.package(url: \"https://github.com/vapor/fluent-mongo-driver.git\", from: \"1.0.0\"),\n```\n\nLANGUAGE: Swift\nCODE:\n```\n.product(name: \"FluentMongoDriver\", package: \"fluent-mongo-driver\")\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Volumes (Shell)\nDESCRIPTION: Lists all Docker volumes on the system. This command is useful to see the volumes created and managed by Docker, especially for persistent data storage. Volume names usually have a prefix.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ndocker volume ls\n```\n\n----------------------------------------\n\nTITLE: Swift Version Output Example\nDESCRIPTION: This is an example output of the `swift --version` command, showing the Swift version and target information. It confirms the successful installation and version of Swift on the system.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.zh.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift-driver version: 1.75.2 Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)\nTarget: arm64-apple-macosx13.0\n```\n\n----------------------------------------\n\nTITLE: Use Default HTTP Server in Vapor (Swift)\nDESCRIPTION: This snippet configures the Vapor application to use the default built-in HTTP server.  It calls `app.servers.use(.http)`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.nl.md#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\napp.servers.use(.http)\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS with TLS Authentication in Vapor\nDESCRIPTION: This snippet shows how to configure APNS client in Vapor using TLS authentication, requiring the path to the private key and PEM file, and an optional PEM password. It provides an alternative authentication method using a certificate.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.nl.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nauthenticationMethod: .tls(\n    privateKeyPath: <#path to private key#>,\n    pemPath: <#path to pem file#>,\n    pemPassword: <#optional pem password#> \n)\n```\n\n----------------------------------------\n\nTITLE: Add User Migration to Application\nDESCRIPTION: Adds the `User` migration to the Vapor application's migration list. This ensures that the database schema will be created or updated when the application starts.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\napp.migrations.add(User.Migration())\n```\n\n----------------------------------------\n\nTITLE: Installing Vapor Toolbox from Source\nDESCRIPTION: These commands clone the Vapor Toolbox repository, checkout a specific version, and install it using make.  This method requires git and make to be installed. Replace `<desired version>` with the specific tag or commit hash of the toolbox release.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.it.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout <desired version>\nmake install\n```\n\n----------------------------------------\n\nTITLE: Example Directory Path Output - Shell\nDESCRIPTION: This is an example of the output from the `pwd` command, showing the full path to the project's root directory.  This path is used to configure Xcode's custom working directory.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.pl.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Swiftly Installation of Swift\nDESCRIPTION: These commands use the `swiftly` tool to install the latest stable version of Swift. `swiftly install latest` fetches and installs Swift. `swift --version` verifies the installation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.es.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ swiftly install latest\n\nFetching the latest stable Swift release...\nInstalling Swift 5.9.1\nDownloaded 488.5 MiB of 488.5 MiB\nExtracting toolchain...\nSwift 5.9.1 installed successfully!\n\n$ swift --version\n\nSwift version 5.9.1 (swift-5.9.1-RELEASE)\nTarget: x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Update Dockerfile for Swift Version\nDESCRIPTION: This snippet updates the Swift version in a Dockerfile from 5.2 to 5.5 to support async/await when deploying on Linux.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.nl.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-FROM swift:5.2-focal as build\n+FROM swift:5.5-focal as build\n...\n-FROM swift:5.2-focal-slim\n+FROM swift:5.5-focal-slim\n```\n\n----------------------------------------\n\nTITLE: Example Project Path Output - Shell\nDESCRIPTION: This output is an example of the path returned by the `pwd` command. The path represents the root directory of the project. It demonstrates the format expected when setting up the custom working directory in the Xcode scheme.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/xcode.ja.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Adding enum validation (favoriteColor)\nDESCRIPTION: Adds a validation to check if the `favoriteColor` is one of the allowed enum values ('red', 'blue', 'green'). It validates against a `String` and uses the `.in` validator. The `required` parameter is set to false as the field is optional.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/validation.nl.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvalidations.add(\n    \"favoriteColor\", as: String.self,\n    is: .in(\"red\", \"blue\", \"green\"),\n    required: false\n)\n```\n\n----------------------------------------\n\nTITLE: Hello World HTML\nDESCRIPTION: A minimal HTML example demonstrating the basic 'Hello, world!' response that should be displayed when accessing the Vapor application in a web browser.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.ja.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Refresh Redirection\nDESCRIPTION: This snippet redirects the user to a new URL after 0 seconds. It utilizes the HTML meta tag with the 'http-equiv' attribute set to 'refresh' and the 'content' attribute specifying the delay (0 seconds) and the target URL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/version/legacy-docs.es.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0; url=https://legacy.docs.vapor.codes/\">\n```\n\n----------------------------------------\n\nTITLE: Typical SPM Folder Structure\nDESCRIPTION: This snippet illustrates the typical folder structure for a Swift Package Manager project. It shows the location of source code, tests, and the Package.swift manifest file.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/spm.ko.md#_snippet_1\n\nLANGUAGE: other\nCODE:\n```\n.\n├── Sources\n│   └── App\n│       └── (Source code)\n├── Tests\n│   └── AppTests\n└── Package.swift\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncResponseEncodable for HTML struct in Swift\nDESCRIPTION: This code implements the `AsyncResponseEncodable` protocol for the `HTML` struct using `async/await`. It sets the `Content-Type` header to `text/html` and returns a successful response containing the HTML string.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/content.nl.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nextension HTML: AsyncResponseEncodable {\n  public func encodeResponse(for request: Request) async throws -> Response {\n    var headers = HTTPHeaders()\n    headers.add(name: .contentType, value: \"text/html\")\n    return .init(status: .ok, headers: headers, body: .init(string: value))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Refresh Redirect\nDESCRIPTION: This snippet uses an HTML meta tag to redirect the user to a new URL after 0 seconds. It's commonly used for temporary or permanent redirects of web pages.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/version/legacy-docs.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0; url=https://legacy.docs.vapor.codes/\">\n```\n\n----------------------------------------\n\nTITLE: Defining a Configuration Struct (Swift)\nDESCRIPTION: Defines a `MyConfiguration` struct that holds the API key. This configuration will be stored and accessed via Vapor's application storage.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/services.nl.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyConfiguration {\n    var apiKey: String\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Vapor Toolbox Repository\nDESCRIPTION: This snippet clones the Vapor Toolbox repository from GitHub. It fetches the latest source code to build the toolbox.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/digital-ocean.nl.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vapor/toolbox.git\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Constraint in a Child Model Schema in Fluent\nDESCRIPTION: This example demonstrates how to enforce a one-to-one relationship by adding a unique constraint to the foreign key column in the child model's schema. This ensures that only one child model can reference a given parent model.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/relations.zh.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\ntry await database.schema(Governor.schema)\n    .id()\n    .field(\"name\", .string, .required)\n    .field(\"planet_id\", .uuid, .required, .references(\"planets\", \"id\"))\n    // 唯一性约束示例。\n    .unique(on: \"planet_id\")\n    .create()\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Request\nDESCRIPTION: A sample HTTP GET request used in the documentation.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.ja.md#_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nGET /hello/vapor HTTP/1.1\nhost: vapor.codes\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: List Docker Services\nDESCRIPTION: This command lists all services running in the Docker Swarm. It shows the number of replicas for each service.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.nl.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Refresh Redirection\nDESCRIPTION: This HTML snippet utilizes the http-equiv=\"refresh\" meta tag to redirect the user to a new URL. The content attribute specifies the delay in seconds before the redirect occurs (0 for immediate redirection) and the destination URL.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/version/legacy-docs.it.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0; url=https://legacy.docs.vapor.codes/\">\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database Enum (Swift)\nDESCRIPTION: This code shows how to delete a database enum using Vapor. The `delete` method removes the enum definition from the database.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n// Un ejemplo de borrado de un enum.\ndatabase.enum(\"planet_type\").delete()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Schema with Fluent (Swift)\nDESCRIPTION: This snippet illustrates how to delete a database schema using Fluent in Swift. It removes the \"planets\" table or collection from the database. It uses the Fluent framework with an assumed database connection named `database`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/fluent/schema.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ndatabase.schema(\"planets\").delete()\n```\n\n----------------------------------------\n\nTITLE: Check Swift Version (Shell)\nDESCRIPTION: This command is used to verify the installed version of Swift on the system. It is essential to ensure that Swift 5.9 or later is installed, which is a requirement for using Vapor 4.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/install/macos.ja.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Adding VaporAPNS Package Dependency using Swift Package Manager\nDESCRIPTION: This code snippet shows how to add the VaporAPNS package as a dependency to a Swift Package Manager project.  It specifies the package URL and version requirement, as well as the target dependency.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/apns.it.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"my-app\",\n    dependencies: [\n         // Altre dipendenze...\n        .package(url: \"https://github.com/vapor/apns.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            // Altre dipendenze...\n            .product(name: \"VaporAPNS\", package: \"apns\")\n        ]),\n        // Altri target...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Example JWT Payload (Swift)\nDESCRIPTION: This code snippet demonstrates the implementation of a JWT payload.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_48\n\nLANGUAGE: swift\nCODE:\n```\n// JWT payload 示例。\nstruct SessionToken: Content, Authenticatable, JWTPayload {\n\n    // 常量\n    let expirationTime: TimeInterval = 60 * 15\n    \n    // Token 数据\n    var expiration: ExpirationClaim\n    var userId: UUID\n    \n    init(userId: UUID) {\n        self.userId = userId\n        self.expiration = ExpirationClaim(value: Date().addingTimeInterval(expirationTime))\n    }\n    \n    init(with user: User) throws {\n        self.userId = try user.requireID()\n        self.expiration = ExpirationClaim(value: Date().addingTimeInterval(expirationTime))\n    }\n\n    func verify(using signer: JWTSigner) throws {\n        try expiration.verifyNotExpired()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a permanent redirect\nDESCRIPTION: This code snippet shows how to create a permanent redirect, indicating that the resource has permanently moved to a new location.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nreq.redirect(to: \"/some/new/path\", redirectType: .permanent)\n```\n\n----------------------------------------\n\nTITLE: Building and running the Vapor project (Linux)\nDESCRIPTION: This command builds and runs the Vapor project using the Swift command-line tool. The first time the command is executed, it may take some time to fetch and resolve dependencies.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/getting-started/hello-world.nl.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nswift run\n```\n\n----------------------------------------\n\nTITLE: Setting Environment via Command Line (Shell)\nDESCRIPTION: This command shows how to set the environment to 'production' when running the Vapor application using the `swift run` command.  This overrides the default environment.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.de.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswift run App serve --env production\n```\n\n----------------------------------------\n\nTITLE: Defining custom error for Leaf Tag Swift\nDESCRIPTION: Defines a custom error enum `HelloTagError` for the `HelloTag`.  This helps handling specific errors related to parameters inside the Leaf tag.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/custom-tags.ja.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nenum HelloTagError: Error {\n    case missingNameParameter\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XCTVapor to Package\nDESCRIPTION: Demonstrates how to add XCTVapor to your Package.swift file. This includes specifying the dependency on the Vapor package and adding XCTVapor as a product dependency for the test target.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.es.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\")\n    ],\n    targets: [\n        ...\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Leaf Package Dependency (Swift)\nDESCRIPTION: This snippet demonstrates how to add the Leaf package as a dependency to your Swift Package Manager (SPM) project.  It specifies the package URL and the minimum version. This allows your project to utilize Leaf for templating.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/getting-started.it.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version:5.8\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyApp\",\n    platforms: [\n       .macOS(.v10_15)\n    ],\n    dependencies: [\n        /// Qualsiasi altra dipendenza ...\n        .package(url: \"https://github.com/vapor/leaf.git\", from: \"4.4.0\"),\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\n            .product(name: \"Leaf\", package: \"leaf\"),\n            // Qualsiasi altra dipendenza\n        ]),\n        // Altri target\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Vapor\nDESCRIPTION: This code snippet shows how to access the client's IP address from a Vapor request. It retrieves the `remoteAddress` property of the request, which is a `SocketAddress`, and then accesses its `ipAddress` property to get the IP address as a string. This IP address is then returned as the response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/request.es.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"ip\") { req -> String in\n    return req.remoteAddress.ipAddress\n}\n```\n\n----------------------------------------\n\nTITLE: List Docker volumes\nDESCRIPTION: This command lists all Docker volumes currently available on the system, including their names and drivers. It helps identify volumes that can be removed.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.es.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume ls\n```\n\n----------------------------------------\n\nTITLE: Validating Nginx Installation\nDESCRIPTION: This snippet shows how to validate an Nginx installation by accessing the server's IP address or domain name in a web browser.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/nginx.es.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhttp://server_domain_name_or_IP\n```\n\n----------------------------------------\n\nTITLE: Leaf Nested Tag Condition\nDESCRIPTION: Illustrates using a `#count` tag inside an `#if` tag to check if there are any users.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/leaf/overview.nl.md#_snippet_7\n\nLANGUAGE: leaf\nCODE:\n```\n#if(count(users) > 0):\n    You have users!\n#else:\n    There are no users yet :(\n#endif\n```\n\n----------------------------------------\n\nTITLE: Synchronously Waiting for a Future to Complete\nDESCRIPTION: This snippet illustrates using the `.wait()` method to synchronously block until a future completes. It is important to note that this should not be used on event loop threads as it will cause an assertion error.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.ja.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet futureString: EventLoopFuture<String> = ...\n\nlet string = try futureString.wait()\nprint(string) /// String\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Stack (Shell)\nDESCRIPTION: Removes a Docker stack. This command stops and removes all services associated with the stack named `test`.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/docker.zh.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\ndocker stack rm test\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS/Amazon Linux\nDESCRIPTION: This command installs Supervisor on CentOS or Amazon Linux using the yum package manager.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/deploy/supervisor.nl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install supervisor\n```\n\n----------------------------------------\n\nTITLE: Copying and Editing Dotenv Files in Shell\nDESCRIPTION: These commands show how to copy the default `.env` file to create a specific environment file (e.g., `.env.development`) and then edit it using `vim`. This allows you to customize environment variables for different environments.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/environment.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncp .env .env.development\nvim .env.development\n```\n\n----------------------------------------\n\nTITLE: Add XCTVapor dependency to Package.swift in Swift\nDESCRIPTION: This snippet shows how to add the XCTVapor dependency to your project's Package.swift file. This allows you to use the XCTVapor testing helpers in your Vapor application.  The Vapor package is also included as a dependency.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/testing.zh.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\")\n    ],\n    targets: [\n        ...\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Sleeping on the Event Loop (Blocking)\nDESCRIPTION: This code demonstrates a blocking operation (sleep) directly on the event loop thread, which is strongly discouraged. This will cause the event loop to be unresponsive during the sleep duration.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/async.zh.md#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\napp.get(\"hello\") { req in\n    /// 使事件循环的线程进入睡眠状态。\n    sleep(5)\n    \n    /// 一旦线程重新唤醒，返回一个简单的字符串。\n    return \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Backlog in Vapor\nDESCRIPTION: This code snippet demonstrates how to customize the backlog setting, which defines the maximum number of pending connections to the server, using `app.http.server.configuration.backlog`. The default value is 256.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/advanced/server.de.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n/// [configure.swift]\n\n// custom backlog.\napp.http.server.configuration.backlog = 128\n```\n\n----------------------------------------\n\nTITLE: Example JWT Response (Swift)\nDESCRIPTION: This code snippet demonstrates the implementation of a JWT response.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/security/authentication.zh.md#_snippet_49\n\nLANGUAGE: swift\nCODE:\n```\nstruct ClientTokenResponse: Content {\n    var token: String\n}\n```\n\n----------------------------------------\n\nTITLE: Print all available routes using the command line\nDESCRIPTION: This code shows how to print all available routes in a table format using the command line.\nSOURCE: https://github.com/vapor/docs/blob/main/docs/basics/routing.zh.md#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ swift run App routes\n+--------+----------------+\n| GET    | /              |\n+--------+----------------+\n| GET    | /hello         |\n+--------+----------------+\n| GET    | /todos         |\n+--------+----------------+\n| POST   | /todos         |\n+--------+----------------+\n| DELETE | /todos/:todoID |\n+--------+----------------+\n```"
  }
]