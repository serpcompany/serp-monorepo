[
  {
    "owner": "tursodatabase",
    "repo": "libsql",
    "content": "TITLE: Adding a Foreign Key Constraint in SQL\nDESCRIPTION: Demonstrates how to add a foreign key constraint to an existing column using the ALTER TABLE ALTER COLUMN syntax, linking the user_id column to the users table.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE emails ALTER COLUMN user_id TO user_id INT REFERENCES users(id);\n```\n\n----------------------------------------\n\nTITLE: Example of Query with Positional Bound Parameters in JSON\nDESCRIPTION: Illustrates how to structure a query with positional bound parameters. The query uses '?' as a placeholder, and the params array provides values in order.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"q\": \"SELECT * FROM users WHERE name = ?\",\n    \"params\": [\"adhoc\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Primary sqld Server with TLS (Console)\nDESCRIPTION: This command starts a sqld server in primary mode, configuring HTTP and gRPC listeners with TLS certificates for secure communication.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsqld \\\n  --http-listen-addr 127.0.0.1:8081 \\\n  --grpc-listen-addr 127.0.0.1:5001 \\\n  --grpc-tls \\\n  --grpc-ca-cert-file ca_cert.pem \\\n  --grpc-cert-file server_cert.pem \\\n  --grpc-key-file server_key.pem\n```\n\n----------------------------------------\n\nTITLE: Executing a SQL Statement with HTTP API v1\nDESCRIPTION: The execute endpoint receives a SQL statement and returns the execution result. It uses the Stmt and StmtResult structures from the Hrana protocol, with semantics matching the execute request in Hrana.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V1_SPEC.md#2025-04-11_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/execute\n\n-> {\n    \"stmt\": Stmt,\n}\n\n<- {\n    \"result\": StmtResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Building SQLite WebAssembly Components in Bash\nDESCRIPTION: Commands to build the WebAssembly components of SQLite. These can be run from either the top-level SQLite build tree or the ext/wasm directory.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ make fiddle\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ext/wasm\n$ make\n```\n\n----------------------------------------\n\nTITLE: Demonstrating libSQL Shell Usage with SQL Commands\nDESCRIPTION: This snippet showcases the usage of the libSQL shell, including creating a table, inserting data, and querying the results. It demonstrates basic SQL operations and the shell's output formatting.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-shell/README.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./libsql\nlibSQL version 0.2.0\nConnected to a transient in-memory database.\n\nlibsql> create table test(id, v);\nlibsql> insert into test values(42, zeroblob(12));\nlibsql> insert into test values(3.14, 'hello');\nlibsql> insert into test values(null, null);\nlibsql> select id, v, length(v), hex(v) from test;\n id   | v                  | length(v) | hex(v)                   \n------+--------------------+-----------+--------------------------\n 42   | 0xAAAAAAAAAAAAAAAA | 12        | 000000000000000000000000 \n 3.14 | hello              | 5         | 68656C6C6F               \n null | null               | null      |                          \nlibsql> \n```\n\n----------------------------------------\n\nTITLE: Adding Type Affinity and DEFAULT Value in SQL\nDESCRIPTION: Example of altering a column to specify TEXT type affinity and set a default value using the ALTER TABLE ALTER COLUMN syntax.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t ALTER COLUMN v TO v TEXT DEFAULT 'hai';\n```\n\n----------------------------------------\n\nTITLE: SQL Text Storage Request and Response\nDESCRIPTION: Defines the structure for storing an SQL text on the server with an ID for later reference, scoped to a single stream.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype StoreSqlStreamReq = {\n    \"type\": \"store_sql\",\n    \"sql_id\": int32,\n    \"sql\": string,\n}\n\ntype StoreSqlStreamResp = {\n    \"type\": \"store_sql\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Description Result in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the DescribeResult, DescribeParam, and DescribeCol types for representing detailed information about a SQL statement, including parameters and columns.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeResult = {\n    \"params\": Array<DescribeParam>,\n    \"cols\": Array<DescribeCol>,\n    \"is_explain\": boolean,\n    \"is_readonly\": boolean,\n}\n\ntype DescribeParam = {\n    \"name\": string | null,\n}\n\ntype DescribeCol = {\n    \"name\": string,\n    \"decltype\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Incremental Snapshots to Local Replica (Rust)\nDESCRIPTION: This Rust code demonstrates how to apply incremental snapshots to a local libSQL replica using the libsql and libsql_replication crates.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse libsql::Database;\nuse libsql_replication::{Frames, TempSnapshot};\n\n#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt::init();\n\n    let opts = libsql::Opts::with_sync();\n    let db = Database::open_with_opts(\"test.db\", opts).await.unwrap();\n    let conn = db.connect().unwrap();\n\n    let args = std::env::args().collect::<Vec<String>>();\n    if args.len() < 2 {\n        println!(\"Usage: {} <snapshot path>\", args[0]);\n        return;\n    }\n    let snapshot_path = args.get(1).unwrap();\n    let snapshot = TempSnapshot::from_snapshot_file(snapshot_path.as_ref()).unwrap();\n\n    db.sync_frames(Frames::Snapshot(snapshot)).unwrap();\n\n    let rows = conn\n        .query(\"SELECT * FROM sqlite_master\", ())\n        .unwrap()\n        .unwrap();\n    while let Ok(Some(row)) = rows.next() {\n        println!(\n            \"| {:024} | {:024} | {:024} | {:024} |\",\n            row.get::<&str>(0).unwrap(),\n            row.get::<&str>(1).unwrap(),\n            row.get::<&str>(2).unwrap(),\n            row.get::<&str>(3).unwrap(),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running libSQL SQL shell\nDESCRIPTION: This snippet demonstrates how to launch the libSQL interactive SQL shell, which provides a command-line interface for interacting with the database.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd libsql-sqlite3 && ./libsql\nlibSQL version 0.2.1 (based on SQLite version 3.43.0) 2023-05-23 11:47:56\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nlibsql>\n```\n\n----------------------------------------\n\nTITLE: Basic Rusqlite Usage Example in Rust\nDESCRIPTION: This example demonstrates how to use Rusqlite to create a SQLite database in memory, define a table, insert data, and query the database. It includes error handling and shows how to work with custom structs.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/rusqlite/README.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse rusqlite::{Connection, Result};\n\n#[derive(Debug)]\nstruct Person {\n    id: i32,\n    name: String,\n    data: Option<Vec<u8>>,\n}\n\nfn main() -> Result<()> {\n    let conn = Connection::open_in_memory()?;\n\n    conn.execute(\n        \"CREATE TABLE person (\n            id    INTEGER PRIMARY KEY,\n            name  TEXT NOT NULL,\n            data  BLOB\n        )\",\n        (), // empty list of parameters.\n    )?;\n    let me = Person {\n        id: 0,\n        name: \"Steven\".to_string(),\n        data: None,\n    };\n    conn.execute(\n        \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n        (&me.name, &me.data),\n    )?;\n\n    let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n    let person_iter = stmt.query_map([], |row| {\n        Ok(Person {\n            id: row.get(0)?,\n            name: row.get(1)?,\n            data: row.get(2)?,\n        })\n    })?;\n\n    for person in person_iter {\n        println!(\"Found person {:?}\", person.unwrap());\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Basic Database Operations in Java using JNI\nDESCRIPTION: Demonstrates basic SQLite3 database operations including opening an in-memory database, error handling, and proper resource cleanup. Shows the essential pattern for managing SQLite3 resources safely in Java.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.sqlite.jni.*;\nimport static org.sqlite.jni.CApi.*;\n\n...\n\nfinal sqlite3 db = sqlite3_open(\":memory:\");\ntry {\n  final int rc = sqlite3_errcode(db);\n  if( 0 != rc ){\n    if( null != db ){\n      System.out.print(\"Error opening db: \"+sqlite3_errmsg(db));\n    }else{\n      System.out.print(\"Error opening db: rc=\"+rc);\n    }\n    ... handle error ...\n  }\n  // ... else use the db ...\n}finally{\n  // ALWAYS close databases using sqlite3_close() or sqlite3_close_v2()\n  // when done with them. All of their active statement handles must\n  // first have been passed to sqlite3_finalize().\n  sqlite3_close_v2(db);\n}\n```\n\n----------------------------------------\n\nTITLE: Hrana WebSocket Protocol Definition in Protobuf\nDESCRIPTION: Defines the Protobuf schema for the Hrana protocol over WebSocket, including client-server message structure, request-response patterns, and stream operations. This schema handles database connections, query execution, cursors and transaction management.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_30\n\nLANGUAGE: proto3\nCODE:\n```\nsyntax = \"proto3\";\npackage hrana.ws;\n\nmessage ClientMsg {\n  oneof msg {\n    HelloMsg hello = 1;\n    RequestMsg request = 2;\n  }\n}\n\nmessage ServerMsg {\n  oneof msg {\n    HelloOkMsg hello_ok = 1;\n    HelloErrorMsg hello_error = 2;\n    ResponseOkMsg response_ok = 3;\n    ResponseErrorMsg response_error = 4;\n  }\n}\n\nmessage HelloMsg {\n  optional string jwt = 1;\n}\n\nmessage HelloOkMsg {\n}\n\nmessage HelloErrorMsg {\n  Error error = 1;\n}\n\nmessage RequestMsg {\n  int32 request_id = 1;\n  oneof request {\n    OpenStreamReq open_stream = 2;\n    CloseStreamReq close_stream = 3;\n    ExecuteReq execute = 4;\n    BatchReq batch = 5;\n    OpenCursorReq open_cursor = 6;\n    CloseCursorReq close_cursor = 7;\n    FetchCursorReq fetch_cursor = 8;\n    SequenceReq sequence = 9;\n    DescribeReq describe = 10;\n    StoreSqlReq store_sql = 11;\n    CloseSqlReq close_sql = 12;\n    GetAutocommitReq get_autocommit = 13;\n  }\n}\n\nmessage ResponseOkMsg {\n  int32 request_id = 1;\n  oneof response {\n    OpenStreamResp open_stream = 2;\n    CloseStreamResp close_stream = 3;\n    ExecuteResp execute = 4;\n    BatchResp batch = 5;\n    OpenCursorResp open_cursor = 6;\n    CloseCursorResp close_cursor = 7;\n    FetchCursorResp fetch_cursor = 8;\n    SequenceResp sequence = 9;\n    DescribeResp describe = 10;\n    StoreSqlResp store_sql = 11;\n    CloseSqlResp close_sql = 12;\n    GetAutocommitResp get_autocommit = 13;\n  }\n}\n\nmessage ResponseErrorMsg {\n  int32 request_id = 1;\n  Error error = 2;\n}\n\nmessage OpenStreamReq {\n  int32 stream_id = 1;\n}\n\nmessage OpenStreamResp {\n}\n\nmessage CloseStreamReq {\n  int32 stream_id = 1;\n}\n\nmessage CloseStreamResp {\n}\n\nmessage ExecuteReq {\n  int32 stream_id = 1;\n  Stmt stmt = 2;\n}\n\nmessage ExecuteResp {\n  StmtResult result = 1;\n}\n\nmessage BatchReq {\n  int32 stream_id = 1;\n  Batch batch = 2;\n}\n\nmessage BatchResp {\n  BatchResult result = 1;\n}\n\nmessage OpenCursorReq {\n  int32 stream_id = 1;\n  int32 cursor_id = 2;\n  Batch batch = 3;\n}\n\nmessage OpenCursorResp {\n}\n\nmessage CloseCursorReq {\n  int32 cursor_id = 1;\n}\n\nmessage CloseCursorResp {\n}\n\nmessage FetchCursorReq {\n  int32 cursor_id = 1;\n  uint32 max_count = 2;\n}\n\nmessage FetchCursorResp {\n  repeated CursorEntry entries = 1;\n  bool done = 2;\n}\n\nmessage StoreSqlReq {\n  int32 sql_id = 1;\n  string sql = 2;\n}\n\nmessage StoreSqlResp {\n}\n\nmessage CloseSqlReq {\n  int32 sql_id = 1;\n}\n\nmessage CloseSqlResp {\n}\n\nmessage SequenceReq {\n  int32 stream_id = 1;\n  optional string sql = 2;\n  optional int32 sql_id = 3;\n}\n\nmessage SequenceResp {\n}\n\nmessage DescribeReq {\n  int32 stream_id = 1;\n  optional string sql = 2;\n  optional int32 sql_id = 3;\n}\n\nmessage DescribeResp {\n  DescribeResult result = 1;\n}\n\nmessage GetAutocommitReq {\n  int32 stream_id = 1;\n}\n\nmessage GetAutocommitResp {\n  bool is_autocommit = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for Hrana v2 Request Types\nDESCRIPTION: Type definitions that extend the Hrana v1 protocol with new request types: SequenceReq, DescribeReq, StoreSqlReq, and CloseSqlReq, along with their corresponding response types.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Request =\n    | ...\n    | SequenceReq\n    | DescribeReq\n    | StoreSqlReq\n    | CloseSqlReq\n\ntype Response =\n    | ...\n    | SequenceResp\n    | DescribeResp\n    | StoreSqlReq\n    | CloseSqlReq\n```\n\n----------------------------------------\n\nTITLE: Building Sqld from Source with Cargo\nDESCRIPTION: Command to build sqld from source code using Cargo, the Rust package manager. The binary will be created in the target/debug directory.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Testing sqld Cluster with SQL Operations (Console)\nDESCRIPTION: These curl commands demonstrate how to create a table and insert data on a replica server, then query the results from the primary server in a sqld cluster.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncurl -d '{\"statements\": [\"CREATE TABLE IF NOT EXISTS users (username)\", \"INSERT INTO users VALUES (\\\"alice\\\")\"]}' 127.0.0.1:8082\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl -d '{\"statements\": [\"SELECT * FROM users\"]}' 127.0.0.1:8081\n```\n\n----------------------------------------\n\nTITLE: Activating Emscripten Environment in Bash\nDESCRIPTION: Commands to activate the Emscripten environment in the current terminal session. This needs to be run for each shell instance that requires the emcc compiler.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Activate PATH and other environment variables in the current terminal:\n$ source ./emsdk_env.sh\n\n$ which emcc\n/path/to/emsdk/upstream/emscripten/emcc\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for Enhanced Statement Structure in Hrana v2\nDESCRIPTION: Updated type definition for Stmt that adds support for referencing stored SQL by ID and makes the want_rows field optional with a default value of true.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Stmt = {\n    \"sql\"?: string | undefined,\n    \"sql_id\"?: int32 | undefined,\n    \"args\"?: Array<Value>,\n    \"named_args\"?: Array<NamedArg>,\n    \"want_rows\"?: boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with ICU-enhanced upper() function in SQL\nDESCRIPTION: Demonstrates the usage of the ICU-enhanced upper() function for Unicode-aware case mapping. This function provides case mapping for the full range of Unicode characters, unlike SQLite's built-in implementation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/icu/README.txt#2025-04-11_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nupper('abc') -> 'ABC'\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes on JSON Fields in SQLite\nDESCRIPTION: This snippet creates four indexes on different JSON fields of the 't2' table. It demonstrates how to index specific JSON properties for improved query performance.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/jsonb-q1.txt#2025-04-11_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX t2x1 ON t2(x->>'a');\nCREATE INDEX t2x2 ON t2(x->>'b');\nCREATE INDEX t2x3 ON t2(x->>'e');\nCREATE INDEX t2x4 ON t2(x->>'f');\n```\n\n----------------------------------------\n\nTITLE: Removing a Foreign Key Constraint in SQL\nDESCRIPTION: Example showing how to remove a foreign key constraint by altering the column definition to exclude the REFERENCES clause.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE emails ALTER COLUMN user_id TO user_id INT;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Sqld with Turso CLI\nDESCRIPTION: A command to connect to a running sqld instance using the Turso CLI. This allows you to interact with the database through a shell interface.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nturso db shell http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for SQL Parameter Description in Hrana v2\nDESCRIPTION: Type definition for DescribeParam which represents metadata about a SQL statement parameter, including its name (if available) for both named parameters and positional parameters.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeParam = {\n    \"name\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Collation Functions in C for SQLite\nDESCRIPTION: This snippet shows the C function signatures for creating custom collations in SQLite. It demonstrates the use of function pointers and user data for comparison and destruction callbacks.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint sqlite3_create_collation(sqlite3 * db, const char * name, int eTextRep,\n                             void *pUserData,\n                             int (*xCompare)(void*,int,void const *,int,void const *));\n\nint sqlite3_create_collation_v2(sqlite3 * db, const char * name, int eTextRep,\n                                void *pUserData,\n                                int (*xCompare)(void*,int,void const *,int,void const *),\n                                void (*xDestroy)(void*));\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for libsql-server\nDESCRIPTION: A Docker Compose YAML configuration for running libsql-server locally with volume mounting for data persistence and port exposure.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  db:\n    image: ghcr.io/tursodatabase/libsql-server:latest\n    platform: linux/amd64\n    ports:\n      - \"8080:8080\"\n      - \"5001:5001\"\n    # environment:\n    #   - SQLD_NODE=primary\n    volumes:\n      - ./data/libsql:/var/lib/sqld\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for Closing Stored SQL in Hrana v2\nDESCRIPTION: Type definitions for CloseSqlReq and CloseSqlResp messages that allow deleting previously stored SQL text from the server, enabling ID reuse.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloseSqlReq = {\n    \"type\": \"close_sql\",\n    \"sql_id\": int32,\n}\n\ntype CloseSqlResp = {\n    \"type\": \"close_sql\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating table with ICU collation sequences in SQL\nDESCRIPTION: Shows how to use ICU collation sequences when creating a table in SQLite. This example creates a table with columns using different locale-specific collations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/icu/README.txt#2025-04-11_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE aust_turkish_penpals(\n  australian_penpal_name TEXT COLLATE australian,\n  turkish_penpal_name    TEXT COLLATE turkish\n);\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Statement Result Structure in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the StmtResult and Col types for representing the results of executing SQL statements, including column information, rows, and execution statistics.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype StmtResult = {\n    \"cols\": Array<Col>,\n    \"rows\": Array<Array<Value>>,\n    \"affected_row_count\": uint64,\n    \"last_insert_rowid\": string | null,\n    \"rows_read\": uint64,\n    \"rows_written\": uint64,\n    \"query_duration_ms\": double,\n}\n\ntype Col = {\n    \"name\": string | null,\n    \"decltype\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates for sqld Cluster (Python)\nDESCRIPTION: This Python script generates TLS certificates and keys required for setting up a sqld cluster, including a certificate authority, server, and client certificates.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython scripts/gen_certs.py\n```\n\n----------------------------------------\n\nTITLE: Defining Value Types for SQL Data in TypeScript\nDESCRIPTION: Describes the structure for various SQL data types including null, integer, float, text, and blob. Integers are represented as strings to avoid precision loss in JSON implementations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype Value =\n    | { \"type\": \"null\" }\n    | { \"type\": \"integer\", \"value\": string }\n    | { \"type\": \"float\", \"value\": number }\n    | { \"type\": \"text\", \"value\": string }\n    | { \"type\": \"blob\", \"base64\": string }\n```\n\n----------------------------------------\n\nTITLE: Example of Query with Named Bound Parameters in JSON\nDESCRIPTION: Demonstrates how to structure a query with named bound parameters. The query uses different prefixes for parameters, and the params object maps these to their values.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"q\": \"SELECT * FROM users WHERE name = :name AND age = &age AND height > @height AND address = $address\",\n    \"params\": {\n        \":name\": \"adhoc\",\n        \"age\" : \"18\",\n        \"@height\" : \"170\",\n        \"$address\" : \"very nice place\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Data Persistence with Named Volume\nDESCRIPTION: Command to run libsql-server with data persistence using a named Docker volume.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker run --name some-sqld -ti \\\n    -v sqld-data:/var/lib/sqld \\ # or create named volume\n    -e SQLD_NODE=primary \\\n    ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: Execute Statement Request and Response\nDESCRIPTION: Defines the structure for executing a single SQL statement, which has the same semantics as the execute request in Hrana.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecuteStreamReq = {\n    \"type\": \"execute\",\n    \"stmt\": Stmt,\n}\n\ntype ExecuteStreamResp = {\n    \"type\": \"execute\",\n    \"result\": StmtResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Temporary JSON Table with Indexes in SQLite\nDESCRIPTION: Creates a temporary table with a JSON TEXT column, populates it with complex JSON data using recursive CTEs, creates indexes on various JSON paths, and then updates the JSON content using json_replace, json_set, and json_remove functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/json-q1.txt#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TEMP TABLE t2(x JSON TEXT);\nWITH RECURSIVE\n  c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<25000),\n  array1(y) AS (\n    SELECT json_group_array(\n             json_object('x',x,'y',random(),'z',hex(randomblob(50)))\n           )\n      FROM c\n  ),\n  c2(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c2 WHERE n<5)\nINSERT INTO t2(x)\n  SELECT json_object('a',n,'b',n*2,'c',y,'d',3,'e',5,'f',6) FROM array1, c2;\nCREATE INDEX t2x1 ON t2(x->>'a');\nCREATE INDEX t2x2 ON t2(x->>'b');\nCREATE INDEX t2x3 ON t2(x->>'e');\nCREATE INDEX t2x4 ON t2(x->>'f');\nUPDATE t2 SET x=json_replace(x,'$.f',(x->>'f')+1);\nUPDATE t2 SET x=json_set(x,'$.e',(x->>'f')-1);\nUPDATE t2 SET x=json_remove(x,'$.d');\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Response Structure in TypeScript\nDESCRIPTION: Defines the structure of a batch response. It can be either an array of QueryResult objects or an Error.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchResponse = Array<QueryResult>|Error\n\ntype QueryResult = {\n    results: {\n        columns: Array<string>,\n        rows: Array<Array<Value>>,\n        rows_read: uint64,\n        rows_written: uint64,\n        query_duration_ms: double\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping an Existing C Struct Instance in JavaScript\nDESCRIPTION: Demonstrates how to create a JavaScript wrapper for an existing C struct instance without taking ownership of its memory. This is useful for interacting with shared struct pointers.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst m = new MyStruct( functionReturningASharedPtr() );\n// calling m.dispose() will _not_ free the wrapped C-side instance\n// but will trigger any ondispose handler.\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Structure in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the Batch and BatchStep types for representing a batch of SQL statements with conditional execution.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntype Batch = {\n    \"steps\": Array<BatchStep>,\n}\n\ntype BatchStep = {\n    \"condition\"?: BatchCond | null,\n    \"stmt\": Stmt,\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Data Persistence with Custom Directory\nDESCRIPTION: Command to run libsql-server with data persistence in a custom directory by setting the SQLD_DB_PATH environment variable.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker run --name some-sqld -ti \\\n    -v sqld-data:/data/sqld \\ # to mount data in different directory set SQLD_DB_PATH env var\n    -e SQLD_NODE=primary \\\n    -e SQLD_DB_PATH=/data/sqld \\\n    ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: Batch Execution Request and Response\nDESCRIPTION: Defines the structure for executing a batch of SQL statements, which has the same semantics as the batch request in Hrana.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchStreamReq = {\n    \"type\": \"batch\",\n    \"batch\": Batch,\n}\n\ntype BatchStreamResp = {\n    \"type\": \"batch\",\n    \"result\": BatchResult,\n}\n```\n\n----------------------------------------\n\nTITLE: API Declaration for sqlite3_user_authenticate in C\nDESCRIPTION: Function to authenticate a user with username and password credentials against a SQLite database connection that requires authentication.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/userauth/user-auth.txt#2025-04-11_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint sqlite3_user_authenticate(\n  sqlite3 *db,           /* The database connection */\n  const char *zUsername, /* Username */\n  const char *aPW,       /* Password or credentials */\n  int nPW                /* Number of bytes in aPW[] */\n);\n```\n\n----------------------------------------\n\nTITLE: Launching a Primary libsql-server Instance with Docker\nDESCRIPTION: Command to run a primary libsql-server instance in Docker, exposing port 8080 and setting the node type to primary.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run --name some-sqld -p 8080:8080 -ti \\\n    -e SQLD_NODE=primary \\\n    ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: Performing and Visualizing Polygon Overlap Query in SQL\nDESCRIPTION: Executes and visualizes a spatial overlap query using the geopoly_overlap function. This demonstrates how to find polygons that overlap with a query polygon and generates an SVG visualization of the results.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Overlap Query</h1>'\n.print '<pre>'\n.print 'SELECT *'\n.print '  FROM geo1, querypoly'\n.print ' WHERE geopoly_overlap(_shape, poly);'\n.print \nEXPLAIN QUERY PLAN\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE geopoly_overlap(_shape, poly);\n.print '</pre>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE geopoly_overlap(_shape, poly);\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Binding a Struct in JavaScript\nDESCRIPTION: Demonstrates how to use the binder to create a constructor for a C struct. The MyBinder function takes a struct description and returns a constructor that can be used to instantiate struct objects.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStruct = MyBinder(myStructDescription);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Struct Instance in JavaScript\nDESCRIPTION: Shows how to create a new struct instance, access and modify its members, and properly dispose of it to free WASM heap memory. Includes error handling with try/finally to ensure cleanup.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst my = new MyStruct();\ntry {\n  console.log(my.member1, my.member2, my.member3);\n  my.member1 = 12;\n  assert(12 === my.member1);\n  /* ^^^ it may seem silly to test that, but recall that assigning that\n     property encodes the value into a byte array in heap memory, not\n     a normal JS property. Similarly, fetching the property decodes it\n     from the byte array. */\n  // Pass the struct to C code which takes a MyStruct pointer:\n  aCFunction( my.pointer );\n} finally {\n  my.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Sequence Execution Request and Response\nDESCRIPTION: Defines the structure for executing a sequence of SQL statements, which has the same semantics as the sequence request in Hrana.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype SequenceStreamReq = {\n    \"type\": \"sequence\",\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n}\n\ntype SequenceStreamResp = {\n    \"type\": \"sequence\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClientMsg and ServerMsg Types in TypeScript\nDESCRIPTION: Defines the possible message types that can be sent by clients and servers in the Hrana protocol. ClientMsg includes HelloMsg and RequestMsg, while ServerMsg includes HelloOkMsg, HelloErrorMsg, ResponseOkMsg, and ResponseErrorMsg.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ClientMsg =\n    | HelloMsg\n    | RequestMsg\n\ntype ServerMsg =\n    | HelloOkMsg\n    | HelloErrorMsg\n    | ResponseOkMsg\n    | ResponseErrorMsg\n```\n\n----------------------------------------\n\nTITLE: Running Sqld with Docker Image\nDESCRIPTION: Command to run the latest sqld Docker image from GitHub Container Registry, mapping port 8080 to allow local connections to the database server.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 -d ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAssembly Function in Rust\nDESCRIPTION: Example of creating a decrypt function using libsql_bindgen macro to handle type conversions between libSQL and WebAssembly.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#[libsql_bindgen::libsql_bindgen]\npub fn decrypt(data: String, key: String) -> String {\n  use magic_crypt::MagicCryptTrait;\n  let mc = magic_crypt::new_magic_crypt!(key, 256);\n  mc.decrypt_base64_to_string(data)\n      .unwrap_or(\"[ACCESS DENIED]\".to_owned())\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Statement Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for executing a single SQL statement on a stream. Includes request with stream_id and statement, and response with result structure.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecuteReq = {\n    \"type\": \"execute\",\n    \"stream_id\": int32,\n    \"stmt\": Stmt,\n}\n\ntype ExecuteResp = {\n    \"type\": \"execute\",\n    \"result\": StmtResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Bottomless Local Tests\nDESCRIPTION: Shell commands to set up the environment and run local tests for Bottomless WAL with a local S3-compatible server.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd test/\nexport LIBSQL_BOTTOMLESS_ENDPOINT=http://localhost:9000\n./smoke_test.sh\n./restore_test.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Endpoint for Bottomless WAL\nDESCRIPTION: Environment variable configuration to override the default S3 endpoint used by the Bottomless WAL extension.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport LIBSQL_BOTTOMLESS_ENDPOINT='http://localhost:9042'\n```\n\n----------------------------------------\n\nTITLE: Defining Request and Response Types in TypeScript\nDESCRIPTION: Enumerates the various types of requests and responses that can be sent between client and server. Includes operations like opening/closing streams, executing queries, managing cursors, and other database-related actions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Request =\n    | OpenStreamReq\n    | CloseStreamReq\n    | ExecuteReq\n    | BatchReq\n    | OpenCursorReq\n    | CloseCursorReq\n    | FetchCursorReq\n    | SequenceReq\n    | DescribeReq\n    | StoreSqlReq\n    | CloseSqlReq\n    | GetAutocommitReq\n\ntype Response =\n    | OpenStreamResp\n    | CloseStreamResp\n    | ExecuteResp\n    | BatchResp\n    | OpenCursorResp\n    | CloseCursorResp\n    | FetchCursorResp\n    | SequenceResp\n    | DescribeResp\n    | StoreSqlReq\n    | CloseSqlReq\n    | GetAutocommitResp\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed sqld on Fly.io (Console)\nDESCRIPTION: These curl commands demonstrate how to interact with a deployed sqld instance on Fly.io, creating a table, inserting data, and querying results.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncurl -X POST -d '{\"statements\": [\"create table testme(a,b,c)\"]}' $YOUR_APP.fly.dev\ncurl -X POST -d '{\"statements\": [\"insert into testme values(1,2,3)\"]}' $YOUR_APP.fly.dev\ncurl -X POST -d '{\"statements\": [\"select * from testme\"]}' $YOUR_APP.fly.dev\n```\n\n----------------------------------------\n\nTITLE: Creating a WebAssembly-Based Fibonacci Function in SQL\nDESCRIPTION: Example of creating a user-defined Fibonacci function using WebAssembly text format (WAT) in SQL. The function takes and returns an integer value representing a position in the Fibonacci sequence.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION IF NOT EXISTS fib LANGUAGE wasm AS '\n(module \n (type (;0;) (func (param i64) (result i64))) \n (func $fib (type 0) (param i64) (result i64) \n (local i64) \n i64.const 0 \n local.set 1 \n block ;; label = @1 \n local.get 0 \n i64.const 2 \n i64.lt_u \n br_if 0 (;@1;) \n i64.const 0 \n local.set 1 \n loop ;; label = @2 \n local.get 0 \n i64.const -1 \n i64.add \n call $fib \n local.get 1 \n i64.add \n local.set 1 \n local.get 0 \n i64.const -2 \n i64.add \n local.tee 0 \n i64.const 1 \n i64.gt_u \n br_if 0 (;@2;) \n end \n end \n local.get 0 \n local.get 1 \n i64.add) \n (memory (;0;) 16) \n (global $__stack_pointer (mut i32) (i32.const 1048576)) \n (global (;1;) i32 (i32.const 1048576)) \n (global (;2;) i32 (i32.const 1048576)) \n (export \"memory\" (memory 0)) \n (export \"fib\" (func $fib)))\n';\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Shape Data Tables in SQLite\nDESCRIPTION: SQL script that sets up three temporary tables for a shape rendering system. It defines basic shape coordinates in the 'basis' table, transformation matrices with colors in the 'xform' table, and extensive positional offsets in the 'xyoff' table for placing shapes across a 1000x800 canvas.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n/* Test data.\n** Lots of shapes to be displayed over a 1000x800 canvas.\n*/\nCREATE TEMP TABLE basis(name TEXT, jshape TEXT);\nINSERT INTO basis(name,jshape) VALUES\n  ('box-20','[[0,0],[20,0],[20,20],[0,20],[0,0]]'),\n  ('house-70','[[0,0],[50,0],[50,50],[25,70],[0,50],[0,0]]'),\n  ('line-40','[[0,0],[40,0],[40,5],[0,5],[0,0]]'),\n  ('line-80','[[0,0],[80,0],[80,7],[0,7],[0,0]]'),\n  ('arrow-50','[[0,0],[25,25],[0,50],[15,25],[0,0]]'),\n  ('triangle-30','[[0,0],[30,0],[15,30],[0,0]]'),\n  ('angle-30','[[0,0],[30,0],[30,30],[26,30],[26,4],[0,4],[0,0]]'),\n  ('star-10','[[1,0],[5,2],[9,0],[7,4],[10,8],[7,7],[5,10],[3,7],[0,8],[3,4],[1,0]]');\nCREATE TEMP TABLE xform(A,B,C,D,clr);\nINSERT INTO xform(A,B,clr) VALUES\n  (1,0,'black'),\n  (0.707,0.707,'blue'),\n  (0.5,0.866,'red'),\n  (-0.866,0.5,'green');\nCREATE TEMP TABLE xyoff(id1,id2,xoff,yoff,PRIMARY KEY(id1,id2,xoff,yoff))\n  WITHOUT ROWID;\nINSERT INTO xyoff VALUES(1,1,811,659);\nINSERT INTO xyoff VALUES(1,1,235,550);\nINSERT INTO xyoff VALUES(1,1,481,620);\nINSERT INTO xyoff VALUES(1,1,106,494);\nINSERT INTO xyoff VALUES(1,1,487,106);\nINSERT INTO xyoff VALUES(1,1,817,595);\nINSERT INTO xyoff VALUES(1,1,240,504);\nINSERT INTO xyoff VALUES(1,1,806,457);\nINSERT INTO xyoff VALUES(1,1,608,107);\nINSERT INTO xyoff VALUES(1,1,768,662);\nINSERT INTO xyoff VALUES(1,2,808,528);\nINSERT INTO xyoff VALUES(1,2,768,528);\nINSERT INTO xyoff VALUES(1,2,771,171);\nINSERT INTO xyoff VALUES(1,2,275,671);\nINSERT INTO xyoff VALUES(1,2,326,336);\nINSERT INTO xyoff VALUES(1,2,690,688);\nINSERT INTO xyoff VALUES(1,2,597,239);\nINSERT INTO xyoff VALUES(1,2,317,528);\nINSERT INTO xyoff VALUES(1,2,366,223);\nINSERT INTO xyoff VALUES(1,2,621,154);\nINSERT INTO xyoff VALUES(1,3,829,469);\nINSERT INTO xyoff VALUES(1,3,794,322);\nINSERT INTO xyoff VALUES(1,3,358,387);\nINSERT INTO xyoff VALUES(1,3,184,444);\nINSERT INTO xyoff VALUES(1,3,729,500);\nINSERT INTO xyoff VALUES(1,3,333,523);\nINSERT INTO xyoff VALUES(1,3,117,595);\nINSERT INTO xyoff VALUES(1,3,496,201);\nINSERT INTO xyoff VALUES(1,3,818,601);\nINSERT INTO xyoff VALUES(1,3,541,343);\nINSERT INTO xyoff VALUES(1,4,603,248);\nINSERT INTO xyoff VALUES(1,4,761,649);\nINSERT INTO xyoff VALUES(1,4,611,181);\nINSERT INTO xyoff VALUES(1,4,607,233);\nINSERT INTO xyoff VALUES(1,4,860,206);\nINSERT INTO xyoff VALUES(1,4,310,231);\nINSERT INTO xyoff VALUES(1,4,727,539);\nINSERT INTO xyoff VALUES(1,4,660,661);\nINSERT INTO xyoff VALUES(1,4,403,133);\nINSERT INTO xyoff VALUES(1,4,619,331);\nINSERT INTO xyoff VALUES(2,1,712,578);\nINSERT INTO xyoff VALUES(2,1,567,313);\nINSERT INTO xyoff VALUES(2,1,231,423);\nINSERT INTO xyoff VALUES(2,1,490,175);\nINSERT INTO xyoff VALUES(2,1,898,353);\nINSERT INTO xyoff VALUES(2,1,589,483);\nINSERT INTO xyoff VALUES(2,1,188,462);\nINSERT INTO xyoff VALUES(2,1,720,106);\nINSERT INTO xyoff VALUES(2,1,793,380);\nINSERT INTO xyoff VALUES(2,1,154,396);\nINSERT INTO xyoff VALUES(2,2,324,218);\nINSERT INTO xyoff VALUES(2,2,120,327);\nINSERT INTO xyoff VALUES(2,2,655,133);\nINSERT INTO xyoff VALUES(2,2,516,603);\nINSERT INTO xyoff VALUES(2,2,529,572);\nINSERT INTO xyoff VALUES(2,2,481,212);\nINSERT INTO xyoff VALUES(2,2,802,107);\nINSERT INTO xyoff VALUES(2,2,234,509);\nINSERT INTO xyoff VALUES(2,2,501,269);\nINSERT INTO xyoff VALUES(2,2,349,553);\nINSERT INTO xyoff VALUES(2,3,495,685);\nINSERT INTO xyoff VALUES(2,3,897,372);\nINSERT INTO xyoff VALUES(2,3,350,681);\nINSERT INTO xyoff VALUES(2,3,832,257);\nINSERT INTO xyoff VALUES(2,3,778,149);\nINSERT INTO xyoff VALUES(2,3,683,426);\nINSERT INTO xyoff VALUES(2,3,693,217);\nINSERT INTO xyoff VALUES(2,3,746,317);\nINSERT INTO xyoff VALUES(2,3,805,369);\nINSERT INTO xyoff VALUES(2,3,336,585);\nINSERT INTO xyoff VALUES(2,4,890,255);\nINSERT INTO xyoff VALUES(2,4,556,565);\nINSERT INTO xyoff VALUES(2,4,865,555);\nINSERT INTO xyoff VALUES(2,4,230,293);\nINSERT INTO xyoff VALUES(2,4,247,251);\nINSERT INTO xyoff VALUES(2,4,730,563);\nINSERT INTO xyoff VALUES(2,4,318,282);\nINSERT INTO xyoff VALUES(2,4,220,431);\nINSERT INTO xyoff VALUES(2,4,828,336);\nINSERT INTO xyoff VALUES(2,4,278,525);\nINSERT INTO xyoff VALUES(3,1,324,656);\nINSERT INTO xyoff VALUES(3,1,625,362);\nINSERT INTO xyoff VALUES(3,1,155,570);\nINSERT INTO xyoff VALUES(3,1,267,433);\nINSERT INTO xyoff VALUES(3,1,599,121);\nINSERT INTO xyoff VALUES(3,1,873,498);\nINSERT INTO xyoff VALUES(3,1,789,520);\nINSERT INTO xyoff VALUES(3,1,656,378);\nINSERT INTO xyoff VALUES(3,1,831,601);\nINSERT INTO xyoff VALUES(3,1,256,471);\nINSERT INTO xyoff VALUES(3,2,332,258);\nINSERT INTO xyoff VALUES(3,2,305,463);\nINSERT INTO xyoff VALUES(3,2,796,341);\nINSERT INTO xyoff VALUES(3,2,830,229);\nINSERT INTO xyoff VALUES(3,2,413,271);\nINSERT INTO xyoff VALUES(3,2,269,140);\nINSERT INTO xyoff VALUES(3,2,628,441);\nINSERT INTO xyoff VALUES(3,2,747,643);\nINSERT INTO xyoff VALUES(3,2,584,435);\nINSERT INTO xyoff VALUES(3,2,784,314);\nINSERT INTO xyoff VALUES(3,3,722,233);\nINSERT INTO xyoff VALUES(3,3,815,421);\nINSERT INTO xyoff VALUES(3,3,401,267);\nINSERT INTO xyoff VALUES(3,3,451,650);\nINSERT INTO xyoff VALUES(3,3,329,485);\nINSERT INTO xyoff VALUES(3,3,878,370);\nINSERT INTO xyoff VALUES(3,3,162,616);\nINSERT INTO xyoff VALUES(3,3,844,183);\nINSERT INTO xyoff VALUES(3,3,161,216);\nINSERT INTO xyoff VALUES(3,3,176,676);\nINSERT INTO xyoff VALUES(3,4,780,128);\nINSERT INTO xyoff VALUES(3,4,566,121);\nINSERT INTO xyoff VALUES(3,4,646,120);\nINSERT INTO xyoff VALUES(3,4,223,557);\nINSERT INTO xyoff VALUES(3,4,251,117);\nINSERT INTO xyoff VALUES(3,4,139,209);\nINSERT INTO xyoff VALUES(3,4,813,597);\nINSERT INTO xyoff VALUES(3,4,454,538);\nINSERT INTO xyoff VALUES(3,4,616,198);\nINSERT INTO xyoff VALUES(3,4,210,159);\nINSERT INTO xyoff VALUES(4,1,208,415);\nINSERT INTO xyoff VALUES(4,1,326,665);\nINSERT INTO xyoff VALUES(4,1,612,133);\nINSERT INTO xyoff VALUES(4,1,537,513);\nINSERT INTO xyoff VALUES(4,1,638,438);\nINSERT INTO xyoff VALUES(4,1,808,269);\nINSERT INTO xyoff VALUES(4,1,552,121);\nINSERT INTO xyoff VALUES(4,1,100,189);\nINSERT INTO xyoff VALUES(4,1,643,664);\nINSERT INTO xyoff VALUES(4,1,726,378);\nINSERT INTO xyoff VALUES(4,2,478,409);\nINSERT INTO xyoff VALUES(4,2,497,507);\nINSERT INTO xyoff VALUES(4,2,233,148);\nINSERT INTO xyoff VALUES(4,2,587,237);\nINSERT INTO xyoff VALUES(4,2,604,166);\nINSERT INTO xyoff VALUES(4,2,165,455);\nINSERT INTO xyoff VALUES(4,2,320,258);\nINSERT INTO xyoff VALUES(4,2,353,496);\nINSERT INTO xyoff VALUES(4,2,347,495);\nINSERT INTO xyoff VALUES(4,2,166,622);\nINSERT INTO xyoff VALUES(4,3,461,332);\nINSERT INTO xyoff VALUES(4,3,685,278);\nINSERT INTO xyoff VALUES(4,3,427,594);\nINSERT INTO xyoff VALUES(4,3,467,346);\nINSERT INTO xyoff VALUES(4,3,125,548);\nINSERT INTO xyoff VALUES(4,3,597,680);\nINSERT INTO xyoff VALUES(4,3,820,445);\nINSERT INTO xyoff VALUES(4,3,144,330);\nINSERT INTO xyoff VALUES(4,3,557,434);\nINSERT INTO xyoff VALUES(4,3,254,315);\nINSERT INTO xyoff VALUES(4,4,157,339);\nINSERT INTO xyoff VALUES(4,4,249,220);\nINSERT INTO xyoff VALUES(4,4,391,323);\nINSERT INTO xyoff VALUES(4,4,589,429);\nINSERT INTO xyoff VALUES(4,4,859,592);\nINSERT INTO xyoff VALUES(4,4,337,680);\nINSERT INTO xyoff VALUES(4,4,410,288);\nINSERT INTO xyoff VALUES(4,4,636,596);\nINSERT INTO xyoff VALUES(4,4,734,433);\nINSERT INTO xyoff VALUES(4,4,559,549);\nINSERT INTO xyoff VALUES(5,1,549,607);\nINSERT INTO xyoff VALUES(5,1,584,498);\nINSERT INTO xyoff VALUES(5,1,699,116);\nINSERT INTO xyoff VALUES(5,1,525,524);\nINSERT INTO xyoff VALUES(5,1,304,667);\nINSERT INTO xyoff VALUES(5,1,302,232);\nINSERT INTO xyoff VALUES(5,1,403,149);\nINSERT INTO xyoff VALUES(5,1,824,403);\nINSERT INTO xyoff VALUES(5,1,697,203);\nINSERT INTO xyoff VALUES(5,1,293,689);\nINSERT INTO xyoff VALUES(5,2,199,275);\nINSERT INTO xyoff VALUES(5,2,395,393);\nINSERT INTO xyoff VALUES(5,2,657,642);\nINSERT INTO xyoff VALUES(5,2,200,655);\nINSERT INTO xyoff VALUES(5,2,882,234);\nINSERT INTO xyoff VALUES(5,2,483,565);\nINSERT INTO xyoff VALUES(5,2,755,640);\nINSERT INTO xyoff VALUES(5,2,810,305);\nINSERT INTO xyoff VALUES(5,2,731,655);\nINSERT INTO xyoff VALUES(5,2,466,690);\nINSERT INTO xyoff VALUES(5,3,563,584);\nINSERT INTO xyoff VALUES(5,3,491,117);\nINSERT INTO xyoff VALUES(5,3,779,292);\nINSERT INTO xyoff VALUES(5,3,375,637);\nINSERT INTO xyoff VALUES(5,3,253,553);\nINSERT INTO xyoff VALUES(5,3,797,514);\nINSERT INTO xyoff VALUES(5,3,229,480);\nINSERT INTO xyoff VALUES(5,3,257,194);\nINSERT INTO xyoff VALUES(5,3,449,555);\nINSERT INTO xyoff VALUES(5,3,849,630);\nINSERT INTO xyoff VALUES(5,4,329,286);\nINSERT INTO xyoff VALUES(5,4,640,197);\nINSERT INTO xyoff VALUES(5,4,104,150);\nINSERT INTO xyoff VALUES(5,4,438,272);\nINSERT INTO xyoff VALUES(5,4,773,226);\nINSERT INTO xyoff VALUES(5,4,441,650);\nINSERT INTO xyoff VALUES(5,4,242,340);\nINSERT INTO xyoff VALUES(5,4,301,435);\nINSERT INTO xyoff VALUES(5,4,171,397);\nINSERT INTO xyoff VALUES(5,4,541,619);\nINSERT INTO xyoff VALUES(6,1,651,301);\nINSERT INTO xyoff VALUES(6,1,637,137);\nINSERT INTO xyoff VALUES(6,1,765,643);\nINSERT INTO xyoff VALUES(6,1,173,296);\nINSERT INTO xyoff VALUES(6,1,263,192);\nINSERT INTO xyoff VALUES(6,1,791,302);\nINSERT INTO xyoff VALUES(6,1,860,601);\nINSERT INTO xyoff VALUES(6,1,780,445);\nINSERT INTO xyoff VALUES(6,1,462,214);\nINSERT INTO xyoff VALUES(6,1,802,207);\nINSERT INTO xyoff VALUES(6,2,811,685);\nINSERT INTO xyoff VALUES(6,2,533,531);\nINSERT INTO xyoff VALUES(6,2,390,614);\nINSERT INTO xyoff VALUES(6,2,260,580);\nINSERT INTO xyoff VALUES(6,2,116,377);\nINSERT INTO xyoff VALUES(6,2,860,458);\nINSERT INTO xyoff VALUES(6,2,438,590);\nINSERT INTO xyoff VALUES(6,2,604,562);\nINSERT INTO xyoff VALUES(6,2,241,242);\nINSERT INTO xyoff VALUES(6,2,667,298);\nINSERT INTO xyoff VALUES(6,3,787,698);\nINSERT INTO xyoff VALUES(6,3,868,521);\nINSERT INTO xyoff VALUES(6,3,412,587);\nINSERT INTO xyoff VALUES(6,3,640,131);\nINSERT INTO xyoff VALUES(6,3,748,410);\nINSERT INTO xyoff VALUES(6,3,257,244);\nINSERT INTO xyoff VALUES(6,3,411,195);\nINSERT INTO xyoff VALUES(6,3,464,356);\nINSERT INTO xyoff VALUES(6,3,157,339);\nINSERT INTO xyoff VALUES(6,3,434,505);\nINSERT INTO xyoff VALUES(6,4,480,671);\nINSERT INTO xyoff VALUES(6,4,519,228);\nINSERT INTO xyoff VALUES(6,4,404,513);\n```\n\n----------------------------------------\n\nTITLE: Building libSQL API with Cargo\nDESCRIPTION: Uses Cargo, the Rust package manager and build system, to compile the libSQL API project.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql/DEVELOPING.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: API Declaration for sqlite3_user_delete in C\nDESCRIPTION: Function to delete a user from the authentication system. Only admins can delete users, and the currently logged-in user cannot be deleted to ensure there's always an admin user.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/userauth/user-auth.txt#2025-04-11_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint sqlite3_user_delete(\n  sqlite3 *db,           /* Database connection */\n  const char *zUsername  /* Username to remove */\n);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Read Operations in sqld\nDESCRIPTION: This diagram illustrates the sequence of events for read operations in sqld, showing interactions between the Client, Replica, and Primary server. It demonstrates how SELECT queries are handled and how replicas update their WAL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DESIGN.md#2025-04-11_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant Client\n    participant Replica\n    participant Primary\n    Client->>Replica: SQL SELECT\n    Replica->>Client: SQL result set\n    Replica->>Primary: Request WAL updates\n    Primary->>Replica: WAL entries\n```\n\n----------------------------------------\n\nTITLE: Dropping a WebAssembly-Based User-Defined Function in SQL\nDESCRIPTION: Example of how to remove a previously created WebAssembly-based user-defined function from the database.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION IF EXISTS fib;\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Value Types in TypeScript\nDESCRIPTION: Defines the TypeScript representation of SQLite values including null, integer, float, text, and blob types. Integer values are represented as strings to avoid precision loss, and blob values are base64-encoded.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype Value =\n    | { \"type\": \"null\" }\n    | { \"type\": \"integer\", \"value\": string }\n    | { \"type\": \"float\", \"value\": number }\n    | { \"type\": \"text\", \"value\": string }\n    | { \"type\": \"blob\", \"base64\": string }\n```\n\n----------------------------------------\n\nTITLE: Querying with language-specific lower() function in SQL\nDESCRIPTION: Shows how to use the ICU-enhanced lower() function with language-specific case mapping. The second argument specifies the locale for language-specific behavior.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/icu/README.txt#2025-04-11_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nlower('I', 'en_us') -> 'i'\nlower('I', 'tr_tr') -> 'ı' (small dotless i)\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP API v2 Support Endpoint\nDESCRIPTION: Demonstrates how to check if the server supports version 2 of the HTTP API by sending a GET request to the /v2 endpoint.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGET /v2\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database with Tables and Views in SQLite\nDESCRIPTION: SQL script that generates a test database containing multiple tables with INTEGER, TEXT, and NULL values. Creates various views demonstrating different SQL operations including JOINs, UNIONs, recursive queries, and aggregations. The script also includes indexes and constraints like PRIMARY KEY and UNIQUE.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/optfuzz-db01.txt#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n.open -new testdb01.db\nPRAGMA page_size=512;\nBEGIN;\nCREATE TABLE t1(a INTEGER PRIMARY KEY, b INT, c INT, d INT, e INT);\nWITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<50)\nINSERT INTO t1(a,b,c,d,e) SELECT x,abs(random()%51),\n   abs(random()%100), abs(random()%51), abs(random()%100) FROM c;\nCREATE TABLE t2(a INT, b INT, c INT,d INT,e INT,PRIMARY KEY(b,a))WITHOUT ROWID;\nINSERT INTO t2 SELECT * FROM t1;\nCREATE TABLE t3(a,b,c,d,e);\nINSERT INTO t3 SELECT a,b,c,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT null,b,c,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,null,c,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,b,null,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,b,c,null,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,b,c,d,null FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT null,null,null,null,null FROM t1 LIMIT 5;\nCREATE INDEX t3x1 ON t3(a,b,c,d,e);\nCREATE TABLE t4(a INT UNIQUE NOT NULL, b INT UNIQUE NOT NULL,c,d,e);\nINSERT OR IGNORE INTO t4 SELECT a,b,c,d,e FROM t3;\nCREATE TABLE t5(a INTEGER PRIMARY KEY, b TEXT UNIQUE,c,d,e);\nINSERT INTO t5(b) VALUES\n   ('truth'),\n   ('works'),\n   ('offer'),\n   ('can'),\n   ('anger'),\n   ('wisdom'),\n   ('send'),\n   ('though'),\n   ('save'),\n   ('between'),\n   ('some'),\n   ('wine'),\n   ('ark'),\n   ('smote'),\n   ('therein'),\n   ('shew'),\n   ('morning'),\n   ('dwelt'),\n   ('begat'),\n   ('nothing'),\n   ('war'),\n   ('above'),\n   ('known'),\n   ('sacrifice'),\n   ('tell'),\n   ('departed'),\n   ('thyself'),\n   ('places'),\n   ('bear'),\n   ('part'),\n   ('while'),\n   ('gone'),\n   ('cubits'),\n   ('walk'),\n   ('long'),\n   ('near'),\n   ('serve'),\n   ('fruit'),\n   ('doth'),\n   ('poor'),\n   ('ways'),\n   ('child'),\n   ('temple'),\n   ('angel'),\n   ('inhabitants'),\n   ('oil'),\n   ('died'),\n   ('six'),\n   ('tree'),\n   ('wrath');\nUPDATE t1 SET e=(SELECT b FROM t5 WHERE t5.a=(t1.e%51));\nUPDATE t5 SET (c,d,e) = \n   (SELECT c,d,e FROM t1 WHERE t1.a=abs(t5.a+random()/100)%50+1);\nUPDATE t2 SET e=(SELECT b FROM t5 WHERE t5.a=(t2.e%51));\nUPDATE t3 SET e=(SELECT b FROM t5 WHERE t5.a=t3.e);\nCREATE INDEX t1e ON t1(e);\nCREATE INDEX t2ed ON t2(e,d);\nCREATE VIEW v00(a,b,c,d,e) AS SELECT 1,1,1,1,'one';\nCREATE VIEW v10(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t1 WHERE a<>25;\nCREATE VIEW v20(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t2 WHERE a<>25;\nCREATE VIEW v30(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t3 WHERE a<>25;\nCREATE VIEW v40(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t4 WHERE a<>25;\nCREATE VIEW v50(a,b) AS SELECT a,b FROM t5 WHERE a<>25;\nCREATE VIEW v11(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t1 ORDER BY b LIMIT 10;\nCREATE VIEW v21(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t2 ORDER BY b LIMIT 10;\nCREATE VIEW v31(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t3 ORDER BY b LIMIT 10;\nCREATE VIEW v41(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t4 ORDER BY b LIMIT 10;\nCREATE VIEW v51(a,b) AS SELECT a,b FROM t5 ORDER BY b LIMIT 10;\nCREATE VIEW v12(a,b,c,d,e) AS\n  SELECT sum(a), avg(b), count(*), min(d), e FROM t1 GROUP BY 5;\nCREATE VIEW v22(a,b,c,d,e) AS\n  SELECT sum(a), avg(b), count(*), min(d), e FROM t2 GROUP BY 5\n    HAVING count(*)>1 ORDER BY 3, 1;\nCREATE VIEW v32(a,b,c,d,e) AS\n  SELECT sum(a), avg(b), count(*), min(d), e FROM t3 GROUP BY 5\n    HAVING count(*)>1 ORDER BY 3, 1;\nCREATE VIEW v42(a,b,c,d,e) AS\n  SELECT sum(a), avg(b), count(*), min(d), e FROM t4 GROUP BY 5\n    HAVING min(d)<30 ORDER BY 3, 1;\nCREATE VIEW v52(a,b,c,d,e) AS\n  SELECT count(*), min(b), substr(b,1,1), min(a), max(a) FROM t5\n   GROUP BY 3 ORDER BY 1;\n\nCREATE VIEW v13(a,b,c,d,e) AS\n  SELECT a,b,c,d,e FROM t1\n  UNION SELECT a,b,c,d,e FROM t2\n  UNION SELECT a,b,c,d,e FROM t3;\nCREATE VIEW v23(a,b,c,d,e) AS\n  SELECT a,b,c,d,e FROM t1\n  EXCEPT SELECT a,b,c,d,e FROM t1 WHERE b<25;\n\nCREATE VIEW v60(a,b,c,d,e) AS\n  SELECT t1.a,t2.b,t1.c,t2.d,t1.e\n    FROM t1 LEFT JOIN t2 ON (t1.a=t2.b);\nCREATE VIEW v61(a,b,c,d,e) AS\n  SELECT t2.a,t3.b,t2.c,t3.d,t2.e\n    FROM t2 LEFT JOIN t3 ON (t2.a=t3.a);\nCREATE VIEW v62(a,b,c,d,e) AS\n  SELECT t1.a,t2.b,t3.c,t4.d,t5.b\n    FROM t1 JOIN t2 ON (t1.a=t2.b)\n            JOIN t3 ON (t1.a=t3.a)\n            JOIN t4 ON (t4.b=t3.b)\n            LEFT JOIN t5 ON (t5.a=t1.c);\nCREATE VIEW v70(a,b,c,d,e) AS\n  WITH RECURSIVE c0(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c0 WHERE x<9)\n  SELECT x, b, c, d, e FROM c0 JOIN t1 ON (t1.a=50-c0.x);\nCOMMIT;\nVACUUM;\n.shell bin2c testdb01.db\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume for Sqld Data\nDESCRIPTION: Command to create a Docker volume named 'sqld-data' that will be used to persist database files when running sqld in a container.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create sqld-data\n```\n\n----------------------------------------\n\nTITLE: API Declaration for sqlite3_user_change in C\nDESCRIPTION: Function to modify an existing user's password or admin privileges. Users can change their own passwords, but only admins can change other users' credentials or admin status.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/userauth/user-auth.txt#2025-04-11_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint sqlite3_user_change(\n  sqlite3 *db,           /* Database connection */\n  const char *zUsername, /* Username to change */\n  const void *aPW,       /* Modified password or credentials */\n  int nPW,               /* Number of bytes in aPW[] */\n  int isAdmin            /* Modified admin privilege for the user */\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Query Request Body Structure in TypeScript\nDESCRIPTION: Defines the structure of the query request body. It includes an array of statements, which can be either strings or ParamQuery objects.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryBody = {\n    statements: Array<Query>\n}\n\ntype Query = string | ParamQuery;\ntype ParamQuery = { q: string, params: undefined | Record<string, Value> | Array<Value> }\n```\n\n----------------------------------------\n\nTITLE: Statement Description Request and Response\nDESCRIPTION: Defines the structure for describing an SQL statement without executing it, which has the same semantics as the describe request in Hrana.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeStreamReq = {\n    \"type\": \"describe\",\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n}\n\ntype DescribeStreamResp = {\n    \"type\": \"describe\",\n    \"result\": DescribeResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Batch of SQL Statements with HTTP API v1\nDESCRIPTION: The batch endpoint receives multiple SQL statements as a batch and returns the result of executing all statements. It uses the Batch and BatchResult structures from the Hrana protocol, with semantics matching the batch request in Hrana.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V1_SPEC.md#2025-04-11_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/batch\n\n-> {\n    \"batch\": Batch,\n}\n\n<- {\n    \"result\": BatchResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Write Operations in sqld\nDESCRIPTION: This diagram shows the sequence of events for write operations in sqld, demonstrating the flow from Client to Primary server and potentially to mvSQLite. It illustrates how INSERT statements are processed.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DESIGN.md#2025-04-11_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant Client\n    participant Primary\n    participant mvSQLite\n    Client->>Primary: SQL INSERT\n    Server->>mvSQLite: WAL\n```\n\n----------------------------------------\n\nTITLE: Generating Regular Polygons with Different Side Counts in SQL\nDESCRIPTION: This SQL query generates and visualizes regular polygons with varying numbers of sides using the geopoly_regular function. It demonstrates how to create polygons with 3 to 30 sides and assign different colors to each.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n.print '<h1>Regular Polygons</h1>'\n.print '<svg width=\"1000\" height=\"200\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(geopoly_regular(100,100,40,3),'style=\"fill:none;stroke:red;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(200,100,40,4),'style=\"fill:none;stroke:orange;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(300,100,40,5),'style=\"fill:none;stroke:green;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(400,100,40,6),'style=\"fill:none;stroke:blue;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(500,100,40,7),'style=\"fill:none;stroke:purple;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(600,100,40,8),'style=\"fill:none;stroke:red;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(700,100,40,10),'style=\"fill:none;stroke:orange;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(800,100,40,20),'style=\"fill:none;stroke:green;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(900,100,40,30),'style=\"fill:none;stroke:blue;stroke-width:1\"');\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Close Hooks in C with libSQL\nDESCRIPTION: Function signature for libsql_close_hook that allows attaching a callback function to be executed before a database connection is closed. This enables proper cleanup of resources like cached prepared statements.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid *libsql_close_hook(\n  sqlite3 *db,              /* Attach the hook to this connection */\n  void(*xCallback)(         /* Callback function */\n    void*,sqlite3*),\n  void *pArg                /* First callback argument */\n);\n```\n\n----------------------------------------\n\nTITLE: Virtual Table Callback Implementation\nDESCRIPTION: Example of implementing xPreparedSql callback for virtual tables in C.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nstatic int helloPreparedSql(sqlite3_vtab_cursor *cur, const char *sql) {\n    printf(\"Prepared SQL: %s\\n\", sql);\n    return SQLITE_OK;\n}\n\nstatic sqlite3_module helloModule = {\n    .iVersion     = 700,\n    .xCreate      = helloCreate,\n    .xConnect     = helloConnect,\n    // ...\n    .xPreparedSql = helloPreparedSql,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with RANDOM ROWID in SQL\nDESCRIPTION: Example of creating a table with the RANDOM ROWID option to generate pseudorandom rowid values instead of sequential ones.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE shopping_list(item text, quantity int) RANDOM ROWID;\n```\n\n----------------------------------------\n\nTITLE: Performing and Visualizing Polygon Within Query in SQL\nDESCRIPTION: Executes and visualizes a spatial 'within' query using the geopoly_within function. This demonstrates how to find polygons that are completely contained within a query polygon and generates an SVG visualization of the results.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Within Query</h1>'\n.print '<pre>'\n.print 'SELECT *'\n.print '  FROM geo1, querypoly'\n.print ' WHERE geopoly_within(_shape, poly);'\n.print \nEXPLAIN QUERY PLAN\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE geopoly_within(_shape, poly);\n.print '</pre>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE geopoly_within(_shape, poly);\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Defining Execute Request and Response Types in TypeScript\nDESCRIPTION: Defines the structure for execute requests and responses. The request includes a stream ID and statement details, while the response contains the execution result.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecuteReq = {\n    \"type\": \"execute\",\n    \"stream_id\": int32,\n    \"stmt\": Stmt,\n}\n\ntype ExecuteResp = {\n    \"type\": \"execute\",\n    \"result\": StmtResult,\n}\n```\n\n----------------------------------------\n\nTITLE: API Declaration for sqlite3_user_add in C\nDESCRIPTION: Function to add a new user to the authentication system. When called on a non-auth database with isAdmin=true, it converts the database to require authentication.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/userauth/user-auth.txt#2025-04-11_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint sqlite3_user_add(\n  sqlite3 *db,           /* Database connection */\n  const char *zUsername, /* Username to be added */\n  const char *aPW,       /* Password or credentials */\n  int nPW,               /* Number of bytes in aPW[] */\n  int isAdmin            /* True to give new user admin privilege */\n);\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Routes for SQLD API\nDESCRIPTION: Specifies the HTTP routes for queries, health check, and version information in the SQLD API.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /\n\nGET /health\n\nGET /version\n```\n\n----------------------------------------\n\nTITLE: Building SQLite3 JNI Bindings\nDESCRIPTION: Console commands for building the SQLite3 JNI bindings, showing required environment setup and make commands for compilation, testing and cleanup.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export JAVA_HOME=/path/to/jdk/root\n$ make\n$ make test\n$ make clean\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Result Structure in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the BatchResult type for representing the results of executing a batch of SQL statements, including individual step results and errors.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchResult = {\n    \"step_results\": Array<StmtResult | null>,\n    \"step_errors\": Array<Error | null>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Primary Key in SQL\nDESCRIPTION: Example of creating a table with a primary key in libSQL, which is necessary for foreign key relationships.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (id INT PRIMARY KEY);\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual GeoPolygon Table in SQL\nDESCRIPTION: Creates a virtual table using the geopoly extension and populates it with transformed polygon data. The data is generated by transforming shapes from the basis table using coordinates from the xyoff table.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n/* Create the geopoly object from test data above */\nCREATE VIRTUAL TABLE geo1 USING geopoly(type,clr);\nINSERT INTO geo1(_shape,type,clr)\n  SELECT geopoly_xform(jshape,A,B,-B,A,xoff,yoff), basis.name, xform.clr\n    FROM basis, xform, xyoff\n   WHERE xyoff.id1=basis.rowid AND xyoff.id2=xform.rowid;\n```\n\n----------------------------------------\n\nTITLE: Batch Execution Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for executing multiple SQL statements in a batch. Includes request with stream_id and batch, and response with batch result.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchReq = {\n    \"type\": \"batch\",\n    \"stream_id\": int32,\n    \"batch\": Batch,\n}\n\ntype BatchResp = {\n    \"type\": \"batch\",\n    \"result\": BatchResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Request and Response Type Definitions\nDESCRIPTION: Type definitions for the different kinds of requests and responses supported by the protocol, including stream operations and execution requests.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Request =\n    | OpenStreamReq\n    | CloseStreamReq\n    | ExecuteReq\n    | BatchReq\n\ntype Response =\n    | OpenStreamResp\n    | CloseStreamResp\n    | ExecuteResp\n    | BatchResp\n```\n\n----------------------------------------\n\nTITLE: Running libsql-server on Apple Silicon with Docker\nDESCRIPTION: Command to run libsql-server on Apple Silicon hardware by specifying the linux/amd64 platform for compatibility.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker run --name some-sqld  -p 8080:8080 -ti \\\n    -e SQLD_NODE=primary \\\n    --platform linux/amd64 \\\n    ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: Deploying sqld with Docker (Console)\nDESCRIPTION: This command pulls the official Docker image for sqld, which can be used for deploying sqld servers in containerized environments.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker pull ghcr.io/libsql/sqld:main\n```\n\n----------------------------------------\n\nTITLE: Loading ICU collation sequence in SQL\nDESCRIPTION: Demonstrates how to register an ICU collation sequence with SQLite using the icu_load_collation() function. This allows for locale-specific sorting rules in SQLite operations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/icu/README.txt#2025-04-11_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT icu_load_collation('tr_TR', 'turkish');\n\nSELECT icu_load_collation('en_AU', 'australian');\n```\n\n----------------------------------------\n\nTITLE: Building Sqld Docker Image from Source\nDESCRIPTION: Command to build a Docker image for sqld from the source code. Tags the image as 'libsql/sqld:latest' for local use.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t libsql/sqld:latest .\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Parameter Binding in SQLite\nDESCRIPTION: This snippet sets up the SQLite environment and queries JSON data using a parameterized label. It selects the rowid and a specific JSON field value from the 'data1' table where the field is not null.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/jsonb-q1.txt#2025-04-11_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n.mode qbox\n.timer on\n.param set $label 'q87'\nSELECT rowid, x->>$label FROM data1 WHERE x->>$label IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Query Polygon in SQL\nDESCRIPTION: Creates a temporary table to store a query polygon defined in JSON format. This polygon will be used to perform spatial queries against the previously created geo1 table.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Query polygon */\nCREATE TEMP TABLE querypoly(poly JSON, clr TEXT);\nINSERT INTO querypoly(clr, poly) VALUES\n  ('orange', '[[300,300],[400,350],[500,250],[480,500],[400,480],[300,550],[280,450],[320,400],[280,350],[300,300]]');\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Data in SQLite\nDESCRIPTION: This snippet showcases three different JSON update operations: replacing a value, setting a new value based on an existing one, and removing a key-value pair from the JSON object stored in the 't2' table.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/jsonb-q1.txt#2025-04-11_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE t2 SET x=jsonb_replace(x,'$.f',(x->>'f')+1);\nUPDATE t2 SET x=jsonb_set(x,'$.e',(x->>'f')-1);\nUPDATE t2 SET x=jsonb_remove(x,'$.d');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table in SQL\nDESCRIPTION: Creating a simple table with two columns that will be modified with various constraints later.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t(id, v);\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Parameter Binding in SQLite\nDESCRIPTION: Sets up query mode and timer, defines a parameter called $label with value 'q87', and queries JSON data from the data1 table where the specified JSON path is not null.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/json-q1.txt#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n.mode qbox\n.timer on\n.param set $label 'q87'\nSELECT rowid, x->>$label FROM data1 WHERE x->>$label IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Hrana HTTP Protocol Definition in Protobuf\nDESCRIPTION: Defines the Protobuf schema for the Hrana protocol over HTTP, outlining the pipeline-based request-response model. This schema supports batch operations, cursor management, and SQL execution through a RESTful interface.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_31\n\nLANGUAGE: proto3\nCODE:\n```\nsyntax = \"proto3\";\npackage hrana.http;\n\nmessage PipelineReqBody {\n  optional string baton = 1;\n  repeated StreamRequest requests = 2;\n}\n\nmessage PipelineRespBody {\n  optional string baton = 1;\n  optional string base_url = 2;\n  repeated StreamResult results = 3;\n}\n\nmessage StreamResult {\n  oneof result {\n    StreamResponse ok = 1;\n    Error error = 2;\n  }\n}\n\nmessage CursorReqBody {\n  optional string baton = 1;\n  Batch batch = 2;\n}\n\nmessage CursorRespBody {\n  optional string baton = 1;\n  optional string base_url = 2;\n}\n\nmessage StreamRequest {\n  oneof request {\n    CloseStreamReq close = 1;\n    ExecuteStreamReq execute = 2;\n    BatchStreamReq batch = 3;\n    SequenceStreamReq sequence = 4;\n    DescribeStreamReq describe = 5;\n    StoreSqlStreamReq store_sql = 6;\n    CloseSqlStreamReq close_sql = 7;\n    GetAutocommitStreamReq get_autocommit = 8;\n  }\n}\n\nmessage StreamResponse {\n  oneof response {\n    CloseStreamResp close = 1;\n    ExecuteStreamResp execute = 2;\n    BatchStreamResp batch = 3;\n    SequenceStreamResp sequence = 4;\n    DescribeStreamResp describe = 5;\n    StoreSqlStreamResp store_sql = 6;\n    CloseSqlStreamResp close_sql = 7;\n    GetAutocommitStreamResp get_autocommit = 8;\n  }\n}\n\nmessage CloseStreamReq {\n}\n\nmessage CloseStreamResp {\n}\n\nmessage ExecuteStreamReq {\n  Stmt stmt = 1;\n}\n\nmessage ExecuteStreamResp {\n  StmtResult result = 1;\n}\n\nmessage BatchStreamReq {\n  Batch batch = 1;\n}\n\nmessage BatchStreamResp {\n  BatchResult result = 1;\n}\n\nmessage SequenceStreamReq {\n  optional string sql = 1;\n  optional int32 sql_id = 2;\n}\n\nmessage SequenceStreamResp {\n}\n\nmessage DescribeStreamReq {\n  optional string sql = 1;\n  optional int32 sql_id = 2;\n}\n\nmessage DescribeStreamResp {\n  DescribeResult result = 1;\n}\n\nmessage StoreSqlStreamReq {\n  int32 sql_id = 1;\n  string sql = 2;\n}\n\nmessage StoreSqlStreamResp {\n}\n\nmessage CloseSqlStreamReq {\n  int32 sql_id = 1;\n}\n\nmessage CloseSqlStreamResp {\n}\n\nmessage GetAutocommitStreamReq {\n}\n\nmessage GetAutocommitStreamResp {\n  bool is_autocommit = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying sqld on Fly.io (Console)\nDESCRIPTION: This command launches a sqld instance on Fly.io, using the existing fly.toml configuration file from the repository.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nflyctl launch\n```\n\n----------------------------------------\n\nTITLE: Verifying Sqld Docker Build\nDESCRIPTION: Command to check if the sqld Docker image built successfully by running the container temporarily and displaying the help information.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker container run \\\n  --rm \\\n  -i \\\n  libsql/sqld \\\n  /bin/sqld --help\n```\n\n----------------------------------------\n\nTITLE: Defining Open Stream Request and Response in TypeScript\nDESCRIPTION: Specifies the structure of requests and responses for opening an SQL stream. The client provides a stream_id, and the server responds with a confirmation or an error.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype OpenStreamReq = {\n    \"type\": \"open_stream\",\n    \"stream_id\": int32,\n}\n\ntype OpenStreamResp = {\n    \"type\": \"open_stream\",\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Direct-Only SQL Functions in SQLite\nDESCRIPTION: SQL query to list all functions that are restricted from use in schema, triggers, or views. Uses the enhanced pragma_function_list to filter functions with the Direct-Only flag (0x80000).\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/trusted-schema.md#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT name FROM pragma_function_list\n    WHERE (flags & 0x80000)!=0\n    ORDER BY name;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for SQL Text Storage in Hrana v2\nDESCRIPTION: Type definitions for the StoreSqlReq and StoreSqlResp messages that allow storing SQL text on the server for later reference by ID, reducing network overhead for repeated queries.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype StoreSqlReq = {\n    \"type\": \"store_sql\",\n    \"sql_id\": int32,\n    \"sql\": string,\n}\n\ntype StoreSqlResp = {\n    \"type\": \"store_sql\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Struct Instance in JavaScript\nDESCRIPTION: Basic example of creating a new struct instance using the constructor returned from StructBinder.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = new MyStruct;\n```\n\n----------------------------------------\n\nTITLE: Defining Pipeline Request and Response Types in TypeScript\nDESCRIPTION: Defines TypeScript types for pipeline request and response bodies, including stream requests and results. These types are used in the v3/pipeline endpoint for executing a pipeline of requests on a stream.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype PipelineReqBody = {\n    \"baton\": string | null,\n    \"requests\": Array<StreamRequest>,\n}\n\ntype PipelineRespBody = {\n    \"baton\": string | null,\n    \"base_url\": string | null,\n    \"results\": Array<StreamResult>\n}\n\ntype StreamResult =\n    | StreamResultOk\n    | StreamResultError\n\ntype StreamResultOk = {\n    \"type\": \"ok\",\n    \"response\": StreamResponse,\n}\n\ntype StreamResultError = {\n    \"type\": \"error\",\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Statement Structure in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the Stmt type for representing SQL statements, including fields for SQL text, arguments, and execution preferences. Also includes the NamedArg type for named parameters.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype Stmt = {\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n    \"args\"?: Array<Value>,\n    \"named_args\"?: Array<NamedArg>,\n    \"want_rows\"?: boolean,\n}\n\ntype NamedArg = {\n    \"name\": string,\n    \"value\": Value,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sqld for Incremental Snapshots (Console)\nDESCRIPTION: This command configures sqld to generate incremental snapshots every 5 seconds and execute a custom script when a snapshot is created.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nsqld --snapshot-exec ./snapshot.sh --max-log-duration 5\n```\n\n----------------------------------------\n\nTITLE: Defining BatchCond Types for Conditional Execution in TypeScript\nDESCRIPTION: Specifies the structure for batch conditions used in conditional execution of batch steps. Includes various condition types such as ok, error, not, and, and or.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchCond =\n    | { \"type\": \"ok\", \"step\": int32 }\n    | { \"type\": \"error\", \"step\": int32 }\n    | { \"type\": \"not\", \"cond\": BatchCond }\n    | { \"type\": \"and\", \"conds\": Array<BatchCond> }\n    | { \"type\": \"or\", \"conds\": Array<BatchCond> }\n```\n\n----------------------------------------\n\nTITLE: Verifying Sqld Installation\nDESCRIPTION: Command to verify that sqld has been installed correctly by displaying its help information, showing available options and commands.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsqld --help\n```\n\n----------------------------------------\n\nTITLE: Performing and Visualizing Bounding Box Within Query in SQL\nDESCRIPTION: Executes a spatial 'within' query using bounding box containment instead of precise polygon containment. This approach can be more efficient for initial filtering. The query visualizes both the polygons and their bounding boxes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Bounding-Box WITHIN Query</h1>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       ),\n       geopoly_svg(geopoly_bbox(_shape),\n         'style=\"fill:none;stroke:black;stroke-width:1\"'\n       )\n  FROM geo1, querypoly\n WHERE geopoly_within(geopoly_bbox(_shape), geopoly_bbox(poly));\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\nSELECT geopoly_svg(geopoly_bbox(poly),\n         'style=\"fill:none;stroke:black;stroke-width:3\"'\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Performing and Visualizing Bounding Box Overlap Query in SQL\nDESCRIPTION: Executes a spatial query using bounding box overlap instead of precise polygon overlap. This approach can be more efficient for initial filtering. The query visualizes both the polygons and their bounding boxes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Bounding-Box Overlap Query</h1>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       ),\n       geopoly_svg(geopoly_bbox(_shape),\n         'style=\"fill:none;stroke:black;stroke-width:1\"'\n       )\n  FROM geo1, querypoly\n WHERE geopoly_overlap(geopoly_bbox(_shape), geopoly_bbox(poly));\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\nSELECT geopoly_svg(geopoly_bbox(poly),\n         'style=\"fill:none;stroke:black;stroke-width:3\"'\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Installing Sqld with Homebrew\nDESCRIPTION: Command to install sqld using Homebrew after adding the required tap. This builds and installs the sqld binary into your Homebrew prefix path.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sqld\n```\n\n----------------------------------------\n\nTITLE: Creating Struct Instance with External Memory\nDESCRIPTION: Example of creating a struct instance that uses externally managed memory by passing a WASM heap pointer. The memory is not owned by the struct instance.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = new MyStruct( someCFuncWhichReturnsAMyStructPointer() );\n...\nx.dispose(); // does NOT free the memory\n```\n\n----------------------------------------\n\nTITLE: Defining General Response Structure in TypeScript\nDESCRIPTION: Defines the general structure of a response in the API. It can either be of type T (success payload) or an Error.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Response<T> = T | Error;\n```\n\n----------------------------------------\n\nTITLE: Using Bottomless WAL in libSQL Shell\nDESCRIPTION: SQL commands to load the Bottomless extension, open a database with the Bottomless WAL, and set the journal mode to WAL to enable the custom WAL implementation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n.load ../target/debug/bottomless\n.open file:test.db?wal=bottomless\nPRAGMA journal_mode=wal;\n```\n\n----------------------------------------\n\nTITLE: Querying Test Results from SQLite Database\nDESCRIPTION: SQL query to find all failed tests in the testrunner.db database, which is populated by the testrunner.tcl script during test execution.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM script WHERE state='failed'\n```\n\n----------------------------------------\n\nTITLE: Shared Protocol Structures in Protobuf\nDESCRIPTION: Defines common Protobuf structures shared between WebSocket and HTTP implementations of the Hrana protocol. Includes error handling, SQL statement representation, batch operations, cursor entries, and result structures for database operations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_32\n\nLANGUAGE: proto3\nCODE:\n```\nsyntax = \"proto3\";\npackage hrana;\n\nmessage Error {\n  string message = 1;\n  optional string code = 2;\n}\n\nmessage Stmt {\n  optional string sql = 1;\n  optional int32 sql_id = 2;\n  repeated Value args = 3;\n  repeated NamedArg named_args = 4;\n  optional bool want_rows = 5;\n}\n\nmessage NamedArg {\n  string name = 1;\n  Value value = 2;\n}\n\nmessage StmtResult {\n  repeated Col cols = 1;\n  repeated Row rows = 2;\n  uint64 affected_row_count = 3;\n  optional sint64 last_insert_rowid = 4;\n}\n\nmessage Col {\n  optional string name = 1;\n  optional string decltype = 2;\n}\n\nmessage Row {\n  repeated Value values = 1;\n}\n\nmessage Batch {\n  repeated BatchStep steps = 1;\n}\n\nmessage BatchStep {\n  optional BatchCond condition = 1;\n  Stmt stmt = 2;\n}\n\nmessage BatchCond {\n  oneof cond {\n    uint32 step_ok = 1;\n    uint32 step_error = 2;\n    BatchCond not = 3;\n    CondList and = 4;\n    CondList or = 5;\n    IsAutocommit is_autocommit = 6;\n  }\n\n  message CondList {\n    repeated BatchCond conds = 1;\n  }\n\n  message IsAutocommit {\n  }\n}\n\nmessage BatchResult {\n  map<uint32, StmtResult> step_results = 1;\n  map<uint32, Error> step_errors = 2;\n}\n\nmessage CursorEntry {\n  oneof entry {\n    StepBeginEntry step_begin = 1;\n    StepEndEntry step_end = 2;\n    StepErrorEntry step_error = 3;\n    Row row = 4;\n    Error error = 5;\n  }\n}\n\nmessage StepBeginEntry {\n  uint32 step = 1;\n  repeated Col cols = 2;\n}\n\nmessage StepEndEntry {\n  uint64 affected_row_count = 1;\n  optional sint64 last_insert_rowid = 2;\n}\n\nmessage StepErrorEntry {\n  uint32 step = 1;\n  Error error = 2;\n}\n\nmessage DescribeResult {\n  repeated DescribeParam params = 1;\n  repeated DescribeCol cols = 2;\n  bool is_explain = 3;\n  bool is_readonly = 4;\n}\n\nmessage DescribeParam {\n  optional string name = 1;\n}\n\nmessage DescribeCol {\n  string name = 1;\n  optional string decltype = 2;\n}\n\nmessage Value {\n  oneof value {\n    Null null = 1;\n    sint64 integer = 2;\n    double float = 3;\n    string text = 4;\n    bytes blob = 5;\n  }\n\n  message Null {}\n}\n```\n\n----------------------------------------\n\nTITLE: Java Interface for Creating User-Defined SQL Functions in SQLite\nDESCRIPTION: This snippet shows the Java interface for creating user-defined SQL functions in SQLite. It demonstrates a simplified approach compared to the C API, using a single method with a SQLFunction parameter to handle different types of functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nint sqlite3_create_function(sqlite3 db, String funcName, int nArgs,\n                            int encoding, SQLFunction func);\n```\n\n----------------------------------------\n\nTITLE: Updating Polygon Colors Based on Overlap in SQL\nDESCRIPTION: This SQL query updates the color of polygons in the geo1 table based on whether they overlap with a polygon from the querypoly table. It then transforms the shapes and generates SVG representations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE geo1\n   SET clr=CASE WHEN EXISTS(SELECT 1 FROM querypoly\n                                WHERE geopoly_overlap(_shape,poly))\n           THEN 'red' ELSE '#76ccff' END;\nUPDATE geo1\n   SET _shape=geopoly_xform(_shape,1,0,0,1,300,0)\n WHERE geopoly_overlap(_shape,(SELECT poly FROM querypoly));\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1;\nSELECT geopoly_svg(poly,'style=\"fill:none;stroke:black;stroke-width:2\"')\n  FROM querypoly;\n--ROLLBACK;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Blob Operation Performance Test\nDESCRIPTION: Example demonstrating performance comparison between simple blob reads and blob reopen operations\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/benchmark/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$> LD_LIBRARY_PATH=../.libs/ ./blobtest blob-read-simple.db read simple 1000 1000\nopen sqlite db at 'blob-read-simple.db'\nblob table: ready to prepare\nblob table: prepared\ntime: 3.76 micros (avg.), 1000 (count)\n$> LD_LIBRARY_PATH=../.libs/ ./blobtest blob-read-reopen.db read reopen 1000 1000\nopen sqlite db at 'blob-read-reopen.db'\nblob table: ready to prepare\nblob table: prepared\ntime: 0.31 micros (avg.), 1000 (count)\n```\n\n----------------------------------------\n\nTITLE: SQL IN Operator Basic Syntax\nDESCRIPTION: Shows the two fundamental formats of the IN operator - comparing against a list of values or a subquery.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/src/in-operator.md#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nx IN (y1,y2,y3,...,yN)\nx IN (subquery)\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Improved Java Custom Collation Interface\nDESCRIPTION: This snippet demonstrates how to use the improved Java interface for creating custom collations in SQLite. It shows the implementation of comparison and optional destruction methods, as well as the inclusion of local state within the callback object.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nint rc = sqlite3_create_collation(db, \"mycollation\", SQLITE_UTF8, new SomeCallbackType(){\n\n  // Required comparison function:\n  @Override public int call(byte[] lhs, byte[] rhs){ ... }\n\n  // Optional finalizer function:\n  @Override public void xDestroy(){ ... }\n\n  // Optional local state:\n  private String localState1 =\n    \"This is local state. There are many like it, but this one is mine.\";\n  private MyStateType localState2 = new MyStateType();\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Expert for Single Query Analysis\nDESCRIPTION: Command to run the SQLite Expert application for analyzing a single SQL query against a specified database file.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/expert/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./sqlite3_expert -sql <sql-query> test.db\n```\n\n----------------------------------------\n\nTITLE: Defining Error Response Structure in TypeScript\nDESCRIPTION: Defines the structure of an Error response in the API. It contains a single property 'error' of type string.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Error = {\n    error: string\n}\n```\n\n----------------------------------------\n\nTITLE: Running libSQL with WebAssembly UDF Support in Docker\nDESCRIPTION: Docker command to run a pre-configured libSQL environment with WebAssembly user-defined function support enabled.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it piotrsarna/libsql:libsql-0.1.0-wasm-udf ./libsql\n```\n\n----------------------------------------\n\nTITLE: Stream Request and Response Type Definitions\nDESCRIPTION: Defines the available request and response types for the HTTP API, which mirror the stream requests in Hrana protocol.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype StreamRequest =\n    | CloseStreamReq\n    | ExecuteStreamReq\n    | BatchStreamReq\n    | SequenceStreamReq\n    | DescribeStreamReq\n    | StoreSqlStreamReq\n    | CloseSqlStreamReq\n\ntype StreamResponse =\n    | CloseStreamResp\n    | ExecuteStreamResp\n    | BatchStreamResp\n    | SequenceStreamResp\n    | DescribeStreamResp\n    | StoreSqlStreamResp\n    | CloseSqlStreamResp\n```\n\n----------------------------------------\n\nTITLE: Building SQLite DLL with Extended Features on Windows\nDESCRIPTION: Compiles the SQLite DLL with various additional features enabled, such as FTS3, FTS4, FTS5, RTree, JSON1, and more. This command is used to build the official downloadable DLL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/compile-for-windows.md#2025-04-11_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nnmake /f Makefile.msc sqlite3.dll USE_NATIVE_LIBPATHS=1 \"OPTS=-DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_GEOPOLY=1 -DSQLITE_ENABLE_SESSION=1 -DSQLITE_ENABLE_PREUPDATE_HOOK=1 -DSQLITE_ENABLE_SERIALIZE=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1\"\n```\n\n----------------------------------------\n\nTITLE: Launching Replica sqld Server with TLS (Console)\nDESCRIPTION: This command starts a sqld server in replica mode, connecting to a primary server using TLS for secure communication.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsqld \\\n  --http-listen-addr 127.0.0.1:8082 \\\n  --primary-grpc-url https://127.0.0.1:5001 \\\n  --primary-grpc-tls \\\n  --primary-grpc-ca-cert-file ca_cert.pem \\\n  --primary-grpc-cert-file client_cert.pem \\\n  --primary-grpc-key-file client_key.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Close Stream Request and Response in TypeScript\nDESCRIPTION: Defines the structure of requests and responses for closing an SQL stream. The client specifies the stream_id to close, and the server confirms the closure.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloseStreamReq = {\n    \"type\": \"close_stream\",\n    \"stream_id\": int32,\n}\n\ntype CloseStreamResp = {\n    \"type\": \"close_stream\",\n}\n```\n\n----------------------------------------\n\nTITLE: SQL IN Operator Simple Comparison Example\nDESCRIPTION: Demonstrates how a simple IN operator with two values can be rewritten as an OR condition for optimization purposes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/src/in-operator.md#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nx IN (y1,y2)\nx=y1 OR x=y2\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a SQLite Database from Hex Dump\nDESCRIPTION: This snippet demonstrates creating a SQLite database from a hex dump, then performing a SELECT query and integrity check. It showcases how dbtotxt output can be used directly in scripts to create specific database states.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/tool/dbtotxt.md#2025-04-11_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n.open --hexdb\n| size 8192 pagesize 4096 filename x9.db\n| page 1 offset 0\n|      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.\n|     16: 10 00 01 01 00 40 20 20 00 00 00 04 00 00 00 02   .....@  ........\n|     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................\n|     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................\n|     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04   ................\n|     96: 00 2e 30 38 0d 00 00 00 01 0f c0 00 0f c0 00 00   ..08............\n|   4032: 3e 01 06 17 11 11 01 69 74 61 62 6c 65 74 31 74   >......itablet1t\n|   4048: 31 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   1.CREATE TABLE t\n|   4064: 31 28 78 2c 79 20 44 45 46 41 55 4c 54 20 78 27   1(x,y DEFAULT x'\n|   4080: 66 66 27 2c 7a 20 44 45 46 41 55 4c 54 20 30 29   ff',z DEFAULT 0)\n| page 2 offset 4096\n|      0: 0d 08 14 00 04 00 10 00 0e 05 0a 0f 04 15 00 10   ................\n|     16: 88 02 03 05 90 04 0e 08 00 00 00 00 00 00 00 00   ................\n|   1040: 00 00 00 00 ff 87 7c 02 05 8f 78 0e 08 00 00 00   ......|...x.....\n|   2064: 00 00 00 ff 0c 0a 01 fb 00 00 00 00 00 00 00 00   ................\n|   2560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 83   ................\n|   2576: 78 01 05 87 70 0e 08 00 00 00 00 00 00 00 00 00   x...p...........\n|   3072: 00 00 00 00 00 00 00 00 00 ff 00 00 01 fb 00 00   ................\n|   3584: 00 00 00 00 00 83 78 00 05 87 70 0e 08 00 00 00   ......x...p.....\n|   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff   ................\n| end x9.db\nSELECT rowid FROM t1;\nPRAGMA integrity_check;\n```\n\n----------------------------------------\n\nTITLE: Close Stored SQL Text Request and Response\nDESCRIPTION: Defines the structure for closing a stored SQL text that was previously stored with a specific ID, scoped to a single stream.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloseSqlStreamReq = {\n    \"type\": \"close_sql\",\n    \"sql_id\": int32,\n}\n\ntype CloseSqlStreamResp = {\n    \"type\": \"close_sql\",\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Magic Pattern Definitions for Unix file(1) Utility\nDESCRIPTION: Defines magic pattern rules to identify different types of SQLite3 database files based on their application_id or user_version value. The patterns detect various applications that use SQLite as their file format including Fossil, Bentley Systems, OGC GeoPackage, Esri, MBTiles, and more.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/magic.txt#2025-04-11_snippet_0\n\nLANGUAGE: magic\nCODE:\n```\n0    string  =SQLite\\ format\\ 3\n>68  belong  =0x0f055112  Fossil checkout -\n>68  belong  =0x0f055113  Fossil global configuration -\n>68  belong  =0x0f055111  Fossil repository -\n>68  belong  =0x42654462  Bentley Systems BeSQLite Database -\n>68  belong  =0x42654c6e  Bentley Systems Localization File -\n>60  belong  =0x5f4d544e  Monotone source repository -\n>68  belong  =0x47504b47  OGC GeoPackage file -\n>68  belong  =0x47503130  OGC GeoPackage version 1.0 file -\n>68  belong  =0x45737269  Esri Spatially-Enabled Database -\n>68  belong  =0x4d504258  MBTiles tileset -\n>68  belong  =0x6a035744  TeXnicard card database\n>0   string  =SQLite      SQLite3 database\n```\n\n----------------------------------------\n\nTITLE: Building the Bottomless WAL Extension\nDESCRIPTION: Commands to build the loadable .so libSQL extension with Bottomless WAL implementation. The first command builds in debug mode, while the second builds in release mode.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nLIBSQL_DIR=/path/to/your/libsql/directory make\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for SQL Statement Sequence Execution in Hrana v2\nDESCRIPTION: Type definitions for SequenceReq and SequenceResp messages that allow executing multiple SQL statements in sequence, with execution stopping on the first error.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype SequenceReq = {\n    \"type\": \"sequence\",\n    \"stream_id\": int32,\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n}\n\ntype SequenceResp = {\n    \"type\": \"sequence\",\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Colors of Overlapping Polygons in SQL\nDESCRIPTION: Demonstrates how to update polygon colors based on spatial relationships. Polygons that overlap with the query polygon are colored red, while non-overlapping polygons are colored blue. The transaction is rolled back to preserve original data.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Color-Change For Overlapping Elements</h1>'\nBEGIN;\nUPDATE geo1\n   SET clr=CASE WHEN rowid IN (SELECT geo1.rowid FROM geo1, querypoly\n                                WHERE geopoly_overlap(_shape,poly))\n           THEN 'red' ELSE 'blue' END;\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1;\nSELECT geopoly_svg(poly,'style=\"fill:none;stroke:black;stroke-width:2\"')\n  FROM querypoly;\nROLLBACK;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Cursor Fetching Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for fetching entries from an open cursor with pagination support via max_count parameter.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype FetchCursorReq = {\n    \"type\": \"fetch_cursor\",\n    \"cursor_id\": int32,\n    \"max_count\": uint32,\n}\n\ntype FetchCursorResp = {\n    \"type\": \"fetch_cursor\",\n    \"entries\": Array<CursorEntry>,\n    \"done\": boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Sqld Version with Docker\nDESCRIPTION: Command to run a specific version of sqld using Docker, replacing X.Y.Z with the desired version number. Exposes port 8080 for local connections.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 -d ghcr.io/tursodatabase/libsql-server:vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Improved Java Interface for SQLite Custom Collations\nDESCRIPTION: This snippet shows a more Java-friendly interface for creating custom collations in SQLite. It combines the callback and user data into a single object, improving usability and maintaining Java coding conventions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nint sqlite3_create_collation(sqlite3 db, String name, int eTextRep,\n                             SomeCallbackType collation);\n```\n\n----------------------------------------\n\nTITLE: Defining Error Structure in TypeScript\nDESCRIPTION: Specifies the TypeScript type for the Error structure used throughout the Hrana protocol. This structure includes a human-readable message and an optional machine-readable error code.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype Error = {\n    \"message\": string,\n    \"code\"?: string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Bottomless WAL Extension in Release Mode\nDESCRIPTION: Command to build the loadable .so libSQL extension with Bottomless WAL implementation in release mode.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nLIBSQL_DIR=/path/to/your/libsql/directory make release\n```\n\n----------------------------------------\n\nTITLE: Defining Hello Message Types in TypeScript\nDESCRIPTION: Specifies the structure of hello messages used for client authentication. Includes HelloMsg sent by the client with an optional JWT, and HelloOkMsg and HelloErrorMsg as possible server responses.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype HelloMsg = {\n    \"type\": \"hello\",\n    \"jwt\": string | null,\n}\n\ntype HelloOkMsg = {\n    \"type\": \"hello_ok\",\n}\n\ntype HelloErrorMsg = {\n    \"type\": \"hello_error\",\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Temporary Table with JSON Data in SQLite\nDESCRIPTION: This snippet creates a temporary table 't2' with a JSON TEXT column, generates a large amount of JSON data using recursive CTEs, and inserts this data into the table. It demonstrates complex JSON object creation and array manipulation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/jsonb-q1.txt#2025-04-11_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TEMP TABLE t2(x JSON TEXT);\nWITH RECURSIVE\n  c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<25000),\n  array1(y) AS (\n    SELECT json_group_array(\n             json_object('x',x,'y',random(),'z',hex(randomblob(50)))\n           )\n      FROM c\n  ),\n  c2(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c2 WHERE n<5)\nINSERT INTO t2(x)\n  SELECT jsonb_object('a',n,'b',n*2,'c',y,'d',3,'e',5,'f',6) FROM array1, c2;\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite Expert Application in C\nDESCRIPTION: Command to compile the SQLite Expert application using gcc. It combines the SQLite source, expert application, and SQLite expert implementation into a single executable.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/expert/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcc -O2 sqlite3.c expert.c sqlite3expert.c -o sqlite3_expert\n```\n\n----------------------------------------\n\nTITLE: SQL Closing Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for closing stored SQL text and freeing associated server resources.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloseSqlReq = {\n    \"type\": \"close_sql\",\n    \"sql_id\": int32,\n}\n\ntype CloseSqlResp = {\n    \"type\": \"close_sql\",\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Silently with --run Command\nDESCRIPTION: The --run command executes SQL in the input buffer without adding anything to the result buffer. It can optionally take an integer argument (0-6) to specify an alternative database connection.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n--run [<0-6>]\n```\n\n----------------------------------------\n\nTITLE: Building and Running Bruteforce Benchmark\nDESCRIPTION: Example showing how to build LibSQL and run bruteforce benchmarks with vector operations\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/benchmark/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$> basename $(pwd)\nlibsql-sqlite3\n$> make # this command will generate libs in the .libs directory\n$> cd benchmark\n$> make bruteforce\nopen queries file at bruteforce.sql\nopen sqlite db at 'test.db'\nexecuted simple statement: 'PRAGMA journal_mode=WAL;'\nexecuted simple statement: 'CREATE TABLE x ( id INTEGER PRIMARY KEY, embedding FLOAT32(64) );'\nprepared statement: 'INSERT INTO x VALUES (?, vector(?));'\ninserts (bruteforce.sql):\n  insert: 46.27 micros (avg.), 1000 (count)\n  size  : 0.2695 MB\n  reads : 1.00 (avg.), 1000 (total)\n  writes: 1.00 (avg.), 1000 (total)\nprepared statement: 'SELECT id FROM x ORDER BY vector_distance_cos(embedding, vector(?)) LIMIT ?;'\nsearch (bruteforce.sql):\n  select: 329.32 micros (avg.), 1000 (count)\n  size  : 0.2695 MB\n  reads : 2000.00 (avg.), 2000000 (total)\n```\n\n----------------------------------------\n\nTITLE: Closing SQLite Database Connections with --close Command\nDESCRIPTION: The --close command closes an existing database connection. It takes an integer argument (0-6) to specify the connection to close, or 'all' to close all connections. Without an argument, it closes the currently active connection.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n--close [<0-6>|all]\n```\n\n----------------------------------------\n\nTITLE: Emscripten Configuration Example\nDESCRIPTION: Example showing how to configure Jaccwabyt in a typical Emscripten environment using Module's memory, malloc and free functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    heap:    Module['asm']['memory'],\n    //Or:\n    // heap: ()=>Module['HEAP8'],\n    alloc:   (n)=>Module['_malloc'](n),\n    dealloc: (m)=>Module['_free'](m)\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Endpoint for Stream Request Execution\nDESCRIPTION: Defines the pipeline endpoint structure for executing requests on a stream. Shows the request and response formats including baton handling for maintaining stream state across HTTP requests.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPOST /v2/pipeline\n\n-> {\n    \"baton\": string | null,\n    \"requests\": Array<StreamRequest>,\n}\n\n<- {\n    \"baton\": string | null,\n    \"base_url\": string | null,\n    \"results\": Array<StreamResult>\n}\n\ntype StreamResult =\n    | StreamResultOk\n    | StreamResultError\n\ntype StreamResultOk = {\n    \"type\": \"ok\",\n    \"response\": StreamResponse,\n}\n\ntype StreamResultError = {\n    \"type\": \"error\",\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML and SVG Visualization of All Polygons in SQL\nDESCRIPTION: Generates HTML and SVG markup to visualize all polygons in the geo1 table along with the query polygon. The geopoly_svg function converts polygon data to SVG path elements.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n/* Generate the HTML */\n.print '<html>'\n.print '<h1>Everything</h1>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape, \n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',clr)\n       )\n  FROM geo1;\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Configuring libSQL with WasmEdge WebAssembly Runtime\nDESCRIPTION: Command to configure libSQL with WebAssembly runtime support using WasmEdge linked dynamically, which provides an alternative WebAssembly runtime environment.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n./configure --enable-wasm-runtime-wasmedge\n```\n\n----------------------------------------\n\nTITLE: Configuring Rusqlite Dependencies with Bundled SQLite\nDESCRIPTION: Cargo.toml configuration to enable bundled SQLite compilation in Rusqlite. This ensures SQLite is compiled from source and linked statically, using version 0.29.0 of Rusqlite with the bundled feature enabled.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/rusqlite/README.md#2025-04-11_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies.rusqlite]\nversion = \"0.29.0\"\nfeatures = [\"bundled\"]\n```\n\n----------------------------------------\n\nTITLE: Compiling WebAssembly Function\nDESCRIPTION: Command to compile Rust code into WebAssembly format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Expert for Multiple Query Analysis\nDESCRIPTION: Command to run the SQLite Expert application for analyzing multiple SQL queries stored in a text file against a specified database file.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/expert/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./sqlite3_expert -file <text-file> test.db\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Test Script State in SQLite Test Interpreter\nDESCRIPTION: Code snippet showing the initialization sequence for the test script interpreter. It closes all connections, sets the active database to 0, creates a new test.db, and sets the NULL display value to 'nil'.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--close all\n--db 0\n--new test.db\n--null nil\n```\n\n----------------------------------------\n\nTITLE: Opening a Hex-Dumped Database in SQLite CLI\nDESCRIPTION: This command opens a database from a hex dump file or from stdin if no filename is provided. It's used in the SQLite CLI to read dbtotxt output.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/tool/dbtotxt.md#2025-04-11_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n.open --hexdb  ?OPTIONAL-FILENAME?\n```\n\n----------------------------------------\n\nTITLE: SQL Storage Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for storing SQL text on the server with a client-assigned ID for later reference.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype StoreSqlReq = {\n    \"type\": \"store_sql\",\n    \"sql_id\": int32,\n    \"sql\": string,\n}\n\ntype StoreSqlResp = {\n    \"type\": \"store_sql\",\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Server Architecture for sqld\nDESCRIPTION: This class diagram illustrates the simplified architecture of the sqld server, showing the relationships between Server, PgConnectionFactory, and SchedulerService classes. It demonstrates the service design pattern used in the server implementation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DESIGN.md#2025-04-11_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Server --|> PgConnectionFactory\n    PgConnectionFactory --|> SchedulerService\n\n    class Server {\n    }\n\n    class PgConnectionFactory {\n    }\n\n    class SchedulerService {\n    }\n```\n\n----------------------------------------\n\nTITLE: SQLite Extensions Trust Configuration\nDESCRIPTION: Example of trusted.lst file content showing SHA256 checksums for SQLite extensions that will be preloaded at startup\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-server/README.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cat trusted.lst\n04cd193d2547ff99d672fbfc6dcd7e0b220869a1ab867a9bb325f7374d168533  vector0.so\n74f9029cbf6e31b155c097a273e08517eb4e56f2300dede65c801407b01eb248  vss0.so\n5bbbe0f80dd7721162157f852bd5f364348eb504f9799ae521f832d44c13a3a1  crypto.so\n731a8cbe150351fed02944a00ca586fc60d8f3814e4f83efbe60fcef62d4332b  fuzzy.so\n1dbe9e4e58c4b994a119f1b507d07eb7a4311a80b96482c979b3bc0defd485fb  math.so\n511bf71b0621977bd9575d71e90adf6d02967008e460066a33aed8720957fecb  stats.so\nae7fff8412e4e66e7f22b9af620bd24074bc9c77da6746221a9aba9d2b38d6a6  text.so\n9ed6e7f4738c2223e194c7a80525d87f323df269c04d155a769d733e0ab3b4d0  unicode.so\n19106ded4fd3fd4986a5111433d062a73bcf9557e07fa6d9154e088523e02bb0  uuid.so\n```\n\n----------------------------------------\n\nTITLE: Performing and Visualizing Negative Within Query in SQL\nDESCRIPTION: Executes and visualizes a negative spatial 'within' query to find polygons that are not completely contained within the query polygon. Uses the NOT operator with geopoly_within function and generates an SVG visualization of the results.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Not Within Query</h1>'\n.print '<pre>'\n.print 'SELECT *'\n.print '  FROM geo1, querypoly'\n.print ' WHERE NOT geopoly_within(_shape, poly);'\n.print \nEXPLAIN QUERY PLAN\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE NOT geopoly_within(_shape, poly);\n.print '</pre>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE NOT geopoly_within(_shape, poly);\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Git Branch Creation for LibSQL Features\nDESCRIPTION: Commands for creating and pushing a new feature branch in Git when contributing to LibSQL. Shows the basic Git workflow for feature development.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature-name\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature-name\n```\n\n----------------------------------------\n\nTITLE: Creating a Related Table in SQL\nDESCRIPTION: Example of creating a secondary table that will be related to the primary table through a foreign key.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE emails (user_id INT, email TEXT);\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Result and Column Types in TypeScript\nDESCRIPTION: Describes the structure for SQL statement execution results, including column information, rows, affected row count, and last insert rowid. Column type includes an optional name field.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype StmtResult = {\n    \"cols\": Array<Col>,\n    \"rows\": Array<Array<Value>>,\n    \"affected_row_count\": int32,\n    \"last_insert_rowid\": string | null,\n}\n\ntype Col = {\n    \"name\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Statement Description Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for analyzing SQL statements with support for both direct SQL text and stored SQL ID reference.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeReq = {\n    \"type\": \"describe\",\n    \"stream_id\": int32,\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n}\n\ntype DescribeResp = {\n    \"type\": \"describe\",\n    \"result\": DescribeResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Overlap Query with Bounding Boxes in SQL\nDESCRIPTION: Extends the overlap query visualization to include bounding boxes of both the query polygon and the result set. Uses geopoly_bbox and geopoly_group_bbox functions to calculate the bounding rectangles.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Overlap Query And Result Bounding Box</h1>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE geopoly_overlap(_shape, poly);\nSELECT geopoly_svg(geopoly_bbox(poly),\n         'style=\"fill:none;stroke:black;stroke-width:3\"'\n       )\n  FROM querypoly;\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\nSELECT geopoly_svg(geopoly_group_bbox(_shape),\n         'style=\"fill:none;stroke:red;stroke-width:3\"'\n       )\n  FROM geo1, querypoly\n WHERE geopoly_overlap(_shape, poly);\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite3MC Base Configuration\nDESCRIPTION: Defines core configuration types and source files for the SQLite3 Multi-Cipher library including public headers and base source files.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CONFIGURATION_TYPES Debug Release)\n\nset(SQLITE3MC_PUBLIC_HEADERS\n  src/sqlite3.h\n  src/sqlite3ext.h\n  src/sqlite3mc.h\n  src/sqlite3mc_version.h\n  src/sqlite3mc_vfs.h\n  src/sqlite3userauth.h\n)\n\nset(SQLITE3MC_BASE_SRCS\n  src/sqlite3mc.c\n  src/cipher_common.h\n  src/cipher_config.h\n  src/fastpbkdf2.h\n  src/mystdint.h\n  src/rijndael.h\n  src/sha1.h\n  src/sha2.h\n  src/test_windirent.h\n  ${SQLITE3MC_PUBLIC_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Expert with Sampling\nDESCRIPTION: Commands to run the SQLite Expert application with sampling options. The first example uses 25% of the database for statistics, while the second example disables statistics generation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/expert/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Generate statistics based on 25% of the user database rows:\n./sqlite3_expert -sample 25 -sql <sql-query> test.db\n\n# Do not generate any statistics at all:\n./sqlite3_expert -sample 0 -sql <sql-query> test.db\n```\n\n----------------------------------------\n\nTITLE: Configuring libSQL with WebAssembly Runtime Support (Static Linking)\nDESCRIPTION: Command to configure libSQL with WebAssembly runtime support using Wasmtime linked statically, enabling WebAssembly-based user-defined functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n./configure --enable-wasm-runtime\n```\n\n----------------------------------------\n\nTITLE: Installing Cargo AFL Fuzzer\nDESCRIPTION: Command to install the cargo-afl fuzzing tool via cargo package manager\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/tools/fuzz/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install cargo-afl\n```\n\n----------------------------------------\n\nTITLE: Removing All Column Constraints in SQL\nDESCRIPTION: Example of altering a column to remove all constraints, restoring it to its original definition.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t ALTER COLUMN v TO v;\n```\n\n----------------------------------------\n\nTITLE: Defining Batch, BatchStep, and BatchResult Types in TypeScript\nDESCRIPTION: Describes the structure for batches, batch steps, and batch results. Batches consist of steps with optional conditions, while results include step results and errors.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Batch = {\n    \"steps\": Array<BatchStep>,\n}\n\ntype BatchStep = {\n    \"condition\"?: BatchCond | null,\n    \"stmt\": Stmt,\n}\n\ntype BatchResult = {\n    \"step_results\": Array<StmtResult | null>,\n    \"step_errors\": Array<Error | null>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database Namespace with sqld Admin API (Console)\nDESCRIPTION: This curl command demonstrates how to create a new database namespace using the sqld admin API, enabling multitenancy support.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncurl -X POST http://localhost:8080/v1/namespaces/db1/create\n```\n\n----------------------------------------\n\nTITLE: SQL Sequence Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for executing multiple SQL statements in sequence with either direct SQL text or stored SQL ID reference.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype SequenceReq = {\n    \"type\": \"sequence\",\n    \"stream_id\": int32,\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n}\n\ntype SequenceResp = {\n    \"type\": \"sequence\",\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Extension-Specific Definitions\nDESCRIPTION: Configures definitions for SQLite extensions like FileIO, RegExp, Series and SHA3 that are only included in the library build.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SQLITE3MC_LIBONLY_DEFINITIONS \n  $<$<BOOL:${SQLITE_ENABLE_FILEIO}>:SQLITE_ENABLE_FILEIO=1>\n  $<$<BOOL:${SQLITE_ENABLE_REGEXP}>:SQLITE_ENABLE_REGEXP=1>\n  $<$<BOOL:${SQLITE_ENABLE_SERIES}>:SQLITE_ENABLE_SERIES=1>\n  $<$<BOOL:${SQLITE_ENABLE_SHA3}>:SQLITE_ENABLE_SHA3=1>\n)\n```\n\n----------------------------------------\n\nTITLE: Serving SQLite WebAssembly Demo with Althttpd in Bash\nDESCRIPTION: Command to serve the SQLite WebAssembly demo applications using the Althttpd server. This enables the necessary security headers for SharedArrayBuffer and Atomics APIs.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ext/wasm\n$ althttpd --enable-sab --max-age 1 --page index.html\n```\n\n----------------------------------------\n\nTITLE: Configuring libSQL with Dynamic Wasmtime WebAssembly Runtime\nDESCRIPTION: Command to configure libSQL with WebAssembly runtime support using Wasmtime linked dynamically.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n./configure --enable-wasm-runtime-dynamic\n```\n\n----------------------------------------\n\nTITLE: Testing SQLite WebAssembly on Remote Machine via SSH in Bash\nDESCRIPTION: Series of commands for setting up and testing the SQLite WebAssembly build on a remote machine accessed via SSH. This includes steps for installation, building, serving, and accessing the demo applications.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Remote: Install git, emsdk, and althttpd\n# Remote: Install the SQLite source tree. CD to ext/wasm\n# Remote: \"make\" to build WASM\n# Remote: althttpd --enable-sab --port 8080 --popup\n# Local:  ssh -L 8180:localhost:8080 remote\n# Local:  Point your web-browser at http://localhost:8180/index.html\n```\n\n----------------------------------------\n\nTITLE: Launching a Replica libsql-server Instance with Docker\nDESCRIPTION: Command to run a replica libsql-server instance in Docker, exposing port 8081 and connecting to a primary instance.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run --name some-sqld-replica -p 8081:8080 -ti \\\n    -e SQLD_NODE=replica \\\n    -e SQLD_PRIMARY_URL=https://<host>:<port> \\\n    ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: Monitoring Test Progress with watch Command\nDESCRIPTION: Command using the watch utility to continuously monitor the status of running tests by periodically executing the status check.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwatch ./testfixture $(TESTDIR)/testrunner.tcl status\n```\n\n----------------------------------------\n\nTITLE: Registering WebAssembly Function in SQL\nDESCRIPTION: SQL command to register a compiled WebAssembly function as a user-defined function in libSQL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION your_function LANGUAGE wasm AS <source-code>\n```\n\n----------------------------------------\n\nTITLE: Close Stream Request and Response\nDESCRIPTION: Defines the structure for closing a stream. After a close request, it's an error to execute more requests on the same stream.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HTTP_V2_SPEC.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloseStreamReq = {\n    \"type\": \"close\",\n}\n\ntype CloseStreamResp = {\n    \"type\": \"close\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up libSQL environment in Shell\nDESCRIPTION: Exports the LIBSQL_STATIC_LIB_DIR environment variable to the current directory's .libs subdirectory. This is likely used to locate static libraries for libSQL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql/DEVELOPING.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport LIBSQL_STATIC_LIB_DIR=$(pwd)/../../.libs\n```\n\n----------------------------------------\n\nTITLE: Beginning Transaction for Color Change and Movement of Overlapping Elements in SQL\nDESCRIPTION: Starts a transaction to perform color changes and movement of polygons that overlap with the query polygon. This incomplete snippet shows the beginning of an update operation targeting overlapping polygons.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Color-Change And Move Overlapping Elements</h1>'\nBEGIN;\nUPDATE geo1\n   SET clr=CASE WHEN rowid IN (SELECT geo1.rowid FROM geo1, querypoly\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite3 Application Identifier\nDESCRIPTION: Example PRAGMA statement for setting the application_id in a SQLite database. The application_id is written as a 4-byte big-endian integer at offset 68 in the database header and helps identify the specific application that created the database.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/magic.txt#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPRAGMA application_id = INTEGER;\n```\n\n----------------------------------------\n\nTITLE: Compiling ICU extension as shared library in C\nDESCRIPTION: Provides a gcc command to compile the ICU extension as a dynamically loadable SQLite extension on Unix-like systems. This command creates a shared library that can be loaded into SQLite.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/icu/README.txt#2025-04-11_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ngcc -fPIC -shared icu.c `pkg-config --libs --cflags icu-uc icu-io` \\\n    -o libSqliteIcu.so\n```\n\n----------------------------------------\n\nTITLE: Docker Data Persistence with Local Path Mount\nDESCRIPTION: Command to run libsql-server with data persistence by mounting a local directory to the container's database path.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/DOCKER.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker run --name some-sqld -ti \\\n    -v $(pwd)/sqld-data:/var/lib/sqld \\ # you can mount local path\n    -e SQLD_NODE=primary \\\n    ghcr.io/tursodatabase/libsql-server:latest\n```\n\n----------------------------------------\n\nTITLE: JSON Output Formatting with --json and --json-block Commands\nDESCRIPTION: The --json and --json-block commands work like --result and --tableresult, but append column values literally without enclosing or escaping characters. Comparison is always an exact strcmp().\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n--json\n--json-block\n```\n\n----------------------------------------\n\nTITLE: Building SQLite-compatible C library and tools with Cargo\nDESCRIPTION: This command uses Cargo's xtask to build the SQLite-compatible C library and associated tools for libSQL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo xtask build\n```\n\n----------------------------------------\n\nTITLE: Configuring Rusqlite Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add Rusqlite as a dependency in a Rust project's Cargo.toml file. It includes the 'bundled' feature to automatically compile and link an up-to-date version of SQLite.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/rusqlite/README.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nrusqlite = { version = \"0.29.0\", features = [\"bundled\"] }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for SQL Description Result Structure in Hrana v2\nDESCRIPTION: Type definition for DescribeResult which contains metadata about a SQL statement, including parameter information, column information, and statement characteristics like read-only status.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeResult = {\n    \"params\": Array<DescribeParam>,\n    \"cols\": Array<DescribeCol>,\n    \"is_explain\": boolean,\n    \"is_readonly\": boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Case Folding Format Specification\nDESCRIPTION: Defines the machine-readable format for case folding entries using the pattern '<code>; <status>; <mapping>; # <name>'. Status codes include C (common), F (full), S (simple), and T (special Turkic cases).\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n<code>; <status>; <mapping>; # <name>\n```\n\n----------------------------------------\n\nTITLE: Autocommit Status Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for checking the autocommit state of a stream.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetAutocommitReq = {\n    \"type\": \"get_autocommit\",\n    \"stream_id\": int32,\n}\n\ntype GetAutocommitResp = {\n    \"type\": \"get_autocommit\",\n    \"is_autocommit\": bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Managing SQLite Database Connections with --db Command\nDESCRIPTION: The --db command switches between up to 7 different SQLite database connections. It takes an integer argument between 0 and 6 to select the active connection.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n--db <0-6>\n```\n\n----------------------------------------\n\nTITLE: Running Sqld Container with Persistent Storage\nDESCRIPTION: Command to run a sqld container with a persistent data volume and exposed port 8080. The container is named 'sqld' and uses the previously built image.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker container run \\\n  -d \\\n  --name sqld \\\n  -v sqld-data:/var/lib/sqld \\\n  -p 127.0.0.1:8080:8080 \\\n  libsql/sqld:latest\n```\n\n----------------------------------------\n\nTITLE: Request/Response Message Types\nDESCRIPTION: Type definitions for the main request/response message structure used after initial handshake. Includes request ID handling and error response format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RequestMsg = {\n    \"type\": \"request\",\n    \"request_id\": int32,\n    \"request\": Request,\n}\n\ntype ResponseOkMsg = {\n    \"type\": \"response_ok\",\n    \"request_id\": int32,\n    \"response\": Response,\n}\n\ntype ResponseErrorMsg = {\n    \"type\": \"response_error\",\n    \"request_id\": int32,\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Building SQLite on Unix-like Systems\nDESCRIPTION: Commands to build SQLite from source on Unix-like systems using configure and make.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/README-SQLite.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntar xzf sqlite.tar.gz    ;#  Unpack the source tree into \"sqlite\"\nmkdir bld                ;#  Build will occur in a sibling directory\ncd bld                   ;#  Change to the build directory\n../sqlite/configure      ;#  Run the configure script\nmake                     ;#  Run the makefile.\nmake sqlite3.c           ;#  Build the \"amalgamation\" source file\nmake test                ;#  Run some tests (requires Tcl)\n```\n\n----------------------------------------\n\nTITLE: Adding Homebrew Tap for Sqld\nDESCRIPTION: Command to add the libsql/sqld tap to Homebrew, which is required before installing sqld via Homebrew on macOS or Linux systems.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap libsql/sqld\n```\n\n----------------------------------------\n\nTITLE: Visualizing Overlap with Translated Query Polygon in SQL\nDESCRIPTION: This SQL query translates the query polygon, updates the visualization, and generates an SVG representation of the overlapping polygons. It demonstrates the use of geopoly_xform for translation and geopoly_overlap for checking intersections.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\n.print '<h1>Overlap With Translated Query Polygon</h1>'\nUPDATE querypoly SET poly=geopoly_xform(poly,1,0,0,1,300,0);\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1\n WHERE geopoly_overlap(_shape,(SELECT poly FROM querypoly));\nSELECT geopoly_svg(poly,'style=\"fill:none;stroke:black;stroke-width:2\"')\n  FROM querypoly;\nROLLBACK;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Building SQLite on Windows using Microsoft Visual C++\nDESCRIPTION: Command for building SQLite on Windows platforms using Microsoft Visual C++ with the provided Makefile.msc file.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnmake /f Makefile.msc\n```\n\n----------------------------------------\n\nTITLE: Running pgbench Performance Test\nDESCRIPTION: Executes a pgbench performance test using a custom script with 10 concurrent clients (-c 10) and 1000 transactions per client (-t 1000).\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-server/perf/pgbench/README.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npgbench -h 127.0.0.1 -p 5432 -f pg_bench_script.sql -c 10 -t 1000\n```\n\n----------------------------------------\n\nTITLE: Setting NULL Representation with --null Command\nDESCRIPTION: The --null command changes the text used to represent SQL NULL values in the result buffer.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n--null <text>\n```\n\n----------------------------------------\n\nTITLE: Running Sqld from Local Build\nDESCRIPTION: Command to run the locally built sqld binary. By default, it stores data in './data.sqld' and listens for HTTP connections on port 8080.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./target/debug/sqld\n```\n\n----------------------------------------\n\nTITLE: Stream Operation Type Definitions\nDESCRIPTION: Type definitions for opening and closing stream operations, including stream ID handling and response structures.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype OpenStreamReq = {\n    \"type\": \"open_stream\",\n    \"stream_id\": int32,\n}\n\ntype OpenStreamResp = {\n    \"type\": \"open_stream\",\n}\n\ntype CloseStreamReq = {\n    \"type\": \"close_stream\",\n    \"stream_id\": int32,\n}\n\ntype CloseStreamResp = {\n    \"type\": \"close_stream\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing F2FS Atomic Transaction Commit in C\nDESCRIPTION: Demonstrates SQLite's implementation of the F2FS atomic commit process. The code first acquires a write lock, starts an atomic write operation, writes all dirty pages, and then commits the transaction. Includes error handling with fallback to legacy journal commit.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/F2FS.txt#2025-04-11_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Take an F_WRLCK lock on the database file. This prevents any other\n** SQLite clients from reading or writing the file until the lock\n** is released.  */\nrc = fcntl(fd, F_SETLK, ...);\nif( rc!=0 ) goto failed;\n\nrc = ioctl(fd, F2FS_IOC_START_ATOMIC_WRITE);\nif( rc!=0 ) goto fallback_to_legacy_journal_commit;\n\nforeach (dirty page){\n  rc = write(fd, ...dirty page...);\n  if( rc!=0 ){\n    ioctl(fd, F2FS_IOC_ABORT_VOLATILE_WRITE);\n    goto fallback_to_legacy_journal_commit;\n  }\n}\n\nrc = ioctl(fd, F2FS_IOC_COMMIT_ATOMIC_WRITE);\nif( rc!=0 ){\n  ioctl(fd, F2FS_IOC_ABORT_VOLATILE_WRITE);\n  goto fallback_to_legacy_journal_commit;\n}\n\n/* If we get there, the transaction has been successfully \n** committed to persistent storage. The following call\n** relinquishes the F_WRLCK lock.  */\nfcntl(fd, F_SETLK, ...);\n```\n\n----------------------------------------\n\nTITLE: Handling Incremental Snapshots with Bash Script\nDESCRIPTION: This Bash script is executed by sqld when an incremental snapshot is generated, allowing for custom handling of snapshot files.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/USER_GUIDE.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nSNAPSHOT_FILE=\"$1\"\nNAMESPACE=\"$2\"\n\necho \"Generated incremental snapshot $SNAPSHOT_FILE for namespace $NAMESPACE\"\n\n# At this point we can ship the snapshot file to wherever we would like but we\n# must delete it from its location on disk or else sqld will panic.\nrm $SNAPSHOT_FILE\n```\n\n----------------------------------------\n\nTITLE: Performing and Visualizing Negative Overlap Query in SQL\nDESCRIPTION: Executes and visualizes a negative spatial overlap query to find polygons that do not overlap with the query polygon. Uses the NOT operator with geopoly_overlap function and generates an SVG visualization of the results.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Not Overlap Query</h1>'\n.print '<pre>'\n.print 'SELECT *'\n.print '  FROM geo1, querypoly'\n.print ' WHERE NOT geopoly_overlap(_shape, poly);'\n.print \nEXPLAIN QUERY PLAN\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE NOT geopoly_overlap(_shape, poly);\n.print '</pre>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1, querypoly\n WHERE NOT geopoly_overlap(_shape, poly);\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Watching Rust Tests with Automatic Re-execution\nDESCRIPTION: Command to continuously watch for file changes and automatically re-run tests when changes are detected. Uses cargo-watch to monitor the project and executes tests with visible output enabled.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/crr/rs/integration_check/notes.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo watch \"test -- --nocapture\"\n```\n\n----------------------------------------\n\nTITLE: Verifying JSON Content in SQLite Database\nDESCRIPTION: SQL queries to verify the size and validity of JSON content in the test database. These commands check the total length of JSON data and ensure all entries are valid JSON.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sum(length(x)) FROM data1;\nSELECT * FROM data1 WHERE NOT json_valid(x);\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Test Script Interpreter with Default Settings\nDESCRIPTION: The default initialization sequence for the SQLite Test Script Interpreter that closes all connections, sets the default database connection, creates a new test database, and configures NULL display.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/tester/test-script-interpreter.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--close all\n--db 0\n--new test.db\n--null nil\n```\n\n----------------------------------------\n\nTITLE: Starting sqld with Bottomless Replication\nDESCRIPTION: Command to start sqld server with bottomless replication enabled, listening on a specific HTTP address\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-server/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsqld --http-listen-addr=127.0.0.1:8000 --enable-bottomless-replication\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Request and Response Types in TypeScript\nDESCRIPTION: Specifies the structure for batch execution requests and responses. The request includes a stream ID and batch details, while the response contains the batch execution result.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchReq = {\n    \"type\": \"batch\",\n    \"stream_id\": int32,\n    \"batch\": Batch,\n}\n\ntype BatchResp = {\n    \"type\": \"batch\",\n    \"result\": BatchResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Hello Message Type Definitions\nDESCRIPTION: Type definitions for the initial hello handshake messages, including authentication via JWT. Defines the structure for client hello request and server responses.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype HelloMsg = {\n    \"type\": \"hello\",\n    \"jwt\": string | null,\n}\n\ntype HelloOkMsg = {\n    \"type\": \"hello_ok\",\n}\n\ntype HelloErrorMsg = {\n    \"type\": \"hello_error\",\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring JSON Parsing Speed in SQLite\nDESCRIPTION: SQL script to measure the speed of JSON parsing in SQLite. It uses a recursive CTE to process the JSON data multiple times and calculates the total time taken, which can be used to estimate parsing speed in MB/s.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n.open json100mb.db\n.timer on\nWITH RECURSIVE c(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c WHERE n<25)\nSELECT sum(json_valid(x)) FROM c, data1;\n```\n\n----------------------------------------\n\nTITLE: SQLite Geopoly Virtual Table Test Case Setup\nDESCRIPTION: This script serves as a visual test case for the geopoly virtual table in SQLite. It's designed to be run in the sqlite3 CLI with output redirected to an HTML file for browser viewing.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n#!sqlite3\n#\n# This is a visual test case for the geopoly virtual table.\n#\n# Run this script in the sqlite3 CLI, and redirect output into an\n# HTML file.  This display the HTML in a webbrowser.\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Including Permutations\nDESCRIPTION: Command to run all tests, including both the full test set and all defined permutations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl all\n```\n\n----------------------------------------\n\nTITLE: Library Target Configuration\nDESCRIPTION: Configures the main SQLite3MC library target with include directories, compile definitions, and linking options. Handles both static and shared library builds.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${SQLITE3MC_TARGET} ${SQLITE3MC_LINK}\n  ${SQLITE3MC_BASE_SRCS}\n)\ntarget_include_directories(${SQLITE3MC_TARGET} PRIVATE\n  ${SQLITE3MC_INCLUDEDIRS}\n)\ntarget_compile_definitions(${SQLITE3MC_TARGET} PRIVATE\n  ${_LIB_DIFINITIONS}\n  ${_DEFAULT_DEFINITIONS}\n  ${SQLITE3MC_BASE_DEFINITIONS}\n  ${SQLITE3MC_LIBONLY_DEFINITIONS}\n  ${SQLITE3MC_ZLIB_DEFINITIONS}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Rust Tests with Visible Output\nDESCRIPTION: Command to run Rust tests for the libsql project with visible test output shown in the terminal. The --nocapture flag ensures that print statements and other output are displayed during test execution.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/crr/rs/integration_check/notes.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Running Tests in libsql and libsql-server\nDESCRIPTION: Command to execute all tests for both libsql and libsql-server components\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-server/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo xtask test\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace HTTP Endpoint\nDESCRIPTION: HTTP POST endpoint for creating a new namespace with an optional dump_url parameter in the request body.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/ADMIN_API.md#2025-04-11_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/namespaces/:namespace/create\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dump_url\"?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying DLL Dependencies of SQLite Analyzer on Windows\nDESCRIPTION: Uses the dumpbin utility to check the dependencies of the compiled sqlite3_analyzer.exe, ensuring it doesn't depend on the TCL DLL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/compile-for-windows.md#2025-04-11_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\ndumpbin /dependents sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Defining Statement and Named Argument Types in TypeScript\nDESCRIPTION: Specifies the structure for SQL statements and named arguments. Statements include SQL text, optional arguments, and a flag for row retrieval. Named arguments consist of a name and value pair.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Stmt = {\n    \"sql\": string,\n    \"args\"?: Array<Value>,\n    \"named_args\"?: Array<NamedArg>,\n    \"want_rows\": boolean,\n}\n\ntype NamedArg = {\n    \"name\": string,\n    \"value\": Value,\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for SQL Statement Description in Hrana v2\nDESCRIPTION: Type definitions for DescribeReq and DescribeResp messages that enable parsing and analyzing SQL statements without execution, providing metadata about parameters and result columns.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeReq = {\n    \"type\": \"describe\",\n    \"stream_id\": int32,\n    \"sql\"?: string | null,\n    \"sql_id\"?: int32 | null,\n}\n\ntype DescribeResp = {\n    \"type\": \"describe\",\n    \"result\": DescribeResult,\n}\n```\n\n----------------------------------------\n\nTITLE: Running AFL Fuzzing Tests\nDESCRIPTION: Command to execute fuzzing tests with dictionary-based inputs, specifying input and output directories for the SQL parser\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/tools/fuzz/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo afl fuzz -i dicts -x dicts/sql.dict -o out target/debug/fuzz parser\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Emscripten SDK in Bash\nDESCRIPTION: Commands to clone the Emscripten repository, install the latest SDK tools, and activate them for the current user. This process needs to be done once, with updates possible using similar commands.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the emscripten repository:\n$ sudo apt install git\n$ git clone https://github.com/emscripten-core/emsdk.git\n$ cd emsdk\n\n# Download and install the latest SDK tools:\n$ ./emsdk install latest\n\n# Make the \"latest\" SDK \"active\" for the current user:\n$ ./emsdk activate latest\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Module in Rust\nDESCRIPTION: Command to run only the 'tableinfo' test module rather than the entire test suite. This allows targeted testing of specific functionality.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/crr/rs/integration_check/notes.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --test tableinfo\n```\n\n----------------------------------------\n\nTITLE: Installing Bottomless CLI Tool\nDESCRIPTION: Command to install the Bottomless command-line interface as a standalone executable using cargo with required Rust flags.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nRUSTFLAGS=\"--cfg uuid_unstable\" cargo install bottomless-cli\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Tests with sqlite3_checker\nDESCRIPTION: Command to run the test.tcl script using the sqlite3_checker tool. The command allows optionally specifying individual test modules as additional arguments.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/repair/test/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./sqlite3_checker --test $path/test.tcl\n```\n\n----------------------------------------\n\nTITLE: Opening Database with Custom WAL Methods\nDESCRIPTION: C function signature for opening a database connection with custom WAL methods.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint libsql_open(\n  const char *filename,   /* Database filename (UTF-8) */\n  sqlite3 **ppDb,         /* OUT: SQLite db handle */\n  int flags,              /* Flags */\n  const char *zVfs,       /* Name of VFS module to use, NULL for default */\n  const char *zWal        /* Name of WAL module to use, NULL for default */\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Conditions in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the BatchCond type for representing complex conditions for batch step execution, including logical operations and step result checks.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntype BatchCond =\n    | { \"type\": \"ok\", \"step\": uint32 }\n    | { \"type\": \"error\", \"step\": uint32 }\n    | { \"type\": \"not\", \"cond\": BatchCond }\n    | { \"type\": \"and\", \"conds\": Array<BatchCond> }\n    | { \"type\": \"or\", \"conds\": Array<BatchCond> }\n    | { \"type\": \"is_autocommit\" }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for SQL Column Description in Hrana v2\nDESCRIPTION: Type definition for DescribeCol which provides metadata about a result column from a SQL statement, including its name and declared type information when available.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype DescribeCol = {\n    \"name\": string,\n    \"decltype\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite with testrunner.tcl\nDESCRIPTION: Command to run the 'full' test suite using an existing testfixture binary.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl full\n```\n\n----------------------------------------\n\nTITLE: Optimizing SQLite Build Size with Custom CFLAGS\nDESCRIPTION: Example of overriding the default CFLAGS to optimize for size (-Os) when building SQLite, resulting in smaller binaries without debugging symbols.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ CFLAGS=\"-Os\" ./configure\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Headers for SQLite3 WASM/JS\nDESCRIPTION: These headers are required for the web server to properly serve WASM files and enable certain features like OPFS storage. They ensure proper cross-origin isolation for the application.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README-dist.txt#2025-04-11_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\n```\n\n----------------------------------------\n\nTITLE: Running althttpd for SQLite3 WASM/JS Demos\nDESCRIPTION: This command demonstrates how to run the althttpd web server to serve the SQLite3 WASM/JS demonstration applications. It enables Shared Array Buffers and sets the default page to index.html.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README-dist.txt#2025-04-11_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nalthttpd --enable-sab --page index.html\n```\n\n----------------------------------------\n\nTITLE: WAL Sync Implementation Example\nDESCRIPTION: Example C function demonstrating WAL synchronization between databases using libSQL WAL API.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nstatic void sync_db(sqlite3 *db_primary, sqlite3 *db_backup){\n  unsigned int max_frame;\n\n  libsql_wal_frame_count(db_primary, &max_frame);\n  libsql_wal_begin_commit(db_backup);\n  for(int i=1; i<=max_frame; i++){\n    char frame[4096+24];\n    libsql_wal_get_frame(db_primary, i, frame, sizeof(frame));\n    int conflict;\n    libsql_wal_insert_frame(db_backup, i, frame, sizeof(frame), &conflict);\n  }\n  libsql_wal_end_commit(db_backup);\n}\n```\n\n----------------------------------------\n\nTITLE: Hrana v3 Protobuf Support Check Endpoint\nDESCRIPTION: HTTP endpoint for checking server support of Hrana protocol version 3 with Protobuf encoding.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nGET v3-protobuf\n```\n\n----------------------------------------\n\nTITLE: Running Sqld Tests\nDESCRIPTION: Command to run the test suite for sqld using the project's custom xtask command. This verifies that the build is working correctly.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/BUILD-RUN.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncargo xtask test\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for Enhanced Column Structure in Hrana v2\nDESCRIPTION: Updated type definition for Col that adds the decltype field to provide information about the declared type of result columns when available from the database schema.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_2_SPEC.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Col = {\n    \"name\": string | null,\n    \"decltype\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Parser API Changes\nDESCRIPTION: Documentation of API changes in the Rust implementation compared to the original C version, noting the removal of ParseAlloc/ParseFree functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/sqlite3-parser/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* No `ParseAlloc`/`ParseFree` anymore\n```\n\n----------------------------------------\n\nTITLE: Building sqlite3_checker Tool in libsql\nDESCRIPTION: Command to build the sqlite3_checker tool required for running SQLite tests in the libsql project.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/repair/test/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sqlite3_checker\n```\n\n----------------------------------------\n\nTITLE: Running testrunner.tcl with Default Job Settings in Bash\nDESCRIPTION: This snippet demonstrates running testrunner.tcl with default job settings, which automatically detects and uses the number of real cores on the machine.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\n$ ./testfixture $TESTDIR/testrunner.tcl\nsplitting work across 16 jobs\n... more output ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Thread Safety in SQLite Compilation\nDESCRIPTION: Example of using CFLAGS to set SQLite compilation parameters, specifically disabling thread safety while optimizing for size.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ CFLAGS=\"-Os -DSQLITE_THREADSAFE=0\" ./configure\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL Database Schema for pgbench\nDESCRIPTION: Command to initialize the database schema required for pgbench testing by executing the pg_bench_schema.sql script against a local PostgreSQL instance.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-server/perf/pgbench/README.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npsql -h 127.0.0.1 -p 5432 < pg_bench_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Installing bottomless-cli Tool\nDESCRIPTION: Command to install the bottomless-cli tool using cargo with required RUSTFLAGS configuration\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-server/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS='--cfg uuid_unstable' cargo install bottomless-cli\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into xyoff Table in SQL\nDESCRIPTION: Inserts coordinate data into the xyoff table, which will be used to create polygon geometries. Each row contains values for id1, id2, x-offset, and y-offset that will be used in geometric transformations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/rtree/visual01.txt#2025-04-11_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO xyoff VALUES(6,4,120,538);\nINSERT INTO xyoff VALUES(6,4,403,663);\nINSERT INTO xyoff VALUES(6,4,477,677);\nINSERT INTO xyoff VALUES(6,4,690,154);\nINSERT INTO xyoff VALUES(6,4,606,498);\nINSERT INTO xyoff VALUES(6,4,430,665);\nINSERT INTO xyoff VALUES(6,4,499,273);\nINSERT INTO xyoff VALUES(7,1,118,526);\nINSERT INTO xyoff VALUES(7,1,817,522);\nINSERT INTO xyoff VALUES(7,1,388,638);\nINSERT INTO xyoff VALUES(7,1,181,265);\nINSERT INTO xyoff VALUES(7,1,442,332);\nINSERT INTO xyoff VALUES(7,1,475,282);\nINSERT INTO xyoff VALUES(7,1,722,633);\nINSERT INTO xyoff VALUES(7,1,104,394);\nINSERT INTO xyoff VALUES(7,1,631,262);\nINSERT INTO xyoff VALUES(7,1,372,392);\nINSERT INTO xyoff VALUES(7,2,600,413);\nINSERT INTO xyoff VALUES(7,2,386,223);\nINSERT INTO xyoff VALUES(7,2,839,174);\nINSERT INTO xyoff VALUES(7,2,293,410);\nINSERT INTO xyoff VALUES(7,2,281,391);\nINSERT INTO xyoff VALUES(7,2,859,387);\nINSERT INTO xyoff VALUES(7,2,478,347);\nINSERT INTO xyoff VALUES(7,2,646,690);\nINSERT INTO xyoff VALUES(7,2,713,234);\nINSERT INTO xyoff VALUES(7,2,199,588);\nINSERT INTO xyoff VALUES(7,3,389,256);\nINSERT INTO xyoff VALUES(7,3,349,542);\nINSERT INTO xyoff VALUES(7,3,363,345);\nINSERT INTO xyoff VALUES(7,3,751,302);\nINSERT INTO xyoff VALUES(7,3,423,386);\nINSERT INTO xyoff VALUES(7,3,267,444);\nINSERT INTO xyoff VALUES(7,3,243,182);\nINSERT INTO xyoff VALUES(7,3,453,658);\nINSERT INTO xyoff VALUES(7,3,126,345);\nINSERT INTO xyoff VALUES(7,3,120,472);\nINSERT INTO xyoff VALUES(7,4,359,654);\nINSERT INTO xyoff VALUES(7,4,339,516);\nINSERT INTO xyoff VALUES(7,4,710,452);\nINSERT INTO xyoff VALUES(7,4,810,560);\nINSERT INTO xyoff VALUES(7,4,644,692);\nINSERT INTO xyoff VALUES(7,4,826,327);\nINSERT INTO xyoff VALUES(7,4,465,462);\nINSERT INTO xyoff VALUES(7,4,310,456);\nINSERT INTO xyoff VALUES(7,4,577,613);\nINSERT INTO xyoff VALUES(7,4,502,555);\nINSERT INTO xyoff VALUES(8,1,601,620);\nINSERT INTO xyoff VALUES(8,1,372,683);\nINSERT INTO xyoff VALUES(8,1,758,399);\nINSERT INTO xyoff VALUES(8,1,485,552);\nINSERT INTO xyoff VALUES(8,1,159,563);\nINSERT INTO xyoff VALUES(8,1,536,303);\nINSERT INTO xyoff VALUES(8,1,122,263);\nINSERT INTO xyoff VALUES(8,1,836,435);\nINSERT INTO xyoff VALUES(8,1,544,146);\nINSERT INTO xyoff VALUES(8,1,270,277);\nINSERT INTO xyoff VALUES(8,2,849,281);\nINSERT INTO xyoff VALUES(8,2,563,242);\nINSERT INTO xyoff VALUES(8,2,704,463);\nINSERT INTO xyoff VALUES(8,2,102,165);\nINSERT INTO xyoff VALUES(8,2,797,524);\nINSERT INTO xyoff VALUES(8,2,612,426);\nINSERT INTO xyoff VALUES(8,2,345,372);\nINSERT INTO xyoff VALUES(8,2,820,376);\nINSERT INTO xyoff VALUES(8,2,789,156);\nINSERT INTO xyoff VALUES(8,2,321,466);\nINSERT INTO xyoff VALUES(8,3,150,332);\nINSERT INTO xyoff VALUES(8,3,136,152);\nINSERT INTO xyoff VALUES(8,3,468,528);\nINSERT INTO xyoff VALUES(8,3,409,192);\nINSERT INTO xyoff VALUES(8,3,820,216);\nINSERT INTO xyoff VALUES(8,3,847,249);\nINSERT INTO xyoff VALUES(8,3,801,267);\nINSERT INTO xyoff VALUES(8,3,181,670);\nINSERT INTO xyoff VALUES(8,3,398,563);\nINSERT INTO xyoff VALUES(8,3,439,576);\nINSERT INTO xyoff VALUES(8,4,123,309);\nINSERT INTO xyoff VALUES(8,4,190,496);\nINSERT INTO xyoff VALUES(8,4,571,531);\nINSERT INTO xyoff VALUES(8,4,290,255);\nINSERT INTO xyoff VALUES(8,4,244,412);\nINSERT INTO xyoff VALUES(8,4,264,596);\nINSERT INTO xyoff VALUES(8,4,253,420);\nINSERT INTO xyoff VALUES(8,4,847,536);\nINSERT INTO xyoff VALUES(8,4,120,288);\nINSERT INTO xyoff VALUES(8,4,331,639);\n```\n\n----------------------------------------\n\nTITLE: Defining Request and Response Message Types in TypeScript\nDESCRIPTION: Defines the structure of request and response messages used for client-server communication after authentication. Includes RequestMsg sent by the client and ResponseOkMsg or ResponseErrorMsg sent by the server in response.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RequestMsg = {\n    \"type\": \"request\",\n    \"request_id\": int32,\n    \"request\": Request,\n}\n\ntype ResponseOkMsg = {\n    \"type\": \"response_ok\",\n    \"request_id\": int32,\n    \"response\": Response,\n}\n\ntype ResponseErrorMsg = {\n    \"type\": \"response_error\",\n    \"request_id\": int32,\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Running mdevtest with Multiple Build Configurations\nDESCRIPTION: Command to run the mdevtest command, which tests two different --enable-all builds (with and without debugging).\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl mdevtest\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Preprocessor Defines with NMAKE\nDESCRIPTION: Examples of specifying SQLite preprocessor definitions using the OPTS macro with NMAKE. Shows both compatible options and those requiring pre-enabled features in the amalgamation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n\"OPTS=-DSQLITE_ENABLE_STAT4=1 -DSQLITE_OMIT_JSON=1\"\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"OPTS=-DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1\"\n```\n\n----------------------------------------\n\nTITLE: Changing Job Count During testrunner.tcl Execution in TCL\nDESCRIPTION: This snippet demonstrates how to change the number of jobs while testrunner.tcl is running by executing a command from the directory containing the testrunner.log and testrunner.db files.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_20\n\nLANGUAGE: TCL\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl njob $NEW_NUMBER_OF_JOBS\n```\n\n----------------------------------------\n\nTITLE: Building SQLite for WinRT 8.1 with Visual C++\nDESCRIPTION: NMAKE command with required macros for building SQLite for Windows Runtime 8.1 platform. Requires Microsoft Visual C++ 2013 or later.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nFOR_WINRT=1\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"NSDKLIBPATH=%WindowsSdkDir%\\..\\8.1\\lib\\winv6.3\\um\\x86\"\n```\n\n----------------------------------------\n\nTITLE: Building Fuzz Test Crate\nDESCRIPTION: Command to build the fuzzing test crate using cargo-afl\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/tools/fuzz/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo afl build\n```\n\n----------------------------------------\n\nTITLE: Running libSQL API tests with Cargo\nDESCRIPTION: Executes the test suite for the libSQL API project using Cargo's test runner.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql/DEVELOPING.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Adding NOT NULL and CHECK Constraints in SQL\nDESCRIPTION: Example of altering a column to add both NOT NULL and CHECK constraints using the ALTER TABLE ALTER COLUMN syntax.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t ALTER COLUMN v TO v NOT NULL CHECK(v < 42);\n```\n\n----------------------------------------\n\nTITLE: Cursor Opening Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for opening a cursor to execute batch statements with incremental result reading. Includes cursor_id for identification.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype OpenCursorReq = {\n    \"type\": \"open_cursor\",\n    \"stream_id\": int32,\n    \"cursor_id\": int32,\n    \"batch\": Batch,\n}\n\ntype OpenCursorResp = {\n    \"type\": \"open_cursor\",\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Build Scripts for Test Configurations\nDESCRIPTION: Commands to create build scripts for reproducing specific test configurations on Linux/OSX or Windows platforms.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Create a script that recreates build configuration \"Device-One\" on \n# Linux or OSX:\ntclsh $TESTDIR/testrunner.tcl script Device-One > make.sh \n\n# Create a script that recreates build configuration \"Have-Not\" on Windows:\ntclsh $TESTDIR/testrunner.tcl script Have-Not > make.bat \n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket for Bottomless WAL\nDESCRIPTION: Environment variable configuration to specify the S3 bucket used for data replication by the Bottomless WAL extension.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport LIBSQL_BOTTOMLESS_BUCKET='custom-bucket'\n```\n\n----------------------------------------\n\nTITLE: Running Test Status Check with testfixture\nDESCRIPTION: Command to check the status of currently running tests by querying the testrunner.db database file.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $(TESTDIR)/testrunner.tcl status\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Instructions for creating a Python virtual environment and installing required dependencies using pip\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/benchmark/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$> python -m venv .env\n$> source .env/bin/activate\n$> pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Descriptions from C for WebAssembly\nDESCRIPTION: This C code snippet demonstrates how to generate struct descriptions from C99 or later into static string memory for use with WebAssembly. It uses macros to create JSON output describing struct layouts, including member offsets and sizes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h> /* memset() */\n#include <stddef.h> /* offsetof() */\n#include <stdio.h>  /* snprintf() */\n#include <stdint.h> /* int64_t */\n#include <assert.h>\n\nstruct ExampleStruct {\n  int v4;\n  void * ppV;\n  int64_t v8;\n  void (*xFunc)(void*);\n};\ntypedef struct ExampleStruct ExampleStruct;\n\nconst char * wasm__ctype_json(void){\n  static char strBuf[512 * 8] = {0}\n    /* Static buffer which must be sized large enough for\n       our JSON. The string-generation macros try very\n       hard to assert() if this buffer is too small. */;\n  int n = 0, structCount = 0 /* counters for the macros */;\n  char * pos = &strBuf[1]\n    /* Write-position cursor. Skip the first byte for now to help\n       protect against a small race condition */;\n  char const * const zEnd = pos + sizeof(strBuf)\n    /* one-past-the-end cursor (virtual EOF) */;\n  if(strBuf[0]) return strBuf; // Was set up in a previous call.\n\n  ////////////////////////////////////////////////////////////////////\n  // First we need to build up our macro framework...\n\n  ////////////////////////////////////////////////////////////////////\n  // Core output-generating macros...\n#define lenCheck assert(pos < zEnd - 100)\n#define outf(format,...) \\\n  pos += snprintf(pos, ((size_t)(zEnd - pos)), format, __VA_ARGS__); \\\n  lenCheck\n#define out(TXT) outf(\"%s\",TXT)\n#define CloseBrace(LEVEL) \\\n  assert(LEVEL<5); memset(pos, '}', LEVEL); pos+=LEVEL; lenCheck\n\n  ////////////////////////////////////////////////////////////////////\n  // Macros for emiting StructBinders...\n#define StructBinder__(TYPE)                 \\\n  n = 0;                                     \\\n  outf(\"%s{\", (structCount++ ? \", \" : \"\"));  \\\n  out(\"\\\"name\\\": \\\"\" # TYPE \"\\\",\");          \\\n  outf(\"\\\"sizeof\\\": %d\", (int)sizeof(TYPE)); \\\n  out(\",\\\"members\\\": {\");\n#define StructBinder_(T) StructBinder__(T)\n// ^^^ extra indirection needed to expand CurrentStruct\n#define StructBinder StructBinder_(CurrentStruct)\n#define _StructBinder CloseBrace(2)\n#define M(MEMBER,SIG)                                         \\\n  outf(\"%s\\\"%s\\\": \"                                           \\\n       \"{\\\"offset\\\":%d,\\\"sizeof\\\": %d,\\\"signature\\\":\\\"%s\\\"}\", \\\n       (n++ ? \", \" : \"\"), #MEMBER,                            \\\n       (int)offsetof(CurrentStruct,MEMBER),                   \\\n       (int)sizeof(((CurrentStruct*)0)->MEMBER),              \\\n       SIG)\n  // End of macros.\n  ////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////\n  // With that out of the way, we can do what we came here to do.\n  out(\"\\\"structs\\\": [\"); {\n\n// For each struct description, do...\n#define CurrentStruct ExampleStruct\n    StructBinder {\n      M(v4,\"i\");\n      M(ppV,\"p\");\n      M(v8,\"j\");\n      M(xFunc,\"v(p)\");\n    } _StructBinder;\n#undef CurrentStruct\n\n  } out( \"]\"/*structs*/);\n  ////////////////////////////////////////////////////////////////////\n  // Done! Finalize the output...\n  out(\"}\"/*top-level wrapper*/);\n  *pos = 0;\n  strBuf[0] = '{'/*end of the race-condition workaround*/;\n  return strBuf;\n\n// If this file will ever be concatenated or #included with others,\n// it's good practice to clean up our macros:\n#undef StructBinder\n#undef StructBinder_\n#undef StructBinder__\n#undef M\n#undef _StructBinder\n#undef CloseBrace\n#undef out\n#undef outf\n#undef lenCheck\n}\n```\n\n----------------------------------------\n\nTITLE: Error Type Definition\nDESCRIPTION: Type definition for error messages that can be sent by the server, including both human-readable messages and machine-readable error codes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Error = {\n    \"message\": string,\n    \"code\"?: string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor Closing Request/Response Types in TypeScript\nDESCRIPTION: Type definitions for closing a previously opened cursor and releasing associated resources.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CloseCursorReq = {\n    \"type\": \"close_cursor\",\n    \"cursor_id\": int32,\n}\n\ntype CloseCursorResp = {\n    \"type\": \"close_cursor\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Request and Response Types in TypeScript\nDESCRIPTION: Defines TypeScript types for various stream requests and responses used in Hrana over HTTP. These types mirror the stream requests in Hrana over WebSocket and include operations like closing streams, executing statements, and managing SQL texts.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype StreamRequest =\n    | CloseStreamReq\n    | ExecuteStreamReq\n    | BatchStreamReq\n    | SequenceStreamReq\n    | DescribeStreamReq\n    | StoreSqlStreamReq\n    | CloseSqlStreamReq\n    | GetAutocommitStreamReq\n\ntype StreamResponse =\n    | CloseStreamResp\n    | ExecuteStreamResp\n    | BatchStreamResp\n    | SequenceStreamResp\n    | DescribeStreamResp\n    | StoreSqlStreamResp\n    | CloseSqlStreamResp\n    | GetAutocommitStreamReq\n```\n\n----------------------------------------\n\nTITLE: Building Test Binaries with testrunner.tcl in TCL\nDESCRIPTION: This snippet demonstrates how to use the --buildonly option with testrunner.tcl to build the binaries required for a release test without running the actual tests.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_16\n\nLANGUAGE: TCL\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl --buildonly release\n```\n\n----------------------------------------\n\nTITLE: Specifying Job Count for testrunner.tcl in Bash\nDESCRIPTION: This example shows how to use the --jobs (or -j) switch to override the default number of jobs used by testrunner.tcl, setting it to a specific value.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\n$ ./testfixture $TESTDIR/testrunner.tcl --jobs 8\nsplitting work across 8 jobs\n... more output ...\n```\n\n----------------------------------------\n\nTITLE: Running veryquick Test Set with testrunner.tcl\nDESCRIPTION: Commands to run the 'veryquick' subset of SQLite tests using an existing testfixture binary.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl\n./testfixture $TESTDIR/testrunner.tcl veryquick\n```\n\n----------------------------------------\n\nTITLE: Running libSQL API benchmarks with Cargo\nDESCRIPTION: Runs performance benchmarks for the libSQL API project using Cargo's benchmark feature.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql/DEVELOPING.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Building SQLite on Unix Systems using Autoconf/Automake\nDESCRIPTION: Basic command sequence for building SQLite on Unix systems using the autoconf/automake infrastructure. This uses the default configuration options and enables debugging symbols.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./configure; make\n```\n\n----------------------------------------\n\nTITLE: Building and Running LibSQL JavaScript Bindings\nDESCRIPTION: Commands to build the WASM package targeting Node.js and run the example JavaScript file. This process compiles the Rust code to WebAssembly for use with Node.js.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bindings/wasm/README.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwasm-pack build --target nodejs\nnode example.js\n```\n\n----------------------------------------\n\nTITLE: Defining Cursor Entry Types in TypeScript for Hrana Protocol\nDESCRIPTION: Defines the CursorEntry type and its variants for representing incremental results of batch execution, including step begin/end, rows, and errors.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype CursorEntry =\n    | StepBeginEntry\n    | StepEndEntry\n    | StepErrorEntry\n    | RowEntry\n    | ErrorEntry\n\ntype StepBeginEntry = {\n    \"type\": \"step_begin\",\n    \"step\": uint32,\n    \"cols\": Array<Col>,\n}\n\ntype StepEndEntry = {\n    \"type\": \"step_end\",\n    \"affected_row_count\": uint32,\n    \"last_insert_rowid\": string | null,\n}\n\ntype RowEntry = {\n    \"type\": \"row\",\n    \"row\": Array<Value>,\n}\n\ntype StepErrorEntry = {\n    \"type\": \"step_error\",\n    \"step\": uint32,\n    \"error\": Error,\n}\n\ntype ErrorEntry = {\n    \"type\": \"error\",\n    \"error\": Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Backtrace Environment Variable\nDESCRIPTION: Environment variable setting to control whether Rust displays backtraces on panics. Set to 0 to disable backtraces or 1 to enable them when tests or the application crash.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/crr/rs/integration_check/notes.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport RUST_BACKTRACE=0/1\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pattern Matching\nDESCRIPTION: Commands to run a subset of tests that match a specified pattern using string matching rules.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl fts5%\n./testfixture $TESTDIR/testrunner.tcl 'fts5*'\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Release Tests\nDESCRIPTION: Command to run the release tests but only for tests matching a specific pattern.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl release rtree%\n```\n\n----------------------------------------\n\nTITLE: Forking Namespace HTTP Endpoint\nDESCRIPTION: HTTP POST endpoint for creating a new namespace as a fork of an existing one.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/ADMIN_API.md#2025-04-11_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/namespaces/:namespace/fork/:to\n```\n\n----------------------------------------\n\nTITLE: Running Bottomless Smoke Test\nDESCRIPTION: Command to execute the smoke test script for Bottomless WAL implementation with a path to the libSQL directory.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/bottomless/README.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nLIBSQL_DIR=/path/to/your/libsql/directory make test\n```\n\n----------------------------------------\n\nTITLE: Direct Java Translation of SQLite Custom Collation Functions\nDESCRIPTION: This snippet illustrates a direct translation of the C custom collation functions to Java. It demonstrates why this approach is awkward in Java due to the separate handling of user data and callback functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/README.md#2025-04-11_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nint sqlite3_create_collation(sqlite3 db, String name, int eTextRep,\n                             Object pUserData, xCompareType xCompare);\n\nint sqlite3_create_collation_v2(sqlite3 db, String name, int eTextRep,\n                                Object pUserData,\n                                xCompareType xCompare, xDestroyType xDestroy);\n```\n\n----------------------------------------\n\nTITLE: Defining Cursor Request and Response Types in TypeScript\nDESCRIPTION: Specifies TypeScript types for cursor request and response bodies used in the v3/cursor endpoint. This endpoint executes a batch of statements on a stream using a cursor for streaming results.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype CursorReqBody = {\n    \"baton\": string | null,\n    \"batch\": Batch,\n}\n\ntype CursorRespBody = {\n    \"baton\": string | null,\n    \"base_url\": string | null,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Monotone Identifier with user_version\nDESCRIPTION: Historical example showing how Monotone set its identifier using the user_version PRAGMA before application_id became available. The user_version is stored at offset 60 instead of offset 68 in the database header.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/magic.txt#2025-04-11_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPRAGMA user_version=1598903374;\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test Script for Investigation\nDESCRIPTION: Command to run an individual test script directly when investigating a test failure.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $PATH_TO_SCRIPT\n```\n\n----------------------------------------\n\nTITLE: Running ZipVFS Tests\nDESCRIPTION: Command to build a zipvfs-enabled testfixture and run ZipVFS project tests.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl --zipvfs $PATH_TO_ZIPVFS\n```\n\n----------------------------------------\n\nTITLE: Running Release Tests with Multiple Configurations\nDESCRIPTION: Command to run the release command, which runs extensive tests under many different build configurations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl release\n```\n\n----------------------------------------\n\nTITLE: Deleting Namespace HTTP Endpoint\nDESCRIPTION: HTTP DELETE endpoint for removing an existing namespace.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/ADMIN_API.md#2025-04-11_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v1/namespaces/:namespace\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Source Files\nDESCRIPTION: Shell command to clean and build the SQLite source files, including sqlite3.c, sqlite3.h, and shell.c. This is a prerequisite for running performance tests.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake clean sqlite3.c\n```\n\n----------------------------------------\n\nTITLE: Defining Core Message Types in TypeScript\nDESCRIPTION: Core type definitions for client and server message types in the Hrana protocol. Defines the basic message structure for communication between client and server.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_1_SPEC.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ClientMsg =\n    | HelloMsg\n    | RequestMsg\n\ntype ServerMsg =\n    | HelloOkMsg\n    | HelloErrorMsg\n    | ResponseOkMsg\n    | ResponseErrorMsg\n```\n\n----------------------------------------\n\nTITLE: SQLite Shell-Specific Definitions\nDESCRIPTION: Configures definitions specific to the SQLite shell application including explain comments and virtual table support.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SQLITE3MC_SHELL_DEFINITIONS \n  $<$<BOOL:${SQLITE_SHELL_IS_UTF8}>:SQLITE_SHELL_IS_UTF8=1>\n  $<$<BOOL:${SQLITE_ENABLE_EXPLAIN_COMMENTS}>:SQLITE_ENABLE_EXPLAIN_COMMENTS=1>\n  $<$<BOOL:${SQLITE_ENABLE_DBPAGE_VTAB}>:SQLITE_ENABLE_DBPAGE_VTAB=1>\n  $<$<BOOL:${SQLITE_ENABLE_DBSTAT_VTAB}>:SQLITE_ENABLE_DBSTAT_VTAB=1>\n  $<$<BOOL:${SQLITE_ENABLE_STMTVTAB}>:SQLITE_ENABLE_STMTVTAB=1>\n  $<$<BOOL:${SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION}>:SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION=1>\n)\n```\n\n----------------------------------------\n\nTITLE: Running Permutation Test Script for Investigation\nDESCRIPTION: Command to run an individual test script with a specific permutation when investigating a test failure.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl $PERMUTATION $PATH_TO_SCRIPT\n```\n\n----------------------------------------\n\nTITLE: Running Combined SQLite and ZipVFS Tests\nDESCRIPTION: Command to test both SQLite and ZipVFS with multiple build configurations in a single command.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl --zipvfs $PATH_TO_ZIPVFS mdevtest\n```\n\n----------------------------------------\n\nTITLE: Updating Emscripten SDK in Bash\nDESCRIPTION: Commands to update an existing Emscripten SDK installation to the latest version. This process can be run periodically to keep the SDK up-to-date.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git pull\n$ ./emsdk install latest\n$ ./emsdk activate latest\n```\n\n----------------------------------------\n\nTITLE: Toggling Column Names in Output with --column-names Command\nDESCRIPTION: The --column-names command enables or disables the inclusion of column names in SQL execution output. It takes 0 or 1 as an argument to disable or enable the feature, respectively.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n--column-names <0|1>\n```\n\n----------------------------------------\n\nTITLE: Detecting F2FS Atomic Commit Support in C\nDESCRIPTION: Code snippet showing how SQLite determines whether a file supports F2FS atomic commits after opening a database file on Linux. It uses the F2FS_IOC_GET_FEATURES ioctl call to check for the F2FS_FEATURE_ATOMIC_WRITE flag.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/F2FS.txt#2025-04-11_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nu32 flags = 0;\nrc = ioctl(fd, F2FS_IOC_GET_FEATURES, &flags);\nif( rc==0 && (flags & F2FS_FEATURE_ATOMIC_WRITE) ){\n  /* File supports F2FS atomic commits */\n}else{\n  /* File does NOT support F2FS atomic commits */\n}\n```\n\n----------------------------------------\n\nTITLE: WAL Methods Registration Functions in C\nDESCRIPTION: Core functions for managing WAL method registration in libSQL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/libsql_extensions.md#2025-04-11_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n  libsql_wal_methods_find\n  libsql_wal_methods_register\n  libsql_wal_methods_unregister\n```\n\n----------------------------------------\n\nTITLE: Dry Run of mdevtest with testrunner.tcl in TCL\nDESCRIPTION: This example shows how to use the --dryrun option with testrunner.tcl to log the shell commands for the mdevtest without actually building binaries or running tests.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_17\n\nLANGUAGE: TCL\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl --dryrun mdevtest\n```\n\n----------------------------------------\n\nTITLE: Running Vector Search Benchmark\nDESCRIPTION: Example of generating test data and running vector search benchmarks with recall measurement\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/benchmark/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$> python workload.py recall_uniform 64 1000 1000 > recall_uniform.sql\n$> LD_LIBRARY_PATH=../.libs/ ./benchtest recall_uniform.sql recall_uniform.db\n$> # ./anntext [db path] [test name (used only for printed stats)] [ann query] [exact query]\n$> LD_LIBRARY_PATH=../.libs/ ./anntest recall_uniform.db 10-recall@10 \"SELECT rowid FROM vector_top_k('data_idx', ?, 10)\" \"SELECT id FROM data ORDER BY vector_distance_cos(emb, ?) LIMIT 10\"\nopen sqlite db at 'recall_uniform.db'\nready to perform 1000 queries with SELECT rowid FROM vector_top_k('data_idx', ?, 10) ann query and SELECT id FROM data ORDER BY vector_distance_cos(emb, ?) LIMIT 10 exact query\n88.91% 10-recall@10 (avg.)\n```\n\n----------------------------------------\n\nTITLE: Building SQLite with MSVC on Windows\nDESCRIPTION: Commands to build SQLite using Microsoft Visual C++ compiler on Windows systems.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/README-SQLite.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir bld\ncd bld\nnmake /f ..\\sqlite\\Makefile.msc TOP=..\\sqlite\nnmake /f ..\\sqlite\\Makefile.msc sqlite3.c TOP=..\\sqlite\nnmake /f ..\\sqlite\\Makefile.msc sqlite3.dll TOP=..\\sqlite\nnmake /f ..\\sqlite\\Makefile.msc sqlite3.exe TOP=..\\sqlite\nnmake /f ..\\sqlite\\Makefile.msc test TOP=..\\sqlite\n```\n\n----------------------------------------\n\nTITLE: Defining F2FS IOCTL Magic Numbers and Feature Flags in C\nDESCRIPTION: Defines the F2FS IOCTL magic number and various command codes used for atomic write operations in the SQLite OS layer. These constants are used when interacting with the F2FS filesystem for database operations.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/F2FS.txt#2025-04-11_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define F2FS_IOCTL_MAGIC        0xf5\n#define F2FS_IOC_START_ATOMIC_WRITE     _IO(F2FS_IOCTL_MAGIC, 1)\n#define F2FS_IOC_COMMIT_ATOMIC_WRITE    _IO(F2FS_IOCTL_MAGIC, 2)\n#define F2FS_IOC_START_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 3)\n#define F2FS_IOC_ABORT_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 5)\n#define F2FS_IOC_GET_FEATURES           _IOR(F2FS_IOCTL_MAGIC, 12, u32)\n#define F2FS_FEATURE_ATOMIC_WRITE       0x0004\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for RLemon Project\nDESCRIPTION: This CMake configuration sets up the build environment for the RLemon project. It specifies the minimum CMake version, defines the project name, sets the source files, and creates an executable target named 'rlemon'.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/sqlite3-parser/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\nproject(rlemon)\n\nset(SOURCE_FILES third_party/lemon/lemon.c)\nadd_executable(rlemon ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to JSONB in SQLite\nDESCRIPTION: SQL commands to convert JSON data to JSONB format in a SQLite database. This is part of the setup process for performance testing.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/test/json/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE data1 SET x=jsonb(x);\nVACUUM;\n```\n\n----------------------------------------\n\nTITLE: Running Basic Benchmark Test\nDESCRIPTION: Example of running benchtest tool against a SQL file and database, showing query execution times and statistics\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/benchmark/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$> LD_LIBRARY_PATH=../.libs/ ./benchtest queries.sql data.db\nopen queries file at queries.sql\nopen sqlite db at 'data.db'\nexecuted simple statement: 'CREATE TABLE t ( id INTEGER PRIMARY KEY, emb FLOAT32(4) );'\nexecuted simple statement: 'CREATE INDEX t_idx ON t ( libsql_vector_idx(emb) );'\nprepared statement: 'INSERT INTO t VALUES ( ?, vector(?) );'\ninserts (queries.sql):\n  insert: 710.25 micros (avg.), 4 (count)\n  size  : 0.2695 MB\n  reads : 1.00 (avg.), 4 (total)\n  writes: 1.00 (avg.), 4 (total)\nprepared statement: 'SELECT * FROM vector_top_k(\\'t_idx\\', vector(?), ?);'\nsearch (queries.sql):\n  select: 63.25 micros (avg.), 4 (count)\n  size  : 0.2695 MB\n  reads : 1.00 (avg.), 4 (total)\n```\n\n----------------------------------------\n\nTITLE: Building SQLite for UWP 10.0 with Visual C++\nDESCRIPTION: NMAKE command with required macros for building SQLite for Universal Windows Platform 10.0. Requires Microsoft Visual C++ 2015 or later and specifies paths to necessary libraries.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nFOR_WINRT=1 FOR_UWP=1\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"NSDKLIBPATH=%WindowsSdkDir%\\..\\10\\lib\\10.0.10586.0\\um\\x86\"\n\"PSDKLIBPATH=%WindowsSdkDir%\\..\\10\\lib\\10.0.10586.0\\um\\x86\"\n\"NUCRTLIBPATH=%UniversalCRTSdkDir%\\..\\10\\lib\\10.0.10586.0\\ucrt\\x86\"\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for User Authentication Table\nDESCRIPTION: The SQLite table schema that stores user authentication information. This table is automatically created when enabling authentication and stores usernames, admin status flags, and encrypted passwords.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/userauth/user-auth.txt#2025-04-11_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sqlite_user(\n  uname TEXT PRIMARY KEY,\n  isAdmin BOOLEAN,\n  pw BLOB\n) WITHOUT ROWID;\n```\n\n----------------------------------------\n\nTITLE: Helper Macro for MT Runtime Configuration\nDESCRIPTION: Defines a CMake macro to enable static runtime linking with MT/MTd flags for Windows builds.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(_Enable_MT _target)\n  target_compile_options(${_target} PRIVATE\n    $<$<CONFIG:Release>:/MT>$<$<CONFIG:Debug>:/MTd>\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Analyzer with Static TCL Linking on Windows\nDESCRIPTION: Compiles the sqlite3_analyzer.exe utility with static linking to the TCL library, eliminating the need for a separate TCL DLL.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/compile-for-windows.md#2025-04-11_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nnmake /f Makefile.msc CCOPTS=\"-DSTATIC_BUILD\" LIBTCL=\"tcl86s.lib netapi32.lib user32.lib\" sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Converting Struct Signatures for Emscripten Compatibility\nDESCRIPTION: Regular expression that converts struct member signatures to be compatible with Emscripten's addFunction() by removing non-type characters and normalizing pointer and char types to 'i'.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsignature.replace(/[^vipPsjfdcC]/g,'').replace(/[pPscC]/g,'i');\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: A comprehensive code of conduct document written in Markdown format that outlines community standards, enforcement procedures, and attribution details for the LibSQL project.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/CODE_OF_CONDUCT.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n[... content truncated for brevity ...]\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n```\n\n----------------------------------------\n\nTITLE: Building SQLite for Windows 10 SDK with Visual C++\nDESCRIPTION: NMAKE command for building SQLite targeting the Windows 10 SDK. Requires Microsoft Visual C++ 2015 or later with no additional macros needed.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nFOR_WIN10=1\n```\n\n----------------------------------------\n\nTITLE: SQLite3 WASM File Structure\nDESCRIPTION: This is a comprehensive file listing and description of the SQLite3 WASM implementation components. It includes core API files, worker implementations, VFS implementations, and build process files.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/api/README.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- sqlite3-api-prologue.js\n- ../common/whwasmutil.js\n- ../jaccwabyt/jaccwabyt.js\n- sqlite3-api-glue.js\n- <build>/sqlite3-api-build-version.js\n- sqlite3-api-oo1.js\n- sqlite3-api-worker1.js\n- sqlite3-worker1.js\n- sqlite3-worker1-promiser.js\n- sqlite3-v-helper.js\n- sqlite3-vfs-opfs.c-pp.js\n- sqlite3-opfs-async-proxy.js\n- sqlite3-vfs-opfs-sahpool.c-pp.js\n- sqlite3-api-cleanup.js\n```\n\n----------------------------------------\n\nTITLE: Unicode Case Mapping for Fullwidth Latin and Deseret Characters\nDESCRIPTION: Defines case folding mappings between uppercase and lowercase characters. Each line contains three components: the uppercase character code, mapping type 'C' (common case folding), and the lowercase character code, followed by a comment describing the character.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_8\n\nLANGUAGE: Plain Text\nCODE:\n```\nFF26; C; FF46; # FULLWIDTH LATIN CAPITAL LETTER F\nFF27; C; FF47; # FULLWIDTH LATIN CAPITAL LETTER G\nFF28; C; FF48; # FULLWIDTH LATIN CAPITAL LETTER H\nFF29; C; FF49; # FULLWIDTH LATIN CAPITAL LETTER I\nFF2A; C; FF4A; # FULLWIDTH LATIN CAPITAL LETTER J\nFF2B; C; FF4B; # FULLWIDTH LATIN CAPITAL LETTER K\nFF2C; C; FF4C; # FULLWIDTH LATIN CAPITAL LETTER L\nFF2D; C; FF4D; # FULLWIDTH LATIN CAPITAL LETTER M\nFF2E; C; FF4E; # FULLWIDTH LATIN CAPITAL LETTER N\nFF2F; C; FF4F; # FULLWIDTH LATIN CAPITAL LETTER O\nFF30; C; FF50; # FULLWIDTH LATIN CAPITAL LETTER P\nFF31; C; FF51; # FULLWIDTH LATIN CAPITAL LETTER Q\nFF32; C; FF52; # FULLWIDTH LATIN CAPITAL LETTER R\nFF33; C; FF53; # FULLWIDTH LATIN CAPITAL LETTER S\nFF34; C; FF54; # FULLWIDTH LATIN CAPITAL LETTER T\nFF35; C; FF55; # FULLWIDTH LATIN CAPITAL LETTER U\nFF36; C; FF56; # FULLWIDTH LATIN CAPITAL LETTER V\nFF37; C; FF57; # FULLWIDTH LATIN CAPITAL LETTER W\nFF38; C; FF58; # FULLWIDTH LATIN CAPITAL LETTER X\nFF39; C; FF59; # FULLWIDTH LATIN CAPITAL LETTER Y\nFF3A; C; FF5A; # FULLWIDTH LATIN CAPITAL LETTER Z\n10400; C; 10428; # DESERET CAPITAL LETTER LONG I\n10401; C; 10429; # DESERET CAPITAL LETTER LONG E\n10402; C; 1042A; # DESERET CAPITAL LETTER LONG A\n10403; C; 1042B; # DESERET CAPITAL LETTER LONG AH\n10404; C; 1042C; # DESERET CAPITAL LETTER LONG O\n10405; C; 1042D; # DESERET CAPITAL LETTER LONG OO\n10406; C; 1042E; # DESERET CAPITAL LETTER SHORT I\n10407; C; 1042F; # DESERET CAPITAL LETTER SHORT E\n10408; C; 10430; # DESERET CAPITAL LETTER SHORT A\n10409; C; 10431; # DESERET CAPITAL LETTER SHORT AH\n1040A; C; 10432; # DESERET CAPITAL LETTER SHORT O\n1040B; C; 10433; # DESERET CAPITAL LETTER SHORT OO\n1040C; C; 10434; # DESERET CAPITAL LETTER AY\n1040D; C; 10435; # DESERET CAPITAL LETTER OW\n1040E; C; 10436; # DESERET CAPITAL LETTER WU\n1040F; C; 10437; # DESERET CAPITAL LETTER YEE\n10410; C; 10438; # DESERET CAPITAL LETTER H\n10411; C; 10439; # DESERET CAPITAL LETTER PEE\n10412; C; 1043A; # DESERET CAPITAL LETTER BEE\n10413; C; 1043B; # DESERET CAPITAL LETTER TEE\n10414; C; 1043C; # DESERET CAPITAL LETTER DEE\n10415; C; 1043D; # DESERET CAPITAL LETTER CHEE\n10416; C; 1043E; # DESERET CAPITAL LETTER JEE\n10417; C; 1043F; # DESERET CAPITAL LETTER KAY\n10418; C; 10440; # DESERET CAPITAL LETTER GAY\n10419; C; 10441; # DESERET CAPITAL LETTER EF\n1041A; C; 10442; # DESERET CAPITAL LETTER VEE\n1041B; C; 10443; # DESERET CAPITAL LETTER ETH\n1041C; C; 10444; # DESERET CAPITAL LETTER THEE\n1041D; C; 10445; # DESERET CAPITAL LETTER ES\n1041E; C; 10446; # DESERET CAPITAL LETTER ZEE\n1041F; C; 10447; # DESERET CAPITAL LETTER ESH\n10420; C; 10448; # DESERET CAPITAL LETTER ZHEE\n10421; C; 10449; # DESERET CAPITAL LETTER ER\n10422; C; 1044A; # DESERET CAPITAL LETTER EL\n10423; C; 1044B; # DESERET CAPITAL LETTER EM\n10424; C; 1044C; # DESERET CAPITAL LETTER EN\n10425; C; 1044D; # DESERET CAPITAL LETTER ENG\n10426; C; 1044E; # DESERET CAPITAL LETTER OI\n10427; C; 1044F; # DESERET CAPITAL LETTER EW\n```\n\n----------------------------------------\n\nTITLE: Cloning SQLite Source with Fossil\nDESCRIPTION: Commands to clone and set up a local SQLite repository using the Fossil version control system.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/README-SQLite.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/sqlite ~/Fossils\ncd ~/sqlite\nfossil clone https://www.sqlite.org/src ~/Fossils/sqlite.fossil\nfossil open ~/Fossils/sqlite.fossil\n```\n\n----------------------------------------\n\nTITLE: Referencing SQLite tokenizer implementation in C\nDESCRIPTION: Link to the SQLite tokenizer C implementation that serves as the basis for the SQL lexer in this project.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/sqlite3-parser/src/lexer/README.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[tokenizer](http://www.sqlite.org/src/artifact?ci=trunk&filename=src/tokenize.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SQLite3mc Testing in C\nDESCRIPTION: This CMake snippet sets up a project for testing SQLite3mc. It specifies the minimum CMake version, defines the project name, finds the SQLite3mc package, creates an executable from 'main.c', and links it with the SQLite3mc library.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/conan/all/test_package/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.24.0)\nproject(test_sqlite3mc C)\n\nfind_package(sqlite3mc REQUIRED)\n\nadd_executable(${PROJECT_NAME}\n  main.c\n)\n\ntarget_link_libraries(${PROJECT_NAME}\n  sqlite3mc::sqlite3mc\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Struct Description\nDESCRIPTION: JSON description of the C struct layout including member offsets, sizes and type signatures required for the binding.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Foo\",\n  \"sizeof\": 16,\n  \"members\": {\n    \"member1\": {\"offset\": 0,\"sizeof\": 4,\"signature\": \"i\"},\n    \"member2\": {\"offset\": 4,\"sizeof\": 4,\"signature\": \"p\"},\n    \"member3\": {\"offset\": 8,\"sizeof\": 8,\"signature\": \"j\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Jaccwabyt Struct Binder Factory\nDESCRIPTION: Example of configuring the Jaccwabyt factory with required WASM environment settings including heap memory, allocator and deallocator functions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyBinder = StructBinderFactory({\n  // These config options are all required:\n  heap: WebAssembly.Memory instance or a function which returns\n        a Uint8Array or Int8Array view of the WASM memory,\n  alloc:   function(howMuchMemory){...},\n  dealloc: function(pointerToFree){...}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CJK Compatibility Ideographs in Unicode\nDESCRIPTION: This snippet shows the format used to define CJK Compatibility Ideographs in the Unicode Standard. Each line represents a single ideograph, specifying its code point, name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_56\n\nLANGUAGE: Unicode\nCODE:\n```\n2F93B;CJK COMPATIBILITY IDEOGRAPH-2F93B;Lo;0;L;24FA1;;;;N;;;;;\n2F93C;CJK COMPATIBILITY IDEOGRAPH-2F93C;Lo;0;L;24FB8;;;;N;;;;;\n2F93D;CJK COMPATIBILITY IDEOGRAPH-2F93D;Lo;0;L;25044;;;;N;;;;;\n2F93E;CJK COMPATIBILITY IDEOGRAPH-2F93E;Lo;0;L;3FFC;;;;N;;;;;\n2F93F;CJK COMPATIBILITY IDEOGRAPH-2F93F;Lo;0;L;4008;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Printing Indented Output with --print Command\nDESCRIPTION: The --print command emits both its arguments and its body (if any) to stdout, indenting each line of output.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-11_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n--print\n```\n\n----------------------------------------\n\nTITLE: Shell Executable Configuration\nDESCRIPTION: Sets up the build configuration for the SQLite3MC shell executable, including dependencies, compiler definitions, and installation targets.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(SQLITE3MC_BUILD_SHELL)\n  add_executable(${SQLITE3MC_SHELL_TARGET}\n    ${SQLITE3MC_SHELL_SRCS}\n  )\n  target_include_directories(${SQLITE3MC_SHELL_TARGET} PRIVATE\n    ${SQLITE3MC_INCLUDEDIRS}\n  )\n  target_compile_definitions(${SQLITE3MC_SHELL_TARGET} PRIVATE\n    ${_DEFAULT_DEFINITIONS}\n    ${SQLITE3MC_BASE_DEFINITIONS}\n    ${SQLITE3MC_SHELL_DEFINITIONS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: C Struct Definition Example\nDESCRIPTION: Example C struct definition that will be bound to JavaScript using Jaccwabyt.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct Foo {\n  int member1;\n  void * member2;\n  int64_t member3;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Variation Selectors 44-248\nDESCRIPTION: This snippet defines Unicode variation selectors from 44 to 248, including their code points, names, and properties. Each selector is specified as a non-spacing mark (Mn) with Nonspacing Mark (NSM) behavior.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_58\n\nLANGUAGE: Unicode\nCODE:\n```\nE011B;VARIATION SELECTOR-44;Mn;0;NSM;;;;;N;;;;;\nE011C;VARIATION SELECTOR-45;Mn;0;NSM;;;;;N;;;;;\nE011D;VARIATION SELECTOR-46;Mn;0;NSM;;;;;N;;;;;\n...\nE01E5;VARIATION SELECTOR-246;Mn;0;NSM;;;;;N;;;;;\nE01E6;VARIATION SELECTOR-247;Mn;0;NSM;;;;;N;;;;;\nE01E7;VARIATION SELECTOR-248;Mn;0;NSM;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Running sdevtest with Sanitizer Build\nDESCRIPTION: Command to run the sdevtest command, which is like mdevtest but uses a sanitizer build for the second configuration.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/testrunner.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl sdevtest\n```\n\n----------------------------------------\n\nTITLE: Setting TCL Directory Environment Variable in Windows Command Prompt\nDESCRIPTION: Sets the TCLDIR environment variable to point to the TCL installation directory, which is required for building SQLite.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/compile-for-windows.md#2025-04-11_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset TCLDIR=c:\\Tcl\n```\n\n----------------------------------------\n\nTITLE: Generating flamegraphs for libSQL API benchmarks\nDESCRIPTION: Configures system for performance profiling, then runs benchmarks with a 5-second profile time to generate flamegraphs. Requires sudo privileges to modify kernel parameters.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql/DEVELOPING.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\necho -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\ncargo bench --bench benchmark -- --profile-time=5\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Egyptian Hieroglyphs\nDESCRIPTION: Defines unicode properties for Egyptian hieroglyph characters. Each line contains the unicode code point, character name, general category (Lo - Letter Other), bidirectional class (L - Left-to-Right), and other character properties marked with N for No/None.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_40\n\nLANGUAGE: unicode-data\nCODE:\n```\n13154;EGYPTIAN HIEROGLYPH G018;Lo;0;L;;;;;N;;;;;\n13155;EGYPTIAN HIEROGLYPH G019;Lo;0;L;;;;;N;;;;;\n13156;EGYPTIAN HIEROGLYPH G020;Lo;0;L;;;;;N;;;;;\"\n```\n\n----------------------------------------\n\nTITLE: Building SQLite for WinRT 8.0 with Visual C++\nDESCRIPTION: NMAKE command with required macros for building SQLite for Windows Runtime 8.0 platform. Requires Microsoft Visual C++ 2012 or later.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/autoconf/README.txt#2025-04-11_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nFOR_WINRT=1\n```\n\nLANGUAGE: Bash\nCODE:\n```\n\"NSDKLIBPATH=%WindowsSdkDir%\\..\\8.0\\lib\\win8\\um\\x86\"\n```\n\n----------------------------------------\n\nTITLE: Defining Yi Syllable Unicode Mappings\nDESCRIPTION: This code snippet defines Unicode mappings for Yi syllables. Each line follows the format: codepoint;character name;general category;canonical combining class;bidirectional class;decomposition type and mapping;numeric type;numeric value;bidi mirrored;Unicode 1.0 name;ISO comment;simple uppercase mapping;simple lowercase mapping;simple titlecase mapping.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_31\n\nLANGUAGE: Unicode\nCODE:\n```\nA094;YI SYLLABLE HMIP;Lo;0;L;;;;;N;;;;;\nA095;YI SYLLABLE HMIEX;Lo;0;L;;;;;N;;;;;\nA096;YI SYLLABLE HMIE;Lo;0;L;;;;;N;;;;;\nA097;YI SYLLABLE HMIEP;Lo;0;L;;;;;N;;;;;\nA098;YI SYLLABLE HMAT;Lo;0;L;;;;;N;;;;;\nA099;YI SYLLABLE HMAX;Lo;0;L;;;;;N;;;;;\nA09A;YI SYLLABLE HMA;Lo;0;L;;;;;N;;;;;\nA09B;YI SYLLABLE HMAP;Lo;0;L;;;;;N;;;;;\nA09C;YI SYLLABLE HMUOX;Lo;0;L;;;;;N;;;;;\nA09D;YI SYLLABLE HMUO;Lo;0;L;;;;;N;;;;;\nA09E;YI SYLLABLE HMUOP;Lo;0;L;;;;;N;;;;;\nA09F;YI SYLLABLE HMOT;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Case Mapping Definitions\nDESCRIPTION: Character mapping definitions in the format: code point; type; target code point(s); # character description. Each line maps a capital letter to its lowercase equivalent using hexadecimal Unicode code points. The middle column 'C' indicates a simple case mapping, while 'F' indicates a folding operation.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_4\n\nLANGUAGE: Plain Text\nCODE:\n```\n04C9; C; 04CA; # CYRILLIC CAPITAL LETTER EN WITH TAIL\n04CB; C; 04CC; # CYRILLIC CAPITAL LETTER KHAKASSIAN CHE\n04CD; C; 04CE; # CYRILLIC CAPITAL LETTER EM WITH TAIL\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters with Properties\nDESCRIPTION: This snippet shows the format used to define Unicode characters. Each line represents a character with its hexadecimal code, name, and various properties such as category, bidirectional class, and decomposition mapping.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_24\n\nLANGUAGE: Unicode\nCODE:\n```\n265B;BLACK CHESS QUEEN;So;0;ON;;;;;N;;;;;\n265C;BLACK CHESS ROOK;So;0;ON;;;;;N;;;;;\n265D;BLACK CHESS BISHOP;So;0;ON;;;;;N;;;;;\n265E;BLACK CHESS KNIGHT;So;0;ON;;;;;N;;;;;\n265F;BLACK CHESS PAWN;So;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Hrana v3 JSON Support Check Endpoint\nDESCRIPTION: HTTP endpoint for checking server support of Hrana protocol version 3 with JSON encoding.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/docs/HRANA_3_SPEC.md#2025-04-11_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET v3\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definition List\nDESCRIPTION: Defines Unicode characters with their code points, names, categories and properties. Each line contains a hexadecimal code point followed by character name, general category, directional properties and other attributes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n0788;THAANA LETTER VAAVU;Lo;0;AL;;;;;N;;;;;\n0789;THAANA LETTER MEEMU;Lo;0;AL;;;;;N;;;;;\n07A5;THAANA LETTER WAAVU;Lo;0;AL;;;;;N;;;;;\n07C0;NKO DIGIT ZERO;Nd;0;R;;0;0;0;N;;;;;\n0800;SAMARITAN LETTER ALAF;Lo;0;R;;;;;N;;;;;\n0840;MANDAIC LETTER HALQA;Lo;0;R;;;;;N;;;;;\n08A0;ARABIC LETTER BEH WITH SMALL V BELOW;Lo;0;AL;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Mathematical and Technical Symbol Definitions\nDESCRIPTION: Defines unicode code points for mathematical operators, comparison symbols, set notation, and technical symbols. Each line contains the code point, symbol name, and various unicode properties in a semicolon-delimited format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_21\n\nLANGUAGE: unicode\nCODE:\n```\n2250;APPROACHES THE LIMIT;Sm;0;ON;;;;;N;;;;;\n2251;GEOMETRICALLY EQUAL TO;Sm;0;ON;;;;;N;;;;;\n2252;APPROXIMATELY EQUAL TO OR THE IMAGE OF;Sm;0;ON;;;;;Y;;;;;\n2253;IMAGE OF OR APPROXIMATELY EQUAL TO;Sm;0;ON;;;;;Y;;;;;\n/* Additional lines omitted for brevity */\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Cuneiform Character Properties\nDESCRIPTION: Character definition entries for Cuneiform script Unicode block, following the standard Unicode character database format. Each line defines properties like code point, character name, general category, bidirectional class, and other Unicode properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\n1216B;CUNEIFORM SIGN KA TIMES GU;Lo;0;L;;;;;N;;;;;\n1216C;CUNEIFORM SIGN KA TIMES GUR7;Lo;0;L;;;;;N;;;;;\n1216D;CUNEIFORM SIGN KA TIMES IGI;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Referencing FallibleStreamingIterator trait in Rust\nDESCRIPTION: Reference to the FallibleStreamingIterator trait from the fallible-streaming-iterator crate that is relevant to the scanner implementation. This trait allows for iteration that can fail and provides access to only one element at a time.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/sqlite3-parser/src/lexer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[FallibleStreamingIterator](https://docs.rs/fallible-streaming-iterator/0.1.5/fallible_streaming_iterator/trait.FallibleStreamingIterator.html)\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Data\nDESCRIPTION: Defines Unicode code points for Latin characters including their properties, case mappings, and descriptions. Each line contains fields separated by semicolons specifying the hexadecimal code point, character name, category, and related attributes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0204;LATIN CAPITAL LETTER E WITH DOUBLE GRAVE;Lu;0;L;0045 030F;;;;N;;;;0205;\n0205;LATIN SMALL LETTER E WITH DOUBLE GRAVE;Ll;0;L;0065 030F;;;;N;;;0204;;0204\n0206;LATIN CAPITAL LETTER E WITH INVERTED BREVE;Lu;0;L;0045 0311;;;;N;;;;0207;\n```\n\n----------------------------------------\n\nTITLE: Referencing Rust's Bytes struct\nDESCRIPTION: Reference to the Bytes struct from Rust's standard library, which is mentioned as unsuitable for this implementation because it would require copying token bytes twice.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/vendored/sqlite3-parser/src/lexer/README.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Bytes](https://doc.rust-lang.org/std/io/struct.Bytes.html)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for VAI and Cyrillic Scripts\nDESCRIPTION: This code snippet defines Unicode characters for VAI syllables, symbols, digits, and Cyrillic letters. Each line represents a character with its code point, name, and various properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_33\n\nLANGUAGE: Unicode\nCODE:\n```\nA58E;VAI SYLLABLE YOO;Lo;0;L;;;;;N;;;;;\nA58F;VAI SYLLABLE KOO;Lo;0;L;;;;;N;;;;;\nA590;VAI SYLLABLE NGGOO;Lo;0;L;;;;;N;;;;;\n// ... (truncated for brevity)\nA67A;COMBINING CYRILLIC LETTER SOFT SIGN;Mn;230;NSM;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definition Format\nDESCRIPTION: Defines the structure used for Unicode character mappings. Each line contains fields separated by semicolons: code point, character name, general category, bidirectional class, compatibility mapping, and additional properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_28\n\nLANGUAGE: Unicode\nCODE:\n```\n310A;BOPOMOFO LETTER T;Lo;0;L;;;;;N;;;;;\n310B;BOPOMOFO LETTER N;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining CJK Compatibility Ideograph Properties in Unicode\nDESCRIPTION: This snippet shows the structure used to define properties for CJK Compatibility Ideographs. It includes the Unicode codepoint, name, general category, bidirectional class, decomposition mapping, and numeric value (if applicable).\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_34\n\nLANGUAGE: Unicode\nCODE:\n```\nF96E;CJK COMPATIBILITY IDEOGRAPH-F96E;Lo;0;L;8449;;;;N;;;;;\nF96F;CJK COMPATIBILITY IDEOGRAPH-F96F;Lo;0;L;8AAA;;;;N;;;;;\nF970;CJK COMPATIBILITY IDEOGRAPH-F970;Lo;0;L;6BBA;;;;N;;;;;\nF971;CJK COMPATIBILITY IDEOGRAPH-F971;Lo;0;L;8FB0;;;;N;;;;;\nF972;CJK COMPATIBILITY IDEOGRAPH-F972;Lo;0;L;6C88;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining CJK and Kangxi Radicals in Unicode\nDESCRIPTION: This snippet defines Unicode characters for CJK and Kangxi radicals. Each line represents a single character, specifying its hexadecimal code, name, category, and various Unicode properties. These definitions are crucial for proper character rendering and processing in systems supporting CJK languages.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_27\n\nLANGUAGE: Unicode\nCODE:\n```\n2EAB;CJK RADICAL EYE;So;0;ON;;;;;N;;;;;\n2EAC;CJK RADICAL SPIRIT ONE;So;0;ON;;;;;N;;;;;\n2EAD;CJK RADICAL SPIRIT TWO;So;0;ON;;;;;N;;;;;\n...\n2F6C;KANGXI RADICAL EYE;So;0;ON;<compat> 76EE;;;;N;;;;;\n2F6D;KANGXI RADICAL SPEAR;So;0;ON;<compat> 77DB;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Rust Code Comment Question About Static Feature\nDESCRIPTION: A comment in the codebase questioning why a particular feature is declared as 'static'. This appears to be a development note or query about the implementation design.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/crr/rs/integration_check/notes.md#2025-04-11_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// why is it `static` feature?\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definition - Braille and Arrow Symbols\nDESCRIPTION: Character mapping file defining Unicode code points for Braille patterns (0x2889-0x28FF) and mathematical arrows (0x2900-0x2941). Each line contains semicolon-separated fields for code point, character name, category (So for Symbol Other, Sm for Symbol Math), directionality (L for Left-to-Right, ON for Other Neutrals), and other Unicode properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n2889;BRAILLE PATTERN DOTS-148;So;0;L;;;;;N;;;;;\n288A;BRAILLE PATTERN DOTS-248;So;0;L;;;;;N;;;;;\n288B;BRAILLE PATTERN DOTS-1248;So;0;L;;;;;N;;;;;\n[...additional lines omitted for brevity...]\n2940;ANTICLOCKWISE CLOSED CIRCLE ARROW;Sm;0;ON;;;;;N;;;;;\n2941;CLOCKWISE CLOSED CIRCLE ARROW;Sm;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Latin Extended Character Unicode Mappings\nDESCRIPTION: Character mapping table for Latin letters with diacritical marks, including uppercase and lowercase pairs with combining marks like macron, acute, grave, dots, etc. Each entry defines the character code, name, category, and case relationships.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n1E13;LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW;Ll;0;L;0064 032D;;;;N;;;1E12;;1E12\n1E14;LATIN CAPITAL LETTER E WITH MACRON AND GRAVE;Lu;0;L;0112 0300;;;;N;;;;1E15;\n1E15;LATIN SMALL LETTER E WITH MACRON AND GRAVE;Ll;0;L;0113 0300;;;;N;;;1E14;;1E14\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Cuneiform and Egyptian Hieroglyphs\nDESCRIPTION: Structured data mapping Unicode codepoints to ancient writing system characters. Each line contains semicolon-delimited fields defining the hexadecimal codepoint, character name, category (Nl for numeric, Po for punctuation, Lo for letter), directionality, and numeric value where applicable.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_39\n\nLANGUAGE: unicode-mapping\nCODE:\n```\n12437;CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM;Nl;0;L;;;;3;N;;;;;\n12438;CUNEIFORM NUMERIC SIGN FOUR BURU;Nl;0;L;;;;4;N;;;;;\n12439;CUNEIFORM NUMERIC SIGN FIVE BURU;Nl;0;L;;;;5;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Cuneiform Unicode Character Definitions\nDESCRIPTION: Unicode character mapping specifications for cuneiform signs including code points, character names, and properties. Each entry defines a unique cuneiform sign with its Unicode code point in hexadecimal format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_37\n\nLANGUAGE: Unicode\nCODE:\n```\n120AD;CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED;Lo;0;L;;;;;N;;;;;\n120AE;CUNEIFORM SIGN EZEN TIMES KU3;Lo;0;L;;;;;N;;;;;\n120AF;CUNEIFORM SIGN EZEN TIMES LA;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Case Mapping Definition Table\nDESCRIPTION: A comprehensive mapping table that defines how uppercase Unicode characters map to their lowercase equivalents. Each entry contains the uppercase character code point, mapping type (C=case mapping, F=folding, T=special Turkish mapping), and target lowercase character code point(s), followed by a comment with the character's name.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n0041; C; 0061; # LATIN CAPITAL LETTER A\n0042; C; 0062; # LATIN CAPITAL LETTER B\n0043; C; 0063; # LATIN CAPITAL LETTER C\n0044; C; 0064; # LATIN CAPITAL LETTER D\n0045; C; 0065; # LATIN CAPITAL LETTER E\n0046; C; 0066; # LATIN CAPITAL LETTER F\n0047; C; 0067; # LATIN CAPITAL LETTER G\n0048; C; 0068; # LATIN CAPITAL LETTER H\n0049; C; 0069; # LATIN CAPITAL LETTER I\n0049; T; 0131; # LATIN CAPITAL LETTER I\n004A; C; 006A; # LATIN CAPITAL LETTER J\n004B; C; 006B; # LATIN CAPITAL LETTER K\n004C; C; 006C; # LATIN CAPITAL LETTER L\n004D; C; 006D; # LATIN CAPITAL LETTER M\n004E; C; 006E; # LATIN CAPITAL LETTER N\n004F; C; 006F; # LATIN CAPITAL LETTER O\n0050; C; 0070; # LATIN CAPITAL LETTER P\n0051; C; 0071; # LATIN CAPITAL LETTER Q\n0052; C; 0072; # LATIN CAPITAL LETTER R\n0053; C; 0073; # LATIN CAPITAL LETTER S\n0054; C; 0074; # LATIN CAPITAL LETTER T\n0055; C; 0075; # LATIN CAPITAL LETTER U\n0056; C; 0076; # LATIN CAPITAL LETTER V\n0057; C; 0077; # LATIN CAPITAL LETTER W\n0058; C; 0078; # LATIN CAPITAL LETTER X\n0059; C; 0079; # LATIN CAPITAL LETTER Y\n005A; C; 007A; # LATIN CAPITAL LETTER Z\n00B5; C; 03BC; # MICRO SIGN\n00C0; C; 00E0; # LATIN CAPITAL LETTER A WITH GRAVE\n00C1; C; 00E1; # LATIN CAPITAL LETTER A WITH ACUTE\n00C2; C; 00E2; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n00C3; C; 00E3; # LATIN CAPITAL LETTER A WITH TILDE\n00C4; C; 00E4; # LATIN CAPITAL LETTER A WITH DIAERESIS\n00C5; C; 00E5; # LATIN CAPITAL LETTER A WITH RING ABOVE\n00C6; C; 00E6; # LATIN CAPITAL LETTER AE\n00C7; C; 00E7; # LATIN CAPITAL LETTER C WITH CEDILLA\n00C8; C; 00E8; # LATIN CAPITAL LETTER E WITH GRAVE\n00C9; C; 00E9; # LATIN CAPITAL LETTER E WITH ACUTE\n00CA; C; 00EA; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX\n00CB; C; 00EB; # LATIN CAPITAL LETTER E WITH DIAERESIS\n00CC; C; 00EC; # LATIN CAPITAL LETTER I WITH GRAVE\n00CD; C; 00ED; # LATIN CAPITAL LETTER I WITH ACUTE\n00CE; C; 00EE; # LATIN CAPITAL LETTER I WITH CIRCUMFLEX\n00CF; C; 00EF; # LATIN CAPITAL LETTER I WITH DIAERESIS\n00D0; C; 00F0; # LATIN CAPITAL LETTER ETH\n00D1; C; 00F1; # LATIN CAPITAL LETTER N WITH TILDE\n00D2; C; 00F2; # LATIN CAPITAL LETTER O WITH GRAVE\n00D3; C; 00F3; # LATIN CAPITAL LETTER O WITH ACUTE\n00D4; C; 00F4; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX\n00D5; C; 00F5; # LATIN CAPITAL LETTER O WITH TILDE\n00D6; C; 00F6; # LATIN CAPITAL LETTER O WITH DIAERESIS\n00D8; C; 00F8; # LATIN CAPITAL LETTER O WITH STROKE\n00D9; C; 00F9; # LATIN CAPITAL LETTER U WITH GRAVE\n00DA; C; 00FA; # LATIN CAPITAL LETTER U WITH ACUTE\n00DB; C; 00FB; # LATIN CAPITAL LETTER U WITH CIRCUMFLEX\n00DC; C; 00FC; # LATIN CAPITAL LETTER U WITH DIAERESIS\n00DD; C; 00FD; # LATIN CAPITAL LETTER Y WITH ACUTE\n00DE; C; 00FE; # LATIN CAPITAL LETTER THORN\n00DF; F; 0073 0073; # LATIN SMALL LETTER SHARP S\n0100; C; 0101; # LATIN CAPITAL LETTER A WITH MACRON\n0102; C; 0103; # LATIN CAPITAL LETTER A WITH BREVE\n0104; C; 0105; # LATIN CAPITAL LETTER A WITH OGONEK\n0106; C; 0107; # LATIN CAPITAL LETTER C WITH ACUTE\n0108; C; 0109; # LATIN CAPITAL LETTER C WITH CIRCUMFLEX\n010A; C; 010B; # LATIN CAPITAL LETTER C WITH DOT ABOVE\n010C; C; 010D; # LATIN CAPITAL LETTER C WITH CARON\n010E; C; 010F; # LATIN CAPITAL LETTER D WITH CARON\n0110; C; 0111; # LATIN CAPITAL LETTER D WITH STROKE\n0112; C; 0113; # LATIN CAPITAL LETTER E WITH MACRON\n0114; C; 0115; # LATIN CAPITAL LETTER E WITH BREVE\n0116; C; 0117; # LATIN CAPITAL LETTER E WITH DOT ABOVE\n0118; C; 0119; # LATIN CAPITAL LETTER E WITH OGONEK\n011A; C; 011B; # LATIN CAPITAL LETTER E WITH CARON\n011C; C; 011D; # LATIN CAPITAL LETTER G WITH CIRCUMFLEX\n011E; C; 011F; # LATIN CAPITAL LETTER G WITH BREVE\n0120; C; 0121; # LATIN CAPITAL LETTER G WITH DOT ABOVE\n0122; C; 0123; # LATIN CAPITAL LETTER G WITH CEDILLA\n0124; C; 0125; # LATIN CAPITAL LETTER H WITH CIRCUMFLEX\n0126; C; 0127; # LATIN CAPITAL LETTER H WITH STROKE\n0128; C; 0129; # LATIN CAPITAL LETTER I WITH TILDE\n012A; C; 012B; # LATIN CAPITAL LETTER I WITH MACRON\n012C; C; 012D; # LATIN CAPITAL LETTER I WITH BREVE\n012E; C; 012F; # LATIN CAPITAL LETTER I WITH OGONEK\n0130; F; 0069 0307; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n0130; T; 0069; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n0132; C; 0133; # LATIN CAPITAL LIGATURE IJ\n0134; C; 0135; # LATIN CAPITAL LETTER J WITH CIRCUMFLEX\n0136; C; 0137; # LATIN CAPITAL LETTER K WITH CEDILLA\n0139; C; 013A; # LATIN CAPITAL LETTER L WITH ACUTE\n013B; C; 013C; # LATIN CAPITAL LETTER L WITH CEDILLA\n013D; C; 013E; # LATIN CAPITAL LETTER L WITH CARON\n013F; C; 0140; # LATIN CAPITAL LETTER L WITH MIDDLE DOT\n0141; C; 0142; # LATIN CAPITAL LETTER L WITH STROKE\n0143; C; 0144; # LATIN CAPITAL LETTER N WITH ACUTE\n0145; C; 0146; # LATIN CAPITAL LETTER N WITH CEDILLA\n0147; C; 0148; # LATIN CAPITAL LETTER N WITH CARON\n0149; F; 02BC 006E; # LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n014A; C; 014B; # LATIN CAPITAL LETTER ENG\n014C; C; 014D; # LATIN CAPITAL LETTER O WITH MACRON\n014E; C; 014F; # LATIN CAPITAL LETTER O WITH BREVE\n0150; C; 0151; # LATIN CAPITAL LETTER O WITH DOUBLE ACUTE\n0152; C; 0153; # LATIN CAPITAL LIGATURE OE\n0154; C; 0155; # LATIN CAPITAL LETTER R WITH ACUTE\n0156; C; 0157; # LATIN CAPITAL LETTER R WITH CEDILLA\n0158; C; 0159; # LATIN CAPITAL LETTER R WITH CARON\n015A; C; 015B; # LATIN CAPITAL LETTER S WITH ACUTE\n015C; C; 015D; # LATIN CAPITAL LETTER S WITH CIRCUMFLEX\n015E; C; 015F; # LATIN CAPITAL LETTER S WITH CEDILLA\n0160; C; 0161; # LATIN CAPITAL LETTER S WITH CARON\n0162; C; 0163; # LATIN CAPITAL LETTER T WITH CEDILLA\n0164; C; 0165; # LATIN CAPITAL LETTER T WITH CARON\n0166; C; 0167; # LATIN CAPITAL LETTER T WITH STROKE\n0168; C; 0169; # LATIN CAPITAL LETTER U WITH TILDE\n016A; C; 016B; # LATIN CAPITAL LETTER U WITH MACRON\n016C; C; 016D; # LATIN CAPITAL LETTER U WITH BREVE\n016E; C; 016F; # LATIN CAPITAL LETTER U WITH RING ABOVE\n0170; C; 0171; # LATIN CAPITAL LETTER U WITH DOUBLE ACUTE\n0172; C; 0173; # LATIN CAPITAL LETTER U WITH OGONEK\n0174; C; 0175; # LATIN CAPITAL LETTER W WITH CIRCUMFLEX\n0176; C; 0177; # LATIN CAPITAL LETTER Y WITH CIRCUMFLEX\n0178; C; 00FF; # LATIN CAPITAL LETTER Y WITH DIAERESIS\n0179; C; 017A; # LATIN CAPITAL LETTER Z WITH ACUTE\n017B; C; 017C; # LATIN CAPITAL LETTER Z WITH DOT ABOVE\n017D; C; 017E; # LATIN CAPITAL LETTER Z WITH CARON\n017F; C; 0073; # LATIN SMALL LETTER LONG S\n0181; C; 0253; # LATIN CAPITAL LETTER B WITH HOOK\n0182; C; 0183; # LATIN CAPITAL LETTER B WITH TOPBAR\n0184; C; 0185; # LATIN CAPITAL LETTER TONE SIX\n0186; C; 0254; # LATIN CAPITAL LETTER OPEN O\n0187; C; 0188; # LATIN CAPITAL LETTER C WITH HOOK\n0189; C; 0256; # LATIN CAPITAL LETTER AFRICAN D\n018A; C; 0257; # LATIN CAPITAL LETTER D WITH HOOK\n018B; C; 018C; # LATIN CAPITAL LETTER D WITH TOPBAR\n018E; C; 01DD; # LATIN CAPITAL LETTER REVERSED E\n018F; C; 0259; # LATIN CAPITAL LETTER SCHWA\n0190; C; 025B; # LATIN CAPITAL LETTER OPEN E\n0191; C; 0192; # LATIN CAPITAL LETTER F WITH HOOK\n0193; C; 0260; # LATIN CAPITAL LETTER G WITH HOOK\n0194; C; 0263; # LATIN CAPITAL LETTER GAMMA\n0196; C; 0269; # LATIN CAPITAL LETTER IOTA\n0197; C; 0268; # LATIN CAPITAL LETTER I WITH STROKE\n0198; C; 0199; # LATIN CAPITAL LETTER K WITH HOOK\n019C; C; 026F; # LATIN CAPITAL LETTER TURNED M\n019D; C; 0272; # LATIN CAPITAL LETTER N WITH LEFT HOOK\n019F; C; 0275; # LATIN CAPITAL LETTER O WITH MIDDLE TILDE\n01A0; C; 01A1; # LATIN CAPITAL LETTER O WITH HORN\n01A2; C; 01A3; # LATIN CAPITAL LETTER OI\n01A4; C; 01A5; # LATIN CAPITAL LETTER P WITH HOOK\n01A6; C; 0280; # LATIN LETTER YR\n01A7; C; 01A8; # LATIN CAPITAL LETTER TONE TWO\n01A9; C; 0283; # LATIN CAPITAL LETTER ESH\n01AC; C; 01AD; # LATIN CAPITAL LETTER T WITH HOOK\n01AE; C; 0288; # LATIN CAPITAL LETTER T WITH RETROFLEX HOOK\n01AF; C; 01B0; # LATIN CAPITAL LETTER U WITH HORN\n01B1; C; 028A; # LATIN CAPITAL LETTER UPSILON\n01B2; C; 028B; # LATIN CAPITAL LETTER V WITH HOOK\n01B3; C; 01B4; # LATIN CAPITAL LETTER Y WITH HOOK\n01B5; C; 01B6; # LATIN CAPITAL LETTER Z WITH STROKE\n01B7; C; 0292; # LATIN CAPITAL LETTER EZH\n01B8; C; 01B9; # LATIN CAPITAL LETTER EZH REVERSED\n01BC; C; 01BD; # LATIN CAPITAL LETTER TONE FIVE\n01C4; C; 01C6; # LATIN CAPITAL LETTER DZ WITH CARON\n01C5; C; 01C6; # LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON\n01C7; C; 01C9; # LATIN CAPITAL LETTER LJ\n01C8; C; 01C9; # LATIN CAPITAL LETTER L WITH SMALL LETTER J\n01CA; C; 01CC; # LATIN CAPITAL LETTER NJ\n01CB; C; 01CC; # LATIN CAPITAL LETTER N WITH SMALL LETTER J\n01CD; C; 01CE; # LATIN CAPITAL LETTER A WITH CARON\n01CF; C; 01D0; # LATIN CAPITAL LETTER I WITH CARON\n01D1; C; 01D2; # LATIN CAPITAL LETTER O WITH CARON\n01D3; C; 01D4; # LATIN CAPITAL LETTER U WITH CARON\n01D5; C; 01D6; # LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON\n01D7; C; 01D8; # LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE\n01D9; C; 01DA; # LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON\n01DB; C; 01DC; # LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE\n01DE; C; 01DF; # LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON\n01E0; C; 01E1; # LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON\n01E2; C; 01E3; # LATIN CAPITAL LETTER AE WITH MACRON\n01E4; C; 01E5; # LATIN CAPITAL LETTER G WITH STROKE\n01E6; C; 01E7; # LATIN CAPITAL LETTER G WITH CARON\n01E8; C; 01E9; # LATIN CAPITAL LETTER K WITH CARON\n01EA; C; 01EB; # LATIN CAPITAL LETTER O WITH OGONEK\n01EC; C; 01ED; # LATIN CAPITAL LETTER O WITH OGONEK AND MACRON\n01EE; C; 01EF; # LATIN CAPITAL LETTER EZH WITH CARON\n01F0; F; 006A 030C; # LATIN SMALL LETTER J WITH CARON\n01F1; C; 01F3; # LATIN CAPITAL LETTER DZ\n01F2; C; 01F3; # LATIN CAPITAL LETTER D WITH SMALL LETTER Z\n01F4; C; 01F5; # LATIN CAPITAL LETTER G WITH ACUTE\n01F6; C; 0195; # LATIN CAPITAL LETTER HWAIR\n01F7; C; 01BF; # LATIN CAPITAL LETTER WYNN\n01F8; C; 01F9; # LATIN CAPITAL LETTER N WITH GRAVE\n01FA; C; 01FB; # LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE\n01FC; C; 01FD; # LATIN CAPITAL LETTER AE WITH ACUTE\n01FE; C; 01FF; # LATIN CAPITAL LETTER O WITH STROKE AND ACUTE\n0200; C; 0201; # LATIN CAPITAL LETTER A WITH DOUBLE GRAVE\n0202; C; 0203; # LATIN CAPITAL LETTER A WITH INVERTED BREVE\n0204; C; 0205; # LATIN CAPITAL LETTER E WITH DOUBLE GRAVE\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definitions\nDESCRIPTION: Character mapping definitions using the format: codepoint; mapping_type; target_codepoint(s); # description. Mapping types are C (case folding), F (full case folding), and S (special case folding).\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n1E86; C; 1E87; # LATIN CAPITAL LETTER W WITH DOT ABOVE\n1E88; C; 1E89; # LATIN CAPITAL LETTER W WITH DOT BELOW\n1E8A; C; 1E8B; # LATIN CAPITAL LETTER X WITH DOT ABOVE\n1E8C; C; 1E8D; # LATIN CAPITAL LETTER X WITH DIAERESIS\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Egyptian Hieroglyphs\nDESCRIPTION: Character mapping data for Egyptian hieroglyphs with Unicode code points. Each line contains hex code point, character name, Lo (Letter Other) category, left-to-right direction, and neutral properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_41\n\nLANGUAGE: data\nCODE:\n```\n1321F;EGYPTIAN HIEROGLYPH N042;Lo;0;L;;;;;N;;;;;\n13220;EGYPTIAN HIEROGLYPH NL001;Lo;0;L;;;;;N;;;;;\n13221;EGYPTIAN HIEROGLYPH NL002;Lo;0;L;;;;;N;;;;;\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definitions for Multiple Scripts\nDESCRIPTION: Comprehensive Unicode character definitions specifying code points, character names, and unicode properties for Sora Sompeng, Chakma, Sharada and Takri scripts. Each line defines a single character with its Unicode code point, name, general category, bidirectional class, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_36\n\nLANGUAGE: Unicode\nCODE:\n```\n110D2;SORA SOMPENG LETTER BAH;Lo;0;L;;;;;N;;;;;\n110D3;SORA SOMPENG LETTER CAH;Lo;0;L;;;;;N;;;;;\n110D4;SORA SOMPENG LETTER DAH;Lo;0;L;;;;;N;;;;;\n# ... additional characters omitted for brevity ...\n116A8;TAKRI LETTER SA;Lo;0;L;;;;;N;;;;;\n116A9;TAKRI LETTER HA;Lo;0;L;;;;;N;;;;;\n116AA;TAKRI LETTER RRA;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Combining Diacritical Marks\nDESCRIPTION: This snippet defines Unicode characters for various combining diacritical marks, including their code points, names, and properties. These characters are used to add accents and other modifications to base characters.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n0323;COMBINING DOT BELOW;Mn;220;NSM;;;;;N;NON-SPACING DOT BELOW;;;;\n0324;COMBINING DIAERESIS BELOW;Mn;220;NSM;;;;;N;NON-SPACING DOUBLE DOT BELOW;;;;\n0325;COMBINING RING BELOW;Mn;220;NSM;;;;;N;NON-SPACING RING BELOW;;;;\n0326;COMBINING COMMA BELOW;Mn;220;NSM;;;;;N;NON-SPACING COMMA BELOW;;;;\n0327;COMBINING CEDILLA;Mn;202;NSM;;;;;N;NON-SPACING CEDILLA;;;;\n0328;COMBINING OGONEK;Mn;202;NSM;;;;;N;NON-SPACING OGONEK;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Tamil Script\nDESCRIPTION: This section defines Unicode characters for the Tamil script, including letters, vowel signs, and digits. Each line specifies a character's Unicode code point, name, general category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0B82;TAMIL SIGN ANUSVARA;Mn;0;NSM;;;;;N;;;;;\n0B83;TAMIL SIGN VISARGA;Lo;0;L;;;;;N;;;;;\n0B85;TAMIL LETTER A;Lo;0;L;;;;;N;;;;;\n0B86;TAMIL LETTER AA;Lo;0;L;;;;;N;;;;;\n0B87;TAMIL LETTER I;Lo;0;L;;;;;N;;;;;\n0B88;TAMIL LETTER II;Lo;0;L;;;;;N;;;;;\n0B89;TAMIL LETTER U;Lo;0;L;;;;;N;;;;;\n0B8A;TAMIL LETTER UU;Lo;0;L;;;;;N;;;;;\n0B8E;TAMIL LETTER E;Lo;0;L;;;;;N;;;;;\n0B8F;TAMIL LETTER EE;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definitions for Emojis and Alchemical Symbols\nDESCRIPTION: Structured data entries defining Unicode characters with their properties. Each line contains the Unicode codepoint, character name, and various properties like category (So), directionality (ON), and other attributes.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_55\n\nLANGUAGE: txt\nCODE:\n```\n1F646;FACE WITH OK GESTURE;So;0;ON;;;;;N;;;;;\n1F647;PERSON BOWING DEEPLY;So;0;ON;;;;;N;;;;;\n1F648;SEE-NO-EVIL MONKEY;So;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definition Block\nDESCRIPTION: Defines Unicode characters and their properties including code point, name, category, combining class, and bidirectional properties. Each line represents a single Unicode character mapping.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n028F;LATIN LETTER SMALL CAPITAL Y;Ll;0;L;;;;;N;;;;;\n0290;LATIN SMALL LETTER Z WITH RETROFLEX HOOK;Ll;0;L;;;;;N;LATIN SMALL LETTER Z RETROFLEX HOOK;;;;\n0291;LATIN SMALL LETTER Z WITH CURL;Ll;0;L;;;;;N;LATIN SMALL LETTER Z CURL;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mappings for Georgian and Hangul Scripts\nDESCRIPTION: Structured data defining Unicode characters with their hexadecimal codes, names, general categories and other properties. Each line represents one character mapping in semicolon-delimited format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\n10A0;GEORGIAN CAPITAL LETTER AN;Lu;0;L;;;;;N;;;;2D00;\n10A1;GEORGIAN CAPITAL LETTER BAN;Lu;0;L;;;;;N;;;;2D01;\n10A2;GEORGIAN CAPITAL LETTER GAN;Lu;0;L;;;;;N;;;;2D02;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Kannada Script\nDESCRIPTION: This section defines Unicode characters for the Kannada script, including letters, vowel signs, and digits. Each line specifies a character's Unicode code point, name, general category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_10\n\nLANGUAGE: Unicode\nCODE:\n```\n0C82;KANNADA SIGN ANUSVARA;Mc;0;L;;;;;N;;;;;\n0C83;KANNADA SIGN VISARGA;Mc;0;L;;;;;N;;;;;\n0C85;KANNADA LETTER A;Lo;0;L;;;;;N;;;;;\n0C86;KANNADA LETTER AA;Lo;0;L;;;;;N;;;;;\n0C87;KANNADA LETTER I;Lo;0;L;;;;;N;;;;;\n0C88;KANNADA LETTER II;Lo;0;L;;;;;N;;;;;\n0C89;KANNADA LETTER U;Lo;0;L;;;;;N;;;;;\n0C8A;KANNADA LETTER UU;Lo;0;L;;;;;N;;;;;\n0C8B;KANNADA LETTER VOCALIC R;Lo;0;L;;;;;N;;;;;\n0C8C;KANNADA LETTER VOCALIC L;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: SQLite Memory Allocation Configuration Heading\nDESCRIPTION: Section header introducing memory allocation configuration options in vdbesort.c\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/doc/vdbesort-memory.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Memory Allocation In vdbesort.c\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Table - Lao and Tibetan Scripts\nDESCRIPTION: Tabular listing of Unicode character definitions including code points, character names, categories and properties. Format: code;name;category;combining_class;bidi_class;decomposition;numeric;mirror;old_name;comment;uppercase;lowercase;titlecase\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n0ECB;LAO TONE MAI CATAWA;Mn;122;NSM;;;;;N;;;;;\n0ECC;LAO CANCELLATION MARK;Mn;0;NSM;;;;;N;;;;;\n0ECD;LAO NIGGAHITA;Mn;0;NSM;;;;;N;;;;;\n0ED0;LAO DIGIT ZERO;Nd;0;L;;0;0;0;N;;;;;\n0ED1;LAO DIGIT ONE;Nd;0;L;;1;1;1;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Database Mappings\nDESCRIPTION: Defines Unicode code points and their properties including CJK compatibility ideographs, language tags, and variation selectors. Each line contains the code point, character name, category, directionality and other Unicode properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_57\n\nLANGUAGE: unicode\nCODE:\n```\n2F9DB;CJK COMPATIBILITY IDEOGRAPH-2F9DB;Lo;0;L;8DBC;;;;N;;;;;\n2F9DC;CJK COMPATIBILITY IDEOGRAPH-2F9DC;Lo;0;L;8DF0;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Indian Scripts\nDESCRIPTION: Mapping file that defines Unicode characters for Bengali, Gurmukhi, Gujarati and Oriya scripts. Each line represents a character with fields for code point, name, category, combining class, bidirectional class, decomposition mapping, decimal digit value, and various other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n09E3;BENGALI VOWEL SIGN VOCALIC LL;Mn;0;NSM;;;;;N;;;;;\n09E6;BENGALI DIGIT ZERO;Nd;0;L;;0;0;0;N;;;;;\n09E7;BENGALI DIGIT ONE;Nd;0;L;;1;1;1;N;;;;;\n09E8;BENGALI DIGIT TWO;Nd;0;L;;2;2;2;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Italic Capital Letters\nDESCRIPTION: This snippet defines Unicode code points for mathematical italic capital letters from A to Z. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_47\n\nLANGUAGE: Unicode\nCODE:\n```\n1D434;MATHEMATICAL ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;\n1D435;MATHEMATICAL ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;\n1D436;MATHEMATICAL ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;\n1D437;MATHEMATICAL ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;\n1D438;MATHEMATICAL ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;\n1D439;MATHEMATICAL ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;\n1D43A;MATHEMATICAL ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;\n1D43B;MATHEMATICAL ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;\n1D43C;MATHEMATICAL ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;\n1D43D;MATHEMATICAL ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;\n1D43E;MATHEMATICAL ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;\n1D43F;MATHEMATICAL ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;\n1D440;MATHEMATICAL ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;\n1D441;MATHEMATICAL ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;\n1D442;MATHEMATICAL ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;\n1D443;MATHEMATICAL ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;\n1D444;MATHEMATICAL ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;\n1D445;MATHEMATICAL ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;\n1D446;MATHEMATICAL ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;\n1D447;MATHEMATICAL ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;\n1D448;MATHEMATICAL ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;\n1D449;MATHEMATICAL ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;\n1D44A;MATHEMATICAL ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;\n1D44B;MATHEMATICAL ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;\n1D44C;MATHEMATICAL ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;\n1D44D;MATHEMATICAL ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definitions\nDESCRIPTION: Mapping file defining Unicode characters for Tibetan and Myanmar scripts with their properties including code point, character name, category, direction, and numeric values.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_13\n\nLANGUAGE: txt\nCODE:\n```\n0FB1;TIBETAN SUBJOINED LETTER YA;Mn;0;NSM;;;;;N;;;;;\n0FB2;TIBETAN SUBJOINED LETTER RA;Mn;0;NSM;;;;;N;;;;;\n0FB3;TIBETAN SUBJOINED LETTER LA;Mn;0;NSM;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Specifying NumPy 2.0.0 Dependency\nDESCRIPTION: Defines NumPy version 2.0.0 as a requirement for the project. This format is used in requirements.txt files for Python projects to ensure consistent dependency versions across different environments.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/benchmark/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nnumpy==2.0.0\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Compiler Configuration\nDESCRIPTION: Sets platform-specific compiler flags and definitions for Linux, Darwin, and Windows. Handles processor architecture differences for SSE4.2 and AES instructions.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\"\n    OR CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  if (CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\"\n      OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm64\"\n      OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  else()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -msse4.2 -maes\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -msse4.2 -maes\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definition Block\nDESCRIPTION: Defines Unicode characters with their properties including category, bidirectional class, numeric values, and alternative names. Each line represents a character mapping in semicolon-delimited format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_25\n\nLANGUAGE: unicode\nCODE:\n```\n273E;SIX PETALLED BLACK AND WHITE FLORETTE;So;0;ON;;;;;N;;;;;\n273F;BLACK FLORETTE;So;0;ON;;;;;N;;;;;\n2740;WHITE FLORETTE;So;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Telugu Script\nDESCRIPTION: This section defines Unicode characters for the Telugu script, including letters, vowel signs, and digits. Each line specifies a character's Unicode code point, name, general category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n0C01;TELUGU SIGN CANDRABINDU;Mc;0;L;;;;;N;;;;;\n0C02;TELUGU SIGN ANUSVARA;Mc;0;L;;;;;N;;;;;\n0C03;TELUGU SIGN VISARGA;Mc;0;L;;;;;N;;;;;\n0C05;TELUGU LETTER A;Lo;0;L;;;;;N;;;;;\n0C06;TELUGU LETTER AA;Lo;0;L;;;;;N;;;;;\n0C07;TELUGU LETTER I;Lo;0;L;;;;;N;;;;;\n0C08;TELUGU LETTER II;Lo;0;L;;;;;N;;;;;\n0C09;TELUGU LETTER U;Lo;0;L;;;;;N;;;;;\n0C0A;TELUGU LETTER UU;Lo;0;L;;;;;N;;;;;\n0C0B;TELUGU LETTER VOCALIC R;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Mathematical Sans-Serif Characters\nDESCRIPTION: Character mapping definitions for mathematical sans-serif unicode characters. Each line contains a unicode code point, character name, category, directionality, font mapping and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_53\n\nLANGUAGE: unicode\nCODE:\n```\n1D5E1;MATHEMATICAL SANS-SERIF BOLD CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;\n1D5E2;MATHEMATICAL SANS-SERIF BOLD CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;\n1D5E3;MATHEMATICAL SANS-SERIF BOLD CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Properties for Egyptian Hieroglyphs\nDESCRIPTION: This snippet shows the format used to define Unicode properties for Egyptian hieroglyphs. Each line includes the code point, character name, general category, bidirectional class, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_42\n\nLANGUAGE: Unicode\nCODE:\n```\n132E9;EGYPTIAN HIEROGLYPH S020;Lo;0;L;;;;;N;;;;;\n132EA;EGYPTIAN HIEROGLYPH S021;Lo;0;L;;;;;N;;;;;\n132EB;EGYPTIAN HIEROGLYPH S022;Lo;0;L;;;;;N;;;;;\n132EC;EGYPTIAN HIEROGLYPH S023;Lo;0;L;;;;;N;;;;;\n132ED;EGYPTIAN HIEROGLYPH S024;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Bundle Feature Flag Configuration for SQLite Extensions\nDESCRIPTION: Markdown documentation outlining the feature flag options for bundling SQLite extensions. Defines three main features: web support for WASM integration, fractional indexing, and automatic migration capabilities.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/crr/rs/bundle/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# bundle\n\nUsing feature flags, bundles selected rust extensions into a single runtime loadable or statically linkable SQLite extension.\n\n- feature web : wasm support via web crate inclusion <-- just make this a target cfg\n- freature fract-index\n- feature auto-migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Bamum Letters\nDESCRIPTION: This snippet defines Unicode codepoints for Bamum letters from phases A through D. Each line represents a single letter, specifying its hexadecimal codepoint, name, and Unicode general category.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_43\n\nLANGUAGE: Unicode\nCODE:\n```\n16847;BAMUM LETTER PHASE-A NJAM;Lo;0;L;;;;;N;;;;;\n16848;BAMUM LETTER PHASE-A MBANYI;Lo;0;L;;;;;N;;;;;\n16849;BAMUM LETTER PHASE-A NYET;Lo;0;L;;;;;N;;;;;\n1684A;BAMUM LETTER PHASE-A TEUAEN;Lo;0;L;;;;;N;;;;;\n1684B;BAMUM LETTER PHASE-A SOT;Lo;0;L;;;;;N;;;;;\n// ... (truncated for brevity)\n16904;BAMUM LETTER PHASE-D KET;Lo;0;L;;;;;N;;;;;\n16905;BAMUM LETTER PHASE-D YAEMMAE;Lo;0;L;;;;;N;;;;;\n16906;BAMUM LETTER PHASE-D KUOM;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: SQLite Base Feature Definitions\nDESCRIPTION: Configures core SQLite feature definitions including threading, encryption, FTS, JSON support and other core capabilities.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-ffi/bundled/SQLite3MultipleCiphers/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SQLITE3MC_BASE_DEFINITIONS \n  $<$<BOOL:${SQLITE_SHELL_IS_UTF8}>:SQLITE_SHELL_IS_UTF8=1>\n  CODEC_TYPE=CODEC_TYPE_${CODEC_TYPE}\n  SQLITE_DQS=${SQLITE_DQS}\n  SQLITE_MAX_ATTACHED=${SQLITE_MAX_ATTACHED}\n  $<$<BOOL:${SQLITE_USER_AUTHENTICATION}>:SQLITE_USER_AUTHENTICATION=1>\n  $<$<BOOL:${SQLITE_ENABLE_DEBUG}>:SQLITE_ENABLE_DEBUG=1>\n  SQLITE_THREADSAFE=${SQLITE_THREADSAFE}\n  [...additional definitions...])\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Data for Multiple Scripts\nDESCRIPTION: Contains Unicode character mappings with hexadecimal codes and their properties. Each line follows the format: code;name;category;class;bidirectional;decomposition;decimal;digit;numeric;mirrored;old name;comment;uppercase;lowercase.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n1766;TAGBANWA LETTER TA;Lo;0;L;;;;;N;;;;;\n1767;TAGBANWA LETTER DA;Lo;0;L;;;;;N;;;;;\n1780;KHMER LETTER KA;Lo;0;L;;;;;N;;;;;\n1800;MONGOLIAN BIRGA;Po;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Code Point Definitions\nDESCRIPTION: Defines Unicode code points for variation selectors and private use planes with their properties. Each line specifies a code point, character name, category (Mn for combining marks, Co for private use), directional property (NSM for non-spacing mark, L for left-to-right), and additional metadata.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_59\n\nLANGUAGE: config\nCODE:\n```\nE01E8;VARIATION SELECTOR-249;Mn;0;NSM;;;;;N;;;;;\nE01E9;VARIATION SELECTOR-250;Mn;0;NSM;;;;;N;;;;;\nE01EA;VARIATION SELECTOR-251;Mn;0;NSM;;;;;N;;;;;\nE01EB;VARIATION SELECTOR-252;Mn;0;NSM;;;;;N;;;;;\nE01EC;VARIATION SELECTOR-253;Mn;0;NSM;;;;;N;;;;;\nE01ED;VARIATION SELECTOR-254;Mn;0;NSM;;;;;N;;;;;\nE01EE;VARIATION SELECTOR-255;Mn;0;NSM;;;;;N;;;;;\nE01EF;VARIATION SELECTOR-256;Mn;0;NSM;;;;;N;;;;;\nF0000;<Plane 15 Private Use, First>;Co;0;L;;;;;N;;;;;\nFFFFFD;<Plane 15 Private Use, Last>;Co;0;L;;;;;N;;;;;\n100000;<Plane 16 Private Use, First>;Co;0;L;;;;;N;;;;;\n10FFFD;<Plane 16 Private Use, Last>;Co;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Bold Italic Capital Letters\nDESCRIPTION: This snippet defines Unicode code points for mathematical bold italic capital letters from A to Z. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_49\n\nLANGUAGE: Unicode\nCODE:\n```\n1D468;MATHEMATICAL BOLD ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;\n1D469;MATHEMATICAL BOLD ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;\n1D46A;MATHEMATICAL BOLD ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;\n1D46B;MATHEMATICAL BOLD ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;\n1D46C;MATHEMATICAL BOLD ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;\n1D46D;MATHEMATICAL BOLD ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;\n1D46E;MATHEMATICAL BOLD ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;\n1D46F;MATHEMATICAL BOLD ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;\n1D470;MATHEMATICAL BOLD ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;\n1D471;MATHEMATICAL BOLD ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;\n1D472;MATHEMATICAL BOLD ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;\n1D473;MATHEMATICAL BOLD ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;\n1D474;MATHEMATICAL BOLD ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;\n1D475;MATHEMATICAL BOLD ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;\n1D476;MATHEMATICAL BOLD ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;\n1D477;MATHEMATICAL BOLD ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;\n1D478;MATHEMATICAL BOLD ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;\n1D479;MATHEMATICAL BOLD ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;\n1D47A;MATHEMATICAL BOLD ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;\n1D47B;MATHEMATICAL BOLD ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;\n1D47C;MATHEMATICAL BOLD ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;\n1D47D;MATHEMATICAL BOLD ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;\n1D47E;MATHEMATICAL BOLD ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;\n1D47F;MATHEMATICAL BOLD ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;\n1D480;MATHEMATICAL BOLD ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;\n1D481;MATHEMATICAL BOLD ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Case Mapping Definition\nDESCRIPTION: Maps uppercase characters to their lowercase equivalents using Unicode codepoints. Each line follows the format: uppercase_codepoint; mapping_type; lowercase_codepoint; # character_name\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n2C1B; C; 2C4B; # GLAGOLITIC CAPITAL LETTER SHTA\n2C1C; C; 2C4C; # GLAGOLITIC CAPITAL LETTER TSI\n# ... additional mappings omitted for brevity ...\nFF25; C; FF45; # FULLWIDTH LATIN CAPITAL LETTER E\n```\n\n----------------------------------------\n\nTITLE: Unicode Mathematical Font Character Mappings\nDESCRIPTION: Unicode database entries mapping mathematical font variants to basic Latin letters. Each line contains a Unicode code point, character name, category, bidirectional class, and font mapping information.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_52\n\nLANGUAGE: unicode\nCODE:\n```\n1D4AE;MATHEMATICAL SCRIPT CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;\n1D4AF;MATHEMATICAL SCRIPT CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;\n1D4B0;MATHEMATICAL SCRIPT CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Box Drawing and Block Characters\nDESCRIPTION: Specification table for Unicode box drawing characters, blocks and shades. Each line contains the hex code point, character name, category (So), directionality (ON), and additional metadata fields.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_23\n\nLANGUAGE: unicode\nCODE:\n```\n2523;BOX DRAWINGS HEAVY VERTICAL AND RIGHT;So;0;ON;;;;;N;FORMS HEAVY VERTICAL AND RIGHT;;;;\n2524;BOX DRAWINGS LIGHT VERTICAL AND LEFT;So;0;ON;;;;;N;FORMS LIGHT VERTICAL AND LEFT;;;;\n2525;BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY;So;0;ON;;;;;N;FORMS VERTICAL LIGHT AND LEFT HEAVY;;;;\n```\n\n----------------------------------------\n\nTITLE: Struct Binder Function Signatures\nDESCRIPTION: Shows the two possible signatures for the StructBinder function, which can take either a struct name and description or just a description object with a name property.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFunction StructBinder([string structName,] object structDescription)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for CJK Ideographs and Yi Syllables\nDESCRIPTION: This snippet shows the format used to define Unicode characters. Each line includes the hexadecimal code point, character name, general category, bidirectional class, and other properties. The definitions cover a range of characters including CJK ideographs, hexagrams, and Yi syllables.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_30\n\nLANGUAGE: Unicode\nCODE:\n```\n33F8;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FIVE;So;0;L;<compat> 0032 0035 65E5;;;;N;;;;;\n33F9;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SIX;So;0;L;<compat> 0032 0036 65E5;;;;N;;;;;\n33FA;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SEVEN;So;0;L;<compat> 0032 0037 65E5;;;;N;;;;;\n33FB;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-EIGHT;So;0;L;<compat> 0032 0038 65E5;;;;N;;;;;\n33FC;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-NINE;So;0;L;<compat> 0032 0039 65E5;;;;N;;;;;\n33FD;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY;So;0;L;<compat> 0033 0030 65E5;;;;N;;;;;\n33FE;IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE;So;0;L;<compat> 0033 0031 65E5;;;;N;;;;;\n33FF;SQUARE GAL;So;0;ON;<square> 0067 0061 006C;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Struct Binder Factory Function Signature\nDESCRIPTION: Defines the signature for the top-level binder factory function, which takes a configuration object and returns a StructBinder function.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFunction StructBinderFactory(object configOptions);\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Database Entries\nDESCRIPTION: Character database entries defining Unicode properties for YI syllables/radicals, LISU letters/punctuation marks, and VAI syllables. Each entry specifies the hex code point, character name, general category, bidirectional class, and other Unicode properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_32\n\nLANGUAGE: Unicode\nCODE:\n```\nA487;YI SYLLABLE YYT;Lo;0;L;;;;;N;;;;;\nA488;YI SYLLABLE YYX;Lo;0;L;;;;;N;;;;;\nA489;YI SYLLABLE YY;Lo;0;L;;;;;N;;;;;\nA48A;YI SYLLABLE YYP;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Database Mapping Entries\nDESCRIPTION: Character mapping entries defining Unicode code points and their properties. Each line follows the format: code point;character name;category;combining class;directionality;decomposition;numeric value;bidirectional;mirrored;old name;deprecated;\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_44\n\nLANGUAGE: unicode\nCODE:\n```\n1D203;GREEK VOCAL NOTATION SYMBOL-4;So;0;ON;;;;;N;;;;;\n1D204;GREEK VOCAL NOTATION SYMBOL-5;So;0;ON;;;;;N;;;;;\n1D205;GREEK VOCAL NOTATION SYMBOL-6;So;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Bold Small Letters\nDESCRIPTION: This snippet defines Unicode code points for mathematical bold small letters from a to z. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_46\n\nLANGUAGE: Unicode\nCODE:\n```\n1D41A;MATHEMATICAL BOLD SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;\n1D41B;MATHEMATICAL BOLD SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;\n1D41C;MATHEMATICAL BOLD SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;\n1D41D;MATHEMATICAL BOLD SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;\n1D41E;MATHEMATICAL BOLD SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;\n1D41F;MATHEMATICAL BOLD SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;\n1D420;MATHEMATICAL BOLD SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;\n1D421;MATHEMATICAL BOLD SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;\n1D422;MATHEMATICAL BOLD SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;\n1D423;MATHEMATICAL BOLD SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;\n1D424;MATHEMATICAL BOLD SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;\n1D425;MATHEMATICAL BOLD SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;\n1D426;MATHEMATICAL BOLD SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;\n1D427;MATHEMATICAL BOLD SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;\n1D428;MATHEMATICAL BOLD SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;\n1D429;MATHEMATICAL BOLD SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;\n1D42A;MATHEMATICAL BOLD SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;\n1D42B;MATHEMATICAL BOLD SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;\n1D42C;MATHEMATICAL BOLD SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;\n1D42D;MATHEMATICAL BOLD SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;\n1D42E;MATHEMATICAL BOLD SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;\n1D42F;MATHEMATICAL BOLD SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;\n1D430;MATHEMATICAL BOLD SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;\n1D431;MATHEMATICAL BOLD SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;\n1D432;MATHEMATICAL BOLD SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;\n1D433;MATHEMATICAL BOLD SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Italic Small Letters\nDESCRIPTION: This snippet defines Unicode code points for mathematical italic small letters from a to z. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_48\n\nLANGUAGE: Unicode\nCODE:\n```\n1D44E;MATHEMATICAL ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;\n1D44F;MATHEMATICAL ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;\n1D450;MATHEMATICAL ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;\n1D451;MATHEMATICAL ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;\n1D452;MATHEMATICAL ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;\n1D453;MATHEMATICAL ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;\n1D454;MATHEMATICAL ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;\n1D456;MATHEMATICAL ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;\n1D457;MATHEMATICAL ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;\n1D458;MATHEMATICAL ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;\n1D459;MATHEMATICAL ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;\n1D45A;MATHEMATICAL ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;\n1D45B;MATHEMATICAL ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;\n1D45C;MATHEMATICAL ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;\n1D45D;MATHEMATICAL ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;\n1D45E;MATHEMATICAL ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;\n1D45F;MATHEMATICAL ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;\n1D460;MATHEMATICAL ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;\n1D461;MATHEMATICAL ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;\n1D462;MATHEMATICAL ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;\n1D463;MATHEMATICAL ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;\n1D464;MATHEMATICAL ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;\n1D465;MATHEMATICAL ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;\n1D466;MATHEMATICAL ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;\n1D467;MATHEMATICAL ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Bold Capital Letters\nDESCRIPTION: This snippet defines Unicode code points for mathematical bold capital letters from M to Z. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_45\n\nLANGUAGE: Unicode\nCODE:\n```\n1D40C;MATHEMATICAL BOLD CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;\n1D40D;MATHEMATICAL BOLD CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;\n1D40E;MATHEMATICAL BOLD CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;\n1D40F;MATHEMATICAL BOLD CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;\n1D410;MATHEMATICAL BOLD CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;\n1D411;MATHEMATICAL BOLD CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;\n1D412;MATHEMATICAL BOLD CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;\n1D413;MATHEMATICAL BOLD CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;\n1D414;MATHEMATICAL BOLD CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;\n1D415;MATHEMATICAL BOLD CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;\n1D416;MATHEMATICAL BOLD CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;\n1D417;MATHEMATICAL BOLD CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;\n1D418;MATHEMATICAL BOLD CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;\n1D419;MATHEMATICAL BOLD CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Script Capital Letters\nDESCRIPTION: This snippet defines Unicode code points for selected mathematical script capital letters. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_51\n\nLANGUAGE: Unicode\nCODE:\n```\n1D49C;MATHEMATICAL SCRIPT CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;\n1D49E;MATHEMATICAL SCRIPT CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;\n1D49F;MATHEMATICAL SCRIPT CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;\n1D4A2;MATHEMATICAL SCRIPT CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;\n1D4A5;MATHEMATICAL SCRIPT CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;\n1D4A6;MATHEMATICAL SCRIPT CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;\n1D4A9;MATHEMATICAL SCRIPT CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;\n1D4AA;MATHEMATICAL SCRIPT CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;\n1D4AB;MATHEMATICAL SCRIPT CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;\n1D4AC;MATHEMATICAL SCRIPT CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Data\nDESCRIPTION: Structured data mapping Unicode code points to their properties including character names, categories, bidirectional classes, decomposition mappings, and numeric values. Each line represents one character definition in a semicolon-delimited format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0000;<control>;Cc;0;BN;;;;;N;NULL;;;;\n0001;<control>;Cc;0;BN;;;;;N;START OF HEADING;;;;\n0002;<control>;Cc;0;BN;;;;;N;START OF TEXT;;;;\n[...truncated for brevity...]\n00C0;LATIN CAPITAL LETTER A WITH GRAVE;Lu;0;L;0041 0300;;;;N;LATIN CAPITAL LETTER A GRAVE;;;00E0;\n00C1;LATIN CAPITAL LETTER A WITH ACUTE;Lu;0;L;0041 0301;;;;N;LATIN CAPITAL LETTER A ACUTE;;;00E1;\n00C2;LATIN CAPITAL LETTER A WITH CIRCUMFLEX;Lu;0;L;0041 0302;;;;N;LATIN CAPITAL LETTER A CIRCUMFLEX;;;00E2;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definitions for Gaming Symbols\nDESCRIPTION: Defines Unicode characters for mahjong tiles, domino tiles, and playing cards with their respective hex codes and classifications. Each entry follows the format: code;name;category;bidirectional class;properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_54\n\nLANGUAGE: unicode\nCODE:\n```\n1F00A;MAHJONG TILE FOUR OF CHARACTERS;So;0;ON;;;;;N;;;;;\n1F00B;MAHJONG TILE FIVE OF CHARACTERS;So;0;ON;;;;;N;;;;;\n1F00C;MAHJONG TILE SIX OF CHARACTERS;So;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Data Structure\nDESCRIPTION: Structured data format defining Unicode characters with properties including category, bidirectional class, decimal value, and other characteristics. Each line represents a single character mapping with semicolon-delimited fields.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_22\n\nLANGUAGE: Data\nCODE:\n```\n2313;SEGMENT;So;0;ON;;;;;N;;;;;\n2314;SECTOR;So;0;ON;;;;;N;;;;;\n2315;TELEPHONE RECORDER;So;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Greek Letters\nDESCRIPTION: This snippet defines Unicode characters for Greek letters, including both capital and small letters. It provides information about each character's code point, name, and properties such as uppercase/lowercase mappings.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n0391;GREEK CAPITAL LETTER ALPHA;Lu;0;L;;;;;N;;;;03B1;\n0392;GREEK CAPITAL LETTER BETA;Lu;0;L;;;;;N;;;;03B2;\n0393;GREEK CAPITAL LETTER GAMMA;Lu;0;L;;;;;N;;;;03B3;\n0394;GREEK CAPITAL LETTER DELTA;Lu;0;L;;;;;N;;;;03B4;\n0395;GREEK CAPITAL LETTER EPSILON;Lu;0;L;;;;;N;;;;03B5;\n0396;GREEK CAPITAL LETTER ZETA;Lu;0;L;;;;;N;;;;03B6;\n03B1;GREEK SMALL LETTER ALPHA;Ll;0;L;;;;;N;;;0391;;0391\n03B2;GREEK SMALL LETTER BETA;Ll;0;L;;;;;N;;;0392;;0392\n03B3;GREEK SMALL LETTER GAMMA;Ll;0;L;;;;;N;;;0393;;0393\n03B4;GREEK SMALL LETTER DELTA;Ll;0;L;;;;;N;;;0394;;0394\n03B5;GREEK SMALL LETTER EPSILON;Ll;0;L;;;;;N;;;0395;;0395\n03B6;GREEK SMALL LETTER ZETA;Ll;0;L;;;;;N;;;0396;;0396\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Mathematical Bold Italic Small Letters\nDESCRIPTION: This snippet defines Unicode code points for mathematical bold italic small letters from a to z. Each entry specifies the Unicode code point, character name, category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_50\n\nLANGUAGE: Unicode\nCODE:\n```\n1D482;MATHEMATICAL BOLD ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;\n1D483;MATHEMATICAL BOLD ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;\n1D484;MATHEMATICAL BOLD ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;\n1D485;MATHEMATICAL BOLD ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;\n1D486;MATHEMATICAL BOLD ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;\n1D487;MATHEMATICAL BOLD ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;\n1D488;MATHEMATICAL BOLD ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;\n1D489;MATHEMATICAL BOLD ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;\n1D48A;MATHEMATICAL BOLD ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;\n1D48B;MATHEMATICAL BOLD ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;\n1D48C;MATHEMATICAL BOLD ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;\n1D48D;MATHEMATICAL BOLD ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;\n1D48E;MATHEMATICAL BOLD ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;\n1D48F;MATHEMATICAL BOLD ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;\n1D490;MATHEMATICAL BOLD ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;\n1D491;MATHEMATICAL BOLD ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;\n1D492;MATHEMATICAL BOLD ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;\n1D493;MATHEMATICAL BOLD ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;\n1D494;MATHEMATICAL BOLD ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;\n1D495;MATHEMATICAL BOLD ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;\n1D496;MATHEMATICAL BOLD ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;\n1D497;MATHEMATICAL BOLD ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;\n1D498;MATHEMATICAL BOLD ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;\n1D499;MATHEMATICAL BOLD ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;\n1D49A;MATHEMATICAL BOLD ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;\n1D49B;MATHEMATICAL BOLD ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definitions\nDESCRIPTION: Definition entries for Unicode characters with their hexadecimal code points, character names, general categories, directionality and other Unicode properties. Each line represents one character mapping in a semi-colon delimited format.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_16\n\nLANGUAGE: Unicode\nCODE:\n```\n1865;MONGOLIAN LETTER SIBE HA;Lo;0;L;;;;;N;;;;;\n1866;MONGOLIAN LETTER SIBE PA;Lo;0;L;;;;;N;;;;;\n1867;MONGOLIAN LETTER SIBE SHA;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Oriya Script\nDESCRIPTION: This section defines Unicode characters for the Oriya script, including letters, vowel signs, and digits. Each line specifies a character's Unicode code point, name, general category, and other properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n0B2D;ORIYA LETTER BHA;Lo;0;L;;;;;N;;;;;\n0B2E;ORIYA LETTER MA;Lo;0;L;;;;;N;;;;;\n0B2F;ORIYA LETTER YA;Lo;0;L;;;;;N;;;;;\n0B30;ORIYA LETTER RA;Lo;0;L;;;;;N;;;;;\n0B32;ORIYA LETTER LA;Lo;0;L;;;;;N;;;;;\n0B33;ORIYA LETTER LLA;Lo;0;L;;;;;N;;;;;\n0B35;ORIYA LETTER VA;Lo;0;L;;;;;N;;;;;\n0B36;ORIYA LETTER SHA;Lo;0;L;;;;;N;;;;;\n0B37;ORIYA LETTER SSA;Lo;0;L;;;;;N;;;;;\n0B38;ORIYA LETTER SA;Lo;0;L;;;;;N;;;;;\n0B39;ORIYA LETTER HA;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definitions\nDESCRIPTION: Defines unicode characters with their hex code points, names, general categories, bidirectional properties and numeric values. Each line follows the format: code point;character name;category;bidirectional class;combining class;decomposition mapping;numeric values;mirrored flag.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_17\n\nLANGUAGE: Unicode\nCODE:\n```\n1958;TAI LE LETTER LA;Lo;0;L;;;;;N;;;;;\n1959;TAI LE LETTER PA;Lo;0;L;;;;;N;;;;;\n195A;TAI LE LETTER PHA;Lo;0;L;;;;;N;;;;;\n...\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Telegraph and Square Symbols\nDESCRIPTION: Defines Unicode code points for various ideographic telegraph symbols and squared symbols, including time indicators, unit measurements, and Japanese era names. Each entry includes the code point, character name, category, directionality, decomposition mapping, and various flags.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_29\n\nLANGUAGE: unicode\nCODE:\n```\n336D;IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-ONE;So;0;L;<compat> 0032 0031 70B9;;;;N;;;;;\n336E;IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-TWO;So;0;L;<compat> 0032 0032 70B9;;;;N;;;;;\n3371;SQUARE HPA;So;0;L;<square> 0068 0050 0061;;;;N;;;;;\n3373;SQUARE AU;So;0;L;<square> 0041 0055;;;;N;;;;;\n3374;SQUARE BAR;So;0;L;<square> 0062 0061 0072;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mappings for Sinhala, Thai and Lao Scripts\nDESCRIPTION: Defines Unicode character properties and mapping details for Sinhala, Thai and Lao script characters. Each line follows the format: Code point;Character name;Category;Numeric value;Direction;Case mapping;Etc.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n0DAD;SINHALA LETTER ALPAPRAANA TAYANNA;Lo;0;L;;;;;N;;;;;\n0DAE;SINHALA LETTER MAHAAPRAANA TAYANNA;Lo;0;L;;;;;N;;;;;\n0DAF;SINHALA LETTER ALPAPRAANA DAYANNA;Lo;0;L;;;;;N;;;;;\n...\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Definitions\nDESCRIPTION: Comprehensive mapping of Unicode characters from 0x1F93 to 0x2021, including Greek letters with diacritical marks, spacing characters, and punctuation marks. Each line contains code point, character name, category, directionality, decomposition mapping, and case mappings.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_20\n\nLANGUAGE: unicode\nCODE:\n```\n1F93;GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI;Ll;0;L;1F23 0345;;;;N;;;1F9B;;1F9B\n1F94;GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI;Ll;0;L;1F24 0345;;;;N;;;1F9C;;1F9C\n2020;DAGGER;Po;0;ON;;;;;N;;;;;\n2021;DOUBLE DAGGER;Po;0;ON;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Table\nDESCRIPTION: Standard Unicode character mapping entries defining code points (in hexadecimal), character names, general category, canonical combining classes, bidirectional properties, numeric values and other Unicode properties for Tai Tham and Balinese scripts.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_18\n\nLANGUAGE: Unicode\nCODE:\n```\n1A4A;TAI THAM LETTER LLA;Lo;0;L;;;;;N;;;;;\n1A4B;TAI THAM LETTER A;Lo;0;L;;;;;N;;;;;\n1A4C;TAI THAM LETTER LOW HA;Lo;0;L;;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Default Case Folding Rule\nDESCRIPTION: Specifies the default behavior for unmapped code points in the Unicode range\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n# @missing: 0000..10FFFF; C; <code point>\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Definition Structure\nDESCRIPTION: Defines the structure for Unicode character mappings including code point, character name, category (Lo for letter-other, Lm for modifier-letter, etc), directionality (L for left-to-right), decomposition mapping (narrow/wide), and additional properties.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/UnicodeData.txt#2025-04-11_snippet_35\n\nLANGUAGE: unicode\nCODE:\n```\nFF8C;HALFWIDTH KATAKANA LETTER HU;Lo;0;L;<narrow> 30D5;;;;N;;;;;\nFF8D;HALFWIDTH KATAKANA LETTER HE;Lo;0;L;<narrow> 30D8;;;;N;;;;;\n```\n\n----------------------------------------\n\nTITLE: Character Case Mapping Data\nDESCRIPTION: Mapping table showing relationships between uppercase and lowercase characters in Unicode. Each line contains a hexadecimal code point, mapping type (C for case mapping, F for folding), target code point(s), and a comment describing the character.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n0206; C; 0207; # LATIN CAPITAL LETTER E WITH INVERTED BREVE\n0208; C; 0209; # LATIN CAPITAL LETTER I WITH DOUBLE GRAVE\n0210; C; 0211; # LATIN CAPITAL LETTER R WITH DOUBLE GRAVE\n[...truncated for brevity...]\n04C7; C; 04C8; # CYRILLIC CAPITAL LETTER EN WITH HOOK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Mappings for Greek, Roman, and Glagolitic Scripts\nDESCRIPTION: A mapping table that defines case folding and special casing relationships between Unicode characters. Each line contains a source character code point, a relation type (F, C, or S), and target character(s). This data is used for character normalization and case conversion in text processing systems.\nSOURCE: https://github.com/tursodatabase/libsql/blob/main/libsql-sqlite3/ext/fts3/unicode/CaseFolding.txt#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n1F98; S; 1F90; # GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI\n1F99; F; 1F21 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI\n1F99; S; 1F91; # GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI\n1F9A; F; 1F22 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1F9A; S; 1F92; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1F9B; F; 1F23 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1F9B; S; 1F93; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1F9C; F; 1F24 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1F9C; S; 1F94; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1F9D; F; 1F25 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1F9D; S; 1F95; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1F9E; F; 1F26 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1F9E; S; 1F96; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1F9F; F; 1F27 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1F9F; S; 1F97; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1FA0; F; 1F60 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI\n1FA1; F; 1F61 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI\n1FA2; F; 1F62 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI\n1FA3; F; 1F63 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI\n1FA4; F; 1F64 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI\n1FA5; F; 1F65 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI\n1FA6; F; 1F66 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI\n1FA7; F; 1F67 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI\n1FA8; F; 1F60 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI\n1FA8; S; 1FA0; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI\n1FA9; F; 1F61 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI\n1FA9; S; 1FA1; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI\n1FAA; F; 1F62 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1FAA; S; 1FA2; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1FAB; F; 1F63 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1FAB; S; 1FA3; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1FAC; F; 1F64 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1FAC; S; 1FA4; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1FAD; F; 1F65 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1FAD; S; 1FA5; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1FAE; F; 1F66 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1FAE; S; 1FA6; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1FAF; F; 1F67 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1FAF; S; 1FA7; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1FB2; F; 1F70 03B9; # GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI\n1FB3; F; 03B1 03B9; # GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI\n1FB4; F; 03AC 03B9; # GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI\n1FB6; F; 03B1 0342; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI\n1FB7; F; 03B1 0342 03B9; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI\n1FB8; C; 1FB0; # GREEK CAPITAL LETTER ALPHA WITH VRACHY\n1FB9; C; 1FB1; # GREEK CAPITAL LETTER ALPHA WITH MACRON\n1FBA; C; 1F70; # GREEK CAPITAL LETTER ALPHA WITH VARIA\n1FBB; C; 1F71; # GREEK CAPITAL LETTER ALPHA WITH OXIA\n1FBC; F; 03B1 03B9; # GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI\n1FBC; S; 1FB3; # GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI\n1FBE; C; 03B9; # GREEK PROSGEGRAMMENI\n1FC2; F; 1F74 03B9; # GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI\n1FC3; F; 03B7 03B9; # GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI\n1FC4; F; 03AE 03B9; # GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI\n1FC6; F; 03B7 0342; # GREEK SMALL LETTER ETA WITH PERISPOMENI\n1FC7; F; 03B7 0342 03B9; # GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI\n1FC8; C; 1F72; # GREEK CAPITAL LETTER EPSILON WITH VARIA\n1FC9; C; 1F73; # GREEK CAPITAL LETTER EPSILON WITH OXIA\n1FCA; C; 1F74; # GREEK CAPITAL LETTER ETA WITH VARIA\n1FCB; C; 1F75; # GREEK CAPITAL LETTER ETA WITH OXIA\n1FCC; F; 03B7 03B9; # GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI\n1FCC; S; 1FC3; # GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI\n1FD2; F; 03B9 0308 0300; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA\n1FD3; F; 03B9 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD6; F; 03B9 0342; # GREEK SMALL LETTER IOTA WITH PERISPOMENI\n1FD7; F; 03B9 0308 0342; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI\n1FD8; C; 1FD0; # GREEK CAPITAL LETTER IOTA WITH VRACHY\n1FD9; C; 1FD1; # GREEK CAPITAL LETTER IOTA WITH MACRON\n1FDA; C; 1F76; # GREEK CAPITAL LETTER IOTA WITH VARIA\n1FDB; C; 1F77; # GREEK CAPITAL LETTER IOTA WITH OXIA\n1FE2; F; 03C5 0308 0300; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA\n1FE3; F; 03C5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n1FE4; F; 03C1 0313; # GREEK SMALL LETTER RHO WITH PSILI\n1FE6; F; 03C5 0342; # GREEK SMALL LETTER UPSILON WITH PERISPOMENI\n1FE7; F; 03C5 0308 0342; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI\n1FE8; C; 1FE0; # GREEK CAPITAL LETTER UPSILON WITH VRACHY\n1FE9; C; 1FE1; # GREEK CAPITAL LETTER UPSILON WITH MACRON\n1FEA; C; 1F7A; # GREEK CAPITAL LETTER UPSILON WITH VARIA\n1FEB; C; 1F7B; # GREEK CAPITAL LETTER UPSILON WITH OXIA\n1FEC; C; 1FE5; # GREEK CAPITAL LETTER RHO WITH DASIA\n1FF2; F; 1F7C 03B9; # GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI\n1FF3; F; 03C9 03B9; # GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI\n1FF4; F; 03CE 03B9; # GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI\n1FF6; F; 03C9 0342; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI\n1FF7; F; 03C9 0342 03B9; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI\n1FF8; C; 1F78; # GREEK CAPITAL LETTER OMICRON WITH VARIA\n1FF9; C; 1F79; # GREEK CAPITAL LETTER OMICRON WITH OXIA\n1FFA; C; 1F7C; # GREEK CAPITAL LETTER OMEGA WITH VARIA\n1FFB; C; 1F7D; # GREEK CAPITAL LETTER OMEGA WITH OXIA\n1FFC; F; 03C9 03B9; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n1FFC; S; 1FF3; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n2126; C; 03C9; # OHM SIGN\n212A; C; 006B; # KELVIN SIGN\n212B; C; 00E5; # ANGSTROM SIGN\n2132; C; 214E; # TURNED CAPITAL F\n2160; C; 2170; # ROMAN NUMERAL ONE\n2161; C; 2171; # ROMAN NUMERAL TWO\n2162; C; 2172; # ROMAN NUMERAL THREE\n2163; C; 2173; # ROMAN NUMERAL FOUR\n2164; C; 2174; # ROMAN NUMERAL FIVE\n2165; C; 2175; # ROMAN NUMERAL SIX\n2166; C; 2176; # ROMAN NUMERAL SEVEN\n2167; C; 2177; # ROMAN NUMERAL EIGHT\n2168; C; 2178; # ROMAN NUMERAL NINE\n2169; C; 2179; # ROMAN NUMERAL TEN\n216A; C; 217A; # ROMAN NUMERAL ELEVEN\n216B; C; 217B; # ROMAN NUMERAL TWELVE\n216C; C; 217C; # ROMAN NUMERAL FIFTY\n216D; C; 217D; # ROMAN NUMERAL ONE HUNDRED\n216E; C; 217E; # ROMAN NUMERAL FIVE HUNDRED\n216F; C; 217F; # ROMAN NUMERAL ONE THOUSAND\n2183; C; 2184; # ROMAN NUMERAL REVERSED ONE HUNDRED\n24B6; C; 24D0; # CIRCLED LATIN CAPITAL LETTER A\n24B7; C; 24D1; # CIRCLED LATIN CAPITAL LETTER B\n24B8; C; 24D2; # CIRCLED LATIN CAPITAL LETTER C\n24B9; C; 24D3; # CIRCLED LATIN CAPITAL LETTER D\n24BA; C; 24D4; # CIRCLED LATIN CAPITAL LETTER E\n24BB; C; 24D5; # CIRCLED LATIN CAPITAL LETTER F\n24BC; C; 24D6; # CIRCLED LATIN CAPITAL LETTER G\n24BD; C; 24D7; # CIRCLED LATIN CAPITAL LETTER H\n24BE; C; 24D8; # CIRCLED LATIN CAPITAL LETTER I\n24BF; C; 24D9; # CIRCLED LATIN CAPITAL LETTER J\n24C0; C; 24DA; # CIRCLED LATIN CAPITAL LETTER K\n24C1; C; 24DB; # CIRCLED LATIN CAPITAL LETTER L\n24C2; C; 24DC; # CIRCLED LATIN CAPITAL LETTER M\n24C3; C; 24DD; # CIRCLED LATIN CAPITAL LETTER N\n24C4; C; 24DE; # CIRCLED LATIN CAPITAL LETTER O\n24C5; C; 24DF; # CIRCLED LATIN CAPITAL LETTER P\n24C6; C; 24E0; # CIRCLED LATIN CAPITAL LETTER Q\n24C7; C; 24E1; # CIRCLED LATIN CAPITAL LETTER R\n24C8; C; 24E2; # CIRCLED LATIN CAPITAL LETTER S\n24C9; C; 24E3; # CIRCLED LATIN CAPITAL LETTER T\n24CA; C; 24E4; # CIRCLED LATIN CAPITAL LETTER U\n24CB; C; 24E5; # CIRCLED LATIN CAPITAL LETTER V\n24CC; C; 24E6; # CIRCLED LATIN CAPITAL LETTER W\n24CD; C; 24E7; # CIRCLED LATIN CAPITAL LETTER X\n24CE; C; 24E8; # CIRCLED LATIN CAPITAL LETTER Y\n24CF; C; 24E9; # CIRCLED LATIN CAPITAL LETTER Z\n2C00; C; 2C30; # GLAGOLITIC CAPITAL LETTER AZU\n2C01; C; 2C31; # GLAGOLITIC CAPITAL LETTER BUKY\n2C02; C; 2C32; # GLAGOLITIC CAPITAL LETTER VEDE\n2C03; C; 2C33; # GLAGOLITIC CAPITAL LETTER GLAGOLI\n2C04; C; 2C34; # GLAGOLITIC CAPITAL LETTER DOBRO\n2C05; C; 2C35; # GLAGOLITIC CAPITAL LETTER YESTU\n2C06; C; 2C36; # GLAGOLITIC CAPITAL LETTER ZHIVETE\n2C07; C; 2C37; # GLAGOLITIC CAPITAL LETTER DZELO\n2C08; C; 2C38; # GLAGOLITIC CAPITAL LETTER ZEMLJA\n2C09; C; 2C39; # GLAGOLITIC CAPITAL LETTER IZHE\n2C0A; C; 2C3A; # GLAGOLITIC CAPITAL LETTER INITIAL IZHE\n2C0B; C; 2C3B; # GLAGOLITIC CAPITAL LETTER I\n2C0C; C; 2C3C; # GLAGOLITIC CAPITAL LETTER DJERVI\n2C0D; C; 2C3D; # GLAGOLITIC CAPITAL LETTER KAKO\n2C0E; C; 2C3E; # GLAGOLITIC CAPITAL LETTER LJUDIJE\n2C0F; C; 2C3F; # GLAGOLITIC CAPITAL LETTER MYSLITE\n2C10; C; 2C40; # GLAGOLITIC CAPITAL LETTER NASHI\n2C11; C; 2C41; # GLAGOLITIC CAPITAL LETTER ONU\n2C12; C; 2C42; # GLAGOLITIC CAPITAL LETTER POKOJI\n2C13; C; 2C43; # GLAGOLITIC CAPITAL LETTER RITSI\n2C14; C; 2C44; # GLAGOLITIC CAPITAL LETTER SLOVO\n2C15; C; 2C45; # GLAGOLITIC CAPITAL LETTER TVRIDO\n2C16; C; 2C46; # GLAGOLITIC CAPITAL LETTER UKU\n2C17; C; 2C47; # GLAGOLITIC CAPITAL LETTER FRITU\n2C18; C; 2C48; # GLAGOLITIC CAPITAL LETTER HERU\n2C19; C; 2C49; # GLAGOLITIC CAPITAL LETTER OTU\n2C1A; C; 2C4A; # GLAGOLITIC CAPITAL LETTER PE\n```"
  }
]