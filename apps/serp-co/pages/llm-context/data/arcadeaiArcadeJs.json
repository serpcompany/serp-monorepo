[
  {
    "owner": "arcadeai",
    "repo": "arcade-js",
    "content": "TITLE: Basic Usage of Arcade API in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Arcade client and make a basic API call to execute a tool.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Arcade from '@arcadeai/arcadejs';\n\nconst client = new Arcade({\n  apiKey: process.env['ARCADE_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const executeToolResponse = await client.tools.execute({\n    tool_name: 'Google.ListEmails',\n    input: { n_emails: 10 },\n    user_id: 'user@example.com',\n  });\n\n  console.log(executeToolResponse.id);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Completions in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a POST request to /v1/chat/completions endpoint to generate chat completions. Returns a ChatResponse object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.chat.completions.create({ ...params }) -> ChatResponse\n```\n\n----------------------------------------\n\nTITLE: Executing Tool in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a POST request to /v1/tools/execute endpoint to execute a tool. Returns an ExecuteToolResponse object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.execute({ ...params }) -> ExecuteToolResponse\n```\n\n----------------------------------------\n\nTITLE: Authorizing User in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a POST request to /v1/auth/authorize endpoint to authorize a user. Returns an AuthorizationResponse.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.auth.authorize({ ...params }) -> AuthorizationResponse\n```\n\n----------------------------------------\n\nTITLE: Authorizing Tool Usage in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a POST request to /v1/tools/authorize endpoint to authorize the use of a tool. Returns an AuthorizationResponse.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.authorize({ ...params }) -> AuthorizationResponse\n```\n\n----------------------------------------\n\nTITLE: Listing Tools in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/tools endpoint to retrieve a list of tool definitions. Returns a ToolDefinitionsOffsetPage object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.list({ ...params }) -> ToolDefinitionsOffsetPage\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Arcade API Calls\nDESCRIPTION: Demonstrates error handling for API calls, including catching specific error types and accessing error details.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const chatResponse = await client.chat.completions\n    .create({ messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }] })\n    .catch(async (err) => {\n      if (err instanceof Arcade.APIError) {\n        console.log(err.status); // 400\n        console.log(err.name); // BadRequestError\n        console.log(err.headers); // {server: 'nginx', ...}\n      } else {\n        throw err;\n      }\n    });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tool Definition in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/tools/{name} endpoint to retrieve a specific tool definition. Returns a ToolDefinition object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.get(name) -> ToolDefinition\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Tools in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/scheduled_tools endpoint to retrieve a list of scheduled tool executions. Returns a ToolExecutionsOffsetPage object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.scheduled.list({ ...params }) -> ToolExecutionsOffsetPage\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Tool Execution in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/scheduled_tools/{id} endpoint to retrieve a specific scheduled tool execution. Returns a ScheduledGetResponse object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.scheduled.get(id) -> ScheduledGetResponse\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Arcade API\nDESCRIPTION: Shows how to use TypeScript definitions for request params and response fields when interacting with the Arcade API.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Arcade from '@arcadeai/arcadejs';\n\nconst client = new Arcade({\n  apiKey: process.env['ARCADE_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const params: Arcade.Chat.CompletionCreateParams = {\n    messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }],\n  };\n  const chatResponse: Arcade.ChatResponse = await client.chat.completions.create(params);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Installing Arcade Node API Library\nDESCRIPTION: Command to install the Arcade Node API Library using npm.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @arcadeai/arcadejs\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Status in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/auth/status endpoint to check the authorization status. Returns an AuthorizationResponse.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.auth.status({ ...params }) -> AuthorizationResponse\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Data in Arcade API\nDESCRIPTION: Shows how to access the raw Response object from API calls, including headers and status information.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Arcade();\n\nconst response = await client.chat.completions\n  .create({ messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }] })\n  .asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: chatResponse, response: raw } = await client.chat.completions\n  .create({ messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }] })\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(chatResponse.id);\n```\n\n----------------------------------------\n\nTITLE: Listing Formatted Tools in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/formatted_tools endpoint to retrieve a list of formatted tool responses. Returns a FormattedListResponsesOffsetPage object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.formatted.list({ ...params }) -> FormattedListResponsesOffsetPage\n```\n\n----------------------------------------\n\nTITLE: Retrieving Formatted Tool Response in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/formatted_tools/{name} endpoint to retrieve a specific formatted tool response. Returns an unknown type.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.tools.formatted.get(name, { ...params }) -> unknown\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Arcade API Requests\nDESCRIPTION: Shows how to configure retry behavior for API requests, both globally and per-request.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new Arcade({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.chat.completions.create({ messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }] }, {\n  maxRetries: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts for Arcade API Requests\nDESCRIPTION: Demonstrates how to set timeout durations for API requests, both globally and per-request.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new Arcade({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.chat.completions.create({ messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }] }, {\n  timeout: 5 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Making Custom Requests to Undocumented Endpoints\nDESCRIPTION: Demonstrates how to make requests to undocumented API endpoints using the Arcade client.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Client for Arcade API\nDESCRIPTION: Shows how to provide a custom fetch function for API requests, allowing for request/response inspection or alteration.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'undici'; // as one example\nimport Arcade from '@arcadeai/arcadejs';\n\nconst client = new Arcade({\n  fetch: async (url: RequestInfo, init?: RequestInit): Promise<Response> => {\n    console.log('About to make a request', url, init);\n    const response = await fetch(url, init);\n    console.log('Got response', response);\n    return response;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Agent for Arcade API Requests\nDESCRIPTION: Demonstrates how to configure an HTTP(S) Agent for API requests, useful for proxy settings or customizing connection behavior.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\n// Configure the default for all requests:\nconst client = new Arcade({\n  httpAgent: new HttpsProxyAgent(process.env.PROXY_URL),\n});\n\n// Override per-request:\nawait client.chat.completions.create(\n  { messages: [{ role: 'user', content: 'Hello, how can I use Arcade?' }] },\n  {\n    httpAgent: new http.Agent({ keepAlive: false }),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Health Check in ArcadeAI SDK (TypeScript)\nDESCRIPTION: Sends a GET request to /v1/health endpoint to check the health status of the service. Returns a HealthSchema object.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/api.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.health.check() -> HealthSchema\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Output Files\nDESCRIPTION: Commands to install project dependencies using yarn and build output files to the dist/ directory.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Linking Local SDK Repository\nDESCRIPTION: Steps to clone the repository and link it locally using yarn or pnpm for development purposes.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone\n$ git clone https://www.github.com/ArcadeAI/arcade-js\n$ cd arcade-js\n\n# With yarn\n$ yarn link\n$ cd ../my-package\n$ yarn link @arcadeai/arcadejs\n\n# With pnpm\n$ pnpm link --global\n$ cd ../my-package\n$ pnpm link -—global @arcadeai/arcadejs\n```\n\n----------------------------------------\n\nTITLE: Installing SDK from Git Repository\nDESCRIPTION: Command to install the SDK directly from the GitHub repository using npm.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install git+ssh://git@github.com:ArcadeAI/arcade-js.git\n```\n\n----------------------------------------\n\nTITLE: Adding an Example TypeScript File\nDESCRIPTION: Template for creating a new example TypeScript file in the examples/ directory, including the shebang for execution.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n#!/usr/bin/env -S npm run tsn -T\n…\n```\n\n----------------------------------------\n\nTITLE: Running an Example TypeScript File\nDESCRIPTION: Commands to set executable permissions and run a TypeScript example file using yarn and tsn.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ chmod +x examples/<your-example>.ts\n# run the example against your api\n$ yarn tsn -T examples/<your-example>.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Node Environment Shims in arcade-js\nDESCRIPTION: Example of manually importing Node.js-specific shims to ensure compatibility in Node environments.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/src/_shims/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@arcadeai/arcadejs/shims/node'\n```\n\n----------------------------------------\n\nTITLE: Importing Web Environment Shims in arcade-js\nDESCRIPTION: Example of manually importing web-specific shims to ensure compatibility in browser and other web-like environments.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/src/_shims/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@arcadeai/arcadejs/shims/web'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mock Server for Tests\nDESCRIPTION: Command to set up a mock server using Prism for running tests against the OpenAPI specification.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npx prism mock path/to/your/openapi.yml\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to execute the test suite using yarn.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn run test\n```\n\n----------------------------------------\n\nTITLE: Linting the Codebase\nDESCRIPTION: Command to run the linter on the codebase using yarn.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Formatting and Fixing Lint Issues\nDESCRIPTION: Command to automatically format the code and fix lint issues using yarn.\nSOURCE: https://github.com/ArcadeAI/arcade-js/blob/main/CONTRIBUTING.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn fix\n```"
  }
]