[
  {
    "owner": "paraspell",
    "repo": "xcm-tools",
    "content": "TITLE: Configuring XCM Router with Manual Exchange Selection in JavaScript\nDESCRIPTION: Code snippet demonstrating how to set up an XCM Router with manual exchange selection, configuring currency pairs, amount, slippage, and addresses. The example shows a complete flow from Polkadot to Astar with transaction status monitoring.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nawait RouterBuilder\n        .from('Polkadot')   //Origin Parachain/Relay chain - OPTIONAL PARAMETER\n        .exchange('HydraDDex')    //Exchange Parachain\n        .to('Astar')    //Destination Parachain/Relay chain - OPTIONAL PARAMETER\n        .currencyFrom({symbol: 'DOT'})    // Currency to send {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native('currencySymbol'), amount: amount} | {symbol: Foreign('currencySymbol'), amount: amount} | {symbol: ForeignAbstract('currencySymbol'), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}\n        .currencyTo({symbol: 'ASTR'})    // Currency to receive {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native('currencySymbol'), amount: amount} | {symbol: Foreign('currencySymbol'), amount: amount} | {symbol: ForeignAbstract('currencySymbol'), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}\n        .amount('1000000')  // Amount to send\n        .slippagePct('1')   // Max slipppage percentage\n        .senderAddress(selectedAccount.address)   //Injector address\n        .recipientAddress(recipientAddress) //Recipient address\n        .signer(injector.signer)    //Signer\n        //.evmSignerAddress(evmInjector address)   //Optional parameters when origin node is EVM based (Required with evmSigner)\n        //.evmSigner(EVM signer)                     //Optional parameters when origin node is EVM based (Required with evmInjectorAddress)\n\n        .onStatusChange((status: TTxProgressInfo) => {  //This is how we subscribe to calls that need signing\n          console.log(status.hashes);   //Transaction hashes\n          console.log(status.status);   //Transaction statuses\n          console.log(status.type);    //Transaction types\n        })\n        .buildAndSend()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exchange Amount for Currency Pairs in TypeScript\nDESCRIPTION: Code example showing how to get the expected output amount for a currency exchange between Astar and Acala. It demonstrates the use of getBestAmountOut() method which returns both the amount and the best fitting DEX for the exchange.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst result = await RouterBuilder()\n      .from('Astar') //Optional parameter\n      .to('Acala') //Optional parameter\n      .exchange('Hydration') //Optional parameter\n      .currencyFrom({ symbol: 'ASTR' }) \n      .currencyTo({ symbol: 'DOT' })\n      .amount(10000000000n)\n      .getBestAmountOut();\n\nconsole.log(result.amountOut)\nconsole.log(result.exchange)\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Exchange Selection\nDESCRIPTION: Example of implementing automatic exchange selection based on best price outcome without specifying an exchange.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait RouterBuilder\n        .from('Polkadot')   //Origin Parachain/Relay chain - OPTIONAL PARAMETER\n        .to('Astar')    //Destination Parachain/Relay chain - OPTIONAL PARAMETER\n        .currencyFrom({symbol: 'DOT'})    // Currency to send {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native('currencySymbol'), amount: amount} | {symbol: Foreign('currencySymbol'), amount: amount} | {symbol: ForeignAbstract('currencySymbol'), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}\n        .currencyTo({symbol: 'ASTR'})    // Currency to receive {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native('currencySymbol'), amount: amount} | {symbol: Foreign('currencySymbol'), amount: amount} | {symbol: ForeignAbstract('currencySymbol'), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}\n        .amount('1000000')  // Amount to send\n        .slippagePct('1')   // Max slipppage percentage\n        .senderAddress(injectorAddress)   //Injector address\n        .recipientAddress(recipientAddress) //Recipient address\n        .signer(injector.signer)    //Signer\n        //.evmSenderAddress(evmInjector address)   //Optional parameters when origin node is EVM based (Required with evmSigner)\n        //.evmSigner(EVM signer)                     //Optional parameters when origin node is EVM based (Required with evmInjectorAddress)\n\n        .onStatusChange((status: TTxProgressInfo) => {  //This is how we subscribe to calls that need signing\n          console.log(status.hashes);   //Transaction hashes\n          console.log(status.status);   //Transaction statuses\n          console.log(status.type);    //Transaction types\n        })\n        .buildAndSend()\n```\n\n----------------------------------------\n\nTITLE: Using Utility Functions in XCM Router\nDESCRIPTION: Example of importing and using helper functions from the XCM Router package. This specific example demonstrates how to retrieve all assets supported by a particular DEX using the getExchangeAssets function.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {getExchangeAssets} from @paraspell/xcm-router\n\n//Returns all assets that DEX supports\nconst assets = getExchangeAssets('AssetHubPolkadotDex')\n```\n\n----------------------------------------\n\nTITLE: Converting Asset to Multilocation\nDESCRIPTION: Function to get multilocation for an asset using either symbol or ID.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetAssetMultiLocation(chainFrom, { symbol: symbol } | { id: assetId })\n```\n\n----------------------------------------\n\nTITLE: Checking Asset Support\nDESCRIPTION: Function to check if a Parachain supports a particular asset, returns boolean.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nhasSupportForAsset(node: TNode, symbol: string)\n```\n\n----------------------------------------\n\nTITLE: Importing XCM Router Components\nDESCRIPTION: Different ways to import the XCM Router functionality, including ESM imports and specific component imports.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouterBuilder } from '@paraspell/xcm-router'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport * as xcmRouter from '@paraspell/xcm-router'\n\n//Multiple import options\nimport { transfer, \n         TransactionType, \n         TTransferOptions, \n         TTxProgressInfo } from '@paraspell/xcm-router'\n```\n\n----------------------------------------\n\nTITLE: Querying Asset ID\nDESCRIPTION: Function to get the assetId for a particular Parachain and asset symbol.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetAssetId('Acala', 'DOT')\n```\n\n----------------------------------------\n\nTITLE: Querying All Asset Symbols\nDESCRIPTION: Function to get a combined array of all asset symbols (native and foreign) for a specific Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetAllAssetsSymbols('Acala')\n```\n\n----------------------------------------\n\nTITLE: Querying Assets Object\nDESCRIPTION: Function to retrieve the assets object for a specific Parachain including native and foreign assets information.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetAssetsObject('Acala')\n```\n\n----------------------------------------\n\nTITLE: Importing ParaSpell Assets Functions\nDESCRIPTION: Import statement showing all available functions from the @paraspell/assets package.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAssetsObject, getAssetId, getRelayChainSymbol, getNativeAssets, getNativeAssets, getOtherAssets, getAllAssetsSymbols, hasSupportForAsset, getAssetDecimals, getParaId, getTNode, getAssetMultiLocation, NODE_NAMES } from '@paraspell/assets'\n```\n\n----------------------------------------\n\nTITLE: Querying Native Assets\nDESCRIPTION: Function to get an array of native asset symbols for a particular Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetNativeAssets('Acala')\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Decimals\nDESCRIPTION: Function to get the decimal places for a specific asset.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetAssetDecimals('Basilisk', 'KSM')\n```\n\n----------------------------------------\n\nTITLE: Querying Foreign Assets\nDESCRIPTION: Function to get an array of foreign assets objects containing symbol and assetId properties.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetOtherAssets('Acala')\n```\n\n----------------------------------------\n\nTITLE: Querying Relay Chain Symbol\nDESCRIPTION: Function to get the symbol of the Relay chain (DOT or KSM) for a particular Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetRelayChainSymbol('Basilisk')\n```\n\n----------------------------------------\n\nTITLE: Implementing Whitelist Exchange Selection\nDESCRIPTION: Example of implementing whitelist-based exchange selection with specific exchanges array for best price selection.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait RouterBuilder\n        .from('Polkadot')   //Origin Parachain/Relay chain - OPTIONAL PARAMETER\n        .exchange(['HydrationDex','AcalaDex','AssetHubPolkadotDex'])    //Exchange Parachains\n        .to('Astar')    //Destination Parachain/Relay chain - OPTIONAL PARAMETER\n        .currencyFrom({symbol: 'DOT'})    // Currency to send - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native('currencySymbol'), amount: amount} | {symbol: Foreign('currencySymbol'), amount: amount} | {symbol: ForeignAbstract('currencySymbol'), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount} \n        .currencyTo({symbol: 'ASTR'})    // Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native('currencySymbol'), amount: amount} | {symbol: Foreign('currencySymbol'), amount: amount} | {symbol: ForeignAbstract('currencySymbol'), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}\n        .amount('1000000')  // Amount to send\n        .slippagePct('1')   // Max slipppage percentage\n        .senderAddress(selectedAccount.address)   //Injector address\n        .recipientAddress(recipientAddress) //Recipient address\n        .signer(injector.signer)    //Signer\n        //.evmSenderAddress(evmInjector address)   //Optional parameters when origin node is EVM based (Required with evmSigner)\n        //.evmSigner(EVM signer)                     //Optional parameters when origin node is EVM based (Required with evmInjectorAddress)\n\n        .onStatusChange((status: TTxProgressInfo) => {  //This is how we subscribe to calls that need signing\n          console.log(status.hashes);   //Transaction hashes\n          console.log(status.status);   //Transaction statuses\n          console.log(status.type);    //Transaction types\n        })\n        .buildAndSend()\n```\n\n----------------------------------------\n\nTITLE: Converting an Entire XCM Call to URLs\nDESCRIPTION: Example of how to convert a complete XCM call with multiple arguments to URLs using the convertXCMToUrls function. The example includes Parachain, AccountId32, and nested interior junctions.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-analyser/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//Importing the call\nimport { convertXCMToUrls } from '@paraspell/xcm-analyser';\n\n//Define XCM call arguments you wish to convert\n/*const xcmCallArguments = [\n  {\n    V3: {\n      parents: '1',\n      interior: {\n        X1: {\n          Parachain: '2006',\n        },\n      },\n    },\n  },\n  {\n    V3: {\n      parents: '0',\n      interior: {\n        X1: {\n          AccountId32: {\n            network: null,\n            id: 'accountID',\n          },\n        },\n      },\n    },\n  },\n  {\n    V3: [\n      {\n        id: {\n          Concrete: {\n            parents: '0',\n            interior: {\n              X2: [{ PalletInstance: '50' }, { GeneralIndex: '1984' }],\n            },\n          },\n        },\n        fun: {\n          Fungible: 'amount',\n        },\n      },\n    ],\n  },\n];*/\n\nconst urls = convertXCMToUrls(xcmCallArguments);\n\n/*\nThis should result into:\n[\n  '../Parachain(2006)',\n  './AccountId32(null, accountID)',\n  './PalletInstance(50)/GeneralIndex(1984)',\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Getting default XCM pallet for a Parachain\nDESCRIPTION: TypeScript function signature to get the default XCM pallet for a selected compatible Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/pallets/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetDefaultPallet(node: TNode)\n```\n\n----------------------------------------\n\nTITLE: Querying Parachain ID\nDESCRIPTION: Function to get the ID of a specific Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetParaId('Basilisk')\n```\n\n----------------------------------------\n\nTITLE: Getting all supported XCM pallets for a Parachain\nDESCRIPTION: TypeScript function signature to get all supported XCM pallets for a selected compatible Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/pallets/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetSupportedPallets(node: TNode)\n```\n\n----------------------------------------\n\nTITLE: Getting index of XCM Pallet for a Parachain\nDESCRIPTION: TypeScript function signature to get the index of XCM Pallet for a selected Parachain.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/pallets/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetPalletIndex(node: TNode)\n```\n\n----------------------------------------\n\nTITLE: Getting Parachain Name from ID\nDESCRIPTION: Function to get TNode from Parachain ID and ecosystem type.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetTNode(nodeID: number, ecosystem: 'polkadot' || 'kusama' || 'ethereum')\n```\n\n----------------------------------------\n\nTITLE: Installing XCM Router Package\nDESCRIPTION: Command to install the main XCM Router package.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add || pnpm | npm install @paraspell/xcm-router\n```\n\n----------------------------------------\n\nTITLE: Accessing Parachain Names\nDESCRIPTION: Code to log all compatible Parachain names using the NODE_NAMES constant.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(NODE_NAMES)\n```\n\n----------------------------------------\n\nTITLE: Converting a Multilocation Object to URL\nDESCRIPTION: Example of how to convert a single multilocation object to a URL format using the convertMultilocationToUrl function. The example demonstrates converting a multilocation with PalletInstance and GeneralIndex junctions.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-analyser/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Importing the call\nimport { convertMultilocationToUrl } from '@paraspell/xcm-analyser';\n\n//Define the multilocation you wish to convert to URL\n/*const multilocation: MultiLocation = {\n      parents: '0',\n      interior: {\n        X2: [\n          {\n            PalletInstance: '50',\n          },\n          {\n            GeneralIndex: '41',\n          },\n        ],\n      },\n    };*/\n\nconst result = convertMultilocationToUrl(multiplication);\n\n/*\nThis should result into:\n'./PalletInstance(50)/GeneralIndex(41)'\n*/\n```\n\n----------------------------------------\n\nTITLE: Converting a Multilocation JSON to URL\nDESCRIPTION: Example of how to convert a multilocation in JSON format to a URL using the convertMultilocationToUrlJson function. The example shows conversion of a JSON string with PalletInstance and GeneralIndex junctions.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-analyser/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//Importing the call\nimport { convertMultilocationToUrlJson } from '@paraspell/xcm-analyser';\n\n//Define multilocation JSON\n/*const multilocationJson = `{\n      \"parents\": \"3\",\n      \"interior\": {\n        \"X2\": [\n          {\n            \"PalletInstance\": \"50\"\n          },\n          {\n            \"GeneralIndex\": \"41\"\n          }\n        ]\n      }\n    }`*/\n\nconst result = convertMultilocationToUrl(multilocationJson);\n\n/*\nThis should result into:\n''../../../PalletInstance(50)/GeneralIndex(41)''\n*/\n```\n\n----------------------------------------\n\nTITLE: Starting XCM Visualizator Frontend\nDESCRIPTION: Command to start the frontend development server for the XCM Visualizator. This should be run from the frontend folder of the project.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/visualizator-be/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Importing functionality from @paraspell/pallets\nDESCRIPTION: TypeScript code to import the main functions and constants from the @paraspell/pallets package.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/pallets/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultPallet, getSupportedPallets, getPalletIndex, SUPPORTED_PALLETS } from  '@paraspell/pallets'\n```\n\n----------------------------------------\n\nTITLE: Printing all supported XCM pallets\nDESCRIPTION: TypeScript code to log all supported XCM pallets as a constant to the console.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/pallets/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(SUPPORTED_PALLETS)\n```\n\n----------------------------------------\n\nTITLE: Running the XCM Visualizator Backend\nDESCRIPTION: Command to start the backend server from the backend folder after installing dependencies.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/visualizator-fe/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding XCM Version Override Capability in Markdown\nDESCRIPTION: This snippet shows the addition of a feature to override the XCM version in the SDK.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **sdk:** Add ability to override XCM version ✨ ([3a5459c](https://github.com/paraspell/xcm-tools/commit/3a5459c2b54535e98db82d86bd11a4a3e7d9b329))\n```\n\n----------------------------------------\n\nTITLE: Adding Support for V4 MultiAsset in Markdown\nDESCRIPTION: This snippet indicates the addition of support for V4 MultiAsset in the XCM Tools SDK.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Add support for V4 MultiAsset ([3d6c68b](https://github.com/paraspell/xcm-tools/commit/3d6c68b9b146aa0d42210e84b0f332c3bf60c0aa))\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Dependencies in Markdown\nDESCRIPTION: This snippet indicates an update to the SDK dependencies.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* Update SDK dependencies ⚙️ ([281d5c7](https://github.com/paraspell/xcm-tools/commit/281d5c7a5fd043c7a5b3d323218ccfdba9ef0a56))\n```\n\n----------------------------------------\n\nTITLE: Adding EVM Signer Support in XCM Router\nDESCRIPTION: This snippet indicates the addition of support for EVM signer in the XCM router.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* **xcm-router:** Add support for EVM signer ([569f4fc](https://github.com/paraspell/xcm-tools/commit/569f4fc3e0316df4ac82a1b4f3714a7528548c14))\n```\n\n----------------------------------------\n\nTITLE: Installing ParaSpell Assets Package\nDESCRIPTION: Commands to install the @paraspell/assets package using different package managers.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/assets/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm | npm install || yarn add @paraspell/assets\n```\n\n----------------------------------------\n\nTITLE: Installing XCM Router Dependencies\nDESCRIPTION: Commands to install required dependencies for the XCM Router including Polkadot API packages.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-router/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add || pnpm | npm install @polkadot/api @polkadot/types @polkadot/api-base @polkadot/apps-config @polkadot/util\n```\n\n----------------------------------------\n\nTITLE: Installing @paraspell/pallets package\nDESCRIPTION: Command to install the @paraspell/pallets package using various package managers.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/pallets/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm | npm install || yarn add @paraspell/pallets\n```\n\n----------------------------------------\n\nTITLE: Installing the XCM Analyser Package\nDESCRIPTION: Instructions for installing the @paraspell/xcm-analyser package using different package managers including npm, yarn, and pnpm.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/xcm-analyser/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm | npm install || yarn add @paraspell/xcm-analyser\n```\n\n----------------------------------------\n\nTITLE: Monorepo Directory Structure\nDESCRIPTION: Directory structure showing the organization of apps and packages within the monorepo, including XCM Playground, API, SDK, Router, and other components.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napps | - XCM Playground\n     | - XCM API\n     | - XCM API Landing page\n     | - XCM Tools Landing page\n     | - XCM Visualizator FE\n     | - XCM Visualizator BE\n\npackages | - XCM SDK\n         | - XCM SDK-PJS\n         | - XCM SDK-Core\n         | - XCM SDK-Common\n         | - XCM Router\n         | - XCM Analyser\n         | - Assets\n         | - Pallets\n```\n\n----------------------------------------\n\nTITLE: Fixing WS Endpoints Timeout Issue in Markdown\nDESCRIPTION: This snippet shows a bug fix for WS endpoints timing out.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* Fix WS endpoints timing out ([32f34b8](https://github.com/paraspell/xcm-tools/commit/32f34b8eecaf46be06b968bbd97b817860dd8e52))\n```\n\n----------------------------------------\n\nTITLE: Adding Playground 'Use API' Option in Markdown\nDESCRIPTION: This snippet shows a feature addition for the playground, allowing 'use API' option for transfer-info and asset claim.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Add playground \"use API\" option to transfer-info & asset claim ([8d9bbcb](https://github.com/paraspell/xcm-tools/commit/8d9bbcb602de89fee28def064bf9d765a711c7e5))\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entries in Markdown\nDESCRIPTION: Structured changelog entries following conventional commits format, documenting version changes, features, bug fixes and other updates for the xcm-tools project.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-core/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [8.10.0](https://github.com/paraspell/xcm-tools/compare/sdk-core-v8.9.10...sdk-core-v8.10.0) (2025-04-17)\n\n### Features\n\n* **sdk-core:** Add support for various type_and_then xcm calls ✨ ([08d4f19])\n\n## [8.9.10](https://github.com/paraspell/xcm-tools/compare/sdk-core-v8.9.9...sdk-core-v8.9.10) (2025-04-15)\n\n### Miscellaneous Chores\n\n* **sdk-core:** Synchronize main versions\n```\n\n----------------------------------------\n\nTITLE: Installing XCM-Tools Playground Dependencies with pnpm\nDESCRIPTION: Command to install all required dependencies for the XCM-Tools Playground using pnpm package manager. This must be run before using the playground.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/playground/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting XCM-Tools Playground Development Server\nDESCRIPTION: Command to start the development server for the XCM-Tools Playground. After running this command, users can access the playground by opening the link provided during startup.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/playground/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Monorepo CLI Commands\nDESCRIPTION: Collection of command-line instructions for managing the monorepo, including build, test, format, and various utility commands for package management.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\npnpm format:check\npnpm format:wríte\npnpm lint:check\npnpm test\npnpm test:integration\npnpm test:e2e\npnpm build\npnpm run:playground\npnpm run:api\npnpm run:landing-page\npnpm run:updateAssets\npnpm run:updateEds\npnpm run:updatePallets\npnpm run:updateRouterAssets\npnpm --filter <package_selector> <command>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for XCM Visualizator\nDESCRIPTION: Commands to install dependencies from the monorepository root using pnpm package manager and build the project.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/visualizator-fe/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n//This has to be run from monorepository root\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running the XCM Visualizator Frontend in Development Mode\nDESCRIPTION: Command to start the frontend development server after installing dependencies.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/visualizator-fe/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for XCM Visualizator\nDESCRIPTION: Commands to install project dependencies from the monorepository root using pnpm package manager. This includes installing all necessary packages and building the project.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/visualizator-be/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n//This has to be run from monorepository root\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Starting XCM Visualizator Backend\nDESCRIPTION: Command to start the backend server for the XCM Visualizator application after installing dependencies.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/visualizator-be/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Code from Astar and Shiden Classes\nDESCRIPTION: This snippet shows a code refactoring effort to remove duplicate code from Astar and Shiden classes in the SDK.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* **sdk:** Remove duplicate code from Astar, Shiden classes ([c347cd0](https://github.com/paraspell/xcm-tools/commit/c347cd021abd983b7f8c8544ebee281f9f1695e2))\n```\n\n----------------------------------------\n\nTITLE: Running Compilation for ParaSpell SDK Common\nDESCRIPTION: Command to run compilation for the @paraspell/sdk-common package using pnpm.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-common/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Running Linter for ParaSpell SDK Common\nDESCRIPTION: Command to run the linter for the @paraspell/sdk-common package using pnpm.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-common/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for ParaSpell SDK Common\nDESCRIPTION: Command to run unit tests for the @paraspell/sdk-common package using pnpm.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-common/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Performing Monthly Maintenance Check in Markdown\nDESCRIPTION: This snippet indicates a routine monthly maintenance check was performed on the project.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* Perform monthly maintenance check ([5b1b76a](https://github.com/paraspell/xcm-tools/commit/5b1b76a249d52568488242908581fe061dee2750))\n```\n\n----------------------------------------\n\nTITLE: Fixing Typos in SDK Documentation\nDESCRIPTION: This snippet shows a chore to fix typos in the SDK documentation.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* **sdk:** Fix typos ([678eb6a](https://github.com/paraspell/xcm-tools/commit/678eb6ac5ee4c5beed067891599d73e70ee9564e))\n```\n\n----------------------------------------\n\nTITLE: Version Commit Reference\nDESCRIPTION: Git commit references and version comparisons showing release tag information\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-core/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.5.2](https://github.com/paraspell/xcm-tools/compare/sdk-core-v8.5.1...sdk-core-v8.5.2) (2025-02-21)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for changelog entries showing commit hashes and descriptions\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-core/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Add PAPI support for Moonbeam -> Ethereum transfer ✨ ([84b80c3](https://github.com/paraspell/xcm-tools/commit/84b80c3539106313b6cfa90279f1eee249ecabdd))\n```\n\n----------------------------------------\n\nTITLE: Feature Section Header\nDESCRIPTION: Section header format for grouping feature changes\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-core/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Section Header\nDESCRIPTION: Section header format for grouping bug fixes\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/packages/sdk-core/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content for ParaSpell Landing Page\nDESCRIPTION: This Markdown snippet provides a brief description of the ParaSpell landing page for XCM Tools, including a link to the live site and an embedded preview image.\nSOURCE: https://github.com/paraspell/xcm-tools/blob/main/apps/site/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ParaSpell Landing page 🛬\nComprehensive and professional landing page for XCM Tools - [link](https://paraspell.xyz)\n<img width=\"1718\" alt=\"img\" src=\"https://github.com/user-attachments/assets/5b2d1b32-5b99-478e-908a-6998722d604b\">\n```"
  }
]