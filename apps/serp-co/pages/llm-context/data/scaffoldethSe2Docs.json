[
  {
    "owner": "scaffold-eth",
    "repo": "se-2-docs",
    "content": "TITLE: Adding Input Change and Button Click Handlers in React TypeScript\nDESCRIPTION: This snippet shows how to wire up the input field to update the newGreeting state and call the handleSetGreeting function when the user clicks the button. It demonstrates handling user interactions in the component.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WriteToContractWriteAsyncButton.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { parseEther } from \"viem\";\nimport { useScaffoldWriteContract } from \"~~/hooks/scaffold-eth\";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState(\"\");\n\n  const { writeContractAsync } = useScaffoldWriteContract(\"YourContract\");\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: \"setGreeting\",\n          args: [newGreeting],\n          value: parseEther(\"0.01\"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log(\"ðŸ“¦ Transaction blockHash\", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error(\"Error setting greeting\", e);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder=\"Write your greeting\"\n        className=\"input border border-primary\"\n        onChange={e => setNewGreeting(e.target.value)}\n      />\n      <button\n        className=\"btn btn-primary\"\n        onClick={handleSetGreeting}\n      >\n        Send\n      </button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Greetings Counter Component in TypeScript React\nDESCRIPTION: A full implementation of a component that reads and displays both total greetings count and user-specific greetings count from a smart contract using useScaffoldReadContract hook and displays it with loading states.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/ReadUintFromContract.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount } from \"wagmi\";\nimport { useScaffoldReadContract } from \"~~/hooks/scaffold-eth\";\n\nexport const GreetingsCount = () => {\n  const { address: connectedAddress } = useAccount();\n\n  const { data: totalCounter, isLoading: isTotalCounterLoading } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"totalCounter\",\n  });\n\n  const { data: connectedAddressCounter, isLoading: isConnectedAddressCounterLoading } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"userGreetingCounter\",\n    args: [connectedAddress], // passing args to function\n  });\n\n  return (\n    <div className=\"card card-compact w-64 bg-secondary text-primary-content shadow-xl m-4\">\n      <div className=\"card-body items-center text-center\">\n        <h2 className=\"card-title\">Greetings Count</h2>\n        <div className=\"card-actions items-center flex-col gap-1 text-lg\">\n          <h2 className=\"font-bold m-0\">Total Greetings count:</h2>\n          {isTotalCounterLoading ? (\n            <span className=\"loading loading-spinner\"></span>\n          ) : (\n            <p className=\"m-0\">{totalCounter ? totalCounter.toString() : 0}</p>\n          )}\n          <h2 className=\"font-bold m-0\">Your Greetings count:</h2>\n          {isConnectedAddressCounterLoading ? (\n            <span className=\"loading loading-spinner\"></span>\n          ) : (\n            <p className=\"m-0\">{connectedAddressCounter ? connectedAddressCounter.toString() : 0}</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating useTransactor Hook with Wagmi in TypeScript React\nDESCRIPTION: This snippet shows how to initialize the useTransactor hook and use it to wrap the writeContractAsyncWithParams function for transaction status feedback.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WagmiContractWriteWithFeedback.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { parseEther } from \"viem\";\nimport { useWriteContract } from \"wagmi\";\nimport DeployedContracts from \"~~/contracts/deployedContracts\";\nimport { useTransactor } from \"~~/hooks/scaffold-eth\";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: \"setGreeting\",\n      value: parseEther(\"0.01\"),\n      args: [\"Hello world!\"],\n    });\n\n  const writeTx = useTransactor();\n\n  return <button onClick={() => writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 })}>Send</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing useScaffoldWriteContract Hook in React TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the useScaffoldWriteContract hook and set up the handleSetGreeting function for contract interaction. It includes state management for the new greeting and error handling.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WriteToContractWriteAsyncButton.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { parseEther } from \"viem\";\nimport { useScaffoldWriteContract } from \"~~/hooks/scaffold-eth\";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState(\"\");\n\n  const { writeContractAsync } = useScaffoldWriteContract(\"YourContract\");\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: \"setGreeting\",\n          args: [newGreeting],\n          value: parseEther(\"0.01\"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log(\"ðŸ“¦ Transaction blockHash\", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error(\"Error setting greeting\", e);\n    }\n  };\n\n  return (\n    <>\n      <input type=\"text\" placeholder=\"Write your greeting\" className=\"input border border-primary\" />\n      <button>Send</button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteContractAsync Button in React TypeScript\nDESCRIPTION: This code snippet shows the full implementation of a Greetings component that allows users to set a new greeting in a smart contract. It uses the useScaffoldWriteContract hook to handle the contract interaction, manages input state, and provides feedback during the transaction process.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WriteToContractWriteAsyncButton.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { parseEther } from \"viem\";\nimport { useScaffoldWriteContract } from \"~~/hooks/scaffold-eth\";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState(\"\");\n\n  const { writeContractAsync, isPending } = useScaffoldWriteContract(\"YourContract\");\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: \"setGreeting\",\n          args: [newGreeting],\n          value: parseEther(\"0.01\"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log(\"ðŸ“¦ Transaction blockHash\", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error(\"Error setting greeting\", e);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder=\"Write your greeting\"\n        className=\"input border border-primary\"\n        onChange={e => setNewGreeting(e.target.value)}\n      />\n      <button className=\"btn btn-primary\" onClick={handleSetGreeting} disabled={isPending}>\n        {isPending ? <span className=\"loading loading-spinner loading-sm\"></span> : \"Send\"}\n      </button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useScaffoldEventHistory Hook in TypeScript\nDESCRIPTION: Example showing how to retrieve historical event logs for a smart contract, with filtering by address and returning additional block, transaction, and receipt data. The hook returns the events data, loading state, and any errors.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useScaffoldEventHistory.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: events,\n  isLoading: isLoadingEvents,\n  error: errorReadingEvents,\n} = useScaffoldEventHistory({\n  contractName: \"YourContract\",\n  eventName: \"GreetingChange\",\n  fromBlock: 31231n,\n  watch: true,\n  filters: { greetingSetter: \"0x9eB2C4866aAe575bC88d00DE5061d5063a1bb3aF\" },\n  blockData: true,\n  transactionData: true,\n  receiptData: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Contract Interaction Button with Wagmi in TypeScript React\nDESCRIPTION: This code snippet demonstrates the full implementation of a contract interaction button using wagmi's useWriteContract hook and a custom useTransactor hook. It includes error handling and a loading state.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WagmiContractWriteWithFeedback.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { parseEther } from \"viem\";\nimport { useWriteContract } from \"wagmi\";\nimport DeployedContracts from \"~~/contracts/deployedContracts\";\nimport { useTransactor } from \"~~/hooks/scaffold-eth\";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync, isPending } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: \"setGreeting\",\n      value: parseEther(\"0.01\"),\n      args: [\"Hello world!\"],\n    });\n\n  const writeTx = useTransactor();\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 });\n    } catch (e) {\n      console.log(\"Unexpected error in writeTx\", e);\n    }\n  };\n\n  return (\n    <button className=\"btn btn-primary\" onClick={handleSetGreeting} disabled={isPending}>\n      {isPending ? <span className=\"loading loading-spinner loading-sm\"></span> : \"Send\"}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi's useWriteContract Hook in TypeScript React\nDESCRIPTION: This code demonstrates how to set up and configure the useWriteContract hook from wagmi, including contract address, ABI, function name, value, and arguments.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WagmiContractWriteWithFeedback.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { parseEther } from \"viem\";\nimport { useWriteContract } from \"wagmi\";\nimport DeployedContracts from \"~~/contracts/deployedContracts\";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: \"setGreeting\",\n      value: parseEther(\"0.01\"),\n      args: [\"Hello world!\"],\n    });\n  return <button>Send</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Smart Contract Events with useScaffoldWatchContractEvent in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useScaffoldWatchContractEvent hook to listen for the GreetingChange event emitted by a smart contract. It shows how to access the event parameters through the log.args object and process them in the onLogs callback function.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useScaffoldWatchContractEvent.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseScaffoldWatchContractEvent({\n  contractName: \"YourContract\",\n  eventName: \"GreetingChange\",\n  // The onLogs function is called whenever a GreetingChange event is emitted by the contract.\n  // Parameters emitted by the event can be destructed using the below example\n  // for this example: event GreetingChange(address greetingSetter, string newGreeting, bool premium, uint256 value);\n  onLogs: logs => {\n    logs.map(log => {\n      const { greetingSetter, value, premium, newGreeting } = log.args;\n      console.log(\"ðŸ“¡ GreetingChange event\", greetingSetter, value, premium, newGreeting);\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useTransactor Hook for ETH Transfer in TypeScript\nDESCRIPTION: Example showing how to use the useTransactor hook to send 1 ETH to a specific address. The hook handles transaction signing through WalletClient and provides UI feedback on completion.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useTransactor.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactor = useTransactor();\nconst writeTx = transactor({\n  to: \"0x97843608a00e2bbc75ab0C1911387E002565DEDE\", // address of buidlguidl.eth\n  value: 1000000000000000000n,\n});\nawait writeTx();\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectedAddressBalance Component in TypeScript React\nDESCRIPTION: This code snippet demonstrates the full implementation of a ConnectedAddressBalance component. It uses wagmi's useAccount hook to get the connected address and Scaffold-ETH 2's Address and Balance components to display the information.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/GetCurrentBalanceFromAccount.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount } from \"wagmi\";\nimport { Address, Balance } from \"~~/components/scaffold-eth\";\n\nexport const ConnectedAddressBalance = () => {\n  const { address: connectedAddress } = useAccount();\n\n  return (\n    <div className=\"bg-base-300 p-6 rounded-lg max-w-md mx-auto mt-6\">\n      <h2 className=\"text-lg font-bold mb-2\">Your Ethereum Balance</h2>\n\n      <div className=\"text-sm font-semibold mb-2\">\n        Address: <Address address={connectedAddress} />\n      </div>\n\n      <div className=\"text-sm font-semibold\">\n        Balance: <Balance address={connectedAddress} />\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Loading State to Contract Interaction Button in React TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the isPending state from useScaffoldWriteContract to show a loading spinner and disable the button while the transaction is being processed. It enhances user experience by providing visual feedback during contract interactions.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WriteToContractWriteAsyncButton.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { parseEther } from \"viem\";\nimport { useScaffoldWriteContract } from \"~~/hooks/scaffold-eth\";\n\nexport const Greetings = () => {\n  const [newGreeting, setNewGreeting] = useState(\"\");\n  const { writeContractAsync, isPending } = useScaffoldWriteContract(\"YourContract\");\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeContractAsync(\n        {\n          functionName: \"setGreeting\",\n          args: [newGreeting],\n          value: parseEther(\"0.01\"),\n        },\n        {\n          onBlockConfirmation: txnReceipt => {\n            console.log(\"ðŸ“¦ Transaction blockHash\", txnReceipt.blockHash);\n          },\n        },\n      );\n    } catch (e) {\n      console.error(\"Error setting greeting\", e);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder=\"Write your greeting\"\n        className=\"input border border-primary\"\n        onChange={e => setNewGreeting(e.target.value)}\n      />\n\n      <button\n        className=\"btn btn-primary\"\n        onClick={handleSetGreeting}\n        disabled={isPending}\n      >\n        {isPending ? <span className=\"loading loading-spinner loading-sm\"></span> : \"Send\"}\n      </button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Contract Write Transaction in React Component\nDESCRIPTION: Example of using the writeContractAsync function within a React button component to call a smart contract function. This snippet shows how to set function arguments, handle ETH value, and implement error handling for the transaction.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useScaffoldWriteContract.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<button\n  className=\"btn btn-primary\"\n  onClick={async () => {\n    try {\n      await writeYourContractAsync({\n        functionName: \"setGreeting\",\n        args: [\"The value to set\"],\n        value: parseEther(\"0.1\"),\n      });\n    } catch (e) {\n      console.error(\"Error setting greeting:\", e);\n    }\n  }}\n>\n  Set Greeting\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Handler with Error Handling in TypeScript React\nDESCRIPTION: This code snippet demonstrates how to wrap the writeTx function in a handler function with error handling for initiating the transaction on button click.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WagmiContractWriteWithFeedback.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { parseEther } from \"viem\";\nimport { useWriteContract } from \"wagmi\";\nimport DeployedContracts from \"~~/contracts/deployedContracts\";\nimport { useTransactor } from \"~~/hooks/scaffold-eth\";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync, isPending } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n  writeContractAsync({\n    address: DeployedContracts[31337].YourContract.address,\n    abi: DeployedContracts[31337].YourContract.abi,\n    functionName: \"setGreeting\",\n    value: parseEther(\"0.01\"),\n    args: [\"Hello world!\"],\n  });\n\n  const writeTx = useTransactor();\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 });\n    } catch (e) {\n      console.log(\"Unexpected error in writeTx\", e);\n    }\n  };\n\n  return (\n    <button className=\"btn btn-primary\" onClick={handleSetGreeting}>\n      Send\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useScaffoldReadContract Hook in TypeScript\nDESCRIPTION: Example showing how to use the useScaffoldReadContract hook to read data from a smart contract function. This snippet demonstrates retrieving data from the userGreetingCounter function with a specific Ethereum address as an argument.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useScaffoldReadContract.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: totalCounter } = useScaffoldReadContract({\n  contractName: \"YourContract\",\n  functionName: \"userGreetingCounter\",\n  args: [\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Loading State to Contract Interaction Button in TypeScript React\nDESCRIPTION: This snippet shows how to implement a loading state for the contract interaction button using the isPending state from useWriteContract, including button disabling and a loading spinner.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WagmiContractWriteWithFeedback.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { parseEther } from \"viem\";\nimport { useWriteContract } from \"wagmi\";\nimport DeployedContracts from \"~~/contracts/deployedContracts\";\nimport { useTransactor } from \"~~/hooks/scaffold-eth\";\n\nexport const ContractInteraction = () => {\n  const { writeContractAsync, isPending } = useWriteContract();\n\n  const writeContractAsyncWithParams = () =>\n    writeContractAsync({\n      address: DeployedContracts[31337].YourContract.address,\n      abi: DeployedContracts[31337].YourContract.abi,\n      functionName: \"setGreeting\",\n      value: parseEther(\"0.01\"),\n      args: [\"Hello world!\"],\n    });\n\n  const writeTx = useTransactor();\n\n  const handleSetGreeting = async () => {\n    try {\n      await writeTx(writeContractAsyncWithParams, { blockConfirmations: 1 });\n    } catch (e) {\n      console.log(\"Unexpected error in writeTx\", e);\n    }\n  };\n\n  return (\n    <button className=\"btn btn-primary\" onClick={handleSetGreeting} disabled={isPending}>\n      {isPending ? <span className=\"loading loading-spinner loading-sm\"></span> : \"Send\"}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data with Parameters in TypeScript React\nDESCRIPTION: Enhanced implementation that reads both parameterless and parameter-based contract functions, using the useAccount hook to fetch the connected wallet address to pass as an argument.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/ReadUintFromContract.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScaffoldReadContract } from \"~~/hooks/scaffold-eth\";\nimport { useAccount } from \"wagmi\";\n\nexport const GreetingsCount = () => {\n  const { address: connectedAddress } = useAccount();\n\n  const { data: totalCounter } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"totalCounter\",\n  });\n\n  const { data: connectedAddressCounter } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"userGreetingCounter\",\n    args: [connectedAddress], // passing args to function\n  });\n\n  return (\n    <div>\n      <h2>Total Greetings count:</h2>\n      <p>{totalCounter ? totalCounter.toString() : 0}</p>\n      <h2>Your Greetings count:</h2>\n      <p>{connectedAddressCounter ? connectedAddressCounter.toString() : 0}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using EtherInput Component in React JSX\nDESCRIPTION: This snippet demonstrates how to use the EtherInput component in a React component's JSX, binding it to the state variable and handling changes.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/EtherInput.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<EtherInput value={ethAmount} onChange={amount => setEthAmount(amount)} />\n```\n\n----------------------------------------\n\nTITLE: Adding Loading States to Contract Data Display in TypeScript React\nDESCRIPTION: Final implementation with loading states for better user experience, using the isLoading flag from useScaffoldReadContract to display spinners while data is being fetched from the blockchain.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/ReadUintFromContract.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScaffoldReadContract } from \"~~/hooks/scaffold-eth\";\nimport { useAccount } from \"wagmi\";\n\nexport const GreetingsCount = () => {\n  const { address: connectedAddress } = useAccount();\n\n  const { data: totalCounter, isLoading: isTotalCounterLoading } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"totalCounter\",\n  });\n\n  const { data: connectedAddressCounter, isLoading: isConnectedAddressCounterLoading } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"userGreetingCounter\",\n    args: [connectedAddress], // passing args to function\n  });\n\n  return (\n    <div>\n      <h2>Total Greetings count:</h2>\n      {isTotalCounterLoading ? (\n        <span className=\"loading loading-spinner\"></span>\n      ) : (\n        <p className=\"m-0\">{totalCounter ? totalCounter.toString() : 0}</p>\n      )}\n      <h2>Your Greetings count:</h2>\n      {isConnectedAddressCounterLoading ? (\n        <span className=\"loading loading-spinner\"></span>\n      ) : (\n        <p className=\"m-0\">{connectedAddressCounter ? connectedAddressCounter.toString() : 0}</p>\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing IntegerInput Component in React\nDESCRIPTION: Example of using the IntegerInput component with the required value and onChange props, and an optional placeholder. The component updates the txValue state when input changes.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/IntergerInput.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<IntegerInput\n  value={txValue}\n  onChange={updatedTxValue => {\n    setTxValue(updatedTxValue);\n  }}\n  placeholder=\"value (wei)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useScaffoldWriteContract Hook in TypeScript\nDESCRIPTION: Shows the basic implementation of the useScaffoldWriteContract hook to create a function for writing to a smart contract. This snippet demonstrates how to initialize the hook with a contract name.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useScaffoldWriteContract.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { writeContractAsync: writeYourContractAsync } = useScaffoldWriteContract({ contractName: \"YourContract\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing InputBase Component with Props\nDESCRIPTION: Shows how to use the InputBase component with basic props including name, placeholder, value, and onChange handler.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/InputBase.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<InputBase name=\"url\" placeholder=\"url\" value={url} onChange={setUrl} />\n```\n\n----------------------------------------\n\nTITLE: Defining External Contracts Structure in TypeScript for Scaffold-ETH 2\nDESCRIPTION: This code snippet demonstrates the structure of the externalContracts object in TypeScript. It shows how to define external contracts for different chain IDs, including contract names, addresses, and ABIs. This structure allows Scaffold-ETH 2 custom hooks to interact with these external contracts.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/external-contracts/external-contracts.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst externalContracts = {\n  1: {\n    DAI: {\n      address: \"0x...\",\n      abi: [...],\n    },\n    WETH: {\n      address: \"0x...\",\n      abi: [...],\n    },\n  },\n  5: {\n    DAI: {\n      address: \"0x...\",\n      abi: [...],\n    },\n    WETH: {\n      address: \"0x...\",\n      abi: [...],\n    },\n  },\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Updating Scaffold Configuration with Custom Chain\nDESCRIPTION: This snippet shows how to update the scaffold.config.ts file to include the newly defined custom chain (Base). It imports the custom chain and adds it to the targetNetworks array in the configuration.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/add-custom-chain.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base } from \"./utils/customChains\";\n// ... other imports and type definitions\n\nconst scaffoldConfig = {\n  targetNetworks: [base],\n  // ... other configuration options\n} as const satisfies ScaffoldConfig;\n\nexport default scaffoldConfig;\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data without Parameters in TypeScript React\nDESCRIPTION: Implementation of reading a smart contract's parameterless function using useScaffoldReadContract hook to fetch and display the total greeting count.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/ReadUintFromContract.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScaffoldReadContract } from \"~~/hooks/scaffold-eth\";\n\nexport const GreetingsCount = () => {\n  const { data: totalCounter } = useScaffoldReadContract({\n    contractName: \"YourContract\",\n    functionName: \"totalCounter\",\n  });\n\n  return (\n    <div>\n      <h2 className=\"font-bold m-0\">Total Greetings count:</h2>\n      <p>{totalCounter ? totalCounter.toString() : 0}</p>\n      <h2 className=\"font-bold m-0\">Your Greetings count:</h2>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Chain (Base) in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom chain (Base) using the defineChain function from viem. It includes chain ID, name, native currency details, RPC URLs, and block explorer information.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/add-custom-chain.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from \"viem\";\n\n// Base chain\nexport const base = defineChain({\n  id: 8453,\n  name: \"Base\",\n  nativeCurrency: { name: \"Base\", symbol: \"ETH\", decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: [\"https://mainnet.base.org\"],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: \"Basescan\",\n      url: \"https://basescan.org\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useScaffoldContract Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useScaffoldContract hook to interact with a smart contract. It shows examples of reading data and sending transactions using the contract instance.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useScaffoldContract.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: yourContract } = useScaffoldContract({\n  contractName: \"YourContract\",\n});\n// Returns the greeting and can be called in any function, unlike useScaffoldReadContract\nawait yourContract?.read.greeting();\n\n// Used to write to a contract and can be called in any function\nimport { useWalletClient } from \"wagmi\";\n\nconst { data: walletClient } = useWalletClient();\nconst { data: yourContract } = useScaffoldContract({\n  contractName: \"YourContract\",\n  chainId: 31337,\n  walletClient,\n});\nconst setGreeting = async () => {\n  // Call the method in any function\n  await yourContract?.write.setGreeting([\"the greeting here\"]);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Custom Chains to Scaffold Configuration\nDESCRIPTION: This snippet demonstrates how to add multiple custom chains to the scaffold.config.ts file. It imports multiple chains from the customChains file and includes them in the targetNetworks array.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/add-custom-chain.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base, baseSepolia } from \"./utils/customChains\";\n\nconst scaffoldConfig = {\n  targetNetworks: [base, baseSepolia],\n  // ... other configuration options\n} as const satisfies ScaffoldConfig;\n```\n\n----------------------------------------\n\nTITLE: Fetching Contract Details with useDeployedContractInfo in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the useDeployedContractInfo hook to retrieve information about a deployed smart contract. The hook returns an object containing the contract's ABI and address that can be used for interactions.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/hooks/useDeployedContractInfo.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: deployedContractData } = useDeployedContractInfo({ contractName: \"YourContract\" });\n```\n\n----------------------------------------\n\nTITLE: Scaffold Configuration Type Definition\nDESCRIPTION: TypeScript interface defining the configuration options for the Scaffold framework, including network targets, polling intervals, and wallet settings.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ScaffoldConfig = {\n  targetNetworks: Chain[];\n  pollingInterval: number;\n  alchemyApiKey: string;\n  walletConnectProjectId: string;\n  onlyLocalBurnerWallet: boolean;\n  walletAutoConnect: boolean;\n  // your dapp custom config, eg:\n  // tokenIcon : string;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Wagmi and Scaffold-ETH 2 Components\nDESCRIPTION: This code snippet demonstrates how to use the wagmi useAccount hook to retrieve the connected account's address and how to use Scaffold-ETH 2's Address and Balance components to display the information.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/GetCurrentBalanceFromAccount.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount } from \"wagmi\";\nimport { Address, Balance } from \"~~/components/scaffold-eth\";\n\nexport const ConnectedAddressBalance = () => {\n  const { address: connectedAddress } = useAccount();\n\n  return (\n    <div>\n      <h2>Your Ethereum Balance</h2>\n      Address: <Address address={connectedAddress} />\n      Balance: <Balance address={connectedAddress} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Scaffold Configuration Example\nDESCRIPTION: Example of extending the Scaffold configuration with custom parameters.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  tokenIcon: \"ðŸ’Ž\",\n```\n\n----------------------------------------\n\nTITLE: Initializing Input State with React useState\nDESCRIPTION: Demonstrates setting up state management for the input value using React's useState hook.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/InputBase.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [url, setUrl] = useState<string>();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Component Structure in React TypeScript\nDESCRIPTION: This snippet shows the initial setup of the Greetings component with a basic input field and button. It serves as the starting point for implementing the contract interaction functionality.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WriteToContractWriteAsyncButton.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Greetings = () => {\n  return (\n    <>\n      <input type=\"text\" placeholder=\"Write your greeting\" className=\"input border border-primary\" />\n      <button>Send</button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Component Structure in TypeScript React\nDESCRIPTION: This snippet shows the initial setup of the ContractInteraction component with a basic button structure.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/WagmiContractWriteWithFeedback.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\n\nexport const ContractInteraction = () => {\n  return <button>Send</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Network in Hardhat\nDESCRIPTION: This snippet shows how to add a custom network (Base in this example) to the Hardhat configuration file. It includes the network URL and the deployer's private key for authentication.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-smart-contracts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnetworks: {\n    // ... other networks\n    base: {\n        url: \"https://mainnet.base.org\",\n        accounts: [deployerPrivateKey]\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Balance Component with an Ethereum Address\nDESCRIPTION: Demonstrates basic usage of the Balance component by passing an Ethereum address as a prop to display its balance.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/Balance.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Balance address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Network in Foundry Configuration\nDESCRIPTION: This code snippet demonstrates how to add a custom network (Base in this example) to the Foundry configuration file. It specifies the RPC endpoint for the network.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-smart-contracts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_endpoints]\n...other chains\nbase = \"https://mainnet.base.org\"\n```\n\n----------------------------------------\n\nTITLE: Starting Local Blockchain Network for Scaffold ETH-2\nDESCRIPTION: Command to run a local Ethereum network using either Hardhat or Foundry for testing and development purposes.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn chain\n```\n\n----------------------------------------\n\nTITLE: Using AddressInput Component in TSX\nDESCRIPTION: This example demonstrates how to use the AddressInput component with state management and placeholder text.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/AddressInput.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AddressInput onChange={setAddress} value={address} placeholder=\"Input your address\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts in Scaffold ETH-2\nDESCRIPTION: Command to deploy test smart contracts to the local Ethereum network for development and testing.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: Using Address Component in React\nDESCRIPTION: This example demonstrates how to use the Address component with a specific Ethereum address.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/Address.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Address address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Hardhat Deploy Scripts\nDESCRIPTION: This snippet shows how to add tags to Hardhat deploy scripts. Tags can be used to deploy specific contracts by running the deploy command with the --tags flag.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-smart-contracts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeployMyContract.tags = [\"tagExample\"];\n```\n\n----------------------------------------\n\nTITLE: Using RainbowKitCustomConnectButton in React Components\nDESCRIPTION: Example of how to use the RainbowKitCustomConnectButton component in a React component. The button provides wallet connection functionality with enhanced features.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/RainbowKitCustomConnectButton.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitCustomConnectButton />\n```\n\n----------------------------------------\n\nTITLE: Installing Scaffold ETH-2 with extensions\nDESCRIPTION: This command installs Scaffold ETH-2 with a specific extension. The -e flag allows specifying which extension to include during the setup process.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/installation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-eth@latest -e extension-name\n```\n\n----------------------------------------\n\nTITLE: Initializing State for EtherInput in React\nDESCRIPTION: This code initializes a state variable to store the ETH amount entered in the EtherInput component.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/EtherInput.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [ethAmount, setEthAmount] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: Creating Extension from Project\nDESCRIPTION: Demonstrates the command to create an extension from a developed project, placing it in the externalExtensions directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn create-extension {projectName}\n```\n\n----------------------------------------\n\nTITLE: Running CLI in Dev Mode for Local Testing\nDESCRIPTION: Illustrates how to use the yarn CLI command in development mode to test an extension locally, creating a symlinked instance.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn cli -e {extensionName} --dev\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ConnectedAddressBalance Component Structure\nDESCRIPTION: This snippet shows the initial setup of the ConnectedAddressBalance component with a basic structure. It creates a new component in the 'components' folder of the application.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/GetCurrentBalanceFromAccount.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ConnectedAddressBalance = () => {\n  return (\n    <div>\n      <h2>Your Ethereum Balance</h2>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Pushing Updated Extension Changes\nDESCRIPTION: Shows the Git commands to commit and push changes made during local testing of the extension.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd create-eth/externalExtensions/${extensionName}\ngit add .\ngit commit -m \"some changes\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Component Structure in TypeScript React\nDESCRIPTION: Initial setup of a React component that will display greeting counts from a smart contract, defining the basic structure without data fetching functionality.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/recipes/ReadUintFromContract.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const GreetingsCount = () => {\n  return (\n    <div>\n      <h2 className=\"font-bold m-0\">Total Greetings count:</h2>\n      <h2 className=\"font-bold m-0\">Your Greetings count:</h2>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing Extension to GitHub\nDESCRIPTION: Shows the Git commands to initialize a repository for the extension, commit changes, and push to a remote GitHub repository.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd create-eth/externalExtensions/${extensionName}\ngit init\ngit add .\ngit commit -m \"Initial commit of my extension\"\ngit remote add origin <remote-repo-url>\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Using BlockieAvatar Component in TSX\nDESCRIPTION: This example demonstrates how to use the BlockieAvatar component with a specific Ethereum address and size.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/BlockieAvatar.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<BlockieAvatar address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" size={24} />\n```\n\n----------------------------------------\n\nTITLE: Installing Extension via NPX Command\nDESCRIPTION: Demonstrates how to use npx to install a custom Scaffold-ETH 2 extension from a GitHub repository, with an optional branch specification.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-eth@latest -e {github-username}/{extension-repo-name}:{branch-name} # branch-name is optional\n```\n\n----------------------------------------\n\nTITLE: Initializing State for AddressInput in TSX\nDESCRIPTION: This code initializes a state variable to store the address value for use with the AddressInput component.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/AddressInput.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [address, setAddress] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: Running Scaffold-ETH 2 Documentation with Search Feature Enabled\nDESCRIPTION: Commands to build the documentation site and serve it with search functionality. This two-step process is required when the search feature needs to be used or when search configuration changes are made.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus build\nnpm run docusaurus serve\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Scaffold-ETH 2 Documentation Website\nDESCRIPTION: Commands to clone the repository, install dependencies, and start the Docusaurus documentation server. This is the basic setup process for local development of the documentation site.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/scaffold-eth/se2-docs.git\ncd se2-docs\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions with npx create-eth in Scaffold-ETH 2\nDESCRIPTION: Command to install an extension when creating a new Scaffold-ETH 2 project using npx. The command requires specifying the GitHub username, extension repository name, and optionally a branch name. If the branch name is not specified, it will use the default branch.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/howToInstall.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-eth@latest -e {github-username}/{extension-repo-name}:{branch-name}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Vercel CLI Command\nDESCRIPTION: Basic command to deploy the application to Vercel through command line interface.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn vercel\n```\n\n----------------------------------------\n\nTITLE: Importing Address Component in React\nDESCRIPTION: This snippet shows how to import the Address component from the scaffold-eth components directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/Address.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Address } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Deploying to Vercel Without Type and Lint Checks in Scaffold-ETH 2\nDESCRIPTION: Command to deploy a Scaffold-ETH 2 project to Vercel while bypassing any type or lint error checks that would normally cause the deployment to fail.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/disable-type-linting-error-checks.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn vercel:yolo\n```\n\n----------------------------------------\n\nTITLE: Importing the Balance Component in React\nDESCRIPTION: Shows how to import the Balance component from the Scaffold-ETH components directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/Balance.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Balance } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Foundry Configuration File Path in Scaffold ETH-2\nDESCRIPTION: File path to the Foundry configuration file where network settings can be customized.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npackages/foundry/foundry.toml\n```\n\n----------------------------------------\n\nTITLE: Importing EtherInput Component in React\nDESCRIPTION: This snippet shows how to import the EtherInput component from the scaffold-eth components.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/EtherInput.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EtherInput } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Position in Markdown Files\nDESCRIPTION: Example of YAML frontmatter used to specify the position of a page in the sidebar navigation. This configuration is added at the top of markdown documents to control their ordering in the autogenerated sidebar.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Importing RainbowKitCustomConnectButton in Scaffold-ETH 2\nDESCRIPTION: Code snippet showing how to import the custom RainbowKit connect button from the Scaffold-ETH components directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/RainbowKitCustomConnectButton.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitCustomConnectButton } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Importing AddressInput Component in TSX\nDESCRIPTION: This snippet shows how to import the AddressInput component from the scaffold-eth components.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/AddressInput.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AddressInput } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Importing BlockieAvatar Component in TSX\nDESCRIPTION: This snippet shows how to import the BlockieAvatar component from the scaffold-eth components directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/BlockieAvatar.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlockieAvatar } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Importing InputBase Component in TSX\nDESCRIPTION: Shows how to import the InputBase component from the scaffold-eth components directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/InputBase.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputBase } from \"~~/components/scaffold-eth\";\n```\n\n----------------------------------------\n\nTITLE: Installing Scaffold ETH-2 using npx\nDESCRIPTION: This command uses the create-eth utility to interactively set up a new Scaffold ETH-2 project. It will prompt for project name and preferred Solidity framework (Hardhat or Foundry).\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-eth@latest\n```\n\n----------------------------------------\n\nTITLE: Displaying Extension Directory Structure\nDESCRIPTION: Shows the recommended directory structure for a Scaffold-ETH 2 extension, including folders for Hardhat, Foundry, and NextJS components.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyour-extension/\nâ”œâ”€â”€ extension/\nâ”‚   â”œâ”€â”€ packages/\nâ”‚   â”‚   â”œâ”€â”€ hardhat/        # (optional) For Hardhat-specific additions\nâ”‚   â”‚   â”œâ”€â”€ foundry/        # (optional) For Foundry-specific additions\nâ”‚   â”‚   â””â”€â”€ nextjs/\nâ”‚   â”‚       â”œâ”€â”€ app/        # Any new pages/files\nâ”‚   â”‚       â”‚   â””â”€â”€ my-page\nâ”‚   â”‚       â”‚       â”œâ”€â”€ page.tsx\nâ”‚   â”‚       â”‚\nâ”‚   â”‚       â”œâ”€â”€ ...         # Any extra files/directories\nâ”‚   â”‚       â””â”€â”€ package.json  # Only include additional dependencies/scripts\nâ”‚   â”œâ”€â”€ package.json        # Monorepo root package.json file\nâ”‚   â””â”€â”€ README.md           # Instance README\nâ””â”€â”€ README.md               # Documentation for your extension\n```\n\n----------------------------------------\n\nTITLE: Starting NextJS Application in Scaffold ETH-2\nDESCRIPTION: Command to launch the NextJS frontend application for interacting with smart contracts via a web interface.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building create-eth Repository\nDESCRIPTION: Shows the commands to clone the create-eth repository, install dependencies, and build the development scripts for extension creation.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/scaffold-eth/create-eth.git\ncd create-eth\nyarn install\nyarn build:dev\n```\n\n----------------------------------------\n\nTITLE: Running CLI to Create New Instance\nDESCRIPTION: Illustrates how to use the yarn CLI command to create a new base instance for extension development.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/extensions/createExtensions.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn cli\n```\n\n----------------------------------------\n\nTITLE: Hardhat Contracts Directory Path in Scaffold ETH-2\nDESCRIPTION: Directory path where smart contracts are stored when using Hardhat for development.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npackages/hardhat/contracts\n```\n\n----------------------------------------\n\nTITLE: Foundry Contracts Directory Path in Scaffold ETH-2\nDESCRIPTION: Directory path where smart contracts are stored when using Foundry for development.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npackages/foundry/contracts\n```\n\n----------------------------------------\n\nTITLE: Hardhat Deployment Scripts Path in Scaffold ETH-2\nDESCRIPTION: Directory path for deployment scripts used to deploy contracts to the network when using Hardhat.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npackages/hardhat/deploy\n```\n\n----------------------------------------\n\nTITLE: Foundry Deployment Scripts Path in Scaffold ETH-2\nDESCRIPTION: Directory path for deployment scripts used to deploy contracts to the network when using Foundry.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npackages/foundry/script\n```\n\n----------------------------------------\n\nTITLE: Navigating to project directory\nDESCRIPTION: After project creation, this command changes to the newly created project directory where all project files are located.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd project-name\n```\n\n----------------------------------------\n\nTITLE: Hardhat Configuration File Path in Scaffold ETH-2\nDESCRIPTION: File path to the Hardhat configuration file where network settings can be customized.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/quick-start/environment.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npackages/hardhat/hardhat.config.ts\n```\n\n----------------------------------------\n\nTITLE: IPFS Deployment Command\nDESCRIPTION: Command to build and deploy the application to BG IPFS.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn ipfs\n```\n\n----------------------------------------\n\nTITLE: Vercel Login Command\nDESCRIPTION: Command to authenticate with Vercel before deployment.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn vercel:login\n```\n\n----------------------------------------\n\nTITLE: Vercel Production Deployment\nDESCRIPTION: Command to deploy the application to Vercel production environment.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn vercel --prod\n```\n\n----------------------------------------\n\nTITLE: Quick Vercel Deployment Without Type Checking\nDESCRIPTION: Command to deploy to Vercel production without TypeScript type checking.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn vercel:yolo --prod\n```\n\n----------------------------------------\n\nTITLE: Disabling Pre-commit Lint Checks with Git Hooks in Scaffold-ETH 2\nDESCRIPTION: Shows how to modify the .husky/pre-commit file to disable linting checks that would otherwise prevent commits with linting errors.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/disable-type-linting-error-checks.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- yarn lint-staged --verbose\n+ # yarn lint-staged --verbose\n```\n\n----------------------------------------\n\nTITLE: Creating State for IntegerInput in React\nDESCRIPTION: Sets up a React state variable to store and manage the integer input value, which can be a string or bigint type.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/IntergerInput.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [txValue, setTxValue] = useState<string | bigint>(\"\");\n```\n\n----------------------------------------\n\nTITLE: Importing Scaffold Configuration\nDESCRIPTION: Code snippet showing how to import the scaffold configuration in other files.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/deploying/deploy-nextjs-app.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport scaffoldConfig from \"~~/scaffold.config\";\n```\n\n----------------------------------------\n\nTITLE: Importing IntegerInput Component in TSX\nDESCRIPTION: Shows how to import the IntegerInput component from the scaffold-eth components directory.\nSOURCE: https://github.com/scaffold-eth/se-2-docs/blob/main/docs/components/IntergerInput.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IntegerInput } from \"~~/components/scaffold-eth\";\n```"
  }
]