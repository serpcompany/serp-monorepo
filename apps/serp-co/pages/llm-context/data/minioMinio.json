[
  {
    "owner": "minio",
    "repo": "minio",
    "content": "TITLE: Querying MinIO Configuration for Notification Settings\nDESCRIPTION: Command to retrieve all notification-related configuration settings from a MinIO server using the MinIO Client (mc) admin tool.\n\nLANGUAGE: bash\nCODE:\n```\n$ mc admin config get myminio | grep notify\n```\n\n----------------------------------------\n\nTITLE: Running MinIO as a Container with Ephemeral Storage\nDESCRIPTION: Command to run MinIO as a container using Podman with an ephemeral data volume. This creates a MinIO server accessible on ports 9000 (API) and 9001 (Console).\n\nLANGUAGE: sh\nCODE:\n```\npodman run -p 9000:9000 -p 9001:9001 \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Server with OpenID Connect Using Environment Variables\nDESCRIPTION: Shows how to configure a MinIO server with OpenID Connect using environment variables. This configuration sets root credentials and specifies the OpenID provider URL and client ID for authentication.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nexport MINIO_IDENTITY_OPENID_CONFIG_URL=https://accounts.google.com/.well-known/openid-configuration\nexport MINIO_IDENTITY_OPENID_CLIENT_ID=\"843351d4-1080-11ea-aa20-271ecba3924a\"\n# Optional: Allow to specify the requested OpenID scopes (OpenID only requires the `openid` scope)\n#export MINIO_IDENTITY_OPENID_SCOPES=\"openid,profile,email\"\nminio server /mnt/export\n```\n\n----------------------------------------\n\nTITLE: User-Specific Resource Access Policy in JSON\nDESCRIPTION: A policy that grants users programmatic access to their own home directory in a bucket, using the ${aws:username} variable to create user-specific paths.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\t{\n\t  \"Action\": [\"s3:ListBucket\"],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\"arn:aws:s3:::mybucket\"],\n\t  \"Condition\": {\"StringLike\": {\"s3:prefix\": [\"${aws:username}/*\"]}}\n\t},\n\t{\n\t  \"Action\": [\n\t\t\"s3:GetObject\",\n\t\t\"s3:PutObject\"\n\t  ],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\"arn:aws:s3:::mybucket/${aws:username}/*\"]\n\t}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Distributed MinIO on Linux/macOS\nDESCRIPTION: Command to start a distributed MinIO instance on multiple nodes with multiple drives. This requires setting environment variables for access credentials and specifying the host pattern and export paths.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_ROOT_USER=<ACCESS_KEY>\nexport MINIO_ROOT_PASSWORD=<SECRET_KEY>\nminio server http://host{1...n}/export{1...m}\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Users via Helm Install Command\nDESCRIPTION: This command installs MinIO and creates multiple users with specified access keys, secret keys, and policies. It demonstrates how to set credentials directly or reference existing secrets.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set users[0].accessKey=accessKey,users[0].secretKey=secretKey,users[0].policy=none,users[1].accessKey=accessKey2,users[1].secretRef=existingSecret,users[1].secretKey=password,users[1].policy=none minio/minio\n```\n\n----------------------------------------\n\nTITLE: Setting OpenID Configuration in MinIO Using MinIO Client\nDESCRIPTION: Command to configure MinIO's OpenID authentication settings. This sets the required OpenID configuration parameters including the discovery document URL and client ID for Keycloak integration.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio identity_openid config_url=\"http://localhost:8080/auth/realms/{your-realm-name}/.well-known/openid-configuration\" client_id=\"account\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating KMS Data Key Rotation Flow in MinIO\nDESCRIPTION: This diagram illustrates the data flow between object metadata and KMS during key rotation. It shows the process of decrypting object keys with existing keys and re-encrypting them with new keys, including the communication with the KMS to retrieve and store encrypted keys.\n\nLANGUAGE: text\nCODE:\n```\n              object metadata                                         KMS\n                    |                                                  |\n                    |                     +----------------+        1a |  +-------+\n                    |-------------------->| EK_1_encrypted |-----------|->| CMK_1 |\n                    |                     +----------------+           |  +---+---+\n                    |                                                  |      |\n                    |              +---------------+       +------+ 1b |      |\n                    |------------->| OEK_encrypted |       | EK_1 |<---|------+\n                    |              +-------+-------+       +------+    |\n                    |                       \\             /            |\n                    |                        \\___  2  ___/             |\n                    |                            \\___/                 |\n                    |                              |                   |\n                    |                           +--+--+                |\n                    |                           | OEK |                |  +-------+\n                    |                           +--+--+                |  | CMK_2 |\n                    |                              |                   |  +---+---+\n                    |                              |                   |      |\n                    | 5     +----------------+     |4      +------+ 3a |      |\n                    |<------| OEK_encrypted' |<----+-------| EK_2 |<---|------+\n                    |       +----------------+             +------+    |      |\n                    |                    +----------------+         3b |      |\n                    |<-------------------| EK_2_encrypted |<-----------|------+\n                    |                    +----------------+            |\n                    |                                                  |\n\n\n1a) Send encrypted data key and master key ID to KMS.\n1b) Receive decrypted data key.\n2)  Decrypt encrypted object key with the KEK derived from the data key.\n3a) Receive new plain data key from the KMS using the master key ID of the server config.\n3b) Receive encrypted form of the data key from the KMS.\n4)  Derive a new KEK from the new data key and re-encrypt the OEK with it.\n5)  Store the encrypted OEK encrypted data key and master key ID in object metadata.\n```\n\n----------------------------------------\n\nTITLE: MinIO Client Configuration and Connection Script in Shell\nDESCRIPTION: A comprehensive shell script that initializes the MinIO client with proper configurations, attempts to connect to a MinIO server with a retry mechanism, and executes custom commands if provided. The script supports TLS connections and can load credentials from configuration files.\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n{{- if .Values.configPathmc }}\nMC_CONFIG_DIR=\"{{ .Values.configPathmc }}\"\nMC=\"/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}\"\n{{- else }}\nMC=\"/usr/bin/mc --insecure\"\n{{- end }}\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for MinIO service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# runCommand ($@)\n# Run custom mc command\nrunCommand() {\n  ${MC} \"$@\"\n  return $?\n}\n\n# Try connecting to MinIO instance\n{{- if .Values.tls.enabled }}\nscheme=https\n{{- else }}\nscheme=http\n{{- end }}\nconnectToMinio $scheme\n\n{{ if .Values.customCommands }}\n# Run custom commands\n{{- range .Values.customCommands }}\nrunCommand {{ .command }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Policy to a User in MinIO\nDESCRIPTION: This command attaches the 'userManager' policy to the 'admin1' user, granting them the permissions defined in the policy.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy attach myminio userManager --user=admin1\n```\n\n----------------------------------------\n\nTITLE: MinIO User Management Commands\nDESCRIPTION: A collection of bash commands for managing users and groups in MinIO, including creating policies, adding users, attaching policies, and configuring access.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy create myminio getonly getonly.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin user add myminio newuser newuser123\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy attach myminio getonly --user=newuser\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin group add myminio newgroup newuser\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy attach myminio getonly --group=newgroup\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin user disable myminio newuser\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin group disable myminio newgroup\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin user remove myminio newuser\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin group remove myminio newgroup newuser\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin group remove myminio newgroup\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy attach myminio putonly --user=newuser\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy attach myminio putonly --group=newgroup\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin user list myminio\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc admin group list myminio\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc alias set myminio-newuser http://localhost:9000 newuser newuser123 --api s3v4\nmc cat myminio-newuser/my-bucketname/my-objectname\n```\n\n----------------------------------------\n\nTITLE: Running MinIO as a Docker Service with Secrets\nDESCRIPTION: This command creates a MinIO service using Docker swarm mode, reading access and secret keys from Docker secrets. This approach is recommended for production deployments.\n\nLANGUAGE: sh\nCODE:\n```\ndocker service create --name=\"minio-service\" --secret=\"access_key\" --secret=\"secret_key\" quay.io/minio/minio server /data\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Claim Based Provider for MinIO OpenID Integration\nDESCRIPTION: Example environment variables configuration for setting up a single OpenID identity provider using the claim-based approach, where the 'groups' claim from the JWT token is used to determine access policies.\n\nLANGUAGE: bash\nCODE:\n```\nMINIO_IDENTITY_OPENID_DISPLAY_NAME=\"my openid\"\nMINIO_IDENTITY_OPENID_CONFIG_URL=http://myopenid.com/.well-known/openid-configuration\nMINIO_IDENTITY_OPENID_CLIENT_ID=\"minio-client-app\"\nMINIO_IDENTITY_OPENID_CLIENT_SECRET=\"minio-client-app-secret\"\nMINIO_IDENTITY_OPENID_SCOPES=\"openid,groups\"\nMINIO_IDENTITY_OPENID_REDIRECT_URI=\"http://127.0.0.1:10000/oauth_callback\"\nMINIO_IDENTITY_OPENID_CLAIM_NAME=\"groups\"\n```\n\n----------------------------------------\n\nTITLE: Example MinIO v2 YAML Configuration Structure\nDESCRIPTION: Complete example of a MinIO v2 YAML configuration file showing server setup with multiple pools, authentication details, and service configurations including FTP and SFTP options.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\naddress: \":9000\"\nrootUser: \"minioadmin\"\nrootPassword: \"minioadmin\"\nconsole-address: \":9001\"\ncerts-dir: \"/home/user/.minio/certs/\"\npools: # Specify the nodes and drives with pools\n  - args:\n      - \"https://server-example-pool1:9000/mnt/disk{1...4}/\"\n      - \"https://server{1...2}-pool1:9000/mnt/disk{1...4}/\"\n      - \"https://server3-pool1:9000/mnt/disk{1...4}/\"\n      - \"https://server4-pool1:9000/mnt/disk{1...4}/\"\n  - args:\n      - \"https://server-example-pool2:9000/mnt/disk{1...4}/\"\n      - \"https://server{1...2}-pool2:9000/mnt/disk{1...4}/\"\n      - \"https://server3-pool2:9000/mnt/disk{1...4}/\"\n      - \"https://server4-pool2:9000/mnt/disk{1...4}/\"\n  # more args\n\noptions:\n  ftp: # settings for MinIO to act as an ftp server\n    address: \":8021\"\n    passive-port-range: \"30000-40000\"\n  sftp: # settings for MinIO to act as an sftp server\n    address: \":8022\"\n    ssh-private-key: \"/home/user/.ssh/id_rsa\"\n```\n\n----------------------------------------\n\nTITLE: Distributed Multi-Tenant MinIO Deployment Across Multiple Nodes\nDESCRIPTION: Commands for setting up a distributed MinIO environment across four nodes with three separate tenants. Each tenant has its own access credentials, dedicated port, and storage location across all nodes.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_ROOT_USER=<TENANT1_ACCESS_KEY>\nexport MINIO_ROOT_PASSWORD=<TENANT1_SECRET_KEY>\nminio server --address :9001 http://192.168.10.1{1...4}/data/tenant1\n\nexport MINIO_ROOT_USER=<TENANT2_ACCESS_KEY>\nexport MINIO_ROOT_PASSWORD=<TENANT2_SECRET_KEY>\nminio server --address :9002 http://192.168.10.1{1...4}/data/tenant2\n\nexport MINIO_ROOT_USER=<TENANT3_ACCESS_KEY>\nexport MINIO_ROOT_PASSWORD=<TENANT3_SECRET_KEY>\nminio server --address :9003 http://192.168.10.1{1...4}/data/tenant3\n```\n\n----------------------------------------\n\nTITLE: OPA Policy Definition in Rego Language\nDESCRIPTION: This is a Rego policy file that defines authorization rules for MinIO. It allows full access to the root user (owner) and restricts non-owners from performing PutObject operations while allowing all other actions.\n\nLANGUAGE: rego\nCODE:\n```\npackage httpapi.authz\n\nimport input\n\ndefault allow = false\n\n# Allow the root user to perform any action.\nallow {\n input.owner == true\n}\n\n# All other users may do anything other than call PutObject\nallow {\n input.action != \"s3:PutObject\"\n input.owner == false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Notification for RabbitMQ\nDESCRIPTION: Example of setting up AMQP notification with RabbitMQ in MinIO, configuring exchange parameters, authentication, and routing options.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio/ notify_amqp:1 exchange=\"bucketevents\" exchange_type=\"fanout\" mandatory=\"off\" no_wait=\"off\"  url=\"amqp://myuser:mypassword@localhost:5672\" auto_deleted=\"off\" delivery_mode=\"0\" durable=\"off\" internal=\"off\" routing_key=\"bucketlogs\"\n```\n\n----------------------------------------\n\nTITLE: Generating Self-signed Certificates with certgen in Linux\nDESCRIPTION: Uses the certgen tool to generate self-signed certificates with SAN (Subject Alternative Name) entries for IP addresses in a MinIO deployment.\n\nLANGUAGE: sh\nCODE:\n```\n./certgen -host \"10.10.0.3,10.10.0.4,10.10.0.5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Notification for RabbitMQ\nDESCRIPTION: Example of setting up AMQP notification with RabbitMQ in MinIO, configuring exchange parameters, authentication, and routing options.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio/ notify_amqp:1 exchange=\"bucketevents\" exchange_type=\"fanout\" mandatory=\"off\" no_wait=\"off\"  url=\"amqp://myuser:mypassword@localhost:5672\" auto_deleted=\"off\" delivery_mode=\"0\" durable=\"off\" internal=\"off\" routing_key=\"bucketlogs\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Admin Policy JSON for User Management in MinIO\nDESCRIPTION: This JSON policy defines permissions for managing users and S3 resources. It allows the admin to create users, delete users, and update configuration while granting full access to S3 resources.\n\nLANGUAGE: json\nCODE:\n```\ncat > adminManageUser.json << EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"admin:CreateUser\",\n        \"admin:DeleteUser\",\n        \"admin:ConfigUpdate\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    },\n    {\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::*\"\n      ],\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Generating Password-protected ECDSA Private Key with OpenSSL for MinIO\nDESCRIPTION: Creates a password-protected ECDSA private key using AES-256 encryption for more secure TLS configuration in MinIO.\n\nLANGUAGE: sh\nCODE:\n```\nopenssl ecparam -genkey -name prime256v1 | openssl ec -aes256 -out private.key -passout pass:PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Running Standalone MinIO Docker Container\nDESCRIPTION: This command runs a MinIO server in a Docker container with exposed ports 9000 and 9001 and environmental variables for root credentials. The data is stored in the container's filesystem and is lost after container exit.\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Python Script for Consuming RabbitMQ Events from MinIO\nDESCRIPTION: A Python script using the Pika library to listen for MinIO bucket event notifications through RabbitMQ. It connects to a RabbitMQ server, declares a fanout exchange, binds a queue, and processes incoming messages.\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n        host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='bucketevents',\n                         exchange_type='fanout')\n\nresult = channel.queue_declare(exclusive=False)\nqueue_name = result.method.queue\n\nchannel.queue_bind(exchange='bucketevents',\n                   queue=queue_name)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\ndef callback(ch, method, properties, body):\n    print(\" [x] %r\" % body)\n\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=False)\n\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Configuring MC Client and Creating Additional User with Policy\nDESCRIPTION: This series of commands sets up the MinIO Client for the admin1 user and then creates a new user 'user1' with an attached policy 'user1policy'.\n\nLANGUAGE: bash\nCODE:\n```\nmc alias set myminio-admin1 http://localhost:9000 admin1 admin123 --api s3v4\n\nmc admin user add myminio-admin1 user1 user123\nmc admin policy attach myminio-admin1 user1policy ~/user1policy.json\nmc admin policy attach myminio-admin1 user1policy --user=user1\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with Auto-creation of Policies\nDESCRIPTION: Installs MinIO with configuration to automatically create access policies after installation. Defines policy name, resources, and allowed actions for fine-grained access control.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set policies[0].name=mypolicy,policies[0].statements[0].resources[0]='arn:aws:s3:::bucket1',policies[0].statements[0].actions[0]='s3:ListBucket',policies[0].statements[0].actions[1]='s3:GetObject' minio/minio\n```\n\n----------------------------------------\n\nTITLE: Implementing SipHash for Erasure Set Selection in Go\nDESCRIPTION: Go function that uses SipHash algorithm to determine which erasure set an object belongs to. The function takes an object name as input and consistently returns the same erasure set index for the same object.\n\nLANGUAGE: go\nCODE:\n```\n// hashes the key returning an integer.\nfunc sipHashMod(key string, cardinality int, id [16]byte) int {\n        if cardinality <= 0 {\n                return -1\n        }\n        sip := siphash.New(id[:])\n        sip.Write([]byte(key))\n        return int(sip.Sum64() % uint64(cardinality))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MinIO Admin Credentials using Environment Variables\nDESCRIPTION: Demonstrates how to set the MinIO root username and password using environment variables before starting the server.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio13\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typed Streaming Handler in Go with MinIO Grid\nDESCRIPTION: Example of creating a type-safe streaming handler with custom payload, request and response types. This approach provides better type safety while maintaining the benefits of continuous two-way communication.\n\nLANGUAGE: go\nCODE:\n```\n    // Create a typed handler.\n    handler := func(ctx context.Context, p *Payload, in <-chan *Req, out chan<- *Resp) *RemoteErr {\n        fmt.Println(\"Got request with initial payload\", p, \"from\", GetCaller(ctx context.Context))\n\t\tfmt.Println(\"Subroute:\", GetSubroute(ctx))\n        for {\n            select {\n            case <-ctx.Done():\n                return nil\n            case req, ok := <-in:\n                if !ok {\n                    break\n                }\n                fmt.Println(\"Got request\", in)\n                // Do something with payload\n                out <- Resp{\"response\"}\n            }\n            // out is closed by the caller and should never be closed by the handler.\n            return nil\n    }\n\t\n    // Create a typed handler.\n    // Due to current generics limitations, a constructor of the empty type must be provided.\n    instance := grid.NewStream[*Payload, *Req, *Resp](h, newPayload, newReq, newResp)\n\t\n    // Tweakable options\n    instance.WithPayload = true // default true when newPayload != nil\n    instance.OutCapacity = 1    // default\n    instance.InCapacity = 1     // default true when newReq != nil\n\t\n    // Register the handler on the manager\n    instance.Register(manager, handler, \"asubroute\")\n\t\n    // The typed instance is also used for calls\n    conn := manager.Connection(\"host\").Subroute(\"asubroute\")\n    stream, err := instance.Call(ctx, conn, &Payload{\"request payload\"})\n    if err != nil { ... }\n\t\n    // Read results from the stream\n    err = stream.Results(func(resp *Resp) error {\n        fmt.Println(\"Got result\", resp)\n        // Return the response for reuse\n\t\tinstance.PutResponse(resp)\n        return nil\n    })\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO from Source using Go\nDESCRIPTION: Command to install MinIO from source code using Go. Requires Go 1.21 or later as a prerequisite and is intended for developers and advanced users.\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/minio/minio@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secrets for MinIO Access Keys\nDESCRIPTION: These commands create Docker secrets for MinIO access and secret keys. This approach is more secure than passing credentials as environment variables.\n\nLANGUAGE: sh\nCODE:\n```\necho \"AKIAIOSFODNN7EXAMPLE\" | docker secret create access_key -\necho \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" | docker secret create secret_key -\n```\n\n----------------------------------------\n\nTITLE: Initializing MinIO Client Configuration in Shell with Helm Templating\nDESCRIPTION: Sets up the MinIO client command with appropriate configuration path based on Helm values. Configures the MC variable with optional insecure flag and custom config directory path if specified.\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n{{- if .Values.configPathmc }}\nMC_CONFIG_DIR=\"{{ .Values.configPathmc }}\"\nMC=\"/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}\"\n{{- else }}\nMC=\"/usr/bin/mc --insecure\"\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Hard Quota for MinIO Bucket with mc CLI\nDESCRIPTION: Sets a hard quota of 1GB for a bucket named 'mybucket' on a MinIO server. A hard quota prevents additional writes to the bucket once the limit is reached.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin bucket quota myminio/mybucket --hard 1gb\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO LDAP Authentication Environment Variables\nDESCRIPTION: Sample minimal settings for configuring LDAP authentication in MinIO for development or testing purposes. These environment variables configure the LDAP server connection, bind credentials, and user search parameters.\n\nLANGUAGE: shell\nCODE:\n```\nexport MINIO_IDENTITY_LDAP_SERVER_ADDR=myldapserver.com:636\nexport MINIO_IDENTITY_LDAP_LOOKUP_BIND_DN='cn=admin,dc=min,dc=io'\nexport MINIO_IDENTITY_LDAP_LOOKUP_BIND_PASSWORD=admin\nexport MINIO_IDENTITY_LDAP_USER_DN_SEARCH_BASE_DN='ou=hwengg,dc=min,dc=io'\nexport MINIO_IDENTITY_LDAP_USER_DN_SEARCH_FILTER='(uid=%s)'\nexport MINIO_IDENTITY_LDAP_TLS_SKIP_VERIFY=on\n```\n\n----------------------------------------\n\nTITLE: Testing MinIO with OPA Policy Enforcement\nDESCRIPTION: This series of commands tests the OPA policy enforcement with MinIO. It creates a bucket and user, uploads a file as the root user, then switches to a regular user to test authorized operations (listing, reading) and unauthorized operations (uploading).\n\nLANGUAGE: sh\nCODE:\n```\n# 1. Create a bucket and a user, and upload a file. These operations will succeed.\nmc mb myminio/test\nmc admin user add myminio foo foobar123\nmc cp /etc/issue myminio/test/\n\n# 2. Now access the server as user `foo`. These operations will also succeed.\nexport MC_HOST_foo=http://foo:foobar123@localhost:9000\nmc ls foo/test\nmc cat foo/test/issue\n\n# 3. Attempt to upload an object as user `foo` - this will fail with a permissions error.\nmc cp /etc/issue myminio/test/issue2\n```\n\n----------------------------------------\n\nTITLE: Configuring Immediate Removal of Older Non-Current Versions in MinIO\nDESCRIPTION: This MinIO-specific extension configuration immediately removes older non-current versions as soon as there are more than 5 non-current versions of an object under 'user-uploads/' prefix.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Rules\": [\n        {\n            \"ID\": \"Keep only most recent 5 noncurrent versions\",\n            \"Status\": \"Enabled\",\n            \"Filter\": {\n                \"Prefix\": \"users-uploads/\"\n            },\n            \"NoncurrentVersionExpiration\": {\n                \"NewerNoncurrentVersions\": 5\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Existing Distributed MinIO Setup\nDESCRIPTION: Command to expand an existing distributed MinIO cluster by adding new sets of servers. This allows for non-disruptive scaling of storage capacity.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_ROOT_USER=<ACCESS_KEY>\nexport MINIO_ROOT_PASSWORD=<SECRET_KEY>\nminio server http://host{1...n}/export{1...m} http://host{o...z}/export{1...m}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for MinIO on GNU/Linux and macOS\nDESCRIPTION: Commands to pull the MinIO Docker image and start a distributed MinIO deployment using Docker Compose on Linux or macOS systems.\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose pull\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring bucket notifications for Elasticsearch in MinIO\nDESCRIPTION: Commands to create a bucket and set up event notifications that trigger when JPEG images are created, modified, or deleted. These events will be sent to the configured Elasticsearch endpoint.\n\nLANGUAGE: sh\nCODE:\n```\nmc mb myminio/images\nmc event add  myminio/images arn:minio:sqs::1:elasticsearch --suffix .jpg\nmc event list myminio/images\narn:minio:sqs::1:elasticsearch s3:ObjectCreated:*,s3:ObjectRemoved:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Setting Domain for Virtual-Host-Style Requests in MinIO\nDESCRIPTION: Example of configuring MinIO to support virtual-host-style requests by setting the MINIO_DOMAIN environment variable, enabling bucket access through subdomains.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_DOMAIN=mydomain.com\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Service Account Function\nDESCRIPTION: Defines a function to create a MinIO service account for a specified user with an optional policy file. It validates the credentials file format, checks if the account already exists, and creates it if needed.\n\nLANGUAGE: shell\nCODE:\n```\n# createSvcacct ($user)\ncreateSvcacct () {\n  USER=$1\n  FILENAME=$2\n  #check accessKey_and_secretKey_tmp file\n  if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then\n    echo \"credentials file does not exist\"\n    return 1\n  fi\n  if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then\n    echo \"credentials file is invalid\"\n    rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP\n    return 1\n  fi\n  SVCACCT=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)\n  # Create the svcacct if it does not exist\n  if ! checkSvcacctExists ; then\n    echo \"Creating svcacct '$SVCACCT'\"\n    # Check if policy file is define\n    if [ -z $FILENAME ]; then\n      ${MC} admin user svcacct add --access-key $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) --secret-key $(tail -n1 $MINIO_ACCESSKEY_SECRETKEY_TMP) myminio $USER\n    else\n      ${MC} admin user svcacct add --access-key $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) --secret-key $(tail -n1 $MINIO_ACCESSKEY_SECRETKEY_TMP) --policy /config/$FILENAME.json myminio $USER\n    fi\n  else\n    echo \"Svcacct '$SVCACCT' already exists.\"\n  fi\n  #clean up credentials files.\n  rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Endpoint in MinIO via Server Settings\nDESCRIPTION: Configuration parameters for setting up NATS notifications in MinIO. This includes connection settings, authentication options, TLS configuration, streaming options, and persistent queue settings.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_nats[:name]  publish bucket notifications to NATS endpoints\n\nARGS:\naddress*                          (address)   NATS server address e.g. '0.0.0.0:4222'\nsubject*                          (string)    NATS subscription subject\nusername                          (string)    NATS username\npassword                          (string)    NATS password\ntoken                             (string)    NATS token\ntls                               (on|off)    set to 'on' to enable TLS\ntls_skip_verify                   (on|off)    trust server TLS without verification, defaults to \"on\" (verify)\nping_interval                     (duration)  client ping commands interval in s,m,h,d. Disabled by default\nstreaming                         (on|off)    set to 'on', to use streaming NATS server\nstreaming_async                   (on|off)    set to 'on', to enable asynchronous publish\nstreaming_max_pub_acks_in_flight  (number)    number of messages to publish without waiting for ACKs\nstreaming_cluster_id              (string)    unique ID for NATS streaming cluster\ncert_authority                    (string)    path to certificate chain of the target NATS server\nclient_cert                       (string)    client cert for NATS mTLS auth\nclient_key                        (string)    client cert key for NATS mTLS auth\nqueue_dir                         (path)      staging dir for undelivered messages e.g. '/home/events'\nqueue_limit                       (number)    maximum limit for undelivered messages, defaults to '100000'\ncomment                           (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Persistent Storage on Linux/macOS\nDESCRIPTION: This command creates a local directory for persistent storage and runs a MinIO container with that directory mounted as a volume. Data written to /data in the container is persisted to the host at ~/minio/data.\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/minio/data\n\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --name minio1 \\\n  -v ~/minio/data:/data \\\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Batch Jobs in MinIO\nDESCRIPTION: Command example demonstrating how to list all running batch jobs on a MinIO server using the 'mc batch list' command, showing job IDs, types, users, and start times.\n\nLANGUAGE: bash\nCODE:\n```\nmc batch list alias/\nID                      TYPE            USER            STARTED\nE24HH4nNMcgY5taynaPfxu  replicate       minioadmin      1 minute ago\n```\n\n----------------------------------------\n\nTITLE: MinIO with Rack-Level Redundancy Configuration\nDESCRIPTION: Command example for running MinIO with rack-level redundancy, distributing data across multiple racks, hosts, and exports to provide high availability and fault tolerance.\n\nLANGUAGE: bash\nCODE:\n```\nminio server http://rack{1...4}-host{1...8}.example.net/export{1...16}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Environment Variables in MinIO\nDESCRIPTION: Environment variables that can be used to configure PostgreSQL event notification in MinIO as an alternative to direct configuration.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_postgres[:name]  publish bucket notifications to Postgres databases\n\nARGS:\nMINIO_NOTIFY_POSTGRES_ENABLE*              (on|off)             enable notify_postgres target, default is 'off'\nMINIO_NOTIFY_POSTGRES_CONNECTION_STRING*   (string)             Postgres server connection-string e.g. \"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\"\nMINIO_NOTIFY_POSTGRES_TABLE*               (string)             DB table name to store/update events, table is auto-created\nMINIO_NOTIFY_POSTGRES_FORMAT*              (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\nMINIO_NOTIFY_POSTGRES_QUEUE_DIR            (path)               staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_POSTGRES_QUEUE_LIMIT          (number)             maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_POSTGRES_COMMENT              (sentence)           optionally add a comment to this setting\nMINIO_NOTIFY_POSTGRES_MAX_OPEN_CONNECTIONS (number)             maximum number of open connections to the database, defaults to '2'\n```\n\n----------------------------------------\n\nTITLE: Setting WORM Configuration on MinIO Bucket using AWS CLI\nDESCRIPTION: Command to set Governance mode with one day retention time on a bucket using AWS CLI. This configuration applies to all objects in the bucket and enables WORM functionality.\n\nLANGUAGE: sh\nCODE:\n```\nawscli s3api put-object-lock-configuration --bucket mybucket --object-lock-configuration 'ObjectLockEnabled=\"Enabled\",Rule={DefaultRetention={Mode=\"GOVERNANCE\",Days=1}}'\n```\n\n----------------------------------------\n\nTITLE: Querying Site Replication Status\nDESCRIPTION: Retrieves and displays the current site replication configuration and status using the mc admin command. This helps verify that replication is correctly configured.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin replicate info minio1\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to MinIO Bucket with MC Command\nDESCRIPTION: Using the MinIO Client (mc) to upload a JPEG image to the 'images' bucket in MinIO, which triggers a bucket notification event.\n\nLANGUAGE: bash\nCODE:\n```\nmc cp myphoto.jpg myminio/images\n```\n\n----------------------------------------\n\nTITLE: Creating Buckets and Configuring Webhook Event Notifications\nDESCRIPTION: Shows how to create buckets and set up a webhook event notification for JPG uploads in MinIO. This configures notifications to trigger only when files with .jpg suffix are uploaded to the images bucket.\n\nLANGUAGE: plaintext\nCODE:\n```\nmc mb myminio/images\nmc mb myminio/images-thumbnail\nmc event add myminio/images arn:minio:sqs::1:webhook --event put --suffix .jpg\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO on Linux (Intel/AMD 64-bit)\nDESCRIPTION: Commands to download, make executable, and run the MinIO binary on Linux systems with Intel/AMD 64-bit architecture. The server starts with data stored in the specified directory.\n\nLANGUAGE: sh\nCODE:\n```\nwget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\n./minio server /data\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Replication Target with Sync in MinIO\nDESCRIPTION: Command to add a remote replication target to a MinIO bucket with synchronous replication enabled. The command specifies the source and destination buckets, authentication credentials, replication service, region, and health check interval.\n\nLANGUAGE: plaintext\nCODE:\n```\nmc admin bucket remote add myminio/srcbucket https://accessKey:secretKey@replica-endpoint:9000/destbucket --service replication --region us-east-1 --sync --healthcheck-seconds 100\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client (mc) for External Access\nDESCRIPTION: Commands to configure the MinIO client for accessing the server via external IP when using LoadBalancer service type. It includes retrieving credentials from Kubernetes secrets.\n\nLANGUAGE: bash\nCODE:\n```\nexport MC_HOST_{{ template \"minio.fullname\" . }}_local=http://$(kubectl get secret {{ template \"minio.secretName\" . }} --namespace {{ .Release.Namespace }} -o jsonpath=\"{.data.rootUser}\" | base64 --decode):$(kubectl get secret {{ template \"minio.secretName\" . }} --namespace {{ .Release.Namespace }} -o jsonpath=\"{.data.rootPassword}\" | base64 --decode)@<External-IP>:{{ .Values.service.port }}\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc ls {{ template \"minio.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable Bucket for Veeam Backup for Office 365\nDESCRIPTION: Creates a new bucket named 'vbo' with object lock enabled for Veeam Backup for Office 365 (VBO) using the MinIO client. The -l flag enables object locking functionality.\n\nLANGUAGE: bash\nCODE:\n```\nmc mb -l myminio/vbo\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with TLS Enabled\nDESCRIPTION: Installs MinIO with TLS enabled using a previously created TLS secret. This enables secure encrypted connections to the MinIO server.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set tls.enabled=true,tls.certSecret=tls-ssl-minio minio/minio\n```\n\n----------------------------------------\n\nTITLE: Checking and Enabling Bucket Versioning with MinIO Java SDK\nDESCRIPTION: This Java example demonstrates how to connect to a MinIO server, check if bucket versioning is enabled, and enable versioning on a specified bucket. It initializes a MinIO client, creates a bucket if it doesn't exist, checks the current versioning status, enables versioning, and verifies that versioning was successfully enabled.\n\nLANGUAGE: java\nCODE:\n```\npublic class IsVersioningEnabled {\n  /** MinioClient.isVersioningEnabled() example. */\n  public static void main(String[] args)\n      throws IOException, NoSuchAlgorithmException, InvalidKeyException {\n    try {\n      /* play.min.io for test and development. */\n      MinioClient minioClient =\n          MinioClient.builder()\n              .endpoint(\"https://play.min.io\")\n              .credentials(\"Q3AM3UQ867SPQQA43P2F\", \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\")\n              .build();\n\n      /* Amazon S3: */\n      // MinioClient minioClient =\n      //     MinioClient.builder()\n      //         .endpoint(\"https://s3.amazonaws.com\")\n      //         .credentials(\"YOUR-ACCESSKEY\", \"YOUR-SECRETACCESSKEY\")\n      //         .build();\n\n      // Create bucket 'my-bucketname' if it doesn`t exist.\n      if (!minioClient.bucketExists(BucketExistsArgs.builder().bucket(\"my-bucketname\").build())) {\n        minioClient.makeBucket(MakeBucketArgs.builder().bucket(\"my-bucketname\").build());\n        System.out.println(\"my-bucketname is created successfully\");\n      }\n\n      boolean isVersioningEnabled =\n          minioClient.isVersioningEnabled(\n              IsVersioningEnabledArgs.builder().bucket(\"my-bucketname\").build());\n      if (isVersioningEnabled) {\n        System.out.println(\"Bucket versioning is enabled\");\n      } else {\n        System.out.println(\"Bucket versioning is disabled\");\n      }\n      // Enable versioning on 'my-bucketname'.\n      minioClient.enableVersioning(EnableVersioningArgs.builder().bucket(\"my-bucketname\").build());\n      System.out.println(\"Bucket versioning is enabled successfully\");\n\n      isVersioningEnabled =\n          minioClient.isVersioningEnabled(\n              IsVersioningEnabledArgs.builder().bucket(\"my-bucketname\").build());\n      if (isVersioningEnabled) {\n        System.out.println(\"Bucket versioning is enabled\");\n      } else {\n        System.out.println(\"Bucket versioning is disabled\");\n      }\n\n    } catch (MinioException e) {\n      System.out.println(\"Error occurred: \" + e);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PutObjectFanOut Method in minio-go SDK\nDESCRIPTION: The PutObjectFanOut method in the minio-go SDK provides a high-level interface for fan-out uploads. It accepts a context, bucket name, content reader, and a request structure to perform multiple concurrent uploads from a single source stream.\n\nLANGUAGE: go\nCODE:\n```\nPutObjectFanOut(ctx context.Context, bucket string, fanOutContent io.Reader, fanOutReq minio.PutObjectFanOutRequest) ([]minio.PutObjectFanOutResponse, error)\n```\n\n----------------------------------------\n\nTITLE: Adding Site Replication Configuration\nDESCRIPTION: Establishes site replication between multiple MinIO instances using the mc admin command. This connects all specified sites into a replication relationship.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin replicate add minio1 minio2 minio3\n```\n\n----------------------------------------\n\nTITLE: Adding Lifecycle Rule with Transition to MinIO\nDESCRIPTION: This command adds a lifecycle rule that will transition objects to the AZURETIER storage class after 45 days and expire them after 365 days.\n\nLANGUAGE: sh\nCODE:\n```\n mc ilm add --expiry-days 365 --transition-days 45 --storage-class \"AZURETIER\" myminio/srcbucket\n```\n\n----------------------------------------\n\nTITLE: Extracting Prometheus Release Archive\nDESCRIPTION: Commands to download and extract the Prometheus release archive for your platform.\n\nLANGUAGE: bash\nCODE:\n```\ntar xvfz prometheus-*.tar.gz\ncd prometheus-*\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Group Search Filter for Nested Groups in AD\nDESCRIPTION: Example of how to configure group search filters when using Active Directory with nested groups by utilizing the LDAP_MATCHING_RULE_IN_CHAIN (1.2.840.113556.1.4.1941) operator.\n\nLANGUAGE: shell\nCODE:\n```\ngroup_search_filter: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:=%d))\nuser_dn_search_filter: (&(memberOf:1.2.840.113556.1.4.1941:=CN=group,DC=dc,DC=net)(sAMAccountName=%s))\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Notifications in MinIO using MinIO Client\nDESCRIPTION: Commands to create a bucket, enable event notifications for JPEG files, and list the configured events using MinIO client (mc). The notification is configured to trigger on both object creation and removal events.\n\nLANGUAGE: sh\nCODE:\n```\nmc mb myminio/images\nmc event add myminio/images arn:minio:sqs::1:amqp --suffix .jpg\nmc event list myminio/images\narn:minio:sqs::1:amqp s3:ObjectCreated:*,s3:ObjectRemoved:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Adding Non-Current Version Expiration Rule with MinIO Client\nDESCRIPTION: This command adds a lifecycle rule using the MinIO Client that will expire non-current versions of objects after 365 days under the 'user-uploads/' prefix.\n\nLANGUAGE: sh\nCODE:\n```\nmc ilm rule add --noncurrent-expire-days 365 --prefix \"user-uploads/\" myminio/mydata\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Logger via Environment Variables in MinIO\nDESCRIPTION: Demonstrates how to configure HTTP logging target using environment variables. This approach overrides any settings in the MinIO server configuration and enables HTTP logging to a specified endpoint.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_LOGGER_WEBHOOK_ENABLE_target1=\"on\"\nexport MINIO_LOGGER_WEBHOOK_AUTH_TOKEN_target1=\"token\"\nexport MINIO_LOGGER_WEBHOOK_ENDPOINT_target1=http://localhost:8080/minio/logs\nminio server /mnt/data\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Job with YAML in MinIO\nDESCRIPTION: YAML template for defining a replication job in MinIO. It specifies source and target locations, filtering criteria based on timestamps and metadata, notification endpoints, and retry parameters.\n\nLANGUAGE: yaml\nCODE:\n```\nreplicate:\n  apiVersion: v1\n  # source of the objects to be replicated\n  source:\n\ttype: TYPE # valid values are \"minio\"\n\tbucket: BUCKET\n\tprefix: PREFIX\n\t# NOTE: if source is remote then target must be \"local\"\n\t# endpoint: ENDPOINT\n\t# credentials:\n\t#   accessKey: ACCESS-KEY\n\t#   secretKey: SECRET-KEY\n\t#   sessionToken: SESSION-TOKEN # Available when rotating credentials are used\n\n  # target where the objects must be replicated\n  target:\n\ttype: TYPE # valid values are \"minio\"\n\tbucket: BUCKET\n\tprefix: PREFIX\n\t# NOTE: if target is remote then source must be \"local\"\n\t# endpoint: ENDPOINT\n\t# credentials:\n\t#   accessKey: ACCESS-KEY\n\t#   secretKey: SECRET-KEY\n\t#   sessionToken: SESSION-TOKEN # Available when rotating credentials are used\n\n  # optional flags based filtering criteria\n  # for all source objects\n  flags:\n\tfilter:\n\t  newerThan: \"7d\" # match objects newer than this value (e.g. 7d10h31s)\n\t  olderThan: \"7d\" # match objects older than this value (e.g. 7d10h31s)\n\t  createdAfter: \"date\" # match objects created after \"date\"\n\t  createdBefore: \"date\" # match objects created before \"date\"\n\n\t  ## NOTE: tags are not supported when \"source\" is remote.\n\t  # tags:\n\t  #   - key: \"name\"\n\t  #     value: \"pick*\" # match objects with tag 'name', with all values starting with 'pick'\n\n\t  ## NOTE: metadata filter not supported when \"source\" is non MinIO.\n\t  # metadata:\n\t  #   - key: \"content-type\"\n\t  #     value: \"image/*\" # match objects with 'content-type', with all values starting with 'image/'\n\n\tnotify:\n\t  endpoint: \"https://notify.endpoint\" # notification endpoint to receive job status events\n\t  token: \"Bearer xxxxx\" # optional authentication token for the notification endpoint\n\n\tretry:\n\t  attempts: 10 # number of retries for the job before giving up\n\t  delay: \"500ms\" # least amount of delay between each retry\n```\n\n----------------------------------------\n\nTITLE: Setting Permission Policy for Source Bucket Replication\nDESCRIPTION: JSON policy that defines the minimal permissions needed by the admin user setting up replication on the source bucket. Includes permissions for bucket target configuration and replication management.\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n    \"Action\": [\n        \"admin:SetBucketTarget\",\n        \"admin:GetBucketTarget\"\n    ],\n    \"Effect\": \"Allow\",\n    \"Sid\": \"\"\n  },\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:GetReplicationConfiguration\",\n    \"s3:PutReplicationConfiguration\",\n    \"s3:ListBucket\",\n    \"s3:ListBucketMultipartUploads\",\n    \"s3:GetBucketLocation\",\n    \"s3:GetBucketVersioning\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::srcbucket\"\n   ]\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Readiness Probe for MinIO\nDESCRIPTION: YAML configuration for a Kubernetes readiness probe that checks if the MinIO server is ready to accept traffic. It polls the /minio/health/ready endpoint every 15 seconds to determine if routing should be enabled to the container.\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe:\n  httpGet:\n    path: /minio/health/ready\n    port: 9000\n    scheme: HTTP\n  initialDelaySeconds: 120\n  periodSeconds: 15\n  timeoutSeconds: 10\n  successThreshold: 1\n  failureThreshold: 3\n```\n\n----------------------------------------\n\nTITLE: All-Access Policy JSON for MinIO\nDESCRIPTION: IAM policy in JSON format that grants full S3 access to all resources. This allows an authenticated user with this policy to perform any operation on any bucket.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NSQ Configuration in MinIO\nDESCRIPTION: Demonstrates how to set NSQ notification configuration for a MinIO deployment using the mc admin config set command. This configures NSQ with server at 127.0.0.1:4150 and topic 'minio'.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin config set myminio notify_nsq:1 nsqd_address=\"127.0.0.1:4150\" queue_dir=\"\" queue_limit=\"0\" tls=\"off\" tls_skip_verify=\"on\" topic=\"minio\"\n```\n\n----------------------------------------\n\nTITLE: Sample xl.meta Structure in JSON Format\nDESCRIPTION: A sample representation of the xl.meta file in msgpack-JSON format, showing the structure of version objects with encryption metadata. This illustrates how MinIO stores object version information including distribution, checksums, and metadata.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Versions\": [\n    {\n      \"Type\": 1,\n      \"V2Obj\": {\n        \"ID\": \"KWUs8S+8RZq4Vp5TWy6KFg==\",\n        \"DDir\": \"X3pDAFu8Rjyft7QD6t7W5g==\",\n        \"EcAlgo\": 1,\n        \"EcM\": 2,\n        \"EcN\": 2,\n        \"EcBSize\": 10485760,\n        \"EcIndex\": 3,\n        \"EcDist\": [3, 4, 1, 2],\n        \"CSumAlgo\": 1,\n        \"PartNums\": [1],\n        \"PartETags\": [\"\"],\n        \"PartSizes\": [314],\n        \"PartASizes\": [282],\n        \"Size\": 314,\n        \"MTime\": 1591820730,\n        \"MetaSys\": {\n          \"X-Minio-Internal-Server-Side-Encryption-S3-Kms-Key-Id\": \"bXktbWluaW8ta2V5\",\n          \"X-Minio-Internal-Server-Side-Encryption-S3-Kms-Sealed-Key\": \"ZXlKaFpXRmtJam9pUVVWVExUSTFOaTFIUTAwdFNFMUJReTFUU0VFdE1qVTJJaXdpYVhZaU9pSkJMMVZzZFVnelZYVjZSR2N6UkhGWUwycEViRmRCUFQwaUxDSnViMjVqWlNJNklpdE9lbkJXVWtseFlWSlNVa2t2UVhNaUxDSmllWFJsY3lJNklrNDBabVZsZG5WU1NWVnRLMFoyUWpBMVlYTk9aMU41YVhoU1RrNUpkMDlhTkdKa2RuaGpLMjFuVDNnMFFYbFJhbE15V0hkU1pEZzNRMk54ZUN0SFFuSWlmUT09\",\n          \"X-Minio-Internal-Server-Side-Encryption-Seal-Algorithm\": \"REFSRXYyLUhNQUMtU0hBMjU2\",\n          \"X-Minio-Internal-Server-Side-Encryption-Iv\": \"bW5YRDhRUGczMVhkc2pJT1V1UVlnbWJBcndIQVhpTUN1dnVBS0QwNUVpaz0=\",\n          \"X-Minio-Internal-Server-Side-Encryption-S3-Sealed-Key\": \"SUFBZkFPeUo5ZHVVSEkxYXFLU0NSRkJTTnM0QkVJNk9JWU1QcFVTSXFhK2dHVThXeE9oSHJCZWwwdnRvTldUNE8zS1BtcWluR0cydmlNNFRWa0N0Mmc9PQ==\"\n        },\n        \"MetaUsr\": {\n          \"content-type\": \"application/octet-stream\",\n          \"etag\": \"20000f00f58c508b40720270929bd90e9f07b9bd78fb605e5432a67635fc34722e4fc53b1d5fab9ff8400eb9ded4fba2\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with Erasure Code Using MinIO Binary\nDESCRIPTION: Command to start a MinIO server with 12 drives using the MinIO binary. This setup provides erasure coding across 12 drives to protect against hardware failures.\n\nLANGUAGE: sh\nCODE:\n```\nminio server /data{1...12}\n```\n\n----------------------------------------\n\nTITLE: Setting Permission Policy for Target Bucket Replication\nDESCRIPTION: JSON policy defining the minimal permissions needed for the access key on the target cluster. Includes permissions for replication operations including object management and deletion.\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:GetReplicationConfiguration\",\n    \"s3:ListBucket\",\n    \"s3:ListBucketMultipartUploads\",\n    \"s3:GetBucketLocation\",\n    \"s3:GetBucketVersioning\",\n    \"s3:GetBucketObjectLockConfiguration\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::destbucket\"\n   ]\n  },\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:GetReplicationConfiguration\",\n    \"s3:ReplicateTags\",\n    \"s3:AbortMultipartUpload\",\n    \"s3:GetObject\",\n    \"s3:GetObjectVersion\",\n    \"s3:GetObjectVersionTagging\",\n    \"s3:PutObject\",\n    \"s3:DeleteObject\",\n    \"s3:ReplicateObject\",\n    \"s3:ReplicateDelete\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::destbucket/*\"\n   ]\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Public Prometheus Configuration for Cluster Metrics\nDESCRIPTION: YAML configuration for Prometheus to scrape MinIO cluster metrics without authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: minio-job\n  metrics_path: /minio/v2/metrics/cluster\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: Python Script for Consuming MQTT Events from MinIO\nDESCRIPTION: A Python script using the paho-mqtt library to subscribe to MinIO bucket events published to an MQTT topic. It connects to an MQTT broker and prints received event notifications.\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\nfrom __future__ import print_function\nimport paho.mqtt.client as mqtt\n\n# This is the Subscriber\n\ndef on_connect(client, userdata, flags, rc):\n  print(\"Connected with result code \"+str(rc))\n  # qos level is set to 1\n  client.subscribe(\"minio\", 1)\n\ndef on_message(client, userdata, msg):\n    print(msg.payload)\n\n# client_id is a randomly generated unique ID for the mqtt broker to identify the connection.\nclient = mqtt.Client(client_id=\"myclientid\",clean_session=False)\n\nclient.on_connect = on_connect\nclient.on_message = on_message\n\nclient.connect(\"localhost\",1883,60)\nclient.loop_forever()\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch with environment variables in MinIO\nDESCRIPTION: Environment variables that can be used to configure Elasticsearch notifications in MinIO. These variables specify connection parameters, authentication, index settings, and queue configuration.\n\nLANGUAGE: sh\nCODE:\n```\nKEY:\nnotify_elasticsearch[:name]  publish bucket notifications to Elasticsearch endpoints\n\nARGS:\nMINIO_NOTIFY_ELASTICSEARCH_ENABLE*      (on|off)             enable notify_elasticsearch target, default is 'off'\nMINIO_NOTIFY_ELASTICSEARCH_URL*         (url)                Elasticsearch server's address, with optional authentication info\nMINIO_NOTIFY_ELASTICSEARCH_INDEX*       (string)             Elasticsearch index to store/update events, index is auto-created\nMINIO_NOTIFY_ELASTICSEARCH_FORMAT*      (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\nMINIO_NOTIFY_ELASTICSEARCH_QUEUE_DIR    (path)               staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_ELASTICSEARCH_QUEUE_LIMIT  (number)             maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_ELASTICSEARCH_USERNAME     (string)             username for Elasticsearch basic-auth\nMINIO_NOTIFY_ELASTICSEARCH_PASSWORD     (string)             password for Elasticsearch basic-auth\nMINIO_NOTIFY_ELASTICSEARCH_COMMENT      (sentence)           optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Generation in WSO2 Identity XML\nDESCRIPTION: XML configuration entry to enable self-contained JWT token generation in WSO2 Identity Server. This must be added to the identity.xml file under the OAuth element.\n\nLANGUAGE: xml\nCODE:\n```\n<IdentityOAuthTokenGenerator>org.wso2.carbon.identity.oauth2.token.JWTTokenIssuer</IdentityOAuthTokenGenerator>\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO with Multiple OU Hierarchies and Group Search Base DNs\nDESCRIPTION: Complete example of configuring MinIO with LDAP authentication supporting multiple organizational unit hierarchies for users and multiple group search base DNs. Shows all required environment variables for a full setup.\n\nLANGUAGE: shell\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nexport MINIO_IDENTITY_LDAP_SERVER_ADDR='my.ldap-active-dir-server.com:636'\nexport MINIO_IDENTITY_LDAP_LOOKUP_BIND_DN='cn=admin,dc=min,dc=io'\nexport MINIO_IDENTITY_LDAP_LOOKUP_BIND_PASSWORD=admin\nexport MINIO_IDENTITY_LDAP_GROUP_SEARCH_BASE_DN='dc=minioad,dc=local;dc=somedomain,dc=com'\nexport MINIO_IDENTITY_LDAP_GROUP_SEARCH_FILTER='(&(objectclass=groupOfNames)(member=%d))'\nminio server ~/test\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Alerting Rules in YAML\nDESCRIPTION: Sample alerting rules for MinIO that monitor cluster health and fire a critical alert when an erasure set loses quorum. The alert includes detailed information about the affected server, pool, and set.\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: example\n  rules:\n  - alert: MinIOClusterTolerance\n    expr: minio_cluster_health_erasure_set_status < 1\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Instance {{ $labels.server }} has lost quorum on pool {{ $labels.pool }} on set {{ $labels.set }}\"\n      description: \"MinIO instance {{ $labels.server }} of job {{ $labels.job }} has lost quorum on pool {{ $labels.pool }} on set {{ $labels.set }} for more than 5 minutes.\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO Server with Retry Logic\nDESCRIPTION: Function that attempts to connect to a MinIO server with retry logic. It reads credentials from config files and makes up to 30 connection attempts with 2-second intervals between each attempt.\n\nLANGUAGE: shell\nCODE:\n```\n# connectToMinio\n# Use a check-sleep-check loop to wait for MinIO service to be available\nconnectToMinio() {\n\tSCHEME=$1\n\tATTEMPTS=0\n\tLIMIT=29 # Allow 30 attempts\n\tset -e   # fail if we can't read the keys.\n\tACCESS=$(cat /config/rootUser)\n\tSECRET=$(cat /config/rootPassword)\n\tset +e # The connections to minio are allowed to fail.\n\techo \"Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\"\n\tMC_COMMAND=\"${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\"\n\t$MC_COMMAND\n\tSTATUS=$?\n\tuntil [ $STATUS = 0 ]; do\n\t\tATTEMPTS=$(expr $ATTEMPTS + 1)\n\t\techo \\\"Failed attempts: $ATTEMPTS\\\"\n\t\tif [ $ATTEMPTS -gt $LIMIT ]; then\n\t\t\texit 1\n\t\tfi\n\t\tsleep 2 # 1 second intervals between attempts\n\t\t$MC_COMMAND\n\t\tSTATUS=$?\n\tdone\n\tset -e # reset `e` as active\n\treturn 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MQTT Bucket Notifications with MinIO Client\nDESCRIPTION: Commands to create a bucket, set up event notifications for JPEG files using MQTT, and list the configured event notifications. This configures MinIO to send notifications when JPEG files are created or deleted.\n\nLANGUAGE: sh\nCODE:\n```\nmc mb myminio/images\nmc event add  myminio/images arn:minio:sqs::1:mqtt --suffix .jpg\nmc event list myminio/images\narn:minio:sqs::1:amqp s3:ObjectCreated:*,s3:ObjectRemoved:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to the AssumeRole API in MinIO\nDESCRIPTION: Example HTTP POST request to the MinIO AssumeRole API, specifying a duration of 3600 seconds and a policy that allows all S3 operations on all resources.\n\nLANGUAGE: http\nCODE:\n```\nhttp://minio:9000/?Action=AssumeRole&DurationSeconds=3600&Version=2011-06-15&Policy={\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"Stmt1\",\"Effect\":\"Allow\",\"Action\":\"s3:*\",\"Resource\":\"arn:aws:s3:::*\"}]}&AUTHPARAMS\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Identity Provider for MinIO using Environment Variables\nDESCRIPTION: Example command showing how to view the configuration options for setting up OpenID identity providers in MinIO using the MinIO Client (mc) admin interface. The output lists all available environment variables that can be used to configure OIDC authentication.\n\nLANGUAGE: bash\nCODE:\n```\n$ mc admin config set myminio identity_openid --env\nKEY:\nidentity_openid[:name]  enable OpenID SSO support\n\nARGS:\nMINIO_IDENTITY_OPENID_ENABLE*               (on|off)    enable identity_openid target, default is 'off'\nMINIO_IDENTITY_OPENID_DISPLAY_NAME          (string)    Friendly display name for this Provider/App\nMINIO_IDENTITY_OPENID_CONFIG_URL*           (url)       openid discovery document e.g. \"https://accounts.google.com/.well-known/openid-configuration\"\nMINIO_IDENTITY_OPENID_CLIENT_ID*            (string)    unique public identifier for apps e.g. \"292085223830.apps.googleusercontent.com\"\nMINIO_IDENTITY_OPENID_CLIENT_SECRET*        (string)    secret for the unique public identifier for apps\nMINIO_IDENTITY_OPENID_ROLE_POLICY           (string)    Set the IAM access policies applicable to this client application and IDP e.g. \"app-bucket-write,app-bucket-list\"\nMINIO_IDENTITY_OPENID_CLAIM_NAME            (string)    JWT canned policy claim name (default: 'policy')\nMINIO_IDENTITY_OPENID_SCOPES                (csv)       Comma separated list of OpenID scopes for server, defaults to advertised scopes from discovery document e.g. \"email,admin\"\nMINIO_IDENTITY_OPENID_VENDOR                (string)    Specify vendor type for vendor specific behavior to checking validity of temporary credentials and service accounts on MinIO\nMINIO_IDENTITY_OPENID_CLAIM_USERINFO        (on|off)    Enable fetching claims from UserInfo Endpoint for authenticated user\nMINIO_IDENTITY_OPENID_KEYCLOAK_REALM        (string)    Specify Keycloak 'realm' name, only honored if vendor was set to 'keycloak' as value, if no realm is specified 'master' is default\nMINIO_IDENTITY_OPENID_KEYCLOAK_ADMIN_URL    (string)    Specify Keycloak 'admin' REST API endpoint e.g. http://localhost:8080/auth/admin/\nMINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC  (on|off)    Enable 'Host' header based dynamic redirect URI (default: 'off')\nMINIO_IDENTITY_OPENID_COMMENT               (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Request Limits Using mc Admin Client\nDESCRIPTION: Sets the maximum number of concurrent S3 API requests allowed across a MinIO cluster using the MinIO Client (mc) admin command. This configuration limits the cluster to 1600 simultaneous requests and requires a server restart to apply the changes.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin config set myminio/ api requests_max=1600\nmc admin service restart myminio/\n```\n\n----------------------------------------\n\nTITLE: Enabling Bucket Encryption with mc Command\nDESCRIPTION: Command to enable SSE-S3 encryption on a MinIO bucket using the MinIO Client (mc). This configuration ensures all objects in the bucket are encrypted at rest.\n\nLANGUAGE: sh\nCODE:\n```\nmc encrypt set sse-s3 myminio/bucket/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current NATS Configuration\nDESCRIPTION: Command to fetch the current NATS notification configuration from a MinIO deployment using the MinIO Client (mc).\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config get myminio/ notify_nats\nnotify_nats:1 password=\"yoursecret\" streaming_max_pub_acks_in_flight=\"10\" subject=\"\" address=\"0.0.0.0:4222\"  token=\"\" username=\"yourusername\" ping_interval=\"0\" queue_limit=\"0\" tls=\"off\" tls_skip_verify=\"off\" streaming_async=\"on\" queue_dir=\"\" streaming_cluster_id=\"test-cluster\" streaming_enable=\"on\"\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with Values File\nDESCRIPTION: Installs MinIO using a values.yaml file that contains all the configuration parameters, providing a more manageable way to configure complex deployments.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name my-release -f values.yaml minio/minio\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Removal of All Object Versions in MinIO\nDESCRIPTION: This MinIO-specific extension configuration automatically removes all versions of objects under 'user-uploads/' prefix after the latest version is 7 days old.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Rules\": [\n        {\n            \"ID\": \"Purge all versions of an expired object\",\n            \"Status\": \"Enabled\",\n            \"Filter\": {\n                \"Prefix\": \"users-uploads/\"\n            },\n            \"Expiration\": {\n                \"Days\": 7,\n                \"ExpiredObjectAllVersions\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client Certificate Using curl\nDESCRIPTION: Example curl command demonstrating how to authenticate to a MinIO server using a client certificate and obtain STS access credentials with a 1-hour duration.\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST --key private.key --cert public.crt \"https://minio:9000?Action=AssumeRoleWithCertificate&Version=2011-06-15&DurationSeconds=3600\"\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Custom Access Keys on Linux/macOS\nDESCRIPTION: This command demonstrates how to set custom access and secret keys for MinIO using environment variables. The container mounts /mnt/data from the host for persistent storage.\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --name minio1 \\\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  -v /mnt/data:/data \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: S3A Connector Configuration for MinIO\nDESCRIPTION: Detailed S3A connector configuration settings for integrating Hadoop with MinIO. Includes authentication, endpoint configuration, and performance optimization parameters for S3A file system operations.\n\nLANGUAGE: text\nCODE:\n```\nfs.s3a.access.key=minio\nfs.s3a.secret.key=minio123\nfs.s3a.path.style.access=true\nfs.s3a.block.size=512M\nfs.s3a.buffer.dir=${hadoop.tmp.dir}/s3a\nfs.s3a.committer.magic.enabled=false\nfs.s3a.committer.name=directory\nfs.s3a.committer.staging.abort.pending.uploads=true\nfs.s3a.committer.staging.conflict-mode=append\nfs.s3a.committer.staging.tmp.path=/tmp/staging\nfs.s3a.committer.staging.unique-filenames=true\nfs.s3a.connection.establish.timeout=5000\nfs.s3a.connection.ssl.enabled=false\nfs.s3a.connection.timeout=200000\nfs.s3a.endpoint=http://minio:9000\nfs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem\n\nfs.s3a.committer.threads=2048 # Number of threads writing to MinIO\nfs.s3a.connection.maximum=8192 # Maximum number of concurrent conns\nfs.s3a.fast.upload.active.blocks=2048 # Number of parallel uploads\nfs.s3a.fast.upload.buffer=disk # Use disk as the buffer for uploads\nfs.s3a.fast.upload=true # Turn on fast upload mode\nfs.s3a.max.total.tasks=2048 # Maximum number of parallel tasks\nfs.s3a.multipart.size=512M # Size of each multipart chunk\nfs.s3a.multipart.threshold=512M # Size before using multipart uploads\nfs.s3a.socket.recv.buffer=65536 # Read socket buffer hint\nfs.s3a.socket.send.buffer=65536 # Write socket buffer hint\nfs.s3a.threads.max=2048 # Maximum number of threads for S3A\n```\n\n----------------------------------------\n\nTITLE: Accessing MinIO Cluster Metrics via API Endpoint\nDESCRIPTION: The command shows how to access cluster metrics from any MinIO server using the metrics endpoint. Replace HOSTNAME:PORT with your MinIO deployment's hostname or load balancer hostname for clustered deployments.\n\nLANGUAGE: shell\nCODE:\n```\nhttps://HOSTNAME:PORT/minio/v2/metrics/cluster\n```\n\n----------------------------------------\n\nTITLE: Installing xl-meta Tool for Metadata Decoding\nDESCRIPTION: Command to install the xl-meta tool which is used to decode MinIO's binary xl.meta files into readable JSON format.\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/minio/minio/docs/debugging/xl-meta@latest\n```\n\n----------------------------------------\n\nTITLE: Example Replication Configuration JSON\nDESCRIPTION: JSON structure showing a replication configuration that can be exported using the 'mc replicate export' command. It defines rules for replication including filters, destination details, and source selection criteria.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Role\" :\"\",\n  \"Rules\": [\n    {\n      \"Status\": \"Enabled\",\n      \"Priority\": 1,\n      \"DeleteMarkerReplication\": { \"Status\": \"Disabled\" },\n      \"DeleteReplication\": { \"Status\": \"Disabled\" },\n      \"Filter\" : {\n        \"And\": {\n            \"Prefix\": \"Tax\",\n            \"Tags\": [\n                {\n                \"Key\": \"Year\",\n                \"Value\": \"2019\"\n                },\n                {\n                \"Key\": \"Company\",\n                \"Value\": \"AcmeCorp\"\n                }\n            ]\n        }\n      },\n      \"Destination\": {\n        \"Bucket\": \"arn:minio:replication:us-east-1:c5be6b16-769d-432a-9ef1-4567081f3566:destbucket\",\n        \"StorageClass\": \"STANDARD\"\n      },\n      \"SourceSelectionCriteria\": {\n        \"ReplicaModifications\": {\n          \"Status\": \"Enabled\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Spark Configuration for MinIO Integration\nDESCRIPTION: Spark-specific configuration settings for integrating with MinIO object storage. These settings are added to spark-defaults.conf to optimize Spark's interaction with the S3A connector when accessing data in MinIO.\n\nLANGUAGE: text\nCODE:\n```\nspark.hadoop.fs.s3a.access.key minio\nspark.hadoop.fs.s3a.secret.key minio123\nspark.hadoop.fs.s3a.path.style.access true\nspark.hadoop.fs.s3a.block.size 512M\nspark.hadoop.fs.s3a.buffer.dir ${hadoop.tmp.dir}/s3a\nspark.hadoop.fs.s3a.committer.magic.enabled false\nspark.hadoop.fs.s3a.committer.name directory\nspark.hadoop.fs.s3a.committer.staging.abort.pending.uploads true\nspark.hadoop.fs.s3a.committer.staging.conflict-mode append\nspark.hadoop.fs.s3a.committer.staging.tmp.path /tmp/staging\nspark.hadoop.fs.s3a.committer.staging.unique-filenames true\nspark.hadoop.fs.s3a.committer.threads 2048 # number of threads writing to MinIO\nspark.hadoop.fs.s3a.connection.establish.timeout 5000\nspark.hadoop.fs.s3a.connection.maximum 8192 # maximum number of concurrent conns\nspark.hadoop.fs.s3a.connection.ssl.enabled false\nspark.hadoop.fs.s3a.connection.timeout 200000\nspark.hadoop.fs.s3a.endpoint http://minio:9000\nspark.hadoop.fs.s3a.fast.upload.active.blocks 2048 # number of parallel uploads\nspark.hadoop.fs.s3a.fast.upload.buffer disk # use disk as the buffer for uploads\nspark.hadoop.fs.s3a.fast.upload true # turn on fast upload mode\nspark.hadoop.fs.s3a.impl org.apache.hadoop.spark.hadoop.fs.s3a.S3AFileSystem\nspark.hadoop.fs.s3a.max.total.tasks 2048 # maximum number of parallel tasks\nspark.hadoop.fs.s3a.multipart.size 512M # size of each multipart chunk\nspark.hadoop.fs.s3a.multipart.threshold 512M # size before using multipart uploads\nspark.hadoop.fs.s3a.socket.recv.buffer 65536 # read socket buffer hint\nspark.hadoop.fs.s3a.socket.send.buffer 65536 # write socket buffer hint\nspark.hadoop.fs.s3a.threads.max 2048 # maximum number of threads for S3A\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO with FTP/SFTP Support\nDESCRIPTION: Command to start MinIO in a distributed setup with FTP and SFTP protocols enabled, configuring ports and SSH key for authentication.\n\nLANGUAGE: bash\nCODE:\n```\nminio server http://server{1...4}/disk{1...4} \\\n   --ftp=\"address=:8021\" --ftp=\"passive-port-range=30000-40000\" \\\n   --sftp=\"address=:8022\" --sftp=\"ssh-private-key=/home/miniouser/.ssh/id_rsa\"\n...\n...\n```\n\n----------------------------------------\n\nTITLE: Using MinIO Server Command-line Interface\nDESCRIPTION: The command-line interface for starting a MinIO object storage server. It accepts directory paths that can be specified individually, with ellipses for abbreviation, or as HTTP URIs for distributed setups.\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n  minio server - start object storage server\n\nUSAGE:\n  minio server [FLAGS] DIR1 [DIR2..]\n  minio server [FLAGS] DIR{1...64}\n  minio server [FLAGS] DIR{1...64} DIR{65...128}\n\nDIR:\n  DIR points to a directory on a filesystem. When you want to combine\n  multiple drives into a single large system, pass one directory per\n  filesystem separated by space. You may also use a '...' convention\n  to abbreviate the directory arguments. Remote directories in a\n  distributed setup are encoded as HTTP(s) URIs.\n```\n\n----------------------------------------\n\nTITLE: Consuming Kafka Events using kafkacat\nDESCRIPTION: Command to consume and display MinIO event notifications from a Kafka topic using kafkacat. This is used to verify that events are being properly published to Kafka.\n\nLANGUAGE: bash\nCODE:\n```\nkafkacat -C -b localhost:9092 -t bucketevents\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Federation for Cluster 1\nDESCRIPTION: Configuration for the first MinIO cluster in a federated setup. Sets the etcd endpoints, domain name, and public IPs for DNS resolution. The MinIO server is started with a distributed setup across multiple racks and hosts.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_ETCD_ENDPOINTS=\"http://remote-etcd1:2379,http://remote-etcd2:4001\"\nexport MINIO_DOMAIN=domain.com\nexport MINIO_PUBLIC_IPS=44.35.2.1,44.35.2.2,44.35.2.3,44.35.2.4\nminio server http://rack{1...4}.host{1...4}.domain.com/mnt/export{1...32}\n```\n\n----------------------------------------\n\nTITLE: Querying CSV data with S3 Select API using Python and boto3\nDESCRIPTION: This Python script demonstrates how to use the S3 Select API with boto3 to query data from a compressed CSV file stored in MinIO. It retrieves only the records where the Location field contains 'United States' and prints both the matching records and query statistics.\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env/env python3\nimport boto3\n\ns3 = boto3.client('s3',\n                  endpoint_url='http://localhost:9000',\n                  aws_access_key_id='minio',\n                  aws_secret_access_key='minio123',\n                  region_name='us-east-1')\n\nr = s3.select_object_content(\n    Bucket='mycsvbucket',\n    Key='sampledata/TotalPopulation.csv.gz',\n    ExpressionType='SQL',\n    Expression=\"select * from s3object s where s.Location like '%United States%'\",\n    InputSerialization={\n        'CSV': {\n            \"FileHeaderInfo\": \"USE\",\n        },\n        'CompressionType': 'GZIP',\n    },\n    OutputSerialization={'CSV': {}},\n)\n\nfor event in r['Payload']:\n    if 'Records' in event:\n        records = event['Records']['Payload'].decode('utf-8')\n        print(records)\n    elif 'Stats' in event:\n        statsDetails = event['Stats']['Details']\n        print(\"Stats details bytesScanned: \")\n        print(statsDetails['BytesScanned'])\n        print(\"Stats details bytesProcessed: \")\n        print(statsDetails['BytesProcessed'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive with MinIO Performance Parameters in XML\nDESCRIPTION: XML configuration parameters to be added to hive-site.xml for optimal performance with MinIO storage. These settings optimize thread allocation for file operations and configure Hive to use blob storage for scratch directories.\n\nLANGUAGE: xml\nCODE:\n```\nhive.blobstore.use.blobstore.as.scratchdir=true\nhive.exec.input.listing.max.threads=50\nhive.load.dynamic.partitions.thread=25\nhive.metastore.fshandler.threads=50\nhive.mv.files.threads=40\nmapreduce.input.fileinputformat.list-status.num-threads=50\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO for Group-Based Access Control\nDESCRIPTION: Shows how to configure MinIO to use the 'groups' claim from Dex for policy assignment. This enables group-based access control when using external identity providers through Dex.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_IDENTITY_OPENID_CLAIM_NAME=groups\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container\nDESCRIPTION: This command stops a running Docker container using its container ID. This gracefully shuts down the MinIO server running in the container.\n\nLANGUAGE: sh\nCODE:\n```\ndocker stop <container_id>\n```\n\n----------------------------------------\n\nTITLE: Verifying Bucket Quota Configuration in MinIO\nDESCRIPTION: Checks the current quota configuration for a bucket named 'mybucket' on a MinIO server. This command displays the quota type and limit if configured.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin bucket quota myminio/mybucket\n```\n\n----------------------------------------\n\nTITLE: Making a Single Payload Request with MinIO Grid in Go\nDESCRIPTION: Example of how to establish a connection to a remote host and make a single payload request. This demonstrates the client-side implementation for interacting with a registered handler.\n\nLANGUAGE: go\nCODE:\n```\n    // Get a connection to the remote host\n    conn := manager.Connection(host)\n\t\n    payload := []byte(\"request\")\n    response, err := conn.SingleRequest(ctx, grid.HandlerDiskInfo, payload)\n```\n\n----------------------------------------\n\nTITLE: Pool Selection Algorithm for Multi-Pool MinIO Deployment\nDESCRIPTION: Go function that selects a server pool for new objects based on proportionate free space available in each pool. This allows MinIO to balance storage utilization across different server pools in the deployment.\n\nLANGUAGE: go\nCODE:\n```\nfunc getAvailablePoolIdx(ctx context.Context) int {\n        serverPools := z.getServerPoolsAvailableSpace(ctx)\n        total := serverPools.TotalAvailable()\n        // choose when we reach this many\n        choose := rand.Uint64() % total\n        atTotal := uint64(0)\n        for _, pool := range serverPools {\n                atTotal += pool.Available\n                if atTotal > choose && pool.Available > 0 {\n                        return pool.Index\n                }\n        }\n        // Should not happen, but print values just in case.\n        panic(fmt.Errorf(\"reached end of serverPools (total: %v, atTotal: %v, choose: %v)\", total, atTotal, choose))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bucket Event Notifications for NATS\nDESCRIPTION: Commands to create a bucket and configure NATS event notifications for JPEG files using the MinIO Client (mc). This example triggers notifications when JPG files are created or deleted.\n\nLANGUAGE: sh\nCODE:\n```\nmc mb myminio/images\nmc event add myminio/images arn:minio:sqs::1:nats --suffix .jpg\nmc event list myminio/images\narn:minio:sqs::1:nats s3:ObjectCreated:*,s3:ObjectRemoved:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Object Replication Metadata Structure on Target\nDESCRIPTION: JSON metadata structure showing the internal format of replica status and timestamp in xl.meta for a replicated object on the target cluster. The metadata identifies the object as a replica with its timestamp information.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"MetaSys\": {\n      \"x-minio-internal-inline-data\": \"dHJ1ZQ==\",\n      \"x-minio-internal-replica-status\": \"UkVQTElDQQ==\",\n      \"x-minio-internal-replica-timestamp\": \"MjAyMS0wOS0xN1QwMTo0MzozOC4zODg5ODU4ODRa\"\n    },\n    \"MetaUsr\": {\n      \"X-Amz-Replication-Status\": \"REPLICA\",\n      \"content-type\": \"application/octet-stream\",\n      \"etag\": \"8315e643ed6a5d7c9962fc0a8ef9c11f\",\n      \"x-amz-storage-class\": \"STANDARD\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO Server Function\nDESCRIPTION: Implements a connection function with retry logic to establish a connection to the MinIO server. It attempts to connect up to 30 times with 2-second intervals between attempts.\n\nLANGUAGE: shell\nCODE:\n```\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compression Configuration via Environment Variables in MinIO\nDESCRIPTION: Environment variable configuration for enabling compression with specific file extensions and MIME types in MinIO server.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_COMPRESSION_ENABLE=\"on\"\nexport MINIO_COMPRESSION_EXTENSIONS=\".txt,.log,.csv,.json,.tar,.xml,.bin\"\nexport MINIO_COMPRESSION_MIME_TYPES=\"text/*,application/json,application/xml\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Bucket Notifications for MySQL\nDESCRIPTION: Series of commands to create a bucket and set up notifications to MySQL when JPEG files are added or removed. Uses the MinIO client (mc) to configure event filtering based on file suffix.\n\nLANGUAGE: bash\nCODE:\n```\n# Create bucket named `images` in myminio\nmc mb myminio/images\n# Add notification configuration on the `images` bucket using the MySQL ARN. The --suffix argument filters events.\nmc event add myminio/images arn:minio:sqs::myinstance:mysql --suffix .jpg\n# Print out the notification configuration on the `images` bucket.\nmc event list myminio/images\narn:minio:sqs::myinstance:mysql s3:ObjectCreated:*,s3:ObjectRemoved:*,s3:ObjectAccessed:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with Access Management Plugin\nDESCRIPTION: Commands to set environment variables and start a MinIO server configured to use the local Access Management Plugin. The example sets the plugin URL and admin credentials.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_CI_CD=1\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nexport MINIO_POLICY_PLUGIN_URL=http://localhost:8080/\nminio server /tmp/disk{1...4}\n```\n\n----------------------------------------\n\nTITLE: Public Prometheus Configuration for Node Metrics\nDESCRIPTION: Optional YAML configuration for Prometheus to scrape MinIO node metrics from multiple server instances without authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: minio-job\n  metrics_path: /minio/v2/metrics/node\n  scheme: http\n  static_configs:\n  - targets: ['server1:9000','server2:9000','server3:9000','server4:9000']\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Access Management Plugin\nDESCRIPTION: Example of the JSON response format expected by MinIO from the Access Management Plugin, indicating whether to allow or deny the request.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Standalone Erasure Coding\nDESCRIPTION: Command example for running MinIO in a standalone configuration with 4 erasure sets and 16 drives per set, using the ellipses notation for directory expansion.\n\nLANGUAGE: bash\nCODE:\n```\nminio server dir{1...64}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Notification Settings in MinIO\nDESCRIPTION: Configuration parameters for setting up MySQL notifications in MinIO. This includes connection details, table configuration, format options, and queue settings for handling undelivered messages.\n\nLANGUAGE: bash\nCODE:\n```\nKEY:\nnotify_mysql[:name]  publish bucket notifications to MySQL databases. When multiple MySQL server endpoints are needed, a user specified \"name\" can be added for each configuration, (e.g.\"notify_mysql:myinstance\").\n\nARGS:\ndsn_string*          (string)             MySQL data-source-name connection string e.g. \"<user>:<password>@tcp(<host>:<port>)/<database>\"\ntable*               (string)             DB table name to store/update events, table is auto-created\nformat*              (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\nqueue_dir            (path)               staging dir for undelivered messages e.g. '/home/events'\nqueue_limit          (number)             maximum limit for undelivered messages, defaults to '100000'\nmax_open_connections (number)             maximum number of open connections to the database, defaults to '2'\ncomment              (sentence)           optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bucket Notifications for Kafka in MinIO\nDESCRIPTION: Commands to create a bucket and configure event notifications to Kafka for JPEG files in MinIO. These commands set up the bucket, add an event rule, and verify the rule is in place.\n\nLANGUAGE: bash\nCODE:\n```\nmc mb myminio/images\nmc event add  myminio/images arn:minio:sqs::1:kafka --suffix .jpg\nmc event list myminio/images\narn:minio:sqs::1:kafka s3:ObjectCreated:*,s3:ObjectRemoved:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: OpenID User-Specific Resource Access Policy in JSON\nDESCRIPTION: A policy that grants OpenID authenticated users access to their own directory using the JWT preferred_username claim as the path identifier.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\t{\n\t  \"Action\": [\"s3:ListBucket\"],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\"arn:aws:s3:::mybucket\"],\n\t  \"Condition\": {\"StringLike\": {\"s3:prefix\": [\"${jwt:preferred_username}/*\"]}}\n\t},\n\t{\n\t  \"Action\": [\n\t\t\"s3:GetObject\",\n\t\t\"s3:PutObject\"\n\t  ],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\"arn:aws:s3:::mybucket/${jwt:preferred_username}/*\"]\n\t}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MinIO Directory Structure with TLS Certificates\nDESCRIPTION: Shows the expected directory structure for MinIO server with TLS certificates using the 'mc tree' command. Certificates should be stored in the ~/.minio/certs directory by default.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc tree --files ~/.minio\n/home/user1/.minio\n└─ certs\n   ├─ CAs\n   ├─ private.key\n   └─ public.crt\n```\n\n----------------------------------------\n\nTITLE: Suspending Bucket Versioning in XML\nDESCRIPTION: XML configuration to suspend versioning on a bucket. Setting the Status to 'Suspended' stops versioning for new objects but maintains existing versions.\n\nLANGUAGE: xml\nCODE:\n```\n<VersioningConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Status>Suspended</Status>\n</VersioningConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Authenticated Prometheus Configuration for Resource Metrics\nDESCRIPTION: Optional YAML configuration for Prometheus to scrape MinIO resource metrics with authentication using bearer token.\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: minio-job-resource\n  bearer_token: <secret>\n  metrics_path: /minio/v2/metrics/resource\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: Alternative JSON Response Format for Access Management Plugin\nDESCRIPTION: An alternative JSON response format that MinIO also accepts from the Access Management Plugin, with the allow decision nested under result.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"allow\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Server with Root Credentials\nDESCRIPTION: Basic setup for starting a MinIO server with root user credentials. This configuration sets environment variables for the root user and password, then starts the MinIO server with a specified data directory.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nminio server /mnt/export\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook Configuration in MinIO\nDESCRIPTION: Demonstrates how to set webhook notification configuration for a MinIO deployment using the mc admin config set command. This configures a webhook endpoint at http://localhost:3000.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin config set myminio notify_webhook:1 queue_limit=\"0\"  endpoint=\"http://localhost:3000\" queue_dir=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL for MinIO Bucket Notifications with MC Command\nDESCRIPTION: Command to configure PostgreSQL as a notification target using MinIO Client (mc), showing the updated connection string format required for versions after RELEASE.2020-04-10T03-34-42Z.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio/ notify_postgres[:name] connection_string=\"host=hostname port=2832 username=psqluser password=psqlpass database=bucketevents\"\n```\n\n----------------------------------------\n\nTITLE: Making AssumeRoleWithCustomToken Request with curl\nDESCRIPTION: A curl command example demonstrating how to make an STS API request using the AssumeRoleWithCustomToken method. The request includes the required parameters: Action, Version, Token, and RoleArn.\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST 'http://localhost:9001/?Action=AssumeRoleWithCustomToken&Version=2011-06-15&Token=aaa&RoleArn=arn:minio:iam:::role/idmp-vGxBdLkOc8mQPU1-UQbBh-yWWVQ'\n```\n\n----------------------------------------\n\nTITLE: MinIO with Multiple Controllers Configuration\nDESCRIPTION: Advanced command example for running MinIO in a standalone configuration with drives distributed across multiple controllers, demonstrating nested ellipses notation.\n\nLANGUAGE: bash\nCODE:\n```\nminio server /mnt/controller{1...4}/data{1...16}\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Configuration in MinIO\nDESCRIPTION: Command to set MySQL notification configuration for a MinIO deployment using the MinIO client (mc). This example configures a connection to a MySQL database with table 'minio_images'.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio notify_mysql:myinstance table=\"minio_images\" dsn_string=\"root:xxxx@tcp(172.17.0.1:3306)/miniodb\"\n```\n\n----------------------------------------\n\nTITLE: Versioning Configuration with Excluded Prefixes in MinIO\nDESCRIPTION: XML configuration for bucket versioning with excluded prefixes. This configuration enables versioning but excludes specific folder patterns from being versioned and replicated using glob patterns.\n\nLANGUAGE: xml\nCODE:\n```\n<VersioningConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n        <Status>Enabled</Status>\n        <ExcludeFolders>true</ExcludeFolders>\n\n        <ExcludedPrefixes>\n          <Prefix>app1-jobs/*/_temporary/</Prefix>\n        </ExcludedPrefixes>\n        <ExcludedPrefixes>\n          <Prefix>app2-jobs/*/_magic/</Prefix>\n        </ExcludedPrefixes>\n\n        <!-- .. up to 10 prefixes in all -->\n</VersioningConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Authenticated Prometheus Configuration for Cluster Metrics\nDESCRIPTION: YAML configuration for Prometheus to scrape MinIO cluster metrics with authentication using bearer token.\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: minio-job\n  bearer_token: <secret>\n  metrics_path: /minio/v2/metrics/cluster\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: Viewing WordCount Output Files in MinIO\nDESCRIPTION: Command to list the output files generated by the WordCount job in the MinIO bucket, which shows the success marker and output partition files.\n\nLANGUAGE: bash\nCODE:\n```\nhadoop fs -ls s3a://testbucket/wordcount\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Persistent Storage on Windows\nDESCRIPTION: This command runs a MinIO container on Windows with the D:\\data directory mounted as a volume for persistence. The container exposes ports 9000 and 9001 for the MinIO API and console.\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --name minio1 \\\n  -v D:\\data:/data \\\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Site Information using Environment Variables\nDESCRIPTION: Shows how to set the site region and name information for a MinIO server using environment variables.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_SITE_REGION=\"us-west-0\"\nexport MINIO_SITE_NAME=\"sfo-rack-1\"\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Notifications in MinIO via Command Line\nDESCRIPTION: Commands to configure MQTT notification target in MinIO using the MinIO client. It shows how to retrieve the current configuration and set new parameters for the MQTT endpoint.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config get myminio/ notify_mqtt\nnotify_mqtt:1 broker=\"\" password=\"\" queue_dir=\"\" queue_limit=\"0\" reconnect_interval=\"0s\"  keep_alive_interval=\"0s\" qos=\"0\" topic=\"\" username=\"\"\n\nmc admin config set myminio notify_mqtt:1 broker=\"tcp://localhost:1883\" password=\"\" queue_dir=\"\" queue_limit=\"0\" reconnect_interval=\"0s\"  keep_alive_interval=\"0s\" qos=\"1\" topic=\"minio\" username=\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing Access Management Plugin with mc Client\nDESCRIPTION: Commands to test the Access Management Plugin using the MinIO Client (mc). This demonstrates successful operations for the admin user and permission denial for regular users.\n\nLANGUAGE: sh\nCODE:\n```\nmc alias set myminio http://localhost:9000 minio minio123\nmc ls myminio\nmc mb myminio/test\nmc cp /etc/issue myminio/test\nmc admin user add myminio foo foobar123\nexport MC_HOST_foo=http://foo:foobar123@localhost:9000\nmc ls foo\nmc cp /etc/issue myminio/test/issue2\n```\n\n----------------------------------------\n\nTITLE: Creating a GetOnly Policy File in JSON\nDESCRIPTION: Defines a JSON policy file named 'getonly.json' that allows users to perform GetObject operations on all objects within the 'my-bucketname' bucket.\n\nLANGUAGE: json\nCODE:\n```\ncat > getonly.json << EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\t{\n\t  \"Action\": [\n\t\t\"s3:GetObject\"\n\t  ],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\n\t\t\"arn:aws:s3:::my-bucketname/*\"\n\t  ],\n\t  \"Sid\": \"\"\n\t}\n  ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing Filtered Batch Jobs by Type in MinIO\nDESCRIPTION: Example showing how to list only replication-type batch jobs using the 'mc batch list' command with the '--type' filter option.\n\nLANGUAGE: bash\nCODE:\n```\nmc batch list alias/ --type replicate\nID                      TYPE            USER            STARTED\nE24HH4nNMcgY5taynaPfxu  replicate       minioadmin      1 minute ago\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with Configuration File\nDESCRIPTION: Command to start MinIO server using a YAML configuration file. This allows all server inputs to be provided through the config file, overriding any pre-existing configuration values.\n\nLANGUAGE: bash\nCODE:\n```\nminio server --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Configured Event Notifications for a Bucket\nDESCRIPTION: Shows how to verify the configuration of event notifications for a MinIO bucket. This command displays all configured event notifications for the images bucket.\n\nLANGUAGE: plaintext\nCODE:\n```\nmc event list myminio/images\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression for All Content via Environment Variables in MinIO\nDESCRIPTION: Environment variable configuration to enable compression for all content types in MinIO by using wildcard settings.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_COMPRESSION_ENABLE=\"on\"\nexport MINIO_COMPRESSION_EXTENSIONS=\"*\"\nexport MINIO_COMPRESSION_MIME_TYPES=\"*\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for MinIO TLS Certificates\nDESCRIPTION: Command to create a Kubernetes secret that stores the TLS private key and public certificate for MinIO. This secret will later be mounted into the MinIO pods.\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic tls-ssl-minio --from-file=path/to/private.key --from-file=path/to/public.crt\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Logger Configuration in MinIO\nDESCRIPTION: Demonstrates how to retrieve the current HTTP logger webhook configuration using the MinIO client (mc). This command displays the current settings for the logger_webhook target.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config get myminio/ logger_webhook\n```\n\n----------------------------------------\n\nTITLE: Attaching a Custom Policy to MinIO\nDESCRIPTION: This command attaches a custom policy named 'userManager' to the MinIO server using the previously created policy file.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin policy attach myminio userManager adminManageUser.json\n```\n\n----------------------------------------\n\nTITLE: Creating Bucket and Configuring NSQ Event Notifications\nDESCRIPTION: Shows how to create a bucket and set up NSQ event notifications for JPG files in MinIO. This configures notifications to trigger when files with .jpg suffix are created or deleted.\n\nLANGUAGE: plaintext\nCODE:\n```\nmc mb myminio/images\nmc event add  myminio/images arn:minio:sqs::1:nsq --suffix .jpg\nmc event list myminio/images\narn:minio:sqs::1:nsq s3:ObjectCreated:*,s3:ObjectRemoved:* Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Generating a 256-bit Random Key for MinIO KMS Encryption\nDESCRIPTION: Command to generate a secure 256-bit random key using /dev/urandom and encode it with base64 for use with MinIO's KMS encryption.\n\nLANGUAGE: sh\nCODE:\n```\n$ cat /dev/urandom | head -c 32 | base64 -\nOSMM+vkKUTCvQs9YL/CVMIMt43HFhkUpqJxTmGl6rYw=\n```\n\n----------------------------------------\n\nTITLE: Viewing Environment Variable Options for Kafka Audit Logging\nDESCRIPTION: Command to display the environment variables that can be used to configure Kafka audit logging in MinIO, showing all available options and their descriptions.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio/ audit_kafka --env\nKEY:\naudit_kafka[:name]  send audit logs to kafka endpoints\n\nARGS:\nMINIO_AUDIT_KAFKA_ENABLE*          (on|off)    enable audit_kafka target, default is 'off'\nMINIO_AUDIT_KAFKA_BROKERS*         (csv)       comma separated list of Kafka broker addresses\nMINIO_AUDIT_KAFKA_TOPIC            (string)    Kafka topic used for bucket notifications\nMINIO_AUDIT_KAFKA_SASL_USERNAME    (string)    username for SASL/PLAIN or SASL/SCRAM authentication\nMINIO_AUDIT_KAFKA_SASL_PASSWORD    (string)    password for SASL/PLAIN or SASL/SCRAM authentication\nMINIO_AUDIT_KAFKA_SASL_MECHANISM   (string)    sasl authentication mechanism, default 'plain'\nMINIO_AUDIT_KAFKA_TLS_CLIENT_AUTH  (string)    clientAuth determines the Kafka server's policy for TLS client auth\nMINIO_AUDIT_KAFKA_SASL             (on|off)    set to 'on' to enable SASL authentication\nMINIO_AUDIT_KAFKA_TLS              (on|off)    set to 'on' to enable TLS\nMINIO_AUDIT_KAFKA_TLS_SKIP_VERIFY  (on|off)    trust server TLS without verification, defaults to \"on\" (verify)\nMINIO_AUDIT_KAFKA_CLIENT_TLS_CERT  (path)      path to client certificate for mTLS auth\nMINIO_AUDIT_KAFKA_CLIENT_TLS_KEY   (path)      path to client key for mTLS auth\nMINIO_AUDIT_KAFKA_VERSION          (string)    specify the version of the Kafka cluster\nMINIO_AUDIT_KAFKA_COMMENT          (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Authentication for Prometheus Metrics\nDESCRIPTION: Environment variable configuration to allow public access to MinIO Prometheus metrics without authentication.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_PROMETHEUS_AUTH_TYPE=\"public\"\nminio server ~/test\n```\n\n----------------------------------------\n\nTITLE: Restarting MinIO Service\nDESCRIPTION: Command to restart the MinIO service to apply the OpenID configuration changes for WebIdentity login to take effect.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin service restart myminio\n```\n\n----------------------------------------\n\nTITLE: Starting Thumbnailer Application for MinIO Webhook Processing\nDESCRIPTION: Shows how to clone, install, and start the Thumbnailer application that listens for MinIO webhook notifications. This Node.js application processes uploaded JPEG images and creates thumbnails.\n\nLANGUAGE: plaintext\nCODE:\n```\ngit clone https://github.com/minio/thumbnailer/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Custom Access Keys on Windows\nDESCRIPTION: This PowerShell command runs MinIO with custom access and secret keys on Windows, using D:\\data as the persistent storage location. The container exposes ports 9000 and 9001.\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --name minio1 \\\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  -v D:\\data:/data \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Configuration for Self-signed Certificate with IP and DNS\nDESCRIPTION: Configuration file for OpenSSL that defines parameters for generating a self-signed certificate with Subject Alternative Names for IP addresses and DNS names.\n\nLANGUAGE: sh\nCODE:\n```\n[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = VA\nL = Somewhere\nO = MyOrg\nOU = MyOU\nCN = MyServerName\n\n[v3_req]\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 127.0.0.1\nDNS.1 = localhost\n```\n\n----------------------------------------\n\nTITLE: Running Spark Pi Calculation Example with YARN\nDESCRIPTION: Command to submit a Spark Pi calculation job to YARN in client mode. This example demonstrates computation by approximating pi through random point generation, using specific memory and executor constraints.\n\nLANGUAGE: bash\nCODE:\n```\n./bin/spark-submit --class org.apache.spark.examples.SparkPi \\\n    --master yarn-client \\\n    --num-executors 1 \\\n    --driver-memory 512m \\\n    --executor-memory 512m \\\n    --executor-cores 1 \\\n    examples/jars/spark-examples*.jar 10\n```\n\n----------------------------------------\n\nTITLE: Adding Replication Rule with MinIO Client\nDESCRIPTION: Command to set up replication from a source bucket to a destination bucket using the MinIO Client (mc). This command creates an ARN for the remote target and establishes the replication configuration.\n\nLANGUAGE: bash\nCODE:\n```\nmc replicate add myminio/srcbucket --priority 1 --remote-bucket https://accessKey:secretKey@replica-endpoint:9000/destbucket \n```\n\n----------------------------------------\n\nTITLE: Adding Replication Rule with MinIO Client\nDESCRIPTION: Command to set up replication from a source bucket to a destination bucket using the MinIO Client (mc). This command creates an ARN for the remote target and establishes the replication configuration.\n\nLANGUAGE: bash\nCODE:\n```\nmc replicate add myminio/srcbucket --priority 1 --remote-bucket https://accessKey:secretKey@replica-endpoint:9000/destbucket \n```\n\n----------------------------------------\n\nTITLE: Getting MinIO Kafka Configuration with MinIO Client (mc)\nDESCRIPTION: Command to retrieve the current Kafka notification configuration from a MinIO server using the MinIO Client (mc) tool.\n\nLANGUAGE: bash\nCODE:\n```\n$ mc admin config get myminio/ notify_kafka\nnotify_kafka:1 tls_skip_verify=\"off\"  queue_dir=\"\" queue_limit=\"0\" sasl=\"off\" sasl_password=\"\" sasl_username=\"\" tls_client_auth=\"0\" tls=\"off\" brokers=\"\" topic=\"\" client_tls_cert=\"\" client_tls_key=\"\" version=\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Rule to Keep Recent Non-Current Versions with MinIO Client\nDESCRIPTION: This command adds a lifecycle rule using the MinIO Client that will retain only the 5 most recent non-current versions and expire older versions after 30 days.\n\nLANGUAGE: sh\nCODE:\n```\nmc ilm rule add --noncurrent-expire-days 30 --noncurrent-expire-newer 5 --prefix \"user-uploads/\" myminio/mydata\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with Basic Authentication\nDESCRIPTION: Basic command to start a MinIO server with root credentials defined as environment variables.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nminio server /mnt/export\n```\n\n----------------------------------------\n\nTITLE: Creating a New Admin User in MinIO\nDESCRIPTION: This command adds a new admin user named 'admin1' with password 'admin123' to the MinIO server.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin user add myminio admin1 admin123\n```\n\n----------------------------------------\n\nTITLE: Initializing etcd v3 Container with Docker/Podman\nDESCRIPTION: Command to start an etcd v3 container using Podman or Docker. It configures network ports, data directory, and cluster settings needed for a standalone etcd instance.\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /tmp/etcd-data.tmp && mkdir -p /tmp/etcd-data.tmp && \\\n  podman rmi gcr.io/etcd-development/etcd:v3.3.9 || true && \\\n  podman run \\\n  -p 2379:2379 \\\n  -p 2380:2380 \\\n  --mount type=bind,source=/tmp/etcd-data.tmp,destination=/etcd-data \\\n  --name etcd-gcr-v3.3.9 \\\n  gcr.io/etcd-development/etcd:v3.3.9 \\\n  /usr/local/bin/etcd \\\n  --name s1 \\\n  --data-dir /etcd-data \\\n  --listen-client-urls http://0.0.0.0:2379 \\\n  --advertise-client-urls http://0.0.0.0:2379 \\\n  --listen-peer-urls http://0.0.0.0:2380 \\\n  --initial-advertise-peer-urls http://0.0.0.0:2380 \\\n  --initial-cluster s1=http://0.0.0.0:2380 \\\n  --initial-cluster-token tkn \\\n  --initial-cluster-state new\n```\n\n----------------------------------------\n\nTITLE: Running Verbose HTTP Trace on MinIO Server\nDESCRIPTION: Command to trace the entire HTTP request details on a MinIO server for detailed debugging.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin trace --verbose myminio\n```\n\n----------------------------------------\n\nTITLE: Restarting Failed or Canceled Decommissioning in MinIO\nDESCRIPTION: Command to restart a decommissioning process that was previously canceled or failed. Allows resuming the migration of data from the specified pool.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission start alias/ http://minio{1...2}/data{1...4}\n```\n\n----------------------------------------\n\nTITLE: Configuring NSQ Notification via Environment Variables in MinIO\nDESCRIPTION: Shows how to configure NSQ notifications using environment variables in MinIO. Each parameter from the direct configuration is mapped to its corresponding environment variable.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_nsq[:name]  publish bucket notifications to NSQ endpoints\n\nARGS:\nMINIO_NOTIFY_NSQ_ENABLE*          (on|off)    enable notify_nsq target, default is 'off'\nMINIO_NOTIFY_NSQ_NSQD_ADDRESS*    (address)   NSQ server address e.g. '127.0.0.1:4150'\nMINIO_NOTIFY_NSQ_TOPIC*           (string)    NSQ topic\nMINIO_NOTIFY_NSQ_TLS              (on|off)    set to 'on' to enable TLS\nMINIO_NOTIFY_NSQ_TLS_SKIP_VERIFY  (on|off)    trust server TLS without verification, defaults to \"on\" (verify)\nMINIO_NOTIFY_NSQ_QUEUE_DIR        (path)      staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_NSQ_QUEUE_LIMIT      (number)    maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_NSQ_COMMENT          (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Running a Web Identity Example with Google OAuth2\nDESCRIPTION: An example command to run a Go program that demonstrates web identity authentication with Google OAuth2. It specifies the client ID and client secret for the OAuth2 authentication flow.\n\nLANGUAGE: bash\nCODE:\n```\n$ go run web-identity.go -cid 204367807228-ok7601k6gj1pgge7m09h7d79co8p35xx.apps.googleusercontent.com -csec XsT_PgPdT1nO9DD45rMLJw7G\n2018/12/26 17:49:36 listening on http://localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Server with Dex OpenID\nDESCRIPTION: Sets environment variables to configure MinIO server to use Dex as an OpenID Connect provider. Specifies the claim name and the configuration URL for OpenID discovery.\n\nLANGUAGE: bash\nCODE:\n```\n~ export MINIO_IDENTITY_OPENID_CLAIM_NAME=name\n~ export MINIO_IDENTITY_OPENID_CONFIG_URL=http://127.0.0.1:5556/dex/.well-known/openid-configuration\n~ minio server ~/test\n```\n\n----------------------------------------\n\nTITLE: Connecting to NATS for MinIO Bucket Notifications in Go\nDESCRIPTION: A Go program that connects to a NATS server and subscribes to 'bucketevents' subject to receive MinIO bucket event notifications. It handles incoming messages by logging them to the console.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// Import Go and NATS packages\nimport (\n \"log\"\n \"runtime\"\n\n \"github.com/nats-io/nats.go\"\n)\n\nfunc main() {\n\n // Create server connection\n natsConnection, _ := nats.Connect(\"nats://yourusername:yoursecret@localhost:4222\")\n log.Println(\"Connected\")\n\n // Subscribe to subject\n log.Printf(\"Subscribing to subject 'bucketevents'\\n\")\n natsConnection.Subscribe(\"bucketevents\", func(msg *nats.Msg) {\n\n  // Handle the message\n  log.Printf(\"Received message '%s\\n\", string(msg.Data)+\"'\")\n })\n\n // Keep the connection alive\n runtime.Goexit()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Thumbnail Creation from Webhook Processing\nDESCRIPTION: Shows how to verify that the webhook notification triggered the Thumbnailer to create a thumbnail. This command lists the contents of the images-thumbnail bucket.\n\nLANGUAGE: plaintext\nCODE:\n```\nmc ls myminio/images-thumbnail\n[2017-02-08 11:39:40 IST]   992B images-thumbnail.jpg\n```\n\n----------------------------------------\n\nTITLE: Fetching Root Identity for KES Configuration\nDESCRIPTION: Command to download the root key and certificate required for connecting to the KES server. These credentials establish a secure connection between MinIO and KES.\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sSL --tlsv1.2 \\\n     -O 'https://raw.githubusercontent.com/minio/kes/master/root.key' \\\n     -O 'https://raw.githubusercontent.com/minio/kes/master/root.cert'\n```\n\n----------------------------------------\n\nTITLE: Enabling Bucket Versioning in XML\nDESCRIPTION: XML configuration to enable versioning on a bucket. The Status is set to 'Enabled' to activate versioning for all objects in the bucket.\n\nLANGUAGE: xml\nCODE:\n```\n<VersioningConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Status>Enabled</Status>\n</VersioningConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Example JWT Token Request to WSO2\nDESCRIPTION: Example cURL command with actual client credentials to request a JWT token from WSO2 Identity Server running on localhost port 9443.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u PoEgXP6uVO45IsENRngDXj5Au5Ya:eKsw6z8CtOJVBtrOWvhRWL4TUCga -k -d \"grant_type=client_credentials\" -H \"Content-Type:application/x-www-form-urlencoded\" https://localhost:9443/oauth2/token\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Attaching a Policy to an LDAP User\nDESCRIPTION: Legacy command to attach a policy to an LDAP user that is now deprecated. This uses the admin policy command rather than the newer idp command.\n\nLANGUAGE: shell\nCODE:\n```\nmc admin policy attach myminio mypolicy --user='uid=james,cn=accounts,dc=myldapserver,dc=com'\n```\n\n----------------------------------------\n\nTITLE: Running Web Identity Client for OpenID Authentication\nDESCRIPTION: Executes a Go program that acts as a web client for the OpenID authentication flow. Includes parameters for client ID, secret, configuration endpoint, and required scopes.\n\nLANGUAGE: bash\nCODE:\n```\n~ go run web-identity.go -cid example-app -csec ZXhhbXBsZS1hcHAtc2VjcmV0 \\\n     -config-ep http://127.0.0.1:5556/dex/.well-known/openid-configuration \\\n     -cscopes groups,openid,email,profile\n```\n\n----------------------------------------\n\nTITLE: Starting Pool Decommissioning in MinIO using mc CLI\nDESCRIPTION: Command to initiate the decommissioning process for a specific pool in MinIO. This starts draining data from the specified pool (minio{1...2}/data{1...4}) to other active pools.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission start alias/ http://minio{1...2}/data{1...4}\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading a MinIO Hotfix Binary\nDESCRIPTION: Command to build a hotfix binary with appropriate version tags and upload it to the MinIO download server. This requires credential access.\n\nLANGUAGE: bash\nCODE:\n```\nλ CRED_DIR=/media/builder/minio make hotfix-push\n```\n\n----------------------------------------\n\nTITLE: Enabling Bucket Versioning with MinIO Java SDK\nDESCRIPTION: Java example demonstrating how to enable versioning on a bucket using the MinIO Java SDK. The example connects to a MinIO server and enables versioning on a specified bucket.\n\nLANGUAGE: java\nCODE:\n```\nimport io.minio.EnableVersioningArgs;\nimport io.minio.MinioClient;\nimport io.minio.errors.MinioException;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class EnableVersioning {\n  /** MinioClient.enableVersioning() example. */\n  public static void main(String[] args)\n      throws IOException, NoSuchAlgorithmException, InvalidKeyException {\n    try {\n      /* play.min.io for test and development. */\n      MinioClient minioClient =\n          MinioClient.builder()\n              .endpoint(\"https://play.min.io\")\n              .credentials(\"Q3AM3UQ867SPQQA43P2F\", \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\")\n              .build();\n\n      /* Amazon S3: */\n      // MinioClient minioClient =\n      //     MinioClient.builder()\n      //         .endpoint(\"https://s3.amazonaws.com\")\n      //         .credentials(\"YOUR-ACCESSKEY\", \"YOUR-SECRETACCESSKEY\")\n      //         .build();\n\n      // Enable versioning on 'my-bucketname'.\n      minioClient.enableVersioning(EnableVersioningArgs.builder().bucket(\"my-bucketname\").build());\n\n      System.out.println(\"Bucket versioning is enabled successfully\");\n\n    } catch (MinioException e) {\n      System.out.println(\"Error occurred: \" + e);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AMQP Notification Configuration\nDESCRIPTION: Command to get the current AMQP notification configuration from a MinIO server using the MinIO Client (mc) admin tool.\n\nLANGUAGE: bash\nCODE:\n```\n$ mc admin config get myminio/ notify_amqp\n```\n\n----------------------------------------\n\nTITLE: Generating Password-protected RSA Private Key with OpenSSL for MinIO\nDESCRIPTION: Creates a password-protected 2048-bit RSA private key using AES-256 encryption for more secure TLS configuration in MinIO.\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -aes256 -passout pass:PASSWORD -out private.key 2048\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Event Notification with SQL Query\nDESCRIPTION: SQL command to check if the notification event was properly stored in the PostgreSQL database table after uploading a file.\n\nLANGUAGE: sql\nCODE:\n```\n$ psql -h 127.0.0.1 -U postgres -d minio_events\nminio_events=# select * from bucketevents;\n\nkey                 |                      value\nn images/myphoto.jpg | {\"Records\": [{\"s3\": {\"bucket\": {\"arn\": \"arn:aws:s3:::images\", \"name\": \"images\", \"ownerIdentity\": {\"principalId\": \"minio\"}}, \"object\": {\"key\": \"myphoto.jpg\", \"eTag\": \"1d97bf45ecb37f7a7b699418070df08f\", \"size\": 56060, \"sequencer\": \"147CE57C70B31931\"}, \"configurationId\": \"Config\", \"s3SchemaVersion\": \"1.0\"}, \"awsRegion\": \"\", \"eventName\": \"s3:ObjectCreated:Put\", \"eventTime\": \"2016-10-12T21:18:20Z\", \"eventSource\": \"aws:s3\", \"eventVersion\": \"2.0\", \"userIdentity\": {\"principalId\": \"minio\"}, \"responseElements\": {}, \"requestParameters\": {\"sourceIPAddress\": \"[::1]:39706\"}}]}\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with Help Flag\nDESCRIPTION: Command to run the Prometheus binary with the help flag to see available options.\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --help\nusage: prometheus [<flags>]\n\nThe Prometheus monitoring server\n\n. . .\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Endpoint in MinIO via Environment Variables\nDESCRIPTION: Environment variables for configuring NATS notifications in MinIO, providing the same functionality as server settings but through environment configuration.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_nats[:name]  publish bucket notifications to NATS endpoints\n\nARGS:\nMINIO_NOTIFY_NATS_ENABLE*                           (on|off)    enable notify_nats target, default is 'off'\nMINIO_NOTIFY_NATS_ADDRESS*                          (address)   NATS server address e.g. '0.0.0.0:4222'\nMINIO_NOTIFY_NATS_SUBJECT*                          (string)    NATS subscription subject\nMINIO_NOTIFY_NATS_USERNAME                          (string)    NATS username\nMINIO_NOTIFY_NATS_PASSWORD                          (string)    NATS password\nMINIO_NOTIFY_NATS_TOKEN                             (string)    NATS token\nMINIO_NOTIFY_NATS_TLS                               (on|off)    set to 'on' to enable TLS\nMINIO_NOTIFY_NATS_TLS_SKIP_VERIFY                   (on|off)    trust server TLS without verification, defaults to \"on\" (verify)\nMINIO_NOTIFY_NATS_PING_INTERVAL                     (duration)  client ping commands interval in s,m,h,d. Disabled by default\nMINIO_NOTIFY_NATS_STREAMING                         (on|off)    set to 'on', to use streaming NATS server\nMINIO_NOTIFY_NATS_STREAMING_ASYNC                   (on|off)    set to 'on', to enable asynchronous publish\nMINIO_NOTIFY_NATS_STREAMING_MAX_PUB_ACKS_IN_FLIGHT  (number)    number of messages to publish without waiting for ACKs\nMINIO_NOTIFY_NATS_STREAMING_CLUSTER_ID              (string)    unique ID for NATS streaming cluster\nMINIO_NOTIFY_NATS_CERT_AUTHORITY                    (string)    path to certificate chain of the target NATS server\nMINIO_NOTIFY_NATS_CLIENT_CERT                       (string)    client cert for NATS mTLS auth\nMINIO_NOTIFY_NATS_CLIENT_KEY                        (string)    client cert key for NATS mTLS auth\nMINIO_NOTIFY_NATS_QUEUE_DIR                         (path)      staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_NATS_QUEUE_LIMIT                       (number)    maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_NATS_COMMENT                           (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Setting MinIO Storage Class Environment Variables with Shell\nDESCRIPTION: Sets environment variables to configure MinIO storage class parameters. This example sets STANDARD storage class to use 3 parity drives and REDUCED_REDUNDANCY storage class to use 2 parity drives.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_STORAGE_CLASS_STANDARD=EC:3\nexport MINIO_STORAGE_CLASS_RRS=EC:2\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Pool Decommissioning Status in MinIO\nDESCRIPTION: Command to check the status of a specific pool that is being decommissioned. Shows the transfer rate and progress of the decommissioning process.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission status alias/ http://minio{1...2}/data{1...4}\n```\n\n----------------------------------------\n\nTITLE: Implementing MinIO Connection Function with Retry Logic in Shell\nDESCRIPTION: Function that attempts to connect to a MinIO server with retry logic. It reads access credentials from config files, attempts to establish a connection, and retries up to 29 times with 2-second intervals between attempts.\n\nLANGUAGE: shell\nCODE:\n```\n# connectToMinio\n# Use a check-sleep-check loop to wait for MinIO service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing sample dataset for S3 Select testing with MinIO\nDESCRIPTION: Shell commands to download a sample population dataset, create a bucket in MinIO, compress the dataset with gzip, and upload it to MinIO for testing S3 Select functionality.\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2019_TotalPopulationBySex.csv\" > TotalPopulation.csv\nmc mb myminio/mycsvbucket\ngzip TotalPopulation.csv\nmc cp TotalPopulation.csv.gz myminio/mycsvbucket/sampledata/\n```\n\n----------------------------------------\n\nTITLE: Listing All Configuration Keys in MinIO\nDESCRIPTION: Command to list all available configuration keys in MinIO using the mc admin tool. This helps administrators view all possible configuration options.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio/\n```\n\n----------------------------------------\n\nTITLE: Connecting to NATS Streaming for MinIO Bucket Notifications in Go\nDESCRIPTION: A Go program that connects to a NATS Streaming server with reconnection handling and subscribes to 'bucketevents' subject to receive MinIO bucket notifications.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// Import Go and NATS packages\nimport (\n \"fmt\"\n \"runtime\"\n\n \"github.com/nats-io/stan.go\"\n)\n\nfunc main() {\n\n var stanConnection stan.Conn\n\n subscribe := func() {\n  fmt.Printf(\"Subscribing to subject 'bucketevents'\\n\")\n  stanConnection.Subscribe(\"bucketevents\", func(m *stan.Msg) {\n\n   // Handle the message\n   fmt.Printf(\"Received a message: %s\\n\", string(m.Data))\n  })\n }\n\n\n stanConnection, _ = stan.Connect(\"test-cluster\", \"test-client\", stan.NatsURL(\"nats://yourusername:yoursecret@0.0.0.0:4222\"), stan.SetConnectionLostHandler(func(c stan.Conn, _ error) {\n  go func() {\n   for {\n    // Reconnect if the connection is lost.\n    if stanConnection == nil || stanConnection.NatsConn() == nil ||  !stanConnection.NatsConn().IsConnected() {\n     stanConnection, _ = stan.Connect(\"test-cluster\", \"test-client\", stan.NatsURL(\"nats://yourusername:yoursecret@0.0.0.0:4222\"), stan.SetConnectionLostHandler(func(c stan.Conn, _ error) {\n      if c.NatsConn() != nil {\n       c.NatsConn().Close()\n      }\n      _ = c.Close()\n     }))\n     if stanConnection != nil {\n      subscribe()\n     }\n\n    }\n   }\n\n  }()\n }))\n\n // Subscribe to subject\n subscribe()\n\n // Keep the connection alive\n runtime.Goexit()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up MinIO with WSO2 OpenID Configuration\nDESCRIPTION: Environment variable configuration for MinIO server to use WSO2 as an OpenID provider. This includes the OpenID configuration URL and client ID needed for MinIO to validate tokens.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_IDENTITY_OPENID_CONFIG_URL=https://localhost:9443/oauth2/oidcdiscovery/.well-known/openid-configuration\nexport MINIO_IDENTITY_OPENID_CLIENT_ID=\"843351d4-1080-11ea-aa20-271ecba3924a\"\nminio server /mnt/data\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Existence Check Function for MinIO in Shell\nDESCRIPTION: Function that checks if a policy exists in the MinIO server using the 'mc admin policy info' command. Returns the exit code of the command, which indicates whether the policy exists.\n\nLANGUAGE: shell\nCODE:\n```\n# checkPolicyExists ($policy)\n# Check if the policy exists, by using the exit code of `mc admin policy info`\ncheckPolicyExists() {\n  POLICY=$1\n  CMD=$(${MC} admin policy info myminio $POLICY > /dev/null 2>&1)\n  return $?\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current NSQ Configuration in MinIO\nDESCRIPTION: Shows how to retrieve the current NSQ notification configuration using MinIO Client (mc). This command displays all configured NSQ parameters for a MinIO instance.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config get myminio/ notify_nsq\nnotify_nsq:1 nsqd_address=\"\" queue_dir=\"\" queue_limit=\"0\"  tls=\"off\" tls_skip_verify=\"off\" topic=\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Ongoing Decommissioning Operations in MinIO\nDESCRIPTION: Command to list all pools that are currently undergoing decommissioning. Displays pool IDs, endpoints, capacity usage, and current status.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission cancel alias/\n```\n\n----------------------------------------\n\nTITLE: Getting Current PostgreSQL Configuration in MinIO\nDESCRIPTION: Command to retrieve the current PostgreSQL notification configuration from a MinIO deployment using the MinIO Client.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config get myminio notify_postgres\nnotify_postgres:1 queue_dir=\"\" connection_string=\"\" queue_limit=\"0\"  table=\"\" format=\"namespace\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Use AlertManager in YAML\nDESCRIPTION: Configuration snippet that connects Prometheus to the AlertManager instance and specifies where alert rules are stored. This needs to be added to the prometheus.yml file.\n\nLANGUAGE: yaml\nCODE:\n```\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets: ['localhost:9093']\nrule_files:\n  - rules.yml\n```\n\n----------------------------------------\n\nTITLE: Using Presigned URL to Access Transformed Object\nDESCRIPTION: Command to use curl with the generated presigned URL to retrieve the transformed object. The example shows the original text transformed to uppercase.\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v $(go run presigned.go)\n...\n...\n> GET /functionbucket/testobject?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=minioadmin%2F20230205%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230205T173023Z&X-Amz-Expires=1000&X-Amz-SignedHeaders=host&lambdaArn=arn%3Aminio%3As3-object-lambda%3A%3Atoupper%3Awebhook&X-Amz-Signature=d7e343f0da9d4fa2bc822c12ad2f54300ff16796a1edaa6d31f1313c8e94d5b2 HTTP/1.1\n> Host: localhost:9000\n> User-Agent: curl/7.81.0\n> Accept: */*\n>\n\nMINIO IS A HIGH PERFORMANCE OBJECT STORAGE RELEASED UNDER GNU AFFERO GENERAL PUBLIC LICENSE V3.0. IT IS API COMPATIBLE WITH AMAZON S3 CLOUD STORAGE SERVICE. USE MINIO TO BUILD HIGH PERFORMANCE INFRASTRUCTURE FOR MACHINE LEARNING, ANALYTICS AND APPLICATION DATA WORKLOADS.\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Notification Parameters in MinIO\nDESCRIPTION: Shows the configuration parameters for setting up webhook notifications in MinIO. This includes endpoint URL, auth token, queue directory for undelivered messages, and other optional parameters.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_webhook[:name]  publish bucket notifications to webhook endpoints\n\nARGS:\nendpoint*    (url)       webhook server endpoint e.g. http://localhost:8080/minio/events\nauth_token   (string)    opaque string or JWT authorization token\nqueue_dir    (path)      staging dir for undelivered messages e.g. '/home/events'\nqueue_limit  (number)    maximum limit for undelivered messages, defaults to '100000'\nclient_cert  (string)    client cert for Webhook mTLS auth\nclient_key   (string)    client cert key for Webhook mTLS auth\ncomment      (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Monitoring MinIO Traffic During Veeam Backup Operations\nDESCRIPTION: Uses the MinIO admin trace command to monitor the API calls made to MinIO servers during Veeam backup operations. This helps verify that data is flowing correctly to the MinIO storage nodes.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin trace myminio\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Notification via Environment Variables in MinIO\nDESCRIPTION: Shows how to configure webhook notifications using environment variables in MinIO. Each parameter from the direct configuration is mapped to its corresponding environment variable.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_webhook[:name]  publish bucket notifications to webhook endpoints\n\nARGS:\nMINIO_NOTIFY_WEBHOOK_ENABLE*      (on|off)    enable notify_webhook target, default is 'off'\nMINIO_NOTIFY_WEBHOOK_ENDPOINT*    (url)       webhook server endpoint e.g. http://localhost:8080/minio/events\nMINIO_NOTIFY_WEBHOOK_AUTH_TOKEN   (string)    opaque string or JWT authorization token\nMINIO_NOTIFY_WEBHOOK_QUEUE_DIR    (path)      staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_WEBHOOK_QUEUE_LIMIT  (number)    maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_WEBHOOK_COMMENT      (sentence)  optionally add a comment to this setting\nMINIO_NOTIFY_WEBHOOK_CLIENT_CERT  (string)    client cert for Webhook mTLS auth\nMINIO_NOTIFY_WEBHOOK_CLIENT_KEY   (string)    client cert key for Webhook mTLS auth\n```\n\n----------------------------------------\n\nTITLE: Loading OPA Policy via REST API\nDESCRIPTION: This command uses curl to upload the previously created Rego policy to the OPA server. The policy is registered with the name 'putobject' and will be used for authorization decisions.\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT --data-binary @example.rego \\\n  localhost:8181/v1/policies/putobject\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Custom Secret Names\nDESCRIPTION: This command creates a MinIO service with custom-named Docker secrets. It uses environment variables to tell MinIO where to find the credentials in the container filesystem.\n\nLANGUAGE: sh\nCODE:\n```\ndocker service create --name=\"minio-service\" \\\n  --secret=\"my_access_key\" \\\n  --secret=\"my_secret_key\" \\\n  --env=\"MINIO_ROOT_USER_FILE=my_access_key\" \\\n  --env=\"MINIO_ROOT_PASSWORD_FILE=my_secret_key\" \\\n  quay.io/minio/minio server /data\n```\n\n----------------------------------------\n\nTITLE: Sample NSQ Event Notification JSON\nDESCRIPTION: Shows an example of the JSON event notification that MinIO sends to NSQ when a file is uploaded. This contains details about the object, bucket, and the operation that triggered the notification.\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"EventName\":\"s3:ObjectCreated:Put\",\"Key\":\"images/gopher.jpg\",\"Records\":[{\"eventVersion\":\"2.0\",\"eventSource\":\"minio:s3\",\"awsRegion\":\"\",\"eventTime\":\"2018-10-31T09:31:11Z\",\"eventName\":\"s3:ObjectCreated:Put\",\"userIdentity\":{\"principalId\":\"21EJ9HYV110O8NVX2VMS\"},\"requestParameters\":{\"sourceIPAddress\":\"10.1.1.1\"},\"responseElements\":{\"x-amz-request-id\":\"1562A792DAA53426\",\"x-minio-origin-endpoint\":\"http://10.0.3.1:9000\"},\"s3\":{\"s3SchemaVersion\":\"1.0\",\"configurationId\":\"Config\",\"bucket\":{\"name\":\"images\",\"ownerIdentity\":{\"principalId\":\"21EJ9HYV110O8NVX2VMS\"},\"arn\":\"arn:aws:s3:::images\"},\"object\":{\"key\":\"gopher.jpg\",\"size\":162023,\"eTag\":\"5337769ffa594e742408ad3f30713cd7\",\"contentType\":\"image/jpeg\",\"userMetadata\":{\"content-type\":\"image/jpeg\"},\"versionId\":\"1\",\"sequencer\":\"1562A792DAA53426\"}},\"source\":{\"host\":\"\",\"port\":\"\",\"userAgent\":\"MinIO (linux; amd64) minio-go/v6.0.8 mc/DEVELOPMENT.GOGET\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Secret for Authentication\nDESCRIPTION: Creates a Kubernetes secret with MinIO root user credentials that can be referenced during chart installation instead of setting credentials directly.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic my-minio-secret --from-literal=rootUser=foobarbaz --from-literal=rootPassword=foobarbazqux\n```\n\n----------------------------------------\n\nTITLE: Verifying Bucket Encryption Configuration\nDESCRIPTION: Command to check if SSE-S3 encryption is enabled on a MinIO bucket using the MinIO Client (mc). This helps confirm that auto-encryption is properly configured.\n\nLANGUAGE: sh\nCODE:\n```\nmc encrypt info myminio/bucket/\n```\n\n----------------------------------------\n\nTITLE: MinIO Audit Log JSON Format Example\nDESCRIPTION: Provides an example of the JSON structure for MinIO audit logs. The example shows all fields included in an audit log entry for a PutObject operation, including request and response details, object location, and timing information.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1\",\n  \"deploymentid\": \"90e81272-45d9-4fe8-9c45-c9a7322bf4b5\",\n  \"time\": \"2024-05-09T07:38:10.449688982Z\",\n  \"event\": \"\",\n  \"trigger\": \"incoming\",\n  \"api\": {\n    \"name\": \"PutObject\",\n    \"bucket\": \"testbucket\",\n    \"object\": \"hosts\",\n    \"status\": \"OK\",\n    \"statusCode\": 200,\n    \"rx\": 401,\n    \"tx\": 0,\n    \"timeToResponse\": \"13309747ns\",\n    \"timeToResponseInNS\": \"13309747\"\n  },\n  \"remotehost\": \"127.0.0.1\",\n  \"requestID\": \"17CDC1F4D7E69123\",\n  \"userAgent\": \"MinIO (linux; amd64) minio-go/v7.0.70 mc/RELEASE.2024-04-30T17-44-48Z\",\n  \"requestPath\": \"/testbucket/hosts\",\n  \"requestHost\": \"localhost:9000\",\n  \"requestHeader\": {\n    \"Accept-Encoding\": \"zstd,gzip\",\n    \"Authorization\": \"AWS4-HMAC-SHA256 Credential=minioadmin/20240509/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date;x-amz-decoded-content-length,Signature=d4d6862e6cc61011a61fa801da71048ece4f32a0562cad6bb88bdda50d7fcb95\",\n    \"Content-Length\": \"401\",\n    \"Content-Type\": \"application/octet-stream\",\n    \"User-Agent\": \"MinIO (linux; amd64) minio-go/v7.0.70 mc/RELEASE.2024-04-30T17-44-48Z\",\n    \"X-Amz-Content-Sha256\": \"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\",\n    \"X-Amz-Date\": \"20240509T073810Z\",\n    \"X-Amz-Decoded-Content-Length\": \"228\"\n  },\n  \"responseHeader\": {\n    \"Accept-Ranges\": \"bytes\",\n    \"Content-Length\": \"0\",\n    \"ETag\": \"9fe7a344ef4227d3e53751e9d88ce41e\",\n    \"Server\": \"MinIO\",\n    \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains\",\n    \"Vary\": \"Origin,Accept-Encoding\",\n    \"X-Amz-Id-2\": \"dd9025bab4ad464b049177c95eb6ebf374d3b3fd1af9251148b658df7ac2e3e8\",\n    \"X-Amz-Request-Id\": \"17CDC1F4D7E69123\",\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"X-Xss-Protection\": \"1; mode=block\"\n  },\n  \"tags\": {\n    \"objectLocation\": {\n      \"name\": \"hosts\",\n      \"poolId\": 1,\n      \"setId\": 1,\n      \"drives\": [\n        \"/mnt/data1\",\n        \"/mnt/data2\",\n        \"/mnt/data3\",\n        \"/mnt/data4\"\n      ]\n    }\n  },\n  \"accessKey\": \"minioadmin\"\n}\n```\n\n----------------------------------------\n\nTITLE: MinIO Batch Command Overview\nDESCRIPTION: Command-line reference for the 'mc batch' command, showing the available subcommands for managing batch jobs in MinIO including generate, start, list, status, and describe options.\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n  mc batch - manage batch jobs\n\nUSAGE:\n  mc batch COMMAND [COMMAND FLAGS | -h] [ARGUMENTS...]\n\nCOMMANDS:\n  generate  generate a new batch job definition\n  start     start a new batch job\n  list, ls  list all current batch jobs\n  status    summarize job events on MinIO server in real-time\n  describe  describe job definition for a job\n```\n\n----------------------------------------\n\nTITLE: Detaching a Policy from an LDAP User\nDESCRIPTION: Command to remove a policy association from an LDAP user using their full distinguished name (DN) with the MinIO Client (mc) idp command.\n\nLANGUAGE: shell\nCODE:\n```\nmc idp ldap policy detach myminio mypolicy --user='uid=james,cn=accounts,dc=myldapserver,dc=com'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Lambda Handler in Python\nDESCRIPTION: Install the required Python packages (Flask and requests) needed for the lambda handler implementation.\n\nLANGUAGE: shell\nCODE:\n```\npip install flask requests\n```\n\n----------------------------------------\n\nTITLE: Configuring NSQ Notification Parameters in MinIO\nDESCRIPTION: Shows the configuration parameters for setting up NSQ notifications in MinIO. This includes NSQ server address, topic, TLS settings, and queue parameters for undelivered messages.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_nsq[:name]  publish bucket notifications to NSQ endpoints\n\nARGS:\nnsqd_address*    (address)   NSQ server address e.g. '127.0.0.1:4150'\ntopic*           (string)    NSQ topic\ntls              (on|off)    set to 'on' to enable TLS\ntls_skip_verify  (on|off)    trust server TLS without verification, defaults to \"on\" (verify)\nqueue_dir        (path)      staging dir for undelivered messages e.g. '/home/events'\nqueue_limit      (number)    maximum limit for undelivered messages, defaults to '100000'\ncomment          (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Setting Healing Parameters in MinIO\nDESCRIPTION: Example command to increase healing operation speed by adjusting maximum sleep duration and maximum IO requests, allowing more concurrent operations.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set alias/ heal max_sleep=300ms max_io=100\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Encrypted KES Client Private Key\nDESCRIPTION: Environment variable setting to provide the password for a password-protected private key used for KES authentication. This enables using encrypted private keys for enhanced security.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_KMS_KES_KEY_PASSWORD=<your-password>\n```\n\n----------------------------------------\n\nTITLE: Adding GnuTLS to Windows Path for MinIO Certificate Generation\nDESCRIPTION: Uses PowerShell to add the GnuTLS binary path to the Windows system path to enable certificate generation for MinIO.\n\nLANGUAGE: sh\nCODE:\n```\nsetx path \"%path%;C:\\Users\\MyUser\\Downloads\\gnutls-3.4.9-w64\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Prefixes for Versioning in XML\nDESCRIPTION: Advanced XML configuration that enables versioning but excludes specific prefix patterns from being versioned. Objects in these paths won't be versioned or replicated, useful for temporary data.\n\nLANGUAGE: xml\nCODE:\n```\n<VersioningConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n        <Status>Enabled</Status>\n        <ExcludedPrefixes>\n          <Prefix>*/_temporary</Prefix>\n        </ExcludedPrefixes>\n        <ExcludedPrefixes>\n          <Prefix>*/__magic</Prefix>\n        </ExcludedPrefixes>\n        <ExcludedPrefixes>\n          <Prefix>*/_staging</Prefix>\n        </ExcludedPrefixes>\n\n        <!-- .. up to 10 prefixes in all -->\n</VersioningConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Downloading MinIO tuned configuration file\nDESCRIPTION: Downloads the tuned.conf file from the MinIO GitHub repository that contains optimized performance settings for MinIO deployments.\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/minio/minio/master/docs/tuning/tuned.conf\n```\n\n----------------------------------------\n\nTITLE: Viewing Batch Job Definition in MinIO\nDESCRIPTION: Command example showing how to display the complete YAML definition of a running batch job using the 'mc batch describe' command with the job ID.\n\nLANGUAGE: bash\nCODE:\n```\nmc batch describe myminio/ E24HH4nNMcgY5taynaPfxu\nreplicate:\n  apiVersion: v1\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring firewall-cmd for MinIO Access\nDESCRIPTION: Commands for configuring firewall-cmd on CentOS/RHEL systems to allow traffic to MinIO's port. This includes identifying active zones and applying port rules.\n\nLANGUAGE: sh\nCODE:\n```\nfirewall-cmd --get-active-zones\n```\n\nLANGUAGE: sh\nCODE:\n```\nfirewall-cmd --zone=public --add-port=9000/tcp --permanent\n```\n\nLANGUAGE: sh\nCODE:\n```\nfirewall-cmd --reload\n```\n\n----------------------------------------\n\nTITLE: Sample AlertManager Alert JSON Payload\nDESCRIPTION: Example JSON payload sent from AlertManager to a webhook when the MinIOClusterTolerance alert fires. Contains detailed information about the alert status, affected resources, and timing.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receiver\": \"web\\\\.hook\",\n  \"status\": \"firing\",\n  \"alerts\": [\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"MinIOClusterTolerance\",\n        \"instance\": \"localhost:9000\",\n        \"job\": \"minio-job-node\",\n        \"pool\": \"0\",\n        \"server\": \"127.0.0.1:9000\",\n        \"set\": \"0\",\n        \"severity\": \"critical\"\n      },\n      \"annotations\": {\n        \"description\": \"MinIO instance 127.0.0.1:9000 of job minio-job has tolerance <=0 for more than 5 minutes.\",\n        \"summary\": \"Instance 127.0.0.1:9000 unable to tolerate node failures\"\n      },\n      \"startsAt\": \"2023-11-18T06:20:09.456Z\",\n      \"endsAt\": \"0001-01-01T00:00:00Z\",\n      \"generatorURL\": \"http://fedora-minio:9090/graph?g0.expr=minio_cluster_health_erasure_set_tolerance+%3C%3D+0&g0.tab=1\",\n      \"fingerprint\": \"2255608b0da28ca3\"\n    }\n  ],\n  \"groupLabels\": {\n    \"alertname\": \"MinIOClusterTolerance\"\n  },\n  \"commonLabels\": {\n    \"alertname\": \"MinIOClusterTolerance\",\n    \"instance\": \"localhost:9000\",\n    \"job\": \"minio-job-node\",\n    \"pool\": \"0\",\n    \"server\": \"127.0.0.1:9000\",\n    \"set\": \"0\",\n    \"severity\": \"critical\"\n  },\n  \"commonAnnotations\": {\n    \"description\": \"MinIO instance 127.0.0.1:9000 of job minio-job has lost quorum on pool 0 on set 0 for more than 5 minutes.\",\n    \"summary\": \"Instance 127.0.0.1:9000 has lot quorum on pool 0 on set 0\"\n  },\n  \"externalURL\": \"http://fedora-minio:9093\",\n  \"version\": \"4\",\n  \"groupKey\": \"{}:{alertname=\\\"MinIOClusterTolerance\\\"}\",\n  \"truncatedAlerts\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a Test File to Trigger a MinIO Event\nDESCRIPTION: Command to upload a JPEG file to MinIO to test the event notification system. This will trigger an event that should be published to Kafka.\n\nLANGUAGE: bash\nCODE:\n```\nmc cp myphoto.jpg myminio/images\n```\n\n----------------------------------------\n\nTITLE: Starting Spark Shell with YARN\nDESCRIPTION: Command to launch the Spark shell in YARN client mode with specific memory allocations. This prepares the interactive environment for running the WordCount example.\n\nLANGUAGE: bash\nCODE:\n```\n./bin/spark-shell --master yarn-client --driver-memory 512m --executor-memory 512m\n```\n\n----------------------------------------\n\nTITLE: Getting Current Webhook Configuration in MinIO\nDESCRIPTION: Shows how to retrieve the current webhook notification configuration using MinIO Client (mc). This command displays all configured webhook parameters for a MinIO instance.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config get myminio/ notify_webhook\nnotify_webhook:1 endpoint=\"\" auth_token=\"\" queue_limit=\"0\" queue_dir=\"\" client_cert=\"\" client_key=\"\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Environment Variable Equivalents for ETCD Configuration\nDESCRIPTION: Command to get environment variable equivalents for ETCD configuration arguments in MinIO, useful for containerized deployments or script-based configuration.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set play/ etcd --env\n```\n\n----------------------------------------\n\nTITLE: Querying Base Metrics Endpoint in MinIO\nDESCRIPTION: The base endpoint for accessing metrics in MinIO version 3. All specific metric types are accessed by appending appropriate paths to this base URL.\n\nLANGUAGE: plaintext\nCODE:\n```\n/minio/metrics/v3\n```\n\n----------------------------------------\n\nTITLE: Viewing Compression Configuration Help in MinIO\nDESCRIPTION: Command to display help information about setting compression configuration values in MinIO server.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio compression\n```\n\n----------------------------------------\n\nTITLE: Starting a Batch Job in MinIO\nDESCRIPTION: Example showing how to start a batch job by submitting a YAML file to MinIO using the 'mc batch start' command. The output includes the job ID and start timestamp.\n\nLANGUAGE: bash\nCODE:\n```\nmc batch start alias/ ./replicate.yaml\nSuccessfully start 'replicate' job `E24HH4nNMcgY5taynaPfxu` on '2022-09-26 17:19:06.296974771 -0700 PDT'\n```\n\n----------------------------------------\n\nTITLE: Expected Response from Event List Command\nDESCRIPTION: Shows the expected output when listing event notifications for a bucket. The response indicates that notifications for object creation events with .jpg suffix are configured with the webhook ARN.\n\nLANGUAGE: plaintext\nCODE:\n```\narn:minio:sqs::1:webhook   s3:ObjectCreated:*   Filter: suffix=\".jpg\"\n```\n\n----------------------------------------\n\nTITLE: Migrating MySQL Configuration After MinIO Upgrade\nDESCRIPTION: Command to update MySQL notification configuration after upgrading MinIO to a version after RELEASE.2020-04-10T03-34-42Z, which requires using the dsn_string parameter.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin config set myminio/ notify_mysql[:name] dsn_string=\"mysqluser:mysqlpass@tcp(localhost:2832)/bucketevents\"\n```\n\n----------------------------------------\n\nTITLE: Uploading a Test File to Trigger MinIO Event Notification\nDESCRIPTION: Command to upload a JPEG image to the MinIO bucket which will trigger the configured event notification. The event will be sent to RabbitMQ and consumed by the Python script.\n\nLANGUAGE: sh\nCODE:\n```\nmc cp myphoto.jpg myminio/images\n```\n\n----------------------------------------\n\nTITLE: Using AWS CLI to Call AssumeRole on MinIO\nDESCRIPTION: AWS CLI command to call the AssumeRole API on MinIO with a custom policy, showing the returned temporary credentials from the response.\n\nLANGUAGE: bash\nCODE:\n```\n$ aws --profile foobar --endpoint-url http://localhost:9000 sts assume-role --policy '{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"Stmt1\",\"Effect\":\"Allow\",\"Action\":\"s3:*\",\"Resource\":\"arn:aws:s3:::*\"}]}' --role-arn arn:xxx:xxx:xxx:xxxx --role-session-name anything\n{\n    \"AssumedRoleUser\": {\n        \"Arn\": \"\"\n    },\n    \"Credentials\": {\n        \"SecretAccessKey\": \"xbnWUoNKgFxi+uv3RI9UgqP3tULQMdI+Hj+4psd4\",\n        \"SessionToken\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJLOURUSU1VVlpYRVhKTDNBVFVPWSIsImV4cCI6MzYwMDAwMDAwMDAwMCwicG9saWN5IjoidGVzdCJ9.PetK5wWUcnCJkMYv6TEs7HqlA4x_vViykQ8b2T_6hapFGJTO34sfTwqBnHF6lAiWxRoZXco11B0R7y58WAsrQw\",\n        \"Expiration\": \"2019-02-20T19:56:59-08:00\",\n        \"AccessKeyId\": \"K9DTIMUVZXEXJL3ATUOY\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conflicting Object Key Patterns in MinIO\nDESCRIPTION: This example illustrates conflicting object key patterns that are not supported in MinIO. The first pattern shows attempting to create a file within a directory that later becomes a file itself, while the second shows the reverse scenario.\n\nLANGUAGE: bash\nCODE:\n```\nPUT <bucketname>/a/b/1.txt\nPUT <bucketname>/a/b\n```\n\n----------------------------------------\n\nTITLE: Service Account Creation Loop for Configured Accounts\nDESCRIPTION: Iterates through the configured service accounts, creates temporary credential files with proper access and secret keys, and calls the createSvcacct function to create each account. Supports both inline and external secret keys.\n\nLANGUAGE: shell\nCODE:\n```\n{{ if .Values.svcaccts }}\n{{ $global := . }}\n# Create the svcaccts\n{{- range $idx, $svc := .Values.svcaccts }}\necho {{ tpl .accessKey $global }} > $MINIO_ACCESSKEY_SECRETKEY_TMP\n{{- if .existingSecret }}\ncat /config/secrets-svc/{{ tpl .existingSecret $global }}/{{ tpl .existingSecretKey $global }} >> $MINIO_ACCESSKEY_SECRETKEY_TMP\n# Add a new line if it doesn't exist\necho >> $MINIO_ACCESSKEY_SECRETKEY_TMP\n{{ else }}\necho {{ .secretKey }} >> $MINIO_ACCESSKEY_SECRETKEY_TMP\n{{- end }}\n{{- if $svc.policy}}\ncreateSvcacct {{ .user }} svc_policy_{{ $idx }}\n{{ else }}\ncreateSvcacct {{ .user }}\n{{- end }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: XML Response from MinIO AssumeRole API\nDESCRIPTION: Sample XML response from the MinIO AssumeRole API, which includes the temporary credentials (AccessKeyId, SecretAccessKey, and SessionToken) as well as expiration information.\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AssumeRoleResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\">\n  <AssumeRoleResult>\n    <AssumedRoleUser>\n      <Arn/>\n      <AssumeRoleId/>\n    </AssumedRoleUser>\n    <Credentials>\n      <AccessKeyId>Y4RJU1RNFGK48LGO9I2S</AccessKeyId>\n      <SecretAccessKey>sYLRKS1Z7hSjluf6gEbb9066hnx315wHTiACPAjg</SecretAccessKey>\n      <Expiration>2019-08-08T20:26:12Z</Expiration>\n      <SessionToken>eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJZNFJKVTFSTkZHSzQ4TEdPOUkyUyIsImF1ZCI6IlBvRWdYUDZ1Vk80NUlzRU5SbmdEWGo1QXU1WWEiLCJhenAiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiZXhwIjoxNTQxODExMDcxLCJpYXQiOjE1NDE4MDc0NzEsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvb2F1dGgyL3Rva2VuIiwianRpIjoiYTBiMjc2MjktZWUxYS00M2JmLTg3MzktZjMzNzRhNGNkYmMwIn0.ewHqKVFTaP-j_kgZrcOEKroNUjk10GEp8bqQjxBbYVovV0nHO985VnRESFbcT6XMDDKHZiWqN2vi_ETX_u3Q-w</SessionToken>\n    </Credentials>\n  </AssumeRoleResult>\n  <ResponseMetadata>\n    <RequestId>c6104cbe-af31-11e0-8154-cbc7ccf896c7</RequestId>\n  </ResponseMetadata>\n</AssumeRoleResponse>\n```\n\n----------------------------------------\n\nTITLE: Authenticated Prometheus Configuration for Bucket Metrics\nDESCRIPTION: YAML configuration for Prometheus to scrape MinIO bucket metrics with authentication using bearer token.\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: minio-job-bucket\n  bearer_token: <secret>\n  metrics_path: /minio/v2/metrics/bucket\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: IP Address Restricted Access Policy in JSON\nDESCRIPTION: A policy that restricts S3 bucket listing operations to requests coming from a specific IP address range (203.0.113.0/24).\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n\t\"Effect\": \"Allow\",\n\t\"Action\": \"s3:ListBucket*\",\n\t\"Resource\": \"arn:aws:s3:::mybucket\",\n\t\"Condition\": {\"IpAddress\": {\"aws:SourceIp\": \"203.0.113.0/24\"}}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NATS Client Output with Event Notification\nDESCRIPTION: Terminal output showing the NATS client receiving and displaying a MinIO bucket event notification in JSON format after uploading a file.\n\nLANGUAGE: bash\nCODE:\n```\ngo run nats.go\n2016/10/12 06:51:26 Connected\n2016/10/12 06:51:26 Subscribing to subject 'bucketevents'\n2016/10/12 06:51:33 Received message '{\"EventType\":\"s3:ObjectCreated:Put\",\"Key\":\"images/myphoto.jpg\",\"Records\":[{\"eventVersion\":\"2.0\",\"eventSource\":\"aws:s3\",\"awsRegion\":\"\",\"eventTime\":\"2016-10-12T13:51:33Z\",\"eventName\":\"s3:ObjectCreated:Put\",\"userIdentity\":{\"principalId\":\"minio\"},\"requestParameters\":{\"sourceIPAddress\":\"[::1]:57106\"},\"responseElements\":{},\"s3\":{\"s3SchemaVersion\":\"1.0\",\"configurationId\":\"Config\",\"bucket\":{\"name\":\"images\",\"ownerIdentity\":{\"principalId\":\"minio\"},\"arn\":\"arn:aws:s3:::images\"},\"object\":{\"key\":\"myphoto.jpg\",\"size\":56060,\"eTag\":\"1d97bf45ecb37f7a7b699418070df08f\",\"sequencer\":\"147CCD1AE054BFD0\"}}}],\"level\":\"info\",\"msg\":\"\",\"time\":\"2016-10-12T06:51:33-07:00\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Elasticsearch configuration in MinIO\nDESCRIPTION: Command to set the Elasticsearch notification configuration in MinIO using the MinIO Client (mc) tool. This example configures MinIO to send notifications to a local Elasticsearch instance.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin config set myminio notify_elasticsearch:1 queue_limit=\"0\"  url=\"http://127.0.0.1:9200\" format=\"namespace\" index=\"minio_events\" queue_dir=\"\" username=\"\" password=\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Spark Client Directory in Bash\nDESCRIPTION: Commands to navigate to the Spark client directory and switch to the spark user. This is a prerequisite for running Spark applications.\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/hdp/current/spark2-client\nsu spark\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Transition Tier with AWS Role in MinIO\nDESCRIPTION: This command creates a transition tier for moving objects to S3 using AWS IAM role attached to the EC2 instance instead of explicit credentials.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin tier add s3 source S3TIER --bucket s3bucket --prefix testprefix/ --use-aws-role\n```\n\n----------------------------------------\n\nTITLE: MinIO with Distributed Single-Disk Configuration\nDESCRIPTION: Command example for running MinIO with a single disk per host across multiple hosts, creating a distributed erasure coded configuration.\n\nLANGUAGE: bash\nCODE:\n```\nminio server http://host{1...32}/disk1\n```\n\n----------------------------------------\n\nTITLE: Extracting MapReduce Configuration Settings from Hadoop\nDESCRIPTION: Command to extract MapReduce-related configuration parameters from Hadoop's core-site.xml using the kv-pairify alias. Shows how to filter for specific MapReduce settings.\n\nLANGUAGE: bash\nCODE:\n```\ncat ${HADOOP_CONF_DIR}/core-site.xml | kv-pairify | grep \"mapred\"\n```\n\n----------------------------------------\n\nTITLE: ETCD Environment Variables Output in MinIO\nDESCRIPTION: Output showing the environment variable equivalents for ETCD configuration in MinIO, including variable names, types, and descriptions for all available options.\n\nLANGUAGE: text\nCODE:\n```\n~ mc admin config set play/ etcd --env\nKEY:\netcd  federate multiple clusters for IAM and Bucket DNS\n\nARGS:\nMINIO_ETCD_ENDPOINTS*       (csv)       comma separated list of etcd endpoints e.g. \"http://localhost:2379\"\nMINIO_ETCD_PATH_PREFIX      (path)      namespace prefix to isolate tenants e.g. \"customer1/\"\nMINIO_ETCD_COREDNS_PATH     (path)      shared bucket DNS records, default is \"/skydns\"\nMINIO_ETCD_CLIENT_CERT      (path)      client cert for mTLS authentication\nMINIO_ETCD_CLIENT_CERT_KEY  (path)      client cert key for mTLS authentication\nMINIO_ETCD_COMMENT          (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Setting Object Lock on Individual Objects in MinIO using AWS CLI\nDESCRIPTION: Command to set object lock in GOVERNANCE mode with a specific retention date on an individual object. This overrides any bucket-level object lock configuration for the specific object.\n\nLANGUAGE: sh\nCODE:\n```\naws s3api put-object --bucket testbucket --key lockme --object-lock-mode GOVERNANCE --object-lock-retain-until-date \"2019-11-20\"  --body /etc/issue\n```\n\n----------------------------------------\n\nTITLE: Setting Object Lock on Individual Objects in MinIO using AWS CLI\nDESCRIPTION: Command to set object lock in GOVERNANCE mode with a specific retention date on an individual object. This overrides any bucket-level object lock configuration for the specific object.\n\nLANGUAGE: sh\nCODE:\n```\naws s3api put-object --bucket testbucket --key lockme --object-lock-mode GOVERNANCE --object-lock-retain-until-date \"2019-11-20\"  --body /etc/issue\n```\n\n----------------------------------------\n\nTITLE: Public Prometheus Configuration for Resource Metrics\nDESCRIPTION: Optional YAML configuration for Prometheus to scrape MinIO resource metrics without authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: minio-job\n  metrics_path: /minio/v2/metrics/resource\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: Getting current Elasticsearch configuration in MinIO\nDESCRIPTION: Command to retrieve the current Elasticsearch notification configuration in MinIO using the MinIO Client (mc) tool.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config get myminio/ notify_elasticsearch\nnotify_elasticsearch:1 queue_limit=\"0\"  url=\"\" format=\"namespace\" index=\"\" queue_dir=\"\"\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Replica Metadata Modification Syncing\nDESCRIPTION: Command to edit an existing replication rule to re-enable replica metadata modification syncing along with delete and delete-marker replication.\n\nLANGUAGE: bash\nCODE:\n```\nmc replicate edit alias/bucket --id xyz.id --replicate \"delete,delete-marker,replica-metadata-sync\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response After Successful Authentication\nDESCRIPTION: Example of the JSON response returned after successful authentication through Dex. Contains a list of accessible buckets and temporary credentials including access key, secret key, and session token.\n\nLANGUAGE: json\nCODE:\n```\n{\n \"buckets\": [\n  \"dl.minio.equipment\",\n  \"dl.minio.service-fulfillment\",\n  \"testbucket\"\n ],\n \"credentials\": {\n  \"AccessKeyID\": \"Q31CVS1PSCJ4OTK2YVEM\",\n  \"SecretAccessKey\": \"rmDEOKARqKYmEyjWGhmhLpzcncyu7Jf8aZ9bjDic\",\n  \"SessionToken\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJRMzFDVlMxUFNDSjRPVEsyWVZFTSIsImF0X2hhc2giOiI4amItZFE2OXRtZEVueUZaMUttNWhnIiwiYXVkIjoiZXhhbXBsZS1hcHAiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV4cCI6IjE1OTQ2MDAxODIiLCJpYXQiOjE1OTQ1ODkzODQsImlzcyI6Imh0dHA6Ly8xMjcuMC4wLjE6NTU1Ni9kZXgiLCJuYW1lIjoiYWRtaW4iLCJzdWIiOiJDaVF3T0dFNE5qZzBZaTFrWWpnNExUUmlOek10T1RCaE9TMHpZMlF4TmpZeFpqVTBOallTQld4dlkyRnMifQ.nrbzIJz99Om7TvJ04jnSTmhvlM7aR9hMM1Aqjp2ONJ1UKYCvegBLrTu6cYR968_OpmnAGJ8vkd7sIjUjtR4zbw\",\n  \"SignerType\": 1\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current MySQL Configuration in MinIO\nDESCRIPTION: Command to get the current MySQL notification configuration using the MinIO client (mc). Shows the output with all configuration parameters.\n\nLANGUAGE: bash\nCODE:\n```\n$ mc admin config get myminio/ notify_mysql\nnotify_mysql:myinstance enable=off format=namespace host= port= username= password= database= dsn_string= table= queue_dir= queue_limit=0\n```\n\n----------------------------------------\n\nTITLE: Getting Compression Configuration in MinIO\nDESCRIPTION: Command to view the current compression configuration settings in a MinIO server instance using the MinIO Client (mc).\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config get myminio compression\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Notification Environment Variables in MinIO\nDESCRIPTION: Environment variable options for configuring Kafka event notifications in MinIO. These variables provide an alternative way to set up the Kafka integration without using configuration files.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_kafka[:name]  publish bucket notifications to Kafka endpoints\n\nARGS:\nMINIO_NOTIFY_KAFKA_ENABLE*                     (on|off)                    enable notify_kafka target, default is 'off'\nMINIO_NOTIFY_KAFKA_BROKERS*                    (csv)                       comma separated list of Kafka broker addresses\nMINIO_NOTIFY_KAFKA_TOPIC                       (string)                    Kafka topic used for bucket notifications\nMINIO_NOTIFY_KAFKA_SASL_USERNAME               (string)                    username for SASL/PLAIN or SASL/SCRAM authentication\nMINIO_NOTIFY_KAFKA_SASL_PASSWORD               (string)                    password for SASL/PLAIN or SASL/SCRAM authentication\nMINIO_NOTIFY_KAFKA_SASL_MECHANISM              (plain*|sha256|sha512)      sasl authentication mechanism, default 'plain'\nMINIO_NOTIFY_KAFKA_TLS_CLIENT_AUTH             (string)                    clientAuth determines the Kafka server's policy for TLS client auth\nMINIO_NOTIFY_KAFKA_SASL                        (on|off)                    set to 'on' to enable SASL authentication\nMINIO_NOTIFY_KAFKA_TLS                         (on|off)                    set to 'on' to enable TLS\nMINIO_NOTIFY_KAFKA_TLS_SKIP_VERIFY             (on|off)                    trust server TLS without verification, defaults to \"on\" (verify)\nMINIO_NOTIFY_KAFKA_CLIENT_TLS_CERT             (path)                      path to client certificate for mTLS auth\nMINIO_NOTIFY_KAFKA_CLIENT_TLS_KEY              (path)                      path to client key for mTLS auth\nMINIO_NOTIFY_KAFKA_QUEUE_DIR                   (path)                      staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_KAFKA_QUEUE_LIMIT                 (number)                    maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_KAFKA_COMMENT                     (sentence)                  optionally add a comment to this setting\nMINIO_NOTIFY_KAFKA_VERSION                     (string)                    specify the version of the Kafka cluster e.g. '2.2.0'\nMINIO_NOTIFY_KAFKA_PRODUCER_COMPRESSION_CODEC  (none|snappy|gzip|lz4|zstd) compression codec for producer messages\nMINIO_NOTIFY_KAFKA_PRODUCER_COMPRESSION_LEVEL  (number)                    compression level for producer messages, defaults to '0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Notification Environment Variables in MinIO\nDESCRIPTION: Environment variable options for configuring Kafka event notifications in MinIO. These variables provide an alternative way to set up the Kafka integration without using configuration files.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_kafka[:name]  publish bucket notifications to Kafka endpoints\n\nARGS:\nMINIO_NOTIFY_KAFKA_ENABLE*                     (on|off)                    enable notify_kafka target, default is 'off'\nMINIO_NOTIFY_KAFKA_BROKERS*                    (csv)                       comma separated list of Kafka broker addresses\nMINIO_NOTIFY_KAFKA_TOPIC                       (string)                    Kafka topic used for bucket notifications\nMINIO_NOTIFY_KAFKA_SASL_USERNAME               (string)                    username for SASL/PLAIN or SASL/SCRAM authentication\nMINIO_NOTIFY_KAFKA_SASL_PASSWORD               (string)                    password for SASL/PLAIN or SASL/SCRAM authentication\nMINIO_NOTIFY_KAFKA_SASL_MECHANISM              (plain*|sha256|sha512)      sasl authentication mechanism, default 'plain'\nMINIO_NOTIFY_KAFKA_TLS_CLIENT_AUTH             (string)                    clientAuth determines the Kafka server's policy for TLS client auth\nMINIO_NOTIFY_KAFKA_SASL                        (on|off)                    set to 'on' to enable SASL authentication\nMINIO_NOTIFY_KAFKA_TLS                         (on|off)                    set to 'on' to enable TLS\nMINIO_NOTIFY_KAFKA_TLS_SKIP_VERIFY             (on|off)                    trust server TLS without verification, defaults to \"on\" (verify)\nMINIO_NOTIFY_KAFKA_CLIENT_TLS_CERT             (path)                      path to client certificate for mTLS auth\nMINIO_NOTIFY_KAFKA_CLIENT_TLS_KEY              (path)                      path to client key for mTLS auth\nMINIO_NOTIFY_KAFKA_QUEUE_DIR                   (path)                      staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_KAFKA_QUEUE_LIMIT                 (number)                    maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_KAFKA_COMMENT                     (sentence)                  optionally add a comment to this setting\nMINIO_NOTIFY_KAFKA_VERSION                     (string)                    specify the version of the Kafka cluster e.g. '2.2.0'\nMINIO_NOTIFY_KAFKA_PRODUCER_COMPRESSION_CODEC  (none|snappy|gzip|lz4|zstd) compression codec for producer messages\nMINIO_NOTIFY_KAFKA_PRODUCER_COMPRESSION_LEVEL  (number)                    compression level for producer messages, defaults to '0'\n```\n\n----------------------------------------\n\nTITLE: Running Thumbnailer in Webhook Mode\nDESCRIPTION: Shows how to start the Thumbnailer application in webhook mode. This command runs the application to listen for MinIO notifications at http://localhost:3000.\n\nLANGUAGE: plaintext\nCODE:\n```\nNODE_ENV=webhook node thumbnail-webhook.js\n```\n\n----------------------------------------\n\nTITLE: Uploading an Image to Trigger MySQL Notification\nDESCRIPTION: Command to upload a JPEG image to the configured bucket, which will trigger a notification to be sent to MySQL.\n\nLANGUAGE: bash\nCODE:\n```\nmc cp myphoto.jpg myminio/images\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Unversioned Bucket Configuration in XML\nDESCRIPTION: XML configuration for a default unversioned bucket. By default, all buckets in MinIO are unversioned as shown in this configuration.\n\nLANGUAGE: xml\nCODE:\n```\n<VersioningConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n</VersioningConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch notifications via MinIO configuration\nDESCRIPTION: Configuration parameters for setting up Elasticsearch as a notification target in MinIO. This includes parameters for server URL, index name, format specification, queue settings, and authentication information.\n\nLANGUAGE: sh\nCODE:\n```\nKEY:\nnotify_elasticsearch[:name]  publish bucket notifications to Elasticsearch endpoints\n\nARGS:\nurl*         (url)                Elasticsearch server's address, with optional authentication info\nindex*       (string)             Elasticsearch index to store/update events, index is auto-created\nformat*      (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\nqueue_dir    (path)               staging dir for undelivered messages e.g. '/home/events'\nqueue_limit  (number)             maximum limit for undelivered messages, defaults to '100000'\nusername     (string)             username for Elasticsearch basic-auth\npassword     (string)             password for Elasticsearch basic-auth\ncomment      (sentence)           optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Liveness Probe for MinIO\nDESCRIPTION: YAML configuration for a Kubernetes liveness probe that checks the MinIO server health. It polls the /minio/health/live endpoint every 30 seconds with specific timing parameters to determine if the container needs to be restarted.\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /minio/health/live\n    port: 9000\n    scheme: HTTP\n  initialDelaySeconds: 120\n  periodSeconds: 30\n  timeoutSeconds: 10\n  successThreshold: 1\n  failureThreshold: 3\n```\n\n----------------------------------------\n\nTITLE: Sample Event Notification JSON from MinIO to Kafka\nDESCRIPTION: Example of the JSON payload that MinIO sends to Kafka when an object is created in a bucket. This event contains details about the object, user, and operation performed.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"EventName\": \"s3:ObjectCreated:Put\",\n    \"Key\": \"images/myphoto.jpg\",\n    \"Records\": [\n        {\n            \"eventVersion\": \"2.0\",\n            \"eventSource\": \"minio:s3\",\n            \"awsRegion\": \"\",\n            \"eventTime\": \"2019-09-10T17:41:54Z\",\n            \"eventName\": \"s3:ObjectCreated:Put\",\n            \"userIdentity\": {\n                \"principalId\": \"AKIAIOSFODNN7EXAMPLE\"\n            },\n            \"requestParameters\": {\n                \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n                \"region\": \"\",\n                \"sourceIPAddress\": \"192.168.56.192\"\n            },\n            \"responseElements\": {\n                \"x-amz-request-id\": \"15C3249451E12784\",\n                \"x-minio-deployment-id\": \"751a8ba6-acb2-42f6-a297-4cdf1cf1fa4f\",\n                \"x-minio-origin-endpoint\": \"http://192.168.97.83:9000\"\n            },\n            \"s3\": {\n                \"s3SchemaVersion\": \"1.0\",\n                \"configurationId\": \"Config\",\n                \"bucket\": {\n                    \"name\": \"images\",\n                    \"ownerIdentity\": {\n                        \"principalId\": \"AKIAIOSFODNN7EXAMPLE\"\n                    },\n                    \"arn\": \"arn:aws:s3:::images\"\n                },\n                \"object\": {\n                    \"key\": \"myphoto.jpg\",\n                    \"size\": 6474,\n                    \"eTag\": \"430f89010c77aa34fc8760696da62d08-1\",\n                    \"contentType\": \"image/jpeg\",\n                    \"userMetadata\": {\n                        \"content-type\": \"image/jpeg\"\n                    },\n                    \"versionId\": \"1\",\n                    \"sequencer\": \"15C32494527B46C5\"\n                }\n            },\n            \"source\": {\n                \"host\": \"192.168.56.192\",\n                \"port\": \"\",\n                \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Event Notification JSON from MinIO to Kafka\nDESCRIPTION: Example of the JSON payload that MinIO sends to Kafka when an object is created in a bucket. This event contains details about the object, user, and operation performed.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"EventName\": \"s3:ObjectCreated:Put\",\n    \"Key\": \"images/myphoto.jpg\",\n    \"Records\": [\n        {\n            \"eventVersion\": \"2.0\",\n            \"eventSource\": \"minio:s3\",\n            \"awsRegion\": \"\",\n            \"eventTime\": \"2019-09-10T17:41:54Z\",\n            \"eventName\": \"s3:ObjectCreated:Put\",\n            \"userIdentity\": {\n                \"principalId\": \"AKIAIOSFODNN7EXAMPLE\"\n            },\n            \"requestParameters\": {\n                \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n                \"region\": \"\",\n                \"sourceIPAddress\": \"192.168.56.192\"\n            },\n            \"responseElements\": {\n                \"x-amz-request-id\": \"15C3249451E12784\",\n                \"x-minio-deployment-id\": \"751a8ba6-acb2-42f6-a297-4cdf1cf1fa4f\",\n                \"x-minio-origin-endpoint\": \"http://192.168.97.83:9000\"\n            },\n            \"s3\": {\n                \"s3SchemaVersion\": \"1.0\",\n                \"configurationId\": \"Config\",\n                \"bucket\": {\n                    \"name\": \"images\",\n                    \"ownerIdentity\": {\n                        \"principalId\": \"AKIAIOSFODNN7EXAMPLE\"\n                    },\n                    \"arn\": \"arn:aws:s3:::images\"\n                },\n                \"object\": {\n                    \"key\": \"myphoto.jpg\",\n                    \"size\": 6474,\n                    \"eTag\": \"430f89010c77aa34fc8760696da62d08-1\",\n                    \"contentType\": \"image/jpeg\",\n                    \"userMetadata\": {\n                        \"content-type\": \"image/jpeg\"\n                    },\n                    \"versionId\": \"1\",\n                    \"sequencer\": \"15C32494527B46C5\"\n                }\n            },\n            \"source\": {\n                \"host\": \"192.168.56.192\",\n                \"port\": \"\",\n                \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Dynamic Configuration Subsystems in MinIO\nDESCRIPTION: List of MinIO subsystems that support dynamic configuration changes without requiring server restarts, including API, heal, and scanner subsystems.\n\nLANGUAGE: text\nCODE:\n```\napi                   manage global HTTP API call specific features, such as throttling, authentication types, etc.\nheal                  manage object healing frequency and bitrot verification checks\nscanner               manage namespace scanning for usage calculation, lifecycle, healing and more\n```\n\n----------------------------------------\n\nTITLE: Creating a Streaming Request with MinIO Grid in Go\nDESCRIPTION: Example of establishing a connection and creating a stream to a remote server. This demonstrates how to send initial payload data and continuously receive results from the remote handler.\n\nLANGUAGE: go\nCODE:\n```\n    // Get a connection to the remote host\n    conn := manager.Connection(host).Subroute(\"asubroute\")\n\t\n    payload := []byte(\"request\")\n    stream, err := conn.NewStream(ctx, grid.HandlerDiskInfo, payload)\n\tif err != nil {\n        return err\n    }\n    // Read results from the stream\n    err = stream.Results(func(result []byte) error {\n        fmt.Println(\"Got result\", string(result))\n\n        // Return the response for reuse\n        grid.PutByteBuffer(result)\n        return nil\n    })\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Attaching a Policy to an LDAP Group\nDESCRIPTION: Legacy command to attach a policy to an LDAP group that is now deprecated. This uses the admin policy command rather than the newer idp command.\n\nLANGUAGE: shell\nCODE:\n```\nmc admin policy attach myminio mypolicy --group='cn=projectx,ou=groups,ou=hwengg,dc=min,dc=io'\n```\n\n----------------------------------------\n\nTITLE: MinIO with Multi-Mount Multi-Controller Configuration\nDESCRIPTION: Command example for running MinIO with drives distributed across multiple mounts and controllers, showing complex nested ellipses notation.\n\nLANGUAGE: bash\nCODE:\n```\nminio server /mnt{1...4}/controller{1...4}/data{1...16}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Lambda Target with Auth Token\nDESCRIPTION: Command to start MinIO server with a lambda function target enabled and configured with an authorization token for secure communication.\n\nLANGUAGE: shell\nCODE:\n```\nMINIO_LAMBDA_WEBHOOK_ENABLE_function=on MINIO_LAMBDA_WEBHOOK_ENDPOINT_function=http://localhost:5000 MINIO_LAMBDA_WEBHOOK_AUTH_TOKEN=\"mytoken\" minio server /data &\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Transition Tier in MinIO\nDESCRIPTION: This command creates a transition tier for moving objects to Azure blob storage. It defines the connection parameters and target location for the tiered objects.\n\nLANGUAGE: sh\nCODE:\n```\n mc admin tier add azure source AZURETIER --endpoint https://blob.core.windows.net --access-key AZURE_ACCOUNT_NAME --secret-key AZURE_ACCOUNT_KEY  --bucket azurebucket --prefix testprefix1/\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Configuration for MinIO User\nDESCRIPTION: AWS CLI profile configuration for a MinIO user named 'foobar', specifying the region as us-east-1 and the access credentials.\n\nLANGUAGE: bash\nCODE:\n```\n[foobar]\nregion = us-east-1\naws_access_key_id = foobar\naws_secret_access_key = foo12345\n```\n\n----------------------------------------\n\nTITLE: Expanding Ellipses in MinIO Server Arguments\nDESCRIPTION: Example showing how MinIO expands ellipses in command arguments, demonstrating how the system distributes directories across multiple hosts to ensure maximum protection and availability.\n\nLANGUAGE: bash\nCODE:\n```\nminio server http://host{1...2}/export{1...8}\n```\n\n----------------------------------------\n\nTITLE: Testing NSQ Notifications with nsq_tail\nDESCRIPTION: Shows how to use the nsq_tail utility to monitor NSQ messages from MinIO. This command connects to NSQ at 127.0.0.1:4150 and listens for messages on the 'minio' topic.\n\nLANGUAGE: plaintext\nCODE:\n```\n./nsq_tail -nsqd-tcp-address 127.0.0.1:4150 -topic minio\n```\n\n----------------------------------------\n\nTITLE: Creating Trusted Certificates Secret with TLS Enabled\nDESCRIPTION: Creates a Kubernetes secret containing trusted certificates for MinIO to connect to other services securely. Includes MinIO's own certificate and third-party CA certificates.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n minio create secret generic minio-trusted-certs --from-file=public.crt --from-file=keycloak.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Request Limits Using Environment Variables\nDESCRIPTION: Sets the maximum number of concurrent S3 API requests allowed across a MinIO cluster using environment variables before starting the server. This example limits the cluster to 1600 simultaneous requests, which helps convert high concurrent I/O into sequential I/O for better performance on spinning disk drives.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_API_REQUESTS_MAX=1600\nexport MINIO_ROOT_USER=your-access-key\nexport MINIO_ROOT_PASSWORD=your-secret-key\nminio server http://server{1...8}/mnt/hdd{1...16}\n```\n\n----------------------------------------\n\nTITLE: Setting Scanner Delay in MinIO\nDESCRIPTION: Example command to slow down the scanner by increasing the delay multiplier, which reduces system resource usage while increasing update latency.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set alias/ scanner delay=30.0\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP POST Request for AssumeRoleWithLDAPIdentity\nDESCRIPTION: Example HTTP POST request for the AssumeRoleWithLDAPIdentity STS API action. This request authenticates with LDAP credentials and requests temporary security credentials valid for 7200 seconds (2 hours).\n\nLANGUAGE: shell\nCODE:\n```\nhttp://minio.cluster:9000?Action=AssumeRoleWithLDAPIdentity&LDAPUsername=foouser&LDAPPassword=foouserpassword&Version=2011-06-15&DurationSeconds=7200\n```\n\n----------------------------------------\n\nTITLE: Request JWT Token using Client Credentials Grant in WSO2\nDESCRIPTION: cURL command template to request a JWT token from WSO2 using the Client Credentials grant type. This example shows how to authenticate with client ID and secret to obtain a token.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u <CLIENT_ID>:<CLIENT_SECRET> -k -d \"grant_type=client_credentials\" -H \"Content-Type:application/x-www-form-urlencoded\" https://<IS_HOST>:<IS_HTTPS_PORT>/oauth2/token\n```\n\n----------------------------------------\n\nTITLE: Checking MinIO Cluster Health for Maintenance\nDESCRIPTION: cURL command example showing how to check if a MinIO node can be taken down for maintenance without losing high availability. The 412 response indicates taking down the node would cause loss of high availability.\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://minio1:9001/minio/health/cluster?maintenance=true\nHTTP/1.1 412 Precondition Failed\nAccept-Ranges: bytes\nContent-Length: 0\nServer: MinIO\nVary: Origin\nX-Amz-Bucket-Region: us-east-1\nX-Amz-Request-Id: 16239D63820C6E76\nX-Xss-Protection: 1; mode=block\nX-Minio-Write-Quorum: 3\nDate: Tue, 21 Jul 2020 00:35:43 GMT\n```\n\n----------------------------------------\n\nTITLE: Enabling MinIO performance profile\nDESCRIPTION: Activates the MinIO performance profile using the tuned-adm utility, which applies all the optimized system settings specified in the profile.\n\nLANGUAGE: bash\nCODE:\n```\nsudo tuned-adm profile minio\n```\n\n----------------------------------------\n\nTITLE: Getting Healing Configuration Help in MinIO\nDESCRIPTION: Command to view healing configuration options in MinIO, showing available parameters for controlling the object healing process and bitrot verification.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set alias/ heal\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with Pre-existing Secret\nDESCRIPTION: Installs MinIO using a previously created secret for authentication credentials instead of specifying them in the Helm command or values file.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set existingSecret=my-minio-secret minio/minio\n```\n\n----------------------------------------\n\nTITLE: NATS Streaming Client Output\nDESCRIPTION: Terminal output showing the NATS Streaming client connecting to the server and subscribing to the 'bucketevents' subject.\n\nLANGUAGE: bash\nCODE:\n```\ngo run nats.go\n2017/07/07 11:47:40 Connected\n2017/07/07 11:47:40 Subscribing to subject 'bucketevents'\n```\n\n----------------------------------------\n\nTITLE: Decrypting MinIO Inspection Files\nDESCRIPTION: Command to decrypt an encrypted MinIO inspection file using the inspection decryption tool and the provided key.\n\nLANGUAGE: sh\nCODE:\n```\ninspect -key=ad2b43d847fdb14e54c5836200177f7158b3f745433525f5d23c0e0208e50c9948540b54 inspect.ad2b43d8.enc\n```\n\n----------------------------------------\n\nTITLE: Importing Bucket Lifecycle Configuration with Expiration Rules in MinIO\nDESCRIPTION: This command imports a bucket lifecycle configuration that expires objects under 'old/' prefix on a specific date and objects under 'temp/' prefix after 7 days. It uses the MinIO Client (mc) to apply the configuration.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc ilm import play/testbucket <<EOF\n{\n    \"Rules\": [\n        {\n            \"Expiration\": {\n                \"Date\": \"2020-01-01T00:00:00.000Z\"\n            },\n            \"ID\": \"OldPictures\",\n            \"Filter\": {\n                \"Prefix\": \"old/\"\n            },\n            \"Status\": \"Enabled\"\n        },\n        {\n            \"Expiration\": {\n                \"Days\": 7\n            },\n            \"ID\": \"TempUploads\",\n            \"Filter\": {\n                \"Prefix\": \"temp/\"\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Generating Presigned URL with Lambda Function in Go\nDESCRIPTION: Go code example using the minio-go SDK to generate a presigned URL that includes a lambda function target. The presigned URL allows temporary access to retrieve and transform an object.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n\t\"fmt\"\n\n\t\"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n\nfunc main() {\n\ts3Client, err := minio.New(\"localhost:9000\", &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(\"minioadmin\", \"minioadmin\", \"\"),\n\t\tSecure: false,\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\t// Set lambda function target via `lambdaArn`\n\treqParams := make(url.Values)\n\treqParams.Set(\"lambdaArn\", \"arn:minio:s3-object-lambda::function:webhook\")\n\n\t// Generate presigned GET url with lambda function\n\tpresignedURL, err := s3Client.PresignedGetObject(context.Background(), \"functionbucket\", \"testobject\", time.Duration(1000)*time.Second, reqParams)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfmt.Println(presignedURL)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MinIO Cluster-Writeable Health Status\nDESCRIPTION: cURL command example showing a request to the cluster health endpoint that checks if the MinIO cluster has write quorum. The example shows a 503 response indicating the cluster does not currently have write quorum.\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://minio1:9001/minio/health/cluster\nHTTP/1.1 503 Service Unavailable\nAccept-Ranges: bytes\nContent-Length: 0\nServer: MinIO\nVary: Origin\nX-Amz-Bucket-Region: us-east-1\nX-Minio-Write-Quorum: 3\nX-Amz-Request-Id: 16239D6AB80EBECF\nX-Xss-Protection: 1; mode=block\nDate: Tue, 21 Jul 2020 00:36:14 GMT\n```\n\n----------------------------------------\n\nTITLE: NATS Client Output for MinIO Bucket Events\nDESCRIPTION: Terminal output showing the NATS client connecting to the server and subscribing to the 'bucketevents' subject.\n\nLANGUAGE: bash\nCODE:\n```\ngo run nats.go\n2016/10/12 06:39:18 Connected\n2016/10/12 06:39:18 Subscribing to subject 'bucketevents'\n```\n\n----------------------------------------\n\nTITLE: Running MinIO as a Regular User on Windows\nDESCRIPTION: This PowerShell command runs MinIO on Windows with Active Directory support, allowing it to run as a regular Windows user rather than the container's default user. It uses credential specification for authentication.\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --name minio1 \\\n  --security-opt \"credentialspec=file://myuser.json\"\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMIK7MDENGbPxRfiCYEXAMPLEKEY\" \\\n  -v D:\\data:/data \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing a MinIO Hotfix Container to Customer Registry\nDESCRIPTION: Command to build a hotfix Docker container and push it to a customer-specific registry. This allows for targeted distribution of hotfixes.\n\nLANGUAGE: bash\nCODE:\n```\nλ REPO=\"registry.min.dev/<customer>\" CRED_DIR=/media/builder/minio make docker-hotfix-push\n```\n\n----------------------------------------\n\nTITLE: Alternative Conflicting Object Key Pattern in MinIO\nDESCRIPTION: This example shows another unsupported conflicting object key pattern in MinIO where a key is first created as an object, then another object is attempted to be created as a child of the first object.\n\nLANGUAGE: bash\nCODE:\n```\nPUT <bucketname>/a/b\nPUT <bucketname>/a/b/1.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Encryption via Environment Variable\nDESCRIPTION: Environment variable setting that enables automatic encryption of all objects stored in MinIO when KMS is configured. This is an alternative to bucket-specific encryption configuration.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_KMS_AUTO_ENCRYPTION=on\n```\n\n----------------------------------------\n\nTITLE: Running Web Identity Authentication Client for MinIO\nDESCRIPTION: Example of running a Go-based client for web identity authentication with MinIO. This command starts a local web server that facilitates OAuth authentication flow with Keycloak for obtaining STS credentials for MinIO.\n\nLANGUAGE: bash\nCODE:\n```\n$ go run docs/sts/web-identity.go -cid account -csec 072e7f00-4289-469c-9ab2-bbe843c7f5a8  -config-ep \"http://localhost:8080/auth/realms/minio/.well-known/openid-configuration\" -port 8888\n2018/12/26 17:49:36 listening on http://localhost:8888/\n```\n\n----------------------------------------\n\nTITLE: Creating Admin Policy in MinIO\nDESCRIPTION: Uses the MinIO Client (mc) to create a policy named 'admin' with the permissions defined in the allaccess.json file.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin policy create admin allaccess.json\n```\n\n----------------------------------------\n\nTITLE: Checking if Service Account Exists Function\nDESCRIPTION: Implements a function to check if a MinIO service account exists by using the exit code of the 'mc admin user svcacct info' command.\n\nLANGUAGE: shell\nCODE:\n```\n# checkSvcacctExists ()\n# Check if the svcacct exists, by using the exit code of `mc admin user svcacct info`\ncheckSvcacctExists() {\n  CMD=$(${MC} admin user svcacct info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)\n  return $?\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Bucket Metrics in MinIO\nDESCRIPTION: Command to access bucket-level metrics from a MinIO deployment. The URL endpoint returns metrics for all buckets, with each metric containing a 'bucket' label to identify the corresponding bucket.\n\nLANGUAGE: shell\nCODE:\n```\nhttps://HOSTNAME:PORT/minio/v2/metrics/bucket\n```\n\n----------------------------------------\n\nTITLE: Creating OPA Policy for MinIO Authorization Control\nDESCRIPTION: This snippet creates a Rego policy file that implements authorization rules for MinIO. It allows full access to the root user while restricting PutObject operations for all other users.\n\nLANGUAGE: sh\nCODE:\n```\ncat > example.rego <<EOF\npackage httpapi.authz\n\nimport input\n\ndefault allow = false\n\n# Allow the root user to perform any action.\nallow {\n input.owner == true\n}\n\n# All other users may do anything other than call PutObject\nallow {\n input.action != \"s3:PutObject\"\n input.owner == false\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Expanded Path List from Ellipses Notation\nDESCRIPTION: The resulting expansion of ellipses notation showing how MinIO distributes directories across hosts in an alternating pattern to provide maximum protection and availability.\n\nLANGUAGE: text\nCODE:\n```\n> http://host1/export1\n> http://host2/export1\n> http://host1/export2\n> http://host2/export2\n> http://host1/export3\n> http://host2/export3\n> http://host1/export4\n> http://host2/export4\n> http://host1/export5\n> http://host2/export5\n> http://host1/export6\n> http://host2/export6\n> http://host1/export7\n> http://host2/export7\n> http://host1/export8\n> http://host2/export8\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Identity Settings in MinIO\nDESCRIPTION: This command displays all available LDAP configuration options for MinIO using the mc admin tool. It lists all the environment variables that can be used to configure LDAP integration.\n\nLANGUAGE: bash\nCODE:\n```\n$ mc admin config set myminio identity_ldap --env\nKEY:\nidentity_ldap  enable LDAP SSO support\n\nARGS:\nMINIO_IDENTITY_LDAP_SERVER_ADDR*            (address)   AD/LDAP server address e.g. \"myldap.com\" or \"myldapserver.com:636\"\nMINIO_IDENTITY_LDAP_SRV_RECORD_NAME         (string)    DNS SRV record name for LDAP service, if given, must be one of \"ldap\", \"ldaps\" or \"on\"\nMINIO_IDENTITY_LDAP_LOOKUP_BIND_DN          (string)    DN for LDAP read-only service account used to perform DN and group lookups\nMINIO_IDENTITY_LDAP_LOOKUP_BIND_PASSWORD    (string)    Password for LDAP read-only service account used to perform DN and group lookups\nMINIO_IDENTITY_LDAP_USER_DN_SEARCH_BASE_DN  (list)      \";\" separated list of user search base DNs e.g. \"dc=myldapserver,dc=com\"\nMINIO_IDENTITY_LDAP_USER_DN_SEARCH_FILTER   (string)    Search filter to lookup user DN\nMINIO_IDENTITY_LDAP_USER_DN_ATTRIBUTES      (list)      \",\" separated list of user DN attributes e.g. \"uid,cn,mail,sshPublicKey\"\nMINIO_IDENTITY_LDAP_GROUP_SEARCH_FILTER     (string)    search filter for groups e.g. \"(&(objectclass=groupOfNames)(memberUid=%s))\"\nMINIO_IDENTITY_LDAP_GROUP_SEARCH_BASE_DN    (list)      \";\" separated list of group search base DNs e.g. \"dc=myldapserver,dc=com\"\nMINIO_IDENTITY_LDAP_TLS_SKIP_VERIFY         (on|off)    trust server TLS without verification (default: 'off')\nMINIO_IDENTITY_LDAP_SERVER_INSECURE         (on|off)    allow plain text connection to AD/LDAP server (default: 'off')\nMINIO_IDENTITY_LDAP_SERVER_STARTTLS         (on|off)    use StartTLS connection to AD/LDAP server (default: 'off')\nMINIO_IDENTITY_LDAP_COMMENT                 (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: NATS Streaming Client Output with Event Notification\nDESCRIPTION: Terminal output showing the NATS Streaming client receiving and displaying a MinIO bucket event notification in JSON format after uploading a file.\n\nLANGUAGE: bash\nCODE:\n```\nReceived a message: {\"EventType\":\"s3:ObjectCreated:Put\",\"Key\":\"images/myphoto.jpg\",\"Records\":[{\"eventVersion\":\"2.0\",\"eventSource\":\"minio:s3\",\"awsRegion\":\"\",\"eventTime\":\"2017-07-07T18:46:37Z\",\"eventName\":\"s3:ObjectCreated:Put\",\"userIdentity\":{\"principalId\":\"minio\"},\"requestParameters\":{\"sourceIPAddress\":\"192.168.1.80:55328\"},\"responseElements\":{\"x-amz-request-id\":\"14CF20BD1EFD5B93\",\"x-minio-origin-endpoint\":\"http://127.0.0.1:9000\"},\"s3\":{\"s3SchemaVersion\":\"1.0\",\"configurationId\":\"Config\",\"bucket\":{\"name\":\"images\",\"ownerIdentity\":{\"principalId\":\"minio\"},\"arn\":\"arn:aws:s3:::images\"},\"object\":{\"key\":\"myphoto.jpg\",\"size\":248682,\"eTag\":\"f1671feacb8bbf7b0397c6e9364e8c92\",\"contentType\":\"image/jpeg\",\"userDefined\":{\"content-type\":\"image/jpeg\"},\"versionId\":\"1\",\"sequencer\":\"14CF20BD1EFD5B93\"}},\"source\":{\"host\":\"192.168.1.80\",\"port\":\"55328\",\"userAgent\":\"MinIO (linux; amd64) minio-go/2.0.4 mc/DEVELOPMENT.GOGET\"}}],\"level\":\"info\",\"msg\":\"\",\"time\":\"2017-07-07T11:46:37-07:00\"}\n```\n\n----------------------------------------\n\nTITLE: Running the Audit Log Echo Tool in Go\nDESCRIPTION: Command to run the auditlog-echo.go application that displays MinIO audit logs on the console. The tool listens on port 8080 by default, but this can be configured using the -port flag.\n\nLANGUAGE: shell\nCODE:\n```\ngo run docs/auditlog/auditlog-echo.go\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server for Debugging\nDESCRIPTION: Command to start a MinIO server pointing to a data directory for debugging purposes.\n\nLANGUAGE: sh\nCODE:\n```\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Object Replication Metadata Structure on Source\nDESCRIPTION: JSON metadata structure showing the internal format of replication status and timestamp in xl.meta for an object on the source cluster. The metadata includes replication status for multiple targets and replication timestamp.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"MetaSys\": {\n      \"x-minio-internal-inline-data\": \"dHJ1ZQ==\",\n      \"x-minio-internal-replication-status\": \"YXJuOm1pbmlvOnJlcGxpY2F0aW9uOjo2YjdmYzFlMS0wNmU4LTQxMTUtYjYxNy00YTgzZGIyODhmNTM6YnVja2V0PUNPTVBMRVRFRDthcm46bWluaW86cmVwbGljYXRpb246OmI5MGYxZWEzLWMzYWQtNDEyMy1iYWE2LWZjMDZhYmEyMjA2MjpidWNrZXQ9Q09NUExFVEVEOw==\",\n      \"x-minio-internal-replication-timestamp\": \"MjAyMS0wOS0xN1QwMTo0MzozOC40MDQwMDA0ODNa\",\n      \"x-minio-internal-tier-free-versionID\": \"OWZlZjk5N2QtMjMzZi00N2U3LTlkZmMtNWYxNzc3NzdlZTM2\"\n    },\n    \"MetaUsr\": {\n      \"X-Amz-Replication-Status\": \"COMPLETED\",\n      \"content-type\": \"application/octet-stream\",\n      \"etag\": \"8315e643ed6a5d7c9962fc0a8ef9c11f\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Healing Configuration Help Output in MinIO\nDESCRIPTION: Output of the healing configuration help command showing parameters for bitrot scanning, maximum sleep duration, maximum IO requests, and drive workers to control healing operations.\n\nLANGUAGE: text\nCODE:\n```\n~ mc admin config set alias/ heal\nKEY:\nheal  manage object healing frequency and bitrot verification checks\n\nARGS:\nbitrotscan     (on|off)    perform bitrot scan on drives when checking objects during scanner\nmax_sleep      (duration)  maximum sleep duration between objects to slow down heal operation. eg. 2s\nmax_io         (int)       maximum IO requests allowed between objects to slow down heal operation. eg. 3\ndrive_workers  (int)       the number of workers per drive to heal a new disk replacement.\n```\n\n----------------------------------------\n\nTITLE: Configuring and Starting MinIO with OPA Integration\nDESCRIPTION: This snippet configures environment variables to integrate MinIO with OPA for authorization decisions. It sets the OPA policy endpoint URL and MinIO credentials before starting the server.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_POLICY_PLUGIN_URL=http://localhost:8181/v1/data/httpapi/authz/allow\nexport MINIO_CI_CD=1\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nminio server /mnt/data\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP POST Request for AssumeRoleWithClientGrants in MinIO\nDESCRIPTION: An example HTTP POST request to the MinIO STS API for assuming a role with client grants. The request includes parameters like DurationSeconds, Token, and Version.\n\nLANGUAGE: http\nCODE:\n```\nhttp://minio.cluster:9000?Action=AssumeRoleWithClientGrants&DurationSeconds=3600&Token=eyJ4NXQiOiJOVEF4Wm1NeE5ETXlaRGczTVRVMVpHTTBNekV6T0RKaFpXSTRORE5sWkRVMU9HRmtOakZpTVEiLCJraWQiOiJOVEF4Wm1NeE5ETXlaRGczTVRVMVpHTTBNekV6T0RKaFpXSTRORE5sWkRVMU9HRmtOakZpTVEiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiYXpwIjoiUG9FZ1hQNnVWTzQ1SXNFTlJuZ0RYajVBdTVZYSIsImlzcyI6Imh0dHBzOlwvXC9sb2NhbGhvc3Q6OTQ0M1wvb2F1dGgyXC90b2tlbiIsImV4cCI6MTU0MTgwOTU4MiwiaWF0IjoxNTQxODA1OTgyLCJqdGkiOiI2Y2YyMGIwZS1lNGZmLTQzZmQtYTdiYS1kYTc3YTE3YzM2MzYifQ.Jm29jPliRvrK6Os34nSK3rhzIYLFjE__zdVGNng3uGKXGKzP3We_i6NPnhA0szJXMOKglXzUF1UgSz8MctbaxFS8XDusQPVe4LkB_45hwBm6TmBxzui911nt-1RbBLN_jZIlvl2lPrbTUH5hSn9kEkph6seWanTNQpz9tNEoVa6R_OX3kpJqxe8tLQUWw453A1JTwFNhdHa6-f1K8_Q_eEZ_4gOYINQ9t_fhTibdbkXZkJQFLop-Jwoybi9s4nwQU_dATocgcufq5eCeNItQeleT-23lGxIz0X7CiJrJynYLdd-ER0F77SumqEb5iCxhxuf4H7dovwd1kAmyKzLxpw&Version=2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL for MinIO Notification Data\nDESCRIPTION: SQL query to view the notification data stored in the MySQL table after an image upload. Shows the connection command and query result with the JSON event data structure.\n\nLANGUAGE: sql\nCODE:\n```\n$ mysql -h 172.17.0.1 -P 3306 -u root -p miniodb\nmysql> select * from minio_images;\nn| key_name           | value|\nn| images/myphoto.jpg | {\"Records\": [{\"s3\": {\"bucket\": {\"arn\": \"arn:aws:s3:::images\", \"name\": \"images\", \"ownerIdentity\": {\"principalId\": \"minio\"}}, \"object\": {\"key\": \"myphoto.jpg\", \"eTag\": \"467886be95c8ecfd71a2900e3f461b4f\", \"size\": 26, \"sequencer\": \"14AC59476F809FD3\"}, \"configurationId\": \"Config\", \"s3SchemaVersion\": \"1.0\"}, \"awsRegion\": \"\", \"eventName\": \"s3:ObjectCreated:Put\", \"eventTime\": \"2017-03-16T11:29:00Z\", \"eventSource\": \"aws:s3\", \"eventVersion\": \"2.0\", \"userIdentity\": {\"principalId\": \"minio\"}, \"responseElements\": {\"x-amz-request-id\": \"14AC59476F809FD3\", \"x-minio-origin-endpoint\": \"http://192.168.86.110:9000\"}, \"requestParameters\": {\"sourceIPAddress\": \"127.0.0.1:38260\"}}}]} |\nn1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Notification Settings in MinIO\nDESCRIPTION: Configuration settings for enabling Kafka event notifications in MinIO. These settings define the connection details, authentication methods, and queue parameters for Kafka integration.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_kafka[:name]  publish bucket notifications to Kafka endpoints\n\nARGS:\nbrokers*         (csv)       comma separated list of Kafka broker addresses\ntopic            (string)    Kafka topic used for bucket notifications\nsasl_username    (string)    username for SASL/PLAIN or SASL/SCRAM authentication\nsasl_password    (string)    password for SASL/PLAIN or SASL/SCRAM authentication\nsasl_mechanism   (string)    sasl authentication mechanism, default 'PLAIN'\ntls_client_auth  (string)    clientAuth determines the Kafka server's policy for TLS client auth\nsasl             (on|off)    set to 'on' to enable SASL authentication\ntls              (on|off)    set to 'on' to enable TLS\ntls_skip_verify  (on|off)    trust server TLS without verification, defaults to \"on\" (verify)\nclient_tls_cert  (path)      path to client certificate for mTLS auth\nclient_tls_key   (path)      path to client key for mTLS auth\nqueue_dir        (path)      staging dir for undelivered messages e.g. '/home/events'\nqueue_limit      (number)    maximum limit for undelivered messages, defaults to '100000'\nversion          (string)    specify the version of the Kafka cluster e.g '2.2.0'\ncomment          (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Consuming MinIO Audit Logs from Kafka Topic with kafkacat\nDESCRIPTION: Command for using kafkacat to consume and monitor audit logs sent by MinIO to a Kafka topic, showing the JSON format of the audit log data.\n\nLANGUAGE: bash\nCODE:\n```\nkafkacat -b localhost:29092 -t auditlog  -C\n\n{\"version\":\"1\",\"deploymentid\":\"90e81272-45d9-4fe8-9c45-c9a7322bf4b5\",\"time\":\"2024-05-09T07:38:10.449688982Z\",\"event\":\"\",\"trigger\":\"incoming\",\"api\":{\"name\":\"PutObject\",\"bucket\":\"testbucket\",\"object\":\"hosts\",\"status\":\"OK\",\"statusCode\":200,\"rx\":401,\"tx\":0,\"timeToResponse\":\"13309747ns\",\"timeToResponseInNS\":\"13309747\"},\"remotehost\":\"127.0.0.1\",\"requestID\":\"17CDC1F4D7E69123\",\"userAgent\":\"MinIO (linux; amd64) minio-go/v7.0.70 mc/RELEASE.2024-04-30T17-44-48Z\",\"requestPath\":\"/testbucket/hosts\",\"requestHost\":\"localhost:9000\",\"requestHeader\":{\"Accept-Encoding\":\"zstd,gzip\",\"Authorization\":\"AWS4-HMAC-SHA256 Credential=minioadmin/20240509/us-east-1/s3/aws4_request,SignedHeaders=host;x-amz-content-sha256;x-amz-date;x-amz-decoded-content-length,Signature=d4d6862e6cc61011a61fa801da71048ece4f32a0562cad6bb88bdda50d7fcb95\",\"Content-Length\":\"401\",\"Content-Type\":\"application/octet-stream\",\"User-Agent\":\"MinIO (linux; amd64) minio-go/v7.0.70 mc/RELEASE.2024-04-30T17-44-48Z\",\"X-Amz-Content-Sha256\":\"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\",\"X-Amz-Date\":\"20240509T073810Z\",\"X-Amz-Decoded-Content-Length\":\"228\"},\"responseHeader\":{\"Accept-Ranges\":\"bytes\",\"Content-Length\":\"0\",\"ETag\":\"9fe7a344ef4227d3e53751e9d88ce41e\",\"Server\":\"MinIO\",\"Strict-Transport-Security\":\"max-age=31536000; includeSubDomains\",\"Vary\":\"Origin,Accept-Encoding\",\"X-Amz-Id-2\":\"dd9025bab4ad464b049177c95eb6ebf374d3b3fd1af9251148b658df7ac2e3e8\",\"X-Amz-Request-Id\":\"17CDC1F4D7E69123\",\"X-Content-Type-Options\":\"nosniff\",\"X-Xss-Protection\":\"1; mode=block\"},\"tags\":{\"objectLocation\":{\"name\":\"hosts\",\"poolId\":1,\"setId\":1,\"drives\":[\"/mnt/data1\",\"/mnt/data2\",\"/mnt/data3\",\"/mnt/data4\"]}},\"accessKey\":\"minioadmin\"}\n```\n\n----------------------------------------\n\nTITLE: Versioned Delete Replication Metadata Structure\nDESCRIPTION: JSON metadata structure showing the internal format for versioned deletes with purge status, replication status, and timestamp information in xl.meta. This tracks replication status for permanent deletion of versioned objects.\n\nLANGUAGE: json\nCODE:\n```\n{ \n    \"DelObj\": {\n      \"ID\": \"u8H5pYQFRMKgkIgkpSKIkQ==\",\n      \"MTime\": 1631843124147668389,\n      \"MetaSys\": {\n        \"purgestatus\": \"YXJuOm1pbmlvOnJlcGxpY2F0aW9uOjpiOTBmMWVhMy1jM2FkLTQxMjMtYmFhNi1mYzA2YWJhMjIwNjI6YnVja2V0PUNPTVBMRVRFO2FybjptaW5pbzpyZXBsaWNhdGlvbjo6NmI3ZmMxZTEtMDZlOC00MTE1LWI2MTctNGE4M2RiMjg4ZjUzOmJ1Y2tldD1GQUlMRUQ7\",\n        \"x-minio-internal-replication-status\": \"YXJuOm1pbmlvOnJlcGxpY2F0aW9uOjpiOTBmMWVhMy1jM2FkLTQxMjMtYmFhNi1mYzA2YWJhMjIwNjI6YnVja2V0PTthcm46bWluaW86cmVwbGljYXRpb246OjZiN2ZjMWUxLTA2ZTgtNDExNS1iNjE3LTRhODNkYjI4OGY1MzpidWNrZXQ9Ow==\",\n        \"x-minio-internal-replication-timestamp\": \"U3VuLCAzMSBEZWMgMDAwMCAxOTowMzo1OCBHTVQ=\"\n      }\n    },\n    \"Type\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Private Key with GnuTLS for MinIO on Windows\nDESCRIPTION: Uses GnuTLS on Windows to generate a 3072-bit RSA private key for MinIO TLS configuration.\n\nLANGUAGE: sh\nCODE:\n```\ncerttool.exe --generate-privkey --outfile private.key\n```\n\n----------------------------------------\n\nTITLE: Temporarily Restoring a Transitioned Object with AWS CLI\nDESCRIPTION: This command temporarily restores an object that has been transitioned to a tier back to the source bucket for 3 days using the AWS S3 RestoreObject API.\n\nLANGUAGE: sh\nCODE:\n```\naws s3api restore-object --bucket srcbucket \\\n--key object \\\n--restore-request Days=3\n```\n\n----------------------------------------\n\nTITLE: Scanner Configuration Help Output in MinIO\nDESCRIPTION: Output of the scanner configuration help command showing parameters for delay multiplier, maximum wait time, and scan cycle duration to manage resource usage for namespace scanning.\n\nLANGUAGE: text\nCODE:\n```\n~ mc admin config set alias/ scanner\nKEY:\nscanner  manage namespace scanning for usage calculation, lifecycle, healing and more\n\nARGS:\ndelay     (float)     scanner delay multiplier, defaults to '10.0'\nmax_wait  (duration)  maximum wait time between operations, defaults to '15s'\ncycle     (duration)  time duration between scanner cycles\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with KMS Configuration\nDESCRIPTION: Commands to set admin credentials and start the MinIO server. When started with the previously set KMS environment variables, the server will be able to use the KMS for SSE-S3 encryption.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nminio server ~/export\n```\n\n----------------------------------------\n\nTITLE: Delete-Marker Resync Replication Metadata on Source\nDESCRIPTION: JSON metadata structure showing the resync tracking information for delete marker replication in xl.meta. Similar to object resync, this includes reset ARN with timestamp and UUID for tracking delete marker resync operations.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"MetaSys\": {\n    \"x-minio-internal-replication-reset-arn:minio:replication::af470089-d354-4473-934c-9e1f52f6da89:bucket\": \"TW9uLCAwNyBGZWIgMjAyMiAyMDowMzo0MCBHTVQ7ZGMxMWQzNDgtMTAwMS00ODA3LWFhNjEtOGY2MmFiNWQ5ZjU2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Help for Configuration Keys in MinIO\nDESCRIPTION: Command pattern to get help information about a specific configuration key in MinIO, showing how to query documentation for any configuration option.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio/ <key>\n```\n\n----------------------------------------\n\nTITLE: Running MinIO Server on Windows\nDESCRIPTION: Command to start a standalone MinIO server on Windows, specifying a drive path for data storage. This initializes the server with default credentials minioadmin:minioadmin.\n\nLANGUAGE: sh\nCODE:\n```\nminio.exe server D:\\\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client Command with Insecure Mode\nDESCRIPTION: Sets up the MinIO Client (mc) command with proper configuration path if provided in .Values.configPathmc, otherwise uses the default with insecure mode enabled.\n\nLANGUAGE: shell\nCODE:\n```\n{{- if .Values.configPathmc }}\nMC_CONFIG_DIR=\"{{ .Values.configPathmc }}\"\nMC=\"/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}\"\n{{- else }}\nMC=\"/usr/bin/mc --insecure\"\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Multiple Server Pools\nDESCRIPTION: Command example showing how to combine multiple server pools in a MinIO deployment, with different numbers of drives in each pool while maintaining the same data protection SLAs.\n\nLANGUAGE: bash\nCODE:\n```\nminio server http://host{1...32}/export{1...32} http://host{1...12}/export{1...12}\n```\n\n----------------------------------------\n\nTITLE: DeleteMarker Replication Metadata Structure\nDESCRIPTION: JSON metadata structure showing the internal format of a delete marker with replication status and timestamp information in xl.meta. This represents how MinIO tracks replication status for delete markers.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DelObj\": {\n      \"ID\": \"u8H5pYQFRMKgkIgkpSKIkQ==\",\n      \"MTime\": 1631843124147668389,\n      \"MetaSys\": {\n        \"x-minio-internal-replication-status\": \"YXJuOm1pbmlvOnJlcGxpY2F0aW9uOjpiOTBmMWVhMy1jM2FkLTQxMjMtYmFhNi1mYzA2YWJhMjIwNjI6YnVja2V0PUNPTVBMRVRFRDthcm46bWluaW86cmVwbGljYXRpb246OjZiN2ZjMWUxLTA2ZTgtNDExNS1iNjE3LTRhODNkYjI4OGY1MzpidWNrZXQ9Q09NUExFVEVEOw==\",\n        \"x-minio-internal-replication-timestamp\": \"U3VuLCAzMSBEZWMgMDAwMCAxOTowMzo1OCBHTVQ=\"\n      }\n    },\n    \"Type\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Extensions for Compression in MinIO\nDESCRIPTION: Command to configure MinIO to compress only PDF files by specifying the file extension and MIME type.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio compression extensions=\".pdf\" mime_types=\"application/pdf\"\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch to verify MinIO event notifications\nDESCRIPTION: Curl command to search the Elasticsearch index and view the event notification data that was sent from MinIO after uploading a file.\n\nLANGUAGE: sh\nCODE:\n```\n$ curl  \"http://localhost:9200/minio_events/_search?pretty=true\"\n{\n  \"took\" : 40,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 1,\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"minio_events\",\n        \"_type\" : \"event\",\n        \"_id\" : \"images/myphoto.jpg\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"Records\" : [\n            {\n              \"eventVersion\" : \"2.0\",\n              \"eventSource\" : \"minio:s3\",\n              \"awsRegion\" : \"\",\n              \"eventTime\" : \"2017-03-30T08:00:41Z\",\n              \"eventName\" : \"s3:ObjectCreated:Put\",\n              \"userIdentity\" : {\n                \"principalId\" : \"minio\"\n              },\n              \"requestParameters\" : {\n                \"sourceIPAddress\" : \"127.0.0.1:38062\"\n              },\n              \"responseElements\" : {\n                \"x-amz-request-id\" : \"14B09A09703FC47B\",\n                \"x-minio-origin-endpoint\" : \"http://192.168.86.115:9000\"\n              },\n              \"s3\" : {\n                \"s3SchemaVersion\" : \"1.0\",\n                \"configurationId\" : \"Config\",\n                \"bucket\" : {\n                  \"name\" : \"images\",\n                  \"ownerIdentity\" : {\n                    \"principalId\" : \"minio\"\n                  },\n                  \"arn\" : \"arn:aws:s3:::images\"\n                },\n                \"object\" : {\n                  \"key\" : \"myphoto.jpg\",\n                  \"size\" : 6474,\n                  \"eTag\" : \"a3410f4f8788b510d6f19c5067e60a90\",\n                  \"sequencer\" : \"14B09A09703FC47B\"\n                }\n              },\n              \"source\" : {\n                \"host\" : \"127.0.0.1\",\n                \"port\" : \"38062\",\n                \"userAgent\" : \"MinIO (linux; amd64) minio-go/2.0.3 mc/2017-02-15T17:57:25Z\"\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying MinIO Stack with Docker Swarm on GNU/Linux and macOS\nDESCRIPTION: Alternative command to deploy a MinIO stack using Docker Swarm's stack deploy feature with the docker-compose.yaml configuration on Linux or macOS systems.\n\nLANGUAGE: sh\nCODE:\n```\ndocker stack deploy --compose-file docker-compose.yaml minio\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom FTP Port\nDESCRIPTION: Command line option to change the default FTP port (8021) to a custom port.\n\nLANGUAGE: bash\nCODE:\n```\n--ftp=\"address=:3021\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Removal of Orphaned Delete Markers in MinIO\nDESCRIPTION: This configuration sets up a rule to automatically remove delete markers that have no other object versions associated with them.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Rules\": [\n        {\n            \"ID\": \"Removing all delete markers\",\n            \"Expiration\": {\n                \"ExpiredObjectDeleteMarker\": true\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Object Replication Resync Metadata on Source\nDESCRIPTION: JSON metadata structure showing the resync tracking information for object replication in xl.meta. The metadata includes a reset ARN with timestamp and UUID used for tracking resync operations.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"MetaSys\": {\n    \"x-minio-internal-replication-reset-arn:minio:replication::af470089-d354-4473-934c-9e1f52f6da89:bucket\": \"TW9uLCAwNyBGZWIgMjAyMiAyMDowMzo0MCBHTVQ7ZGMxMWQzNDgtMTAwMS00ODA3LWFhNjEtOGY2MmFiNWQ5ZjU2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Replication Configuration Setup\nDESCRIPTION: Commands for older versions of MinIO Client showing how to add a remote bucket and set up replication. This involves first adding the remote bucket target and then configuring replication with specific options.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin bucket remote add myminio/srcbucket https://accessKey:secretKey@replica-endpoint:9000/destbucket --service replication --region us-east-1\nmc replicate add myminio/srcbucket/Tax --priority 1 --remote-bucket destbucket --remote-bucket \"arn:minio:replication:us-east-1:c5be6b16-769d-432a-9ef1-4567081f3566:destbucket\" --tags \"Year=2019&Company=AcmeCorp\" --storage-class \"STANDARD\" --replicate \"delete,delete-marker\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Objects via SFTP\nDESCRIPTION: Demonstration of how to download an object from a MinIO bucket using the SFTP client get command.\n\nLANGUAGE: shell\nCODE:\n```\nsftp> get runner/chunkdocs/metadata metadata\nFetching /runner/chunkdocs/metadata to metadata\nmetadata                                                                                                                                                                       100%  226    16.6KB/s   00:00\nsftp>\n```\n\n----------------------------------------\n\nTITLE: Running WebIdentity Sample Client for Casdoor Authentication\nDESCRIPTION: Command to run a Go sample application that demonstrates the JWT token flow from Casdoor to MinIO using STS AssumeRoleWithWebIdentity API.\n\nLANGUAGE: bash\nCODE:\n```\n$ go run docs/sts/web-identity.go -cid account -csec 072e7f00-4289-469c-9ab2-bbe843c7f5a8  -config-ep \"http://CASDOOR_ENDPOINT/.well-known/openid-configuration\" -port 8888\n2018/12/26 17:49:36 listening on http://localhost:8888/\n```\n\n----------------------------------------\n\nTITLE: Testing MinIO to Elasticsearch notifications by uploading a file\nDESCRIPTION: Command to upload a JPEG image to the bucket that has Elasticsearch notifications configured, which will trigger an event to be sent to Elasticsearch.\n\nLANGUAGE: sh\nCODE:\n```\nmc cp myphoto.jpg myminio/images\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Logger Configuration in MinIO\nDESCRIPTION: Shows how to configure an HTTP logging endpoint in MinIO using the mc admin tool. This command sets the endpoint URL for the webhook logger and restarts the service to apply changes.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio logger_webhook:name1 auth_token=\"\" endpoint=\"http://endpoint:port/path\"\nmc admin service restart myminio\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO via SFTP and Listing Buckets\nDESCRIPTION: Example of connecting to MinIO's SFTP server using the minioadmin credentials and listing contents of a bucket named 'runner'.\n\nLANGUAGE: shell\nCODE:\n```\nsftp -P 8022 minioadmin@localhost\nminioadmin@localhost's password:\nConnected to localhost.\nsftp> ls runner/\nchunkdocs  testdir\n```\n\n----------------------------------------\n\nTITLE: Monitoring Real-time Batch Job Status in MinIO\nDESCRIPTION: Example demonstrating how to track the real-time status of a specific batch job using the 'mc batch status' command with job ID, showing objects processed, throughput, and progress details.\n\nLANGUAGE: bash\nCODE:\n```\nmc batch status myminio/ E24HH4nNMcgY5taynaPfxu\n●∙∙\nObjects:        28766\nVersions:       28766\nThroughput:     3.0 MiB/s\nTransferred:    406 MiB\nElapsed:        2m14.227222868s\nCurrObjName:    share/doc/xml-core/examples/foo.xmlcatalogs\n```\n\n----------------------------------------\n\nTITLE: Checking Completed Decommissioning Status in MinIO\nDESCRIPTION: Command output showing when a pool decommissioning process has completed. Indicates that the pool can now be safely removed from the server configuration.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission status alias/ http://minio{1...2}/data{1...4}\n```\n\n----------------------------------------\n\nTITLE: Generating Batch Job YAML in MinIO\nDESCRIPTION: Command example showing how to generate a replication job YAML template using the 'mc batch generate' command and a MinIO alias.\n\nLANGUAGE: bash\nCODE:\n```\nmc batch generate alias/ replicate\n```\n\n----------------------------------------\n\nTITLE: Adding MinIO Helm Repository\nDESCRIPTION: Adds the MinIO Helm chart repository to your local Helm configuration, enabling you to install MinIO charts.\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add minio https://charts.min.io/\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Passive Port Range\nDESCRIPTION: Command line option to restrict FTP passive ports to a specific range, useful in restricted network environments.\n\nLANGUAGE: bash\nCODE:\n```\n--ftp=\"passive-port-range=30000-40000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Removal of Non-Current Object Versions in MinIO\nDESCRIPTION: This JSON configuration sets up a rule to automatically remove non-current versions of objects under 'user-uploads/' prefix when they become older than 365 days.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Rules\": [\n        {\n            \"ID\": \"Removing all old versions\",\n            \"Filter\": {\n                \"Prefix\": \"users-uploads/\"\n            },\n            \"NoncurrentVersionExpiration\": {\n                \"NoncurrentDays\": 365\n            },\n            \"Status\": \"Enabled\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Password Environment Variable for MinIO Certificate\nDESCRIPTION: Sets the MINIO_CERT_PASSWD environment variable required when using password-protected private keys in MinIO.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_CERT_PASSWD=<PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Audit Webhook\nDESCRIPTION: Command to configure MinIO to send audit logs to the running auditlog-echo tool. This uses the MinIO Client (mc) to set the audit_webhook configuration to point to the locally running tool.\n\nLANGUAGE: shell\nCODE:\n```\nmc admin config set myminio audit_webhook enable=on endpoint=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to MinIO Codebase\nDESCRIPTION: Commit your code changes with a descriptive message. This documents what changes were made and why they were made.\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -am 'Add some feature'\n```\n\n----------------------------------------\n\nTITLE: Uninstalling MinIO Helm Chart with helm delete\nDESCRIPTION: This command removes all Kubernetes components associated with the MinIO chart and deletes the release named 'my-release'.\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete my-release\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Configuration in MinIO\nDESCRIPTION: Command to set PostgreSQL notification configuration in a MinIO deployment with connection details, table name, and format settings.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin config set myminio notify_postgres:1 connection_string=\"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\" table=\"bucketevents\" format=\"namespace\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Payload Handler in Go with MinIO Grid\nDESCRIPTION: Example of creating and registering a single payload handler function that processes byte array requests and returns byte array responses. This pattern is suitable for small, frequent requests with low latency requirements.\n\nLANGUAGE: go\nCODE:\n```\n    handler :=  func(payload []byte) ([]byte, *grid.RemoteErr) {\n        // Do something with payload\n        return []byte(\"response\"), nil\n    }\n\n    err := manager.RegisterSingleHandler(grid.HandlerDiskInfo, handler)\n```\n\n----------------------------------------\n\nTITLE: Running Basic HTTP Trace on MinIO Server\nDESCRIPTION: Command to run basic HTTP tracing on a MinIO server instance to monitor API operations and HTTP response status.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin trace myminio\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO OpenID Connect Using MinIO Client (mc)\nDESCRIPTION: An example of using the MinIO Client (mc) to configure OpenID Connect settings. This command retrieves the current OpenID identity configuration from a MinIO instance.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config get myminio identity_openid\nidentity_openid config_url=https://accounts.google.com/.well-known/openid-configuration client_id=843351d4-1080-11ea-aa20-271ecba3924a\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Private Key with OpenSSL for MinIO\nDESCRIPTION: Creates a 2048-bit RSA private key for use with MinIO TLS configuration.\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -out private.key 2048\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with Basic Configuration\nDESCRIPTION: Installs MinIO in the specified namespace with default configuration, setting root user credentials. This is suitable for standard deployments.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --namespace minio --set rootUser=rootuser,rootPassword=rootpass123 --generate-name minio/minio\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for MinIO Development\nDESCRIPTION: Set up the upstream remote to synchronize your fork with the main MinIO repository. This allows you to pull in the latest changes from the main repository into your fork.\n\nLANGUAGE: sh\nCODE:\n```\n$ cd minio\n$ git remote add upstream https://github.com/minio/minio\n$ git fetch upstream\n$ git merge upstream/master\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Server with KeyCloak Integration\nDESCRIPTION: Environment variables configuration for running MinIO server with KeyCloak integration. Sets root credentials and OpenID configuration parameters required for identity federation.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nexport MINIO_IDENTITY_OPENID_CONFIG_URL=http://localhost:8080/auth/realms/demo/.well-known/openid-configuration\nexport MINIO_IDENTITY_OPENID_CLIENT_ID=\"843351d4-1080-11ea-aa20-271ecba3924a\"\nminio server /mnt/data\n```\n\n----------------------------------------\n\nTITLE: Configuring Retention of Recent Non-Current Versions in MinIO\nDESCRIPTION: This JSON configuration sets up a rule to keep only the 5 most recent non-current versions of objects and expire older versions 30 days after they become non-current.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Rules\": [\n        {\n            \"ID\": \"Keep only most recent 5 noncurrent versions\",\n            \"Status\": \"Enabled\",\n            \"Filter\": {\n                \"Prefix\": \"users-uploads/\"\n            },\n            \"NoncurrentVersionExpiration\": {\n                \"NewerNoncurrentVersions\": 5,\n                \"NoncurrentDays\": 30\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Bucket Metrics in MinIO\nDESCRIPTION: Example of how to list all available bucket metrics in MinIO using the list parameter. This returns a Markdown-formatted table by default, but can return JSON if the Content-Type is set to application/json.\n\nLANGUAGE: plaintext\nCODE:\n```\n/minio/metrics/v3/api/bucket?list\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body Sample for Access Management Plugin\nDESCRIPTION: Example of the JSON body that MinIO sends to the plugin URL for access control decisions. It includes account information, requested action, and various conditions about the request.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"account\": \"minio\",\n    \"groups\": null,\n    \"action\": \"s3:ListBucket\",\n    \"bucket\": \"test\",\n    \"conditions\": {\n      \"Authorization\": [\n        \"AWS4-HMAC-SHA256 Credential=minio/20220507/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=62012db6c47d697620cf6c68f0f45f6e34894589a53ab1faf6dc94338468c78a\"\n      ],\n      \"CurrentTime\": [\n        \"2022-05-07T18:31:41Z\"\n      ],\n      \"Delimiter\": [\n        \"/\"\n      ],\n      \"EpochTime\": [\n        \"1651948301\"\n      ],\n      \"Prefix\": [\n        \"\"\n      ],\n      \"Referer\": [\n        \"\"\n      ],\n      \"SecureTransport\": [\n        \"false\"\n      ],\n      \"SourceIp\": [\n        \"127.0.0.1\"\n      ],\n      \"User-Agent\": [\n        \"MinIO (linux; amd64) minio-go/v7.0.24 mc/DEVELOPMENT.2022-04-20T23-07-53Z\"\n      ],\n      \"UserAgent\": [\n        \"MinIO (linux; amd64) minio-go/v7.0.24 mc/DEVELOPMENT.2022-04-20T23-07-53Z\"\n      ],\n      \"X-Amz-Content-Sha256\": [\n        \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n      ],\n      \"X-Amz-Date\": [\n        \"20220507T183141Z\"\n      ],\n      \"authType\": [\n        \"REST-HEADER\"\n      ],\n      \"principaltype\": [\n        \"Account\"\n      ],\n      \"signatureversion\": [\n        \"AWS4-HMAC-SHA256\"\n      ],\n      \"userid\": [\n        \"minio\"\n      ],\n      \"username\": [\n        \"minio\"\n      ],\n      \"versionid\": [\n        \"\"\n      ]\n    },\n    \"owner\": true,\n    \"object\": \"\",\n    \"claims\": {},\n    \"denyOnly\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO tuned profile\nDESCRIPTION: Creates the necessary directory structure and installs the tuned.conf file as a performance profile for the tuned daemon.\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /usr/lib/tuned/minio/\nsudo mv tuned.conf /usr/lib/tuned/minio\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streaming Handler in Go with MinIO Grid\nDESCRIPTION: Example of creating and registering a streaming handler that enables continuous two-way communication between servers. This pattern is suitable for long-running requests with ongoing data exchange requirements.\n\nLANGUAGE: go\nCODE:\n```\n    handler :=  func(ctx context.Context, payload []byte, in <-chan []byte, out chan<- []byte) *RemoteErr {\n        fmt.Println(\"Got request with initial payload\", p, \"from\", GetCaller(ctx context.Context))\n        fmt.Println(\"Subroute:\", GetSubroute(ctx))\n        for {\n            select {\n            case <-ctx.Done():\n                return nil\n            case req, ok := <-in:\n                if !ok {\n                    break\n                }           \n                // Do something with payload\n                out <- []byte(\"response\")\n\n                // Return the request for reuse\n                grid.PutByteBuffer(req)\n            }\n        }\n        // out is closed by the caller and should never be closed by the handler.\n        return nil\n    }\n\n    err := manager.RegisterStreamingHandler(grid.HandlerDiskInfo, StreamHandler{\n        Handle: handler,\n        Subroute: \"asubroute\",\n        OutCapacity: 1,\n        InCapacity: 1,\n    })\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for MinIO on Windows\nDESCRIPTION: Commands to pull the MinIO Docker image and start a distributed MinIO deployment using Docker Compose on Windows systems.\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose.exe pull\ndocker-compose.exe up\n```\n\n----------------------------------------\n\nTITLE: Running Subnet Health Diagnostics\nDESCRIPTION: Command to run comprehensive health diagnostics on a MinIO server for checking infrastructure configuration and performance.\n\nLANGUAGE: sh\nCODE:\n```\nmc support diagnostics myminio/\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing a MinIO Hotfix Docker Container\nDESCRIPTION: Command to build a hotfix Docker container and push it to the official MinIO Docker Hub repository. This requires credential access.\n\nLANGUAGE: bash\nCODE:\n```\nλ CRED_DIR=/media/builder/minio make docker-hotfix-push\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Management Plugin with Environment Variables\nDESCRIPTION: Command to view the environment variables used to configure the Access Management Plugin feature in MinIO, showing available configuration options.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config set myminio policy_plugin --env\n```\n\n----------------------------------------\n\nTITLE: Implementing Policy Creation Function for MinIO in Shell\nDESCRIPTION: Function that creates a policy in MinIO if it doesn't already exist. It checks for policy existence first, then creates it using a JSON file from the config directory.\n\nLANGUAGE: shell\nCODE:\n```\n# createPolicy($name, $filename)\ncreatePolicy () {\n  NAME=$1\n  FILENAME=$2\n\n  # Create the name if it does not exist\n  echo \"Checking policy: $NAME (in /config/$FILENAME.json)\"\n  if ! checkPolicyExists $NAME ; then\n    echo \"Creating policy '$NAME'\"\n  else\n    echo \"Policy '$NAME' already exists.\"\n  fi\n  ${MC} admin policy create myminio $NAME /config/$FILENAME.json\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Bucket Lifecycle Configuration in MinIO\nDESCRIPTION: This command lists the current lifecycle configuration settings for a bucket, showing the rules with their IDs, prefixes, expiration status, and transition settings.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc ilm ls play/testbucket\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser Access in MinIO\nDESCRIPTION: Example of using an environment variable to disable access to the MinIO console web UI, which can be useful for security purposes or headless deployments.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_BROWSER=off\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Retrieving Audit Webhook Configuration in MinIO\nDESCRIPTION: Shows how to retrieve the current audit webhook configuration using the MinIO client. This command displays the settings for the audit_webhook target.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config get myminio/ audit_webhook\n```\n\n----------------------------------------\n\nTITLE: Uploading Image to Trigger Webhook Notification\nDESCRIPTION: Shows how to upload a JPEG image to the MinIO server to trigger a webhook notification. The image is uploaded to the images bucket which has webhook notifications configured.\n\nLANGUAGE: plaintext\nCODE:\n```\nmc cp ~/images.jpg myminio/images\n.../images.jpg:  8.31 KB / 8.31 KB ┃▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓┃ 100.00% 59.42 KB/s 0s\n```\n\n----------------------------------------\n\nTITLE: Running MinIO Server in Chroot Environment\nDESCRIPTION: Command to run MinIO server inside a chroot environment with user and group specification. The server is configured to use a specific configuration directory and serve data from the /data directory.\n\nLANGUAGE: sh\nCODE:\n```\nsudo chroot --userspec username:group /mnt/export/${USER} /bin/minio --config-dir=/.minio server /data\n\nEndpoint:  http://192.168.1.92:9000  http://65.19.167.92:9000\nAccessKey: MVPSPBW4NP2CMV1W3TXD\nSecretKey: X3RKxEeFOI8InuNWoPsbG+XEVoaJVCqbvxe+PTOa\n...\n...\n```\n\n----------------------------------------\n\nTITLE: Running Demo Access Management Plugin in Go\nDESCRIPTION: Command to run the included demo Access Management Plugin which allows admin users to perform any action while preventing other users from performing s3:Put* operations.\n\nLANGUAGE: sh\nCODE:\n```\ngo run access-manager-plugin.go\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO in Chroot Environment\nDESCRIPTION: Commands to install MinIO server binary in a chroot environment. Creates the necessary directory structure, downloads the MinIO binary, and sets executable permissions.\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p /mnt/export/${USER}/bin\nwget https://dl.min.io/server/minio/release/linux-amd64/minio -O /mnt/export/${USER}/bin/minio\nchmod +x /mnt/export/${USER}/bin/minio\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific MinIO Release Version in Git\nDESCRIPTION: Command to checkout the specific MinIO release tag that a customer is currently using, which is the first step for creating a hotfix branch.\n\nLANGUAGE: bash\nCODE:\n```\nλ git checkout RELEASE.2021-04-22T15-44-28Z\n```\n\n----------------------------------------\n\nTITLE: Public Prometheus Configuration for Bucket Metrics\nDESCRIPTION: YAML configuration for Prometheus to scrape MinIO bucket metrics without authentication.\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: minio-job-bucket\n  metrics_path: /minio/v2/metrics/bucket\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: Generating Self-signed Certificate with GnuTLS for MinIO on Windows\nDESCRIPTION: Uses GnuTLS on Windows to create a self-signed certificate using the defined configuration file and private key for MinIO TLS.\n\nLANGUAGE: sh\nCODE:\n```\ncerttool.exe --generate-self-signed --load-privkey private.key --template cert.cnf --outfile public.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Server with etcd Endpoints\nDESCRIPTION: Commands to set up MinIO server with etcd integration by configuring the MINIO_ETCD_ENDPOINTS environment variable and starting the MinIO server.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_ETCD_ENDPOINTS=http://localhost:2379\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for FTP\nDESCRIPTION: Command line options to provide TLS certificates for securing FTP connections with TLS.\n\nLANGUAGE: bash\nCODE:\n```\n--ftp=\"tls-private-key=path/to/private.key\" --ftp=\"tls-public-cert=path/to/public.crt\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistence for MinIO\nDESCRIPTION: Installs MinIO without persistent storage, using emptyDir instead. This configuration does not preserve data across pod restarts or reschedules.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set persistence.enabled=false minio/minio\n```\n\n----------------------------------------\n\nTITLE: Authenticated Prometheus Configuration for Node Metrics\nDESCRIPTION: Optional YAML configuration for Prometheus to scrape MinIO node metrics with authentication using bearer token.\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: minio-job-node\n  bearer_token: <secret>\n  metrics_path: /minio/v2/metrics/node\n  scheme: http\n  static_configs:\n  - targets: ['localhost:9000']\n```\n\n----------------------------------------\n\nTITLE: Setting Legal Hold on Objects in MinIO using AWS CLI\nDESCRIPTION: Command to enable legal hold status on an object using AWS CLI. When legal hold is ON, the object cannot be deleted until the legal hold is explicitly removed, regardless of retention settings.\n\nLANGUAGE: sh\nCODE:\n```\naws s3api put-object --bucket testbucket --key legalhold --object-lock-legal-hold-status ON --body /etc/issue\n```\n\n----------------------------------------\n\nTITLE: Sample POST Request for AssumeRoleWithWebIdentity in MinIO STS\nDESCRIPTION: An example HTTP POST request to the MinIO STS endpoint for assuming a role with web identity. The request includes the WebIdentityToken parameter containing a JWT token, DurationSeconds parameter, and API version.\n\nLANGUAGE: http\nCODE:\n```\nhttp://minio.cluster:9000?Action=AssumeRoleWithWebIdentity&DurationSeconds=3600&WebIdentityToken=eyJ4NXQiOiJOVEF4Wm1NeE5ETXlaRGczTVRVMVpHTTBNekV6T0RKaFpXSTRORE5sWkRVMU9HRmtOakZpTVEiLCJraWQiOiJOVEF4Wm1NeE5ETXlaRGczTVRVMVpHTTBNekV6T0RKaFpXSTRORE5sWkRVMU9HRmtOakZpTVEiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiYXpwIjoiUG9FZ1hQNnVWTzQ1SXNFTlJuZ0RYajVBdTVZYSIsImlzcyI6Imh0dHBzOlwvXC9sb2NhbGhvc3Q6OTQ0M1wvb2F1dGgyXC90b2tlbiIsImV4cCI6MTU0MTgwOTU4MiwiaWF0IjoxNTQxODA1OTgyLCJqdGkiOiI2Y2YyMGIwZS1lNGZmLTQzZmQtYTdiYS1kYTc3YTE3YzM2MzYifQ.Jm29jPliRvrK6Os34nSK3rhzIYLFjE__zdVGNng3uGKXGKzP3We_i6NPnhA0szJXMOKglXzUF1UgSz8MctbaxFS8XDusQPVe4LkB_45hwBm6TmBxzui911nt-1RbBLN_jZIlvl2lPrbTUH5hSn9kEkph6seWanTNQpz9tNEoVa6R_OX3kpJqxe8tLQUWw453A1JTwFNhdHa6-f1K8_Q_eEZ_4gOYINQ9t_fhTibdbkXZkJQFLop-Jwoybi9s4nwQU_dATocgcufq5eCeNItQeleT-23lGxIz0X7CiJrJynYLdd-ER0F77SumqEb5iCxhxuf4H7dovwd1kAmyKzLxpw&Version=2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Monitoring MinIO Container Resource Usage\nDESCRIPTION: This command displays real-time resource usage statistics for the MinIO container, including CPU and memory usage, which is useful for performance monitoring.\n\nLANGUAGE: sh\nCODE:\n```\ndocker stats <container_id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SFTP Port\nDESCRIPTION: Command line option to change the default SFTP port (8022) to a custom port.\n\nLANGUAGE: bash\nCODE:\n```\n--sftp=\"address=:3022\"\n```\n\n----------------------------------------\n\nTITLE: Detaching a Policy from an LDAP Group\nDESCRIPTION: Command to remove a policy association from an LDAP group using the group's full distinguished name (DN) with the MinIO Client (mc) idp command.\n\nLANGUAGE: shell\nCODE:\n```\nmc idp ldap policy detach myminio mypolicy ----group='cn=projectx,ou=groups,ou=hwengg,dc=min,dc=io'\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable Bucket with Object Lock for Veeam\nDESCRIPTION: Creates a new bucket with object locking enabled using the -l flag. Object locking requires erasure coding to be enabled on the MinIO server and provides immutability for backups.\n\nLANGUAGE: bash\nCODE:\n```\nmc mb -l myminio/veeambackup\n```\n\n----------------------------------------\n\nTITLE: MapReduce Optimization Settings for Object Storage\nDESCRIPTION: Optimal MapReduce configuration settings for use with MinIO object storage. These settings control thread counts, buffers, and algorithms to optimize MapReduce jobs when working with S3-compatible storage.\n\nLANGUAGE: text\nCODE:\n```\nmapred.maxthreads.generate.mapoutput=2 # Num threads to write map outputs\nmapred.maxthreads.partition.closer=0 # Asynchronous map flushers\nmapreduce.fileoutputcommitter.algorithm.version=2 # Use the latest committer version\nmapreduce.job.reduce.slowstart.completedmaps=0.99 # 99% map, then reduce\nmapreduce.reduce.shuffle.input.buffer.percent=0.9 # Min % buffer in RAM\nmapreduce.reduce.shuffle.merge.percent=0.9 # Minimum % merges in RAM\nmapreduce.reduce.speculative=false # Disable speculation for reducing\nmapreduce.task.io.sort.factor=999 # Threshold before writing to disk\nmapreduce.task.sort.spill.percent=0.9 # Minimum % before spilling to disk\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Policy in MinIO using MinIO Client\nDESCRIPTION: Command to create a new IAM policy in MinIO using the MinIO Client (mc) tool. This requires the policy to be defined in a JSON file following AWS IAM policy syntax.\n\nLANGUAGE: shell\nCODE:\n```\nmc admin policy create myminio mypolicy mypolicy.json\n```\n\n----------------------------------------\n\nTITLE: Listing and Downloading Objects via FTP\nDESCRIPTION: Demonstration of how to list and download an object from a MinIO bucket using FTP client commands.\n\nLANGUAGE: shell\nCODE:\n```\nftp> ls runner/chunkdocs/metadata\n229 Entering Extended Passive Mode (|||44269|)\n150 Opening ASCII mode data connection for file list\n-rwxrwxrwx 1 nobody nobody           45 Apr  1 06:13 chunkdocs/metadata\n226 Closing data connection, sent 75 bytes\nftp> get\n(remote-file) runner/chunkdocs/metadata\n(local-file) test\nlocal: test remote: runner/chunkdocs/metadata\n229 Entering Extended Passive Mode (|||37785|)\n150 Data transfer starting 45 bytes\n\t45        3.58 KiB/s\n226 Closing data connection, sent 45 bytes\n45 bytes received in 00:00 (3.55 KiB/s)\n...\n```\n\n----------------------------------------\n\nTITLE: Running Comprehensive HTTP Trace on MinIO Server\nDESCRIPTION: Command to trace all HTTP requests including internode communication on a MinIO server for thorough debugging.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin trace --all --verbose myminio\n```\n\n----------------------------------------\n\nTITLE: Remotely Inspecting Backend Files\nDESCRIPTION: Example command showing how to collect xl.meta files from a specific path pattern in MinIO storage for inspection.\n\nLANGUAGE: sh\nCODE:\n```\nmc support inspect play/test123/test*/xl.meta\n```\n\n----------------------------------------\n\nTITLE: Checking Decommissioning Status Without Arguments in MinIO\nDESCRIPTION: Command to list all pools in the MinIO deployment along with their status. Shows capacity usage and whether pools are active or in the decommissioning process.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission status alias/\n```\n\n----------------------------------------\n\nTITLE: Restarting MinIO Service After Configuration\nDESCRIPTION: Command to restart the MinIO service after updating its configuration. This is necessary for the OpenID configuration changes to take effect.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin service restart myminio\n```\n\n----------------------------------------\n\nTITLE: JWT Token Response from WSO2\nDESCRIPTION: Sample JSON response from the WSO2 token endpoint showing the JWT token structure. The response includes the id_token, token_type, and expiration information.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id_token\": \"eyJ4NXQiOiJOVEF4Wm1NeE5ETXlaRGczTVRVMVpHTTBNekV6T0RKaFpXSTRORE5sWkRVMU9HRmtOakZpTVEiLCJraWQiOiJOVEF4Wm1NeE5ETXlaRGczTVRVMVpHTTBNekV6T0RKaFpXSTRORE5sWkRVMU9HRmtOakZpTVEiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiYXpwIjoiUG9FZ1hQNnVWTzQ1SXNFTlJuZ0RYajVBdTVZYSIsImlzcyI6Imh0dHBzOlwvXC9sb2NhbGhvc3Q6OTQ0M1wvb2F1dGgyXC90b2tlbiIsImV4cCI6MTUzNDg5MTc3OCwiaWF0IjoxNTM0ODg4MTc4LCJqdGkiOiIxODQ0MzI5Yy1kNjVhLTQ4YTMtODIyOC05ZGY3M2ZlODNkNTYifQ.ELZ8ujk2Xp9xTGgMqnCa5ehuimaAPXWlSCW5QeBbTJIT4M5OB_2XEVIV6p89kftjUdKu50oiYe4SbfrxmLm6NGSGd2qxkjzJK3SRKqsrmVWEn19juj8fz1neKtUdXVHuSZu6ws_bMDy4f_9hN2Jv9dFnkoyeNT54r4jSTJ4A2FzN2rkiURheVVsc8qlm8O7g64Az-5h4UGryyXU4zsnjDCBKYk9jdbEpcUskrFMYhuUlj1RWSASiGhHHHDU5dTRqHkVLIItfG48k_fb-ehU60T7EFWH1JBdNjOxM9oN_yb0hGwOjLUyCUJO_Y7xcd5F4dZzrBg8LffFmvJ09wzHNtQ\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO Inspection Decryption Tool\nDESCRIPTION: Command to install the inspection decryption tool used to decrypt encrypted MinIO inspection files.\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/minio/minio/docs/debugging/inspect@latest\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO with Lambda Target\nDESCRIPTION: Command to start MinIO server with a lambda function target enabled, registering a webhook endpoint at localhost:5000 with the friendly name 'function'.\n\nLANGUAGE: shell\nCODE:\n```\nMINIO_LAMBDA_WEBHOOK_ENABLE_function=on MINIO_LAMBDA_WEBHOOK_ENDPOINT_function=http://localhost:5000 minio server /data &\n...\n...\nMinIO Object Storage Server\nCopyright: 2015-2023 MinIO, Inc.\nLicense: GNU AGPLv3 <https://www.gnu.org/licenses/agpl-3.0.html>\nVersion: DEVELOPMENT.2023-02-05T05-17-27Z (go1.19.4 linux/amd64)\n\n...\n...\nObject Lambda ARNs: arn:minio:s3-object-lambda::function:webhook\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus with Configuration File\nDESCRIPTION: Command to start or restart the Prometheus service with a specific configuration file.\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --config.file=prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Structure for Identity Plugin\nDESCRIPTION: JSON structure for an error (403 Forbidden) response from the identity management plugin. Contains a reason field that explains why the token verification failed, which is returned to the client.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"reason\": <string>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket in MinIO with MC Client\nDESCRIPTION: Commands to set up an alias for the MinIO server and create a new bucket named 'functionbucket' to store test objects for lambda transformation.\n\nLANGUAGE: shell\nCODE:\n```\nmc alias set myminio/ http://localhost:9000 minioadmin minioadmin\nmc mb myminio/functionbucket\n```\n\n----------------------------------------\n\nTITLE: Setting Up MinIO Server with Multiple Data Directories\nDESCRIPTION: Command to start a MinIO server with multiple data directories, which is useful for erasure coding setups.\n\nLANGUAGE: sh\nCODE:\n```\nminio server /data{1...4}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Lambda Target with mTLS Authentication\nDESCRIPTION: Command to start MinIO server with a lambda function target enabled and configured with mTLS client certificates for secure authentication.\n\nLANGUAGE: shell\nCODE:\n```\nMINIO_LAMBDA_WEBHOOK_ENABLE_function=on MINIO_LAMBDA_WEBHOOK_ENDPOINT_function=http://localhost:5000 MINIO_LAMBDA_WEBHOOK_CLIENT_CERT=client.crt MINIO_LAMBDA_WEBHOOK_CLIENT_KEY=client.key minio server /data &\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Notification Targets in MinIO\nDESCRIPTION: This code lists all the notification targets supported by MinIO for bucket notifications, including webhook, AMQP, Kafka, MQTT, NATS, NSQ, MySQL, PostgreSQL, Elasticsearch, and Redis.\n\nLANGUAGE: text\nCODE:\n```\nnotify_webhook        publish bucket notifications to webhook endpoints\nnotify_amqp           publish bucket notifications to AMQP endpoints\nnotify_kafka          publish bucket notifications to Kafka endpoints\nnotify_mqtt           publish bucket notifications to MQTT endpoints\nnotify_nats           publish bucket notifications to NATS endpoints\nnotify_nsq            publish bucket notifications to NSQ endpoints\nnotify_mysql          publish bucket notifications to MySQL databases\nnotify_postgres       publish bucket notifications to Postgres databases\nnotify_elasticsearch  publish bucket notifications to Elasticsearch endpoints\nnotify_redis          publish bucket notifications to Redis datastores\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Object to MinIO Bucket\nDESCRIPTION: Command to upload the test object to the 'functionbucket' in MinIO using the mc (MinIO Client) tool.\n\nLANGUAGE: shell\nCODE:\n```\nmc cp testobject myminio/functionbucket/\n```\n\n----------------------------------------\n\nTITLE: MinIO OpenID Connect Environment Variable Configuration\nDESCRIPTION: Environment variable based configuration options for OpenID Connect support in MinIO using the MinIO Client (mc) CLI.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio/ identity_openid --env\n\nKEY:\nidentity_openid  enable OpenID SSO support\n\nARGS:\nMINIO_IDENTITY_OPENID_CONFIG_URL*   (url)       openid discovery document e.g. \"https://accounts.google.com/.well-known/openid-configuration\"\nMINIO_IDENTITY_OPENID_CLIENT_ID     (string)    unique public identifier for apps e.g. \"292085223830.apps.googleusercontent.com\"\nMINIO_IDENTITY_OPENID_CLAIM_NAME    (string)    JWT canned policy claim name, defaults to \"policy\"\nMINIO_IDENTITY_OPENID_CLAIM_PREFIX  (string)    JWT claim namespace prefix e.g. \"customer1/\"\nMINIO_IDENTITY_OPENID_SCOPES        (csv)       Comma separated list of OpenID scopes for server, defaults to advertised scopes from discovery document e.g. \"email,admin\"\nMINIO_IDENTITY_OPENID_COMMENT       (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Service Accounts via Helm Install Command\nDESCRIPTION: This command installs MinIO and creates multiple service accounts with specified access keys, secret keys, and parent users. It shows how to set credentials directly or reference existing secrets.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set svcaccts[0].accessKey=accessKey,svcaccts[0].secretKey=secretKey,svcaccts[0].user=parentUser,svcaccts[1].accessKey=accessKey2,svcaccts[1].secretRef=existingSecret,svcaccts[1].secretKey=password,svcaccts[1].user=parentUser2 minio/minio\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression for All Content in MinIO\nDESCRIPTION: Command to enable compression for all content types in MinIO by setting both extensions and MIME types to empty values.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio compression enable=\"on\" extensions=\"\" mime_types=\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Hotfix Branch in Git\nDESCRIPTION: Commands to create a new hotfix branch from a specific release tag and push it to the upstream repository. This establishes the branch for backporting fixes.\n\nLANGUAGE: bash\nCODE:\n```\nλ git branch -m RELEASE.2021-04-22T15-44-28Z.hotfix\nλ git push -u upstream RELEASE.2021-04-22T15-44-28Z.hotfix\n```\n\n----------------------------------------\n\nTITLE: Upgrading MinIO using MinIO Client\nDESCRIPTION: Command for performing a zero-downtime upgrade of MinIO server using the MinIO Client (mc) tool. This method requires internet access to the MinIO download servers.\n\nLANGUAGE: sh\nCODE:\n```\nmc admin update <minio alias, e.g., myminio>\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes in Kubernetes YAML for TLS Certificates\nDESCRIPTION: YAML configuration for the volumes section in a Kubernetes deployment file. This creates a volume that mounts the TLS secret containing the certificates.\n\nLANGUAGE: yaml\nCODE:\n```\n    volumes:\n      - name: secret-volume\n        secret:\n          secretName: tls-ssl-minio\n          items:\n          - key: public.crt\n            path: public.crt\n          - key: private.key\n            path: private.key\n          - key: public.crt\n            path: CAs/public.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocking Mode for Ringbuffer in Go\nDESCRIPTION: Shows how to enable blocking mode on a ringbuffer. In blocking mode, reads wait for data to be available and writes wait for space to become available, similar to io.Pipe behavior.\n\nLANGUAGE: go\nCODE:\n```\n\trb := ringbuffer.New(1024).SetBlocking(true)\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Policies from Helm Values in Shell\nDESCRIPTION: Conditional block that creates MinIO policies based on values defined in the Helm chart. It iterates through the policies array and calls createPolicy for each one with a generated filename.\n\nLANGUAGE: shell\nCODE:\n```\n{{ if .Values.policies }}\n# Create the policies\n{{- range $idx, $policy := .Values.policies }}\ncreatePolicy {{ $policy.name }} policy_{{ $idx }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting MinIO Kafka Configuration with MinIO Client (mc)\nDESCRIPTION: Command to update the Kafka notification configuration on a MinIO server using the MinIO Client (mc) tool. This example sets up brokers and a topic name for Kafka events.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio notify_kafka:1 tls_skip_verify=\"off\"  queue_dir=\"\" queue_limit=\"0\" sasl=\"off\" sasl_password=\"\" sasl_username=\"\" tls_client_auth=\"0\" tls=\"off\" client_tls_cert=\"\" client_tls_key=\"\" brokers=\"localhost:9092,localhost:9093\" topic=\"bucketevents\" version=\"\"\n```\n\n----------------------------------------\n\nTITLE: Attaching a Policy to an LDAP Group\nDESCRIPTION: Command to attach a previously created policy to an LDAP group using the group's full distinguished name (DN) with the MinIO Client (mc) idp command.\n\nLANGUAGE: shell\nCODE:\n```\nmc idp ldap policy attach myminio mypolicy ----group='cn=projectx,ou=groups,ou=hwengg,dc=min,dc=io'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Storage Size for MinIO\nDESCRIPTION: Installs MinIO with a custom persistent volume size of 1 Tebibyte. This allows you to specify storage requirements for your deployment.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name my-release --set persistence.size=1Ti minio/minio\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Environment Variables for MinIO\nDESCRIPTION: Environment variables for configuring MySQL notifications in MinIO. These variables are alternatives to the configuration parameters and include connection details, table settings, and queue configuration.\n\nLANGUAGE: bash\nCODE:\n```\nKEY:\nnotify_mysql[:name]  publish bucket notifications to MySQL databases\n\nARGS:\nMINIO_NOTIFY_MYSQL_ENABLE*              (on|off)             enable notify_mysql target, default is 'off'\nMINIO_NOTIFY_MYSQL_DSN_STRING*          (string)             MySQL data-source-name connection string e.g. \"<user>:<password>@tcp(<host>:<port>)/<database>\"\nMINIO_NOTIFY_MYSQL_TABLE*               (string)             DB table name to store/update events, table is auto-created\nMINIO_NOTIFY_MYSQL_FORMAT*              (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\nMINIO_NOTIFY_MYSQL_QUEUE_DIR            (path)               staging dir for undelivered messages e.g. '/home/events'\nMINIO_NOTIFY_MYSQL_QUEUE_LIMIT          (number)             maximum limit for undelivered messages, defaults to '100000'\nMINIO_NOTIFY_MYSQL_MAX_OPEN_CONNECTIONS (number)             maximum number of open connections to the database, defaults to '2'\nMINIO_NOTIFY_MYSQL_COMMENT              (sentence)           optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO with Conditional TLS Support in Shell with Helm Templating\nDESCRIPTION: Sets the connection scheme based on whether TLS is enabled in Helm values, then calls the connectToMinio function with the appropriate scheme (http or https).\n\nLANGUAGE: shell\nCODE:\n```\n# Try connecting to MinIO instance\n{{- if .Values.tls.enabled }}\nscheme=https\n{{- else }}\nscheme=http\n{{- end }}\nconnectToMinio $scheme\n```\n\n----------------------------------------\n\nTITLE: MinIO v2 YAML Configuration Format for Pools\nDESCRIPTION: Example of the newer v2 format for specifying pools in MinIO YAML configuration. This format includes advanced options like set-drive-count which should be used under guidance from the MinIO team.\n\nLANGUAGE: yaml\nCODE:\n```\npools:\n  - args:\n      - \"https://server-example-pool1:9000/mnt/disk{1...4}/\"\n      - \"https://server{1...2}-pool1:9000/mnt/disk{1...4}/\"\n      - \"https://server3-pool1:9000/mnt/disk{1...4}/\"\n      - \"https://server4-pool1:9000/mnt/disk{1...4}/\"\n    set-drive-count: 4 # Advanced option, must be used under guidance from MinIO team.\n```\n\n----------------------------------------\n\nTITLE: Running MinIO with Distributed Erasure Coding\nDESCRIPTION: Command example for running MinIO in a distributed configuration with 64 erasure sets and 16 drives per set across multiple hosts, using ellipses notation for host and export path expansion.\n\nLANGUAGE: bash\nCODE:\n```\nminio server http://host{1...16}/export{1...64}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Domains in MinIO\nDESCRIPTION: Example of configuring MinIO with multiple domains for virtual-host-style requests by providing comma-separated values to the MINIO_DOMAIN environment variable.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_DOMAIN=sub1.mydomain.com,sub2.mydomain.com\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client with Helm Template Values\nDESCRIPTION: Sets up the MinIO client command with configurable config directory path using Helm template values.\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nset -e # Have script exit in the event of a failed command.\n\n{{- if .Values.configPathmc }}\nMC_CONFIG_DIR=\"{{ .Values.configPathmc }}\"\nMC=\"/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}\"\n{{- else }}\nMC=\"/usr/bin/mc --insecure\"\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO and Creating Buckets from Helm Values\nDESCRIPTION: Script execution section that connects to the MinIO server using either HTTP or HTTPS based on TLS configuration and creates buckets based on values provided in the Helm chart.\n\nLANGUAGE: shell\nCODE:\n```\n# Try connecting to MinIO instance\n{{- if .Values.tls.enabled }}\nscheme=https\n{{- else }}\nscheme=http\n{{- end }}\nconnectToMinio $scheme\n\n{{ if .Values.buckets }}\n{{ $global := . }}\n# Create the buckets\n{{- range .Values.buckets }}\ncreateBucket {{ tpl .name $global }} {{ .policy | default \"none\" | quote }} {{ .purge | default false }} {{ .versioning | default false }} {{ .objectlocking | default false }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Running MinIO as a Regular User on Linux/macOS\nDESCRIPTION: This command runs MinIO as the current user and group instead of root by using the --user flag. It creates a directory in the home folder and mounts it for data persistence.\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ${HOME}/data\ndocker run \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --user $(id -u):$(id -g) \\\n  --name minio1 \\\n  -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" \\\n  -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMIK7MDENGbPxRfiCYEXAMPLEKEY\" \\\n  -v ${HOME}/data:/data \\\n  quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Replica Metadata Modification Syncing\nDESCRIPTION: Command to edit an existing replication rule to disable the replica metadata modification syncing feature, keeping only delete and delete-marker replication enabled.\n\nLANGUAGE: bash\nCODE:\n```\nmc replicate edit alias/bucket --id xyz.id --replicate \"delete,delete-marker\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client (mc) for Local Access\nDESCRIPTION: Commands to configure the MinIO client for accessing the server when using port forwarding. It includes exporting the MC_HOST environment variable with the root credentials obtained from Kubernetes secrets.\n\nLANGUAGE: bash\nCODE:\n```\nexport MC_HOST_{{ template \"minio.fullname\" . }}_local=http://$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template \"minio.secretName\" . }} -o jsonpath=\"{.data.rootUser}\" | base64 --decode):$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template \"minio.secretName\" . }} -o jsonpath=\"{.data.rootPassword}\" | base64 --decode)@localhost:{{ .Values.service.port }}\n```\n\nLANGUAGE: bash\nCODE:\n```\nmc ls {{ template \"minio.fullname\" . }}_local\n```\n\n----------------------------------------\n\nTITLE: Checking if MinIO Bucket Exists\nDESCRIPTION: Function that checks if a bucket exists in the MinIO server by using the 'mc stat' command and examining its exit code.\n\nLANGUAGE: shell\nCODE:\n```\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n\tBUCKET=$1\n\tCMD=$(${MC} stat myminio/$BUCKET >/dev/null 2>&1)\n\treturn $?\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO Server Function Implementation\nDESCRIPTION: Defines the connectToMinio function that attempts to establish a connection to the MinIO server using credentials. It implements a retry mechanism with up to 29 attempts at 2-second intervals before failing.\n\nLANGUAGE: shell\nCODE:\n```\n# connectToMinio\n# Use a check-sleep-check loop to wait for MinIO service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 2 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing MinIO Container Logs\nDESCRIPTION: This command displays the logs from a MinIO container, which can be useful for troubleshooting issues or monitoring server activity.\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs <container_id>\n```\n\n----------------------------------------\n\nTITLE: AssumeRoleWithCustomToken XML Response Format\nDESCRIPTION: An example of the XML response returned from a successful AssumeRoleWithCustomToken request. The response includes temporary credentials (AccessKeyId, SecretAccessKey, SessionToken) and metadata about the assumed user and request.\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AssumeRoleWithCustomTokenResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\">\n  <AssumeRoleWithCustomTokenResult>\n    <Credentials>\n      <AccessKeyId>24Y5H9VHE14H47GEOKCX</AccessKeyId>\n      <SecretAccessKey>H+aBfQ9B1AeWWb++84hvp4tlFBo9aP+hUTdLFIeg</SecretAccessKey>\n      <Expiration>2022-05-25T19:56:34Z</Expiration>\n      <SessionToken>eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiIyNFk1SDlWSEUxNEg0N0dFT0tDWCIsImV4cCI6MTY1MzUwODU5NCwiZ3JvdXBzIjpbImRhdGEtc2NpZW5jZSJdLCJwYXJlbnQiOiJjdXN0b206QWxpY2UiLCJyb2xlQXJuIjoiYXJuOm1pbmlvOmlhbTo6OnJvbGUvaWRtcC14eHgiLCJzdWIiOiJjdXN0b206QWxpY2UifQ.1tO1LmlUNXiy-wl-ZbkJLWTpaPlhaGqHehsi21lNAmAGCImHHsPb-GA4lRq6GkvHAODN5ZYCf_S-OwpOOdxFwA</SessionToken>\n    </Credentials>\n    <AssumedUser>custom:Alice</AssumedUser>\n  </AssumeRoleWithCustomTokenResult>\n  <ResponseMetadata>\n    <RequestId>16F26E081E36DE63</RequestId>\n  </ResponseMetadata>\n</AssumeRoleWithCustomTokenResponse>\n```\n\n----------------------------------------\n\nTITLE: Creating Trusted Certificates Secret without TLS\nDESCRIPTION: Creates a Kubernetes secret with only third-party CA certificates when TLS is not enabled for MinIO itself but is needed for connections to external services.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n minio create secret generic minio-trusted-certs --from-file=keycloak.crt\n```\n\n----------------------------------------\n\nTITLE: Running a Go Program to Test AssumeRole\nDESCRIPTION: Example of running a Go program to test the AssumeRole API with a MinIO user, displaying the resulting temporary credentials.\n\nLANGUAGE: shell\nCODE:\n```\n$ go run assume-role.go -u foobar -p foo12345 -d\nOnly displaying credentials:\nAccessKeyID: 27YDRYEM0S9B44AJJX9X\nSecretAccessKey: LHPdHeaLiYk+pDZ3hgN3sdwXpJC2qbhBfZ8ii9Z3\nSessionToken: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiIyN1lEUllFTTBTOUI0NEFKSlg5WCIsImV4cCI6MzYwMDAwMDAwMDAwMCwicG9saWN5IjoiY29uc29sZUFkbWluIn0.2d9t0UOm1jQmwe31_5CyN63f6CL-fhqZSO-XhZIp-NH5QteWv9oSMjIrcNWzMgNDblrUfAZ0JSs8a1ciLQF9Ww\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Usage of JStream\nDESCRIPTION: Example of using the jstream command-line tool to parse JSON input from stdin at depth level 1.\n\nLANGUAGE: bash\nCODE:\n```\njstream -d 1 < input.json\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring yq Tool for XML Processing\nDESCRIPTION: Sets up the yq and jq tools to process XML configuration files in Hadoop. Creates a kv-pairify alias for extracting key-value pairs from XML configuration files.\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install yq\nalias kv-pairify='yq \".configuration[]\" | jq \".[]\" | jq -r \".name + \\\"=\\\" + .value\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Kubernetes YAML for MinIO TLS\nDESCRIPTION: YAML configuration for the volumeMounts section in a Kubernetes deployment file. This mounts the TLS certificates to the expected path in the MinIO container.\n\nLANGUAGE: yaml\nCODE:\n```\n    volumeMounts:\n        - name: secret-volume\n          mountPath: /<user-running-minio>/.minio/certs\n```\n\n----------------------------------------\n\nTITLE: Verbose CLI Output with JStream\nDESCRIPTION: Example of using the jstream command-line tool with verbose output showing depth and position details for all JSON values.\n\nLANGUAGE: bash\nCODE:\n```\ncat input.json | jstream -v -d -1\n```\n\n----------------------------------------\n\nTITLE: Sample Spark Pi Calculation Output\nDESCRIPTION: Example output from running the Spark Pi calculation job, showing log information and the approximated value of pi.\n\nLANGUAGE: bash\nCODE:\n```\n17/03/22 23:21:10 INFO DAGScheduler: Job 0 finished: reduce at SparkPi.scala:38, took 1.302805 s\nPi is roughly 3.1445191445191445\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Stream Parsing in Go\nDESCRIPTION: Example of using jstream to extract JSON values at a specified depth level. This snippet opens a file and streams objects at depth level 1.\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(\"input.json\")\ndecoder := jstream.NewDecoder(f, 1) // extract JSON values at a depth level of 1\nfor mv := range decoder.Stream() {\n  fmt.Printf(\"%v\\n \", mv.Value)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Secret Creation\nDESCRIPTION: Command to check if the TLS secret was successfully created in the Kubernetes cluster. This confirms the secret named 'tls-ssl-minio' exists before proceeding.\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get secrets\n```\n\n----------------------------------------\n\nTITLE: Uploading Input File to MinIO via S3A\nDESCRIPTION: Command to copy a local file to MinIO storage using the S3A connector. This uploads log4j.properties to be used as input for the WordCount example.\n\nLANGUAGE: bash\nCODE:\n```\nhadoop fs -copyFromLocal /etc/hadoop/conf/log4j.properties\n          s3a://testbucket/testdata\n```\n\n----------------------------------------\n\nTITLE: Downloading MinIO Server for Windows\nDESCRIPTION: URL for downloading the 64-bit Windows executable for MinIO server. This is the binary distribution that can be used to run MinIO on Windows systems.\n\nLANGUAGE: sh\nCODE:\n```\nhttps://dl.min.io/server/minio/release/windows-amd64/minio.exe\n```\n\n----------------------------------------\n\nTITLE: Running WordCount in Spark Scala Shell\nDESCRIPTION: Scala commands for performing word count on a text file stored in MinIO. The code reads the file, splits it into words, counts occurrences, and saves the results back to MinIO storage.\n\nLANGUAGE: scala\nCODE:\n```\nscala> val file = sc.textFile(\"s3a://testbucket/testdata\")\nfile: org.apache.spark.rdd.RDD[String] = s3a://testbucket/testdata MapPartitionsRDD[1] at textFile at <console>:24\n\nscala> val counts = file.flatMap(line => line.split(\" \")).map(word => (word, 1)).reduceByKey(_ + _)\ncounts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at <console>:25\n\nscala> counts.saveAsTextFile(\"s3a://testbucket/wordcount\")\n```\n\n----------------------------------------\n\nTITLE: GnuTLS Certificate Configuration for MinIO on Windows\nDESCRIPTION: Configuration file for GnuTLS that defines parameters for generating a self-signed certificate with DNS and IP information for MinIO TLS.\n\nLANGUAGE: sh\nCODE:\n```\n# X.509 Certificate options\n#\n# DN options\n\n# The organization of the subject.\norganization = \"Example Inc.\"\n\n# The organizational unit of the subject.\n#unit = \"sleeping dept.\"\n\n# The state of the certificate owner.\nstate = \"Example\"\n\n# The country of the subject. Two letter code.\ncountry = \"EX\"\n\n# The common name of the certificate owner.\ncn = \"Sally Certowner\"\n\n# In how many days, counting from today, this certificate will expire.\nexpiration_days = 365\n\n# X.509 v3 extensions\n\n# DNS name(s) of the server\ndns_name = \"localhost\"\n\n# (Optional) Server IP address\nip_address = \"127.0.0.1\"\n\n# Whether this certificate will be used for a TLS server\ntls_www_server\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Remote Repository\nDESCRIPTION: Push your local branch with committed changes to your forked repository. This makes your changes available on GitHub for creating a pull request.\n\nLANGUAGE: sh\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Sample WordCount Output Listing\nDESCRIPTION: Example output from listing the WordCount result files in MinIO, showing the _SUCCESS marker and the generated part files with their sizes and timestamps.\n\nLANGUAGE: bash\nCODE:\n```\nFound 3 items\n-rw-rw-rw-   1 spark spark          0 2019-05-04 01:36 s3a://testbucket/wordcount/_SUCCESS\n-rw-rw-rw-   1 spark spark       4956 2019-05-04 01:36 s3a://testbucket/wordcount/part-00000\n-rw-rw-rw-   1 spark spark       5616 2019-05-04 01:36 s3a://testbucket/wordcount/part-00001\n```\n\n----------------------------------------\n\nTITLE: Canceling Pool Decommissioning in MinIO\nDESCRIPTION: Command to cancel an ongoing decommissioning process for a specific pool. After cancellation, the pool remains in a special status as it may contain partial data.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin decommission cancel alias/ http://minio{1...2}/data{1...4}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-signed Certificate with OpenSSL for MinIO\nDESCRIPTION: Creates a self-signed certificate valid for 730 days using the OpenSSL configuration file for MinIO TLS.\n\nLANGUAGE: sh\nCODE:\n```\nopenssl req -new -x509 -nodes -days 730 -keyout private.key -out public.crt -config openssl.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliases for MinIO Sites using mc CLI\nDESCRIPTION: Sets up aliases in the MinIO Client (mc) for multiple MinIO sites to prepare for site replication configuration. Each alias requires the site URL, admin username, and password.\n\nLANGUAGE: sh\nCODE:\n```\nmc alias set minio1 https://minio1.example.com:9000 adminuser adminpassword\nmc alias set minio2 https://minio2.example.com:9000 adminuser adminpassword\nmc alias set minio3 https://minio3.example.com:9000 adminuser adminpassword\n```\n\n----------------------------------------\n\nTITLE: LDAP User-Specific Resource Access Policy in JSON\nDESCRIPTION: A policy that grants LDAP authenticated users access to their own directory using the LDAP username as the path identifier.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\t{\n\t  \"Action\": [\"s3:ListBucket\"],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\"arn:aws:s3:::mybucket\"],\n\t  \"Condition\": {\"StringLike\": {\"s3:prefix\": [\"${ldap:username}/*\"]}}\n\t},\n\t{\n\t  \"Action\": [\n\t\t\"s3:GetObject\",\n\t\t\"s3:PutObject\"\n\t  ],\n\t  \"Effect\": \"Allow\",\n\t  \"Resource\": [\"arn:aws:s3:::mybucket/${ldap:username}/*\"]\n\t}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic AlertManager Configuration in YAML\nDESCRIPTION: Sample AlertManager configuration that sets up alert grouping, intervals, and a webhook receiver. It includes inhibition rules to prevent duplicate alerts based on severity.\n\nLANGUAGE: yaml\nCODE:\n```\nroute:\n  group_by: ['alertname']\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 1h\n  receiver: 'web.hook'\nreceivers:\n  - name: 'web.hook'\n    webhook_configs:\n      - url: 'http://127.0.0.1:8010/webhook'\ninhibit_rules:\n  - source_match:\n      severity: 'critical'\n    target_match:\n      severity: 'warning'\n    equal: ['alertname', 'dev', 'instance']\n```\n\n----------------------------------------\n\nTITLE: Converting PKCS-8 to PKCS-1 Format for MinIO\nDESCRIPTION: Converts a private key from PKCS-8 format (default for OpenSSL) to PKCS-1 format which is required by MinIO.\n\nLANGUAGE: sh\nCODE:\n```\nopenssl rsa -in private-pkcs8-key.key -aes256 -passout pass:PASSWORD -out private.key\n```\n\n----------------------------------------\n\nTITLE: Accessing MinIO with LoadBalancer Service in Kubernetes\nDESCRIPTION: Command to retrieve the external IP address when MinIO is deployed with a LoadBalancer service type. This allows external access to the MinIO server.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc --namespace {{ .Release.Namespace }} -l app={{ template \"minio.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Arguments in MinIO\nDESCRIPTION: Configuration options for PostgreSQL event notification in MinIO including connection parameters, table settings, and event format options.\n\nLANGUAGE: plaintext\nCODE:\n```\nKEY:\nnotify_postgres[:name]  publish bucket notifications to Postgres databases\n\nARGS:\nconnection_string*   (string)             Postgres server connection-string e.g. \"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\"\ntable*               (string)             DB table name to store/update events, table is auto-created\nformat*              (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\nqueue_dir            (path)               staging dir for undelivered messages e.g. '/home/events'\nqueue_limit          (number)             maximum limit for undelivered messages, defaults to '100000'\nmax_open_connections (number)             maximum number of open connections to the database, defaults to '2'\ncomment              (sentence)           optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Scheme Based on TLS Configuration\nDESCRIPTION: Determines the connection scheme (http/https) based on whether TLS is enabled in the configuration values.\n\nLANGUAGE: shell\nCODE:\n```\n{{- if .Values.tls.enabled }}\nscheme=https\n{{- else }}\nscheme=http\n{{- end }}\nconnectToMinio $scheme\n```\n\n----------------------------------------\n\nTITLE: STS Temporary Credentials Response Example\nDESCRIPTION: Sample JSON response from MinIO's STS API showing the temporary credentials generated using the WSO2 JWT token. The response includes accessKey, secretKey, expiration, and sessionToken.\n\nLANGUAGE: json\nCODE:\n```\n{\n \"accessKey\": \"IRBLVDGN5QGMDCMO1X8V\",\n \"secretKey\": \"KzS3UZKE7xqNdtRbKyfcWgxBS6P1G4kwZn4DXKuY\",\n \"expiration\": \"2018-08-21T15:49:38-07:00\",\n \"sessionToken\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJJUkJMVkRHTjVRR01EQ01PMVg4ViIsImF1ZCI6IlBvRWdYUDZ1Vk80NUlzRU5SbmdEWGo1QXU1WWEiLCJhenAiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiZXhwIjoxNTM0ODkxNzc4LCJpYXQiOjE1MzQ4ODgxNzgsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvb2F1dGgyL3Rva2VuIiwianRpIjoiMTg0NDMyOWMtZDY1YS00OGEzLTgyMjgtOWRmNzNmZTgzZDU2In0.4rKsZ8VkZnIS_ALzfTJ9UbEKPFlQVvIyuHw6AWTJcDFDVgQA2ooQHmH9wUDnhXBi1M7o8yWJ47DXP-TLPhwCgQ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MinIO STS API with Client Grants\nDESCRIPTION: Example of running a Go client to generate STS credentials using client grants. Shows the output including accessKey, secretKey, expiration, and sessionToken that can be used for MinIO API operations.\n\nLANGUAGE: bash\nCODE:\n```\ngo run client-grants.go -cid PoEgXP6uVO45IsENRngDXj5Au5Ya -csec eKsw6z8CtOJVBtrOWvhRWL4TUCga\n\n##### Credentials\n{\n \"accessKey\": \"IRBLVDGN5QGMDCMO1X8V\",\n \"secretKey\": \"KzS3UZKE7xqNdtRbKyfcWgxBS6P1G4kwZn4DXKuY\",\n \"expiration\": \"2018-08-21T15:49:38-07:00\",\n \"sessionToken\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJJUkJMVkRHTjVRR01EQ01PMVg4ViIsImF1ZCI6IlBvRWdYUDZ1Vk80NUlzRU5SbmdEWGo1QXU1WWEiLCJhenAiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiZXhwIjoxNTM0ODkxNzc4LCJpYXQiOjE1MzQ4ODgxNzgsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvb2F1dGgyL3Rva2VuIiwianRpIjoiMTg0NDMyOWMtZDY1YS00OGEzLTgyMjgtOWRmNzNmZTgzZDU2In0.4rKsZ8VkZnIS_ALzfTJ9UbEKPFlQVvIyuHw6AWTJcDFDVgQA2ooQHmH9wUDnhXBi1M7o8yWJ47DXP-TLPhwCgQ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting MinIO to Apply OpenID Configuration\nDESCRIPTION: Command to restart the MinIO server after configuring OpenID Connect settings, which is necessary for the changes to take effect.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin service restart myminio\n```\n\n----------------------------------------\n\nTITLE: Sample XML Response from AssumeRoleWithWebIdentity\nDESCRIPTION: The XML response returned by MinIO's STS service after a successful AssumeRoleWithWebIdentity call. It includes temporary credentials consisting of an access key, secret key, and session token with expiration information.\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AssumeRoleWithWebIdentityResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\">\n  <AssumeRoleWithWebIdentityResult>\n    <AssumedRoleUser>\n      <Arn/>\n      <AssumeRoleId/>\n    </AssumedRoleUser>\n    <Credentials>\n      <AccessKeyId>Y4RJU1RNFGK48LGO9I2S</AccessKeyId>\n      <SecretAccessKey>sYLRKS1Z7hSjluf6gEbb9066hnx315wHTiACPAjg</SecretAccessKey>\n      <Expiration>2019-08-08T20:26:12Z</Expiration>\n      <SessionToken>eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJZNFJKVTFSTkZHSzQ4TEdPOUkyUyIsImF1ZCI6IlBvRWdYUDZ1Vk80NUlzRU5SbmdEWGo1QXU1WWEiLCJhenAiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiZXhwIjoxNTQxODExMDcxLCJpYXQiOjE1NDE4MDc0NzEsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvb2F1dGgyL3Rva2VuIiwianRpIjoiYTBiMjc2MjktZWUxYS00M2JmLTg3MzktZjMzNzRhNGNkYmMwIn0.ewHqKVFTaP-j_kgZrcOEKroNUjk10GEp8bqQjxBbYVovV0nHO985VnRESFbcT6XMDDKHZiWqN2vi_ETX_u3Q-w</SessionToken>\n    </Credentials>\n  </AssumeRoleWithWebIdentityResult>\n  <ResponseMetadata/>\n</AssumeRoleWithWebIdentityResponse>\n```\n\n----------------------------------------\n\nTITLE: Using Existing PersistentVolumeClaim for MinIO\nDESCRIPTION: Installs MinIO using an existing PersistentVolumeClaim instead of creating a new one. This is useful when you have pre-allocated storage.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set persistence.existingClaim=PVC_NAME minio/minio\n```\n\n----------------------------------------\n\nTITLE: Illustrating Secure Channel Construction in MinIO SSE\nDESCRIPTION: This diagram illustrates how MinIO implements the Secure Channel construction for content encryption. It shows how plaintext is split into chunks, each processed by AEAD with unique key-nonce combinations to produce the sealed ciphertext chunks.\n\nLANGUAGE: markdown\nCODE:\n```\nplaintext   := chunk_0          ||       chunk_1          ||       chunk_1          ||       ...\n                 |                         |                         |\n                 |                         |                         |\n               AEAD <- key, nonce + 0    AEAD <- key, nonce + 1    AEAD <- key, nonce + 2    ...\n                 |                         |                         |\n                 |                         |                         |\nciphertext  := sealed_chunk_0   ||       sealed_chunk_1   ||       sealed_chunk_2   ||       ...\n```\n\n----------------------------------------\n\nTITLE: Setting NetworkPolicy for Kubernetes Namespace\nDESCRIPTION: Annotates the default namespace to enable NetworkPolicy with DefaultDeny, which restricts all ingress traffic by default. Required for Kubernetes v1.5 & v1.6.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate namespace default \"net.beta.kubernetes.io/network-policy={\\\"ingress\\\":{\\\"isolation\\\":\\\"DefaultDeny\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling MinIO TLS STS API with Environment Variable\nDESCRIPTION: Shows how to enable the MinIO TLS STS API using an environment variable. By default, this feature is disabled.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_IDENTITY_TLS_ENABLE=on\n```\n\n----------------------------------------\n\nTITLE: Obtaining an ID Token for Admin REST API using Client Credentials in Keycloak\nDESCRIPTION: This code demonstrates how to obtain an ID token from Keycloak using client credentials. The request uses client_id and client_secret to retrieve a token that can be used to authenticate against the Keycloak Admin REST API.\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d \"client_id=<YOUR_CLIENT_ID>\" \\\n  -d \"client_secret=<YOUR_CLIENT_SECRET>\" \\\n  -d \"grant_type=client_credentials\" \\\n  \"http://localhost:8080/auth/realms/{realm}/protocol/openid-connect/token\"\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for MinIO\nDESCRIPTION: Creates a Kubernetes TLS secret from certificate files to enable secure communication with MinIO. Requires proper certificate files with appropriate domain names.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic tls-ssl-minio --from-file=path/to/private.key --from-file=path/to/public.crt\n```\n\n----------------------------------------\n\nTITLE: Internal Metadata Structure for Transitioned Objects in MinIO\nDESCRIPTION: Shows the internal metadata stored in 'xl.meta' for an object that has been transitioned to a remote tier. The metadata includes transition status, tier name, and reference to the transitioned object in the remote storage.\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"MetaSys\": {\n          \"x-minio-internal-transition-status\": \"Y29tcGxldGU=\",\n          \"x-minio-internal-transition-tier\": \"R0NTVElFUjE=\",\n          \"x-minio-internal-transitioned-object\": \"ZDIvN2MvZDI3Y2MwYWMtZGIzNC00ZGM1LWIxNDUtYjI5MGNjZjU1MjY5\"\n        },\n}\n```\n\n----------------------------------------\n\nTITLE: Example STS Credentials Response JSON After Authentication\nDESCRIPTION: Example JSON response containing temporary STS credentials and accessible buckets after successful authentication with Keycloak. The response includes access key, secret key, and session token that can be used for MinIO API operations.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buckets\": [\n    \"bucket-x\"\n  ],\n  \"credentials\": {\n    \"AccessKeyID\": \"6N2BALX7ELO827DXS3GK\",\n    \"SecretAccessKey\": \"23JKqAD+um8ObHqzfIh+bfqwG9V8qs9tFY6MqeFR+xxx\",\n    \"SessionToken\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiI2TjJCQUxYN0VMTzgyN0RYUzNHSyIsImFjciI6IjAiLCJhdWQiOiJhY2NvdW50IiwiYXV0aF90aW1lIjoxNTY5OTEwNTUyLCJhenAiOiJhY2NvdW50IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJleHAiOjE1Njk5MTQ1NTQsImlhdCI6MTU2OTkxMDk1NCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL2F1dGgvcmVhbG1zL2RlbW8iLCJqdGkiOiJkOTk4YTBlZS01NDk2LTQ4OWYtYWJlMi00ZWE5MjJiZDlhYWYiLCJuYmYiOjAsInBvbGljeSI6InJlYWR3cml0ZSIsInByZWZlcnJlZF91c2VybmFtZSI6Im5ld3VzZXIxIiwic2Vzc2lvbl9zdGF0ZSI6IjJiYTAyYTI2LWE5MTUtNDUxNC04M2M1LWE0YjgwYjc4ZTgxNyIsInN1YiI6IjY4ZmMzODVhLTA5MjItNGQyMS04N2U5LTZkZTdhYjA3Njc2NSIsInR5cCI6IklEIn0._UG_-ZHgwdRnsp0gFdwChb7VlbPs-Gr_RNUz9EV7TggCD59qjCFAKjNrVHfOSVkKvYEMe0PvwfRKjnJl3A_mBA\"\",\n    \"SignerType\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with Auto-creation of Buckets\nDESCRIPTION: Installs MinIO with configuration to automatically create buckets after installation. Specifies bucket name, access policy, and whether to purge existing buckets.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set buckets[0].name=bucket1,buckets[0].policy=none,buckets[0].purge=false minio/minio\n```\n\n----------------------------------------\n\nTITLE: AssumeRoleWithCertificate XML Response\nDESCRIPTION: Sample XML response from the MinIO server after successfully authenticating with a client certificate. The response includes temporary credentials (AccessKeyId, SecretAccessKey, and SessionToken).\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AssumeRoleWithCertificateResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\">\n   <AssumeRoleWithCertificateResult>\n      <Credentials>\n         <AccessKeyId>YC12ZBHUVW588BQAE5BM</AccessKeyId>\n         <SecretAccessKey>Zgl9+zdE0pZ88+hLqtfh0ocLN+WQTJixHouCkZkW</SecretAccessKey>\n         <Expiration>2021-07-19T20:10:45Z</Expiration\n         <SessionToken>eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJZQzEyWkJIVVZXNTg4QlFBRTVCTSIsImV4cCI6MTYyNjcyNTQ0NX0.wvMUf3w_x16qpVWgua8WxnV1Sgtv1jOnSu03vbrwOMzV3cI4q3_9WZD9LwlP-34DTsvbsg7gCBGh6YNriMMiQw</SessionToken>\n      </Credentials>\n   </AssumeRoleWithCertificateResult>\n   <ResponseMetadata>\n      <RequestId>169339CD8B3A6948</RequestId>\n   </ResponseMetadata>\n</AssumeRoleWithCertificateResponse>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling MinIO Helm Chart with helm uninstall\nDESCRIPTION: Alternative command to remove all Kubernetes components associated with the MinIO chart and delete the release named 'my-release'.\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall my-release\n```\n\n----------------------------------------\n\nTITLE: Testing ClientGrants API with Go Client Example\nDESCRIPTION: An example command showing how to run a Go client for testing the AssumeRoleWithClientGrants API with client ID and secret parameters. The output displays the temporary credentials returned from the API.\n\nLANGUAGE: bash\nCODE:\n```\n$ go run client-grants.go -cid PoEgXP6uVO45IsENRngDXj5Au5Ya -csec eKsw6z8CtOJVBtrOWvhRWL4TUCga\n\n##### Credentials\n{\n \"accessKey\": \"NUIBORZYTV2HG2BMRSXR\",\n \"secretKey\": \"qQlP5O7CFPc5m5IXf1vYhuVTFj7BRVJqh0FqZ86S\",\n \"expiration\": \"2018-08-21T17:10:29-07:00\",\n \"sessionToken\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJOVUlCT1JaWVRWMkhHMkJNUlNYUiIsImF1ZCI6IlBvRWdYUDZ1Vk80NUlzRU5SbmdEWGo1QXU1WWEiLCJhenAiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiZXhwIjoxNTM0ODk2NjI5LCJpYXQiOjE1MzQ4OTMwMjksImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvb2F1dGgyL3Rva2VuIiwianRpIjoiNjY2OTZjZTctN2U1Ny00ZjU5LWI0MWQtM2E1YTMzZGZiNjA4In0.eJONnVaSVHypiXKEARSMnSKgr-2mlC2Sr4fEGJitLcJF_at3LeNdTHv0_oHsv6ZZA3zueVGgFlVXMlREgr9LXA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Identity TLS Settings with Environment Variables\nDESCRIPTION: Shows how to configure MinIO's TLS certificate SSO support using the admin configuration command. This includes setting up certificate verification options.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio identity_tls --env\nKEY:\nidentity_tls  enable X.509 TLS certificate SSO support\n\nARGS:\nMINIO_IDENTITY_TLS_SKIP_VERIFY  (on|off)    trust client certificates without verification. Defaults to \"off\" (verify)\n```\n\n----------------------------------------\n\nTITLE: Enabling Combined Compression and Encryption in MinIO\nDESCRIPTION: Command to enable the use of both compression and encryption together in MinIO server, which is disabled by default for security reasons.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio compression allow_encryption=on\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with Environment Variables\nDESCRIPTION: Bash commands to set environment variables for MinIO root user and password, then start the MinIO server with a local test directory.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nminio server ~/test\n```\n\n----------------------------------------\n\nTITLE: Sample XML Response for AssumeRoleWithClientGrants\nDESCRIPTION: The XML response structure returned by the MinIO STS API when an AssumeRoleWithClientGrants request is successful. It includes temporary credentials with AccessKeyId, SecretAccessKey, Expiration time, and SessionToken.\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<AssumeRoleWithClientGrantsResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\">\n  <AssumeRoleWithClientGrantsResult>\n    <AssumedRoleUser>\n      <Arn/>\n      <AssumeRoleId/>\n    </AssumedRoleUser>\n    <Credentials>\n      <AccessKeyId>Y4RJU1RNFGK48LGO9I2S</AccessKeyId>\n      <SecretAccessKey>sYLRKS1Z7hSjluf6gEbb9066hnx315wHTiACPAjg</SecretAccessKey>\n      <Expiration>2019-08-08T20:26:12Z</Expiration>\n      <SessionToken>eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJZNFJKVTFSTkZHSzQ4TEdPOUkyUyIsImF1ZCI6IlBvRWdYUDZ1Vk80NUlzRU5SbmdEWGo1QXU1WWEiLCJhenAiOiJQb0VnWFA2dVZPNDVJc0VOUm5nRFhqNUF1NVlhIiwiZXhwIjoxNTQxODExMDcxLCJpYXQiOjE1NDE4MDc0NzEsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvb2F1dGgyL3Rva2VuIiwianRpIjoiYTBiMjc2MjktZWUxYS00M2JmLTg3MzktZjMzNzRhNGNkYmMwIn0.ewHqKVFTaP-j_kgZrcOEKroNUjk10GEp8bqQjxBbYVovV0nHO985VnRESFbcT6XMDDKHZiWqN2vi_ETX_u3Q-w</SessionToken>\n    </Credentials>\n  </AssumeRoleWithClientGrantsResult>\n  <ResponseMetadata/>\n</AssumeRoleWithClientGrantsResponse>\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Webhook via Environment Variables in MinIO\nDESCRIPTION: Shows how to configure HTTP audit logging using environment variables. This approach sets up audit logging with authentication, endpoint URL, and client certificates for secure connections.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_AUDIT_WEBHOOK_ENABLE_target1=\"on\"\nexport MINIO_AUDIT_WEBHOOK_AUTH_TOKEN_target1=\"token\"\nexport MINIO_AUDIT_WEBHOOK_ENDPOINT_target1=http://localhost:8080/minio/logs\nexport MINIO_AUDIT_WEBHOOK_CLIENT_CERT=\"/tmp/cert.pem\"\nexport MINIO_AUDIT_WEBHOOK_CLIENT_KEY==\"/tmp/key.pem\"\nminio server /mnt/data\n```\n\n----------------------------------------\n\nTITLE: Accessing MinIO Resource Metrics via Shell Command\nDESCRIPTION: This command shows how to access MinIO resource metrics at the node level. It requires replacing HOSTNAME:PORT with the actual hostname of the MinIO deployment or load balancer hostname.\n\nLANGUAGE: shell\nCODE:\n```\nhttps://HOSTNAME:PORT/minio/v2/metrics/resource\n```\n\n----------------------------------------\n\nTITLE: Example STS Credentials Response from Casdoor Authentication\nDESCRIPTION: Example JSON response showing the temporary credentials obtained after successful authentication through Casdoor, including access key, secret key, and session token.\n\nLANGUAGE: json\nCODE:\n```\n{\n  buckets: [ ],\n  credentials: {\n    AccessKeyID: \"EJOLVY3K3G4BF37YD1A0\",\n    SecretAccessKey: \"1b+w8LlDqMQOquKxIlZ2ggP+bgE51iwNG7SUVPJJ\",\n    SessionToken: \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NLZXkiOiJFSk9MVlkzSzNHNEJGMzdZRDFBMCIsImFkZHJlc3MiOltdLCJhZmZpbGlhdGlvbiI6IiIsImFwcGxlIjoiIiwiYXVkIjpbIjI0YTI1ZWEwNzE0ZDkyZTc4NTk1Il0sImF2YXRhciI6Imh0dHBzOi8vY2FzYmluLm9yZy9pbWcvY2FzYmluLnN2ZyIsImF6dXJlYWQiOiIiLCJiaW8iOiIiLCJiaXJ0aGRheSI6IiIsImNyZWF0ZWRJcCI6IiIsImNyZWF0ZWRUaW1lIjoiMjAyMS0xMi0wNlQyMzo1ODo0MyswODowMCIsImRpbmd0YWxrIjoiIiwiZGlzcGxheU5hbWUiOiJjYmMiLCJlZHVjYXRpb24iOiIiLCJlbWFpbCI6IjE5OTkwNjI2LmxvdmVAMTYzLmNvbSIsImV4cCI6MTY0MzIwMjIyMCwiZmFjZWJvb2siOiIiLCJnZW5kZXIiOiIiLCJnaXRlZSI6IiIsImdpdGh1YiI6IiIsImdpdGxhYiI6IiIsImdvb2dsZSI6IiIsImhhc2giOiIiLCJob21lcGFnZSI6IiIsImlhdCI6MTY0MzE5MjEwMSwiaWQiOiIxYzU1NTgxZS01ZmEyLTQ4NTEtOWM2NC04MjNhNjYyZDBkY2IiLCJpZENhcmQiOiIiLCJpZENhcmRUeXBlIjoiIiwiaXNBZG1pbiI6dHJ1ZSwiaXNEZWZhdWx0QXZhdGFyIjpmYWxzZSwiaXNEZWxldGVkIjpmYWxzZSwiaXNGb3JiaWRkZW4iOmZhbHNlLCJpc0dsb2JhbEFkbWluIjp0cnVlLCJpc09ubGluZSI6ZmFsc2UsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMCIsImxhbmd1YWdlIjoiIiwibGFyayI6IiIsImxhc3RTaWduaW5JcCI6IiIsImxhc3RTaWduaW5UaW1lIjoiIiwibGRhcCI6IiIsImxpbmtlZGluIjoiIiwibG9jYXRpb24iOiIiLCJuYW1lIjoiY2JjIiwibmJmIjoxNjQzMTkyMTAxLCJub25jZSI6Im51bGwiLCJvd25lciI6ImJ1aWx0LWluIiwicGFzc3dvcmQiOiIiLCJwYXNzd29yZFNhbHQiOiIiLCJwZXJtYW5lbnRBdmF0YXIiOiIiLCJwaG9uZSI6IjE4ODE3NTgzMjA3IiwicHJlSGFzaCI6IjAwY2JiNGEyOTBjZDBjZDgwZmZkZWMyZjBhOWJlM2E2IiwicHJvcGVydGllcyI6e30sInFxIjoiIiwicmFua2luZyI6MCwicmVnaW9uIjoiIiwic2NvcmUiOjIwMDAsInNpZ251cEFwcGxpY2F0aW9uIjoiYXBwLWJ1aWx0LWluIiwic2xhY2siOiIiLCJzdWIiOiIxYzU1NTgxZS01ZmEyLTQ4NTEtOWM2NC04MjNhNjYyZDBkY2IiLCJ0YWciOiJyZWFkd3JpdGUiLCJ0aXRsZSI6IiIsInR5cGUiOiJub3JtYWwtdXNlciIsInVwZGF0ZWRUaW1lIjoiIiwid2VjaGF0IjoiIiwid2Vjb20iOiIiLCJ3ZWlibyI6IiJ9.C5ZoJrojpRSePg_Ef9O-JTnc9BgoDNC5JX5AxlE9npd2tNl3ftudhny47pG6GgNDeiCMiaxueNyb_HPEPltJTw\",\n    SignerType: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO for Casdoor OpenID Connect Integration\nDESCRIPTION: Command to set up MinIO with Casdoor OpenID Connect configuration, specifying the discovery endpoint, client ID, client secret, and claim name for policy assignment.\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio identity_openid config_url=\"http://CASDOOR_ENDPOINT/.well-known/openid-configuration\" client_id=<client id> client_secret=<client secret> claim_name=\"tag\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating KMS Key Hierarchy in MinIO SSE-S3\nDESCRIPTION: This diagram shows the key hierarchy when using SSE-S3 with a KMS. It demonstrates how Customer Master Keys (CMK) protect data keys (EKs), which are used to derive Key Encryption Keys (KEKs) that protect Object Encryption Keys (OEKs).\n\nLANGUAGE: markdown\nCODE:\n```\n                                                          CMK (master key)\n                                                           |\n                       +-----------------------------------+-----------------------------------+\n                       |                                   |                                   |\n               +-------+----------------+          +-------+----------------+                 ...\n               |  EK_1 | EK_1_encrypted |          |  EK_2 | EK_2_encrypted |\n               +---+----------+---------+          +---+----------+---------+\n                   |          |                        |          |\n                   |          |                        |          |\n               +---+---+      |                    +---+---+      |\n               | KEK_1 |      |                    | KEK_2 |      |\n               +---+---+      |                    +---+---+      |\n                   |          |                        |          |\n                   |          |                        |          |\n               +---+---+      |                    +---+---+      |\n               | OEK_1 |      |                    | OEK_2 |      |\n               +---+---+      |                    +---+---+      |\n                              |                                   |\n                              |                                   |\n                              |                                   |\n                    +---------+---------+               +---------+---------+\n                    | object_metadata_1 |               | object_metadata_2 |\n                    +-------------------+               +-------------------+\n```\n\n----------------------------------------\n\nTITLE: Starting Dex Identity Service\nDESCRIPTION: Command to start the Dex identity service using a configuration file. Shows the initialization logs with settings for the OpenID Connect provider.\n\nLANGUAGE: bash\nCODE:\n```\n~ ./bin/dex serve dex.yaml\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config issuer: http://127.0.0.1:5556/dex\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config storage: sqlite3\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config static client: Example App\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config connector: mock\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config connector: local passwords enabled\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config response types accepted: [code token id_token]\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config using password grant connector: local\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config signing keys expire after: 3h0m0s\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"config id tokens valid for: 3h0m0s\"\ntime=\"2020-07-12T20:45:50Z\" level=info msg=\"listening (http) on 0.0.0.0:5556\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client with Path Options\nDESCRIPTION: Sets up the MinIO Client (mc) command with proper configuration path based on template values. Handles conditional configuration path setting for the MinIO client.\n\nLANGUAGE: shell\nCODE:\n```\n{{- if .Values.configPathmc }}\nMC_CONFIG_DIR=\"{{ .Values.configPathmc }}\"\nMC=\"/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}\"\n{{- else }}\nMC=\"/usr/bin/mc --insecure\"\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Deploying MinIO Stack with Docker Swarm on Windows\nDESCRIPTION: Alternative command to deploy a MinIO stack using Docker Swarm's stack deploy feature with the docker-compose.yaml configuration on Windows systems.\n\nLANGUAGE: sh\nCODE:\n```\ndocker stack deploy --compose-file docker-compose.yaml minio\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Audit Logging via Environment Variables\nDESCRIPTION: Example of setting up Kafka audit logging in MinIO using environment variables, which will override any configuration in the server settings.\n\nLANGUAGE: bash\nCODE:\n```\nexport MINIO_AUDIT_KAFKA_ENABLE_target1=\"on\"\nexport MINIO_AUDIT_KAFKA_BROKERS_target1=\"localhost:29092\"\nexport MINIO_AUDIT_KAFKA_TOPIC_target1=\"auditlog\"\nminio server /mnt/data\n```\n\n----------------------------------------\n\nTITLE: Setting Audit Webhook Configuration in MinIO\nDESCRIPTION: Demonstrates how to configure an HTTP audit logging endpoint using the mc admin tool. The command sets the endpoint URL for audit logging and restarts the service to apply changes.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio audit_webhook:name1 auth_token=\"\" endpoint=\"http://endpoint:port/path\"\nmc admin service restart myminio\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Lambda Handler in Python\nDESCRIPTION: A Flask-based Python lambda handler that transforms S3 objects by converting all text to uppercase. The handler responds to POST requests, retrieves the original object using a presigned URL, transforms it, and sends it back to MinIO.\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, abort, make_response\nimport requests\n\napp = Flask(__name__)\n@app.route('/', methods=['POST'])\ndef get_webhook():\n\tif request.method == 'POST':\n\t\t# obtain the request event from the 'POST' call\n\t\tevent = request.json\n\n\t\tobject_context = event[\"getObjectContext\"]\n\n\t\t# Get the presigned URL to fetch the requested\n\t\t# original object from MinIO\n\t\ts3_url = object_context[\"inputS3Url\"]\n\n\t\t# Extract the route and request token from the input context\n\t\trequest_route = object_context[\"outputRoute\"]\n\t\trequest_token = object_context[\"outputToken\"]\n\n\t\t# Get the original S3 object using the presigned URL\n\t\tr = requests.get(s3_url)\n\t\toriginal_object = r.content.decode('utf-8')\n\n\t\t# Transform all text in the original object to uppercase\n\t\t# You can replace it with your custom code based on your use case\n\t\ttransformed_object = original_object.upper()\n\n\t\t# Write object back to S3 Object Lambda\n\t\t# response sends the transformed data\n\t\t# back to MinIO and then to the user\n\t\tresp = make_response(transformed_object, 200)\n\t\tresp.headers['x-amz-request-route'] = request_route\n\t\tresp.headers['x-amz-request-token'] = request_token\n\t\treturn resp\n\n\telse:\n\t\tabort(400)\n\nif __name__ == '__main__':\n\tapp.run()\n```\n\n----------------------------------------\n\nTITLE: Setting MinIO-KES Configuration Environment Variables\nDESCRIPTION: Export commands that configure MinIO's connection to the KES server. These variables specify the KES endpoint, authentication credentials, and the key name to use for encrypting objects.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_KMS_KES_ENDPOINT=https://play.min.io:7373\nexport MINIO_KMS_KES_KEY_FILE=root.key\nexport MINIO_KMS_KES_CERT_FILE=root.cert\nexport MINIO_KMS_KES_KEY_NAME=my-minio-key\n```\n\n----------------------------------------\n\nTITLE: Setting MINIO_KMS_SECRET_KEY Environment Variable for MinIO\nDESCRIPTION: Example of how to export the MINIO_KMS_SECRET_KEY environment variable with a generated key for encrypting IAM and configuration data in MinIO.\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIO_KMS_SECRET_KEY=my-minio-key:OSMM+vkKUTCvQs9YL/CVMIMt43HFhkUpqJxTmGl6rYw=\n```\n\n----------------------------------------\n\nTITLE: Format for MINIO_KMS_SECRET_KEY Environment Variable in MinIO KMS Setup\nDESCRIPTION: Shows the required format for setting the MINIO_KMS_SECRET_KEY environment variable to enable simple KMS encryption in MinIO without an external KMS provider.\n\nLANGUAGE: sh\nCODE:\n```\nMINIO_KMS_SECRET_KEY=<key-name>:<base64-value>\n```\n\n----------------------------------------\n\nTITLE: Starting OPA Container for MinIO Integration\nDESCRIPTION: This command starts an OPA (Open Policy Agent) container with server mode enabled, exposing port 8181 for API access. It configures JSON pretty logging at debug level with console decision logs.\n\nLANGUAGE: sh\nCODE:\n```\npodman run -it \\\n    --name opa \\\n    --publish 8181:8181 \\\n    docker.io/openpolicyagent/opa:0.40.0-rootless \\\n       run --server \\\n           --log-format=json-pretty \\\n           --log-level=debug \\\n           --set=decision_logs.console=true\n```\n\n----------------------------------------\n\nTITLE: Successful Response JSON Structure for Identity Plugin\nDESCRIPTION: JSON structure for a successful (200 OK) response from the identity management plugin. Includes required fields: user identifier, maximum validity duration in seconds, and optional claims to associate with the credentials.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user\": <string>,\n    \"maxValiditySeconds\": <integer>,\n    \"claims\": <key-value-pairs>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Identity Plugin Using Environment Variables\nDESCRIPTION: Commands to configure the MinIO Identity Plugin via environment variables. Shows required parameters including endpoint URL, optional authorization token, required role policies, optional role ID, and optional comment.\n\nLANGUAGE: sh\nCODE:\n```\n$ mc admin config set myminio identity_plugin --env\nKEY:\nidentity_plugin  enable Identity Plugin via external hook\n\nARGS:\nMINIO_IDENTITY_PLUGIN_URL*          (url)       plugin hook endpoint (HTTP(S)) e.g. \"http://localhost:8181/path/to/endpoint\"\nMINIO_IDENTITY_PLUGIN_AUTH_TOKEN    (string)    authorization token for plugin hook endpoint\nMINIO_IDENTITY_PLUGIN_ROLE_POLICY*  (string)    policies to apply for plugin authorized users\nMINIO_IDENTITY_PLUGIN_ROLE_ID       (string)    unique ID to generate the ARN\nMINIO_IDENTITY_PLUGIN_COMMENT       (sentence)  optionally add a comment to this setting\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket for Veeam Backups with MinIO Client\nDESCRIPTION: Creates a new bucket named 'veeambackup' on the MinIO server using the MinIO client (mc). This bucket will be used to store Veeam backup data.\n\nLANGUAGE: bash\nCODE:\n```\nmc mb myminio/veeambackup\n```\n\n----------------------------------------\n\nTITLE: Verifying Different MinIO Deployments for Hotfix\nDESCRIPTION: Command to verify that different types of MinIO deployments work correctly with the hotfix. This tests compatibility across deployment scenarios.\n\nLANGUAGE: bash\nCODE:\n```\nλ make verify\n```\n\n----------------------------------------\n\nTITLE: Example of Security Fix Commit Suitable for Backporting in Git\nDESCRIPTION: An example commit that represents a security fix that must be backported if customers are affected. These types of fixes are especially important and have a notification mechanism through SUBNET.\n\nLANGUAGE: git\nCODE:\n```\ncommit 99bf4d0c429f04dbd013ba98840d07b759ae1702 (tag: RELEASE.2019-06-15T23-07-18Z)\nAuthor: Harshavardhana <harsha@minio.io>\nDate:   Sat Jun 15 11:27:17 2019 -0700\n\n    [security] Match ${aws:username} exactly instead of prefix match (#7791)\n\n    This PR fixes a security issue where an IAM user based\n    on his policy is granted more privileges than restricted\n    by the users IAM policy.\n\n    This is due to an issue of prefix based Matcher() function\n    which was incorrectly matching prefix based on resource\n    prefixes instead of exact match.\n```\n\n----------------------------------------\n\nTITLE: Example of Valid Fix Commit Suitable for Backporting in Git\nDESCRIPTION: An example commit that represents a valid fix that was reproduced in a customer environment. This type of fix is suitable for backporting to hotfix branches.\n\nLANGUAGE: git\nCODE:\n```\ncommit 886262e58af77ebc7c836ef587c08544e9a0c271\nAuthor: Harshavardhana <harsha@minio.io>\nDate:   Wed Nov 17 15:49:12 2021 -0800\n\n    heal legacy objects when versioning is enabled after upgrade (#13671)\n```\n\n----------------------------------------\n\nTITLE: Starting a Docker Container\nDESCRIPTION: This command starts a stopped Docker container using its container ID. The container ID can be obtained using the docker ps -a command.\n\nLANGUAGE: sh\nCODE:\n```\ndocker start <container_id>\n```\n\n----------------------------------------\n\nTITLE: Binding Proc Mount for Chroot\nDESCRIPTION: Command to bind the proc filesystem to the target chroot directory, which is necessary for proper operation of processes in the chroot environment.\n\nLANGUAGE: sh\nCODE:\n```\nsudo mount --bind /proc /mnt/export/${USER}/proc\n```\n\n----------------------------------------\n\nTITLE: Installing JStream via Go Get\nDESCRIPTION: Command to install the jstream library using Go's package management system.\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/bcicen/jstream\n```\n\n----------------------------------------\n\nTITLE: Key-Value Pair Streaming in Go\nDESCRIPTION: Example of enabling key-value pair streaming at a specific depth level in jstream. This mode emits individual key-value pairs as separate structs.\n\nLANGUAGE: go\nCODE:\n```\ndecoder := jstream.NewDecoder(f, 2).EmitKV() // enable KV streaming at a depth level of 2\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Ringbuffer in Go\nDESCRIPTION: Demonstrates the basic read and write operations with the ringbuffer package. It creates a buffer with a fixed size, writes data to it, checks available and free space, and reads data back.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/smallnest/ringbuffer\"\n)\n\nfunc main() {\n\trb := ringbuffer.New(1024)\n\n\t// write\n\trb.Write([]byte(\"abcd\"))\n\tfmt.Println(rb.Length())\n\tfmt.Println(rb.Free())\n\n\t// read\n\tbuf := make([]byte, 4)\n\trb.Read(buf)\n\tfmt.Println(string(buf))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO User with Policy\nDESCRIPTION: Function to create a MinIO user with an associated policy. It verifies credential files, creates the user if it doesn't exist, and attaches the specified policy.\n\nLANGUAGE: shell\nCODE:\n```\ncreateUser() {\n  POLICY=$1\n  #check accessKey_and_secretKey_tmp file\n  if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then\n    echo \"credentials file does not exist\"\n    return 1\n  fi\n  if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then\n    echo \"credentials file is invalid\"\n    rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP\n    return 1\n  fi\n  USER=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)\n  # Create the user if it does not exist\n  if ! checkUserExists ; then\n    echo \"Creating user '$USER'\"\n    cat $MINIO_ACCESSKEY_SECRETKEY_TMP | ${MC} admin user add myminio\n  else\n    echo \"User '$USER' already exists.\"\n  fi\n  #clean up credentials files.\n  rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP\n\n  # set policy for user\n  if [ ! -z $POLICY -a $POLICY != \" \" ] ; then\n      echo \"Adding policy '$POLICY' for '$USER'\"\n      set +e ; # policy already attach errors out, allow it.\n      ${MC} admin policy attach myminio $POLICY --user=$USER\n      set -e\n  else\n      echo \"User '$USER' has no policy attached.\"\n  fi\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if MinIO User Exists\nDESCRIPTION: Function to check if a MinIO user already exists by using the mc admin user info command and evaluating its exit code.\n\nLANGUAGE: shell\nCODE:\n```\ncheckUserExists() {\n  CMD=$(${MC} admin user info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)\n  return $?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ufw Firewall for MinIO\nDESCRIPTION: Commands for configuring the ufw firewall on Debian-based distributions to allow traffic to MinIO's default port or port range.\n\nLANGUAGE: sh\nCODE:\n```\nufw allow 9000\n```\n\nLANGUAGE: sh\nCODE:\n```\nufw allow 9000:9010/tcp\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO on macOS via Binary Download\nDESCRIPTION: Commands to download, make executable, and run the MinIO binary on macOS. This provides direct access to the latest version without using a package manager.\n\nLANGUAGE: sh\nCODE:\n```\nwget https://dl.min.io/server/minio/release/darwin-amd64/minio\nchmod +x minio\n./minio server /data\n```\n\n----------------------------------------\n\nTITLE: Reinstalling MinIO from Official Homebrew Repo\nDESCRIPTION: Commands to uninstall a previous MinIO installation and reinstall it from the official Homebrew repository. This ensures you're using the officially supported version.\n\nLANGUAGE: sh\nCODE:\n```\nbrew uninstall minio\nbrew install minio/stable/minio\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO on macOS using Homebrew\nDESCRIPTION: Commands to install and run the latest stable MinIO package on macOS using Homebrew. This installs MinIO from the official minio/stable repo and starts a server with data stored in the specified directory.\n\nLANGUAGE: sh\nCODE:\n```\nbrew install minio/stable/minio\nminio server /data\n```\n\n----------------------------------------\n\nTITLE: Setting up MinIO Development Environment with Git Clone\nDESCRIPTION: Clone the MinIO repository and install the binary to the local GOPATH. This is the first step in setting up a development environment for contributing to MinIO.\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/minio/minio\ncd minio\ngo install -v\nls $(go env GOPATH)/bin/minio\n```"
  }
]