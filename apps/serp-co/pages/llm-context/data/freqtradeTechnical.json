[
  {
    "owner": "freqtrade",
    "repo": "technical",
    "content": "TITLE: Resampling TimeFrame Data in Python\nDESCRIPTION: Shows how to resample data to a higher timeframe (4h) and merge it back with original dataframe using resample_to_interval and resampled_merge functions. Includes handling of technical indicators on resampled data.\nSOURCE: https://github.com/freqtrade/technical/blob/main/docs/general-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pandas import DataFrame\nfrom technical.util import resample_to_interval, resampled_merge\nimport technical.indicators as ftt\n\ntimeframe = '1h'\n\ndef populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n\n    # Resampling to 4h:\n    dataframe_long = resample_to_interval(dataframe, 240)  # 240 = 4 * 60 = 4h\n\n    dataframe_long['cmf'] = ftt.chaikin_money_flow(dataframe_long)\n    # Combine the 2 dataframes\n    dataframe = resampled_merge(dataframe, dataframe_long, fill_na=True)\n\n    \n    # The resulting dataframe will have 5 resampled columns in addition to the regular columns,\n    # following the template resample_<interval_in_minutes>_<orig_column_name>.\n    # So in the above example, the column names would be:\n    # ['resample_240_open', 'resample_240_high', 'resample_240_low','resample_240_close', 'resample_240_cmf']\n\n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Using Technical Indicators and Resampling in Python\nDESCRIPTION: Example showing how to import and use technical indicators along with resampling utilities to analyze data at different timeframes. Demonstrates resampling from 1h to 4h intervals and merging the results.\nSOURCE: https://github.com/freqtrade/technical/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom technical.indicators import accumulation_distribution, ...\nfrom technical.util import resample_to_interval, resampled_merge\n\n# Assuming 1h dataframe -resampling to 4h:\ndataframe_long = resample_to_interval(dataframe, 240)  # 240 = 4 * 60 = 4h\n\ndataframe_long['rsi'] = ta.RSI(dataframe_long)\n# Combine the 2 dataframes\ndataframe = resampled_merge(dataframe, dataframe_long, fill_na=True)\n\n\"\"\"\nThe resulting dataframe will have 5 resampled columns in addition to the regular columns,\nfollowing the template resample_<interval_in_minutes>_<orig_column_name>.\nSo in the above example:\n['resample_240_open', 'resample_240_high', 'resample_240_low','resample_240_close', 'resample_240_rsi']\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Technical Indicators and Timeframe Resampling\nDESCRIPTION: Example of how to import and use the Technical library, including resampling dataframes to longer timeframes and merging them back together. This demonstrates the resample_to_interval and resampled_merge utility functions.\nSOURCE: https://github.com/freqtrade/technical/blob/main/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom technical.indicators import accumulation_distribution, ...\nfrom technical.util import resample_to_interval, resampled_merge\n\n# Assuming 1h dataframe -resampling to 4h:\ndataframe_long = resample_to_interval(dataframe, 240)  # 240 = 4 * 60 = 4h\n\ndataframe_long['rsi'] = ta.RSI(dataframe_long)\n# Combine the 2 dataframes\ndataframe = resampled_merge(dataframe, dataframe_long, fill_na=True)\n\n\"\"\"\nThe resulting dataframe will have 5 resampled columns in addition to the regular columns,\nfollowing the template resample_<interval_in_minutes>_<orig_column_name>.\nSo in the above example:\n['resample_240_open', 'resample_240_high', 'resample_240_low','resample_240_close', 'resample_240_rsi']\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Technical Indicators in Python\nDESCRIPTION: Demonstrates basic usage of technical indicators by importing the library and calculating Chaikin Money Flow (CMF) on a dataframe.\nSOURCE: https://github.com/freqtrade/technical/blob/main/docs/general-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport technical.indicators as ftt\n\n# The indicator calculations can now be used as follows:\n\ndataframe['cmf'] = ftt.chaikin_money_flow(dataframe)\n```\n\n----------------------------------------\n\nTITLE: Python Technical Analysis Package Dependencies\nDESCRIPTION: Defines required Python packages and their versions for technical analysis. Includes TA-Lib for technical indicators, pandas for data manipulation, and numpy for numerical operations. Matplotlib is commented out.\nSOURCE: https://github.com/freqtrade/technical/blob/main/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTA-Lib==0.4.38\npandas==2.2.3\nnumpy==1.26.4\n# matplotlib\n```\n\n----------------------------------------\n\nTITLE: Installing Technical Package with pip\nDESCRIPTION: Commands to install the technical package either from PyPI or directly from GitHub repository\nSOURCE: https://github.com/freqtrade/technical/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install technical\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/freqtrade/technical\n```\n\n----------------------------------------\n\nTITLE: Installing Technical Package using pip\nDESCRIPTION: Commands to install the Technical package either from PyPI or directly from GitHub repository for the latest version.\nSOURCE: https://github.com/freqtrade/technical/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install technical\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/freqtrade/technical\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Freqtrade Technical Package\nDESCRIPTION: This snippet lists the required Python packages for development and testing of the Freqtrade technical package. It includes pytest and its plugins for testing, syrupy for snapshot testing, and tools like ruff, isort, and codespell for code quality and formatting.\nSOURCE: https://github.com/freqtrade/technical/blob/main/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements.txt\n\npytest==8.3.5\npytest-cov==6.1.1\npytest-mock==3.14.0\npytest-random-order==1.1.1\n# Pytest snapshots\nsyrupy==4.9.1\n\nruff==0.11.6\nisort==6.0.1\ncodespell==2.4.1\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for MkDocs Documentation\nDESCRIPTION: This requirements file lists the specific Python packages and version constraints needed to build MkDocs documentation for the freqtrade/technical project. It includes the core MkDocs package, the Material theme, and several extensions for enhanced Markdown support.\nSOURCE: https://github.com/freqtrade/technical/blob/main/docs/requirements-docs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmarkdown==3.8\nmkdocs==1.6.1\nmkdocs-material==9.6.12\nmdx_truly_sane_lists==1.3\npymdown-extensions==10.14.3\njinja2==3.1.6\nmike==2.1.3\n```\n\n----------------------------------------\n\nTITLE: Updating Version Number in Python\nDESCRIPTION: Instructions for bumping the version number in the technical library's __init__.py file before creating a new release. This is a crucial step in the release process.\nSOURCE: https://github.com/freqtrade/technical/blob/main/docs/developer.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBump the `__version__`  naming in `technical/__init__.py` and create a new release on github with a matching tag.\n```"
  }
]