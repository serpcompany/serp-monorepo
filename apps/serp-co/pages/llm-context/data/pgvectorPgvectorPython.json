[
  {
    "owner": "pgvector",
    "repo": "pgvector-python",
    "content": "TITLE: Enabling pgvector Extension in Django Migration\nDESCRIPTION: Creates a Django migration to enable the pgvector extension in the database.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.django import VectorExtension\n\nclass Migration(migrations.Migration):\n    operations = [\n        VectorExtension()\n    ]\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension with Psycopg 3\nDESCRIPTION: Shows how to enable the pgvector extension using Psycopg 3. This is required before performing vector operations.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nconn.execute('CREATE EXTENSION IF NOT EXISTS vector')\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension with SQLModel\nDESCRIPTION: Demonstrates how to enable the pgvector extension using SQLModel. This is a necessary step before using vector operations.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsession.exec(text('CREATE EXTENSION IF NOT EXISTS vector'))\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in SQLAlchemy\nDESCRIPTION: Shows how to enable the pgvector extension using SQLAlchemy.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsession.execute(text('CREATE EXTENSION IF NOT EXISTS vector'))\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Column in SQLAlchemy Model\nDESCRIPTION: Demonstrates how to add a vector column to a SQLAlchemy model.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.sqlalchemy import Vector\n\nclass Item(Base):\n    embedding = mapped_column(Vector(3))\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Field to Django Model\nDESCRIPTION: Demonstrates how to add a vector field to a Django model using VectorField.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.django import VectorField\n\nclass Item(models.Model):\n    embedding = VectorField(dimensions=3)\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Column with SQLModel\nDESCRIPTION: Shows how to add a vector column to a SQLModel class. This example uses a 3-dimensional vector field.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.sqlalchemy import Vector\n\nclass Item(SQLModel, table=True):\n    embedding: Any = Field(sa_type=Vector(3))\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Column with Peewee\nDESCRIPTION: Demonstrates how to add a vector column to a Peewee model. This example uses a 3-dimensional vector field.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.peewee import VectorField\n\nclass Item(BaseModel):\n    embedding = VectorField(dimensions=3)\n```\n\n----------------------------------------\n\nTITLE: Registering Vector Type with Psycopg 3\nDESCRIPTION: Demonstrates how to register the vector type with a Psycopg 3 connection. This step is necessary for proper vector handling.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.psycopg import register_vector\n\nregister_vector(conn)\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors in SQLAlchemy\nDESCRIPTION: Demonstrates how to query for nearest neighbors using L2 distance in SQLAlchemy.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsession.scalars(select(Item).order_by(Item.embedding.l2_distance([3, 1, 2])).limit(5))\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors in Django\nDESCRIPTION: Demonstrates how to query for nearest neighbors using L2Distance in Django.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.django import L2Distance\n\nItem.objects.order_by(L2Distance('embedding', [3, 1, 2]))[:5]\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Psycopg 3\nDESCRIPTION: Demonstrates how to query for the nearest neighbors to a given vector using Psycopg 3.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nconn.execute('SELECT * FROM items ORDER BY embedding <-> %s LIMIT 5', (embedding,)).fetchall()\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Peewee\nDESCRIPTION: Demonstrates how to query for the nearest neighbors to a given vector using L2 distance in Peewee.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nItem.select().order_by(Item.embedding.l2_distance([3, 1, 2])).limit(5)\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with SQLModel\nDESCRIPTION: Shows how to query for the nearest neighbors to a given vector using L2 distance in SQLModel.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsession.exec(select(Item).order_by(Item.embedding.l2_distance([3, 1, 2])).limit(5))\n```\n\n----------------------------------------\n\nTITLE: Creating Approximate Index with SQLModel\nDESCRIPTION: Demonstrates how to create an approximate index (HNSW or IVFFlat) for vector searches using SQLModel.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import Index\n\nindex = Index(\n    'my_index',\n    Item.embedding,\n    postgresql_using='hnsw',\n    postgresql_with={'m': 16, 'ef_construction': 64},\n    postgresql_ops={'embedding': 'vector_l2_ops'}\n)\n# or\nindex = Index(\n    'my_index',\n    Item.embedding,\n    postgresql_using='ivfflat',\n    postgresql_with={'lists': 100},\n    postgresql_ops={'embedding': 'vector_l2_ops'}\n)\n\nindex.create(engine)\n```\n\n----------------------------------------\n\nTITLE: Adding Approximate Index in Django Model\nDESCRIPTION: Shows how to add an approximate index (HNSW or IVFFlat) to a Django model.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pgvector.django import HnswIndex, IvfflatIndex\n\nclass Item(models.Model):\n    class Meta:\n        indexes = [\n            HnswIndex(\n                name='my_index',\n                fields=['embedding'],\n                m=16,\n                ef_construction=64,\n                opclasses=['vector_l2_ops']\n            ),\n            # or\n            IvfflatIndex(\n                name='my_index',\n                fields=['embedding'],\n                lists=100,\n                opclasses=['vector_l2_ops']\n            )\n        ]\n```\n\n----------------------------------------\n\nTITLE: Adding Approximate Index in SQLAlchemy\nDESCRIPTION: Shows how to add an approximate index (HNSW or IVFFlat) using SQLAlchemy.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nindex = Index(\n    'my_index',\n    Item.embedding,\n    postgresql_using='hnsw',\n    postgresql_with={'m': 16, 'ef_construction': 64},\n    postgresql_ops={'embedding': 'vector_l2_ops'}\n)\n# or\nindex = Index(\n    'my_index',\n    Item.embedding,\n    postgresql_using='ivfflat',\n    postgresql_with={'lists': 100},\n    postgresql_ops={'embedding': 'vector_l2_ops'}\n)\n\nindex.create(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Approximate Index with Psycopg 3\nDESCRIPTION: Shows how to create an approximate index (HNSW or IVFFlat) for vector searches using Psycopg 3.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nconn.execute('CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)')\n# or\nconn.execute('CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100)')\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data in SQLAlchemy\nDESCRIPTION: Shows how to insert a vector into a SQLAlchemy model instance.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nitem = Item(embedding=[1, 2, 3])\nsession.add(item)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data in Django\nDESCRIPTION: Shows how to insert a vector into a Django model instance.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nitem = Item(embedding=[1, 2, 3])\nitem.save()\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data with SQLModel\nDESCRIPTION: Demonstrates how to insert a vector into the database using SQLModel. The vector is represented as a list of numbers.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nitem = Item(embedding=[1, 2, 3])\nsession.add(item)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data with Psycopg 3\nDESCRIPTION: Shows how to insert a vector into the database using Psycopg 3. The vector is represented as a NumPy array.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nembedding = np.array([1, 2, 3])\nconn.execute('INSERT INTO items (embedding) VALUES (%s)', (embedding,))\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data with Peewee\nDESCRIPTION: Shows how to insert a vector into the database using Peewee. The vector is represented as a list of numbers.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nitem = Item.create(embedding=[1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Creating Sparse Vector from Various Data Structures\nDESCRIPTION: Demonstrates different ways to create a sparse vector, including from a list, NumPy array, SciPy sparse array, or dictionary of non-zero elements.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nvec = SparseVector([1, 0, 2, 0, 3, 0])\n\n# Or a NumPy array\nvec = SparseVector(np.array([1, 0, 2, 0, 3, 0]))\n\n# Or a SciPy sparse array\narr = coo_array(([1, 2, 3], ([0, 2, 4],)), shape=(6,))\nvec = SparseVector(arr)\n\n# Or a dictionary of non-zero elements\nvec = SparseVector({0: 1, 2: 2, 4: 3}, 6)\n```\n\n----------------------------------------\n\nTITLE: Creating Half Vector from List or NumPy Array\nDESCRIPTION: Shows how to create a half vector from either a list or a NumPy array. Half vectors use less memory than full precision vectors.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nvec = HalfVector([1, 2, 3])\n\n# Or a NumPy array\nvec = HalfVector(np.array([1, 2, 3]))\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector-python via pip\nDESCRIPTION: Command to install the pgvector-python library using pip package manager.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install pgvector\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Lists required Python packages including vector database support (pgvector), database connectivity (psycopg), ML model support (transformers), and colbert-ai integration.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/colbert/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncolbert-ai\npgvector\npsycopg[binary]\ntransformers==4.49.0\n```\n\n----------------------------------------\n\nTITLE: Requirements File Dependencies\nDESCRIPTION: Lists required Python packages for pgvector-python including numpy for numerical computations, pgvector for vector operations in PostgreSQL, psycopg for PostgreSQL connectivity, PyTorch for deep learning, and transformers for natural language processing models.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/sparse_search/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\npgvector\npsycopg[binary]\ntorch\ntransformers\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for pgvector Integration\nDESCRIPTION: A requirements file listing three essential packages: pgvector for PostgreSQL vector operations, psycopg with binary support for database connectivity, and sentence-transformers for generating embeddings from text.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/sentence_transformers/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npgvector\npsycopg[binary]\nsentence-transformers\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for pgvector-python Project\nDESCRIPTION: A list of required Python packages needed to run a pgvector-python project. The dependencies include OpenAI's library, pgvector for vector operations in PostgreSQL, and psycopg with its binary implementation for PostgreSQL database connectivity.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/openai/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nopenai\npgvector\npsycopg[binary]\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Requirements\nDESCRIPTION: Core dependencies required for running pgvector with Python, including LLM integration (ollama), vector operations (pgvector), and PostgreSQL connectivity (psycopg[binary])\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/rag/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nollama\npgvector\npsycopg[binary]\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies in requirements.txt\nDESCRIPTION: Lists required Python packages for the pgvector-python project. Includes gensim for topic modeling, numpy and scipy for numerical operations, pgvector for vector similarity search in PostgreSQL, and psycopg for PostgreSQL database connectivity. Note the version constraint on scipy to be less than 1.13.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/gensim/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ngensim\nnumpy\npgvector\npsycopg[binary]\nscipy<1.13\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Lists required Python packages including matplotlib for visualization, pgvector for vector operations, psycopg for PostgreSQL connectivity, PyTorch for machine learning, and tqdm for progress bars.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/image_search/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmatplotlib\npgvector\npsycopg[binary]\ntorch\ntorchvision\ntqdm\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for pgvector-python Project\nDESCRIPTION: This snippet lists the required Python packages for the pgvector-python project. It includes datasets for data handling, imagehash for image processing, matplotlib for data visualization, pgvector for vector operations in PostgreSQL, and psycopg[binary] for PostgreSQL database connectivity.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/imagehash/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ndatasets\nimagehash\nmatplotlib\npgvector\npsycopg[binary]\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for pgvector with Cohere\nDESCRIPTION: A simple list of Python package dependencies including Cohere for embeddings, pgvector for vector operations in PostgreSQL, and psycopg with binary support for PostgreSQL connection.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/cohere/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncohere\npgvector\npsycopg[binary]\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for pgvector Project\nDESCRIPTION: A list of Python package dependencies required for a project involving pgvector. The dependencies include pgvector (PostgreSQL vector similarity search extension), psycopg with binary support (PostgreSQL database adapter for Python), and rdkit (cheminformatics and machine learning software).\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/rdkit/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npgvector\npsycopg[binary]\nrdkit\n```\n\n----------------------------------------\n\nTITLE: Requirements List for pgvector Python Project\nDESCRIPTION: A list of Python package dependencies required for the pgvector-python project. It includes colpali-engine, datasets, pgvector, and psycopg with binary extensions.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/colpali/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncolpali-engine\ndatasets\npgvector\npsycopg[binary]\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for pgvector-python\nDESCRIPTION: This code snippet lists the Python package dependencies required for the pgvector-python project, including h5py for HDF5 file format support, implicit for recommendation algorithms, pgvector for PostgreSQL vector operations, psycopg with binary support for PostgreSQL connection, and SQLAlchemy for SQL toolkit and ORM.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/implicit/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nh5py\nimplicit\npgvector\npsycopg[binary]\nSQLAlchemy\n```\n\n----------------------------------------\n\nTITLE: Dependency List for pgvector-python\nDESCRIPTION: A list of Python package dependencies required for the pgvector-python project. The project requires numpy for numerical computations, pgvector for PostgreSQL vector operations, and psycopg[binary] for PostgreSQL database connectivity.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/loading/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\npgvector\npsycopg[binary]\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies List for pgvector Project\nDESCRIPTION: Lists required Python packages for using pgvector with PostgreSQL. Includes the pgvector extension for vector operations, psycopg for PostgreSQL connectivity, and sentence-transformers for generating embeddings.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/hybrid_search/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npgvector\npsycopg[binary]\nsentence-transformers\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for pgvector Project\nDESCRIPTION: This requirements.txt file lists the Python packages needed for a project that uses pgvector with Python. It includes lightfm (a recommendation engine), pgvector (for vector operations in PostgreSQL), psycopg with binary support (PostgreSQL adapter), and SQLAlchemy (SQL toolkit and ORM).\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/lightfm/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlightfm\npgvector\npsycopg[binary]\nSQLAlchemy\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for pgvector Project\nDESCRIPTION: This snippet lists the required Python packages for a project using pgvector with PostgreSQL. It includes pgvector for vector operations, psycopg for PostgreSQL database connectivity, scikit-surprise for recommendation systems, and SQLAlchemy for ORM functionality.\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/examples/surprise/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npgvector\npsycopg[binary]\nscikit-surprise\nSQLAlchemy\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for pgvector-python Project\nDESCRIPTION: This is a requirements file listing all the Python packages needed for the pgvector-python project. It includes PostgreSQL database adapters (asyncpg, psycopg, pg8000), ORMs (Django, SQLAlchemy, peewee, sqlmodel), scientific computing libraries (numpy, scipy), and testing frameworks (pytest).\nSOURCE: https://github.com/pgvector/pgvector-python/blob/master/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasyncpg\nDjango\nnumpy\npeewee\npg8000\npsycopg[binary,pool]\npsycopg2-binary\npytest\npytest-asyncio\nscipy\nSQLAlchemy[asyncio]>=2\nsqlmodel>=0.0.12\n```"
  }
]