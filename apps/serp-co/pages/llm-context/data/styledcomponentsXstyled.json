[
  {
    "owner": "styled-components",
    "repo": "xstyled",
    "content": "TITLE: Extending Theme Type for Emotion with TypeScript\nDESCRIPTION: Provides a TypeScript declaration file example (`styled.d.ts`) for extending the theme type when using xstyled with Emotion (`@emotion/react`). It demonstrates importing required types, creating a custom theme interface (`AppTheme`) based on xstyled's theme, and using module augmentation to integrate this custom theme into `@xstyled/system`'s `Theme` and `@emotion/react`'s `Theme` for enhanced type checking.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/typescript.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// styled.d.ts\n\n// import original module declarations\nimport '@xstyled/system'\nimport '@emotion/react'\nimport { ITheme, DefaultTheme as XStyledDefaultTheme } from '@xstyled/emotion'\n\ninterface AppTheme extends ITheme, XStyledDefaultTheme {\n  /* Customize your theme */\n}\n\n// and extend them!\ndeclare module '@xstyled/system' {\n  export interface Theme extends AppTheme {}\n}\ndeclare module '@emotion/react' {\n  export interface Theme extends XStyledDefaultTheme {\n    /* Customize your theme */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing xstyled and styled-components via npm (Bash)\nDESCRIPTION: This snippet demonstrates how to install both the @xstyled/styled-components package and the styled-components library using npm. Installation is a prerequisite for using xstyled in a React project. Users should run this command in their project root directory; it will add both dependencies to package.json for use with a supported version of React.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstyled/styled-components styled-components\n```\n\n----------------------------------------\n\nTITLE: Installing styled-components and xstyled packages\nDESCRIPTION: Command to install styled-components and its xstyled extension via npm package manager.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install styled-components @xstyled/styled-components\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Width Using Object Syntax in xstyled\nDESCRIPTION: Demonstrates using xstyled's object syntax to apply different width values at various breakpoints. The example creates an image that's 16 units wide by default, 32 on medium screens, and 48 on large screens.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/responsive-design.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Width of 16 by default, 32 on medium screens, and 48 on large screens\n<x.img w={{ _: 16, md: 32, lg: 48 }} src=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Styling ChatNotification Component Using xstyled Utility Props in JSX\nDESCRIPTION: This snippet uses xstyled to style a React ChatNotification component declaratively via utility props on elements instead of CSS. It builds the same notification UI with props such as maxWidth, mx, p, display, bg, borderRadius, boxShadow, and spaceX for layout and appearance. The snippet also includes SVG icon definitions styled via xstyled props. This eliminates the need for writing custom CSS while leveraging the design system's theme values and responsive features automatically. Dependencies include React and xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/utility-props.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ChatNotification() {\n  return (\n    <x.div\n      p={6}\n      maxWidth=\"sm\"\n      mx=\"auto\"\n      bg=\"white\"\n      borderRadius=\"xl\"\n      boxShadow=\"md\"\n      display=\"flex\"\n      alignItems=\"center\"\n      spaceX={4}\n    >\n      <x.div flexShrink={0}>\n        <x.img h={12} w={12} src=\"/img/logo.svg\" alt=\"ChitChat Logo\" />\n      </x.div>\n      <x.div>\n        <x.h4 fontSize=\"xl\" fontWeight=\"medium\" color=\"black\">\n          ChitChat\n        </x.h4>\n        <x.p color=\"gray-500\">You have a new message!</x.p>\n      </x.div>\n    </x.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive xstyled button with x.*\nDESCRIPTION: This snippet creates a responsive button using xstyled's `x.*` and its responsive utilities. The width is set using a responsive object `w` that defines the width based on different screen sizes using the shorthand syntax.  It demonstrates the use of xstyled for handling responsive styles effectively.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { x } from '@xstyled/emotion'\n\nconst Button = ({ children }) => {\n  return <x.button w={{ _: 200, md: 300 }}>{children}</x.button>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Flex Direction with xstyled in JSX\nDESCRIPTION: Shows how to apply responsive flex directions based on breakpoints using an object notation for the flexDirection prop. With React and xstyled dependencies, flexDirection={{ xs: 'column', md: 'row' }} sets vertical stacking on extra small screens and horizontal layout on medium and larger screens. This enables adaptive user interface layout depending on viewport size. This snippet exemplifies how to leverage xstyled's responsive design utilities for flexible flex layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-direction.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"flex\" flexDirection={{ xs: 'column', md: 'row' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: xstyled Design Token Alias Creation in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to extend the default xstyled theme by creating custom design token aliases using the 'th' utility. It imports 'th' and 'defaultTheme' from xstyled, then assigns an alias token 'cta-background-color' that references the color 'red-500' from the base color palette. This pattern facilitates scaling of design systems by reusing and aliasing colors or other tokens across the application.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/utility-props.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { th, defaultTheme } from '@xstyled/...'\n\nconst theme = {\n  ...defaultTheme,\n  colors: {\n    ...defaultTheme.colors,\n    'cta-background-color': th.color('red-500'),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Responsive Card Layout with xstyled\nDESCRIPTION: Illustrates a responsive card layout that uses a stacked design on small screens and side-by-side layout on larger screens. The example includes responsive properties for display, width, and flex behaviors across breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/responsive-design.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      maxWidth={{ _: 'md', md: '2xl' }}\n      mx=\"auto\"\n      bg=\"white\"\n      borderRadius=\"xl\"\n      boxShadow=\"md\"\n      overflow=\"hidden\"\n    >\n      <x.div display={{ md: 'flex' }}>\n        <x.div flexShrink={{ md: 0 }}>\n          <x.img\n            h={48}\n            w={{ _: '100%', md: 48 }}\n            objectFit=\"cover\"\n            src=\"https://images.unsplash.com/photo-1515711660811-48832a4c6f69?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=448&q=80\"\n            alt=\"Man looking at item at a store\"\n          />\n        </x.div>\n        <x.div p={8}>\n          <x.div\n            textTransform=\"uppercase\"\n            letterSpacing=\"wide\"\n            fontSize=\"sm\"\n            color=\"pink-500\"\n            fontWeight=\"semibold\"\n          >\n            Case study\n          </x.div>\n          <x.a\n            href=\"#\"\n            display=\"block\"\n            mt={1}\n            fontSize=\"lg\"\n            lineHeight=\"tight\"\n            fontWeight=\"medium\"\n            color=\"black\"\n            textDecoration={{ _: 'none', hover: 'underline' }}\n          >\n            Finding customers for your new business\n          </x.a>\n          <x.p mt={2} color=\"gray-500\">\n            Getting a new business off the ground is a lot of hard work. Here\n            are five ideas you can use to find your first customers.\n          </x.p>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div\n    maxWidth={{ _: 'md', md: '2xl' }}\n    mx=\"auto\"\n    bg=\"white\"\n    borderRadius=\"xl\"\n    boxShadow=\"md\"\n    overflow=\"hidden\"\n  >\n    <x.div display={{ md: 'flex' }}>\n      <x.div flexShrink={{ md: 0 }}>\n        <x.img\n          h={48}\n          w={{ _: '100%', md: 48 }}\n          objectFit=\"cover\"\n          src=\"/img/store.jpg\"\n          alt=\"Man looking at item at a store\"\n        />\n      </x.div>\n      <x.div p={8}>\n        <x.div\n          textTransform=\"uppercase\"\n          letterSpacing=\"wide\"\n          fontSize=\"sm\"\n          color=\"pink-500\"\n          fontWeight=\"semibold\"\n        >\n          Case study\n        </x.div>\n        <x.a\n          href=\"#\"\n          display=\"block\"\n          mt={1}\n          fontSize=\"lg\"\n          lineHeight=\"tight\"\n          fontWeight=\"medium\"\n          color=\"black\"\n          textDecoration={{ hover: 'underline' }}\n        >\n          Finding customers for your new business\n        </x.a>\n        <x.p mt={2} color=\"gray-500\">\n          Getting a new business off the ground is a lot of hard work. Here are\n          five ideas you can use to find your first customers.\n        </x.p>\n      </x.div>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Theme-based Customization of Size Scale in theme.js\nDESCRIPTION: This snippet demonstrates how to extend the theme's sizes scale by adding custom size values such as 'sm', 'md', 'lg', and 'xl'. These values can be referenced in maxHeight or other dimension utilities to ensure consistent styling across components. It emphasizes theme customization for scalable design.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-height.mdx#_snippet_4\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    sizes: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Themed Button Component\nDESCRIPTION: This snippet demonstrates the creation of a button styled component using xstyled. It utilizes automatic theming to apply styles based on theme values like colors, radii, font weights, and transitions. The button's styles are defined using template literals, and xstyled automatically resolves theme keys within the styles.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  border-radius: md;\n  font-weight: semibold;\n  transition: default;\n  background-color: emerald-500;\n  color: #fff;\n\n  @media (min-width: md) {\n    font-size: lg;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Allowing Flex Item Shrink with Styled Components in React (JSX)\nDESCRIPTION: Demonstrates how to use the `flexShrink={1}` prop on a flex item to enable shrinking when necessary inside a flex container. This snippet uses xstyled's `<x.div>` elements with various styling props such as flexGrow, height, width, padding, background color, and font settings to visually show how the middle item (with flexShrink=1) collapses to fit the container. It requires React, styled components, and xstyled configured to handle the `flexShrink` prop correctly.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-shrink.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" spaceX={3} w={250} mx=\"auto\">\n      <x.div\n        flexGrow={1}\n        h={16}\n        w={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"orange-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n      <x.div\n        flexShrink={1}\n        h={16}\n        w={900}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"orange-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n      <x.div\n        flexGrow={1}\n        h={16}\n        w={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"orange-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flexGrow={1} w={16}>\n      {/* This item will grow or shrink as needed */}\n    </x.div>\n    <x.div flexShrink={1} w={900}>\n      {/* This item will shrink */}\n    </x.div>\n    <x.div flexGrow={1} w={16}>\n      {/* This item will grow or shrink as needed */}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with xstyled v2 Syntax (JavaScript)\nDESCRIPTION: Shows how to use the x namespace from @xstyled to create a styled button in React, using both stateful and color props. Dependencies: @xstyled/core, React. Parameters: type, color, transition, bg. Inputs: Props for x.button. Output: Renders a button with color and hover background changes. Limitation: Must be used within React and with xstyled's x context.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { x } from '@xstyled/...'\n\nfunction Button() {\n  return (\n    <x.button\n      type=\"button\"\n      color=\"white\"\n      transition\n      bg={{ _: 'emerald-500', hover: 'emerald-800' }}\n    >\n      Upgrade\n    </x.button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Alignment of Flex Content in xstyled Using Breakpoint Notation\nDESCRIPTION: This example demonstrates how to apply responsive alignContent behavior at specific breakpoints by using object notation. Setting alignContent={{ md: 'center' }} causes the alignment to switch to 'center' on medium screens and larger, enabling responsive design tactics within React JSX components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-content.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" alignContent={{ md: 'center' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Using Inline CSS Selector States in xstyled\nDESCRIPTION: Shows how to use inline CSS selectors as states for more complex styling scenarios. This example uses pseudo-selectors and attribute selectors to style a link based on its href attribute and hover state.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hover-focus-and-other-states.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.a\n        href=\"#inline-states\"\n        color={{\n          '&': 'indigo-500',\n          '&:hover': 'indigo-600',\n          '&[href^=\"#\"]': { '&': 'green-500', '&:hover': 'green-600' },\n        }}\n      >\n        Link\n      </x.a>\n    </x.div>\n  </template>\n  <x.a\n    href=\"#inline-states\"\n    color={{\n      '&': 'indigo-500',\n      '&:hover': 'indigo-600',\n      '&[href^=\"#\"]': { '&': 'green-500', '&:hover': 'green-600' },\n    }}\n  >\n    Link\n  </x.a>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Flex Wrap in xstyled\nDESCRIPTION: This example demonstrates applying flexWrap responsively using object notation to change wrapping behavior at specific breakpoints, such as 'wrap-reverse' on medium screens and larger, enabling adaptive layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-wrap.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div display=\"flex\" flexWrap={{ md: 'wrap-reverse' }}>\n  {/* ...additional content... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Form with Focus and Hover States in xstyled\nDESCRIPTION: A complete example showing how to create a styled form with a text input and button that have hover and focus states. The example demonstrates borderColor, outline, ring, and background color transitions on different states.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hover-focus-and-other-states.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.form display=\"flex\" w=\"full\" maxWidth=\"sm\" mx=\"auto\" spaceX={3}>\n      <x.input\n        flex=\"1 0 0\"\n        appearance=\"none\"\n        border\n        borderColor={{ _: 'transparent', focus: 'transparent' }}\n        w=\"full\"\n        py={2}\n        px={4}\n        bg=\"white\"\n        color={{ _: 'gray-700', placeholder: 'gray-400' }}\n        boxShadow=\"md\"\n        borderRadius=\"lg\"\n        fontSize=\"base\"\n        outline={{ focus: 'none' }}\n        ring={{ focus: 2 }}\n        ringColor={{ focus: 'purple-600' }}\n        type=\"email\"\n        placeholder=\"Your email\"\n      />\n      <x.button\n        type=\"button\"\n        flexShrink={0}\n        bg={{ _: 'purple-600', hover: 'purple-700' }}\n        color=\"white\"\n        fontSize=\"base\"\n        fontWeight=\"semibold\"\n        py={2}\n        px={4}\n        borderRadius=\"lg\"\n        boxShadow=\"md\"\n        outline={{ focus: 'none' }}\n        ring={{ focus: 2 }}\n        ringColor={{ focus: 'purple-500' }}\n      >\n        Sign up\n      </x.button>\n    </x.form>\n  </template>\n  <form>\n    <x.input\n      border\n      borderColor=\"transparent\"\n      outline={{ focus: 'none' }}\n      ring={{ focus: 2 }}\n      ringColor={{ focus: 'purple-600' }}\n      border={{ focus: 'transparent' }}\n    />\n    <x.button\n      bg={{ _: 'purple-600', hover: 'purple-700' }}\n      outline={{ focus: 'none' }}\n      ring={{ focus: 2 }}\n      ringColor={{ focus: 'purple-600-a50' }}\n    >\n      Sign up\n    </x.button>\n  </form>\n</>\n```\n\n----------------------------------------\n\nTITLE: Extending Default Theme Screens in xstyled (JavaScript)\nDESCRIPTION: Demonstrates extending the `defaultTheme` provided by xstyled. This example adds a new '3xl' breakpoint to the `screens` object while preserving the original default breakpoints by using the object spread syntax (...). Requires importing `defaultTheme` from `@xstyled/styled-components`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultTheme, ThemeProvider } from '@xstyled/styled-components'\n\nexport const theme = {\n  ...defaultTheme,\n  // Adds a new breakpoint in addition to the default breakpoints\n  screens: {\n    ...defaultTheme.screens,\n    '3xl': '1600px',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout with Multiple Breakpoints in xstyled React Components\nDESCRIPTION: Illustrates how to create responsive grid layouts using xstyled's 'col' props with breakpoint-specific values. Examples include same from smallest to largest, stacked to horizontal transition, and mixed configurations with different props at various breakpoints. Dependencies include React and xstyled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\" spaceY={2}>\n      <x.div row>\n        <x.div col>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            -\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            -\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            -\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            -\n          </x.div>\n        </x.div>\n      </x.div>\n      <x.div row>\n        <x.div col={2 / 3}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            2 / 3\n          </x.div>\n        </x.div>\n        <x.div col={1 / 3}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            1 / 3\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col>-</x.div>\n    <x.div col>-</x.div>\n    <x.div col>-</x.div>\n    <x.div col>-</x.div>\n  </x.div>\n  <x.div row>\n    <x.div col={2 / 3}>2 / 3</x.div>\n    <x.div col={1 / 3}>1 / 3</x.div>\n  </x.div>\n</>\n\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\" spaceY={2}>\n      <x.div row>\n        <x.div col={{ xs: 1, sm: 2 / 3 }}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1, sm: 2 / 3 }`}\n          </x.div>\n        </x.div>\n        <x.div col={{ xs: 1, sm: 1 / 3 }}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1, sm: 1 / 3 }`}\n          </x.div>\n        </x.div>\n      </x.div>\n      <x.div row>\n        <x.div col={{ xs: 1, sm: true }}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1, sm: true }`}\n          </x.div>\n        </x.div>\n        <x.div col={{ xs: 1, sm: true }}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1, sm: true }`}\n          </x.div>\n        </x.div>\n        <x.div col={{ xs: 1, sm: true }}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1, sm: true }`}\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={{ xs: 1, sm: 2 / 3 }}>{`{ xs: 1, sm: 2 / 3 }`}</x.div>\n    <x.div col={{ xs: 1, sm: 1 / 3 }}>{`{ xs: 1, sm: 1 / 3 }`}</x.div>\n  </x.div>\n  <x.div row>\n    <x.div col={{ xs: 1, sm: true }}>{`{ xs: 1, sm: true }`}</x.div>\n    <x.div col={{ xs: 1, sm: true }}>{`{ xs: 1, sm: true }`}</x.div>\n    <x.div col={{ xs: 1, sm: true }}>{`{ xs: 1, sm: true }`}</x.div>\n  </x.div>\n</>\n\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\" spaceY={2}>\n      <x.div row>\n        <x.div col={{ xs: 1, md: 2 / 3 }}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1, md: 2 / 3 }`}\n          </x.div>\n        </x.div>\n        <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1 / 2, md: 1 / 3 }`}\n          </x.div>\n        </x.div>\n      </x.div>\n      <x.div row>\n        <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1 / 2, md: 1 / 3 }`}\n          </x.div>\n        </x.div>\n        <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1 / 2, md: 1 / 3 }`}\n          </x.div>\n        </x.div>\n        <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            {`{ xs: 1 / 2, md: 1 / 3 }`}\n          </x.div>\n        </x.div>\n      </x.div>\n      <x.div row bg=\"violet-200\" borderRadius=\"md\">\n        <x.div col={1 / 2}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            1 / 2\n          </x.div>\n        </x.div>\n        <x.div col={1 / 2}>\n          <x.div bg=\"violet-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            1 / 2\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  {/* Stack the columns on mobile by making one full-width and the other half-width */}\n  <x.div row>\n    <x.div col={{ xs: 1, md: 2 / 3 }}>{`{ xs: 1, md: 2 / 3 }`}</x.div>\n    <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>{`{ xs: 1 / 2, md: 1 / 3 }`}</x.div>\n  </x.div>\n  {/* Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop */}\n  <x.div row>\n    <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>{`{ xs: 1 / 2, md: 1 / 3 }`}</x.div>\n    <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>{`{ xs: 1 / 2, md: 1 / 3 }`}</x.div>\n    <x.div col={{ xs: 1 / 2, md: 1 / 3 }}>{`{ xs: 1 / 2, md: 1 / 3 }`}</x.div>\n  </x.div>\n  {/* Columns are always 50% wide, on mobile and desktop */}\n  <x.div row>\n    <x.div col={1 / 2}>{`1 / 2`}</x.div>\n    <x.div col={1 / 2}>{`1 / 2`}</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Transition Delay in xstyled\nDESCRIPTION: Example showing how to use responsive object notation with transitionDelay to apply different delay values at specific breakpoints. This snippet applies a 300ms delay at medium screen sizes and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-delay.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transitionDelay={{ md: 300 }} />\n```\n\n----------------------------------------\n\nTITLE: Replacing Component with 'as' Prop\nDESCRIPTION: This snippet illustrates using the `as` prop to change the underlying HTML element of a styled component. The example redefines the `Button` component to render an anchor tag (`<a>`) while still maintaining the original styles and the theming. The `href` attribute is added to the rendered anchor tag.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  border-radius: md;\n  font-weight: semibold;\n  transition: default;\n  background-color: emerald-500;\n  color: #fff;\n\n  @media (min-width: md) {\n    font-size: lg;\n  }\n`\n\nfunction App() {\n  return (\n    <Button as=\"a\" href=\"https://smooth-doc.com\">\n      Smooth DOC\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Palette in xstyled Theme (JavaScript)\nDESCRIPTION: Shows how to define the global color palette using the `colors` key in the xstyled theme. Keys are descriptive color names (e.g., 'black', 'gray-100'), and values are their corresponding color codes (e.g., '#000', '#f7fafc'). These colors are accessible by various style utilities like `backgroundColor`, `borderColor`, and `textColor`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const theme = {\n  colors: {\n    black: '#000',\n    white: '#fff',\n    'gray-100': '#f7fafc',\n    // ...\n    'gray-900': '#1a202c',\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Background Colors in xstyled with React (JSX)\nDESCRIPTION: This snippet demonstrates the application of responsive background colors in xstyled by assigning an object as the \"bg\" prop, where the key signifies a breakpoint (e.g., \"md\"). The button background color will update at specified breakpoints according to the object keys. Requires xstyled and React; input is a \"bg\" prop with breakpoint-targeted color, output is a button that visually changes at different viewport widths.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-color.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.button bg={{ md: 'red-500' }} />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Color to xstyled Theme in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to extend the default color palette of an xstyled theme by adding a new custom color with a specific hex value. It imports the `defaultTheme` and merges its `colors` property with the new custom color, 'blue-light', making it available for use in styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/colors.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defaultTheme } from '@xstyled/...'\n\nexport const theme = {\n  colors: {\n    ...defaultTheme.colors,\n    'blue-light': '#85d7ff',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up xstyled ThemeProvider and Preflight in Javascript\nDESCRIPTION: This snippet shows how to wrap your application with the ThemeProvider from @xstyled/styled-components to make the theme accessible throughout your component tree. It also includes the Preflight component, which applies a CSS reset for consistent styling across browsers. You can customize the default theme by merging objects.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/src/components/getting-started.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport {\n  defaultTheme,\n  ThemeProvider,\n  Preflight,\n} from '@xstyled/styled-components'\n\nconst theme = {\n  ...defaultTheme,\n  // Customize your theme here\n}\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Preflight />\n      {/* ... */}\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ThemeProvider and Preflight with styled-components\nDESCRIPTION: JavaScript code to set up the ThemeProvider and Preflight components from xstyled with styled-components. This establishes the theme context and baseline styles for your application.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport {\n  defaultTheme,\n  ThemeProvider,\n  Preflight,\n} from '@xstyled/styled-components'\n\nconst theme = {\n  ...defaultTheme,\n  // Customize your theme here\n}\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Preflight />\n      {/* ... */}\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Hover State in xstyled\nDESCRIPTION: Demonstrates how to create a button that changes background color on hover using xstyled's state object syntax. The example shows how to set a base style with the _ key and a hover state variation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hover-focus-and-other-states.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.button\n        type=\"button\"\n        py={2}\n        px={4}\n        bg={{ _: 'red-500', hover: 'red-700' }}\n        color=\"white\"\n        fontWeight=\"semibold\"\n        borderRadius=\"lg\"\n        boxShadow=\"md\"\n        outline={{ focus: 'none ' }}\n        tabindex=\"-1\"\n      >\n        Hover me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button bg={{ _: 'red-500', hover: 'red-700' }}>Hover me</x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Text Sizes with xstyled's text Utility in React JSX\nDESCRIPTION: Demonstrates how to render different typography variants using the 'text' prop from xstyled within React JSX. Iterates through various preset size keys applying them to text elements for consistent font size and line height. Uses an array map to generate definition list items showing size labels and sample text styled accordingly. This snippet requires React and xstyled setup with appropriate theme definitions for text sizes. Expected input is a list of predefined text size keys, and output is rendered HTML elements styled with those text variants.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      {[\n        'xs',\n        'sm',\n        'base',\n        'lg',\n        'xl',\n        '2xl',\n        '3xl',\n        '4xl',\n        '5xl',\n        '6xl',\n        '7xl',\n        '8xl',\n        '9xl',\n      ].map((size) => (\n        <x.dl\n          key={size}\n          display=\"flex\"\n          alignItems=\"baseline\"\n          color=\"violet-600\"\n          overflow=\"hidden\"\n        >\n          <x.dt w={16} flexShrink={0} text=\"sm\" opacity={0.8} fontFamily=\"mono\">\n            {size}\n          </x.dt>\n          <x.dd text={size} fontWeight=\"medium\">\n            Computers have lots of memory but no imagination.\n          </x.dd>\n        </x.dl>\n      ))}\n    </>\n  </template>\n  <x.p text=\"xs\">Computers have lots ...</x.p>\n  <x.p text=\"sm\">Computers have lots ...</x.p>\n  <x.p text=\"base\">Computers have lots ...</x.p>\n  <x.p text=\"lg\">Computers have lots ...</x.p>\n  <x.p text=\"xl\">Computers have lots ...</x.p>\n  <x.p text=\"2xl\">Computers have lots ...</x.p>\n  <x.p text=\"3xl\">Computers have lots ...</x.p>\n  <x.p text=\"4xl\">Computers have lots ...</x.p>\n  <x.p text=\"5xl\">Computers have lots ...</x.p>\n  <x.p text=\"6xl\">Computers have lots ...</x.p>\n  <x.p text=\"7xl\">Computers have lots ...</x.p>\n  <x.p text=\"8xl\">Computers have lots ...</x.p>\n  <x.p text=\"9xl\">Computers have lots ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook in xstyled\nDESCRIPTION: This snippet demonstrates the use of the `useTheme` hook to access the current theme's values.  It retrieves the entire theme object.  The component then renders a div with a style that uses a color from the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useTheme } from '@xstyled/...'\n\nfunction Example() {\n  const theme = useTheme()\n  return <div style={{ color: theme.colors.primary }}>Primary</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Color Modes with Nextjs SSR xstyled JavaScript\nDESCRIPTION: Shows how to integrate xstyled color modes with Next.js, specifically for Server-Side Rendering, by creating or modifying the `_document.js` file. The `getColorModeInitScriptElement` must be placed within the `<body>` tag. This ensures the correct color mode is applied server-side, preventing layout shifts or incorrect initial styles.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\nimport { getColorModeInitScriptElement } from '@xstyled/styled-components'\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx)\n    return initialProps\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          {getColorModeInitScriptElement()}\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Responsive Breakpoints with States in xstyled\nDESCRIPTION: Shows how to mix responsive breakpoints with interactive states. The button has different base and hover colors depending on the viewport size, using nested state objects with breakpoint keys.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hover-focus-and-other-states.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.button\n        type=\"button\"\n        py={2}\n        px={4}\n        bg={{\n          _: { _: 'indigo-500', hover: 'indigo-700' },\n          md: { _: 'fuchsia-500', hover: 'fuchsia-700' },\n        }}\n        color=\"white\"\n        fontWeight=\"semibold\"\n        borderRadius=\"lg\"\n        boxShadow=\"md\"\n        outline={{ focus: 'none ' }}\n        tabindex=\"-1\"\n      >\n        Cameleon button\n      </x.button>\n    </x.div>\n  </template>\n  <x.button\n    bg={{\n      _: { _: 'indigo-500', hover: 'indigo-700' },\n      md: { _: 'fuchsia-500', hover: 'fuchsia-700' },\n    }}\n  >\n    Cameleon button\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting up ThemeProvider and Preflight with Emotion\nDESCRIPTION: JavaScript code to set up the ThemeProvider and Preflight components from xstyled with Emotion. This establishes the theme context and baseline styles for your application.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport { defaultTheme, ThemeProvider, Preflight } from '@xstyled/emotion'\n\nconst theme = {\n  ...defaultTheme,\n  // Customize your theme here\n}\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Preflight />\n      {/* ... */}\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX example demonstrating positioning utilities with xstyled\nDESCRIPTION: This code provides multiple usage examples of positioning utilities such as top, right, bottom, and left, showing how to precisely anchor absolutely positioned elements within a relative parent. It utilizes the xstyled library's components and demonstrates edge case positioning, full-parent filling, and corner pinning, all within a grid layout.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/top-right-bottom-left.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={{ xs: 2, sm: 3, md: 4 }} gap={4}>\n      {/* Span top edge */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          top={0}\n          right={0}\n          left={0}\n          h={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          1\n        </x.div>\n      </x.div>\n\n      {/* Span right edge */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          top={0}\n          right={0}\n          bottom={0}\n          w={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          2\n        </x.div>\n      </x.div>\n\n      {/* Span bottom edge */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          right={0}\n          bottom={0}\n          left={0}\n          h={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          3\n        </x.div>\n      </x.div>\n\n      {/* Span left edge */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          top={0}\n          bottom={0}\n          left={0}\n          w={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          4\n        </x.div>\n      </x.div>\n\n      {/* Fill entire parent */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          top={0}\n          right={0}\n          bottom={0}\n          left={0}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          5\n        </x.div>\n      </x.div>\n\n      {/* Pin to top left corner */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          top={0}\n          left={0}\n          h={16}\n          w={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          6\n        </x.div>\n      </x.div>\n\n      {/* Pin to top right corner */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          top={0}\n          right={0}\n          h={16}\n          w={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          7\n        </x.div>\n      </x.div>\n\n      {/* Pin to bottom right corner */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          right={0}\n          bottom={0}\n          h={16}\n          w={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          8\n        </x.div>\n      </x.div>\n\n      {/* Pin to bottom left corner */}\n      <x.div\n        position=\"relative\"\n        h={32}\n        w={32}\n        bg=\"emerald-300\"\n        borderRadius=\"md\"\n      >\n        <x.div\n          bottom={0}\n          left={0}\n          h={16}\n          w={16}\n          position=\"absolute\"\n          bg=\"emerald-500\"\n          fontWeight=\"extrabold\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"md\"\n        >\n          9\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  {/* Additional minimal examples omitted for brevity */}\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme States in xstyled\nDESCRIPTION: Shows how to define custom states in the xstyled theme. This example adds a firstLetter state for styling the first letter of text and a dark state for dark mode styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hover-focus-and-other-states.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// theme.js\n\nexport const theme = {\n  states: {\n    firstLetter: '&::first-letter',\n    dark: '.xstyled-color-mode-dark &&',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Width with Responsive Breakpoints in React\nDESCRIPTION: Example showing how to use auto width with responsive breakpoints. Sets width to 24 on extra small screens and auto on medium screens and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div w={{ xs: 24, md: 'auto' }} />\n```\n\n----------------------------------------\n\nTITLE: Creating a styled component with xstyled/system (JavaScript)\nDESCRIPTION: Defines a React component (Box) using styled-components and applies the @xstyled/system function to it. This allows the component to accept system props (like p, m, color, etc.) for styling. Requires @xstyled/system and styled-components installed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/system/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport styled from 'styled-components'\nimport { system } from '@xstyled/system'\n\nconst Box = styled.div(system)\n\nexport default Box\n```\n\n----------------------------------------\n\nTITLE: Centering a Container with xstyled in React (JSX)\nDESCRIPTION: This snippet demonstrates how to use the Container component from xstyled to fix an element's max-width to the current breakpoint and horizontally center it using the mx=\"auto\" utility. Requires xstyled and React as dependencies. The container prop enables breakpoint-based sizing, while mx=\"auto\" applies automatic horizontal margins for centering. Inputs include children to be rendered inside the container. No built-in padding is applied, and users must manually apply spacing utilities as needed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/container.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div container mx=\"auto\">\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: xstyled rule: Applying dynamic styles with css utility (JavaScript)\nDESCRIPTION: Demonstrates the required pattern in xstyled for applying dynamic, prop-based styles within styled-components. Wrapping the styles within the `css` utility (either as a function or template literal) is essential for xstyled to correctly parse and apply theme-based transformations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled, { css } from '@xstyled/...'\n\nconst Box = styled.div`\n  ${(p) => css({ margin: p.margin })}\n`\n```\n\n----------------------------------------\n\nTITLE: Generating Alpha Variants for Custom Color in xstyled JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates adding a custom color and automatically generating its alpha (opacity) variants (e.g., 'blue-light-a10', 'blue-light-a20', etc.) using the `generateHexAlphaVariants` utility. The utility is provided an object mapping color names to hex values, and its output is merged into the theme's colors.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/colors.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defaultTheme, generateHexAlphaVariants } from '@xstyled/...'\n\nexport const theme = {\n  colors: {\n    ...defaultTheme.colors,\n    // Generate 'blue-light-a10', 'blue-light-a20', ...\n    ...generateHexAlphaVariants({\n      'blue-light': '#85d7ff',\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Color Mode with Hook xstyled React\nDESCRIPTION: Illustrates how to programmatically change the current color mode using the `useColorMode` hook provided by `@xstyled/styled-components`. The hook returns the current `colorMode` value and a `setColorMode` function. This example uses a button click to toggle between 'default' and 'dark' modes, with the preference persisted in `localStorage`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { useColorMode } from '@xstyled/styled-components'\n\nfunction Example(props) {\n  const [colorMode, setColorMode] = useColorMode()\n  return (\n    <header>\n      <button\n        onClick={(e) => {\n          setColorMode(colorMode === 'default' ? 'dark' : 'default')\n        }}\n      >\n        Toggle {colorMode === 'default' ? 'Dark' : 'Light'}\n      </button>\n    </header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Padding with xstyled in React (JSX)\nDESCRIPTION: This snippet shows how to apply responsive padding to an element at specified breakpoints using xstyled's responsive object notation in React JSX. The example sets vertical padding at the 'md' breakpoint with py={{ md: 8 }}. It depends on xstyled and React. The input is an object mapping breakpoints to spacing sizes; the output is a React component with conditional padding based on screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/padding.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div py={{ md: 8 }} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Themed Animation with Hook (JavaScript)\nDESCRIPTION: Shows how to access the CSS value associated with a theme-defined animation utility ('ping') within a React functional component using the `useAnimation` hook provided by xstyled. This allows programmatic access to theme values for dynamic styling or logic.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { useAnimation } from '@xstyled/...'\n\nfunction Button() {\n  const animation = useAnimation('ping')\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Color Referencing using th Utility in xstyled (JavaScript)\nDESCRIPTION: Demonstrates nested or recursive referencing of theme values. Here, 'button-bg' references 'primary', which in turn references 'red-500', all resolved using the `th.color()` utility. This allows creating semantic color names based on the core palette. Requires importing `th` and `defaultTheme`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { th, defaultTheme, ThemeProvider } from '@xstyled/styled-components'\n\nexport const theme = {\n  ...defaultTheme,\n  colors: {\n    ...defaultTheme.colors,\n    primary: th.color('red-500'),\n    'button-bg': th.color('primary'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Columns in Flexbox with xstyled (JSX)\nDESCRIPTION: Demonstrates forcing flexbox columns to wrap to a new line by inserting an element with `width: 100%` (`<x.div w={1} />`) within an `<x.div row>` container. This technique uses `xstyled` components and props like `row`, `col` (with responsive objects), and `w` for width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n    >\n      <x.div row alignItems=\"flex-start\" bg=\"red-200\" borderRadius=\"md\">\n        <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} py={2}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} py={2}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div w={1} />\n        <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} py={2}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} py={2}>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} />\n    <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} />\n    {/* Force next columns to break to new line */}\n    <x.div w={1} />\n    <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} />\n    <x.div col={{ xs: 1 / 2, sm: 1 / 4 }} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Max-Width Breakpoints with xstyled in React (JSX)\nDESCRIPTION: Demonstrates the use of responsive object notation for the maxWidth prop in xstyled React components, allowing different max-width values at designated breakpoints such as 'xs' and 'md'. This enables adaptive design by conditionally applying max-width styles based on screen size, leveraging xstyled's responsive utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-width.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div maxWidth={{ xs: 1 / 2, md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Colors for Color Modes xstyled JavaScript\nDESCRIPTION: Demonstrates how to structure the `theme.colors` object to include support for multiple color modes. Colors defined directly under `colors` represent the 'default' mode, while colors within the `modes` object, keyed by mode name (e.g., 'dark'), define variations for other modes. This configuration is the foundation for enabling color mode functionality.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0cf',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Offsetting Columns with Auto Margins in xstyled (JSX)\nDESCRIPTION: Demonstrates using `ml=\"auto\"` and `mr=\"auto\"` props on `xstyled` column elements (`<x.div col>`) within a row (`<x.div row>`) to push columns or create space between them. This technique leverages flexbox's auto margin behavior and supports responsive application (e.g., `ml={{ md: 'auto' }}`).\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n    >\n      <x.div row bg=\"amber-200\" borderRadius=\"md\">\n        <x.div col={1 / 3}>\n          <x.div bg=\"amber-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 3} ml=\"auto\">\n          <x.div bg=\"amber-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n      <x.div row bg=\"amber-200\" borderRadius=\"md\">\n        <x.div col={1 / 4} ml={{ md: 'auto' }}>\n          <x.div bg=\"amber-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 4} ml={{ md: 'auto' }}>\n          <x.div bg=\"amber-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n      <x.div row bg=\"amber-200\" borderRadius=\"md\">\n        <x.div col=\"auto\" mr=\"auto\">\n          <x.div bg=\"amber-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col=\"auto\">\n          <x.div bg=\"amber-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} ml=\"auto\" />\n  </x.div>\n  <x.div row>\n    <x.div col={1 / 4} ml={{ md: 'auto' }} />\n    <x.div col={1 / 4} ml={{ md: 'auto' }} />\n  </x.div>\n  <x.div row>\n    <x.div col=\"auto\" mr=\"auto\" />\n    <x.div col=\"auto\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using display=\"block\" to create block-level elements in React with XStyled\nDESCRIPTION: This snippet demonstrates how to assign the CSS display property as 'block' to XStyled components in React, converting spans into block-level elements for stacking layout. It includes a React component example with styled spans displayed as blocks, emphasizing vertical stacking behavior.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div p={4} spaceY={4} bg=\"light-blue-300\" borderRadius=\"md\"> <x.span display=\"block\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"light-blue-500\" p={6}> 1 </x.span> <x.span display=\"block\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"light-blue-500\" p={6}> 2 </x.span> <x.span display=\"block\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"light-blue-500\" p={6}> 3 </x.span> </x.div> </template> <x.div spaceY={4}> <x.span display=\"block\">1</x.span> <x.span display=\"block\">2</x.span> <x.span display=\"block\">3</x.span> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Composing CSS Transforms Using xstyled in React (JSX)\nDESCRIPTION: Demonstrates how to use xstyled's transform utility within React components to apply various CSS transformations such as rotate, skew, scale, and translate to images. Requires React, xstyled, and browser support for CSS custom properties. Key props include transform (boolean), rotate, skewY, scale, translateX, and translateY, applied directly on x.img elements. Outputs visually transformed images inside a flex container. Limitations: does not support older browsers like IE11 due to reliance on CSS variables.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n    >\n      <x.div w={16} h={16} bg=\"amber-300\" borderRadius=\"md\">\n        <x.img\n          h={16}\n          w={16}\n          transform\n          rotate={45}\n          borderRadius=\"md\"\n          src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        />\n      </x.div>\n      <x.div w={16} h={16} bg=\"amber-300\" borderRadius=\"md\">\n        <x.img\n          h={16}\n          w={16}\n          transform\n          skewY={12}\n          borderRadius=\"md\"\n          src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        />\n      </x.div>\n      <x.div w={16} h={16} bg=\"amber-300\" borderRadius=\"md\">\n        <x.img\n          h={16}\n          w={16}\n          transform\n          scale={0.5}\n          borderRadius=\"md\"\n          src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        />\n      </x.div>\n      <x.div w={16} h={16} bg=\"amber-300\" borderRadius=\"md\">\n        <x.img\n          h={16}\n          w={16}\n          transform\n          translateX={4}\n          translateY={4}\n          borderRadius=\"md\"\n          src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        />\n      </x.div>\n    </x.div>\n  </template>\n  <x.img transform rotate={45} />\n  <x.img transform skewY={12} />\n  <x.img transform scale={0.5} />\n  <x.img transform translateX={4} translateY={4} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using responsive overscrollBehavior with xstyled in JSX\nDESCRIPTION: This snippet demonstrates how to apply the overscrollBehavior property responsively in xstyled by passing an object with screen size keys, e.g., { md: 'contain' }. This applies the 'contain' behavior starting at the medium screen breakpoint, enabling adaptive scroll behavior based on viewport size. The snippet shows a simple <x.div> component with overscrollBehavior set via responsive object notation. Inputs are the responsive overscrollBehavior object; outputs are conditional CSS rules affecting overscroll behavior at specified breakpoints. Requires React and xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overscroll-behavior.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div overscrollBehavior={{ md: 'contain' }} />\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Row Start/End Lines using `gridRow` Prop in xstyled (JSX)\nDESCRIPTION: Illustrates using various `gridRow` prop values (`n / span x`, `span x / n`, `n / m`) in `x.div` components to explicitly define the starting and ending grid lines for items within an xstyled grid layout. This controls the precise placement and size of elements along the row axis.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-row.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateRows={3}\n      gridAutoFlow=\"column\"\n      gap={4}\n      h={64}\n    >\n      <x.div\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridRow=\"2 / span 2\"\n      >\n        1\n      </x.div>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridRow=\"span 2 / 3\"\n      >\n        2\n      </x.div>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridRow=\"1 / 4\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateRows={3} gridAutoFlow=\"column\" gap={4}>\n    <x.div gridRow=\"2 / span 2\">1</x.div>\n    <x.div gridRow=\"span 2 / 3\">2</x.div>\n    <x.div gridRow=\"1 / 4\">3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Changing Background Color Opacity Variants in xstyled with React (JSX)\nDESCRIPTION: This snippet showcases how to use xstyled's color opacity utility classes to present divs with varying background opacity levels. It uses different background color variants like \"purple-600-a100\" to \"purple-600-a0\" to control alpha transparency, displaying several div elements side by side. Requires xstyled and React. Main props are bg values with opacity suffixes; output is a flex/grid assortment of visually distinct divs.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-color.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={{ _: 2, sm: 5 }} gap={2}>\n      <x.div\n        bg=\"purple-600-a100\"\n        h={16}\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        100%\n      </x.div>\n      <x.div\n        bg=\"purple-600-a75\"\n        h={16}\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        75%\n      </x.div>\n      <x.div\n        bg=\"purple-600-a50\"\n        h={16}\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        50%\n      </x.div>\n      <x.div\n        bg=\"purple-600-a25\"\n        h={16}\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        25%\n      </x.div>\n      <x.div\n        bg=\"purple-600-a0\"\n        h={16}\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        0%\n      </x.div>\n    </x.div>\n  </template>\n  <x.div bg=\"purple-600-a100\"></x.div>\n  <x.div bg=\"purple-600-a75\"></x.div>\n  <x.div bg=\"purple-600-a50\"></x.div>\n  <x.div bg=\"purple-600-a25\"></x.div>\n  <x.div bg=\"purple-600-a0\"></x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Variable Width Content Layout Using xstyled React Components\nDESCRIPTION: Demonstrates the use of 'col=\"auto\"' in xstyled's grid system to create columns that size based on their content's natural width. It showcases a layout with fixed and variable width columns inside a row, including styling with background colors, padding, and alignment. Dependencies include React and xstyled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\" spaceY={2}>\n      <x.div row>\n        <x.div col>\n          <x.div bg=\"fuchsia-400\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            1 of 3\n          </x.div>\n        </x.div>\n        <x.div col=\"auto\">\n          <x.div\n            bg=\"fuchsia-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n            px={2}\n          >\n            Variable width content\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"fuchsia-400\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            3 of 3\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col>1 of 3</x.div>\n    <x.div col=\"auto\">Variable width content</x.div>\n    <x.div col>3 of 3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Scoping Color Mode Styling to Element xstyled React\nDESCRIPTION: Demonstrates how to apply color mode styling to a specific HTML element instead of the default `document.body`. This is achieved by passing a DOM `target` element reference and/or a `targetSelector` string to the `ColorModeProvider` props. This is useful when integrating a styled application into a larger, potentially non-styled or differently styled, host page.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { ThemeProvider, ColorModeProvider } from '@xstyled/styled-components'\nimport App from './App'\n\nconst target = document.getElementById('small-react-app')\n\nconst theme = {\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0cf',\n      },\n    },\n  },\n}\n\nfunction Root() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorModeProvider target={target} targetSelector=\"#small-react-app\">\n        <App />\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n\nrender(<Root />, target)\n```\n\n----------------------------------------\n\nTITLE: Setting justifyContent to space-between in xstyled\nDESCRIPTION: This snippet uses `justifyContent=\"space-between\"` to space items evenly along the main axis, without space on the edges. It showcases the xstyled library to display three items within a flex container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"space-between\">\n      {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"emerald-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"space-between\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Align Content in xstyled: Distributing Rows with Space-Between\nDESCRIPTION: This example demonstrates the use of alignContent='space-between' to distribute rows evenly with equal space between each line. It uses React JSX components styled with xstyled, showing how to visualize this alignment strategy in a flex container with different background colors.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-content.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={48}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignContent=\"space-between\"\n      bg=\"amber-200\"\n      borderRadius=\"md\"\n    >\n      {Array.from({ length: 5 }, (_, index) => index + 1).map((value) => (\n        <x.div key={value} w={1 / 3} p={2}>\n          <x.div\n            p={2}\n            borderRadius=\"md\"\n            bg=\"amber-500\"\n            color=\"white\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          >\n            {value}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div h={48} display=\"flex\" flexWrap=\"wrap\" alignContent=\"space-between\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n    <div>4</div>\n    <div>5</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Mapping a Utility to Multiple CSS Properties\nDESCRIPTION: Shows how to make a single utility prop apply styles to multiple CSS properties by providing an array to the `css` option in the `style` function. This example creates a `px` utility that sets both `paddingTop` and `paddingBottom`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { style } from '@xstyled/...'\n\nexport const px = style({\n  prop: ['px'],\n  css: ['paddingTop', 'paddingBottom'],\n})\n```\n\n----------------------------------------\n\nTITLE: Applying responsive styles from breakpoint (xstyled, JavaScript)\nDESCRIPTION: Explains how to use the `up` utility with styled-components and the `css` utility to apply styles that take effect starting from a specified breakpoint and apply to all larger screen sizes. It requires importing `up` and `css` from `@xstyled/...`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled, { css, up } from '@xstyled/...'\n\nconst Box = styled.div`\n  width: 200px;\n  height: 200px;\n  ${up(\n    'md',\n    css`\n      height: 300px;\n    `,\n  )}\n`\n```\n\n----------------------------------------\n\nTITLE: Using Fluid Max-Width Percentages in xstyled React Components (JSX)\nDESCRIPTION: Shows how to apply fluid max-width values between 0 and 1 in xstyled React components, where numeric values are converted to percentages. The example renders components with maxWidth set as fractional numbers and percentages, accommodating flexible and proportional layouts. Explicit percentage values as strings are also supported.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-width.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={6}>\n      <x.div\n        display=\"flex\"\n        overflow=\"hidden\"\n        borderRadius=\"md\"\n        color=\"white\"\n        fontFamily=\"mono\"\n        bg=\"cool-gray-300\"\n      >\n        <x.div w={0.3} px={2} py={4} bg=\"rose-500\" textAlign=\"center\">\n          0.3\n        </x.div>\n      </x.div>\n      <x.div\n        display=\"flex\"\n        overflow=\"hidden\"\n        borderRadius=\"md\"\n        color=\"white\"\n        fontFamily=\"mono\"\n        bg=\"cool-gray-300\"\n      >\n        <x.div w={0.5} px={2} py={4} bg=\"rose-500\" textAlign=\"center\">\n          0.5\n        </x.div>\n        <x.div w={0.2} px={2} py={4} bg=\"cool-gray-500\" textAlign=\"center\">\n          0.2\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div maxWidth={1 / 2} w={0.3}>\n    maxWidth=1/2\n  </x.div>\n  <x.div maxWidth={0.5} w={0.7}>\n    maxWidth=0.5\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Aliases for Utility Props\nDESCRIPTION: Illustrates how to define multiple prop names (aliases) for a single utility by providing an array to the `prop` option in the `style` function. This example creates aliases `margin` and `m` for the `margin` CSS property.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { style } from '@xstyled/...'\n\nexport const margin = style({\n  prop: ['margin', 'm'],\n  css: 'margin',\n})\n\n// Usage\n<x.div m={1} />\n\n// or\n<x.div margin={1} />\n```\n\n----------------------------------------\n\nTITLE: Automatically Adding Scrollbars with xstyled in React (JSX)\nDESCRIPTION: This example shows how to add scrollbars only when necessary using 'overflow=\"auto\"' with xstyled in a React JSX component. Scrollbars appear only when content overflows vertically, and the snippet demonstrates configuration for appearance, height, and background. Dependencies include React and xstyled; inputs are containers with overflow content; output is scrollbars activated only when needed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={32} overflow=\"hidden\">\n      <x.div\n        overflow=\"auto\"\n        h={32}\n        px={6}\n        py={2}\n        borderRadius=\"md\"\n        bg=\"red-200\"\n      >\n        <x.p fontFamily=\"Flow\" lineHeight={5} color=\"red-700\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris\n          eleifend rutrum auctor. Phasellus convallis sagittis augue ut ornare.\n          Vestibulum et gravida lectus, sed ultrices sapien. Nullam aliquet elit\n          dui, vitae hendrerit lectus volutpat eget. In porttitor tincidunt\n          egestas. Pellentesque laoreet ligula at est vulputate facilisis. Etiam\n          tristique justo ut odio placerat ornare. Cras bibendum, orci at ornare\n          tincidunt, lacus nunc gravida enim, sit amet euismod nunc lectus in\n          lectus. Ut dictum nulla et arcu aliquet ornare. Aliquam et dapibus\n          lectus. Aenean mattis elit mi, sed ultricies augue consectetur id. Sed\n          id magna malesuada, luctus urna a, bibendum tortor. Cras cursus cursus\n          ex. Nulla fringilla elit vitae imperdiet scelerisque. Donec ac sem eu\n          diam convallis mollis a sed leo. Proin congue augue turpis, eget\n          rutrum dolor ultricies non. Nulla blandit venenatis dapibus. Sed\n          tincidunt mollis elit, quis suscipit nibh eleifend quis. Donec ex\n          lorem, auctor eu rutrum in, blandit id dolor. Nulla molestie arcu\n          turpis. In id felis vulputate, tempor massa eget, malesuada mauris.\n          Quisque fringilla consequat metus, luctus scelerisque leo fringilla\n          vel.\n        </x.p>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div overflow=\"auto\" h={32}>\n    Lorem ipsum dolor sit amet...\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Integrating Preflight Component in React App (JavaScript)\nDESCRIPTION: Demonstrates how to import the `Preflight` component from `@xstyled/...` and include it within a React application's component tree. Placing `<Preflight />` typically at the root level ensures its base styles are applied globally.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Preflight } from '@xstyled/...'\n\nfunction App() {\n  return (\n    <>\n      <Preflight />\n      {/* ... */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Transition Properties in xstyled - React (JSX)\nDESCRIPTION: This snippet demonstrates how to apply transitions responsively with xstyled by passing an object prop such as transition={{ md: 'all' }}. This enables the transition to be applied only at the medium (md) breakpoint and above, leveraging xstyled's responsive system. Requires usage of xstyled in a React environment and an understanding of the responsive object notation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transition={{ md: 'all' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Grid Columns with xstyled React JSX\nDESCRIPTION: Shows how to apply `grid-template-columns` values conditionally based on screen size using responsive object syntax. This requires the `xstyled` library. The object keys represent breakpoints, and the values are the desired `gridTemplateColumns` values to apply at that breakpoint and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-columns.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridTemplateColumns={{ md: 2 }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying Themed Animation in Styled Components (JavaScript)\nDESCRIPTION: Shows how to use animations defined in the xstyled theme directly within styled components created with xstyled's `styled` function. The animation utility name ('ping' in this case) is used directly as the CSS `animation` property value in the tagged template literal.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  animation: ping;\n`\n```\n\n----------------------------------------\n\nTITLE: Using useTh Hook in xstyled\nDESCRIPTION: The `useTh` hook retrieves a specific value from the theme using a string key.  This hook directly accesses a theme value, such as a color.  The example shows how to get 'colors.primary' and apply it as style to a div.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useTh } from '@xstyled/...'\n\nfunction Example() {\n  const primary = useTh('colors.primary')\n  return <div style={{ color: primary }}>Primary</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Responsive Gutters with xstyled JSX at Large Breakpoints\nDESCRIPTION: This snippet illustrates how to responsively adjust gutters at the large (lg) breakpoint using xstyled's padding and negative margin utilities. The example increases horizontal padding on columns with \"px={{ lg: 2 }}\" and counterbalances it with a matching negative horizontal margin \"mx={{ lg: -2 }}\" on the parent row to maintain layout width without overflow. The container wrapper should also have matching padding \"px={{ lg: 2 }}\" for proper alignment. The snippet highlights usage of breakpoint-specific props for responsive design. It depends on xstyled and React, and expects children JSX elements that respond to these styling props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      bg=\"amber-200\"\n      overflow=\"hidden\"\n      borderRadius=\"md\"\n    >\n      <x.div row mx={{ lg: -2 }} borderRadius=\"md\">\n        <x.div col py={3} px={{ lg: 2 }}>\n          <x.div bg=\"amber-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col py={3} px={{ lg: 2 }}>\n          <x.div bg=\"amber-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row mx={{ lg: -2 }}>\n    <x.div col py={3} px={{ lg: 2 }}>\n      Custom column padding\n    </x.div>\n    <x.div col py={3} px={{ lg: 2 }}>\n      Custom column padding\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Global Styles with xstyled in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the createGlobalStyle utility from xstyled to define and apply global styles in a React application. It imports createGlobalStyle from @xstyled/... and defines a GlobalStyle component that sets the body text color. The GlobalStyle component is rendered inside the main App component to ensure the global styling is applied. Dependencies include React, xstyled, and a compatible styled-components or Emotion setup. Inputs are global CSS rules as template literals; output is the application of these styles to the DOM when the App is rendered.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-base-styles.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createGlobalStyle } from '@xstyled/...'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: #333;\n  }\n`\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      {/* ... */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using xstyled with React Components\nDESCRIPTION: This React functional component example demonstrates using the `x` utility from `@xstyled/styled-components` to apply styles directly as props. It showcases responsive styling (padding `p`), background color (`bg`), flexbox layout (`display`, `spaceX`), and styling common HTML elements (`div`, `img`, `h4`, `p`) with utility props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/styled-components/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { x } from '@xstyled/styled-components'\n\nfunction Example() {\n  return (\n    <x.div p={{ _: 3, md: 6 }} bg=\"white\" display=\"flex\" spaceX={4}>\n      <x.div flexShrink={0}>\n        <x.img h={12} w={12} src=\"/img/logo.svg\" alt=\"xstyled Logo\" />\n      </x.div>\n      <x.div>\n        <x.h4\n          fontSize={{ _: 'md', lg: 'xl' }}\n          fontWeight=\"medium\"\n          color=\"black\"\n        >\n          xstyled\n        </x.h4>\n        <x.p color=\"gray-500\">A CSS-in-JS framework built for React.</x.p>\n      </x.div>\n    </x.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Auto Flow Example (xstyled)\nDESCRIPTION: This code demonstrates the basic usage of `gridAutoFlow` in xstyled. It sets the `gridAutoFlow` property to \"column\", causing grid items to be placed in columns. It also sets up a grid with 3 columns and 3 rows, with a gap of 4 units between the grid items.  It uses React components from xstyled library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-auto-flow.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridAutoFlow=\"column\"\n      gridTemplateColumns={3}\n      gridTemplateRows={3}\n      gap={4}\n    >\n      {Array.from({ length: 9 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={12}\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div\n    display=\"grid\"\n    gridAutoFlow=\"column\"\n    gridTemplateColumns={3}\n    gridTemplateRows={3}\n    gap={4}\n  >\n    <div>1</div>\n    {/* ... */}\n    <div>9</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing 'wrap' Flex Wrap in xstyled\nDESCRIPTION: This snippet shows setting flexWrap to 'wrap' to enable flex items to automatically move to new lines when space is limited. The example displays three items arranged with wrapping behavior, demonstrating responsiveness in layout.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-wrap.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div display=\"flex\" flexWrap=\"wrap\" m={-2} overflow=\"hidden\">\n  {[1, 2, 3].map((value) => (\n    <x.div\n      key={value}\n      w={2 / 5}\n      m={2}\n      py={1}\n      flex=\"none\"\n      borderRadius=\"md\"\n      bg=\"light-blue-500\"\n      color=\"white\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      fontSize=\"2xl\"\n      fontWeight=\"extrabold\"\n    >\n      {value}\n    </x.div>\n  ))}\n</x.div>\n<x.div display=\"flex\" flexWrap=\"wrap\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying overscrollBehavior=\"contain\" with xstyled in JSX\nDESCRIPTION: This snippet shows the use of the overscrollBehavior=\"contain\" prop on a styled <x.div> in React using xstyled to prevent scrolling in the target container from triggering scrolling on parent containers, while still allowing bounce effects on supported operating systems. The snippet applies overflow, height, color, padding, font, and border radius styling to represent the scroll container. Input is the overscrollBehavior prop set to \"contain\"; output is a scrollable container with contained scroll events. Requires React and xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overscroll-behavior.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      overscrollBehavior=\"contain\"\n      overflow=\"auto\"\n      h={32}\n      bg=\"light-blue-200\"\n      color=\"light-blue-500\"\n      px={6}\n      py={4}\n      fontWeight=\"medium\"\n      fontFamily=\"Flow\"\n      borderRadius=\"lg\"\n    >\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris eleifend\n        rutrum auctor. Phasellus convallis sagittis augue ut ornare. Vestibulum\n        et gravida lectus, sed ultrices sapien. Nullam aliquet elit dui, vitae\n        hendrerit lectus volutpat eget. In porttitor tincidunt egestas.\n        Pellentesque laoreet ligula at est vulputate facilisis. Etiam tristique\n        justo ut odio placerat ornare. Cras bibendum, orci at ornare tincidunt,\n        lacus nunc gravida enim, sit amet euismod nunc lectus in lectus. Ut\n        dictum nulla et arcu aliquet ornare. Aliquam et dapibus lectus. Aenean\n        mattis elit mi, sed ultricies augue consectetur id. Sed id magna\n        malesuada, luctus urna a, bibendum tortor. Cras cursus cursus ex. Nulla\n        fringilla elit vitae imperdiet scelerisque. Donec ac sem eu diam\n        convallis mollis a sed leo. Proin congue augue turpis, eget rutrum dolor\n        ultricies non. Nulla blandit venenatis dapibus. Sed tincidunt mollis\n        elit, quis suscipit nibh eleifend quis. Donec ex lorem, auctor eu rutrum\n        in, blandit id dolor. Nulla molestie arcu turpis. In id felis vulputate,\n        tempor massa eget, malesuada mauris. Quisque fringilla consequat metus,\n        luctus scelerisque leo fringilla vel.\n      </p>\n    </x.div>\n  </template>\n  <x.div overscrollBehavior=\"contain\">Lorem ipsum dolor sit amet...</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color Utilities in xstyled with React (JSX)\nDESCRIPTION: This snippet demonstrates setting a fixed background color on button components using the \"bg\" prop with xstyled in React (JSX). It applies additional styling properties, such as padding, color, font weight, and border radius, showing how to configure a styled button. Dependencies include xstyled and React. Inputs are arbitrary button props and the \"bg\" color value; the output is a styled button element.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-color.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.button\n        type=\"button\"\n        py={3}\n        px={4}\n        transition\n        bg=\"emerald-500\"\n        color=\"white\"\n        fontWeight=\"semibold\"\n        borderRadius=\"lg\"\n        boxShadow=\"md\"\n        outline={{ focus: 'none' }}\n        tabindex=\"-1\"\n      >\n        Click me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button bg=\"emerald-500\">Button</x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Sans-serif Font Family in React with xstyled\nDESCRIPTION: Example of using fontFamily=\"sans\" to apply a web-safe sans-serif font family to a paragraph element. The example includes both the preview template and the actual implementation code.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p\n      fontFamily=\"sans\"\n      fontSize=\"xl\"\n      color=\"light-blue-700\"\n      textAlign=\"center\"\n    >\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p fontFamily=\"sans\">Computers have lots of memory but no imagination.</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Type for Styled Components with TypeScript\nDESCRIPTION: Provides a TypeScript declaration file example (`styled.d.ts`) for extending the theme type when using xstyled with styled-components. It shows how to import necessary types, define a custom theme interface (`AppTheme`) that extends xstyled's theme, and use module augmentation to merge this custom theme into `styled-components`' `DefaultTheme` and `@xstyled/system`'s `Theme` for type safety.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/typescript.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// styled.d.ts\n\n// import original module declarations\nimport 'styled-components'\nimport '@xstyled/system'\nimport {\n  ITheme,\n  DefaultTheme as XStyledDefaultTheme,\n} from '@xstyled/styled-components'\n\ninterface AppTheme extends ITheme, XStyledDefaultTheme {\n  /* Customize your theme */\n}\n\n// and extend them!\ndeclare module '@xstyled/system' {\n  export interface Theme extends AppTheme {}\n}\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends AppTheme {}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Theme Screens in xstyled (JavaScript)\nDESCRIPTION: Shows how to completely replace a section of the `defaultTheme`. This example overrides the `screens` object, making only the explicitly defined 'md' and 'xl' breakpoints available, discarding the defaults. Requires importing `defaultTheme`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultTheme, ThemeProvider } from '@xstyled/styled-components'\n\nexport const theme = {\n  ...defaultTheme,\n  // Only two breakpoints will be available\n  screens: {\n    md: '800px',\n    xl: '1200px',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Headings with xstyled in JSX\nDESCRIPTION: This example demonstrates creating sticky headings within a scrollable container using xstyled. It utilizes `<x.div>` components with the `position=\"sticky\"` and `top={0}` props to make headings stick to the top of their scroll parent. Styling is applied directly via xstyled props like `bg`, `px`, `py`, `fontWeight`, `color`, and `borderRadius`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/position.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={64} overflow=\"auto\">\n      <div>\n        <x.div\n          position=\"sticky\"\n          top={0}\n          bg=\"emerald-200\"\n          px={2}\n          py={1}\n          fontWeight=\"semibold\"\n          color=\"emerald-600\"\n          borderRadius=\"md\"\n        >\n          Sticky Heading 1\n        </x.div>\n        <x.p py={4} fontWeight=\"medium\" color=\"emerald-500\">\n          Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at\n          interdum magna augue eget diam. Vestibulum ante ipsum primis in\n          faucibus orci luctus et ultrices posuere cubilia Curae; Morbi lacinia\n          molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet\n          augue congue elementum. Morbi in ipsum sit amet pede facilisis\n          laoreet. Donec lacus nunc, viverra nec, blandit vel, egestas et,\n          augue. Vestibulum tincidunt malesuada tellus. Ut ultrices ultrices\n          enim. Curabitur sit amet mauris. Morbi in dui quis est pulvinar\n          ullamcorper. Nulla facilisi.{' '}\n        </x.p>\n      </div>\n      <div>\n        <x.div\n          position=\"sticky\"\n          top={0}\n          bg=\"emerald-200\"\n          px={2}\n          py={1}\n          fontWeight=\"semibold\"\n          color=\"emerald-600\"\n          borderRadius=\"md\"\n        >\n          Sticky Heading 2\n        </x.div>\n        <x.p py={4} fontWeight=\"medium\" color=\"emerald-500\">\n          Integer lacinia sollicitudin massa. Cras metus. Sed aliquet risus a\n          tortor. Integer id quam. Morbi mi. Quisque nisl felis, venenatis\n          tristique, dignissim in, ultrices sit amet, augue. Proin sodales\n          libero eget ante. Nulla quam. Aenean laoreet. Vestibulum nisi lectus,\n          commodo ac, facilisis ac, ultricies eu, pede. Ut orci risus, accumsan\n          porttitor, cursus quis, aliquet eget, justo. Sed pretium blandit orci.\n          Ut eu diam at pede suscipit sodales. Aenean lectus elit, fermentum\n          non, convallis id, sagittis at, neque.{' '}\n        </x.p>\n      </div>\n      <div>\n        <x.div\n          position=\"sticky\"\n          top={0}\n          bg=\"emerald-200\"\n          px={2}\n          py={1}\n          fontWeight=\"semibold\"\n          color=\"emerald-600\"\n          borderRadius=\"md\"\n        >\n          Sticky Heading 3\n        </x.div>\n        <x.p py={4} fontWeight=\"medium\" color=\"emerald-500\">\n          Nullam mauris orci, aliquet et, iaculis et, viverra vitae, ligula.\n          Nulla ut felis in purus aliquam imperdiet. Maecenas aliquet mollis\n          lectus. Vivamus consectetuer risus et tortor. Lorem ipsum dolor sit\n          amet, consectetur adipiscing elit. Integer nec odio. Praesent libero.\n          Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh\n          elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec\n          tellus sed augue semper porta. Mauris massa.{' '}\n        </x.p>\n      </div>\n      <div>\n        <x.div\n          position=\"sticky\"\n          top={0}\n          bg=\"emerald-200\"\n          px={2}\n          py={1}\n          fontWeight=\"semibold\"\n          color=\"emerald-600\"\n          borderRadius=\"md\"\n        >\n          Sticky Heading 4\n        </x.div>\n        <x.p py={4} fontWeight=\"medium\" color=\"emerald-500\">\n          Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at\n          interdum magna augue eget diam. Vestibulum ante ipsum primis in\n          faucibus orci luctus et ultrices posuere cubilia Curae; Morbi lacinia\n          molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet\n          augue congue elementum. Morbi in ipsum sit amet pede facilisis\n          laoreet. Donec lacus nunc, viverra nec, blandit vel, egestas et,\n          augue. Vestibulum tincidunt malesuada tellus. Ut ultrices ultrices\n          enim. Curabitur sit amet mauris. Morbi in dui quis est pulvinar\n          ullamcorper. Nulla facilisi.{' '}\n        </x.p>\n      </div>\n      <div>\n        <x.div\n          position=\"sticky\"\n          top={0}\n          bg=\"emerald-200\"\n          px={2}\n          py={1}\n          fontWeight=\"semibold\"\n          color=\"emerald-600\"\n          borderRadius=\"md\"\n        >\n          Sticky Heading 5\n        </x.div>\n        <x.p py={4} fontWeight=\"medium\" color=\"emerald-500\">\n          Integer lacinia sollicitudin massa. Cras metus. Sed aliquet risus a\n          tortor. Integer id quam. Morbi mi. Quisque nisl felis, venenatis\n          tristique, dignissim in, ultrices sit amet, augue. Proin sodales\n          libero eget ante. Nulla quam. Aenean laoreet. Vestibulum nisi lectus,\n          commodo ac, facilisis ac, ultricies eu, pede. Ut orci risus, accumsan\n          porttitor, cursus quis, aliquet eget, justo. Sed pretium blandit orci.\n          Ut eu diam at pede suscipit sodales. Aenean lectus elit, fermentum\n          non, convallis id, sagittis at, neque.{' '}\n        </x.p>\n      </div>\n      <div>\n        <x.div\n          position=\"sticky\"\n          top={0}\n          bg=\"emerald-200\"\n          px={2}\n          py={1}\n          fontWeight=\"semibold\"\n          color=\"emerald-600\"\n          borderRadius=\"md\"\n        >\n          Sticky Heading 6\n        </x.div>\n        <x.p py={4} fontWeight=\"medium\" color=\"emerald-500\">\n          Nullam mauris orci, aliquet et, iaculis et, viverra vitae, ligula.\n          Nulla ut felis in purus aliquam imperdiet. Maecenas aliquet mollis\n          lectus. Vivamus consectetuer risus et tortor. Lorem ipsum dolor sit\n          amet, consectetur adipiscing elit. Integer nec odio. Praesent libero.\n          Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh\n          elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec\n          tellus sed augue semper porta. Mauris massa.{' '}\n        </x.p>\n      </div>\n    </x.div>\n  </template>\n  <div>\n    <x.div position=\"sticky\" top={0}>\n      Sticky Heading 1\n    </x.div>\n    <x.p py={4}>Quisque cursus...</x.p>\n  </div>\n  <div>\n    <x.div position=\"sticky\" top={0}>\n      Sticky Heading 2\n    </x.div>\n    <x.p py={4}>Integer lacinia...</x.p>\n  </div>\n  <div>\n    <x.div position=\"sticky\" top={0}>\n      Sticky Heading 3\n    </x.div>\n    <x.p py={4}>Nullam mauris...</x.p>\n  </div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Outer Box Shadows in React with xstyled\nDESCRIPTION: This example demonstrates how to apply different sized outer box shadows to elements using the boxShadow prop in xstyled. It showcases six different shadow sizes: sm, default, md, lg, xl, and 2xl.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={5} gridTemplateColumns={{ sm: 2, lg: 5 }} p={3}>\n      {['sm', 'default', 'md', 'lg', 'xl', '2xl'].map((boxShadow) => (\n        <x.div\n          p={6}\n          bg=\"white\"\n          color=\"gray-500\"\n          textAlign=\"center\"\n          fontWeight=\"medium\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius\n          boxShadow={boxShadow}\n        >\n          {boxShadow}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div boxShadow=\"sm\" />\n  <x.div boxShadow />\n  <x.div boxShadow=\"md\" />\n  <x.div boxShadow=\"lg\" />\n  <x.div boxShadow=\"xl\" />\n  <x.div boxShadow=\"2xl\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Configuring xstyled Babel Preset with Emotion Plugin Options - JS\nDESCRIPTION: This snippet shows how to configure the `@xstyled/babel-preset-emotion-css-prop` in `.babelrc` while also passing options intended for the underlying `@emotion/babel-plugin`. This allows leveraging Emotion's plugin features like minification and improved debugging alongside xstyled's enhancements.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n  ...,\n  \"presets\": [\n    [\n      \"@xstyled/babel-preset-emotion-css-prop\",\n      {\n        // @emotion/babel-plugin options\n        // https://emotion.sh/docs/@emotion/babel-plugin\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Utilities in xstyled JSX - React (JSX)\nDESCRIPTION: This snippet demonstrates how to apply transitions to xstyled components using JSX props. The transition and transitionDuration props on <x.button> control the CSS transition properties, while background colors, padding, border radius, and other style attributes are also customizable. This approach requires React and the xstyled library, and assumes the use of the <x> primitives from xstyled. Inputs are component props, and the output is a styled interactive button with transition effects.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration={500}\n        color=\"white\"\n        bg={{ _: 'amber-600', hover: 'orange-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button\n    transition\n    transitionDuration={500}\n    color=\"white\"\n    bg={{ _: 'amber-600', hover: 'orange-600' }}\n    py={3}\n    px={6}\n    borderRadius=\"md\"\n  >\n    Hover me\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic xstyled Component in Javascript\nDESCRIPTION: This example demonstrates how to create a simple React functional component using the 'x' factory provided by @xstyled/styled-components. The 'x.button' syntax creates a styled button element, and properties like 'bg=\"blue-500\"' apply theme-aware CSS styles directly as props. Additional props are spread onto the native button element.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/src/components/getting-started.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { x } from '@xstyled/styled-components'\n\nfunction Button(props) {\n  return <x.button bg=\"blue-500\" {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gridAutoColumns React Prop for CSS Grid Layout\nDESCRIPTION: This snippet explains the 'gridAutoColumns' React prop that maps to the CSS 'grid-auto-columns' property, allowing control over the size of implicitly-created grid columns in a React component styled with xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-auto-columns.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridAutoFlow=\"columns\" gridAutoColumns=\"max-content\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Using useBreakpoints Hook in xstyled\nDESCRIPTION: This demonstrates the `useBreakpoints` hook, returning the breakpoints defined in the theme. The component renders a div using the breakpoints retrieved from the theme for responsiveness. It uses `maxWidth` to define its behaviour.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useBreakpoints } from '@xstyled/...'\n\nfunction Example() {\n  const breakpoints = useBreakpoints()\n  return <div style={{ maxWidth: breakpoints.md }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Container with Breakpoint-Dependent Behavior in xstyled (JSX)\nDESCRIPTION: This example configures the Container component to enable container width constraints only at the md breakpoint and above. The container prop accepts a breakpoint map (here, { md: true }), making the element fluid below md and fixed-width at md and higher. It depends on xstyled and React. This pattern is essential for responsive designs where the layout needs to change across breakpoints. Children inside the container will be constrained accordingly. For custom breakpoints, modify the object passed to the container prop.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/container.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div container={{ md: true }}>\n  {/* Full-width fluid until the `lg` breakpoint, then lock to container */}\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Initial Color Mode xstyled JavaScript\nDESCRIPTION: Demonstrates how to use the `defaultColorModeName` property in the theme configuration to specify which color mode should be active upon a user's very first visit. By default, this is implicitly the 'default' mode defined by the root-level colors; this property allows you to start with another mode, such as 'dark'.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  defaultColorModeName: 'dark',\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0cf',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatically Binding Transitions in Styled Components with xstyled - JavaScript\nDESCRIPTION: This snippet illustrates the use of xstyled's styled API to automatically bind transition properties to a button component. By defining transition: default; in the styled template, the Button component will inherit the default transition style from the xstyled theme. Dependencies include @xstyled/styled-components or similar, and the output is a styled button component. No explicit transition props are required when using this pattern.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  transition: default;\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Border Style with xstyled\nDESCRIPTION: This code snippet demonstrates how to use the `borderStyle` prop in xstyled to apply different border styles to a set of divs. The `borderColor` and `borderWidth` props are also used in conjunction with `borderStyle` to style the borders.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-style.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={2} gridTemplateColumns={{ sm: 2, lg: 5 }}>\n      {['solid', 'dashed', 'dotted', 'double', 'none'].map((borderStyle) => (\n        <x.div\n          p={6}\n          bg=\"red-300\"\n          color=\"white\"\n          textAlign=\"center\"\n          fontWeight=\"extrabold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderStyle={borderStyle}\n          borderColor=\"red-600\"\n          borderWidth={3}\n        >\n          {borderStyle}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div borderWidth={3} borderStyle=\"solid\" />\n  <x.div borderWidth={3} borderStyle=\"dashed\" />\n  <x.div borderWidth={3} borderStyle=\"dotted\" />\n  <x.div borderWidth={3} borderStyle=\"double\" />\n  <x.div borderWidth={3} borderStyle=\"none\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting justifyContent to space-evenly in xstyled\nDESCRIPTION: This code uses `justifyContent=\"space-evenly\"` to distribute items with equal space between them, which includes space at the beginning and end of the flex container using xstyled library. This example utilizes a consistent layout pattern.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"space-evenly\">\n      {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"light-blue-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"space-evenly\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Default Shadow Theme Configuration in xstyled\nDESCRIPTION: This snippet displays the complete set of default shadow values defined in xstyled's theme. It includes various shadow intensities from xs to 2xl, plus an inner shadow option, each with specific rgba values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  shadows: {\n    xs: '0 0 0 1px rgba(0, 0, 0, 0.05)',\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    default: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n    '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n    inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing flex container with display=\"flex\" in React using XStyled\nDESCRIPTION: This code demonstrates usage of 'flex' display to create a flexible container that arranges child items in a row with adjustable spacing. It utilizes flex properties to control item growth and alignment, suitable for responsive layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div p={4} spaceX={4} bg=\"emerald-300\" display=\"flex\" borderRadius=\"md\"> <x.div flex=\"1 1 0\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"emerald-500\" p={6}> 1 </x.div> <x.div flex=\"1 1 0\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"emerald-500\" p={6}> 2 </x.div> <x.div flex=\"1 1 0\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"emerald-500\" p={6}> 3 </x.div> </x.div> </template> <x.div display=\"flex\" spaceX={4}> <x.div flex=\"1 1 0\">1</x.div> <x.div flex=\"1 1 0\">2</x.div> <x.div flex=\"1 1 0\">3</x.div> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button component with Emotion\nDESCRIPTION: Example of creating a simple Button component using the x utility from xstyled with Emotion. The component applies a blue background color.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/installation.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { x } from '@xstyled/emotion'\n\nfunction Button(props) {\n  return <x.button bg=\"blue-500\" {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Align Content Utility in xstyled for React: Centered Rows with 'center' Alignment\nDESCRIPTION: This code illustrates how to center flex rows vertically within a container using the alignContent property set to 'center'. The example features React components styled with xstyled Props, showing how to align rows centrally across different background colors with visual representations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-content.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={48}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignContent=\"center\"\n      bg=\"indigo-200\"\n      borderRadius=\"md\"\n    >\n      {Array.from({ length: 5 }, (_, index) => index + 1).map((value) => (\n        <x.div key={value} w={1 / 3} p={2}>\n          <x.div\n            p={2}\n            borderRadius=\"md\"\n            bg=\"indigo-500\"\n            color=\"white\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          >\n            {value}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div h={48} display=\"flex\" flexWrap=\"wrap\" alignContent=\"center\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n    <div>4</div>\n    <div>5</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Size to Auto with Styled Components (JSX)\nDESCRIPTION: This code snippet demonstrates how to set the background size of a styled component to \"auto\".  It uses xstyled components. Dependencies include xstyled and styled-components.  The output is an HTML div with the specified background image, size, position, and repeat settings.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-size.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"amber-300\"\n      h={48}\n      backgroundSize=\"auto\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div\n    backgroundSize=\"auto\"\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"center\"\n    backgroundImage=\"url(...)\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Configuring rem unit transformation in xstyled\nDESCRIPTION: This snippet demonstrates how to configure xstyled to use `rem` units instead of `px`.  It utilizes the `rpxTransformers` and theme configuration. By default, xstyled transforms unitless values to `rem`. It expects the theme to contain the transformers object with rpxTransformers spread, allowing you to use unitless values that are automatically converted to rem units.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/transformers.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled, { x, ThemeProvider, rpxTransformers } from '@xstyled/...'\n\nconst theme = {\n  transformers: {\n    ...rpxTransformers,\n  },\n}\n\nconst Title = styled.h1`\n  font-size: 20;\n`\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <Title>Hello</Title>\n    <x.div m={16} />\n  </ThemeProvider>\n)\n\n// The style of the `Title` will be `font-size: 1.25rem` instead of `font-size: 20px`.\n// The style of the `Box` will be `margin: 1rem` instead of `margin: 16px`.\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Alignment Using Flexbox AlignItems in xstyled JSX\nDESCRIPTION: This snippet demonstrates vertical alignment of columns within a row using the \"alignItems\" flexbox property provided by xstyled JSX components. The examples show alignment values \"flex-start\", \"center\", and \"flex-end\" applied to rows containing multiple columns with equal widths. Each row has a fixed height to reveal vertical positioning. Dependencies include React and xstyled, and the key props are \"alignItems\" (vertical alignment) and fixed height values. The snippet visually showcases vertical positioning differences.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n    >\n      <x.div\n        row\n        alignItems=\"flex-start\"\n        height={100}\n        bg=\"orange-200\"\n        borderRadius=\"md\"\n      >\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n      <x.div\n        row\n        alignItems=\"center\"\n        height={100}\n        bg=\"orange-200\"\n        borderRadius=\"md\"\n      >\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n      <x.div\n        row\n        alignItems=\"flex-end\"\n        height={100}\n        bg=\"orange-200\"\n        borderRadius=\"md\"\n      >\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row alignItems=\"flex-start\" height={100}>\n    <x.div col>One of three columns</x.div>\n    <x.div col>One of three columns</x.div>\n    <x.div col>One of three columns</x.div>\n  </x.div>\n  <x.div row alignItems=\"center\" height={100}>\n    <x.div col>One of three columns</x.div>\n    <x.div col>One of three columns</x.div>\n    <x.div col>One of three columns</x.div>\n  </x.div>\n  <x.div row alignItems=\"flex-end\" height={100}>\n    <x.div col>One of three columns</x.div>\n    <x.div col>One of three columns</x.div>\n    <x.div col>One of three columns</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Providing Color Mode Context xstyled React\nDESCRIPTION: Shows the essential setup to enable color mode functionality throughout a React application using xstyled. The main application component (`App`) must be wrapped by `ThemeProvider` (providing the color-mode-compatible theme) and `ColorModeProvider`. This makes the color mode context available to all child components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { ThemeProvider, ColorModeProvider } from '@xstyled/styled-components'\nimport App from './App'\n\nconst theme = {\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0cf',\n      },\n    },\n  },\n}\n\nfunction Root() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorModeProvider>\n        <App />\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Breakpoints in xstyled Theme (JavaScript)\nDESCRIPTION: Demonstrates configuring responsive breakpoints within the `screens` key of the xstyled theme object. Keys represent breakpoint names (e.g., 'sm', 'md'), and values are minimum widths as strings (e.g., '640px'). This object defines the available screen sizes for responsive design utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const theme = {\n  screens: {\n    _: 0,\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n    '2xl': '1536px',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Scaled Heights from Theme with xstyled React Components - JSX\nDESCRIPTION: Illustrates how to loop over an array of theme and pixel-based height values, dynamically rendering divs with those heights. Demonstrates both theme-derived (e.g., '1s') and static values (e.g., 8, 12). Requires xstyled, access to the theme's sizes, and React. Input is an array of height values; output is a flexbox layout showing each height variant.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {['1s', 8, 12, 16, 24].map((v) => (\n        <x.div\n          key={v}\n          spaceY={4}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <x.div\n            h={v}\n            w={8}\n            borderRadius=\"md\"\n            bg=\"light-blue-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n          <x.p fontSize=\"sm\" color=\"light-blue-600\" textAlign=\"center\">\n            h={v}\n          </x.p>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div h=\"1s\" />\n    <x.div h={8} />\n    <x.div h={12} />\n    <x.div h={16} />\n    <x.div h={24} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive div with styled-components\nDESCRIPTION: This snippet demonstrates creating a responsive div using styled-components and media queries. It sets the width of the div and adjusts it based on the screen size using the `@media` query. This example shows the conventional approach for responsive styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n  width: 200px;\n\n  @media (min-width: 768px) {\n    width: 300px;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Initializing xstyled with Default Utilities\nDESCRIPTION: Demonstrates importing `createCss` along with the default `system` utilities from `@xstyled/...`. It then uses `createCss(system)` to generate and export the core styling functions (`css`, `styled`, `x`, `createGlobalStyle`) based on the built-in utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// xstyled.config.js\nimport { createCss, system } from '@xstyled/...'\n\nexport const { css, styled, x, createGlobalStyle } = createCss(system)\n```\n\n----------------------------------------\n\nTITLE: Using pointerEvents in React JSX with styled-components xstyled\nDESCRIPTION: Demonstrates how to control pointer event behavior on React elements using the pointerEvents prop provided by styled-components xstyled. Includes two main cases: pointerEvents set to 'auto' where the element captures pointer events, and pointerEvents set to 'none' where the element ignores pointer events allowing them to pass through to underlying elements. The snippet uses xstyled's x.div, x.select, and x.svg components styled via props. Dependencies include React and styled-components xstyled components. Input is JSX markup, output is interactive React elements with pointer event manipulation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/pointer-events.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div maxWidth=\"sm\">\n      <x.p color=\"gray-700\">\n        Try clicking the caret icon to open the dropdown\n      </x.p>\n\n      <x.p mt={4} fontSize=\"sm\" color=\"gray-600\">\n        pointerEvents=\"auto\" (event captured)\n      </x.p>\n      <x.div mt={1} position=\"relative\">\n        <x.select\n          display=\"block\"\n          appearance=\"none\"\n          w={1}\n          border\n          borderColor={{ _: 'gray-200', focus: 'gray-500' }}\n          color=\"gray-700\"\n          py={3}\n          px={4}\n          pr={8}\n          borderRadius\n          lineHeight=\"tight\"\n          outline={{ focus: 'none' }}\n          bg={{ focus: 'white' }}\n        >\n          <option>Indiana</option>\n          <option>Michigan</option>\n          <option>Ohio</option>\n        </x.select>\n        <x.div\n          position=\"absolute\"\n          right={0}\n          top={0}\n          bottom={0}\n          display=\"flex\"\n          alignItems=\"center\"\n          px={3}\n          color=\"gray-700\"\n          bg=\"purple-300\"\n          borderRadius=\"0 default default 0\"\n          pointerEvents=\"auto\"\n        >\n          <x.svg fill=\"currentcolor\" h={4} w={4} viewBox=\"0 0 20 20\">\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n          </x.svg>\n        </x.div>\n      </x.div>\n\n      <x.p mt={4} fontSize=\"sm\" color=\"gray-600\">\n        pointerEvents=\"none\" (event passes through)\n      </x.p>\n      <x.div mt={1} position=\"relative\">\n        <x.select\n          display=\"block\"\n          appearance=\"none\"\n          w={1}\n          border\n          borderColor={{ _: 'gray-200', focus: 'gray-500' }}\n          color=\"gray-700\"\n          py={3}\n          px={4}\n          pr={8}\n          borderRadius\n          lineHeight=\"tight\"\n          outline={{ focus: 'none' }}\n          bg={{ focus: 'white' }}\n        >\n          <option>Indiana</option>\n          <option>Michigan</option>\n          <option>Ohio</option>\n        </x.select>\n        <x.div\n          position=\"absolute\"\n          right={0}\n          top={0}\n          bottom={0}\n          display=\"flex\"\n          alignItems=\"center\"\n          px={3}\n          color=\"gray-700\"\n          bg=\"purple-300\"\n          borderRadius=\"0 default default 0\"\n          pointerEvents=\"none\"\n        >\n          <x.svg fill=\"currentcolor\" h={4} w={4} viewBox=\"0 0 20 20\">\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n          </x.svg>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div position=\"relative\">\n    <select>\n      <option>Indiana</option>\n      <option>Michigan</option>\n      <option>Ohio</option>\n    </select>\n    <x.div pointerEvents=\"auto\">\n      <x.svg fill=\"currentcolor\" h={4} w={4} viewBox=\"0 0 20 20\">\n        <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n      </x.svg>\n    </x.div>\n  </x.div>\n\n  <x.div position=\"relative\">\n    <select>\n      <option>Indiana</option>\n      <option>Michigan</option>\n      <option>Ohio</option>\n    </select>\n    <x.div pointerEvents=\"none\">\n      <x.svg fill=\"currentcolor\" h={4} w={4} viewBox=\"0 0 20 20\">\n        <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n      </x.svg>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styling Button with xstyled Enhanced css Prop - JS\nDESCRIPTION: This snippet demonstrates styling a button using xstyled's enhanced `css` prop. It allows using design system token names (like space numbers, color names, border-radius keys) directly within the CSS object, which xstyled automatically resolves against the theme, simplifying theme usage compared to raw Emotion.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@xstyled/emotion'\n\nconst Button = ({ children }) => {\n  return (\n    <button\n      css={{\n        paddingTop: 2,\n        color: 'white',\n        borderRadius: 'md',\n        fontWeight: 'semibold',\n        transition: 'default',\n        backgroundColor: 'emerald-500',\n        '&:hover': {\n          backgroundColor: 'emerald-800',\n        },\n        '&:focus': {\n          outline: 'none',\n          boxShadow: 'emerald-ring',\n        },\n      }}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reordering Flexbox Items with 'order' Prop in xstyled (JSX)\nDESCRIPTION: Illustrates controlling the visual order of flex items using the `order` prop on `x.div` components within an `<x.div row>` container. This prop accepts numerical values and supports responsive objects (e.g., `order={{ sm: 2 }}`).\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div color=\"white\" fontWeight=\"extrabold\" overflow=\"hidden\" p={2}>\n      <x.div row bg=\"amber-200\" borderRadius=\"md\">\n        <x.div col>\n          <x.div bg=\"amber-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            First, but unordered\n          </x.div>\n        </x.div>\n        <x.div col order={2}>\n          <x.div bg=\"amber-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            Second, but last\n          </x.div>\n        </x.div>\n        <x.div col order={1}>\n          <x.div bg=\"amber-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            Third, but first\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col>First, but unordered</x.div>\n    <x.div col order={2}>\n      Second, but last\n    </x.div>\n    <x.div col order={1}>\n      Third, but first\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styling Button with xstyled Declarative Component - JSX\nDESCRIPTION: This snippet shows how to style a button using xstyled's declarative `x.button` component and utility props. It applies styles like padding, color, border-radius, font weight, transitions, background color, outline, ring, and ring color using concise props with design system token names or responsive object syntax.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { x } from '@xstyled/emotion'\n\nconst Button = ({ children }) => (\n  <x.button\n    py={2}\n    px={4}\n    color=\"white\"\n    borderRadius=\"md\"\n    fontWeight=\"semibold\"\n    transition\n    bg={{ _: 'emerald-500', hover: 'emerald-800' }}\n    outline={{ focus: 'none' }}\n    ring={{ focus: 'none' }}\n    ringColor={{ focus: 'emerald-500-a50' }}\n  >\n    {children}\n  </x.button>\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Fixed Grid Columns with xstyled React JSX\nDESCRIPTION: Demonstrates how to set a grid to have a fixed number of equally sized columns using the `gridTemplateColumns` prop. This requires the `xstyled` library and uses the `x.div` component with `display=\"grid\"`. The integer value passed to the prop determines the number of columns.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-columns.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={3} gap={4}>\n      {Array.from({ length: 9 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={12}\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateColumns={3} gap={4}>\n    <div>1</div>\n    {/* ... */}\n    <div>9</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Scale in xstyled Theme (JavaScript)\nDESCRIPTION: Illustrates configuring the global spacing and sizing scale via the `space` key in the xstyled theme. Keys represent scale steps (e.g., '0', '0.5', '4'), and values are CSS length units (e.g., '0', '0.125rem', '1rem'). These values are utilized by spacing-related utilities such as `padding`, `margin`, and `gap`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const theme = {\n  space: {\n    px: '1px',\n    0: '0',\n    0.5: '0.125rem',\n    1: '0.25rem',\n    1.5: '0.375rem',\n    2: '0.5rem',\n    2.5: '0.625rem',\n    3: '0.75rem',\n    3.5: '0.875rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    7: '1.75rem',\n    8: '2rem',\n    9: '2.25rem',\n    10: '2.5rem',\n    11: '2.75rem',\n    12: '3rem',\n    14: '3.5rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    28: '7rem',\n    32: '8rem',\n    36: '9rem',\n    40: '10rem',\n    44: '11rem',\n    48: '12rem',\n    52: '13rem',\n    56: '14rem',\n    60: '15rem',\n    64: '16rem',\n    72: '18rem',\n    80: '20rem',\n    96: '24rem',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting justifyContent to flex-start in xstyled\nDESCRIPTION: This snippet demonstrates the use of `justifyContent=\"flex-start\"` to align items to the start of the container's main axis using the xstyled library in a React application. It displays three items within a flex container and provides a preview.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"flex-start\" spaceX={4}>\n      {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"flex-start\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styled Button Component with themed styled-components\nDESCRIPTION: This code demonstrates a button styled using styled-components and utilizing a theme.  It accesses the theme's properties such as space, colors, radii, fontWeights, and transitions to style the button. The code shows how to apply styles based on theme configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  padding: ${(p) => `${p.theme.space[2]} ${p.theme.space[4]}`};\n  color: ${(p) => p.theme.colors.white};\n  border-radius: ${(p) => p.theme.radii.md};\n  font-weight: ${(p) => p.theme.fontWeights.semibold};\n  transition: ${(p) => p.theme.transitions.default};\n  background-color: ${(p) => p.theme.colors['emerald-500']};\n\n  &:hover {\n    background-color: ${(p) => p.theme.colors['emerald-800']};\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: ${(p) => p.theme.shadows['emerald-ring']};\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Applying single-side margins using xstyled\nDESCRIPTION: Demonstrates applying margin to the top, right, bottom, and left sides of an element using `mt`, `mr`, `mb`, and `ml` props respectively. The example shows how different space values translate to specific margin sizes like 1.5rem (6), 1rem (4), 2rem (8), and 0.5rem (2). These props apply margin only to the specified side.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/margin.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignItems=\"flex-start\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n      mx={-5}\n    >\n      <x.div mx={5} bg=\"rose-300\" borderRadius=\"md\" overflow=\"hidden\" pt={6}>\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          mt=6\n        </x.div>\n      </x.div>\n      <x.div\n        mx={5}\n        bg=\"rose-300\"\n        borderRadius=\"md\"\n        overflow=\"hidden\"\n        pr={4}\n        mt={6}\n      >\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          mr=4\n        </x.div>\n      </x.div>\n      <x.div\n        mx={5}\n        bg=\"rose-300\"\n        borderRadius=\"md\"\n        overflow=\"hidden\"\n        pb={8}\n        mt={6}\n      >\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          mb=8\n        </x.div>\n      </x.div>\n      <x.div\n        mx={5}\n        bg=\"rose-300\"\n        borderRadius=\"md\"\n        overflow=\"hidden\"\n        pl={2}\n        mt={6}\n      >\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          ml=2\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div mt={6}>mt=6</x.div>\n  <x.div mr={4}>mr=4</x.div>\n  <x.div mb={8}>mb=8</x.div>\n  <x.div ml={2}>ml=2</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Size Variations in React with xstyled (JSX)\nDESCRIPTION: This code snippet presents a React component that dynamically renders a list of font size options using xstyled's component system. The code maps over a list of size values and displays both a label and example for each. The example demonstrates how to use xstyled's utility props such as fontSize, display, alignItems, and fontWeight. Dependencies include React and the xstyled library. The code expects a React environment with xstyled installed, and the sizes can be string values like 'xs', CSS units like '14px', or xstyled preset keys. Output is a rendered list of font size demonstrations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-size.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      {[\n        'xs',\n        '14px',\n        'sm',\n        'base',\n        'lg',\n        '1.2rem',\n        'xl',\n        '2xl',\n        '3xl',\n        '4xl',\n        '5xl',\n        '6xl',\n        '7xl',\n        '8xl',\n        '9xl',\n      ].map((size) => (\n        <x.dl\n          key={size}\n          display=\"flex\"\n          alignItems=\"baseline\"\n          color=\"violet-600\"\n          overflow=\"hidden\"\n        >\n          <x.dt\n            w={16}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n          >\n            {size}\n          </x.dt>\n          <x.dd fontSize={size} fontWeight=\"medium\">\n            Computers have lots of memory but no imagination.\n          </x.dd>\n        </x.dl>\n      ))}\n    </>\n  </template>\n  <x.p fontSize=\"xs\">Computers have lots ...</x.p>\n  <x.p fontSize=\"14px\">Computers have lots ...</x.p>\n  <x.p fontSize=\"sm\">Computers have lots ...</x.p>\n  <x.p fontSize=\"base\">Computers have lots ...</x.p>\n  <x.p fontSize=\"lg\">Computers have lots ...</x.p>\n  <x.p fontSize=\"1.2rem\">Computers have lots ...</x.p>\n  <x.p fontSize=\"xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"2xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"3xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"4xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"5xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"6xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"7xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"8xl\">Computers have lots ...</x.p>\n  <x.p fontSize=\"9xl\">Computers have lots ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useUp Hook in xstyled\nDESCRIPTION: This snippet uses the `useUp` hook to determine if the viewport width is greater than a specified breakpoint.  The component displays different text based on the breakpoint.  The output is either 'Desktop' or 'Mobile', depending on the breakpoint.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useUp } from '@xstyled/...'\n\nfunction Example() {\n  const upMd = useUp('md')\n  return upMd ? 'Desktop' : 'Mobile'\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius with Different Sizes using xstyled JSX\nDESCRIPTION: Demonstrates how to apply various standard border radius sizes (`sm`, default, `md`, `lg`) to elements using the `borderRadius` prop in xstyled's `x.div` component. It shows the visual result in a preview template and the underlying JSX code. This requires the `@xstyled/styled-components` library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={2} gridTemplateColumns={{ sm: 2, lg: 4 }}>\n      <x.div\n        p={6}\n        bg=\"light-blue-500\"\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderRadius=\"sm\"\n      >\n        sm\n      </x.div>\n      <x.div\n        p={6}\n        bg=\"light-blue-500\"\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderRadius\n      >\n        default\n      </x.div>\n      <x.div\n        p={6}\n        bg=\"light-blue-500\"\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderRadius=\"md\"\n      >\n        md\n      </x.div>\n      <x.div\n        p={6}\n        bg=\"light-blue-500\"\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderRadius=\"lg\"\n      >\n        lg\n      </x.div>\n    </x.div>\n  </template>\n  <x.div borderRadius=\"sm\" />\n  <x.div borderRadius />\n  <x.div borderRadius=\"md\" />\n  <x.div borderRadius=\"lg\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing Breakpoints in xstyled Theme\nDESCRIPTION: Demonstrates how to customize breakpoints in an xstyled theme configuration. The example creates custom breakpoints named tablet, laptop, and desktop with corresponding pixel values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/responsive-design.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// theme.js\n\nexport const theme = {\n  screens: {\n    tablet: 640,\n    // => @media (min-width: 640px) { ... }\n\n    laptop: 1024,\n    // => @media (min-width: 1024px) { ... }\n\n    desktop: 1280,\n    // => @media (min-width: 1280px) { ... }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Z-Indices in xstyled Theme JS\nDESCRIPTION: Shows how to customize the available `zIndex` values by adding them to the `theme.zIndices` object in a xstyled theme file. This allows using named z-indices like `dialog` or `tooltip` throughout the application. Requires configuring a custom theme for xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/z-index.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n  // theme.js\n  export const theme = {\n    zIndices: {\n+     dialog: 200,\n+     tooltip: 300,\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Spacing Array (JavaScript)\nDESCRIPTION: Shows how to define or restore a custom spacing (space) scale in xstyled's theme object, crucial for consistent spacing in projects updated from v1.x. Dependencies: none required for the object, applies in theme context. Parameters: space (array of numbers). Input: Theme configuration; Output: An object ready to be passed to xstyled's ThemeProvider. Limitation: Overriding default spacing removes future automatic updates.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = {\n  space: [0, 4, 8, 16, 24, 48, 96, 144, 192, 240],\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Button with Emotion css Prop - JSX\nDESCRIPTION: This snippet demonstrates styling a button component using Emotion's `css` prop with a standard JavaScript object containing CSS properties, including nested selectors for hover and focus states. It requires importing `jsx` and `css` from `@emotion/react` and using the `/** @jsx jsx */` pragma.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\n\nconst Button = ({ children }) => {\n  return (\n    <button\n      css={{\n        padding: '0.5rem 1rem',\n        color: 'white',\n        borderRadius: '0.375rem',\n        fontWeight: 600,\n        transition: 'background-color cubic-bezier(0.4, 0, 0.2, 1) 150ms',\n        backgroundColor: '#10b981',\n        '&:hover': {\n          backgroundColor: '#065f46',\n        },\n        '&:focus': {\n          outline: 'none',\n          boxShadow: '0 0 0 3px #10b98180',\n        },\n      }}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using display=\"none\" in xstyled\nDESCRIPTION: This snippet demonstrates how to use `display=\"none\"` in xstyled to hide an element from the page layout. Setting `display=\"none\"` removes the element entirely, unlike `visibility=\"hidden\"` which keeps the element in the layout but makes it invisible. It showcases that elements with display none are not rendered.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div p={4} display=\"flex\" spaceX={4} bg=\"amber-300\" borderRadius=\"md\">\n      <x.div\n        color=\"white\"\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        textAlign=\"center\"\n        bg=\"amber-500\"\n        px={6}\n        py={4}\n        display=\"none\"\n        hidden\n      >\n        1\n      </x.div>\n      <x.div\n        color=\"white\"\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        textAlign=\"center\"\n        bg=\"amber-500\"\n        px={6}\n        py={4}\n      >\n        2\n      </x.div>\n      <x.div\n        color=\"white\"\n        borderRadius=\"md\"\n        fontWeight=\"extrabold\"\n        textAlign=\"center\"\n        bg=\"amber-500\"\n        px={6}\n        py={4}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div display=\"none\">1</x.div>\n    <x.div>2</x.div>\n    <x.div>3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useViewportWidth Hook in xstyled\nDESCRIPTION: This snippet demonstrates the usage of `useViewportWidth` hook, which returns the viewport width.  The hook is used to dynamically set the width of a div to the current viewport's width. The output is the current width of the viewport.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useViewportWidth } from '@xstyled/...'\n\nfunction Example() {\n  const width = useViewportWidth()\n  return <div style={{ width }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Gutter Management in xstyled Grid System: Basic and Shorthand Techniques\nDESCRIPTION: Explains how to implement gutters (spacing between columns) using container padding, row margins, and column padding. Demonstrates both horizontal gutters with px/mx properties and vertical/horizontal gutters with p/m properties, enabling precise spacing control in grid layouts. Dependencies include React and xstyled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div color=\"white\" fontWeight=\"extrabold\">\n      <x.div row bg=\"lime-200\" borderRadius=\"md\" mx={-2}>\n        <x.div col px={2}>\n          <x.div bg=\"lime-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col px={2}>\n          <x.div bg=\"lime-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row mx={-2}>\n    <x.div col px={2} />\n    <x.div col px={2} />\n  </x.div>\n</>\n\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      bg=\"teal-200\"\n      overflow=\"hidden\"\n      borderRadius=\"md\"\n    >\n      <x.div row borderRadius=\"md\" m={-2}>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"teal-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"teal-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"teal-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"teal-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row m={-2}>\n    <x.div col={1 / 2} p={2} />\n    <x.div col={1 / 2} p={2} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useBreakpoint Hook in xstyled\nDESCRIPTION: The example uses the `useBreakpoint` hook to get the current breakpoint based on viewport width.  The example renders text indicating the current breakpoint.  The output is the current breakpoint string ('sm', 'md', etc.).\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useBreakpoint } from '@xstyled/...'\n\nfunction Example() {\n  const breakpoint = useBreakpoint()\n  return <div>We are on {breakpoint}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Variants in xstyled Theme Configuration using JavaScript\nDESCRIPTION: Illustrates how to customize typography variants by defining or extending the 'texts' section in a theme object for xstyled. Each variant can specify multiple CSS properties such as fontSize, lineHeight, fontWeight, and color. Custom text styles defined here are then referenced via the 'text' prop in components, enabling centralized style control. The snippet requires JavaScript theme configuration with valid values mapped to existing fontSizes and lineHeights keys. Input is an object with named text variants and style definitions, output is a theme object ready to use with xstyled theming features.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text.mdx#_snippet_2\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    texts: {\n      title: {\n        fontSize: '30px',\n        lineHeight: '45px',\n        fontWeight: 'bold'\n      },\n      hint: {\n        fontSize: 10,\n        lineHeight: 1.4,\n        color: 'gray-300',\n      }\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Template Rows with xstyled (React)\nDESCRIPTION: This snippet demonstrates how to use the `gridTemplateRows` prop in a React component with the xstyled library to create a grid layout.  It uses a preview template to showcase a visual representation of the grid.  It requires xstyled and React to function and the output is a grid with specified rows, using `gridTemplateRows`. The `gridAutoFlow` prop sets how auto-placed items are handled. The `gap` prop defines the space between grid items. The example renders a grid of divs, each numbered from 1 to 9.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-rows.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateRows={3} gridAutoFlow=\"column\" gap={4}>\n      {Array.from({ length: 9 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={12}\n          borderRadius=\"md\"\n          bg=\"amber-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateRows={3} gridAutoFlow=\"column\" gap={4}>\n    <div>1</div>\n    {/* ... */}\n    <div>9</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining Mixed and Nested States with xstyled (JavaScript)\nDESCRIPTION: Shows how to define styles with both breakpoints and nested pseudo-state objects using xstyled components. The first example combines a breakpoint ('md') and a 'hover' state, while the second demonstrates multi-level state configurations (e.g., 'first.odd'). Requires @xstyled/core. Key parameters: color and bg (background), accepting nested objects for states and breakpoints. Input: React props with deeply nested objects; Output: Elements styled according to responsive and stateful rules. Limitation: Readability decreases with deep nesting.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Mixed screens and states\n<x.button color={{ _: 'red-600', md: { _: 'red-500', hover: 'red-300' } }} />\n// Nested states\n<x.div bg={{ first: { odd: 'blue' } } } />\n```\n\n----------------------------------------\n\nTITLE: Responsive Background Repeat - xstyled/JSX\nDESCRIPTION: Demonstrates responsive background repeat using object notation.  `backgroundRepeat={{ md: 'no-repeat' }}` applies `no-repeat` at medium screen sizes and above.  This leverages xstyled's responsive design capabilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-repeat.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div backgroundRepeat={{ md: 'no-repeat' }} />\n```\n\n----------------------------------------\n\nTITLE: Repeat Vertically - xstyled/JSX\nDESCRIPTION: Shows how to repeat a background image only vertically using `backgroundRepeat=\"repeat-y\"`. The `backgroundPosition` is centered. The div is styled with xstyled components including setting background color and height properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-repeat.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"light-blue-300\"\n      h={96}\n      backgroundRepeat=\"repeat-y\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div backgroundRepeat=\"repeat-y\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using divideColor with opacity in xstyled (light-blue)\nDESCRIPTION: This snippet demonstrates setting the border color and opacity using `divideColor`.  It shows how to control the border color's opacity using the `light-blue-500-a50` variant. Dependencies include xstyled and React.  The input is the desired color and opacity, the output is a styled div with the corresponding style applied.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-color.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      divideX\n      divideColor=\"light-blue-500-a50\"\n    >\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"light-blue-600\"\n        px={6}\n      >\n        1\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"light-blue-600\"\n        px={6}\n      >\n        2\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"light-blue-600\"\n        px={6}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div divideX divideColor=\"light-blue-500-a50\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Media Queries in styled-components with xstyled\nDESCRIPTION: Shows how to use xstyled's breakpoint tokens directly within media queries in styled components. The example applies different background colors based on screen size using min-width and max-width queries.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/responsive-design.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Colorful = styled.div`\n  background-color: papayawhip;\n  @media (min-width: md) and (max-width: lg) {\n    background-color: rebeccapurple;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Breakpoints in Theme (JavaScript)\nDESCRIPTION: Provides the updated way to define screen breakpoints in xstyled theme configuration (replacing 'breakpoints' with 'screens'). Inputs: xs-sm-lg-xl configuration as an object. Dependencies: none for the object, used by xstyled system when passed to ThemeProvider. Key parameters: screens (object mapping names to pixel values). Output: Theme object for responsive design. Limitation: Values must match CSS units and xstyled conventions.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = {\n  screens: { xs: 0, sm: 576, md: 768, lg: 992, xl: 1200 },\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Auto Flow (xstyled)\nDESCRIPTION: This code demonstrates how to use responsive object notation to control the `gridAutoFlow` property at different breakpoints. In this example, the `gridAutoFlow` property is set to \"column\" for medium screen sizes and above using `gridAutoFlow={{ md: 'column' }}`.  The xstyled library is a dependency.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-auto-flow.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridAutoFlow={{ md: 'column' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Manually Binding Font Size using th.fontSize with xstyled (JavaScript)\nDESCRIPTION: This code snippet illustrates how to manually bind a font size value in a styled component using the th.fontSize utility from xstyled. It imports both styled and th from xstyled, and applies a computed font value using th.fontSize('xl'). This approach is helpful for advanced cases requiring more control over CSS property assignment. Dependencies are React and the xstyled library with theme configuration. The result is a styled Title component whose font value is resolved via xstyled's th utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-size.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Title = styled.h4`\n  font: ${th.fontSize('xl')};\n`\n```\n\n----------------------------------------\n\nTITLE: Conditional Transition Using motionReduce in xstyled - React (JSX)\nDESCRIPTION: This example shows how to use the motionReduce state to conditionally disable transitions for users who prefer reduced motion, improving accessibility. By setting transition={{ _: true, motionReduce: 'none' }}, the component applies normal transitions unless the user's system preference is set to reduce motion, in which case transitions are disabled. This requires React and xstyled, and expects color and transition properties as input props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.button\n  color={{ hover: 'red' }}\n  transition={{ _: true, motionReduce: 'none' }}\n>\n  Hover me\n</x.button>\n```\n\n----------------------------------------\n\nTITLE: Applying uniform gap in xstyled Grid component\nDESCRIPTION: Demonstrates how to use the `gap` prop to set equal spacing between grid rows and columns in a React component with xstyled. Requires React and xstyled dependencies. The example showcases a grid with numbered items, emphasizing consistent gutter control.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/gap.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={4} gridTemplateColumns={2}>\n      {Array.from({ length: 4 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={12}\n          borderRadius=\"md\"\n          bg=\"amber-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gap={4} gridTemplateColumns={2}>\n    <div>1</div>\n    {/* ... */}\n    <div>4</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useDown Hook in xstyled\nDESCRIPTION: The `useDown` hook is used to determine if the viewport width is lower than the specified breakpoint. The component renders a conditional string based on whether the breakpoint is met. The output is 'Mobile' or 'Desktop', depending on the viewport.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useDown } from '@xstyled/...'\n\nfunction Example() {\n  const downMd = useDown('md')\n  return downMd ? 'Mobile' : 'Desktop'\n}\n```\n\n----------------------------------------\n\nTITLE: Box Sizing border-box in xstyled (JSX)\nDESCRIPTION: Demonstrates setting the `box-sizing` property to `border-box` using the `boxSizing` prop in xstyled. This makes the element's total size include the border and padding, so the content area shrinks accordingly. The example includes flexbox properties to center the content.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/box-sizing.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <x.div\n        boxSizing=\"border-box\"\n        h={32}\n        w={32}\n        p={4}\n        border={4}\n        borderColor=\"light-blue-400\"\n        bg=\"light-blue-200\"\n        borderRadius=\"md\"\n      >\n        <x.div h={1} w={1} bg=\"light-blue-400\" />\n      </x.div>\n    </x.div>\n  </template>\n  <x.div boxSizing=\"border-box\" h={32} w={32} p={4} border={4}>\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Skew Transformation with xstyled Breakpoints\nDESCRIPTION: This code snippet demonstrates how to apply a responsive skew transformation that only takes effect at specific screen sizes. The skewX property with value 3 will only be applied at medium (md) screen sizes and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/skew.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transform skewX={{ md: 3 }} />\n```\n\n----------------------------------------\n\nTITLE: Installing Emotion and xstyled packages\nDESCRIPTION: Command to install Emotion and its xstyled extension via npm package manager.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @emotion/react @emotion/styled @xstyled/emotion\n```\n\n----------------------------------------\n\nTITLE: Manual Styled Binding in xstyled (JS)\nDESCRIPTION: This JavaScript snippet shows how to manually bind a font weight using the `th.fontWeight` utility within a styled component.  It imports the `th` function from `@xstyled/system` and sets the `font` property of a styled `Title` component using `th.fontWeight('semibold')`.  Requires xstyled system utilities and styled-components to be installed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-weight.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/system'\n\nconst Title = styled.h4`\n  font: ${th.fontWeight('semibold')};\n`\n```\n\n----------------------------------------\n\nTITLE: Aligning an Item to the End Using alignSelf=\"flex-end\" in xstyled (JSX)\nDESCRIPTION: Shows a flex layout where one item is aligned to the end of the cross axis using alignSelf=\"flex-end\" on the relevant x.div. Requires the xstyled library in a React app. Use alignSelf with value 'flex-end' on any flex or grid child to override item alignment regardless of the parent align-items CSS.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-self.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={24} display=\"flex\" alignItems=\"stretch\" spaceX={2}>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"red-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        alignSelf=\"flex-end\"\n        py={3}\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"red-600\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"red-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" alignItems=\"stretch\">\n    <div>1</div>\n    <x.div alignSelf=\"flex-end\">2</x.div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Utilities with System Defaults\nDESCRIPTION: Shows how to integrate custom utilities with the default xstyled system utilities. It uses the `compose` function to combine the imported `system` object and the custom `borderInline` utility before passing the result to `createCss`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCss, system, compose } from '@xstyled/...'\nimport { borderInline } from './utilities/border-inline'\n\nexport const { css, styled, x, createGlobalStyle } = createCss(\n  compose(system, borderInline),\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Absolute Positioning with xstyled in JSX\nDESCRIPTION: Demonstrates using `position=\"absolute\"` on an `x.div` component in JSX with `xstyled`. Explains that absolutely positioned elements are removed from the document flow and are positioned relative to the nearest ancestor with a non-static position, ignoring static parents in between.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/position.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={6}>\n      <div>\n        <x.p fontSize=\"sm\" color=\"indigo-900\" mb={2}>\n          With static positioning\n        </x.p>\n        <x.div\n          position=\"relative\"\n          bg=\"indigo-200\"\n          px={6}\n          pt={2}\n          pb={6}\n          fontWeight=\"medium\"\n        >\n          <x.p mb={2} color=\"indigo-600\">\n            Relative parent\n          </x.p>\n          <x.div position=\"static\" bg=\"indigo-300\" p={4} color=\"indigo-700\">\n            <x.p mb={2}>Static parent</x.p>\n            <x.div\n              position=\"static\"\n              bottom={0}\n              left={0}\n              bg=\"indigo-500\"\n              p={4}\n              color=\"indigo-50\"\n              display=\"inline-block\"\n            >\n              <p>Static child</p>\n            </x.div>\n            <x.div\n              bg=\"indigo-200\"\n              p={4}\n              color=\"indigo-600\"\n              display=\"inline-block\"\n            >\n              <p>Static sibling</p>\n            </x.div>\n          </x.div>\n        </x.div>\n      </div>\n\n      <div>\n        <x.p fontSize=\"sm\" color=\"indigo-900\" mb={2}>\n          With absolute positioning\n        </x.p>\n        <x.div\n          position=\"relative\"\n          bg=\"indigo-200\"\n          px={6}\n          pt={2}\n          pb={6}\n          fontWeight=\"medium\"\n        >\n          <x.p mb={2} color=\"indigo-600\">\n            Relative parent\n          </x.p>\n          <x.div position=\"static\" bg=\"indigo-300\" p={4} color=\"indigo-700\">\n            <x.p mb={2}>Static parent</x.p>\n            <x.div\n              position=\"absolute\"\n              top={0}\n              right={0}\n              bg=\"indigo-500\"\n              p={4}\n              color=\"indigo-50\"\n              display=\"inline-block\"\n            >\n              <p>Absolute child</p>\n            </x.div>\n            <x.div\n              bg=\"indigo-200\"\n              p={4}\n              color=\"indigo-600\"\n              display=\"inline-block\"\n            >\n              <p>Static sibling</p>\n            </x.div>\n          </x.div>\n        </x.div>\n      </div>\n    </x.div>\n  </template>\n  <x.div position=\"static\">\n    {/* Static parent */}\n    <x.div position=\"static\">\n      <p>Static child</p>\n    </x.div>\n    <x.div display=\"inline-block\">\n      <p>Static sibling</p>\n    </x.div>\n    {/* Static parent */}\n    <x.div position=\"absolute\">\n      <p>Absolute child</p>\n    </x.div>\n    <x.div display=\"inline-block\">\n      <p>Static sibling</p>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Font Sizes with xstyled in React (JSX)\nDESCRIPTION: This snippet shows how to use xstyled's responsive object notation to apply different font sizes based on the device's breakpoint. The fontSize prop receives an object where each key represents a breakpoint, such as xs or md, and its corresponding value is the font size to apply at that breakpoint. This approach requires a React setup and xstyled installed and configured for responsive support. Output is a paragraph whose fontSize adjusts responsively.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-size.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.p fontSize={{ xs: 'sm', md: 'xl' }}>{/* ... */}</x.p>\n```\n\n----------------------------------------\n\nTITLE: Responsive Gap Utility in xstyled Grid component\nDESCRIPTION: Shows how to apply responsive grid gaps using object notation, enabling different spacing at specified breakpoints like `md`. Requires React and xstyled, and enhances adaptability across screen sizes by specifying `gap={{ md: 2 }}`. Demonstrates responsiveness with a grid container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/gap.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div display=\"grid\" gap={{ md: 2 }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Default Durations in xstyled\nDESCRIPTION: Shows the default durations configuration in xstyled, which is based on Google Material Design recommendations. These values are used if no custom durations are provided in the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/durations.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  durations: {\n    instant: '100ms',\n    'fast-in': '250ms',\n    'fast-out': '200ms',\n    'slow-in': '300ms',\n    'slow-out': '250ms',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example React component utilizing xstyled components\nDESCRIPTION: This code demonstrates how to create a React functional component using xstyled's styled components, such as x.div, x.h4, and x.p, to compose a styled user interface. It showcases responsive styles, spacing, and layout properties, illustrating practical usage for building React UI elements with xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/emotion/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { x } from '@xstyled/emotion'\n\nfunction Example() {\n  return (\n    <x.div p={{ _: 3, md: 6 }} bg=\"white\" display=\"flex\" spaceX={4}>\n      <x.div flexShrink={0}>\n        <x.img h={12} w={12} src=\"/img/logo.svg\" alt=\"xstyled Logo\" />\n      </x.div>\n      <x.div>\n        <x.h4\n          fontSize={{ _: 'md', lg: 'xl' }}\n          fontWeight=\"medium\"\n          color=\"black\"\n        >\n          xstyled\n        </x.h4>\n        <x.p color=\"gray-500\">A CSS-in-JS framework built for React.</x.p>\n      </x.div>\n    </x.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ring utilities and applying box-shadow in xstyled (React JSX)\nDESCRIPTION: This snippet demonstrates how to use the 'ring' utility with various values to create outline rings using box-shadow. It includes multiple button examples showcasing different ring widths and how to combine rings with other utilities like boxShadow. It also covers focus rings, inset rings, and responsiveness, illustrating flexible styling options in React components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-width.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={{ _: 1, sm: 4 }}\n      gap={6}\n      justifyItems=\"center\"\n    >\n      <x.button\n        tabindex=\"-1\"\n        w={24}\n        outline={{ focus: 'none' }}\n        fontSize=\"sm\"\n        py={3}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"blue-500\"\n        ring={0}\n      >\n        {`ring={0}`}\n      </x.button>\n      <x.button\n        tabindex=\"-1\"\n        w={24}\n        outline={{ focus: 'none' }}\n        fontSize=\"sm\"\n        py={3}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"blue-500\"\n        ring={2}\n      >\n        {`ring={2}`}\n      </x.button>\n      <x.button\n        tabindex=\"-1\"\n        w={24}\n        outline={{ focus: 'none' }}\n        fontSize=\"sm\"\n        py={3}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"blue-500\"\n        ring\n      >\n        ring\n      </x.button>\n      <x.button\n        tabindex=\"-1\"\n        w={24}\n        outline={{ focus: 'none' }}\n        fontSize=\"sm\"\n        py={3}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"blue-500\"\n        ring={4}\n      >\n        {`ring={4}`}\n      </x.button>\n    </x.div>\n  </template>\n  <x.button ring={0}>ring-0</x.button>\n  <x.button ring={2}>ring-2</x.button>\n  <x.button ring>ring</x.button>\n  <x.button ring={4}>ring-4</x.button>\n</>\n\n```\n\n----------------------------------------\n\nTITLE: Example JSX layout demonstrating fixed positioning with xstyled components\nDESCRIPTION: This code creates a styled React component layout using xstyled, illustrating the use of 'fixed' and 'absolute' positioning properties. It features a header, scrollable content, and a fixed-positioned child element, emphasizing layout control and component styling. Dependencies include React and the xstyled library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/position.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div overflow=\"hidden\" maxWidth=\"md\" mx=\"auto\" my={4} borderRadius=\"xl\">\\n      <x.div borderRadius=\"xl 0 0\" bg=\"amber-200\" display=\"flex\" px={4} py={3}>\\n        <x.div mr={6}>\\n          <x.div\\n            display=\"inline-block\"\\n            borderRadius=\"full\"\\n            bg=\"amber-400\"\\n            h={3}\\n            w={3}\\n            mr={1}\\n          />\\n          <x.div\\n            display=\"inline-block\"\\n            borderRadius=\"full\"\\n            bg=\"amber-400\"\\n            h={3}\\n            w={3}\\n            mr={1}\\n          />\\n          <x.div\\n            display=\"inline-block\"\\n            borderRadius=\"full\"\\n            bg=\"amber-400\"\\n            h={3}\\n            w={3}\\n          />\\n        </x.div>\\n        <x.div flex=\"1 1 0\" bg=\"amber-100\" borderRadius mr={4} />\\n      </x.div>\\n      <x.div\\n        position=\"relative\"\\n        bg=\"amber-100\"\\n        color=\"amber-600\"\\n        h={64}\\n        fontWeight=\"medium\"\\n      >\\n        {/* Comment explaining the use of relative positioning for layout purposes */}\\n        <x.div\\n          position=\"absolute\"\\n          left={0}\\n          right={0}\\n          top={0}\\n          bg=\"amber-300\"\\n          color=\"amber-700\"\\n          zIndex={10}\\n          px={4}\\n          py={3}\\n        >\\n          Fixed child\\n        </x.div>\\n        <x.div\\n          position=\"absolute\"\\n          top={0}\\n          right={0}\\n          bottom={0}\\n          left={0}\\n          overflow=\"auto\"\\n          pt={16}\\n          px={6}\\n          pb={4}\\n          spaceY={4}\\n          fontFamily=\"Flow\"\\n        >\\n          <x.p fontFamily=\"sans\">Scroll me!</x.p>\\n          <p>\\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec\\n            odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla\\n            quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent\\n            mauris. Fusce nec tellus sed augue semper porta. Mauris massa.\\n            Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad\\n            litora torquent per conubia nostra, per inceptos himenaeos.\\n            Curabitur sodales ligula in libero.\\n          </p>\\n          <p>\\n            Sed dignissim lacinia nunc. Curabitur tortor. Pellentesque nibh.\\n            Aenean quam. In scelerisque sem at dolor. Maecenas mattis. Sed\\n            convallis tristique sem. Proin ut ligula vel nunc egestas porttitor.\\n            Morbi lectus risus, iaculis vel, suscipit quis, luctus non, massa.\\n            Fusce ac turpis quis ligula lacinia aliquet. Mauris ipsum. Nulla\\n            metus metus, ullamcorper vel, tincidunt sed, euismod in, nibh.\\n            Quisque volutpat condimentum velit. Class aptent taciti sociosqu ad\\n            litora torquent per conubia nostra, per inceptos himenaeos.\\n          </p>\\n          <p>\\n            Nam nec ante. Sed lacinia, urna non tincidunt mattis, tortor neque\\n            adipiscing diam, a cursus ipsum ante quis turpis. Nulla facilisi. Ut\\n            fringilla. Suspendisse potenti. Nunc feugiat mi a tellus consequat\\n            imperdiet. Vestibulum sapien. Proin quam. Etiam ultrices.\\n            Suspendisse in justo eu magna luctus suscipit. Sed lectus. Integer\\n            euismod lacus luctus magna.\\n          </p>\\n          <p>\\n            Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem,\\n            at interdum magna augue eget diam. Vestibulum ante ipsum primis in\\n            faucibus orci luctus et ultrices posuere cubilia Curae; Morbi\\n            lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel\\n            mi sit amet augue congue elementum. Morbi in ipsum sit amet pede\\n            facilisis laoreet. Donec lacus nunc, viverra nec, blandit vel,\\n            egestas et, augue. Vestibulum tincidunt malesuada tellus. Ut\\n            ultrices ultrices enim. Curabitur sit amet mauris. Morbi in dui quis\\n            est pulvinar ullamcorper. Nulla facilisi.\\n          </p>\\n          <p>\\n            Integer lacinia sollicitudin massa. Cras metus. Sed aliquet risus a\\n            tortor. Integer id quam. Morbi mi. Quisque nisl felis, venenatis\\n            tristique, dignissim in, ultrices sit amet, augue. Proin sodales\\n            libero eget ante. Nulla quam. Aenean laoreet. Vestibulum nisi\\n            lectus, commodo ac, facilisis ac, ultricies eu, pede. Ut orci risus,\\n            accumsan porttitor, cursus quis, aliquet eget, justo. Sed pretium\\n            blandit orci. Ut eu diam at pede suscipit sodales. Aenean lectus\\n            elit, fermentum non, convallis id, sagittis at, neque.\\n          </p>\\n          <p>\\n            Nullam mauris orci, aliquet et, iaculis et, viverra vitae, ligula.\\n            Nulla ut felis in purus aliquam imperdiet. Maecenas aliquet mollis\\n            lectus. Vivamus consectetuer risus et tortor. Lorem ipsum dolor sit\\n            amet, consectetur adipiscing elit. Integer nec odio. Praesent\\n            libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at\\n            nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris.\\n            Fusce nec tellus sed augue semper porta. Mauris massa.\\n          </p>\\n          <p>\\n            Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad\\n            litora torquent per conubia nostra, per inceptos himenaeos.\\n            Curabitur sodales ligula in libero. Sed dignissim lacinia nunc.\\n            Curabitur tortor. Pellentesque nibh. Aenean quam. In scelerisque sem\\n            at dolor. Maecenas mattis. Sed convallis tristique sem. Proin ut\\n            ligula vel nunc egestas porttitor. Morbi lectus risus, iaculis vel,\\n            suscipit quis, luctus non, massa. Fusce ac turpis quis ligula\\n            lacinia aliquet.\\n          </p>\\n          <p>\\n            Mauris ipsum. Nulla metus metus, ullamcorper vel, tincidunt sed,\\n            euismod in, nibh. Quisque volutpat condimentum velit. Class aptent\\n            taciti sociosqu ad litora torquent per conubia nostra, per inceptos\\n            himenaeos. Nam nec ante. Sed lacinia, urna non tincidunt mattis,\\n            tortor neque adipiscing diam, a cursus ipsum ante quis turpis. Nulla\\n            facilisi. Ut fringilla. Suspendisse potenti. Nunc feugiat mi a\\n            tellus consequat imperdiet. Vestibulum sapien. Proin quam.\\n            \\n            \\n            \\n            \\n          </p>\\n        </x.div>\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <div>\\n    <x.div position=\"fixed\">Fixed child</x.div>\\n    Scroll me! Lorem ipsum...\\n  </div>\\n<\\/>\n\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Typography with xstyled text Prop in React JSX\nDESCRIPTION: Shows how to apply responsive text sizing using an object notation with the 'text' prop in an xstyled component. The example applies different text sizes at specified breakpoints (e.g., 'xs' for extra small screens and 'xl' for medium and up). This enables adaptive typography that responds to screen size changes. The snippet requires xstyled's responsive design setup and theme configurations supporting these breakpoint keys. Input is a responsive object mapping breakpoint keys to text size values, with output being an element styled appropriately per viewport width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.p text={{ xs: 'sm', md: 'xl' }}>{/* ... */}</x.p>\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Radii in xstyled Theme JS\nDESCRIPTION: Shows how to customize the predefined border radius values available through the `borderRadius` prop by modifying the `radii` section of the xstyled theme object. This allows defining custom radius tokens like `xxl` or overriding existing ones. Requires a configured xstyled theme file and the `@xstyled/styled-components` library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_6\n\nLANGUAGE: JS\nCODE:\n```\n  // theme.js\n  import { th } from '@xstyled/styled-components'\n\n  export const theme = {\n    radii: {\n      // ...\n-     default: '0.25rem',\n+     default: '5px',\n+     xxl: '30px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Spacing with xstyled\nDESCRIPTION: Example of applying responsive horizontal spacing using object notation with the `spaceX` prop in an xstyled component. The code applies `spaceX={2}` by default (equivalent to the 'xs' breakpoint) and increases the spacing to `spaceX={4}` at the medium ('md') breakpoint and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/space-between.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"flex\" spaceX={{ xs: 2, md: 4 }}>\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom Utility with `style`\nDESCRIPTION: Illustrates how to define a basic custom utility using the `style` function from `@xstyled/...`. This example creates a `borderInline` utility that maps the `borderInline` prop directly to the `border-inline` CSS property.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// utilities/border-inline.js\nimport { style } from '@xstyled/...'\n\nexport const borderInline = style({\n  prop: 'borderInline',\n})\n```\n\n----------------------------------------\n\nTITLE: Applying overscrollBehavior=\"none\" with xstyled in JSX\nDESCRIPTION: This snippet illustrates setting overscrollBehavior=\"none\" on an <x.div> React component using xstyled to prevent both scrolling propagation to parent containers and bounce effects when scrolling past boundaries. The styled container includes overflow, size, color, padding, font, and border radius properties for visualization. Input includes overscrollBehavior prop set to \"none\"; the output is a scroll container that isolates scrolling entirely. Dependencies are React and xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overscroll-behavior.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      overscrollBehavior=\"none\"\n      overflow=\"auto\"\n      h={32}\n      bg=\"amber-200\"\n      color=\"amber-500\"\n      px={6}\n      py={4}\n      fontWeight=\"medium\"\n      fontFamily=\"Flow\"\n      borderRadius=\"lg\"\n    >\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris eleifend\n        rutrum auctor. Phasellus convallis sagittis augue ut ornare. Vestibulum\n        et gravida lectus, sed ultrices sapien. Nullam aliquet elit dui, vitae\n        hendrerit lectus volutpat eget. In porttitor tincidunt egestas.\n        Pellentesque laoreet ligula at est vulputate facilisis. Etiam tristique\n        justo ut odio placerat ornare. Cras bibendum, orci at ornare tincidunt,\n        lacus nunc gravida enim, sit amet euismod nunc lectus in lectus. Ut\n        dictum nulla et arcu aliquet ornare. Aliquam et dapibus lectus. Aenean\n        mattis elit mi, sed ultricies augue consectetur id. Sed id magna\n        malesuada, luctus urna a, bibendum tortor. Cras cursus cursus ex. Nulla\n        fringilla elit vitae imperdiet scelerisque. Donec ac sem eu diam\n        convallis mollis a sed leo. Proin congue augue turpis, eget rutrum dolor\n        ultricies non. Nulla blandit venenatis dapibus. Sed tincidunt mollis\n        elit, quis suscipit nibh eleifend quis. Donec ex lorem, auctor eu rutrum\n        in, blandit id dolor. Nulla molestie arcu turpis. In id felis vulputate,\n        tempor massa eget, malesuada mauris. Quisque fringilla consequat metus,\n        luctus scelerisque leo fringilla vel.\n      </p>\n    </x.div>\n  </template>\n  <x.div overscrollBehavior=\"none\">Lorem ipsum dolor sit amet...</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Pulse Animation to Div (JSX)\nDESCRIPTION: Illustrates the use of the 'pulse' animation utility on a <div> element using the `animation` prop in xstyled JSX. This animation provides a gentle fade-in and fade-out effect, commonly used for skeleton loading states.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div animation=\"pulse\" display=\"flex\" spaceX={4}> {/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Resizing Textarea Vertically with xstyled (JSX)\nDESCRIPTION: Shows how to use the `resize=\"vertical\"` prop on an `x.textarea` component to allow only vertical resizing. A preview template illustrates the styled component alongside the implementation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/resize.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.textarea resize=\"vertical\" border borderColor=\"gray-300\" borderRadius />\n  </template>\n  <x.textarea resize=\"vertical\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Offsetting Columns with Margin Left in xstyled (JSX)\nDESCRIPTION: Shows how to offset columns within an `xstyled` flexbox row (`<x.div row>`) by applying the `ml` (margin-left) prop to column elements (`<x.div col>`). This example uses percentage-based offsets.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n    >\n      <x.div row bg=\"blue-200\" borderRadius=\"md\">\n        <x.div col={1 / 3}>\n          <x.div bg=\"blue-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 3} ml=\"33.333%\">\n          <x.div bg=\"blue-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n      <x.div row bg=\"blue-200\" borderRadius=\"md\">\n        <x.div col={1 / 4} ml=\"25%\">\n          <x.div bg=\"blue-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 4} ml=\"25%\">\n          <x.div bg=\"blue-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n      <x.div row bg=\"blue-200\" borderRadius=\"md\">\n        <x.div ol={1 / 2} ml=\"25%\">\n          <x.div bg=\"blue-500\" p={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} ml=\"33.333%\" />\n  </x.div>\n  <x.div row>\n    <x.div col={1 / 4} ml=\"25%\" />\n    <x.div col={1 / 4} ml=\"25%\" />\n  </x.div>\n  <x.div row>\n    <x.div col={1 / 2} ml=\"25%\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using independent rowGap and columnGap in xstyled Grid component\nDESCRIPTION: Illustrates how to set separate spacing for rows and columns using `rowGap` and `columnGap` props. Suitable for scenarios requiring asymmetric gutter sizing, requiring React and xstyled. It displays a 3-column grid with numbered cells, demonstrating independent gap control.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/gap.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" columnGap={8} rowGap={4} gridTemplateColumns={3}>\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={12}\n          borderRadius=\"md\"\n          bg=\"emerald-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" columnGap={8} rowGap={4} gridTemplateColumns={3}>\n    <div>1</div>\n    {/* ... */}\n    <div>6</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Flex Grow using xstyled and React\nDESCRIPTION: This code snippet demonstrates how to apply flex grow based on screen size using xstyled's responsive object notation.  The `flexGrow` prop is assigned an object with the key `md` and value `1`, which applies the `flex-grow: 1` utility on medium screen sizes and above. This requires the xstyled library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-grow.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div flexGrow={{ md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Resize with xstyled (JSX)\nDESCRIPTION: Explains how to apply the `resize` utility conditionally based on screen size using responsive object notation. This example applies `resize=\"both\"` at the medium breakpoint (`md`) and above to an `x.textarea` component.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/resize.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.textarea resize={{ md: 'both' }} />\n```\n\n----------------------------------------\n\nTITLE: Using Fluid and Fractional Heights in xstyled React Components - JSX\nDESCRIPTION: Provides examples for setting height based on percentages, fractions, and CSS calc expressions using the h property. Demonstrates dynamic rendering with arrays of fractions as well as static fraction and calc-based values. Requires xstyled and React. Inputs can be fractions, decimals, or CSS strings; output is a set of layout rows with varying heights for visual comparison.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      spaceX={6}\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {[\n        [\n          ['1/2', 1 / 2],\n          ['1/2', 1 / 2],\n        ],\n        [\n          ['2/5', 2 / 5],\n          ['3/5', 3 / 5],\n        ],\n        [\n          ['0.2', 0.2],\n          ['0.8', 0.8],\n        ],\n        [\n          ['calc(50% - 40px)', 'calc(50% - 40px)'],\n          ['calc(50% + 40px)', 'calc(50% + 40px)'],\n        ],\n      ].map((v, i) => (\n        <x.div\n          key={i}\n          borderRadius=\"md\"\n          overflow=\"hidden\"\n          color=\"white\"\n          fontFamily=\"mono\"\n          h={48}\n        >\n          <x.div h={v[0][1]} px={2} py={4} bg=\"rose-400\" textAlign=\"center\">\n            h={v[0][0]}\n          </x.div>\n          <x.div h={v[1][1]} px={2} py={4} bg=\"rose-500\" textAlign=\"center\">\n            h={v[1][0]}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" h={48}>\n    <x.div h={1 / 2}>h=1/2</x.div>\n    <x.div h={1 / 2}>h=1/2</x.div>\n  </x.div>\n  <x.div display=\"flex\" h={48}>\n    <x.div h={2 / 5}>h=2/5</x.div>\n    <x.div h={3 / 5}>h=3/5</x.div>\n  </x.div>\n  <x.div display=\"flex\" h={48}>\n    <x.div h={0.2}>h=0.2</x.div>\n    <x.div h={0.8}>h=0.8</x.div>\n  </x.div>\n  <x.div display=\"flex\" h={48}>\n    <x.div h=\"calc(50% - 40px)\">h=calc(50% - 40px)</x.div>\n    <x.div h=\"calc(50% + 40px)\">h=calc(50% + 40px)</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing xstyled and styled-components NPM packages\nDESCRIPTION: This command installs the required npm packages: styled-components and @xstyled/styled-components. These libraries are necessary to use xstyled's styling capabilities within a JavaScript project.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/src/components/getting-started.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install styled-components @xstyled/styled-components\n```\n\n----------------------------------------\n\nTITLE: Flex Item Growth with Xstyled\nDESCRIPTION: This snippet showcases the use of the `flex` property to allow flex items to grow and shrink as needed, without taking their initial size into account, achieved using `flex=\"1 1 0\"`. The component sets up a flex container and displays three items with varying content lengths. The visual output will demonstrate the items' ability to grow and shrink based on the available space and content requirements.  Requires Xstyled and React.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <div>\n      <x.p fontSize=\"sm\" color=\"fuchsia-600\">\n        Default behaviour\n      </x.p>\n      <x.div mt={2} display=\"flex\" spaceX={4}>\n        <x.div\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Short\n        </x.div>\n        <x.div\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Medium length\n        </x.div>\n        <x.div\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Significantly larger amount of content\n        </x.div>\n      </x.div>\n\n      <x.p mt={8} fontSize=\"sm\" color=\"fuchsia-600\">\n        With \"1 1 0\"\n      </x.p>\n      <x.div mt={2} display=\"flex\" spaceX={4}>\n        <x.div\n          flex=\"1 1 0\"\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Short\n        </x.div>\n        <x.div\n          flex=\"1 1 0\"\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Medium length\n        </x.div>\n        <x.div\n          flex=\"1 1 0\"\n          borderRadius=\"md\"\n          bg=\"fuchsia-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Significantly larger amount of content\n        </x.div>\n      </x.div>\n    </div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flex=\"1 1 0\">\n      {/* Will grow and shrink as needed without taking initial size into account */}\n    </x.div>\n    <x.div flex=\"1 1 0\">\n      {/* Will grow and shrink as needed without taking initial size into account */}\n    </x.div>\n    <x.div flex=\"1 1 0\">\n      {/* Will grow and shrink as needed without taking initial size into account */}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Automatically Binding Font Size in Styled Components using xstyled (JavaScript)\nDESCRIPTION: This example demonstrates how font sizes defined in the theme are automatically bound to the font-size attribute when using xstyled's styled API. The code imports the styled function and defines a styled.h4 component with a font-size value referencing a preset key, such as '2xl'. Requirements include the xstyled library and configuration of styled components. The output is a styled Title component with an extra large font size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-size.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Title = styled.h4`\n  font-size: 2xl;\n`\n```\n\n----------------------------------------\n\nTITLE: Applying Letter Spacing via Styled Components (Automatic)\nDESCRIPTION: Shows how to use `styled` from `@xstyled/...` to automatically apply predefined letter spacing values within styled components. The `letter-spacing: wide;` syntax leverages xstyled's binding for defined theme values. Requires `@xstyled/styled-components` or similar package.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/letter-spacing.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Title = styled.h4`\n  letter-spacing: wide;\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Padding to a Centered Container with xstyled in React (JSX)\nDESCRIPTION: This snippet shows how to combine the container, mx=\"auto\", and px={4} utilities from xstyled to fix an element's width, center it, and apply horizontal padding. The px utility sets the horizontal padding based on the specified size (here, 4). Dependencies include xstyled and React. The snippet accepts children components and applies consistent padding alongside breakpoint-based sizing and centering, with no built-in container padding enforced by xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/container.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div container mx=\"auto\" px={4}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Targeting Mobile Screens with Default Styles in xstyled\nDESCRIPTION: Shows how to target small (mobile) screens by default in xstyled's mobile-first approach. Examples demonstrate setting text alignment for all screen sizes and overriding at specific breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/responsive-design.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Center text on all screen sizes\n<x.div textAlign=\"center\" />\n\n// Center text on all screen sizes\n<x.div textAlign={{ _: \"center\" }} />\n\n// Center text on screens smaller than 640px, and left align it on screens 640px and wider\n<x.div textAlign={{ _: \"center\", md: 'left' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Z-Index Prop in xstyled JSX\nDESCRIPTION: Demonstrates the usage of the `zIndex` prop on `x.div` components in xstyled to control stacking order. Elements with higher `zIndex` values appear in front of elements with lower values when positioned. Requires the xstyled library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/z-index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      position=\"relative\"\n      h={28}\n      textAlign=\"center\"\n      transform\n      translateX={12}\n    >\n      <x.div\n        zIndex={40}\n        position=\"relative\"\n        w={20}\n        h={20}\n        bg=\"fuchsia-500\"\n        borderWidth=\"0 1 0\"\n        borderColor=\"fuchsia-600\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        color=\"white\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        5\n      </x.div>\n      <x.div\n        zIndex={30}\n        position=\"relative\"\n        left={-6}\n        top={4}\n        w={20}\n        h={20}\n        bg=\"fuchsia-500\"\n        borderWidth=\"0 1 0\"\n        borderColor=\"fuchsia-600\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        color=\"white\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        4\n      </x.div>\n      <x.div\n        zIndex={20}\n        position=\"relative\"\n        left={-12}\n        top={8}\n        w={20}\n        h={20}\n        bg=\"fuchsia-500\"\n        borderWidth=\"0 1 0\"\n        borderColor=\"fuchsia-600\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        color=\"white\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n      <x.div\n        zIndex={10}\n        position=\"relative\"\n        left={-18}\n        top={12}\n        w={20}\n        h={20}\n        bg=\"fuchsia-500\"\n        borderWidth=\"0 1 0\"\n        borderColor=\"fuchsia-600\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        color=\"white\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        zIndex={0}\n        position=\"relative\"\n        left={-24}\n        top={16}\n        w={20}\n        h={20}\n        bg=\"fuchsia-500\"\n        borderWidth=\"0 1 0\"\n        borderColor=\"fuchsia-600\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        color=\"white\"\n        fontSize=\"2xl\"\n      >\n        1\n      </x.div>\n    </x.div>\n  </template>\n  <x.div zIndex={40}>5</x.div>\n  <x.div zIndex={30}>4</x.div>\n  <x.div zIndex={20}>3</x.div>\n  <x.div zIndex={10}>2</x.div>\n  <x.div zIndex={0}>1</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Border Color - xstyled React - JSX\nDESCRIPTION: This snippet demonstrates the use of xstyled's responsive object notation to change the border color at different breakpoints in a React component. The 'borderColor' prop is set as an object, e.g., { md: 'red-500' }, applying the red border color at the 'md' (medium) screen size and above. Dependencies include React, xstyled, and styled-components. Primary input is the breakpoint-based object; output is a responsive-styled division.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-color.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div borderColor={{ md: 'red-500' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Min-Width Using Object Notation (xstyled, React, JSX)\nDESCRIPTION: This snippet demonstrates how to use object notation with xstyled to apply different min-width values at various breakpoints. The example sets minWidth to a fraction at the xs breakpoint and to 1 at md and larger. This requires xstyled's responsive system and works in a React environment. Inputs: a minWidth prop with an object mapping breakpoints to values. Output: The component will compute and apply minWidth according to the current screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-width.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div minWidth={{ xs: 1 / 2, md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Fit 'none' with xstyled React Components - JSX\nDESCRIPTION: This code example applies objectFit=\"none\" to the <x.img> element, causing the image to display at its original size, cropped as needed, and ignore its container's size. It requires xstyled and React. Users can specify dimensions, but the image will not scale to fit. The rendered result may result in only a portion of the image being visible if the container is smaller than the intrinsic image size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/object-fit.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div bg=\"amber-300\" borderRadius=\"md\" overflow=\"hidden\">\n      <x.img\n        h={48}\n        w={1}\n        objectFit=\"none\"\n        src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        alt=\"\"\n      />\n    </x.div>\n  </template>\n  <x.div bg=\"amber-300\">\n    <x.img objectFit=\"none\" h={48} w=\"100%\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Flex Direction to Column with xstyled in JSX\nDESCRIPTION: Illustrates usage of flexDirection=\"column\" prop to stack flex items vertically. Uses React and xstyled for styling with flexbox. Child divs are styled consistently with fixed height, colors, rounded corners, and centered content. Space between items is controlled using spaceY for vertical spacing. Input is an array mapped to vertically stacked visually separated blocks.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-direction.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4}>\n      {[1, 2, 3].map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          borderRadius=\"md\"\n          bg=\"emerald-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" flexDirection=\"column\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Stretching a Flex Item with alignSelf=\"stretch\" in xstyled (JSX)\nDESCRIPTION: Demonstrates using alignSelf=\"stretch\" to make an individual item span the cross axis of its container in a flex layout. Relies on xstyled and should be used within a React environment. By setting alignSelf to 'stretch', it forces the item's height (if flex-direction is row) or width (if flex-direction is column) to fill the container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-self.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={24} display=\"flex\" alignItems=\"flex-start\" spaceX={2}>\n      <x.div\n        py={3}\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"fuchsia-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        alignSelf=\"stretch\"\n        py={3}\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"fuchsia-600\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        py={3}\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"fuchsia-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" alignItems=\"flex-start\">\n    <div>1</div>\n    <x.div alignSelf=\"stretch\">2</x.div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Styling with xstyled Declarative Component - JSX\nDESCRIPTION: This snippet demonstrates xstyled's responsive utility syntax using the `x.button` component. It applies responsive width by providing an object to the `w` prop, mapping breakpoints (`_` for base, `md` for medium) to corresponding width values, simplifying media query handling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { x } from '@xstyled/emotion'\n\nconst Button = ({ children }) => {\n  return <x.button w={{ _: 200, md: 300 }}>{children}</x.button>\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Scale Transform in JSX\nDESCRIPTION: This example shows how to apply scale transforms responsively using object notation. The scale of 0.5 will only be applied at medium screen sizes and above, demonstrating xstyled's responsive design capabilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/scale.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transform scale={{ md: 0.5 }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Wait Cursor Style in React with xstyled (JSX)\nDESCRIPTION: Illustrates how to display the wait cursor (typically an hourglass) in React using xstyled by setting cursor=\"wait\". This is useful to indicate background processing. x.div accepts typical style props alongside cursor.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"wait\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"emerald-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"wait\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing responsive list style in xstyled (JSX)\nDESCRIPTION: Example showing how to use responsive object notation to control the list style type at different breakpoints. This snippet demonstrates applying the 'disc' style at medium screen sizes and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/list-style-type.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div listStyleType={{ md: 'disc' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Text Color with xstyled\nDESCRIPTION: This snippet illustrates how to apply text color responsively based on screen size using xstyled's `color` prop. It utilizes an object with breakpoint keys (e.g., `md`) to specify different color values at different screen sizes. This allows the text color to adapt to various devices and screen sizes, enhancing the user interface across platforms.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/color.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div color={{ md: 'red-600' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying responsive margin using xstyled\nDESCRIPTION: Demonstrates how to apply margin that changes based on the screen size using responsive object notation. The example `my={{ md: 8 }}` applies the `my={8}` margin only when the screen size is at or above the 'md' breakpoint. This feature requires xstyled's responsive design setup.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/margin.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div my={{ md: 8 }} />\n\n```\n\n----------------------------------------\n\nTITLE: Removing Text Decoration in React with xstyled\nDESCRIPTION: Example showing how to remove any text decoration by using the none value for the textDecoration prop in xstyled. The component uses indigo color styling for the preview.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-decoration.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textDecoration=\"none\" fontSize=\"xl\" color=\"indigo-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textDecoration=\"none\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Responsive fontWeight in xstyled (React)\nDESCRIPTION: This JSX snippet demonstrates how to use responsive object notation to set different font weights at different screen sizes. The `fontWeight` prop accepts an object where keys represent breakpoints and values are the desired font weight.  It requires xstyled components and utilizes the responsive design features of xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-weight.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div fontWeight={{ xs: 'thin', md: 'bold' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying Default Border Radius Utility in xstyled (JSX)\nDESCRIPTION: Example showing how to apply the default border radius using the `borderRadius` prop without an explicit value (equivalent to `borderRadius={true}`). This uses the value associated with the `default` key in the theme's `radii` configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div borderRadius />\n// will generate CSS: \"border-radius: .25em;\"\n```\n\n----------------------------------------\n\nTITLE: Setting Move Cursor Style in React with xstyled (JSX)\nDESCRIPTION: Shows how to set cursor=\"move\" with xstyled's x.div in React, signaling an element can be moved (e.g., via drag-and-drop). x.div supports styling, and dependencies are React and xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"move\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"indigo-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"move\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Utility in xstyled JSX\nDESCRIPTION: Illustrates applying a xstyled utility like `visibility` only at a specific breakpoint (`md`) or larger using object notation (`{{ md: 'hidden' }}`). This demonstrates the general pattern for making any xstyled utility responsive. Requires the xstyled library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/z-index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div visibility={{ md: 'hidden' }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Border Color for Individual Sides - xstyled React - JSX\nDESCRIPTION: This snippet shows how to set different border colors for each side of an input element using xstyled in a React component. The 'borderColor' prop accepts four distinct values ('indigo-500 emerald-500 purple-500 red-500') representing top, right, bottom, and left borders, respectively. Dependencies include React, xstyled, and styled-components. Renders a multi-colored bordered input element with custom paddings and outline settings.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-color.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.input\n      placeholder=\"Your email\"\n      p={3}\n      border={2}\n      borderColor=\"indigo-500 emerald-500 purple-500 red-500\"\n      outline={{ focus: 'none' }}\n      borderRadius=\"md\"\n    />\n  </template>\n  <x.input border={2} borderColor=\"indigo-500 emerald-500 purple-500 red-500\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Pre Whitespace in xstyled\nDESCRIPTION: This snippet sets `whiteSpace` to \"pre\", which preserves newlines and spaces in an xstyled `x.div` component, preventing text wrapping.  It includes `overflowX=\"auto\"` to handle overflow.  The code uses a template preview to visualize the resulting text formatting.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/whitespace.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={3 / 4}\n      px={6}\n      py={4}\n      bg=\"amber-200\"\n      borderRadius=\"lg\"\n      overflowX=\"auto\"\n    >\n      <x.div\n        whiteSpace=\"pre\"\n        fontFamily=\"Flow\"\n        color=\"amber-500\"\n        fontSize=\"3xl\"\n        lineHeight={5}\n      >\n        {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n      </x.div>\n    </x.div>\n  </template>\n  <x.div w={3 / 4} overflowX=\"auto\">\n    <x.div whiteSpace=\"pre\">\n      {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items with justifySelf=\"auto\" in xstyled React JSX\nDESCRIPTION: Demonstrates how to use the justifySelf=\"auto\" prop in xstyled to align a grid item based on the parent grid's justify-items property. The snippet dynamically creates multiple grid items and assigns 'auto' alignment to a specific item, illustrating default alignment behavior. Requires React and xstyled components. Inputs include the justifySelf prop set per item; output is a grid layout with one item aligned automatically.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-self.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"stretch\"\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          h={16}\n          bg={value === 2 ? 'purple-500' : 'purple-300'}\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          justifySelf={value === 2 ? 'auto' : null}\n        >\n          {value === 2 ? '1' : ''}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"stretch\">\n    {/* ... */}\n    <x.div justifySelf=\"auto\">1</x.div>\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Width in React\nDESCRIPTION: Example showing how to control element width at specific breakpoints using responsive object notation. Sets width to 1/2 on extra small screens and full width on medium screens and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div w={{ xs: 1 / 2, md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing border width theme values in theme.js for xstyled\nDESCRIPTION: This code snippet illustrates how to override default border width values in the theme configuration to customize the appearance across components. Modifying theme.borderWidths allows centralized and consistent style updates.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-width.mdx#_snippet_4\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  import { th } from '@xstyled/styled-components'\n\n  export const theme = {\n    radii: {\n      // ...\n-     default: '1px',\n+     default: '2px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Default Focus Outline to Buttons (CSS)\nDESCRIPTION: Preflight includes this CSS rule to ensure buttons have a visible focus outline by default for accessibility. It applies a `1px dotted` outline and a browser-specific focus ring color. This default can be overridden using `ring` utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nbutton:focus {\n  outline: 1px dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive textTransform property with object notation in xstyled\nDESCRIPTION: Explains how to apply text transformation at specific breakpoints using responsive object notation. An example shows setting 'textTransform' to 'uppercase' on medium screens and larger.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-transform.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div textTransform={{ md: 'uppercase' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Using display=\"inline-grid\" for inline grid layout in React with XStyled\nDESCRIPTION: This snippet demonstrates setting 'inline-grid' as the display value for grid containers, allowing inline behavior for grid layouts alongside other inline elements. It shows multiple inline grid containers with consistent gap and template columns, suited for inline complex grid arrangements.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div spaceX={4}> <x.div display=\"inline-grid\" p={4} bg=\"light-blue-300\" borderRadius=\"md\" gridTemplateColumns={3} gap={4}> {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => ( <x.div key={value} py={4} px={6} borderRadius=\"md\" bg=\"light-blue-500\" color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"extrabold\"> 1 </x.div> ))} </x.div> <x.div display=\"inline-grid\" p={4} bg=\"light-blue-300\" borderRadius=\"md\" gridTemplateColumns={3} gap={4}> {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => ( <x.div key={value} py={4} px={6} borderRadius=\"md\" bg=\"light-blue-500\" color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"extrabold\"> 2 </x.div> ))} </x.div> </x.div> </template> <x.div display=\"inline-grid\" gap={4} gridTemplateColumns={3}> <span>1</span> <span>1</span> <span>1</span> </x.div> <x.div display=\"inline-grid\" gap={4} gridTemplateColumns={3}> <span>2</span> <span>2</span> <span>2</span> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Setting No Wrap Whitespace in xstyled\nDESCRIPTION: This snippet demonstrates setting the `whiteSpace` property to \"nowrap\" within an xstyled `x.div` component to prevent text wrapping. Newlines and spaces are collapsed. It includes an `overflowX=\"auto\"` property to handle potential horizontal overflow.  A template preview is provided to showcase the rendered result.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/whitespace.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={3 / 4}\n      px={6}\n      py={4}\n      bg=\"emerald-200\"\n      borderRadius=\"lg\"\n      overflowX=\"auto\"\n    >\n      <x.div\n        whiteSpace=\"nowrap\"\n        fontFamily=\"Flow\"\n        color=\"emerald-500\"\n        fontSize=\"3xl\"\n        lineHeight={5}\n      >\n        {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n      </x.div>\n    </x.div>\n  </template>\n  <x.div w={3 / 4} overflowX=\"auto\">\n    <x.div whiteSpace=\"nowrap\">\n      {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying responsive styles up to breakpoint (xstyled, JavaScript)\nDESCRIPTION: Illustrates the use of the `down` utility with styled-components and the `css` utility to apply styles that are effective up to a specified breakpoint (exclusive of the breakpoint itself). It requires importing `down` and `css` from `@xstyled/...`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled, { css, down } from '@xstyled/...'\n\nconst Box = styled.div`\n  width: 200px;\n  height: 200px;\n  ${down(\n    'md',\n    css`\n      height: 100px;\n    `,\n  )}\n`\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items with justifySelf=\"center\" in xstyled React JSX\nDESCRIPTION: Shows how to center-align an individual grid item using justifySelf=\"center\" in xstyled. The snippet builds a grid with several items where one item is centered along its inline axis. Requires React and xstyled libraries. Input is the justifySelf prop per item; output visually centers the designated item inside the grid cell.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-self.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"stretch\"\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          h={16}\n          bg={value === 2 ? 'light-blue-500' : 'light-blue-300'}\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          px={4}\n          justifySelf={value === 2 ? 'center' : null}\n        >\n          {value === 2 ? '1' : ''}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"stretch\">\n    {/* ... */}\n    <x.div justifySelf=\"center\">1</x.div>\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Vertical Space Between Elements with xstyled\nDESCRIPTION: Illustrates using the `spaceY={4}` prop on a parent `x.div` element to add vertical spacing between its direct children in a React component. This utility applies calculated top and bottom margins to the children using CSS custom properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/space-between.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <div>\n      <x.div\n        h={16}\n        color=\"white\"\n        bg=\"blue-500\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"md\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        1\n      </x.div>\n      <x.div h={4} borderRadius=\"md\" bg=\"blue-300\" />\n      <x.div\n        h={16}\n        color=\"white\"\n        bg=\"blue-500\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"md\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        2\n      </x.div>\n      <x.div h={4} borderRadius=\"md\" bg=\"blue-300\" />\n      <x.div\n        h={16}\n        color=\"white\"\n        bg=\"blue-500\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"md\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        3\n      </x.div>\n    </div>\n  </template>\n  <x.div spaceY={4}>\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Rounding Separate Sides using String Values in xstyled JSX\nDESCRIPTION: Demonstrates applying border radius to individual sides of an element by providing a space-separated string value to the `borderRadius` prop, similar to standard CSS border-radius shorthand for corners. The snippet includes a preview template and the corresponding JSX code demonstrating different side combinations. This uses `@xstyled/styled-components`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={2} gridTemplateColumns={{ sm: 2, lg: 4 }}>\n      {['lg lg 0 0', '0 lg lg 0', '0 0 lg lg', 'lg 0 0 lg'].map(\n        (borderRadius) => (\n          <x.div\n            key={borderRadius}\n            p={6}\n            bg=\"indigo-500\"\n            color=\"white\"\n            textAlign=\"center\"\n            fontWeight=\"extrabold\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            borderRadius={borderRadius}\n          >\n            {borderRadius}\n          </x.div>\n        ),\n      )}\n    </x.div>\n  </template>\n  <x.div borderRadius=\"lg lg 0 0\" />\n  <x.div borderRadius=\"0 lg lg 0\" />\n  <x.div borderRadius=\"0 0 lg lg\" />\n  <x.div borderRadius=\"lg 0 0 lg\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Column Start and End Lines in xstyled Grid (JSX)\nDESCRIPTION: Illustrates how to explicitly set starting and ending grid lines for elements in an xstyled grid using the gridColumn property with different syntaxes: 'n', 'auto / n', 'n / span x', or 'span x / n'. Requires React and xstyled, with gridColumn controlling the CSS grid-column property. Key parameters include the start/end indices or span, allowing for flexible element arrangement. Input is a grid arrangement with specified columns, and output is a precise rendering of items aligned to specific grid lines.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-column.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={6} gap={4}>\n      <x.div\n        h={12}\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridColumn=\"2 / span 4\"\n      >\n        1\n      </x.div>\n      <x.div\n        h={12}\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridColumn=\"1 / 3\"\n      >\n        2\n      </x.div>\n      <x.div\n        h={12}\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridColumn=\"span 2 / 7\"\n      >\n        3\n      </x.div>\n      <x.div\n        h={12}\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridColumn=\"1 / 7\"\n      >\n        4\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateColumns={6} gap={4}>\n    <x.div gridColumn=\"2 / span 4\">1</x.div>\n    <x.div gridColumn=\"1 / 3\">2</x.div>\n    <x.div gridColumn=\"span 2 / 7\">3</x.div>\n    <x.div gridColumn=\"1 / 7\">4</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: React JSX example demonstrating auto-layout equal-width columns\nDESCRIPTION: This code demonstrates creating multiple rows of equally wide columns that adapt responsively across all breakpoints, utilizing the 'col' property without specific ratios to maintain uniform width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\" spaceY={2}>\n      <x.div row>\n        <x.div col>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            1 of 2\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            2 of 2\n          </x.div>\n        </x.div>\n      </x.div>\n      <x.div row>\n        <x.div col>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            1 of 3\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            2 of 3\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"red-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            3 of 3\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col>1 of 2</x.div>\n    <x.div col>2 of 2</x.div>\n  </x.div>\n  <x.div row>\n    <x.div col>1 of 3</x.div>\n    <x.div col>2 of 3</x.div>\n    <x.div col>3 of 3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Border Color on All Sides - xstyled React - JSX\nDESCRIPTION: This snippet demonstrates setting the border color on all sides of an input element using xstyled in a React component. The 'borderColor' prop applies a uniform color ('red-600') to all borders, while the input receives custom padding, border radius, and disables the outline on focus. Dependencies include React, xstyled, and styled-components. Inputs and outputs: No external inputs; renders an input field styled accordingly.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-color.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <x.input\n        placeholder=\"Your email\"\n        p={3}\n        border={2}\n        borderColor=\"red-600\"\n        outline={{ focus: 'none' }}\n        borderRadius=\"md\"\n      />\n    </x.div>\n  </template>\n  <x.input border={2} borderColor=\"red-600\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Table Layout with 'auto' in xstyled\nDESCRIPTION: This snippet demonstrates how to use the `tableLayout=\"auto\"` prop to allow the table columns to automatically size based on the content. The example shows a fully functional React table styled using xstyled components. It includes a header, body, and rows, illustrating how content affects column widths.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/tables/table-layout.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.table tableLayout=\"auto\" borderCollapse=\"collapse\">\n      <thead>\n        <tr>\n          <x.th px={4} py={2} color=\"amber-600\">\n            Title\n          </x.th>\n          <x.th px={4} py={2} color=\"amber-600\">\n            Author\n          </x.th>\n          <x.th px={4} py={2} color=\"amber-600\">\n            Views\n          </x.th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            Another Story\n          </x.td>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            James\n          </x.td>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            858\n          </x.td>\n        </tr>\n        <x.tr bg=\"amber-200\">\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            The Unexpected very long Journey of a Hobbit in the Middle-Earth\n          </x.td>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            James\n          </x.td>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            112\n          </x.td>\n        </x.tr>\n        <tr>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            A short story\n          </x.td>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            Chris\n          </x.td>\n          <x.td\n            border\n            borderColor=\"amber-500\"\n            px={4}\n            py={2}\n            color=\"amber-600\"\n            fontWeight=\"medium\"\n          >\n            1,280\n          </x.td>\n        </tr>\n      </tbody>\n    </x.table>\n  </template>\n  <x.table tableLayout=\"auto\">\n    <thead>\n      <tr>\n        <th>Title</th>\n        <th>Author</th>\n        <th>Views</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Another Story</td>\n        <td>James</td>\n        <td>858</td>\n      </tr>\n      <x.tr bg=\"light-blue-200\">\n        <td>\n          A Long and Winding Tour of the History of UI Frameworks and Tools and\n          the Impact on Design\n        </td>\n        <td>James</td>\n        <td>112</td>\n      </tr>\n      <tr>\n        <td>A short story</td>\n        <td>Chris</td>\n        <td>1,280</td>\n      </tr>\n    </tbody>\n  </x.table>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Focus Text Color with xstyled\nDESCRIPTION: This snippet shows how to change the text color of an xstyled `x.input` component when it's in focus. It uses an object with `_` for the default color and `focus` for the color when the input is focused.  This example also includes basic styling like border and padding to enhance the input's appearance.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/color.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.input\n      defaultValue=\"Something\"\n      color={{ _: 'red-600', focus: 'red-800' }}\n      borderRadius=\"md\"\n      border={1}\n      borderColor=\"red-600\"\n      p={2}\n      outline={{ focus: 'none' }}\n    />\n  </template>\n  <x.input\n    defaultValue=\"Something\"\n    color={{ _: 'red-600', focus: 'red-800' }}\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Grid Template Rows (React)\nDESCRIPTION: This snippet illustrates how to apply `gridTemplateRows` responsively using object notation in xstyled. By providing an object to the `gridTemplateRows` prop, you can set different values based on screen size. The example sets `gridTemplateRows` to `2` for medium screen sizes and above.  This relies on the xstyled library and its responsive design features. The output adjusts the grid layout based on the screen size, changing the number of rows based on the breakpoint.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-rows.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridTemplateRows={{ md: 2 }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Implementing responsive border widths in React xstyled\nDESCRIPTION: This snippet shows how to apply border widths conditionally based on viewport sizes using responsive object notation. It allows for responsive designs where borders adapt at different breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-width.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div borderWidth={{ md: 2 }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Responsive Max-Height Utility with Breakpoint Support\nDESCRIPTION: This snippet illustrates how to use an object notation for maxHeight to apply different values at various screen sizes, enabling responsive design. For example, setting maxHeight={{ xs: 1/2, md: 1 }} applies a fractional maxHeight on small screens and a fixed scale on medium screens and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-height.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div maxHeight={{ xs: 1 / 2, md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Grid Column Placement with xstyled (JSX)\nDESCRIPTION: Shows how to use responsive object notation in xstyled to alter an element's column placement at different breakpoints by passing an object to the gridColumn prop (e.g., { md: 'span 2 / span 2' }). Requires React and xstyled, and depends on the theme's breakpoint definitions. The key parameter is gridColumn, expecting an object where each property is a breakpoint. Input should be a grid component, and output is responsive column behavior with the specified span or placement applying above the chosen screen width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-column.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridColumn={{ md: 'span 2 / span 2' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Table Layout with 'fixed' in xstyled\nDESCRIPTION: This snippet showcases how to use `tableLayout=\"fixed\"` to set a fixed layout for the table.  The width of the first row determines column widths. The code includes examples that demonstrate setting column widths using the `w` prop in styled components, and includes nested `x.td` elements.  Requires xstyled library to work.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/tables/table-layout.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.table tableLayout=\"fixed\" borderCollapse=\"collapse\">\n      <thead>\n        <tr>\n          <x.th px={4} py={2} color=\"light-blue-600\" w={0.5}>\n            Title\n          </x.th>\n          <x.th px={4} py={2} color=\"light-blue-600\" w={0.25}>\n            Author\n          </x.th>\n          <x.th px={4} py={2} color=\"light-blue-600\" w={0.25}>\n            Views\n          </x.th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            Another Story\n          </x.td>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            James\n          </x.td>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            858\n          </x.td>\n        </tr>\n        <x.tr bg=\"light-blue-200\">\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            The Unexpected very long Journey of a Hobbit in the Middle-Earth\n          </x.td>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            James\n          </x.td>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            112\n          </x.td>\n        </x.tr>\n        <tr>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            A short story\n          </x.td>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            Chris\n          </x.td>\n          <x.td\n            border\n            borderColor=\"light-blue-500\"\n            px={4}\n            py={2}\n            color=\"light-blue-600\"\n            fontWeight=\"medium\"\n          >\n            1,280\n          </x.td>\n        </tr>\n      </tbody>\n    </x.table>\n  </template>\n  <x.table tableLayout=\"auto\">\n    <thead>\n      <tr>\n        <x.th w={1 / 2}>Title</x.th>\n        <x.th w={1 / 4}>Author</x.th>\n        <x.th w={1 / 4}>Views</x.th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Another Story</td>\n        <td>James</td>\n        <td>858</td>\n      </tr>\n      <x.tr bg=\"light-blue-200\">\n        <td>\n          A Long and Winding Tour of the History of UI Frameworks and Tools and\n          the Impact on Design\n        </td>\n        <td>James</td>\n        <td>112</td>\n      </tr>\n      <tr>\n        <td>A short story</td>\n        <td>Chris</td>\n        <td>1,280</td>\n      </tr>\n    </tbody>\n  </x.table>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Local Background Attachment in xstyled (React)\nDESCRIPTION: This code snippet showcases the use of `backgroundAttachment=\"local\"` to control the background image behavior within an xstyled component. When local is used, the background image scrolls with the container and the viewport. It applies a background image, sets `backgroundSize`, `backgroundPosition` and creates a scrollable container. The result is a div that scrolls the background image with its content. Requires the xstyled library and a URL for the image to display.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-attachment.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={1}\n      h={72}\n      backgroundAttachment=\"local\"\n      backgroundSize=\"cover\"\n      backgroundPosition=\"center\"\n      overflowY=\"scroll\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&h=800&q=80')\"\n    >\n      <x.div h={96} />\n    </x.div>\n  </template>\n  <x.div backgroundAttachment=\"local\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Named Border Radius Utility in xstyled (JSX)\nDESCRIPTION: Example demonstrating the usage of the `borderRadius` prop on an `x.div` component to apply a specific border radius defined in the theme. The value \"sm\" corresponds to the `sm` key within the `radii` section of the theme object.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div borderRadius=\"sm\" />\n// will generate CSS: \"border-radius: .125em;\"\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Border Radius using xstyled JSX\nDESCRIPTION: Explains how to make the border radius responsive by using xstyled's object notation. Setting the `borderRadius` prop to `{ md: 'lg' }` applies a large radius (`lg`) only at medium screen sizes and above, overriding base styles. This feature requires `@xstyled/styled-components` and potentially a configured theme with breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div borderRadius={{ md: 'lg' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: React JSX example demonstrating flexbox grid layout with equal-width columns\nDESCRIPTION: This snippet showcases how to construct a responsive grid with three equal columns inside a row using xstyled's 'row' and 'col' components. It emphasizes responsive behavior, alignment, and Flexbox principles in React JSX syntax.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\">\n      <x.div row mx={-2} bg=\"emerald-200\" borderRadius=\"md\">\n        <x.div col px={2}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n        <x.div col px={2}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n        <x.div col px={2}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div mx={2}>\n    <x.div row mx={-2}>\n      <x.div col px={2}>\n        col\n      </x.div>\n      <x.div col px={2}>\n        col\n      </x.div>\n      <x.div col px={2}>\n        col\n      </x.div>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying responsive styles with xstyled breakpoints (JavaScript)\nDESCRIPTION: Demonstrates how to use the `breakpoints` utility with styled-components and the `css` utility to apply different sets of styles for specific named breakpoints defined in the theme. Each breakpoint property (e.g., `xs`, `md`, `lg`) is assigned a `css` block containing the styles applicable at that breakpoint.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { breakpoints } from '@xstyled/...'\nimport styled, { css } from 'styled-components'\n\nconst Container = styled.div`\n  ${breakpoints({\n    xs: css`\n      /* All devices */\n    `,\n    md: css`\n      /* From md breakpoint */\n    `,\n    lg: css`\n      /* From lg breakpoint */\n    `,\n  })}\n`\n```\n\n----------------------------------------\n\nTITLE: Unstyling Heading Elements with Preflight (CSS)\nDESCRIPTION: Preflight applies this CSS rule to reset the `font-size` and `font-weight` of all heading elements (h1-h6) to `inherit`. This ensures headings do not use browser default styles that might deviate from the project's type scale and encourages deliberate styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Flex Shrink with Styled Components in React (JSX)\nDESCRIPTION: Shows how to set the `flexShrink` property responsively at defined breakpoints using object notation. For example, `flexShrink={{ md: 0 }}` applies flex shrinking prevention at medium screen sizes and larger. This snippet requires a styled system that supports responsive props, like xstyled. It enables flexible layouts that adapt to screen size by selectively controlling flex shrinking behavior.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-shrink.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div flexShrink={{ md: 0 }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring root font size in xstyled theme\nDESCRIPTION: This snippet shows how to change the default ratio for the rem unit transformation in xstyled. It modifies the `rootFontSize` setting within the theme to specify the base pixel value for 1rem. The expected input is a numerical value which represents the pixel equivalent of 1 rem. When styling, unitless values like margins are multiplied by the rootFontSize to derive rem units. For instance, with rootFontSize of 20, an element with `m={20}` would become `m=\"1rem\"`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/transformers.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const theme = {\n  settings: {\n    // <x.div m={20} /> will be transformed to <x.div m=\"1rem\" />\n    rootFontSize: 20,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Grids with xstyled (JSX)\nDESCRIPTION: Illustrates how to create nested grid structures using `xstyled`. This is achieved by applying the `row` prop to an element that already has a `col` prop (e.g., `<x.div col={3/4} row>`), effectively turning that column into a new row container for further nested columns.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n    >\n      <x.div row bg=\"lime-200\" borderRadius=\"md\">\n        <x.div col={3 / 4} row>\n          {/* {`Level 1: col={3 / 4}`} */}\n          <x.div col={2 / 3}>\n            <x.div bg=\"lime-500\" p={2} textAlign=\"center\" borderRadius=\"md\">\n              {`col={2 / 3}`}\n            </x.div>\n          </x.div>\n          <x.div col={1 / 3}>\n            <x.div bg=\"lime-500\" p={2} textAlign=\"center\" borderRadius=\"md\">\n              {`col={1 / 3}`}\n            </x.div>\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={3 / 4} row>\n      {/* {`Level 1: col={3 / 4}`} */}\n      <x.div col={2 / 3}>{`col={2 / 3}`}</x.div>\n      <x.div col={1 / 3}>{`col={1 / 3}`}</x.div>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Clipping Overflow Content with xstyled in React (JSX)\nDESCRIPTION: This snippet illustrates the use of 'overflow=\"hidden\"' with xstyled components in React, ensuring overflowing content is clipped and not visible outside the element's bounds. The example uses various utility props related to height, layout, and color, and is ideal for preventing content from escaping container limitations. Requires React and xstyled; takes content that may exceed containers as input; output is content strictly confined to the container size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={32} overflow=\"hidden\">\n      <x.div\n        overflow=\"hidden\"\n        h={32}\n        px={6}\n        py={2}\n        borderRadius=\"md\"\n        bg=\"purple-200\"\n      >\n        <x.p fontFamily=\"Flow\" lineHeight={5} color=\"purple-700\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris\n          eleifend rutrum auctor. Phasellus convallis sagittis augue ut ornare.\n          Vestibulum et gravida lectus, sed ultrices sapien. Nullam aliquet elit\n          dui, vitae hendrerit lectus volutpat eget. In porttitor tincidunt\n          egestas. Pellentesque laoreet ligula at est vulputate facilisis. Etiam\n          tristique justo ut odio placerat ornare. Cras bibendum, orci at ornare\n          tincidunt, lacus nunc gravida enim, sit amet euismod nunc lectus in\n          lectus. Ut dictum nulla et arcu aliquet ornare. Aliquam et dapibus\n          lectus. Aenean mattis elit mi, sed ultricies augue consectetur id. Sed\n          id magna malesuada, luctus urna a, bibendum tortor. Cras cursus cursus\n          ex. Nulla fringilla elit vitae imperdiet scelerisque. Donec ac sem eu\n          diam convallis mollis a sed leo. Proin congue augue turpis, eget\n          rutrum dolor ultricies non. Nulla blandit venenatis dapibus. Sed\n          tincidunt mollis elit, quis suscipit nibh eleifend quis. Donec ex\n          lorem, auctor eu rutrum in, blandit id dolor. Nulla molestie arcu\n          turpis. In id felis vulputate, tempor massa eget, malesuada mauris.\n          Quisque fringilla consequat metus, luctus scelerisque leo fringilla\n          vel.\n        </x.p>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div overflow=\"hidden\" h={32}>\n    Lorem ipsum dolor sit amet...\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing 'wrap-reverse' Flex Wrap in xstyled\nDESCRIPTION: This snippet illustrates setting flexWrap to 'wrap-reverse' to wrap flex items in reverse order. It provides a visual example with three items wrapping in the opposite direction, useful for specific layout needs.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-wrap.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div display=\"flex\" flexWrap=\"wrap-reverse\" m={-2} overflow=\"hidden\">\n  {[1, 2, 3].map((value) => (\n    <x.div\n      key={value}\n      w={2 / 5}\n      m={2}\n      py={1}\n      flex=\"none\"\n      borderRadius=\"md\"\n      bg=\"violet-500\"\n      color=\"white\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      fontSize=\"2xl\"\n      fontWeight=\"extrabold\"\n    >\n      {value}\n    </x.div>\n  ))}\n</x.div>\n<x.div display=\"flex\" flexWrap=\"wrap-reverse\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapsed Table Borders with xstyled in React (JSX)\nDESCRIPTION: Shows how to render a table with collapsed borders using xstyled's React components by applying borderCollapse=\"collapse\" to x.table. Requires xstyled library and React. Cell and table borders are configured using border and borderColor props for visual consistency. This pattern expects no input props beyond JSX and outputs a merged-borders table; requires CSS-in-JS context for theming to apply.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/tables/border-collapse.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.table\n      w={1}\n      borderCollapse=\"collapse\"\n      border\n      borderColor=\"green-800\"\n      fontFamily=\"Flow\"\n    >\n      <x.thead bg=\"emerald-200\">\n        <tr>\n          <x.th\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-800\"\n            textAlign=\"left\"\n            px={4}\n            py={2}\n          >\n            State\n          </x.th>\n          <x.th\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-800\"\n            textAlign=\"left\"\n            px={4}\n            py={2}\n          >\n            City\n          </x.th>\n        </tr>\n      </x.thead>\n      <tbody>\n        <tr>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Indiana\n          </x.td>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Indianapolis\n          </x.td>\n        </tr>\n        <tr>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Ohio\n          </x.td>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Columbus\n          </x.td>\n        </tr>\n        <tr>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Michigan\n          </x.td>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Detroit\n          </x.td>\n        </tr>\n      </tbody>\n    </x.table>\n  </template>\n  <x.table borderCollapse=\"collapse\" border borderColor=\"green-800\">\n    <thead>\n      <tr>\n        <x.th border borderColor=\"green-600\">\n          State\n        </x.th>\n        <x.th border borderColor=\"green-600\">\n          City\n        </x.th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <x.td border borderColor=\"green-600\">\n          Indiana\n        </x.td>\n        <x.td border borderColor=\"green-600\">\n          Indianapolis\n        </x.td>\n      </tr>\n      <tr>\n        <x.td border borderColor=\"green-600\">\n          Ohio\n        </x.td>\n        <x.td border borderColor=\"green-600\">\n          Columbus\n        </x.td>\n      </tr>\n      <tr>\n        <x.td border borderColor=\"green-600\">\n          Michigan\n        </x.td>\n        <x.td border borderColor=\"green-600\">\n          Detroit\n        </x.td>\n      </tr>\n    </tbody>\n  </x.table>\n</>\n```\n\n----------------------------------------\n\nTITLE: Spanning Columns in xstyled Grid with React (JSX)\nDESCRIPTION: Demonstrates how to use the gridColumn property with the value 'span n / span n' to make elements in a grid span a specific number of columns using xstyled in React. Requires React and the xstyled package as dependencies. The key parameter is gridColumn, where passing a span value directs the underlying grid-column CSS property. The expected input is a grid setup with columns, and output is a visual span across those columns. Complex layouts can be achieved by conditionally applying the span utility.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-column.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={3} gap={4}>\n      {Array.from({ length: 7 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={12}\n          borderRadius=\"md\"\n          bg={value === 4 || value === 7 ? 'violet-500' : 'violet-400'}\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          gridColumn={value === 4 || value === 7 ? 'span 2 / span 2' : ''}\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateColumns={3} gap={4}>\n    <x.div>1</x.div>\n    <x.div>2</x.div>\n    <x.div>3</x.div>\n    <x.div gridColumn=\"span 2 / span 2\">4</x.div>\n    <x.div>5</x.div>\n    <x.div>6</x.div>\n    <x.div gridColumn=\"span 2 / span 2\">7</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Text Overflow Control in xstyled with Object Notation\nDESCRIPTION: This snippet demonstrates how to apply different text overflow styles at specific breakpoints by using responsive object notation. For example, setting 'textOverflow={{ md: \"clip\" }}' applies the clip behavior starting from medium screen sizes, enabling adaptive styling based on viewport.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-overflow.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div textOverflow={{ md: 'clip' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Background Size with Styled Components (JSX)\nDESCRIPTION: This code shows how to apply responsive background-size using the xstyled library.  It sets the `backgroundSize` property using an object notation with the `md` key, meaning this style will be applied at medium screen sizes and above.  Dependencies include xstyled and styled-components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-size.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div backgroundSize={{ md: 'cover' }} />\n```\n\n----------------------------------------\n\nTITLE: Composing multiple utilities using compose in xstyled (JavaScript)\nDESCRIPTION: This snippet shows how to combine utilities like fontSize and fontWeight using the compose method, creating a new namespace that provides combined utility functions for styling components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/composing-utilities.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createX, compose, fontSize, fontWeight } from '@xstyled/...'\nimport { borderInline } from './border-inline'\n\nconst x = createX(compose(fontSize, fontWeight))\n\n// \"fontSize\" and \"fontWeight\" are usable\n<x.div fontSize=\"10px\" fontWeight=\"bold\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Pointer Cursor Style in React with xstyled (JSX)\nDESCRIPTION: This example uses cursor=\"pointer\" with x.div to indicate interactivity, usually shown as a pointing hand when hovered. Requires React and xstyled. Additional style props can be customized for appearance.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"pointer\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"purple-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"pointer\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Text Decoration in React with xstyled\nDESCRIPTION: Example demonstrating how to apply text decoration responsively using the object notation syntax. This applies underline decoration only on medium screen sizes and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-decoration.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div textDecoration={{ md: 'underline' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Reversing Border Direction Using divideXReverse and divideYReverse in React JSX\nDESCRIPTION: Shows how to correctly apply border widths when children are ordered in reverse (e.g., flexDirection=\"column-reverse\") using divideXReverse or divideYReverse props. This ensures borders appear on the correct sides in reversed layouts. The example uses flex display with reversed column direction, dividing vertical children with rose-colored borders. Requires React and xstyled; inputs include flex container with reversed order and outputs a flex layout with properly aligned dividing borders.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-width.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n      divideY\n      divideYReverse\n      divideColor=\"rose-500\"\n    >\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"rose-600\"\n        py={3}\n      >\n        1\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"rose-600\"\n        py={3}\n      >\n        2\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"rose-600\"\n        py={3}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div\n    display=\"flex\"\n    flexDirection=\"column-reverse\"\n    divideY\n    divideYReverse\n    divideColor=\"rose-500\"\n  >\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Min-Height in xstyled using JSX Object Notation\nDESCRIPTION: Example of setting responsive minimum heights using object notation with breakpoint keys (e.g., `xs`, `md`) within the `minHeight` prop in an `xstyled` component. The specified `minHeight` value (e.g., `1/2` or `1`) is applied at the corresponding breakpoint and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-height.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div minHeight={{ xs: 1 / 2, md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Allowing Text Selection with userSelect in React\nDESCRIPTION: This snippet demonstrates how to allow text selection within a React component using the `userSelect=\"text\"` prop. The `x.div` component is used for styling, and allows users to select text.  This snippet leverages xstyled's component library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/user-select.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      mx=\"auto\"\n      maxWidth=\"sm\"\n      bg=\"emerald-200\"\n      p={2}\n      userSelect=\"text\"\n      textAlign=\"center\"\n      color=\"gray-500\"\n    >\n      This text is selectable\n    </x.div>\n  </template>\n  <x.div userSelect=\"text\">This text is selectable</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Flex Direction to Column-Reverse with xstyled in JSX\nDESCRIPTION: Demonstrates the use of flexDirection=\"column-reverse\" to stack flex items vertically in reverse order. Requires React and xstyled. Child items have fixed height, background color, border radius, and flex centering. Vertical spacing is handled with spaceY and spaceYReverse to preserve visual spacing in reversed order. The input is a numeric array displayed from bottom to top.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-direction.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n      spaceY={4}\n      spaceYReverse\n    >\n      {[1, 2, 3].map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          borderRadius=\"md\"\n          bg=\"red-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" flexDirection=\"column-reverse\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Generating Arbitrary CSS with a Utility Function\nDESCRIPTION: Demonstrates creating advanced utilities by providing a function to the `css` option within the `style` definition. This function receives the prop value and returns a style object, allowing for complex logic, pseudo-elements, or nested selectors, as shown in the `clearfix` example.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { style } from '@xstyled/...'\n\nexport const clearfix = style({\n  prop: 'clearfix',\n  css: () => ({\n    '&::after': {\n      display: 'block',\n      content: '',\n      clear: 'both',\n    },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Responsive Ring Color with xstyled in React\nDESCRIPTION: Illustrates applying ring colors conditionally based on screen size using xstyled's responsive object notation. The `ringColor={{ md: 'indigo-300' }}` prop applies the specified ring color only at the 'md' breakpoint (medium screen sizes) and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-color.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div ringColor={{ md: 'indigo-300' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Apply Responsive Overflow - xstyled JSX\nDESCRIPTION: Shows how to apply the `overflow` utility property responsively using xstyled's object notation. Setting `overflow={{ md: 'auto' }}` on an `x.div` means the `overflow=\"auto\"` style will only be applied when the screen size is at or above the 'md' (medium) breakpoint defined in the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div overflow={{ md: 'auto' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Spin Animation to SVG (JSX)\nDESCRIPTION: Shows how to apply the predefined 'spin' animation utility to an SVG element using the `animation` prop in xstyled JSX. This creates a continuous linear rotation, often used for loading indicators.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<x.svg viewBox=\"0 0 24 24\" animation=\"spin\">\n  {/* ... */}\n</x.svg>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Heights with Breakpoints in xstyled React Components - JSX\nDESCRIPTION: Shows how to use responsive object notation with the h property for breakpoint-based height adjustments. Requires xstyled with theme breakpoints defined. Inputs are objects mapping breakpoints (xs, md) to height values; output is a div whose height changes responsively.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div h={{ xs: 1 / 2, md: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Always Showing Horizontal Scrollbars with xstyled in React (JSX)\nDESCRIPTION: This example uses 'overflowX=\"scroll\"' with xstyled React components to ensure horizontal scrollbars are always visible, regardless of whether content overflows. The snippet features a single-line paragraph designed to trigger or suggest scroll availability. It requires React and xstyled; input can be any line, with output being a container always displaying a horizontal scrollbar (unless suppressed by OS settings).\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div overflowX=\"scroll\" borderRadius=\"md\" bg=\"emerald-200\">\n      <x.p\n        fontFamily=\"Flow\"\n        display=\"inline-block\"\n        color=\"emerald-500\"\n        fontWeight=\"medium\"\n        px={6}\n        py={4}\n      >\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n      </x.p>\n    </x.div>\n  </template>\n  <x.div overflowX=\"scroll\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using getSystemPropTypes with styled-components\nDESCRIPTION: Example showing how to generate prop types from a composed system utility and apply them to a styled component. It imports necessary functions from styled-components, @xstyled/system, and @xstyled/prop-types.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/prop-types.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from 'styled-components'\nimport { compose, space, color } from '@xstyled/system'\nimport { getSystemPropTypes } from '@xstyled/prop-types'\n\nconst customSystem = compose(space, color)\n\nconst SystemBox = styled.div`\n  ${customSystem}\n`\n\nSystemBox.propTypes = getSystemPropTypes(customSystem)\n```\n\n----------------------------------------\n\nTITLE: Creating a custom color transformer in xstyled\nDESCRIPTION: This snippet illustrates the creation of a custom transformer to modify color values dynamically within an xstyled theme. It defines a transformer that uses the `lighten` function from the `polished` library to lighten a color based on specific naming conventions (e.g., appending `.light`). Dependencies include `@xstyled/styled-components` and `polished`. It checks if a color contains `.light`, and if true, applies a lighten effect.  The backgroundColor prop in the Box component takes a color value like 'black.light', which is transformed during rendering.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/transformers.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled, { ThemeProvider } from '@xstyled/styled-components'\nimport { lighten } from 'polished'\n\nconst theme = {\n  transformers: {\n    color: (value) => {\n      const matches = value.match(/(.*)\\.light/)\n      if (!matches) return value\n      return lighten(0.2, matches[1])\n    },\n  },\n}\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <Box backgroundColor=\"black.light\" />\n  </ThemeProvider>\n)\n\n// The background of the box will be \"black\" lightened with 0.2\n```\n\n----------------------------------------\n\nTITLE: Justify Grid Items Using 'center' in xstyled (JSX)\nDESCRIPTION: Example demonstrating `justifyItems=\"center\"` to center grid items along the inline axis using xstyled in React. It renders a 3-column grid with six centered red-background items having consistent styling such as rounding, white text, and large bold fonts. Requires xstyled's `x.div` and React environment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-items.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"center\"\n      h={32}\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"red-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"center\">\n    <div>1</div>\n    {/* ... */}\n    <div>6</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Line Heights in xstyled (JSX)\nDESCRIPTION: Shows how to use responsive object notation within the `lineHeight` prop to apply different line height styles at specific breakpoints. In this example, `lineHeight=\"relaxed\"` is applied at the 'md' breakpoint and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/line-height.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div lineHeight={{ md: 'relaxed' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-Line Whitespace in xstyled\nDESCRIPTION: This snippet uses `whiteSpace=\"pre-line\"` to preserve newlines but collapse spaces within an xstyled `x.div` component, allowing normal text wrapping. It includes  `overflowX=\"auto\"`. This example uses a template preview to illustrate the effect of this setting.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/whitespace.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={3 / 4}\n      px={6}\n      py={4}\n      bg=\"light-blue-200\"\n      borderRadius=\"lg\"\n      overflowX=\"auto\"\n    >\n      <x.div\n        whiteSpace=\"pre-line\"\n        fontFamily=\"Flow\"\n        color=\"light-blue-500\"\n        fontSize=\"3xl\"\n        lineHeight={5}\n      >\n        {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n      </x.div>\n    </x.div>\n  </template>\n  <x.div w={3 / 4} overflowX=\"auto\">\n    <x.div whiteSpace=\"pre-line\">\n      {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Align Content Utility in xstyled for React: Basic 'flex-start' Alignment\nDESCRIPTION: This snippet demonstrates how to use the alignContent prop set to 'flex-start' in a flex container to pack rows against the start of the cross axis. It leverages React JSX components and applies styles through xstyled's utility props, creating a visual example of row alignment with accompanying HTML structure.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-content.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={48}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignContent=\"flex-start\"\n      bg=\"red-200\"\n      borderRadius=\"md\"\n    >\n      {Array.from({ length: 5 }, (_, index) => index + 1).map((value) => (\n        <x.div key={value} w={1 / 3} p={2}>\n          <x.div\n            p={2}\n            borderRadius=\"md\"\n            bg=\"red-500\"\n            color=\"white\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          >\n            {value}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div h={48} display=\"flex\" flexWrap=\"wrap\" alignContent=\"flex-start\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n    <div>4</div>\n    <div>5</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using 'visibility=\"hidden\"' in React with xstyled\nDESCRIPTION: This snippet demonstrates how to hide an element while preserving its space in the layout using the visibility=\"hidden\" prop. It includes a React component preview showing three boxes, with the middle one hidden but still occupying space.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/visibility.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\" spaceX={4}>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"indigo-500\"\n        w={32}\n        h={16}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        color=\"white\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        visibility=\"hidden\"\n        borderRadius=\"md\"\n        bg=\"indigo-500\"\n        w={32}\n        h={16}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        color=\"white\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"indigo-500\"\n        w={32}\n        h={16}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        color=\"white\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"center\" spaceX={4}>\n    <x.div>1</x.div>\n    <x.div visibility=\"hidden\">2</x.div>\n    <x.div>3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Text Alignment JSX\nDESCRIPTION: Shows how to apply text alignment responsively using object notation in xstyled. The `textAlign` property is set to `justify` for medium screen sizes and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-align.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div textAlign={{ md: 'justify' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Prop Name for a Utility\nDESCRIPTION: Demonstrates using the `css` option within the `style` function definition to specify the CSS property (`borderInline`) separately from the prop name (`bi`) used in components. This allows for shorter or more descriptive prop names.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { style } from '@xstyled/...'\n\nexport const borderInline = style({\n  prop: 'bi',\n  css: 'borderInline'\n})\n\n// Usage\n<x.div bi=\"1px dotted blue\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to All Sides with xstyled in React (JSX)\nDESCRIPTION: This snippet demonstrates applying uniform padding on all sides of an element using the shorthand p prop in xstyled within React JSX. Elements are styled with p={8} to create equal padding on every side. Required dependencies are React and xstyled. Input is a numeric spacing value and output is the padded element with all sides equally spaced.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/padding.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div bg=\"fuchsia-300\" borderRadius=\"md\" overflow=\"hidden\" p={8}>\n        <x.div bg=\"fuchsia-600\" py={3} px={4}>\n          p=8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div p={8}>p=8</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Ping Animation to Span (JSX)\nDESCRIPTION: Demonstrates applying the 'ping' animation utility to a <span> element via the `animation` prop in xstyled JSX. This animation creates a scaling and fading ripple effect, suitable for notification badges.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.span\n  animation=\"ping\"\n  position=\"absolute\"\n  display=\"inline-flex\"\n  w={1}\n  h={1}\n  borderRadius=\"full\"\n  bg=\"purple-400\"\n  opacity={0.75}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Min-Width Utilities with Scaled Sizes in xstyled (React, JSX)\nDESCRIPTION: This snippet renders a group of xstyled <x.div> components in React, each with a different minWidth property derived from the theme's sizes or numeric values. It iterates over an array of size values (including a theme-specific '1s') and demonstrates how to set minWidth per element. Prerequisite: xstyled components must be installed and imported. Each <x.div> receives minWidth as a prop, and the output includes both a visual preview and direct DOM usage. Inputs are size values like '1s', 8, 12, 16, or 24, resulting in min-widths calculated in accordance with the theme or numeric px. Each element uses utility props for layout and visualization.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-width.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4} mx=\"auto\" w={64}>\n      {['1s', 8, 12, 16, 24].map((v) => (\n        <x.div key={v} display=\"flex\" alignItems=\"center\" spaceX={4}>\n          <x.p fontSize=\"sm\" color=\"light-blue-600\" w={24} textAlign=\"right\">\n            minWidth={v}\n          </x.p>\n          <x.div\n            h={8}\n            minWidth={v}\n            borderRadius=\"md\"\n            bg=\"light-blue-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div minWidth=\"1s\" w={0} />\n    <x.div minWidth={8} w={0} />\n    <x.div minWidth={12} w={0} />\n    <x.div minWidth={16} w={0} />\n    <x.div minWidth={24} w={0} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Relative Positioning with xstyled in JSX\nDESCRIPTION: Demonstrates using `position=\"relative\"` on an `x.div` component in JSX with `xstyled`. Explains that elements with relative positioning stay in the document flow but can be offset from their normal position, and critically, they establish a positioning context for their absolutely positioned descendants.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/position.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div position=\"relative\" bg=\"red-200\" p={6}>\n      <x.div\n        position=\"relative\"\n        h={32}\n        bg=\"red-300\"\n        p={4}\n        color=\"red-600\"\n        fontWeight=\"medium\"\n      >\n        <p>Relative parent</p>\n        <x.div\n          position=\"absolute\"\n          bottom={0}\n          left={0}\n          bg=\"red-500\"\n          p={4}\n          color=\"red-50\"\n        >\n          <p>Absolute child</p>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div position=\"relative\">\n    <p>Static parent</p>\n    <x.div position=\"absolute\" bottom={0} left={0}>\n      <p>Absolute child</p>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Borders Using xstyled divideX Utility in React JSX\nDESCRIPTION: Demonstrates how to add borders between horizontal children elements inside a grid layout using the divideX prop from xstyled. This example applies emerald colored vertical borders between the grid children by specifying display as grid with three columns, and sets the border color with divideColor. Dependencies include React and xstyled components. Inputs are child elements which receive border-right and border-left widths based on the divideX value; output is a styled grid with visible vertical borders between elements.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-width.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      divideX\n      divideColor=\"emerald-500\"\n    >\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"emerald-600\"\n        px={6}\n      >\n        1\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"emerald-600\"\n        px={6}\n      >\n        2\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"emerald-600\"\n        px={6}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div\n    display=\"grid\"\n    gridTemplateColumns={3}\n    divideX\n    divideColor=\"emerald-500\"\n  >\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical Borders Using xstyled divideY Utility in React JSX\nDESCRIPTION: Illustrates the application of vertical borders between stacked child elements by using the divideY prop inside a grid component with a single column. The border color is set to amber via divideColor. This React example requires xstyled and React. It accepts vertical stacking of child elements and outputs a visually divided layout with horizontal borders separating the children.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-width.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={1}\n      divideY\n      divideColor=\"amber-500\"\n    >\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"amber-600\"\n        py={3}\n      >\n        1\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"amber-600\"\n        py={3}\n      >\n        2\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"amber-600\"\n        py={3}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateColumns={1} divideY divideColor=\"amber-500\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Template Areas in xstyled React Components\nDESCRIPTION: This snippet illustrates how to control grid template areas responsively at different breakpoints by utilizing xstyled's responsive object notation. It shows applying a gridTemplateAreas property that activates at medium screen sizes and above, enabling adaptive layout management in React. Dependencies include xstyled and React, with focus on responsive design configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-areas.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<x.div display=\"grid\" gridTemplateAreas={{ md: '\"header header\"' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Responsive transitionDuration in xstyled (JSX)\nDESCRIPTION: Shows how to apply transition durations responsively using object notation.  The `transitionDuration` prop accepts an object where keys are breakpoints (e.g., `md`) and values are the corresponding durations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-duration.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div transitionDuration={{ md: 300 }} />\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Object Fit with xstyled React Components - JSX\nDESCRIPTION: This snippet demonstrates xstyled's responsive object notation by applying objectFit only at specified breakpoints. The example uses objectFit={{ md: 'contain' }} to set object-fit to contain for medium and larger screen sizes. Requires xstyled and React. The input accepts an object mapping breakpoints to fit values, providing granular control over image resizing in responsive layouts. Output behavior differs based on the current viewport width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/object-fit.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div objectFit={{ md: 'contain' }} />\n```\n\n----------------------------------------\n\nTITLE: Using transitionDuration prop in xstyled (JSX)\nDESCRIPTION: Demonstrates how to use the `transitionDuration` prop in xstyled components to control the duration of CSS transitions.  The example shows different duration values like \"instant\", \"fast-in\", numerical values (milliseconds), and string values (seconds). It uses the `<x.button>` component and applies hover effects.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-duration.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"space-around\" alignItems=\"center\">\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration=\"instant\"\n        color=\"white\"\n        bg={{ _: 'fuchsia-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration=\"fast-in\"\n        color=\"white\"\n        bg={{ _: 'fuchsia-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration={700}\n        color=\"white\"\n        bg={{ _: 'fuchsia-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration=\"3s\"\n        color=\"white\"\n        bg={{ _: 'fuchsia-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button transition transitionDuration=\"instant\">\n    Hover me\n  </x.button>\n  <x.button transition transitionDuration=\"fast-in\">\n    Hover me\n  </x.button>\n  <x.button transition transitionDuration={700}>\n    Hover me\n  </x.button>\n  <x.button transition transitionDuration=\"3s\">\n    Hover me\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Combined States for Links in xstyled\nDESCRIPTION: Demonstrates how to nest states to create more complex style combinations. This example styles a link differently based on its hover state and visited state combined with hover state.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hover-focus-and-other-states.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.a\n        href=\"#\"\n        color={{\n          _: 'indigo-500',\n          hover: 'indigo-600',\n          visited: { hover: 'indigo-900' },\n        }}\n      >\n        Link\n      </x.a>\n    </x.div>\n  </template>\n  <x.a\n    href=\"#\"\n    color={{\n      _: 'indigo-500',\n      hover: 'indigo-600',\n      visited: { hover: 'indigo-900' },\n    }}\n  >\n    Link\n  </x.a>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Text Colors with xstyled\nDESCRIPTION: This snippet demonstrates how to apply different text colors to xstyled `x.div` components using the `color` prop. It iterates through an array of color values and renders each color within a `dl` element for demonstration. The `x.div` component then displays text with the assigned color. This showcases the basic usage of setting text colors directly on xstyled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/color.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={8}>\n      {[\n        'red-500',\n        'emerald-700',\n        'light-blue-700-a50',\n        '#f59e0b',\n        'rgba(76, 29, 149, 0.6)',\n      ].map((color) => (\n        <x.dl key={color} color=\"cool-gray-500\" overflow=\"hidden\">\n          <x.dt\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n            mb={1}\n          >\n            color={color}\n          </x.dt>\n          <x.dd fontSize=\"xl\" m={0}>\n            <x.div color={color}>\n              Computers have lots of memory but no imagination.\n            </x.div>\n          </x.dd>\n        </x.dl>\n      ))}\n    </x.div>\n  </template>\n  <x.div color=\"red-500\">Computers have ...</x.div>\n  <x.div color=\"emerald-700\">Computers have ...</x.div>\n  <x.div color=\"light-blue-700-a50\">Computers have ...</x.div>\n  <x.div color=\"#f59e0b\">Computers have ...</x.div>\n  <x.div color=\"rgba(4, 120, 87, 0.5)\">Computers have ...</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Scaled Min-Height using xstyled Theme Values in JSX\nDESCRIPTION: Demonstrates using theme-defined sizes (like '1s', 8, 12) for the `minHeight` prop in `xstyled` components. Values from the `sizes` theme section are used, with an 's' suffix required for scale values between 0 and 1 (e.g., `0.5s`, `1s`) to distinguish them from fluid percentage values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-height.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {['1s', 8, 12, 16, 24].map((v) => (\n        <x.div\n          key={v}\n          spaceY={4}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <x.div\n            minHeight={v}\n            w={8}\n            borderRadius=\"md\"\n            bg=\"light-blue-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n          <x.p fontSize=\"sm\" color=\"light-blue-600\" textAlign=\"center\">\n            minHeight={v}\n          </x.p>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div minHeight=\"1s\" h={0} />\n    <x.div minHeight={8} h={0} />\n    <x.div minHeight={12} h={0} />\n    <x.div minHeight={16} h={0} />\n    <x.div minHeight={24} h={0} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Justification of Grid Items Using xstyled (JSX)\nDESCRIPTION: Demonstrates how to apply responsive justification of grid items using the `justifyItems` prop with object notation in xstyled. For example, `justifyItems={{ md: 'center' }}` applies center justification at medium screen sizes and above, leveraging xstyled's breakpoint utilities. This example requires React with xstyled configured for responsive styles.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-items.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" justifyItems={{ md: 'center' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Using Responsive justifyContent in xstyled\nDESCRIPTION: This snippet provides an example of using responsive design with `justifyContent` in xstyled.  The provided example shows how to set `justifyContent` to 'center' at medium screen sizes and above. The component relies on a grid display with an xstyled configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" justifyContent={{ md: 'center' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Unstyling List Elements with Preflight (CSS)\nDESCRIPTION: This Preflight CSS rule removes default styling from ordered (`ol`) and unordered (`ul`) lists by setting `list-style` to `none` and resetting `margin` and `padding` to 0. Explicit styling is required using utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nol,\nul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive 'order' Utility Application in xstyled - JSX\nDESCRIPTION: Illustrates how to set the 'order' property responsively using object notation within the 'order' prop in xstyled. This technique allows applying different order values based on screen size breakpoints, enabling flexible, responsive layouts. The example uses the syntax 'order={{ md: 10 }}' for medium screens and larger.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/order.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div order={{ md: 10 }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Property with xstyled Components (JSX)\nDESCRIPTION: Demonstrates using the `transitionProperty` prop on an `x.button` component to specify that only the `background-color` should transition when its value changes (e.g., on hover). It also utilizes other transition props like `transition` and `transitionDuration`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-property.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration={500}\n        transitionProperty=\"background-color\"\n        color=\"white\"\n        bg={{ _: 'indigo-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button\n    transition\n    transitionProperty=\"background-color\"\n    transitionDuration={500}\n    color=\"white\"\n    bg={{ _: 'indigo-600', hover: 'red-600' }}\n    py={3}\n    px={6}\n    borderRadius=\"md\"\n  >\n    Hover me\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Hover Background Color Utilities in xstyled with React (JSX)\nDESCRIPTION: This snippet illustrates how to define background colors for hover states using object notation in the \"bg\" prop within xstyled and React (JSX). It demonstrates assigning a normal and hover background color, so the button color changes on mouseover. Dependencies are xstyled and React; input is the \"bg\" prop with nested objects for state; output is a button whose background color transitions when hovered.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-color.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div textAlign=\"center\">\n      <x.button\n        type=\"button\"\n        py={3}\n        px={4}\n        transition\n        bg={{ _: 'indigo-500', hover: 'indigo-800' }}\n        color=\"white\"\n        fontWeight=\"semibold\"\n        borderRadius=\"lg\"\n        boxShadow=\"md\"\n        outline={{ focus: 'none' }}\n        tabindex=\"-1\"\n      >\n        Click me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button bg={{ _: 'indigo-500', hover: 'indigo-800' }}>Button</x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Align Items Utility for Flex Containers in JSX\nDESCRIPTION: This snippet demonstrates how to use the 'alignItems' prop with the xstyled components to control cross-axis alignment of flex items, including 'stretch', 'start', 'center', 'end', and 'baseline'. It includes practical code examples with styled containers and child elements, utilizing the 'display', 'alignItems', and size properties. Dependencies include React and xstyled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-items.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div\\n      h={48}\\n      display=\"flex\"\\n      alignItems=\"stretch\"\\n      bg=\"light-blue-200\"\\n      borderRadius=\"md\"\\n      p={4}\\n      spaceX={4}\\n    >\\n      <x.div\\n        py={4}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"light-blue-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        1\\n      </x.div>\\n      <x.div\\n        py={12}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"light-blue-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        2\\n      </x.div>\\n      <x.div\\n        py={8}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"light-blue-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        3\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <x.div display=\"flex\" alignItems=\"stretch\">\\n    <x.div py={4}>1</x.div>\\n    <x.div py={12}>2</x.div>\\n    <x.div py={8}>3</x.div>\\n  </x.div>\\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Translate Transform in React with xstyled\nDESCRIPTION: This snippet demonstrates the use of `translateY` within a React component using xstyled. It showcases how to apply a vertical translation to an image element within a flex container. The `transform` prop enables transform functionality, and `translateY` specifies the vertical offset. Dependencies: xstyled library, React.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/translate.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n      my={10}\n    >\n      {[6, -6, 0].map((translateY) => (\n        <x.div key={translateY} w={16} h={16} bg=\"rose-300\" borderRadius=\"md\">\n          <x.img\n            h={16}\n            w={16}\n            transform\n            translateY={translateY}\n            borderRadius=\"md\"\n            src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.img transform translateY={6} />\n  <x.img transform translateY={-6} />\n  <x.img transform translateY={0} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing responsive background positioning with xstyled\nDESCRIPTION: Example showing how to use responsive object notation with the backgroundPosition prop. This allows different background positions to be applied at different breakpoints, making the layout responsive to screen size changes.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-position.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div backgroundPosition={{ md: 'right' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Appearance Responsively in xstyled (JSX)\nDESCRIPTION: Illustrates how to apply the `appearance` utility conditionally based on screen size using responsive object notation in xstyled. The example sets `appearance` to `'none'` only at medium breakpoints (`md`) and above, applying the `appearance: none;` CSS rule within a media query.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/appearance.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div appearance={{ md: 'none' }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Background Size to Cover with Styled Components (JSX)\nDESCRIPTION: This code snippet illustrates setting the background size to \"cover\" using styled components in React. It uses the xstyled library to style the div, setting background image properties. The result will be an element where the background image will cover the element. Dependencies include xstyled and styled-components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-size.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"light-blue-300\"\n      h={48}\n      backgroundSize=\"cover\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div\n    backgroundSize=\"cover\"\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"center\"\n    backgroundImage=\"url(...)\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Table Layout in xstyled\nDESCRIPTION: This snippet demonstrates using responsive object notation to apply `tableLayout` settings at specific breakpoints in xstyled.  The example sets `tableLayout` to 'fixed' for medium screen sizes and above.  This code depends on xstyled's responsive design features which are referenced in the documentation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/tables/table-layout.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.table tableLayout={{ md: 'fixed' }} />\n```\n\n----------------------------------------\n\nTITLE: Styled Button Component with styled-components\nDESCRIPTION: This snippet demonstrates the creation of a button component using styled-components. It defines the button's appearance, including padding, color, border radius, font weight, transition, background color, hover, and focus states.  This illustrates the typical syntax and theming approaches.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  color: white;\n  border-radius: 0.375rem;\n  font-weight: 600;\n  transition: background-color cubic-bezier(0.4, 0, 0.2, 1) 150ms;\n  background-color: #10b981;\n\n  &:hover {\n    background-color: #065f46;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px #10b98180;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Applying horizontal margin using xstyled\nDESCRIPTION: Illustrates how to apply equal margin to the left and right sides of an element simultaneously using the `mx` prop. The space value provided, such as `mx={8}`, applies the configured space unit (e.g., 2rem) to both the left and right margins.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/margin.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div bg=\"emerald-300\" borderRadius=\"md\" overflow=\"hidden\" px={8}>\n        <x.div bg=\"emerald-600\" py={3} px={4}>\n          mx=8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div mx={8}>mx=8</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Default Font Sizes in xstyled - JavaScript\nDESCRIPTION: This snippet illustrates the default `fontSizes` configuration available in xstyled. It showcases the standard set of font sizes, which can be used directly or overridden in a custom theme. This provides a foundation for adjusting font sizes based on specific project requirements. The output is a set of predefined font sizes that can be accessed through the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/font-sizes.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  fontSizes: {\n    xs: '0.75rem',\n    sm: '0.875rem',\n    base: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    '2xl': '1.5rem',\n    '3xl': '1.875rem',\n    '4xl': '2.25rem',\n    '5xl': '3rem',\n    '6xl': '3.75rem',\n    '7xl': '4.5rem',\n    '8xl': '6rem',\n    '9xl': '8rem',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Background Images with xstyled in React\nDESCRIPTION: This snippet demonstrates how to apply responsive background images using xstyled's responsive object notation, where different background images can be displayed at different breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-image.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div backgroundImage={{ md: 'url(...)' }} />\n```\n\n----------------------------------------\n\nTITLE: Repeat Horizontally - xstyled/JSX\nDESCRIPTION: Demonstrates repeating a background image only horizontally with `backgroundRepeat=\"repeat-x\"`. It also utilizes `backgroundPosition=\"center\"` to position the background. Background color and height are configured for the div element.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-repeat.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"amber-300\"\n      h={96}\n      backgroundRepeat=\"repeat-x\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div backgroundRepeat=\"repeat-x\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradients with xstyled in React\nDESCRIPTION: This example shows how to create a linear gradient background using xstyled's backgroundImage property with gradient-to-r direction and gradient color stop utilities for defining the color progression.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-image.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={24}\n      backgroundImage=\"gradient-to-r\"\n      gradientFrom=\"orange-400\"\n      gradientVia=\"red-500\"\n      gradientTo=\"pink-500\"\n    />\n  </template>\n  <x.div\n    backgroundImage=\"gradient-to-r\"\n    gradientFrom=\"orange-400\"\n    gradientVia=\"red-500\"\n    gradientTo=\"pink-500\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Enabling Vertical Scrolling with xstyled in React (JSX)\nDESCRIPTION: This snippet shows vertical scrolling using 'overflowY=\"auto\"' on xstyled React components. It configures a container with fixed height and makes vertical scrollbars appear when its content overflows, using color and layout styling for clarity. Requires React and xstyled; input is lengthy vertical content, and the output is scrollbars that appear as needed for vertical overflow.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={32} overflow=\"hidden\">\n      <x.div\n        overflowY=\"auto\"\n        h={32}\n        px={6}\n        py={2}\n        borderRadius=\"md\"\n        bg=\"amber-200\"\n      >\n        <x.p fontFamily=\"Flow\" lineHeight={5} color=\"amber-700\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris\n          eleifend rutrum auctor. Phasellus convallis sagittis augue ut ornare.\n          Vestibulum et gravida lectus, sed ultrices sapien. Nullam aliquet elit\n          dui, vitae hendrerit lectus volutpat eget. In porttitor tincidunt\n          egestas. Pellentesque laoreet ligula at est vulputate facilisis. Etiam\n          tristique justo ut odio placerat ornare. Cras bibendum, orci at ornare\n          tincidunt, lacus nunc gravida enim, sit amet euismod nunc lectus in\n          lectus. Ut dictum nulla et arcu aliquet ornare. Aliquam et dapibus\n          lectus. Aenean mattis elit mi, sed ultricies augue consectetur id. Sed\n          id magna malesuada, luctus urna a, bibendum tortor. Cras cursus cursus\n          ex. Nulla fringilla elit vitae imperdiet scelerisque. Donec ac sem eu\n          diam convallis mollis a sed leo. Proin congue augue turpis, eget\n          rutrum dolor ultricies non. Nulla blandit venenatis dapibus. Sed\n          tincidunt mollis elit, quis suscipit nibh eleifend quis. Donec ex\n          lorem, auctor eu rutrum in, blandit id dolor. Nulla molestie arcu\n          turpis. In id felis vulputate, tempor massa eget, malesuada mauris.\n          Quisque fringilla consequat metus, luctus scelerisque leo fringilla\n          vel.\n        </x.p>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div overflowY=\"auto\" h={32}>\n    Lorem ipsum dolor sit amet...\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive fontVariant with xstyled - JSX\nDESCRIPTION: This code snippet demonstrates how to use responsive object notation with the `fontVariant` prop in xstyled to apply different font variants at different breakpoints. It sets the `fontVariant` to 'auto' for extra-small screens (xs) and 'small-caps' for medium screens (md) and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-variant.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.p fontVariant={{ xs: 'auto', md: 'small-caps' }}>{/* ... */}</x.p>\n```\n\n----------------------------------------\n\nTITLE: Styling Button with Emotion css Prop & Theme - JS\nDESCRIPTION: This snippet demonstrates using Emotion's `css` prop with a function that receives the theme object as an argument. It accesses theme values (space, colors, radii, font weights, transition, shadows) to apply design system consistent styles to a button component.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n\nconst Button = ({ children }) => {\n  return (\n    <button\n      css={(theme) => ({\n        padding: `${theme.space[2]} ${theme.space[4]}`,\n        color: theme.colors.white,\n        borderRadius: theme.radii.md,\n        fontWeight: theme.fontWeights.semibold,\n        transition: theme.transition.default,\n        backgroundColor: theme.colors['emerald-500'],\n        '&:hover': {\n          backgroundColor: theme.colors['emerald-800'],\n        },\n        '&:focus': {\n          outline: 'none',\n          boxShadow: theme.shadows['emerald-ring'],\n        },\n      })}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring xstyled Babel Preset - JS\nDESCRIPTION: This snippet shows the configuration for the `.babelrc` file to enable the `@xstyled/babel-preset-emotion-css-prop`. This preset allows you to use the `css` prop without needing the `/** @jsx jsx */` pragma in every file.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"presets\": [\"@xstyled/babel-preset-emotion-css-prop\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Responsive alignSelf Object Notation in xstyled (JSX)\nDESCRIPTION: Example showing how to assign alignSelf via an object to enable breakpoint-specific behavior. With alignSelf={{ md: 'center' }}, the item is centered on the cross-axis when the screen is medium or larger. Requires xstyled with a properly configured theme in a React project; inputs are breakpoint-keyed objects and outputs are context-aware alignment CSS.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-self.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" alignSelf={{ md: 'center' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Adding External Gutter Using xstyled JSX Components\nDESCRIPTION: This snippet demonstrates how to add external gutters to a container by removing the negative margin on the container element. It uses xstyled's <x.div> components with 'row' and 'col' props to create a grid layout. The example shows multiple columns with consistent padding to ensure gutters between columns without container overflow. Dependencies include xstyled and React. Inputs are JSX elements representing layout components, and output is a styled grid with external gutter spacing.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      bg=\"rose-200\"\n      overflow=\"hidden\"\n      borderRadius=\"md\"\n    >\n      <x.div row borderRadius=\"md\">\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"rose-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"rose-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"rose-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} p={2}>\n          <x.div bg=\"rose-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={1 / 2} p={2} />\n    <x.div col={1 / 2} p={2} />\n    <x.div col={1 / 2} p={2} />\n    <x.div col={1 / 2} p={2} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Pills and Circles with Full Border Radius in xstyled JSX\nDESCRIPTION: Shows how to achieve full rounded shapes (pills and circles) by setting the `borderRadius` prop to \"full\". The snippet includes a preview template and the corresponding JSX code using `x.div`. This utility relies on the `@xstyled/styled-components` library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      spaceX={6}\n    >\n      <x.div\n        bg=\"indigo-500\"\n        px={6}\n        py={3}\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"full\"\n      >\n        Pill Shape\n      </x.div>\n      <x.div\n        bg=\"indigo-500\"\n        h={24}\n        w={24}\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderRadius=\"full\"\n      >\n        Circle\n      </x.div>\n    </x.div>\n  </template>\n  <x.div borderRadius=\"full\" py={3} px={6}>\n    Pill Shape\n  </x.div>\n  <x.div\n    borderRadius=\"full\"\n    h={24}\n    w={24}\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n  >\n    Circle\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using inset rings with ringInset utility in xstyled\nDESCRIPTION: This code illustrates how to create inset rings by applying the 'ringInset' property. When combined with 'ring', it displays rings on the inside of buttons, which is useful for styling elements at the edges where external rings might be partially hidden.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-width.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" spaceX={6} justifyContent=\"center\" p={8}>\n      <x.button\n        tabindex=\"-1\"\n        outline={{ focus: 'none' }}\n        w={32}\n        py={2}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"pink-500\"\n        ring={4}\n        ringColor=\"pink-300\"\n      >\n        Default\n      </x.button>\n      <x.button\n        tabindex=\"-1\"\n        outline={{ focus: 'none' }}\n        w={32}\n        py={2}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"pink-500\"\n        ring={4}\n        ringColor=\"pink-300\"\n        ringInset\n      >\n        Inset\n      </x.button>\n    </x.div>\n  </template>\n  <x.button ring={4} ringColor=\"pink-300\">\n    Default\n  </x.button>\n  <x.button ring={4} ringColor=\"pink-300\" ringInset>\n    Inset\n  </x.button>\n</>\n\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Transform in xstyled Component (JSX)\nDESCRIPTION: Shows how to assign a fully custom CSS transform string to the transform prop in xstyled's x.img component, overriding the utility-generated transforms. Requires React and xstyled. The transform prop accepts a full transform CSS string, such as scale and skew with specific values, allowing for more granular control than provided by shorthand props. Outputs a customized transformed image inside a flex container. Compatibility may be impacted by custom CSS syntax and browser support.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n    >\n      <x.div w={32} h={32} bg=\"fuchsia-300\">\n        <x.img\n          h={32}\n          w={32}\n          transform=\"scale(1.5, 0.5) skew(30deg, 20deg)\"\n          rotate={45}\n          src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        />\n      </x.div>\n    </x.div>\n  </template>\n  <x.img transform=\"scale(1.5, 0.5) skew(30deg, 20deg)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Align Items 'Center' in Flex Containers with JSX\nDESCRIPTION: This snippet demonstrates center alignment of flex items using 'alignItems=\"center\"'. It aligns child elements vertically along the container's cross axis, regardless of individual heights, illustrating the 'center' alignment setting visually.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-items.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div\\n      h={48}\\n      display=\"flex\"\\n      alignItems=\"center\"\\n      bg=\"red-200\"\\n      borderRadius=\"md\"\\n      p={4}\\n      spaceX={4}\\n    >\\n      <x.div\\n        h={12}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"red-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        1\\n      </x.div>\\n      <x.div\\n        h={24}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"red-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        2\\n      </x.div>\\n      <x.div\\n        h={16}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"red-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        3\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <x.div display=\"flex\" alignItems=\"center\">\\n    <x.div h={12}>1</x.div>\\n    <x.div h={24}>2</x.div>\\n    <x.div h={16}>3</x.div>\\n  </x.div>\\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Grid Row Placement in xstyled (JSX)\nDESCRIPTION: Shows how to use responsive object notation with the `gridRow` prop in xstyled to apply different grid row placements at specific breakpoints. The example applies `gridRow=\"span 2 / span 2\"` only at medium screen sizes (`md`) and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-row.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridRow={{ md: 'span 2 / span 2' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Align Items 'Start' in Flex Containers using JSX\nDESCRIPTION: This code showcases how to align flex items to the start of the cross axis with the 'alignItems=\"flex-start\"' property, affecting the vertical positioning of child elements within the container. It emphasizes the use of the 'alignItems' prop in conjunction with flex display styling and demonstrates varying child heights for visual clarity.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-items.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div\\n      h={48}\\n      display=\"flex\"\\n      alignItems=\"flex-start\"\\n      bg=\"fuchsia-200\"\\n      borderRadius=\"md\"\\n      p={4}\\n      spaceX={4}\\n    >\\n      <x.div\\n        h={12}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"fuchsia-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        1\\n      </x.div>\\n      <x.div\\n        h={24}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"fuchsia-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        2\\n      </x.div>\\n      <x.div\\n        h={16}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"fuchsia-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        3\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <x.div display=\"flex\" alignItems=\"flex-start\">\\n    <x.div h={12}>1</x.div>\\n    <x.div h={24}>2</x.div>\\n    <x.div h={16}>3</x.div>\\n  </x.div>\\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing focus rings with xstyled ring utilities\nDESCRIPTION: This snippet shows how to add focus rings to components using the 'ring' property with focus-specific configuration. It demonstrates customizing focus rings and colors on buttons within a React JSX setup, enhancing accessibility and visual feedback for keyboard navigation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-width.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\">\n      <x.button\n        w={32}\n        py={2}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"emerald-500\"\n        outline={{ focus: 'none' }}\n        ring={{ focus: 4 }}\n        ringColor={{ focus: 'emerald-500-a50' }}\n      >\n        Button\n      </x.button>\n    </x.div>\n  </template>\n  <x.button ring={{ focus: 4 }} ringColor={{ focus: 'emerald-500-a50' }}>\n    Button\n  </x.button>\n</>\n\n```\n\n----------------------------------------\n\nTITLE: React Component Examples Using transitionTimingFunction Prop\nDESCRIPTION: Shows how to apply transition timing functions to React components with specific `transitionTimingFunction` props, demonstrating variations like 'ease-in', 'ease-out', and 'ease-in-out'. These examples include both inline and composite usages, illustrating how to control transition easing for different elements within a React component.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-timing-function.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"space-around\" alignItems=\"center\">\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionTimingFunction=\"ease-in\"\n        transitionDuration={700}\n        color=\"white\"\n        bg={{ _: 'emerald-600', hover: 'indigo-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionTimingFunction=\"ease-out\"\n        transitionDuration={700}\n        color=\"white\"\n        bg={{ _: 'emerald-600', hover: 'indigo-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionTimingFunction=\"ease-in-out\"\n        transitionDuration={700}\n        color=\"white\"\n        bg={{ _: 'emerald-600', hover: 'indigo-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button\n    transition\n    transitionDuration={700}\n    transitionTimingFunction=\"ease-in\"\n  >\n    Hover me\n  </x.button>\n  <x.button\n    transition\n    transitionDuration={700}\n    transitionTimingFunction=\"ease-out\"\n  >\n    Hover me\n  </x.button>\n  <x.button\n    transition\n    transitionDuration={700}\n    transitionTimingFunction=\"ease-in-out\"\n  >\n    Hover me\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Enabling Horizontal Scrolling with xstyled in React (JSX)\nDESCRIPTION: This example demonstrates the use of 'overflowX=\"auto\"' in xstyled React components, allowing horizontal scrolling if the content exceeds the container's width. The snippet sets up inline-block text within a styled div for large, unbroken text to highlight scroll-on-overflow functionality. Prerequisites include React, xstyled, and a sufficiently long string; outputs a horizontally scrollable region only when required.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div overflowX=\"auto\" borderRadius=\"md\" bg=\"fuchsia-200\">\n      <x.p\n        display=\"inline-block\"\n        color=\"fuchsia-500\"\n        fontWeight=\"medium\"\n        px={6}\n        py={4}\n      >\n        QrLmmW69vMQDtCOg48jidqvvWD2FzDt7I7bBoDc98SRP5OwvOScVYbRzFdfp540eF5v1pjogYkyI8NXqu4wY8chgsXIV0LU7XQKWJ98wLaBSHWiBhvkEU1T3sd6KEFo53CLjVjIz8UvZajb8sbsu62xTsF9cRtFdwEvusq6zJHvedymDCUkY6qXHsuL6fOmHo4KKMurZuJZrK3plRPUaI8XVciz8dVq5CEUXjMrTcB76H1w90CnkRER3nYjs3suTa3223xs8aL97m0peQfjlvKbF8HcmQG5mHEitCn1QZnbMZUK3zE9AIjwcVXP7R9V4fw2A93cZD7wj333X6aaiHZdkkTPtst0u05KSob5c0ZuKQi4D3V395NfFKKr8cR27jmpB7dqK2GiWXeOQUFcjmFVwlHWSlH8ZdUoVJpXf1xL6CRUxwZP4EhBbqQZaJm26ijWII6LRxJ5eVU9Y7KKvQsUeX5BawtgeMWRmjeCwQadTLTQG8gLpi2DvGpMtPWCdqHgEglVSB1ZlDrjEEsXYrNx1IOY0053K3pWNaR1ezyz8kahRfNs3byaHcIQu9tWTrcMpBWhZ45DzLjVV1N8Zt96uLnNWK5DvbKW8GgMuwY7fHkZFz85MN4d2gL0j85HmXGx9oPTFRkPWsmMOHUvm5IhB7QqGSAwT1uL7HgBrNX9a1BAWrp9zV1IWAd1q65sKOOCxTZrXJDpxBxYE4rJAGU6pcri9mUf4g49ZiIAwfu9njtZyYimmImCa6TFhk2jQcSmFDHacExxqC2BfYATHFrKSy94dbw6uWT52nM7MSM9JDu4cs9cbfnaf6amt4hTUotCTONg604b8JKPI1sfd4CG36fBNcnErhpllfRlXkY1xFwmwZT7IJV8okPGNQdTKpdPJOBGw3LHMKojPJl1nPiQB5C9bdePFMNLejSXY5DDvO70ehOCJpBtKZY2quoFJJjGfXe8T4DuGYGmM6JYd5DNinWZuUWXGvfIlJRHgf8BQNQvtmEzqGXIeQZitiq9F\n      </x.p>\n    </x.div>\n  </template>\n  <x.div overflowX=\"auto\">QrLmmW69vMQDtCOg48jidqvvWD2...</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting justifyContent to space-around in xstyled\nDESCRIPTION: The code demonstrates the use of `justifyContent=\"space-around\"`, which distributes items with equal space around each item within a container using xstyled.  The structure mirrors the previous examples to showcase how various `justifyContent` values impact the layout.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"space-around\">\n      {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"red-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"space-around\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Animation (JS Object)\nDESCRIPTION: Shows the JavaScript object notation used within an xstyled component's `animation` prop to apply an animation conditionally. Using the `motionSafe` key applies the 'spin' animation only when the user's system preferences allow motion.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{ motionSafe: 'spin' }\n```\n\n----------------------------------------\n\nTITLE: Responsive display property in xstyled\nDESCRIPTION: This code snippet demonstrates how to use responsive object notation in xstyled to control the `display` property at specific breakpoints.  Setting `display={{ md: 'none' }}` will apply `display=\"none\"` at medium screen sizes and above, allowing you to hide or show elements based on screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display={{ md: 'none' }} />\n```\n\n----------------------------------------\n\nTITLE: Responsive List Style Position in xstyled\nDESCRIPTION: Shows how to apply different `listStylePosition` values at specific breakpoints using responsive object notation in xstyled. This example sets the list marker position to 'inside' only for medium screen sizes (`md`) and larger.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/list-style-position.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.ul listStylePosition={{ md: 'inside' }}>{/* ... */}</x.ul>\n```\n\n----------------------------------------\n\nTITLE: Using the useShadow Hook in xstyled Components\nDESCRIPTION: This example demonstrates how to use the useShadow hook to access shadow values within any component. It allows accessing theme shadow values in React functional components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { useShadow } from '@xstyled/...'\n\nfunction Button() {\n  const shadow = useShadow('lg')\n}\n```\n\n----------------------------------------\n\nTITLE: Default Font Families Configuration\nDESCRIPTION: This snippet presents a predefined set of font families within a default theme object, including 'mono', 'serif', and 'sans'. These are standard font stacks compatible with CSS 'font-family' declarations, providing ready-to-use font settings for styling components. Dependencies include the theme structure and the CSS font-family syntax.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/font-families.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  fonts: {\n    mono: `ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace`,\n    serif: `ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif`,\n    sans: `ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Size Scale in Theme Configuration\nDESCRIPTION: Example showing how to customize the sizes theme section to define custom values for width, height, min-width, min-height, max-width, and max-height properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_6\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    sizes: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting justifyContent to center in xstyled\nDESCRIPTION: This snippet shows how to use `justifyContent=\"center\"` to center items along the container's main axis. It creates a flex container with three items, and similar to the flex-start example, uses a preview and a rendering of the output.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\" spaceX={4}>\n      {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"indigo-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"center\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Background Attachment in xstyled (React)\nDESCRIPTION: This code demonstrates how to set the `backgroundAttachment` property to \"scroll\" in xstyled. This causes the background image to scroll with the viewport, but not with the container. The example uses a div with set dimensions and background image.  It's dependent on the xstyled library being installed, and provides an image URL to use as the background. The result is a div where the background scrolls with the page.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-attachment.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={1}\n      h={72}\n      backgroundAttachment=\"scroll\"\n      backgroundSize=\"cover\"\n      backgroundPosition=\"center\"\n      overflowY=\"scroll\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&h=800&q=80')\"\n    >\n      <x.div h={96} />\n    </x.div>\n  </template>\n  <x.div backgroundAttachment=\"scroll\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: xstyled css Prop Function Signature - JSX\nDESCRIPTION: This snippet shows the function signature and required structure for using a function with xstyled's `css` prop. The theme is accessed via object destructuring (`{ theme }`), and the resulting style object must be wrapped within the `css({})` function call from `@xstyled/emotion`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@xstyled/emotion'\n\nconst Button = ({ children }) => {\n  return (\n    <button\n      css={({ theme }) =>\n        css({\n          paddingTop: theme.space[1],\n        })\n      }\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive TranslateX with xstyled in React\nDESCRIPTION: This snippet illustrates responsive design using xstyled. The `translateX` property is used with an object notation to control its value based on screen size. At medium screen sizes and above (`md`), a `translateX` value of 6 is applied. Dependencies: xstyled library, React.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/translate.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transform translateX={{ md: 6 }} />\n```\n\n----------------------------------------\n\nTITLE: Building the Production Site (Bash)\nDESCRIPTION: This command executes the build script defined in the project's `package.json` (likely `gatsby build`). It compiles and optimizes the website assets for production deployment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Transforms Using xstyled in React (JSX)\nDESCRIPTION: Illustrates how to make a transformation responsive using xstyled by specifying the transform prop as an object keyed by breakpoints. Requires React, xstyled, and a responsive breakpoint configuration in your theme. The example applies the transform utility only at the 'md' breakpoint and above. This approach enables conditionally applied CSS transforms based on the viewport size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transform={{ md: true }} />\n```\n\n----------------------------------------\n\nTITLE: Justify Grid Items Using 'end' in xstyled (JSX)\nDESCRIPTION: Shows usage of the `justifyItems=\"end\"` property to align grid items to the end of their inline axis within an xstyled grid container. The snippet uses a 3-column grid with six fixed-width amber-colored items, styled with rounded corners and centered text. Dependencies include React and xstyled's `x.div` support.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-items.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"end\"\n      h={32}\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"amber-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"end\">\n    <div>1</div>\n    {/* ... */}\n    <div>6</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Align Items 'Baseline' in Flex Containers using JSX\nDESCRIPTION: This snippet demonstrates aligning flex items so their baselines align by using 'alignItems=\"baseline\"'. It shows how different child heights are aligned at their baseline, useful for typographic or inline element consistency within flex layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-items.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div\\n      h={48}\\n      display=\"flex\"\\n      alignItems=\"baseline\"\\n      bg=\"emerald-200\"\\n      borderRadius=\"md\"\\n      p={4}\\n      spaceX={4}\\n    >\\n      <x.div\\n        h={12}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"emerald-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        1\\n      </x.div>\\n      <x.div\\n        h={24}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"emerald-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        2\\n      </x.div>\\n      <x.div\\n        h={16}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"emerald-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        3\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <x.div display=\"flex\" alignItems=\"baseline\">\\n    <x.div h={12}>1</x.div>\\n    <x.div h={24}>2</x.div>\\n    <x.div h={16}>3</x.div>\\n  </x.div>\\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Hover Text Color with xstyled\nDESCRIPTION: This snippet demonstrates how to change the text color of an xstyled `x.div` component on hover using the `color` prop. It uses an object to specify different colors for the default state (`_`) and the hover state (`hover`). This allows for interactive text color changes when the user hovers over the element.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/color.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div color={{ _: 'red-400', hover: 'red-800' }}>\n      Computers have lots of memory but no imagination.\n    </x.div>\n  </template>\n  <x.div color={{ _: 'red-400', hover: 'red-800' }}>\n    Computers have lots of memory but no imagination.\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Accessing Letter Spacing Values via Hook\nDESCRIPTION: Shows how to use the `useLetterSpacing` hook provided by `@xstyled/...` within a functional React component. This hook retrieves the theme value for a specified letter spacing name, allowing it to be used programmatically. Requires `@xstyled/system` or similar package providing the hook.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/letter-spacing.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { useLetterSpacing } from '@xstyled/...'\n\nfunction Title() {\n  const letterSpacing = useLetterSpacing('wide')\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Line Heights in xstyled - Diff - JavaScript\nDESCRIPTION: This snippet shows how to modify the lineHeights property within a JavaScript theme configuration for use with xstyled and styled-components. It demonstrates how to replace or add custom line height values, using both named and numeric keys. Dependencies include a React project set up with styled-components and xstyled, and the modified theme should be supplied to a ThemeProvider. The expected input is a JavaScript object literal; output is the expanded set of line heights available in styled-components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/line-heights.mdx#_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n  // theme.js\n  export const theme = {\n    lineHeights: {\n      none: 1,\n      tight: 1.25,\n      snug: 1.375,\n      normal: 1.5,\n      relaxed: 1.625,\n-     loose: 2,\n+     'extra-loose': 3,\n      3: '.75rem',\n      4: '1rem',\n      5: '1.25rem',\n      6: '1.5rem',\n      7: '1.75rem',\n      8: '2rem',\n      9: '2.25rem',\n      10: '2.5rem',\n+     12: '3rem',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Sizes in xstyled - JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the `fontSizes` property within an xstyled theme configuration. It provides an example of overriding default font size values using JavaScript. This customization is achieved by modifying the `theme.fontSizes` section of the theme object. The expected output is a modified theme with customized font size values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/font-sizes.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  // theme.js\n  export const theme = {\n    fontSizes: {\n-     'xs': '.75rem',\n-     'sm': '.875rem',\n+     'tiny': '.875rem',\n      'base': '1rem',\n      'lg': '1.125rem',\n      'xl': '1.25rem',\n      '2xl': '1.5rem',\n-     '3xl': '1.875rem',\n-     '4xl': '2.25rem',\n      '5xl': '3rem',\n      '6xl': '4rem',\n+     '7xl': '5rem',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Theme Getters\nDESCRIPTION: This snippet shows how to use `th` utility to access theme values directly for more complex properties such as box-shadow. The `th.color()` getter is used to retrieve a color value from the theme with a default fallback. It sets `box-shadow` using a color obtained from the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { th } from '@xstyled/...'\n\nconst Container = styled.div`\n  box-shadow: 0 0 3px ${th.color('primary', '#000')};\n`\n```\n\n----------------------------------------\n\nTITLE: Applying Serif Font Family in React with xstyled\nDESCRIPTION: Example of using fontFamily=\"serif\" to apply a web-safe serif font family to a paragraph element. The example demonstrates both the preview template and the actual implementation code.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p\n      fontFamily=\"serif\"\n      fontSize=\"xl\"\n      color=\"emerald-700\"\n      textAlign=\"center\"\n    >\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p fontFamily=\"serif\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing xstyled Theme Letter Spacings JS\nDESCRIPTION: Illustrates how to add or modify letter spacing tokens within your xstyled theme configuration file. This involves defining or overriding properties within the `theme.letterSpacings` object to provide custom spacing values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/letter-spacings.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// theme.js\nexport const theme = {\n  letterSpacings: {\n+   tightest: '-.075em',\n    tighter: '-.05em',\n-   tight: '-.025em',\n    normal: '0',\n-   wide: '.025em',\n    wider: '.05em',\n-   widest: '.1em',\n+   widest: '.25em',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Macro Configuration for xstyled\nDESCRIPTION: This snippet outlines the Babel macro configuration for styled-components when used with xstyled. By adding `styledComponents` configuration in `babel-plugin-macros.config.js`, the babel plugin is enabled with zero configuration. It specifies the `importModuleName` to `@xstyled/styled-components` so Babel knows where to find the styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// babel-plugin-macros.config.js\nmodule.exports = {\n  // ...\n  // Other macros config\n  styledComponents: {\n    importModuleName: '@xstyled/styled-components',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Position Utility Usage in xstyled\nDESCRIPTION: This snippet demonstrates how to apply responsive positioning using object notation, such as setting the 'top' property at specific breakpoints, allowing elements to adapt their position based on screen size. It highlights the flexibility of xstyled's responsive design features.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/top-right-bottom-left.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div top={{ md: 10 }} />\n```\n\n----------------------------------------\n\nTITLE: Adding Middle Color to Gradient with xstyled\nDESCRIPTION: Demonstrates how to add a middle color to a gradient using the gradientVia prop. When used with gradientFrom but without gradientTo, the gradient will fade out to transparent by default.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/gradient-color-stops.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={24}\n      backgroundImage=\"gradient-to-r\"\n      gradientFrom=\"purple-400\"\n      gradientVia=\"pink-500\"\n      gradientTo=\"red-500\"\n    />\n  </template>\n  <x.div\n    backgroundImage=\"gradient-to-r\"\n    gradientFrom=\"purple-400\"\n    gradientVia=\"pink-500\"\n    gradientTo=\"red-500\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Ring Color with xstyled in React\nDESCRIPTION: Demonstrates applying a specific ring color (`indigo-300`) to a button element using the `ringColor` prop within an xstyled React component (`x.button`). This example also sets the ring width using the `ring` prop and includes other styling props for appearance.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-color.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\">\n      <x.button\n        w={32}\n        py={2}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"indigo-500\"\n        outline={{ focus: 'none' }}\n        ring={4}\n        ringColor=\"indigo-300\"\n      >\n        Button\n      </x.button>\n    </x.div>\n  </template>\n  <x.button ring={4} ringColor=\"indigo-300\">\n    Button\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Static Positioning with xstyled in JSX\nDESCRIPTION: Demonstrates using `position=\"static\"` on an `x.div` component in JSX with `xstyled`. Shows how a statically positioned element remains in the normal document flow, ignores offset properties, and does not become a positioning context for absolute children, which instead reference the nearest non-static ancestor.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/position.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div position=\"relative\" bg=\"fuchsia-200\" p={6}>\n      <x.div\n        position=\"static\"\n        h={32}\n        bg=\"fuchsia-300\"\n        p={4}\n        color=\"fuchsia-600\"\n        fontWeight=\"medium\"\n      >\n        <p>Static parent</p>\n        <x.div\n          position=\"absolute\"\n          bottom={0}\n          left={0}\n          bg=\"fuchsia-500\"\n          p={4}\n          color=\"fuchsia-50\"\n        >\n          <p>Absolute child</p>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div position=\"static\">\n    <p>Static parent</p>\n    <x.div position=\"absolute\" bottom={0} left={0}>\n      <p>Absolute child</p>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installation Command for @xstyled/emotion and related dependencies\nDESCRIPTION: This snippet provides the npm command to install the core @xstyled/emotion package along with @emotion/react and @emotion/styled, which are necessary dependencies for using xstyled in a React project. Running this command sets up the environment to start building styled components with xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/emotion/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstyled/emotion @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Justify Grid Items Using 'start' in xstyled (JSX)\nDESCRIPTION: Illustrates the use of `justifyItems=\"start\"` to align grid items to the start of their inline axis in an xstyled grid container. The example creates a 3-column grid with 6 items having fixed width, light-blue background, and centered text. It requires React with xstyled and uses grid display and gridTemplateColumns properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-items.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"start\"\n      h={32}\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"light-blue-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"start\">\n    <div>1</div>\n    {/* ... */}\n    <div>6</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Utility: Text-Top in xstyled React Components\nDESCRIPTION: Illustrates using 'verticalAlign=\"text-top\"' to align element's top with the top of the parent font. Uses styled components with dashed borders for visualization, providing a clear understanding of 'text-top' alignment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div lineHeight=\"none\" position=\"relative\">\n      <x.span w={0} h={8} display=\"inline-block\" verticalAlign=\"text-top\">\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"amber-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={8}\n        />\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"amber-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={4}\n        />\n      </x.span>\n      <x.span\n        position=\"relative\"\n        zIndex={10}\n        color=\"amber-700\"\n        fontWeight=\"medium\"\n      >\n        Computers have lots of memory but no imagination.\n      </x.span>\n    </x.div>\n  </template>\n  <x.span display=\"inline-block\" verticalAlign=\"text-top\">\n    ...\n  </x.span>\n</>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flex Item Order with React Props - JSX\nDESCRIPTION: Demonstrates how to apply the 'order' property to flex items using React JSX components in xstyled. It includes an example layout illustrating different order values for child elements and how they are rendered in a specified sequence. The implementation relies on the x.div component with props like 'display', 'justifyContent', and 'order'.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/order.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div display=\"flex\" justifyContent=\"space-between\" spaceX={4}>\\n      <x.div\\n        w={16}\\n        h={16}\\n        order={3}\\n        borderRadius=\"md\"\\n        bg=\"light-blue-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        1\\n      </x.div>\\n      <x.div\\n        w={16}\\n        h={16}\\n        borderRadius=\"md\"\\n        bg=\"light-blue-300\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        2\\n      </x.div>\\n      <x.div\\n        w={16}\\n        h={16}\\n        borderRadius=\"md\"\\n        bg=\"light-blue-300\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        3\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <x.div display=\"flex\" justifyContent=\"space-between\">\\n    <x.div order={3}>1</x.div>\\n    <div>2</div>\\n    <div>3</div>\\n  </x.div>\\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Template Rows in Theme (JavaScript)\nDESCRIPTION: This snippet shows how to customize the values for `gridTemplateRows` within the xstyled theme.  By modifying the `theme.gridTemplateRows` section, you can define custom values and reuse them throughout your application.  Requires an xstyled theme file to be present (e.g., `theme.js`). The output allows you to use a custom grid template rows value (8 in this case) throughout your application.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-rows.mdx#_snippet_2\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    gridTemplateRows: {\n+     8: 'repeat(8, minmax(0, 1fr))',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: xstyled Button Component with themed styled.*\nDESCRIPTION: This snippet shows a styled button using xstyled's enhanced `styled.*` approach, simplifying the styling process with direct prop assignments based on the design system. It uses shorthand syntax for padding, colors, border radius, font weight, and background color, making the code more compact and readable than the styled-components version.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/styled-components'\n\nconst Button = styled.button`\n  padding-top: 2;\n  padding-bottom: 2;\n  padding-right: 4;\n  padding-left: 4;\n  color: white;\n  border-radius: md;\n  font-weight: semibold;\n  transition: default;\n  background-color: emerald-500;\n\n  &:hover {\n    background-color: emerald-800;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: emerald-ring;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Default xstyled Animation Definitions (JavaScript)\nDESCRIPTION: Presents the default animation definitions provided by xstyled's theme configuration in JavaScript. This object maps utility names (`spin`, `ping`, `pulse`, `bounce`) to standard CSS `animation` property values, referencing predefined global keyframes (`x-spin`, etc.).\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  animations: {\n    spin: 'x-spin 1s linear infinite',\n    ping: 'x-ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',\n    pulse: 'x-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n    bounce: 'x-bounce 1s infinite',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Spacing Scales with useSpace Hook\nDESCRIPTION: This example demonstrates how to access a spacing scale value in a functional React component using the useSpace hook. This approach is useful when you need spacing values inside component logic.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/padding-margin.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSpace } from '@xstyled/...'\n\nfunction Card() {\n  const space = useSpace(3)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Flex Direction to Row with xstyled in JSX\nDESCRIPTION: Demonstrates using the flexDirection=\"row\" prop on an x.div to arrange flex items horizontally in the natural text direction. Dependencies include React and xstyled's styled system that maps flexDirection prop to CSS flex-direction. The snippet uses flexbox container with child divs styled for size, color, border radius, and centered content. Input is an array of numbers mapped into visual blocks. Output is a single row of flex items spaced horizontally.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-direction.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"row\" spaceX={4}>\n      {[1, 2, 3].map((value) => (\n        <x.div\n          key={value}\n          w={16}\n          h={16}\n          borderRadius=\"md\"\n          bg=\"amber-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" flexDirection=\"row\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing theme colors with generateHexAlphaVariants in xstyled\nDESCRIPTION: This snippet shows how to define custom colors in the theme.colors section of an xstyled theme. It uses the generateHexAlphaVariants utility to automatically create alpha variants for all colors, and demonstrates defining both direct hex values and referenced colors using th.color().\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/colors.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// theme.js\nimport { th, generateHexAlphaVariants } from '@xstyled/styled-components'\n\nexport const theme = {\n  colors: generateHexAlphaVariants({\n    // ...\n    'deep-blue': '#00008b',\n    'primary': th.color('red-600'),\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Full-Viewport Height with xstyled React Components - JSX\nDESCRIPTION: Shows how to assign 100vh (full viewport height) to a component with additional fixed width using the h and w properties. Requires xstyled and a themed x.div. Inputs include height as string ('100vh') and width as number; output is a styled div that fills the vertical viewport and has width 12 units.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div h=\"100vh\" w={12} />\n```\n\n----------------------------------------\n\nTITLE: Flex Item Initialization with Xstyled\nDESCRIPTION: This snippet demonstrates how to use the `flex` property in Xstyled to set the initial flex behavior, allowing items to shrink but not grow. It uses `flex=\"0 1 auto\"` for this purpose. The component displays a flex container with three flex items, each with different text content to illustrate the behavior.  Dependencies include Xstyled and React.  The output shows the items shrinking if space is needed and not growing to fill available space.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <div>\n      <x.p fontSize=\"sm\" color=\"indigo-600\">\n        Items don't grow when there's extra space\n      </x.p>\n      <x.div mt={2} display=\"flex\" spaceX={4}>\n        <x.div\n          flex=\"0 1 auto\"\n          borderRadius=\"md\"\n          bg=\"indigo-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Short\n        </x.div>\n        <x.div\n          flex=\"0 1 auto\"\n          borderRadius=\"md\"\n          bg=\"indigo-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Medium length\n        </x.div>\n      </x.div>\n\n      <x.p mt={8} fontSize=\"sm\" color=\"indigo-600\">\n        Items shrink if possible when needed\n      </x.p>\n      <x.div mt={2} display=\"flex\" spaceX={4}>\n        <x.div\n          flex=\"0 1 auto\"\n          borderRadius=\"md\"\n          bg=\"indigo-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Short\n        </x.div>\n        <x.div\n          flex=\"0 1 auto\"\n          borderRadius=\"md\"\n          bg=\"indigo-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Medium length\n        </x.div>\n        <x.div\n          flex=\"0 1 auto\"\n          borderRadius=\"md\"\n          bg=\"indigo-500\"\n          color=\"white\"\n          fontWeight=\"semibold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={6}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Qui ad\n          labore ipsam, aut rem quo repellat esse tempore id, quidem\n        </x.div>\n      </x.div>\n    </div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flex=\"0 1 auto\">{/* Won't grow, but will shrink if needed */}</x.div>\n    <x.div flex=\"0 1 auto\">{/* Won't grow, but will shrink if needed */}</x.div>\n    <x.div flex=\"0 1 auto\">{/* Won't grow, but will shrink if needed */}</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Positioning with xstyled in JSX\nDESCRIPTION: This snippet shows how to apply CSS positioning rules conditionally based on screen size using xstyled's responsive object notation. The `position={{ md: 'absolute' }}` prop applies `position: absolute` only at the 'md' breakpoint and larger screen sizes.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/position.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div position={{ md: 'absolute' }} />\n```\n\n----------------------------------------\n\nTITLE: Using Object Syntax for State-based Styles with xstyled (JavaScript)\nDESCRIPTION: Demonstrates specifying state-based color styles on xstyled components using object notation. The example passes a color object to <x.button>, configuring its appearance for the default and 'hover' states. Dependencies: @xstyled/core (providing 'x'). Key parameter: color, accepts an object mapping states ('_', 'hover') to color values as strings. Input: React props. Output: Renders a button with dynamic color based on hover state. Limitation: Only works within xstyled context.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<x.button color={{ _: 'red-500', hover: 'red-300' }} />\n```\n\n----------------------------------------\n\nTITLE: Align Items 'Flex-End' in Flex Containers using JSX\nDESCRIPTION: This example shows how to align flex items to the end of the cross axis with 'alignItems=\"flex-end\"'. It adjusts the vertical positioning so that all items are aligned toward the bottom of the container, demonstrating end alignment with varying child heights.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-items.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\\n  <template preview>\\n    <x.div\\n      h={48}\\n      display=\"flex\"\\n      alignItems=\"flex-end\"\\n      bg=\"amber-200\"\\n      borderRadius=\"md\"\\n      p={4}\\n      spaceX={4}\\n    >\\n      <x.div\\n        h={12}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"amber-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        1\\n      </x.div>\\n      <x.div\\n        h={24}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"amber-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        2\\n      </x.div>\\n      <x.div\\n        h={16}\\n        flex=\"1 1 0\"\\n        borderRadius=\"md\"\\n        bg=\"amber-500\"\\n        color=\"white\"\\n        display=\"flex\"\\n        alignItems=\"center\"\\n        justifyContent=\"center\"\\n        fontSize=\"2xl\"\\n        fontWeight=\"extrabold\"\\n      >\\n        3\\n      </x.div>\\n    </x.div>\\n  </template>\\n  <x.div display=\"flex\" alignItems=\"flex-end\">\\n    <x.div h={12}>1</x.div>\\n    <x.div h={24}>2</x.div>\\n    <x.div h={16}>3</x.div>\\n  </x.div>\\n</>\n```\n\n----------------------------------------\n\nTITLE: Stretching Grid Items with justifySelf=\"stretch\" in xstyled React JSX\nDESCRIPTION: This snippet shows how to use justifySelf=\"stretch\" to make a grid item fill its grid area along the inline axis in xstyled. Several items are generated, where one is set to stretch and fills the horizontal space available. Requires React and xstyled library. Input is the justifySelf prop; output is a stretched grid item visually expanding to fill cell width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-self.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={3} gap={4} justifyItems=\"start\">\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          h={16}\n          bg={value === 2 ? 'fuchsia-500' : 'fuchsia-300'}\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          px={4}\n          justifySelf={value === 2 ? 'stretch' : null}\n        >\n          {value === 2 ? '1' : ''}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"start\">\n    {/* ... */}\n    <x.div justifySelf=\"stretch\">1</x.div>\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Timing Function to xstyled Theme (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add a custom timing function named 'ease-in-expo' with its corresponding cubic-bezier value to the `timingFunctions` object within the xstyled theme configuration. This allows the custom function to be used throughout the application via xstyled utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/timing-functions.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  // theme.js\n\n  export const theme = {\n    timingFunctions: {\n      // ...\n      'ease-in': 'cubic-bezier(0.4, 0, 1, 1)',\n      'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',\n      'ease-in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',\n+     'ease-in-expo': 'cubic-bezier(0.7, 0, 0.84, 0)',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Manual transform Binding with th.transform in xstyled (JavaScript)\nDESCRIPTION: Shows manual binding of a transformation using xstyled's th.transform utility inside a styled component template for advanced or custom needs. Requires the th helper and your transform defined in the theme. Outputs a Card component where the transform property is set using th.transform('card'), allowing for further customization or dynamic referencing. This approach is useful for more complex styled logic or composing with other utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Card = styled.h4`\n  font: ${th.transform('card')};\n`\n```\n\n----------------------------------------\n\nTITLE: Setting justifyContent to flex-end in xstyled\nDESCRIPTION: This code uses `justifyContent=\"flex-end\"` to align items to the end of the container's main axis. The implementation follows the same structure as the previous examples with the flex-start and center properties to ensure consistency in presentation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-content.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"flex-end\" spaceX={4}>\n      {Array.from({ length: 3 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          h={16}\n          w={16}\n          borderRadius=\"md\"\n          bg=\"amber-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"flex-end\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Overflow with Ellipsis in xstyled React Component\nDESCRIPTION: This snippet demonstrates how to truncate overflowing text with an ellipsis using the 'textOverflow=\"ellipsis\"' prop in an xstyled React component. It emphasizes styling with maxWidth, overflow, and padding, and provides a visual example of overflowing text truncated with ellipsis.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-overflow.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.p\n      textOverflow=\"ellipsis\"\n      overflow=\"hidden\"\n      maxWidth=\"xs\"\n      px={6}\n      py={4}\n      mx=\"auto\"\n      bg=\"emerald-200\"\n      color=\"emerald-700\"\n      fontWeight=\"medium\"\n      borderRadius=\"lg\"\n    >\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n      Blanditiisitaquequodpraesentiumexplicaboincidunt? Dolores beatae nam at\n      sed dolorum ratione dolorem nisi velit cum.\n    </x.p>\n  </template>\n  <x.p textOverflow=\"ellipsis\" overflow=\"hidden\">\n    ...\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fluid Min-Width with Fractions and Percentages (xstyled, React, JSX)\nDESCRIPTION: This code illustrates how xstyled interprets fractional and decimal minWidth values as percentages. It maps over data structures representing fractions (like '1/2' or 0.5) and displays colored <x.div>s scaled according to these proportionate width values. The example highlights that numeric values between 0 and 1 (inclusive) are treated as percentages, but percentage strings (e.g., '50%') are also valid. Prerequisites: xstyled in a React setup. Inputs: fractional strings and numbers; output is a React component showing their scaled widths for both minWidth and w props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-width.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={6}>\n      {[\n        [['1/2', 0.5], 0.1],\n        [['0.5', 0.5], 0.7],\n      ].map((v, i) => (\n        <x.div\n          key={i}\n          display=\"flex\"\n          overflow=\"hidden\"\n          borderRadius=\"md\"\n          color=\"white\"\n          fontFamily=\"mono\"\n          bg=\"cool-gray-300\"\n        >\n          <x.div w={v[0][1]} px={2} py={4} bg=\"rose-400\" textAlign=\"center\">\n            minWidth={v[0][0]}\n          </x.div>\n          {v[1] > v[0][1] && (\n            <x.div\n              w={v[1] - v[0][1]}\n              px={2}\n              py={4}\n              bg=\"rose-500\"\n              textAlign=\"center\"\n            >\n              {`0.2`}\n            </x.div>\n          )}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div minWidth={1 / 2} w={0.1}>\n    minWidth=1/2\n  </x.div>\n  <x.div minWidth={0.5} w={0.7}>\n    minWidth=0.5\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Sizes for Min-Width and Related Properties (JavaScript, Diff Format)\nDESCRIPTION: This diff patch shows how to extend or override the theme.sizes property in your xstyled theme configuration (typically theme.js). By defining new keys such as 'sm', 'md', 'lg', and 'xl' with their corresponding CSS values, you can globally control the scale for min-width, max-width, width, and height utilities. Dependencies: xstyled theme structure. This patch must be merged into your project's theme.js file. Inputs: key-value mappings of size abbreviations to CSS size strings; outputs: updated theme used across all relevant xstyled min/max dimension utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-width.mdx#_snippet_4\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    sizes: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring grid container with display=\"grid\" in React using XStyled\nDESCRIPTION: This example shows how to use 'grid' display property to create a grid layout, arranging items into multiple columns with gap control. It includes a React component rendering a grid of numbered boxes with styling for centered content.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div display=\"grid\" p={4} bg=\"fuchsia-300\" borderRadius=\"md\" gridTemplateColumns={3} gap={4}> {Array.from({ length: 9 }, (_, index) => index + 1).map((value) => ( <x.div key={value} py={4} px={6} borderRadius=\"md\" bg=\"fuchsia-500\" color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" fontSize=\"2xl\" fontWeight=\"extrabold\" /> ))} </x.div> </template> <x.div display=\"grid\" gap={4} gridTemplateColumns={3}> {/* ... */} </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Emotion css Prop Function Signature - JS\nDESCRIPTION: This snippet illustrates the typical signature for the function passed to Emotion's `css` prop when accessing the theme. The theme object is provided directly as the first argument to the function.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n\nconst Button = ({ children }) => {\n  return (\n    <button\n      css={(theme) => ({\n        paddingTop: theme.space[1],\n      })}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transition Delay with Buttons in xstyled\nDESCRIPTION: Example demonstrating the transitionDelay prop for controlling transition delay on buttons with different delay values (150ms, 300ms, and 700ms). The example shows a hover effect that transitions from amber to red color with specified delays.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-delay.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"space-around\" alignItems=\"center\">\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration={500}\n        transitionDelay={150}\n        color=\"white\"\n        bg={{ _: 'amber-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration={500}\n        transitionDelay={300}\n        color=\"white\"\n        bg={{ _: 'amber-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n      <x.button\n        fontWeight=\"medium\"\n        transition\n        transitionDuration={500}\n        transitionDelay={700}\n        color=\"white\"\n        bg={{ _: 'amber-600', hover: 'red-600' }}\n        py={3}\n        px={6}\n        borderRadius=\"md\"\n        border={0}\n      >\n        Hover me\n      </x.button>\n    </x.div>\n  </template>\n  <x.button transition transitionDelay={150}>\n    Hover me\n  </x.button>\n  <x.button transition transitionDelay={300}>\n    Hover me\n  </x.button>\n  <x.button transition transitionDelay={700}>\n    Hover me\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using borderWidth utility for individual sides in React xstyled\nDESCRIPTION: This snippet illustrates how to assign different border widths to specific sides of components by setting the borderWidth prop with CSS shorthand notation. It displays borders on individual sides for visual demonstration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-width.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={2} gridTemplateColumns={{ sm: 2, lg: 5 }}>\n      {['2 0 0 0', '0 2 0 0', '0 0 2 0', '0 0 0 2'].map((borderWidth) => (\n        <x.div\n          p={6}\n          bg=\"red-300\"\n          color=\"white\"\n          textAlign=\"center\"\n          fontWeight=\"extrabold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderStyle=\"solid\"\n          borderColor=\"red-600\"\n          borderWidth={borderWidth}\n        >\n          {borderWidth}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div borderWidth=\"2 0 0 0\" borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth=\"0 2 0 0\" borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth=\"0 0 2 0\" borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth=\"0 0 0 2\" borderStyle=\"solid\" borderColor=\"indigo-600\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Utility: Top in xstyled React Components\nDESCRIPTION: Demonstrates using 'verticalAlign=\"top\"' to align the top of an element and its descendants with the top of the line. Uses styled components with dashed borders for visualization, illustrating top alignment behavior.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div lineHeight=\"none\" position=\"relative\">\n      <x.span w={0} h={8} display=\"inline-block\" verticalAlign=\"top\">\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"emerald-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={8}\n        />\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"emerald-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={4}\n        />\n      </x.span>\n      <x.span\n        position=\"relative\"\n        zIndex={10}\n        color=\"emerald-700\"\n        fontWeight=\"medium\"\n      >\n        Computers have lots of memory but no imagination.\n      </x.span>\n    </x.div>\n  </template>\n  <x.span display=\"inline-block\" verticalAlign=\"top\">\n    ...\n  </x.span>\n</>\n```\n\n----------------------------------------\n\nTITLE: xstyled rule: Supported interpolation with css template (JavaScript)\nDESCRIPTION: Shows the correct xstyled pattern for interpolating prop values into CSS declarations. The entire declaration (`prop: value;`) should be contained within a `css` utility template literal, allowing xstyled to parse the structure correctly and apply theme transformations if applicable.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Box = styled.div`\n  ${(p) => css`\n    margin: ${p.margin};\n  `}\n`\n```\n\n----------------------------------------\n\nTITLE: Clipping Background to Text Shape with xstyled JSX\nDESCRIPTION: Illustrates how to apply the `backgroundClip=\"text\"` property to crop the background (in this case, a gradient) to the shape of the text within an element. This technique, combined with `color=\"transparent\"`, creates a text fill effect where the background is visible through the text.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-clip.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      textAlign=\"center\"\n      py={6}\n      lineHeight={0}\n      letterSpacing=\"tight\"\n      fontSize=\"5xl\"\n      fontWeight=\"extrabold\"\n    >\n      <x.span\n        backgroundClip=\"text\"\n        color=\"transparent\"\n        backgroundImage=\"gradient-to-r\"\n        gradientFrom=\"emerald-500\"\n        gradientTo=\"light-blue-500\"\n      >\n        Hello world\n      </x.span>\n    </x.div>\n  </template>\n  <x.div fontSize=\"5xl\" fontWeight=\"extrabold\">\n    <x.span\n      backgroundClip=\"text\"\n      color=\"transparent\"\n      backgroundImage=\"gradient-to-r\"\n      gradientFrom=\"emerald-500\"\n      gradientTo=\"light-blue-500\"\n    >\n      Hello world\n    </x.span>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Default Spacing Scale - JavaScript\nDESCRIPTION: This JavaScript code snippet displays the default spacing scale provided by xstyled. The `space` object contains predefined spacing values, represented as keys with corresponding pixel values, which can be used throughout the application's styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/space.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  space: {\n    0.5: '0.125rem',\n    1: '0.25rem',\n    1.5: '0.375rem',\n    2: '0.5rem',\n    2.5: '0.625rem',\n    3: '0.75rem',\n    3.5: '0.875rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    7: '1.75rem',\n    8: '2rem',\n    9: '2.25rem',\n    10: '2.5rem',\n    11: '2.75rem',\n    12: '3rem',\n    14: '3.5rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    28: '7rem',\n    32: '8rem',\n    36: '9rem',\n    40: '10rem',\n    44: '11rem',\n    48: '12rem',\n    52: '13rem',\n    56: '14rem',\n    60: '15rem',\n    64: '16rem',\n    72: '18rem',\n    80: '20rem',\n    96: '24rem',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Center Aligning a Flex Item Using alignSelf=\"center\" in xstyled (JSX)\nDESCRIPTION: Applies alignSelf=\"center\" to a single flex child to center it along the container's cross axis, ignoring the container's align-items setting. xstyled dependency and a React environment are required. Useful to vertically center specific children; set alignSelf and confirm the parent uses display=\"flex\".\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-self.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={24} display=\"flex\" alignItems=\"stretch\" spaceX={2}>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"light-blue-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        alignSelf=\"center\"\n        py={3}\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"light-blue-600\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"light-blue-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" alignItems=\"stretch\">\n    <div>1</div>\n    <x.div alignSelf=\"center\">2</x.div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating an inline-flex container with display=\"inline-flex\" in React using XStyled\nDESCRIPTION: This snippet exhibits how to set an element as an inline flex container, allowing inline behavior while enabling flex layout for its children. It applies flex properties to child elements within an inline-flex container for flexible inline layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div p={4} spaceX={4} bg=\"indigo-300\" display=\"inline-flex\" borderRadius=\"md\"> <x.div flex=\"1 1 0\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"indigo-500\" py={4} px={6}> 1 </x.div> <x.div flex=\"1 1 0\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"indigo-500\" py={4} px={6}> 2 </x.div> <x.div flex=\"1 1 0\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"indigo-500\" py={4} px={6}> 3 </x.div> </x.div> </template> <x.div display=\"inline-flex\" spaceX={4}> <x.div flex=\"1 1 0\">1</x.div> <x.div flex=\"1 1 0\">2</x.div> <x.div flex=\"1 1 0\">3</x.div> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Import and Use Customizing Transition Properties\nDESCRIPTION: References importing a markdown-based documentation snippet for customizing transition properties, enabling further customization of transition timing functions. The imported component `CustomizeTransitionProperties` likely contains detailed configuration options.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-timing-function.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport CustomizeTransitionProperties from '../../../partials/customizing/transition-properties.mdx'\n\n<CustomizeTransitionProperties />\n```\n\n----------------------------------------\n\nTITLE: Responsive gridAutoColumns Configuration using xstyled\nDESCRIPTION: This snippet demonstrates how to apply the 'gridAutoColumns' utility responsively using object notation. It shows setting 'gridAutoColumns' to 'max-content' at medium screen sizes and above, enabling adaptive grid column sizing based on breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-auto-columns.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridAutoColumns={{ md: 'max-content' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Controlling Element Opacity with xstyled Utilities in React (JSX)\nDESCRIPTION: Demonstrates how to use xstyled's opacity props to adjust the opacity of several <x.div> components in a React component tree. This example displays multiple divs with varying opacity values by iterating over an array of ratios and applying them via the opacity prop. Requires React and @xstyled/styled-components; expects that both are installed and that the x component is imported from xstyled. Inputs include opacity ratios from 1 to 0. The output is a visual grid showing each corresponding opacity.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/opacity.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={5} gridTemplateColumns={{ sm: 2, lg: 5 }} p={3}>\n      {[1, 0.75, 0.5, 0.25, 0].map((opacity) => (\n        <x.div\n          p={6}\n          bg=\"amber-500\"\n          color=\"white\"\n          textAlign=\"center\"\n          fontWeight=\"medium\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius\n          opacity={opacity}\n        >\n          {opacity}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div opacity={1} />\n  <x.div opacity={0.75} />\n  <x.div opacity={0.5} />\n  <x.div opacity={0.25} />\n  <x.div opacity={0} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using the `useLineHeight` Hook in React (JavaScript)\nDESCRIPTION: Shows how to retrieve a specific line height value defined in the xstyled theme from within a React functional component using the `useLineHeight` hook. The hook takes the theme line height key (e.g., 'loose') as an argument.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/line-height.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLineHeight } from '@xstyled/...'\n\nfunction Title() {\n  const lineHeight = useLineHeight('loose')\n}\n```\n\n----------------------------------------\n\nTITLE: Float Right with xstyled (React)\nDESCRIPTION: This snippet demonstrates how to float an image element to the right using the `float=\"right\"` prop within the xstyled library.  It utilizes an `x.img` component and provides an example of wrapping text to the left of the floated image.  The `src` prop specifies the image source. This requires the xstyled library and a placeholder image for the `src` prop to function correctly.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/float.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      <x.img\n        mt={2}\n        mr={0}\n        mb={4}\n        ml={10}\n        h={32}\n        float=\"right\"\n        src=\"/img/placeholder-emerald.svg\"\n      />\n      <x.p\n        color=\"emerald-500\"\n        fontFamily=\"Flow\"\n        textAlign=\"justify\"\n        fontWeight=\"medium\"\n      >\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam venenatis\n        et lorem sit amet vehicula. Etiam vel nibh nec nisi euismod mollis\n        ultrices condimentum velit. Proin velit libero, interdum ac rhoncus sit\n        amet, pellentesque ac turpis. Quisque ac luctus turpis, vel efficitur\n        ante. Cras convallis risus vel vehicula dapibus. Donec eget neque\n        fringilla, faucibus mi quis, porttitor magna. Cras pellentesque leo est,\n        et luctus neque rutrum eu. Aliquam consequat velit sed sem posuere,\n        vitae sollicitudin mi consequat. Mauris eget ipsum sed dui rutrum\n        fringilla. Donec varius vehicula magna sit amet auctor. Ut congue\n        vehicula lectus in blandit. Vivamus suscipit eleifend turpis, nec\n        sodales sem vulputate a. Curabitur pulvinar libero viverra, efficitur\n        odio eu, finibus justo. Etiam eu vehicula felis.\n      </x.p>\n    </>\n  </template>\n  <x.img float=\"right\" src=\"path/to/image.jpg\" />\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam venenatis et\n    lorem sit amet vehicula. Etiam vel nibh nec nisi euismod mollis ultrices\n    condimentum velit. Proin velit libero, interdum ac rhoncus sit amet,\n    pellentesque ac turpis. Quisque ac luctus turpis, vel efficitur ante. Cras\n    convallis risus vel vehicula dapibus. Donec eget neque fringilla, faucibus\n    mi quis, porttitor magna. Cras pellentesque leo est, et luctus neque rutrum\n    eu. Aliquam consequat velit sed sem posuere, vitae sollicitudin mi\n    consequat. Mauris eget ipsum sed dui rutrum fringilla. Donec varius vehicula\n    magna sit amet auctor. Ut congue vehicula lectus in blandit. Vivamus\n    suscipit eleifend turpis, nec sodales sem vulputate a. Curabitur pulvinar\n    libero viverra, efficitur odio eu, finibus justo. Etiam eu vehicula felis.\n  </p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Utility: Text-Bottom in xstyled React Components\nDESCRIPTION: Demonstrates 'verticalAlign=\"text-bottom\"' to align element's bottom with the bottom of the parent font, with visualization through dashed borders. Clarifies how 'text-bottom' affects alignment in styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div lineHeight=\"none\" position=\"relative\">\n      <x.span w={0} h={8} display=\"inline-block\" verticalAlign=\"text-bottom\">\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"pink-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={8}\n        />\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"pink-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={4}\n        />\n      </x.span>\n      <x.span\n        position=\"relative\"\n        zIndex={10}\n        color=\"pink-700\"\n        fontWeight=\"medium\"\n      >\n        Computers have lots of memory but no imagination.\n      </x.span>\n    </x.div>\n  </template>\n  <x.span display=\"inline-block\" verticalAlign=\"text-bottom\">\n    ...\n  </x.span>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Theme Sizes Scale for xstyled - JavaScript Diff\nDESCRIPTION: Demonstrates how to modify the theme.js file to specify custom size values for sm, md, lg, and xl. Requires a project using xstyled's theming system. Inputs are key-value pairs for new size categories; output is an updated theme object that affects all component sizing utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_6\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    sizes: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Background Attachment with xstyled JSX\nDESCRIPTION: Demonstrates the responsive syntax in xstyled to apply CSS properties like `backgroundAttachment` only at specific breakpoints. The example shows how to set `backgroundAttachment` to 'scroll' for medium screen sizes and above using the object notation `{ md: 'scroll' }`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-clip.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div backgroundAttachment={{ md: 'scroll' }} />\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for xstyled\nDESCRIPTION: This code snippet provides an example configuration for the Babel plugin for styled-components to work with xstyled. The `topLevelImportPaths` array is used to specify the module paths, enabling features like server-side rendering and minification, and improving the debugging experience. The provided example configures Babel in the `.babelrc` file.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// .babelrc\n{\n  \"plugins\": [\n    [\n      \"babel-plugin-styled-components\",\n      {\n        \"topLevelImportPaths\": [\n          \"@xstyled/styled-components\",\n          \"@xstyled/styled-components/no-tags\",\n          \"@xstyled/styled-components/native\",\n          \"@xstyled/styled-components/primitives\"\n        ],\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items with justifySelf=\"start\" in xstyled React JSX\nDESCRIPTION: Illustrates setting justifySelf=\"start\" on a grid item using xstyled to align it to the start of its inline axis. The snippet creates a grid with multiple items, conditionally applying 'start' alignment to one item. Dependencies include React and xstyled. Inputs are JSX props; output is a grid with a single item aligned to the start inline edge.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-self.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"stretch\"\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          h={16}\n          bg={value === 2 ? 'amber-500' : 'amber-300'}\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          px={4}\n          justifySelf={value === 2 ? 'start' : null}\n        >\n          {value === 2 ? '1' : ''}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"stretch\">\n    {/* ... */}\n    <x.div justifySelf=\"start\">1</x.div>\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Border Color with Alpha Opacity - xstyled React - JSX\nDESCRIPTION: This snippet illustrates how to use a border color with an alpha (opacity) variant in an xstyled React component by specifying 'indigo-600-a50' as the color value. The border gets a semi-transparent indigo color. Dependencies include React, xstyled, and styled-components. The input is styled with padding, corner radius, a disabled focus outline, and displays the specific opacity border.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-color.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <x.input\n        placeholder=\"Your email\"\n        p={3}\n        border={2}\n        borderColor=\"indigo-600-a50\"\n        outline={{ focus: 'none' }}\n        borderRadius=\"md\"\n      />\n    </x.div>\n  </template>\n  <x.input border={2} borderColor=\"indigo-600-a50\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Styled Component with xstyled in React (JavaScript/JSX)\nDESCRIPTION: This snippet implements a functional React component named Example that utilizes the xstyled CSS-in-JS framework for responsive and utility-driven styling. The xstyled x object is imported and used to define div, img, h4, and p elements with spacing, coloring, and responsive props, such as padding (p), background (bg), display, and font properties. The code requires React, @xstyled/styled-components, and styled-components as dependencies. Inputs include no props (hardcoded layout); output is a styled UI section using flex layout and theme-defined spacing and color variables. Assumes the presence of /img/logo.svg in the public directory.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { x } from '@xstyled/styled-components'\n\nfunction Example() {\n  return (\n    <x.div p={{ _: 3, md: 6 }} bg=\"white\" display=\"flex\" spaceX={4}>\n      <x.div flexShrink={0}>\n        <x.img h={12} w={12} src=\"/img/logo.svg\" alt=\"xstyled Logo\" />\n      </x.div>\n      <x.div>\n        <x.h4\n          fontSize={{ _: 'md', lg: 'xl' }}\n          fontWeight=\"medium\"\n          color=\"black\"\n        >\n          xstyled\n        </x.h4>\n        <x.p color=\"gray-500\">A CSS-in-JS framework built for React.</x.p>\n      </x.div>\n    </x.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling xstyled Cache via Theme Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to disable the property resolution cache in xstyled by setting the 'cache' property to false within the xstyled configuration inside your theme object. This requires the xstyled library as a dependency, and the theme with this configuration should be provided to your styling context (such as a ThemeProvider component). The key parameter is 'cache', which when set to false, turns off caching for property resolutions. The configuration expects a theme object and outputs a theme with cache behavior disabled. Limitations include potential performance decrease due to recalculation of all properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/cache.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const theme = {\n  xstyled: {\n    cache: false,\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Fit 'contain' with xstyled React Components - JSX\nDESCRIPTION: This snippet demonstrates how to use the objectFit=\"contain\" property on xstyled's <x.img> component to ensure the image content stays contained within its parent <x.div>. The example applies custom background color, border radius, and overflow properties. Dependencies include @xstyled/styled-components (or xstyled package) and React. The main inputs are the size (h and w), objectFit value, and an image source. The output displays a fully contained image that preserves its aspect ratio. This approach works with any valid image source and container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/object-fit.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div bg=\"rose-300\" borderRadius=\"md\" overflow=\"hidden\">\n      <x.img\n        h={48}\n        w={1}\n        objectFit=\"contain\"\n        src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        alt=\"\"\n      />\n    </x.div>\n  </template>\n  <x.div bg=\"rose-300\">\n    <x.img objectFit=\"contain\" h={48} w=\"100%\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Automatic Font Family Binding with xstyled\nDESCRIPTION: Example of using xstyled's styled utility to automatically bind font family styles. The sans font family is bound to the font-family CSS attribute without manual mapping.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Title = styled.h4`\n  font-family: sans;\n`\n```\n\n----------------------------------------\n\nTITLE: Applying Placeholder Text Color with xstyled\nDESCRIPTION: This snippet demonstrates how to customize the color of the placeholder text in an xstyled `x.input` component. It utilizes the `color` prop with an object containing `_` for the default text color and `placeholder` for the placeholder text color. This allows for distinct styling of the placeholder text, improving user experience.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/color.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.input\n      placeholder=\"Type something...\"\n      color={{ _: 'red-600', placeholder: 'red-300' }}\n      borderRadius=\"md\"\n      border={1}\n      borderColor=\"red-600\"\n      p={2}\n      outline={{ focus: 'none' }}\n    />\n  </template>\n  <x.input\n    placeholder=\"Type something...\"\n    color={{ _: 'red-600', placeholder: 'red-300' }}\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Fit 'fill' with xstyled React Components - JSX\nDESCRIPTION: This snippet illustrates how to set objectFit=\"fill\" using xstyled's <x.img> in React, which stretches or compresses the image to fill the container regardless of aspect ratio. Required libraries include xstyled and React. Key parameters are height, width, and objectFit prop; a source image is optional. Images may appear distorted if the aspect ratio does not match the container. Outputs a rectangular image fully occupying its container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/object-fit.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div bg=\"indigo-300\" borderRadius=\"md\" overflow=\"hidden\">\n      <x.img\n        h={48}\n        w={1}\n        objectFit=\"fill\"\n        src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        alt=\"\"\n      />\n    </x.div>\n  </template>\n  <x.div bg=\"indigo-300\">\n    <x.img objectFit=\"fill\" h={48} w=\"100%\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Box Shadows in React with xstyled\nDESCRIPTION: This snippet demonstrates how to apply responsive box shadows that change at different breakpoints. It uses object notation to set a specific shadow value at the medium screen size and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div boxShadow={{ md: 'xl' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Animation (JSX)\nDESCRIPTION: Demonstrates how to apply an animation based on responsive breakpoints using object notation within the `animation` prop in xstyled JSX. The example applies the 'spin' animation specifically for medium screen sizes (`md`) and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div animation={{ md: 'spin' }} />\n```\n\n----------------------------------------\n\nTITLE: Responsive Transition Property Configuration (JSX)\nDESCRIPTION: Illustrates setting the `transitionProperty` responsively using xstyled's object notation. This example applies the `transitionProperty=\"all\"` utility only at medium screen sizes (`md`) and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-property.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transitionProperty={{ md: 'all' }} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server (Bash)\nDESCRIPTION: This command sequence first installs the necessary project dependencies using `npm install` and then starts the Gatsby development server using `npm run develop`. This allows developers to run and view the documentation site locally on http://localhost:8000/ during development.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Using flexGrow to Enable Growth with xstyled and React\nDESCRIPTION: This code snippet demonstrates how to make a flex item grow to fill available space within a flex container using the `flexGrow` prop in xstyled. It renders three divs inside a flex container, where the middle div has `flexGrow={1}`, allowing it to expand. The other two divs have flex=\"none\", preventing them from growing. This requires the xstyled library, and imports are assumed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-grow.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" spaceX={3}>\n      <x.div\n        flex=\"none\"\n        h={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"red-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n      <x.div\n        flexGrow={1}\n        h={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"red-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        flex=\"none\"\n        h={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"red-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flex=\"none\">{/* This item will not grow */}</x.div>\n    <x.div flexGrow={1}>{/* This item will grow */}</x.div>\n    <x.div flex=\"none\">{/* This item will not grow */}</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Transform Origin in xstyled (React, JavaScript)\nDESCRIPTION: This snippet demonstrates how to set a responsive transformOrigin prop on an xstyled <x.div> component. By passing an object to transformOrigin, the origin changes based on breakpoint (e.g., 'top' at 'md' and default otherwise). This enables dynamic styling in responsive designs. Dependencies: xstyled, React. Key prop is transformOrigin={{ md: 'top' }} and transform with rotate. Input is the breakpoint and transform origin value; output is a rotated, transformed div with responsive origin. Requires xstyled to support responsive object notation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform-origin.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div transform rotate={45} transformOrigin={{ md: 'top' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Ring Color Opacity with xstyled in React\nDESCRIPTION: Shows how to set the ring color with a specific opacity using xstyled's color alpha variants (e.g., `amber-500-a50`). It applies this semi-transparent ring color to a button element alongside other styling props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-color.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\">\n      <x.button\n        w={32}\n        py={2}\n        borderRadius=\"md\"\n        fontWeight=\"semibold\"\n        color=\"white\"\n        bg=\"amber-500\"\n        outline={{ focus: 'none' }}\n        ring={4}\n        ringColor=\"amber-500-a50\"\n      >\n        Button\n      </x.button>\n    </x.div>\n  </template>\n  <x.button ring={4} ringColor=\"amber-500-a50\">\n    Button\n  </x.button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Height with xstyled React Components - JSX\nDESCRIPTION: Demonstrates using the h property to let the browser automatically determine the element height, including responsive behavior via the xs and md breakpoints. Requires xstyled and a themed x.div component. Inputs are breakpoint objects; output is a styled div whose height is auto or 24px depending on screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div h={{ xs: 24, md: 'auto' }} />\n```\n\n----------------------------------------\n\nTITLE: Manually Binding Transitions Using th.transition with xstyled - JavaScript\nDESCRIPTION: This code shows how to manually bind a transition value using the th.transition utility function in xstyled. The transition is dynamically injected into the styled component by calling th.transition('default'), allowing for theme-driven transitions. It requires importing the th helper from @xstyled and works within a styled-components template literal.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Button = styled.button`\n  transition: ${th.transition('default')};\n`\n```\n\n----------------------------------------\n\nTITLE: Using fontWeight Property in xstyled (React)\nDESCRIPTION: This React snippet demonstrates how to use the `fontWeight` property within xstyled components to control the font weight.  It iterates through an array of font weight values and applies them to a series of `<x.dd>` elements.  It requires xstyled components and assumes a basic understanding of React JSX. The output displays different font weights applied to a text string.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-weight.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  <template preview>\n    <>\n      {[\n        'hairline',\n        'thin',\n        'light',\n        'normal',\n        'medium',\n        'semibold',\n        'bold',\n        'extrabold',\n        'black',\n      ].map((weight) => (\n        <x.dl\n          key={weight}\n          display=\"flex\"\n          alignItems=\"baseline\"\n          color=\"amber-700\"\n          overflow=\"hidden\"\n        >\n          <x.dt\n            w={24}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n          >\n            {weight}\n          </x.dt>\n          <x.dd fontSize=\"xl\" fontWeight={weight}>\n            Computers have lots of memory but no imagination.\n          </x.dd>\n        </x.dl>\n      ))}\n    </>\n  </template>\n  <x.p fontWeight=\"hairline\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"thin\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"light\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"normal\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"medium\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"semibold\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"bold\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"extrabold\">Computers have lots ...</x.p>\n  <x.p fontWeight=\"black\">Computers have lots ...</x.p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Box Shadow in React with xstyled\nDESCRIPTION: This example shows how to apply an inner (inset) box shadow to an element using the boxShadow=\"inner\" utility in xstyled. This technique is useful for form controls or wells to create a subtle inset appearance.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={5} gridTemplateColumns={{ sm: 2, lg: 5 }} p={3}>\n      <x.div\n        p={6}\n        bg=\"light-blue-300\"\n        color=\"gray-800\"\n        textAlign=\"center\"\n        fontWeight=\"medium\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        borderRadius\n        boxShadow=\"inner\"\n      >\n        \"inner\"\n      </x.div>\n    </x.div>\n  </template>\n  <x.div boxShadow=\"inner\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluid (Percentage) Min-Height in xstyled using JSX\nDESCRIPTION: Shows how to apply fluid minimum heights using fractional values (e.g., `1/2`) or numbers between 0 and 1 (e.g., `0.5`) for the `minHeight` prop. These values are automatically converted to percentages by `xstyled`. Explicit percentage strings like `'50%'` are also valid.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-height.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {[\n        [['1/2', 0.5], 0.1],\n        [['0.5', 0.5], 0.7],\n      ].map((v, i) => (\n        <x.div\n          key={i}\n          overflow=\"hidden\"\n          borderRadius=\"md\"\n          color=\"white\"\n          fontFamily=\"mono\"\n          h={48}\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-end\"\n          bg=\"cool-gray-300\"\n        >\n          {v[1] > v[0][1] && (\n            <x.div\n              h={v[1] - v[0][1]}\n              px={2}\n              py={4}\n              bg=\"rose-500\"\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n            >\n              {`0.2`}\n            </x.div>\n          )}\n          <x.div\n            h={v[0][1]}\n            px={2}\n            py={4}\n            bg=\"rose-400\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            minHeight={v[0][0]}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div minHeight={1 / 2} w={0.1}>\n    minHeight=1/2\n  </x.div>\n  <x.div minHeight={0.5} w={0.7}>\n    minHeight=0.5\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Background Image with xstyled in React\nDESCRIPTION: This example demonstrates how to display a background image on a div element using xstyled's backgroundImage property along with related background properties for positioning and sizing.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-image.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"amber-300\"\n      h={48}\n      backgroundSize=\"cover\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&h=800&q=80');\"\n    />\n  </template>\n  <x.div backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Theme Getter Hook useColor in xstyled\nDESCRIPTION: This snippet shows how to use a theme getter hook, `useColor`, to retrieve a color value from the theme.  It uses the 'primary' color from the theme and sets it as the text color for a div element.  The hook simplifies direct access to theme values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/hooks.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useColor } from '@xstyled/...'\n\nfunction Example() {\n  const primary = useColor('primary')\n  return <div style={{ color: primary }}>Primary</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Font Family in React with xstyled\nDESCRIPTION: Example of using responsive object notation to control font family at different breakpoints. Sets serif font for xs screens and sans-serif font for md screens and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.p fontFamily={{ xs: 'serif', md: 'sans' }}>{/* ... */}</x.p>\n```\n\n----------------------------------------\n\nTITLE: Automatic Transition Property Binding with styled (JS)\nDESCRIPTION: Shows how xstyled's `styled` function automatically binds the CSS `transition-property` defined within a template literal to the component's style. This example sets the `transition-property` to `default`, likely referencing a theme value.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-property.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...' // Assuming import from @xstyled/styled-components or similar\n\nconst Button = styled.button`\n  transition-property: default;\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Not-Allowed Cursor Style in React with xstyled (JSX)\nDESCRIPTION: Explains usage of cursor=\"not-allowed\" to display a disabled/interaction-blocked cursor on x.div components in React using xstyled. Ideal for elements that cannot be clicked or interacted with, supporting standard style props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"not-allowed\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"light-blue-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"not-allowed\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Binding a Utility to a Theme Primitive\nDESCRIPTION: Explains how to link a custom utility's value transformation to a specific theme scale using the `themeGet` option. This example binds the `borderInlineColor` prop to the theme's color scale using `getColor`, allowing usage of theme color keys like `red-500`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { style, getColor } from '@xstyled/...'\n\nexport const borderInlineColor = style({\n  prop: 'borderInlineColor',\n  themeGet: getColor,\n})\n\n// Usage\n<y.div borderInlineColor=\"red-500\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling ring utilities responsively in xstyled\nDESCRIPTION: This snippet demonstrates applying the 'ring' utility conditionally at specific breakpoints using responsive object notation. For example, applying a ring thickness of 2 units only on medium screens and larger, enabling adaptive styling for different device sizes.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/ring-width.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div ring={{ md: 2 }}>{/* ... */}</x.div>\n\n```\n\n----------------------------------------\n\nTITLE: Preventing Flex Item Shrink with Styled Components in React (JSX)\nDESCRIPTION: Illustrates how to apply the `flexShrink={0}` prop to prevent a flex item from shrinking below its initial size in a flex container. Using xstyled components, it styles the items with light-blue color variants and sets specific widths and heights, showcasing that the middle item with flexShrink=0 maintains its width even when the container is constrained. This example depends on React, xstyled, and styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-shrink.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" spaceX={3} mx=\"auto\">\n      <x.div\n        flexGrow={1}\n        h={16}\n        w={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"light-blue-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n      <x.div\n        flexShrink={0}\n        h={16}\n        w={32}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"light-blue-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n      <x.div\n        flexGrow={1}\n        h={16}\n        w={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"light-blue-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        ~\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flexGrow={1} w={16}>\n      {/* This item will grow or shrink as needed */}\n    </x.div>\n    <x.div flexShrink={0} w={32}>\n      {/* This item will not shrink below its initial size */}\n    </x.div>\n    <x.div flexGrow={1} w={16}>\n      {/* This item will grow or shrink as needed */}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Width with Various Units in React\nDESCRIPTION: Interactive example showing how to set fixed widths using different units. Demonstrates numeric values (converted to px), explicit pixel values, rem units, and ex units.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4} mx=\"auto\" w={64}>\n      {[123, '12px', '4rem', '3ex'].map((v) => (\n        <x.div key={v} display=\"flex\" alignItems=\"center\" spaceX={4}>\n          <x.p fontSize=\"sm\" color=\"emerald-600\" w={24} textAlign=\"right\">\n            w={v}\n          </x.p>\n          <x.div\n            h={8}\n            w={v}\n            borderRadius=\"md\"\n            bg=\"emerald-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div w={123} />\n    <x.div w=\"12px\" />\n    <x.div w=\"4rem\" />\n    <x.div w=\"3ex\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Flex Direction to Row-Reverse with xstyled in JSX\nDESCRIPTION: Shows usage of flexDirection=\"row-reverse\" on an x.div for horizontally positioning flex items in the reverse order. It depends on React and xstyled mapping flexDirection to CSS flex-direction. The example maps an array into flex items styled with consistent height, width, colors, and centers content. Includes spacing with spaceX and spaceXReverse to maintain correct gap layout in reversed order. Inputs are numeric arrays rendered in reverse visually.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-direction.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"row-reverse\" spaceX={4} spaceXReverse>\n      {[1, 2, 3].map((value) => (\n        <x.div\n          key={value}\n          w={16}\n          h={16}\n          borderRadius=\"md\"\n          bg=\"light-blue-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\" flexDirection=\"row-reverse\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Scaled Max-Width Using xstyled in React (JSX)\nDESCRIPTION: Demonstrates how to use the maxWidth prop with theme-based scaled values in xstyled React components. Values from the theme's sizes scale can be referenced with an 's' suffix to avoid conflicts, transforming scale keys like 0.5 to '0.5s'. The snippet shows rendering divs with varying maximum widths using both numeric and scaled string values, highlighting how xstyled applies max-width CSS from theme values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-width.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4} mx=\"auto\" w={64}>\n      {['1s', 8, 12, 16, 24].map((v) => (\n        <x.div key={v} display=\"flex\" alignItems=\"center\" spaceX={4}>\n          <x.p fontSize=\"sm\" color=\"light-blue-600\" w={24} textAlign=\"right\">\n            maxWidth={v}\n          </x.p>\n          <x.div\n            w={32}\n            bg=\"cool-gray-300\"\n            borderRadius=\"md\"\n            display=\"flex\"\n            alignItems=\"flex-end\"\n          >\n            <x.div\n              h={8}\n              maxWidth={v}\n              w={1}\n              borderRadius=\"md\"\n              bg=\"light-blue-500\"\n              color=\"white\"\n              fontSize=\"2xl\"\n              fontWeight=\"extrabold\"\n            />\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div maxWidth=\"1s\" w={32} />\n    <x.div maxWidth={8} w={32} />\n    <x.div maxWidth={12} w={32} />\n    <x.div maxWidth={16} w={32} />\n    <x.div maxWidth={24} w={32} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing xstyled Animations (JavaScript)\nDESCRIPTION: Illustrates how to extend or override the default animation utilities by adding new entries or modifying existing ones within the `animations` section of the xstyled theme configuration JavaScript file. New animations bind a utility name to a CSS `animation` value, typically referencing global keyframes prefixed with `x-`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_6\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n\n  export const theme = {\n    animations: {\n      // ...\n     'spin-slow': 'x-spin 3s linear infinite',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Apply Vertical Scroll Always - xstyled JSX\nDESCRIPTION: Demonstrates applying the `overflowY=\"scroll\"` property to an `x.div` component. This forces vertical scrollbars to be visible at all times, regardless of whether the content overflows, unless operating system settings prevent it. The snippet includes a preview setup and a simpler direct application.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={32} overflow=\"hidden\">\n      <x.div\n        overflowY=\"scroll\"\n        h={32}\n        px={6}\n        py={2}\n        borderRadius=\"md\"\n        bg=\"light-blue-200\"\n      >\n        <x.p fontFamily=\"Flow\" lineHeight={5} color=\"light-blue-700\">\n          Lorem ipsum dolor sit amet... vel.\n        </x.p>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div overflowY=\"scroll\" h={32}>\n    Lorem ipsum dolor sit amet...\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Props with Box Suffix\nDESCRIPTION: This example demonstrates how to combine styled components with utility props. It uses the `buttonBox` suffix instead of `button` allowing the use of utility props like `bg` on the component. This provides a way to apply styles using the utility props directly to the styled component.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.buttonBox`\n  border-radius: md;\n  font-weight: semibold;\n  transition: default;\n  background-color: emerald-500;\n  color: #fff;\n`\n\nfunction App() {\n  return <Button bg=\"red-500\">Danger</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Content Clipping with xstyled in React (JSX)\nDESCRIPTION: This snippet uses the xstyled library in a React component to demonstrate 'overflow=\"visible\"', preventing content from being clipped within a container. It relies on the 'x.div' and 'x.p' components with various utility props for spacing, background, font, and color. Expected input includes potential content longer than the container bounds; output is that overflowing content remains visible. Prerequisites include importing React and xstyled, and usage in a supporting JSX environment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={32} overflow=\"hidden\">\n      <x.div\n        overflow=\"visible\"\n        h={24}\n        px={6}\n        py={2}\n        borderRadius=\"md\"\n        bg=\"light-blue-200\"\n      >\n        <x.p\n          w={{ md: 2 / 3, lg: 1 / 2 }}\n          fontFamily=\"Flow\"\n          lineHeight={5}\n          color=\"light-blue-700\"\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris\n          eleifend rutrum auctor. Phasellus convallis sagittis augue ut ornare.\n          Vestibulum et gravida lectus, sed ultrices sapien. Nullam aliquet elit\n          dui, vitae hendrerit lectus volutpat eget\n        </x.p>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div overflow=\"visible\" h={24}>\n    Lorem ipsum dolor sit amet...\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styling Lists with xstyled Utilities (JSX)\nDESCRIPTION: Example showing how to style an unstyled list (due to Preflight) using `xstyled`'s component syntax (`x.ul`) and utility props. `listStyleType=\"disc\"` adds bullet points, and `listStylePosition=\"inside\"` positions them.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.ul listStyleType=\"disc\" listStylePosition=\"inside\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</x.ul>\n```\n\n----------------------------------------\n\nTITLE: Responsive Font Style Using Object Notation in xstyled\nDESCRIPTION: This snippet illustrates how to apply responsive font style settings using object notation syntax, such as { md: 'italic' }, which applies the style from medium screen sizes onward. It leverages React and xstyled's responsive design features to adapt styles based on viewport size. The component's output varies with screen size, applying italic style at specified breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-style.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<x.p fontStyle={{ md: 'italic' }} >{/* ... */}</x.p>\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items with justifySelf=\"end\" in xstyled React JSX\nDESCRIPTION: Demonstrates aligning a grid item to the end of the inline axis using justifySelf=\"end\" in xstyled React components. Multiple items are rendered where the specified item uses end alignment. Prerequisites include React and xstyled. Inputs are React props; the output is a grid layout with the designated item aligned to the right inline edge.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-self.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"stretch\"\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          h={16}\n          bg={value === 2 ? 'red-500' : 'red-300'}\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          px={4}\n          justifySelf={value === 2 ? 'end' : null}\n        >\n          {value === 2 ? '1' : ''}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"stretch\">\n    {/* ... */}\n    <x.div justifySelf=\"end\">1</x.div>\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Underline Text Decoration in React with xstyled\nDESCRIPTION: Example showing how to apply underline text decoration to a paragraph using xstyled's textDecoration prop. The component uses emerald color styling for the preview.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-decoration.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textDecoration=\"underline\" fontSize=\"xl\" color=\"emerald-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textDecoration=\"underline\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Starting Color in Gradient with xstyled\nDESCRIPTION: Demonstrates how to set the starting color of a gradient using the gradientFrom prop with xstyled components. By default, gradients fade out to transparent.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/gradient-color-stops.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={24} backgroundImage=\"gradient-to-r\" gradientFrom=\"red-500\" />\n  </template>\n  <x.div backgroundImage=\"gradient-to-r\" gradientFrom=\"red-500\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Theme Getters with Arbitrary Value\nDESCRIPTION: This snippet demonstrates the use of the `th` utility to get an arbitrary value from the theme, useful for properties like box-shadow. The example shows how to retrieve a value from `theme.colors.primaryColor` or use `#000` if the value isn't defined.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { th } from '@xstyled/...'\n\nconst Container = styled.div`\n  box-shadow: 0 0 3px ${th('primaryColor', '#000')};\n`\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Styled Bindings for Box Shadows in xstyled\nDESCRIPTION: This example demonstrates how to use xstyled's automatic styled bindings to apply box shadows. The shadow names defined in the theme are automatically bound to the box-shadow CSS attribute.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  box-shadow: lg;\n`\n```\n\n----------------------------------------\n\nTITLE: xstyled rule: Applying transformations with string values (JavaScript)\nDESCRIPTION: Illustrates the xstyled rule that automatic theme-based transformations, such as applying spacing scales, only occur when CSS property values are provided as strings within styled components or the `css` utility. Numeric values are processed by styled-components' default behavior.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Box = styled.div({\n  margin: 2, // '2px' (not transformed by xstyled)\n  marginTop: '2', // '8px' (transformed by xstyled to your defined theme spacing scale)\n})\n```\n\n----------------------------------------\n\nTITLE: Explicitly Adding Utility Props\nDESCRIPTION: This snippet shows how to explicitly add utility props to a styled component using `system` or other utilities as interpolation. It enables the use of styling via the utility props in the styled components, providing flexibility in the way components are styled, like `bg` for background and `fontSize` for font-size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { system, typography } from '@xstyled/styled-components'\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n  ${system}\n`\n\nconst Paragraph = styled.p`\n  ${typography}\n`\n\nfunction App() {\n  return (\n    <>\n      <Button bg=\"red-500\">Danger</Button>\n      <Paragraph fontSize=\"sm\">Hello world!</Paragraph>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Spanning Grid Rows using `gridRow` Prop in xstyled (JSX)\nDESCRIPTION: Demonstrates using the `gridRow=\"span n / span n\"` prop within `x.div` components (powered by xstyled) to make grid items span a specific number of rows. The example sets up a 3-row grid and shows elements spanning 3 and 2 rows respectively.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-row.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateRows={3}\n      gridAutoFlow=\"column\"\n      gap={4}\n      h={64}\n    >\n      <x.div\n        borderRadius=\"md\"\n        bg=\"red-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridRow=\"span 3 / span 3\"\n      >\n        1\n      </x.div>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"red-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridColumn=\"span 2 / span 2\"\n      >\n        2\n      </x.div>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"red-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        gridColumn=\"span 2 / span 2\"\n        gridRow=\"span 2 / span 2\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"grid\" gridTemplateColumns={3} gap={4}>\n    <x.div gridRow=\"span 3 / span 3\">1</x.div>\n    <x.div gridColumn=\"span 2 / span 2\">2</x.div>\n    <x.div gridColumn=\"span 2 / span 2\" gridRow=\"span 2 / span 2\">\n      3\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying overscrollBehavior=\"auto\" with xstyled in JSX\nDESCRIPTION: This snippet demonstrates using the overscrollBehavior=\"auto\" prop on a styled <x.div> component from xstyled to allow continuous scrolling into a parent scroll area when the boundary of the child scroll area is reached. It includes overflow, height, background, color, padding, font, and border radius styles to configure the scroll container visually. The input is the overscrollBehavior prop set to \"auto\", and the output is a scrollable container that enables scrolling propagation to parent containers. Dependencies include React and the xstyled library providing the <x.div> component.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overscroll-behavior.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      overscrollBehavior=\"auto\"\n      overflow=\"auto\"\n      h={32}\n      bg=\"emerald-200\"\n      color=\"emerald-500\"\n      px={6}\n      py={4}\n      fontWeight=\"medium\"\n      fontFamily=\"Flow\"\n      borderRadius=\"lg\"\n    >\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris eleifend\n        rutrum auctor. Phasellus convallis sagittis augue ut ornare. Vestibulum\n        et gravida lectus, sed ultrices sapien. Nullam aliquet elit dui, vitae\n        hendrerit lectus volutpat eget. In porttitor tincidunt egestas.\n        Pellentesque laoreet ligula at est vulputate facilisis. Etiam tristique\n        justo ut odio placerat ornare. Cras bibendum, orci at ornare tincidunt,\n        lacus nunc gravida enim, sit amet euismod nunc lectus in lectus. Ut\n        dictum nulla et arcu aliquet ornare. Aliquam et dapibus lectus. Aenean\n        mattis elit mi, sed ultricies augue consectetur id. Sed id magna\n        malesuada, luctus urna a, bibendum tortor. Cras cursus cursus ex. Nulla\n        fringilla elit vitae imperdiet scelerisque. Donec ac sem eu diam\n        convallis mollis a sed leo. Proin congue augue turpis, eget rutrum dolor\n        ultricies non. Nulla blandit venenatis dapibus. Sed tincidunt mollis\n        elit, quis suscipit nibh eleifend quis. Donec ex lorem, auctor eu rutrum\n        in, blandit id dolor. Nulla molestie arcu turpis. In id felis vulputate,\n        tempor massa eget, malesuada mauris. Quisque fringilla consequat metus,\n        luctus scelerisque leo fringilla vel.\n      </p>\n    </x.div>\n  </template>\n  <x.div overscrollBehavior=\"auto\">Lorem ipsum dolor sit amet...</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Automatic transform Binding in xstyled Styled Components (JavaScript)\nDESCRIPTION: Demonstrates how to automatically bind a named transformation to a styled component using xstyled's tagged template and the transform keyword. Requires xstyled's styled API and proper theme configuration with a named transform such as 'card'. Outputs a Card component with the assigned transform property. This method simplifies reusing transform presets across multiple components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Card = styled.h4`\n  transform: card;\n`\n```\n\n----------------------------------------\n\nTITLE: Accessing Font Sizes in Components with the useFontSize Hook (JavaScript)\nDESCRIPTION: This snippet showcases usage of the useFontSize hook provided by xstyled to programmatically get a font size value inside a functional React component. After importing useFontSize from xstyled, the Title component calls useFontSize with the desired key, such as 'xl', and stores the resolved value. Prerequisites include React and xstyled with hooks enabled. Output is a local variable (fontSize) holding the resolved font size, which can be used further in the component logic.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-size.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFontSize } from '@xstyled/...'\n\nfunction Title() {\n  const fontSize = useFontSize('xl')\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Fixed Line Heights with xstyled (JSX)\nDESCRIPTION: Illustrates setting fixed line heights using numerical values (unitless, interpreted as multiples of the theme's base spacing) or string values with units (e.g., '3rem', '20px') via the `lineHeight` prop on xstyled components. The preview template showcases various fixed values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/line-height.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={8}>\n      {[3, 4, 5, 6, 7, 8, 9, 10, '3rem', '20px'].map((lineHeight) => (\n        <x.dl key={lineHeight} color=\"emerald-700\" overflow=\"hidden\">\n          <x.dt\n            w={16}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n            mb={1}\n          >\n            lineHeight={lineHeight}\n          </x.dt>\n          <x.dd fontSize=\"xl\" lineHeight={lineHeight} m={0}>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda,\n            quia temporibus eveniet a libero incidunt suscipit laborum, rerum\n            accusantium modi quidem, ipsam illum quis sed voluptatum quae eum\n            fugit earum.\n          </x.dd>\n        </x.dl>\n      ))}\n    </x.div>\n  </template>\n  <x.p lineHeight={3}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={4}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={5}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={6}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={7}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={8}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={9}>Lorem ipsum ...</x.p>\n  <x.p lineHeight={10}>Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"3rem\">Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"20px\">Lorem ipsum ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Styling with Emotion css Prop - JSX\nDESCRIPTION: This snippet shows how to apply responsive styles using Emotion's `css` prop by embedding standard CSS media queries within the style object. It defines a base width and then overrides it for screens wider than 768px using the `@media` rule.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n\nconst Button = ({ children }) => {\n  return (\n    <button css={{ width: 200, '@media (min-width: 768px)': { width: 300 } }}>\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling inline-block elements with display=\"inline-block\" in React using XStyled\nDESCRIPTION: This example demonstrates how to apply 'inline-block' display to XStyled components, allowing elements to sit inline while maintaining block properties like width and height. It depicts three inline-block spans within a flex container for inline layout control.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div p={4} spaceX={4} bg=\"rose-300\" borderRadius=\"md\"> <x.div display=\"inline-block\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"rose-500\" px={6} py={4}> 1 </x.div> <x.div display=\"inline-block\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"rose-500\" px={6} py={4}> 2 </x.div> <x.div display=\"inline-block\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"rose-500\" px={6} py={4}> 3 </x.div> </x.div> </template> <x.div spaceX={4}> <x.div display=\"inline-block\">1</x.div> <x.div display=\"inline-block\">2</x.div> <x.div display=\"inline-block\">3</x.div> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: React JSX example demonstrating adjustable column widths with 'col' prop\nDESCRIPTION: This snippet illustrates how to create a three-column layout where the middle column occupies a wider space (50% or 2/3) while others take equal or default widths, showcasing responsive width setting with 'col' and ratios.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\">\n      <x.div row>\n        <x.div col>\n          <x.div\n            bg=\"blue-400\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          >\n            1 of 3\n          </x.div>\n        </x.div>\n        <x.div col={2 / 3}>\n          <x.div\n            bg=\"blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          >\n            2 of 3 (wider)\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div\n            bg=\"blue-400\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          >\n            3 of 3\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col>1 of 3</x.div>\n    <x.div col={2 / 3}>2 of 3 (wider)</x.div>\n    <x.div col>3 of 3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying 'capitalize' textTransform utility in React with xstyled\nDESCRIPTION: Details usage of the 'textTransform=\"capitalize\"' utility to capitalize the first letter of each word, including code examples with styled paragraphs.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-transform.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textTransform=\"capitalize\" fontSize=\"xl\" color=\"amber-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textTransform=\"capitalize\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Cursor Style in React with xstyled (JSX)\nDESCRIPTION: Demonstrates use of xstyled's cursor=\"text\" to present a text selection cursor (I-beam) in a React component. Useful for indicating selectable text regions. Requires xstyled and React; accepts further x.div styling props.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"text\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"fuchsia-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"text\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Rounding Separate Corners using String Values in xstyled JSX\nDESCRIPTION: Shows how to apply border radius to individual corners of an element by providing a space-separated string value to the `borderRadius` prop, following the standard CSS border-radius order (top-left, top-right, bottom-right, bottom-left). The example provides a preview template and the JSX code for different corner combinations. Requires `@xstyled/styled-components`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={2} gridTemplateColumns={{ sm: 2, lg: 4 }}>\n      {['lg 0 0 0', '0 lg 0 0', '0 0 lg 0', '0 0 0 lg'].map((borderRadius) => (\n        <x.div\n          key={borderRadius}\n          p={6}\n          bg=\"amber-500\"\n          color=\"white\"\n          textAlign=\"center\"\n          fontWeight=\"extrabold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius={borderRadius}\n        >\n          {borderRadius}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div borderRadius=\"lg 0 0 0\" />\n  <x.div borderRadius=\"0 lg 0 0\" />\n  <x.div borderRadius=\"0 0 lg 0\" />\n  <x.div borderRadius=\"0 0 0 lg\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Getting Transitions in Components Using useTransition Hook - JavaScript\nDESCRIPTION: This snippet demonstrates retrieving a transition string from the theme using the useTransition hook provided by xstyled. The hook takes a transition name (e.g., 'default') and returns the corresponding transition value, which can be used within any functional React component. Requires importing { useTransition } from @xstyled and is intended for scenarios where dynamic or conditional application of transitions is needed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useTransition } from '@xstyled/...'\n\nfunction Button() {\n  const transition = useTransition('default')\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Flex Items to Start Using alignSelf=\"flex-start\" in xstyled (JSX)\nDESCRIPTION: This snippet aligns an individual flex item to the start of the cross axis using alignSelf=\"flex-start\". It overrides the container's align-items value for that item. Requires installation and import of xstyled in a React setup. The alignSelf parameter determines the vertical positioning for the specific x.div in a flex layout.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-self.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={24} display=\"flex\" alignItems=\"stretch\" spaceX={2}>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"amber-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        alignSelf=\"start\"\n        py={3}\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"amber-600\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"amber-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" alignItems=\"stretch\">\n    <div>1</div>\n    <x.div alignSelf=\"flex-start\">2</x.div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styled Bindings (Automatic) - xstyled (JavaScript)\nDESCRIPTION: Illustrates how xstyled's `styled` function automatically binds transition properties defined in CSS-in-JS to the `transition-property` attribute. Dependencies include importing `styled` from `@xstyled/...`. The key functionality is the automatic binding of transition properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-duration.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  transition-duration: fast-in;\n`\n```\n\n----------------------------------------\n\nTITLE: Applying Monospaced Font Family in React with xstyled\nDESCRIPTION: Example of using fontFamily=\"mono\" to apply a web-safe monospaced font family to a paragraph element. Shows both the preview template and the actual implementation code.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p fontFamily=\"mono\" fontSize=\"xl\" color=\"indigo-700\" textAlign=\"center\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p fontFamily=\"mono\">Computers have lots of memory but no imagination.</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Float Left with xstyled (React)\nDESCRIPTION: This snippet demonstrates floating an image to the left using `float=\"left\"` with the xstyled library. It shows the basic structure of an image and associated text. The `src` prop in `x.img` specifies the image source. This requires the xstyled library and a valid image source to function correctly.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/float.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      <x.img\n        mt={2}\n        mr={10}\n        mb={4}\n        ml={0}\n        h={32}\n        float=\"left\"\n        src=\"/img/placeholder-indigo.svg\"\n      />\n      <x.p\n        color=\"indigo-500\"\n        fontFamily=\"Flow\"\n        textAlign=\"justify\"\n        fontWeight=\"medium\"\n      >\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam venenatis\n        et lorem sit amet vehicula. Etiam vel nibh nec nisi euismod mollis\n        ultrices condimentum velit. Proin velit libero, interdum ac rhoncus sit\n        amet, pellentesque ac turpis. Quisque ac luctus turpis, vel efficitur\n        ante. Cras convallis risus vel vehicula dapibus. Donec eget neque\n        fringilla, faucibus mi quis, porttitor magna. Cras pellentesque leo est,\n        et luctus neque rutrum eu. Aliquam consequat velit sed sem posuere,\n        vitae sollicitudin mi consequat. Mauris eget ipsum sed dui rutrum\n        fringilla. Donec varius vehicula magna sit amet auctor. Ut congue\n        vehicula lectus in blandit. Vivamus suscipit eleifend turpis, nec\n        sodales sem vulputate a. Curabitur pulvinar libero viverra, efficitur\n        odio eu, finibus justo. Etiam eu vehicula felis.\n      </x.p>\n    </>\n  </template>\n  <x.img float=\"left\" src=\"path/to/image.jpg\" />\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam venenatis et\n    lorem sit amet vehicula. Etiam vel nibh nec nisi euismod mollis ultrices\n    condimentum velit. Proin velit libero, interdum ac rhoncus sit amet,\n    pellentesque ac turpis. Quisque ac luctus turpis, vel efficitur ante. Cras\n    convallis risus vel vehicula dapibus. Donec eget neque fringilla, faucibus\n    mi quis, porttitor magna. Cras pellentesque leo est, et luctus neque rutrum\n    eu. Aliquam consequat velit sed sem posuere, vitae sollicitudin mi\n    consequat. Mauris eget ipsum sed dui rutrum fringilla. Donec varius vehicula\n    magna sit amet auctor. Ut congue vehicula lectus in blandit. Vivamus\n    suscipit eleifend turpis, nec sodales sem vulputate a. Curabitur pulvinar\n    libero viverra, efficitur odio eu, finibus justo. Etiam eu vehicula felis.\n  </p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Whitespace in xstyled\nDESCRIPTION: This snippet illustrates how to use responsive object notation to set the whitespace property at a specific breakpoint in xstyled.  It applies `whiteSpace=\"pre\"` at medium screen sizes and above. The primary dependency is xstyled's responsive design features.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/whitespace.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div whiteSpace={{ md: 'pre' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Letter Spacing with xstyled\nDESCRIPTION: Illustrates the application of letter spacing utilities responsively using xstyled's object notation. The `letterSpacing={{ md: 'wide' }}` prop applies the 'wide' letter spacing value specifically at the 'md' breakpoint and above. Requires xstyled's responsive design features.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/letter-spacing.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div letterSpacing={{ md: 'wide' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Installing @xstyled/system package with npm (Bash)\nDESCRIPTION: Installs the @xstyled/system package from the npm registry into the current project's dependencies. Requires npm and Node.js to be installed. Runs in the project's terminal.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/system/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstyled/system\n```\n\n----------------------------------------\n\nTITLE: Using divideColor with responsive design in xstyled\nDESCRIPTION: This snippet demonstrates using responsive design for the `divideColor` property. It shows how to apply a specific color based on screen size, using an object notation with breakpoints (e.g., `md`). Dependencies include xstyled and React. The input is a configuration object specifying colors at different breakpoints; the output is responsive styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-color.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div divideColor={{ md: 'red-500' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Box Shadows Using the multiple Option (JavaScript)\nDESCRIPTION: Demonstrates the use of the new 'multiple' option to apply multiple comma-separated values to style properties (e.g., 'box-shadow') in xstyled v3+. The code shows an example of a div with two box-shadow styles. Dependencies: @xstyled/core. Parameters: boxShadow (string), where values are separated by commas. Input: Comma-separated string of shadow names; Output: Renders a div with multiple box-shadow styles. Limitations: Named shadows must be defined in the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<x.div boxShadow=\"light-shadow, big-shadow\" />\n```\n\n----------------------------------------\n\nTITLE: Using xstyled JSX Pragma - JS\nDESCRIPTION: This snippet shows the basic usage of the `/** @jsx jsx */` comment and importing `jsx` from `@xstyled/emotion`. This is necessary to enable the `css` prop syntax provided by `@xstyled/emotion` without a Babel plugin.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-emotion.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@xstyled/emotion'\n\nconst Button = ({ children }) => {\n  return (\n    <button\n      css={{\n        paddingTop: 2,\n        color: 'white',\n        borderRadius: 'md',\n      }}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating inline elements with display=\"inline\" in React using XStyled\nDESCRIPTION: This snippet showcases assigning 'inline' to the display property of XStyled components, making elements flow inline with surrounding content. It includes three inline elements within a flex container for inline text or icon layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div m={4} spaceX={4} bg=\"amber-300\" borderRadius=\"md\"> <x.div display=\"inline\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"amber-500\" px={6} py={4}> 1 </x.div> <x.div display=\"inline\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"amber-500\" px={6} py={4}> 2 </x.div> <x.div display=\"inline\" borderRadius=\"md\" color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"amber-500\" px={6} py={4}> 3 </x.div> </x.div> </template> <x.div spaceX={4}> <x.div display=\"inline\">1</x.div> <x.div display=\"inline\">2</x.div> <x.div display=\"inline\">3</x.div> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Background Attachment in xstyled (React)\nDESCRIPTION: This code snippet demonstrates how to set the background attachment property to \"fixed\" using xstyled. The `backgroundAttachment=\"fixed\"` prop is applied to an x.div component. This will fix the background image relative to the viewport. The component also sets `backgroundSize`, `backgroundPosition`, and `backgroundImage` for the background image and creates a scrollable area within the div. Requires the xstyled library and an image URL. The output is a div with a fixed background image.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-attachment.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={1}\n      h={48}\n      backgroundAttachment=\"fixed\"\n      backgroundSize=\"contain\"\n      backgroundPosition=\"center\"\n      overflowY=\"scroll\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&h=800&q=80')\"\n    >\n      <x.div h={64} />\n    </x.div>\n  </template>\n  <x.div backgroundAttachment=\"fixed\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Utility: Bottom in xstyled React Components\nDESCRIPTION: Examples using 'verticalAlign=\"bottom\"' to align bottoms of elements and descendants with the entire line. Visualized with dashed borders to demonstrate bottom alignment in styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div lineHeight=\"none\" position=\"relative\">\n      <x.span w={0} h={8} display=\"inline-block\" verticalAlign=\"bottom\">\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"red-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={8}\n        />\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"red-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={4}\n        />\n      </x.span>\n      <x.span\n        position=\"relative\"\n        zIndex={10}\n        color=\"red-700\"\n        fontWeight=\"medium\"\n      >\n        Computers have lots of memory but no imagination.\n      </x.span>\n    </x.div>\n  </template>\n  <x.span display=\"inline-block\" verticalAlign=\"bottom\">\n    ...\n  </x.span>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useFontWeight Hook in xstyled (JS)\nDESCRIPTION: This JavaScript snippet demonstrates the use of the `useFontWeight` hook to access font weight values within a functional React component.  The hook is imported from `@xstyled/...` and takes the font weight string as an argument. It retrieves the font weight to be used inside a component. It assumes xstyled is set up and functioning, and uses the given arguments to provide a function to be used in components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-weight.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { useFontWeight } from '@xstyled/...'\n\nfunction Title() {\n  const fontWeight = useFontWeight('semibold')\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Border Widths Using xstyled divideY Utility in React JSX\nDESCRIPTION: Illustrates usage of responsive object notation with the divideY prop to control border widths at specific breakpoints. The example applies a vertical border width of 2 units at medium screen sizes and above. This feature depends on xstyled's responsive design capabilities and React. The input includes a responsive object for divideY, and the output applies border widths conditionally based on viewport size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-width.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div divideY={{ md: 2 }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Using listStyleType prop with various values in xstyled (JSX)\nDESCRIPTION: Example demonstrating how to apply different list style types (disc, decimal, circle, square, none) to unordered lists using xstyled. The example includes a preview template that generates multiple list examples with different styles.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/list-style-type.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={8}>\n      {['disc', 'decimal', 'circle', 'square', 'none'].map((listStyleType) => (\n        <x.dl key={listStyleType} color=\"pink-700\" overflow=\"hidden\">\n          <x.dt\n            w={16}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n            mb={1}\n          >\n            listStyleType={listStyleType}\n          </x.dt>\n          <x.dd fontSize=\"xl\" m={0}>\n            <x.ul my={0} listStyleType={listStyleType}>\n              <li>Lorem ipsum dolor sit amet, consectetur adipisicing elit</li>\n              <li>\n                Assumenda, quia temporibus eveniet a libero incidunt suscipit\n              </li>\n              <li>\n                Quidem, ipsam illum quis sed voluptatum quae eum fugit earum\n              </li>\n            </x.ul>\n          </x.dd>\n        </x.dl>\n      ))}\n    </x.div>\n  </template>\n  {/* inline styles required to override smooth-doc */}\n  <x.ul listStyleType=\"disc\" style=\"list-style-type: disc\">\n    <li>Lorem ipsum ...</li>\n  </x.ul>\n  <x.ul listStyleType=\"decimal\" style=\"list-style-type: decimal\">\n    <li>Lorem ipsum ...</li>\n  </x.ul>\n  <x.ul listStyleType=\"circle\" style=\"list-style-type: circle\">\n    <li>Lorem ipsum ...</li>\n  </x.ul>\n  <x.ul listStyleType=\"square\" style=\"list-style-type: circle\">\n    <li>Lorem ipsum ...</li>\n  </x.ul>\n  <x.ul listStyleType=\"none\" style=\"list-style-type: none\">\n    <li>Lorem ipsum ...</li>\n  </x.ul>\n</>\n```\n\n----------------------------------------\n\nTITLE: Configuring States in xstyled Theme (JavaScript)\nDESCRIPTION: Shows how to extend xstyled's theme configuration to define or customize pseudo-state selectors such as ':hover'. This example directly edits the exported theme object with a states property mapping logical state names to CSS selectors. Dependencies: none (plain JS object), but intended for @xstyled/theme or styled-components ThemeProvider context. Inputs: theme object. Output: Provides pseudo-state selectors to the xstyled system. Limitation: Custom states require knowledge of CSS selectors.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const theme = {\n  states: {\n    hover: '&:hover',\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Justify Grid Items Using 'stretch' in xstyled (JSX)\nDESCRIPTION: Illustrates how to use `justifyItems=\"stretch\"` to stretch grid items along their inline axis using xstyled in React. The 3-column grid contains six purple-background items with rounded corners and centered white text. This snippet expects React and xstyled components to render styled grids effectively.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-items.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"stretch\"\n      h={32}\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          bg=\"purple-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"stretch\">\n    <div>1</div>\n    {/* ... */}\n    <div>6</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Min-Width Values with xstyled Components (React, JSX)\nDESCRIPTION: This snippet presents how to apply fixed min-width values, including numbers (interpreted as px) and strings with explicit units (e.g., px, rem, ex), to xstyled <x.div> components in React. The code iterates over sample values, rendering each variant with demonstration styles to visualize the effect. Requires xstyled setup and React. Inputs include fixed numbers and unit strings, and output renders the min-width accordingly. Accepts any valid CSS min-width value; non-numeric strings must specify units explicitly.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-width.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4} mx=\"auto\" w={64}>\n      {[123, '12px', '4rem', '3ex'].map((v) => (\n        <x.div key={v} display=\"flex\" alignItems=\"center\" spaceX={4}>\n          <x.p fontSize=\"sm\" color=\"emerald-600\" w={24} textAlign=\"right\">\n            minWidth={v}\n          </x.p>\n          <x.div\n            h={8}\n            minWidth={v}\n            borderRadius=\"md\"\n            bg=\"emerald-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div minWidth={123} w={0} />\n    <x.div minWidth=\"12px\" w={0} />\n    <x.div minWidth=\"4rem\" w={0} />\n    <x.div minWidth=\"3ex\" w={0} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Renaming Default Color Mode xstyled JavaScript\nDESCRIPTION: Explains how to rename the conceptual 'default' color mode, which is defined by the colors at the root level of the `theme.colors` object. Using the `initialColorModeName` property allows you to assign a custom name (like 'light') to this base mode instead of implicitly referring to it as 'default'.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  initialColorModeName: 'light',\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0cf',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Overflow with Clip in xstyled React Component\nDESCRIPTION: This snippet shows how to truncate text at its content boundary using 'textOverflow=\"clip\"'. It includes styling similar to the ellipsis example, demonstrating how text can be clipped without ellipsis, suitable for cases where overflow should simply hide extra text.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-overflow.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.p\n      textOverflow=\"clip\"\n      overflow=\"hidden\"\n      maxWidth=\"xs\"\n      px={6}\n      py={4}\n      mx=\"auto\"\n      bg=\"light-blue-200\"\n      color=\"light-blue-700\"\n      fontWeight=\"medium\"\n      borderRadius=\"lg\"\n    >\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n      Blanditiisitaquequodpraesentiumexplicaboincidunt? Dolores beatae nam at\n      sed dolorum ratione dolorem nisi velit cum.\n    </x.p>\n  </template>\n  <x.p textOverflow=\"clip\" overflow=\"hidden\">\n    ...\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Justify Self Alignment in xstyled React JSX\nDESCRIPTION: Explains how to apply the justifySelf prop responsively using an object with breakpoint keys in xstyled. For example, justifySelf={{ md: 'center' }} applies center alignment at medium screen sizes and larger. The snippet shows a simple grid container with responsive alignment applied. Requires React and xstyled. Input is a responsive object; output uses CSS media queries to adapt item alignment at breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-self.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" justifySelf={{ md: 'center' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Automatic Line Height Binding with xstyled's `styled` (JavaScript)\nDESCRIPTION: Demonstrates how xstyled's `styled` function automatically binds theme line height values (like 'loose') specified in template literals to the corresponding CSS `line-height` property.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/line-height.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Title = styled.h4`\n  line-height: loose;\n`\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font Family in React with xstyled\nDESCRIPTION: Example of using fontFamily with a custom font name (\"arial\") to apply a specific font family to a paragraph element. The example shows both preview template and implementation code.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p fontFamily=\"arial\" fontSize=\"xl\" color=\"rose-700\" textAlign=\"center\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p fontFamily=\"arial\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Custom Properties xstyled JavaScript\nDESCRIPTION: Instructs how to turn off the use of CSS custom properties (CSS variables) for implementing color modes by adding `useCustomProperties: false` to the theme. This is useful for supporting older browsers that lack support for CSS variables, but be aware that it may cause a flash of incorrect styling on initial page load with SSR or static generation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// example theme colors\n{\n  useCustomProperties: false,\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#07c',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0cf',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Width in React\nDESCRIPTION: Example demonstrating how to make an element span the entire width of the viewport using 100vw value.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div h={12} w=\"100vw\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Divider Style with xstyled in JSX\nDESCRIPTION: This JSX snippet shows how to make the `divideStyle` property responsive using xstyled's object-based syntax. Applying `{ md: 'dashed' }` ensures that the `dashed` border style is only active when the viewport meets or exceeds the medium ('md') breakpoint, allowing for style adjustments based on screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-style.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div divideStyle={{ md: 'dashed' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Grid Auto Rows with xstyled (JSX)\nDESCRIPTION: Illustrates using xstyled's responsive object notation to set the `gridAutoRows` property based on screen breakpoints. The prop value is an object where keys represent breakpoints (e.g., `md`) and values are the desired `grid-auto-rows` CSS values for those breakpoints and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-auto-rows.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridAutoRows={{ md: 'max-content' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: React Component Demonstration of Scaled Max-Height Utility\nDESCRIPTION: This snippet demonstrates the use of scaled maxHeight values, which automatically map theme sizes to the max-height CSS property, with support for suffix 's' to distinguish scaled values. It showcases a visual comparison of different scale values, integrating theme sizes for consistent styling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-height.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\ndisplay=\"flex\"\njustifyContent=\"space-around\"\nalignItems=\"flex-end\"\nmx=\"auto\"\n>\n      {['1s', 8, 12, 16, 24].map((v) => (\n        <x.div\n          key={v}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          position=\"relative\"\n          spaceY={4}\n        >\n          <x.div\n            h={32}\n            bg=\"cool-gray-300\"\n            borderRadius=\"md\"\n            display=\"flex\"\n            alignItems=\"flex-end\"\n          >\n            <x.div\n              w={8}\n              maxHeight={v}\n              h={32}\n              borderRadius=\"md\"\n              bg=\"light-blue-500\"\n              color=\"white\"\n              fontSize=\"2xl\"\n              fontWeight=\"extrabold\"\n            />\n          </x.div>\n          <x.p fontSize=\"sm\" color=\"light-blue-600\" textAlign=\"right\">\n            maxHeight={v}\n          </x.p>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div maxHeight=\"1s\" h={32} />\n    <x.div maxHeight={8} h={32} />\n    <x.div maxHeight={12} h={32} />\n    <x.div maxHeight={16} h={32} />\n    <x.div maxHeight={24} h={32} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Relative Line Heights with xstyled (JSX)\nDESCRIPTION: Demonstrates using predefined string keywords ('none', 'tight', 'snug', 'normal', 'relaxed', 'loose') with the `lineHeight` prop on xstyled components (`x.p`, `x.dd`) to set relative line heights based on the element's font size. The preview template iterates through these keywords to show their effect.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/line-height.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={8}>\n      {['none', 'tight', 'snug', 'normal', 'relaxed', 'loose'].map(\n        (lineHeight) => (\n          <x.dl key={lineHeight} color=\"light-blue-700\" overflow=\"hidden\">\n            <x.dt\n              w={16}\n              flexShrink={0}\n              fontSize=\"sm\"\n              opacity={0.8}\n              fontFamily=\"mono\"\n              mb={1}\n            >\n              lineHeight={lineHeight}\n            </x.dt>\n            <x.dd fontSize=\"xl\" lineHeight={lineHeight} m={0}>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Assumenda, quia temporibus eveniet a libero incidunt suscipit\n              laborum, rerum accusantium modi quidem, ipsam illum quis sed\n              voluptatum quae eum fugit earum.\n            </x.dd>\n          </x.dl>\n        ),\n      )}\n    </x.div>\n  </template>\n  <x.p lineHeight=\"none\">Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"tight\">Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"snug\">Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"normal\">Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"relaxed\">Lorem ipsum ...</x.p>\n  <x.p lineHeight=\"loose\">Lorem ipsum ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Alignment Using Flexbox JustifyContent in xstyled JSX\nDESCRIPTION: This snippet showcases how to horizontally align columns within a row using the \"justifyContent\" flexbox property via xstyled's JSX components. Various values such as \"flex-start\", \"center\", \"flex-end\", \"space-around\", and \"space-between\" are demonstrated. It creates rows containing columns sized at one third width, each containing a styled div. Dependencies include React and xstyled, with input parameters being the \"justifyContent\" property on the row and column size. This enables flexible control over column horizontal positioning.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      bg=\"light-blue-200\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n      borderRadius=\"md\"\n    >\n      <x.div row justifyContent=\"flex-start\">\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n      </x.div>\n      <x.div row justifyContent=\"center\">\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n      </x.div>\n      <x.div row justifyContent=\"flex-end\">\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n      </x.div>\n      <x.div row justifyContent=\"space-around\">\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n      </x.div>\n      <x.div row justifyContent=\"space-between\">\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n        <x.div col={1 / 3}>\n          <x.div\n            bg=\"light-blue-500\"\n            py={2}\n            textAlign=\"center\"\n            borderRadius=\"md\"\n          />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row justifyContent=\"flex-start\">\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} />\n  </x.div>\n  <x.div row justifyContent=\"center\">\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} />\n  </x.div>\n  <x.div row justifyContent=\"flex-end\">\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} />\n  </x.div>\n  <x.div row justifyContent=\"space-around\">\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} />\n  </x.div>\n  <x.div row justifyContent=\"space-between\">\n    <x.div col={1 / 3} />\n    <x.div col={1 / 3} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying 'none' textTransform utility in React with xstyled\nDESCRIPTION: Shows how to reset text casing to original with 'textTransform=\"none\"' using the xstyled library in React. Includes example code with a paragraph component demonstrating the utility.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-transform.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textTransform=\"none\" fontSize=\"xl\" color=\"emerald-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textTransform=\"none\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Adding borders between child elements with divide utilities in React xstyled\nDESCRIPTION: This example demonstrates how to create dividing lines between child elements using divideY and divideColor utilities. It enhances component separation visually within a parent container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-width.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div divideY divideColor=\"light-blue-400\">\n      <x.div\n        p={4}\n        color=\"light-blue-800\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        p={4}\n        color=\"light-blue-800\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        p={4}\n        color=\"light-blue-800\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div divideY divideColor=\"light-blue-400\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Template Areas in React using xstyled\nDESCRIPTION: This snippet demonstrates how to structure a grid layout with named areas using xstyled in React. It includes setting up a grid container with specific template areas and placing items within this grid by assigning gridArea identifiers. It requires the xstyled library and React environment. The example highlights property setup, styling, and responsiveness considerations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-areas.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      gridTemplateAreas='\"a a a\" \"b b c\"'\n    >\n      <x.div\n        gridArea=\"a\"\n        h={12}\n        borderRadius=\"md\"\n        bg=\"fuchsia-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        A\n      </x.div>\n      <x.div\n        gridArea=\"b\"\n        h={12}\n        borderRadius=\"md\"\n        bg=\"fuchsia-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        B\n      </x.div>\n      <x.div\n        gridArea=\"c\"\n        h={12}\n        borderRadius=\"md\"\n        bg=\"fuchsia-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        C\n      </x.div>\n    </x.div>\n  </template>\n  <x.div\n    display=\"grid\"\n    gridTemplateColumns={3}\n    gridTemplateAreas='\"a a a\" \"b b c\"'\n  >\n    <x.div gridArea=\"a\">A</x.div>\n    <x.div gridArea=\"b\">B</x.div>\n    <x.div gridArea=\"c\">C</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive pointerEvents Utility in React JSX using styled-components xstyled\nDESCRIPTION: Illustrates how to apply the pointerEvents property responsively using styled-components xstyled by passing an object with breakpoint keys. This snippet sets pointerEvents to 'none' starting from the medium screen size breakpoint ('md'). It demonstrates usage of responsive design features in xstyled. Dependencies include React and styled-components xstyled, with expected input as JSX props and output as responsive inline styles controlling pointer event behavior.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/pointer-events.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div pointerEvents={{ md: 'none' }} />\n```\n\n----------------------------------------\n\nTITLE: Align Content in xstyled: 'space-around' Distribution Strategy\nDESCRIPTION: This snippet illustrates the use of alignContent='space-around' to evenly distribute rows with equal space around each line. It employs React components styled with xstyled, providing a visual example with varied background colors to highlight the spacing effect.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-content.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={48}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignContent=\"space-around\"\n      bg=\"light-blue-200\"\n      borderRadius=\"md\"\n    >\n      {Array.from({ length: 5 }, (_, index) => index + 1).map((value) => (\n        <x.div key={value} w={1 / 3} p={2}>\n          <x.div\n            p={2}\n            borderRadius=\"md\"\n            bg=\"light-blue-500\"\n            color=\"white\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          >\n            {value}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div h={48} display=\"flex\" flexWrap=\"wrap\" alignContent=\"space-around\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n    <div>4</div>\n    <div>5</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: React Component Demonstration of Fixed Max-Height Utility\nDESCRIPTION: This snippet illustrates specifying fixed maxHeight values using numbers (converted to pixels) or strings with units like 'px', 'rem', or 'ex'. It demonstrates setting explicit max-height constraints on components with various units to control layout dimensions precisely.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-height.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {[110, '12px', '4rem', '3ex'].map((v) => (\n        <x.div\n          key={v}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          position=\"relative\"\n          spaceY={4}\n        >\n          <x.div\n            h={32}\n            bg=\"cool-gray-300\"\n            borderRadius=\"md\"\n            display=\"flex\"\n            alignItems=\"flex-end\"\n          >\n            <x.div\n              w={8}\n              maxHeight={v}\n              h={32}\n              borderRadius=\"md\"\n              bg=\"emerald-500\"\n              color=\"white\"\n              fontSize=\"2xl\"\n              fontWeight=\"extrabold\"\n            />\n          </x.div>\n          <x.p fontSize=\"sm\" color=\"emerald-600\" w={24} textAlign=\"right\">\n            maxHeight={v}\n          </x.p>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div maxHeight={110} h={32} />\n    <x.div maxHeight=\"12px\" h={32} />\n    <x.div maxHeight=\"4rem\" h={32} />\n    <x.div maxHeight=\"3ex\" h={32} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying margin to all sides using xstyled\nDESCRIPTION: Demonstrates the usage of the `m` prop to apply the same margin equally to all four sides (top, right, bottom, left) of an element. A value like `m={8}` applies the configured space unit (e.g., 2rem) uniformly around the element.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/margin.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div bg=\"fuchsia-300\" borderRadius=\"md\" overflow=\"hidden\" p={8}>\n        <x.div bg=\"fuchsia-600\" py={3} px={4}>\n          m=8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div m={8}>m=8</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Justify Grid Items Using 'auto' in xstyled (JSX)\nDESCRIPTION: Demonstrates the use of `justifyItems=\"auto\"` prop on an xstyled grid container to automatically justify grid items along their inline axis. This example shows a 3-column grid with 6 items styled with emerald backgrounds, centered content, and extra-bold large fonts. The snippet uses JSX and requires xstyled's `x.div` component with grid display and gridTemplateColumns properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/justify-items.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      gap={4}\n      justifyItems=\"auto\"\n      h={32}\n    >\n      {Array.from({ length: 6 }, (_, index) => index + 1).map((value) => (\n        <x.div\n          key={value}\n          borderRadius=\"md\"\n          bg=\"emerald-500\"\n          color=\"white\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n        >\n          {value}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"grid\" justifyItems=\"auto\">\n    <div>1</div>\n    {/* ... */}\n    <div>6</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Heights with Units in xstyled React Components - JSX\nDESCRIPTION: Demonstrates usage of the h property with various fixed unit values including plain numbers (converted to px), px, rem, and ex. Requires xstyled and React for mapping over values. Inputs are both numbers and strings representing different CSS units; the output visually displays each height variant.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/height.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {[123, '12px', '4rem', '3ex'].map((v) => (\n        <x.div\n          key={v}\n          spaceY={4}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <x.div\n            w={8}\n            h={v}\n            borderRadius=\"md\"\n            bg=\"emerald-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n          <x.p fontSize=\"sm\" color=\"emerald-600\" textAlign=\"center\">\n            h={v}\n          </x.p>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div h={123} />\n    <x.div h=\"12px\" />\n    <x.div h=\"4rem\" />\n    <x.div h=\"3ex\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Apply All-Direction Scroll Always - xstyled JSX\nDESCRIPTION: Illustrates the use of the `overflow=\"scroll\"` property on an `x.div`. Unlike `overflow=\"auto\"`, this setting ensures both horizontal and vertical scrollbars are always present, regardless of content overflow, though OS settings might override this. The example includes a preview with lengthy content and a basic usage.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/overflow.mdx#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={32} overflow=\"hidden\">\n      <x.div\n        overflow=\"scroll\"\n        h={32}\n        px={6}\n        py={2}\n        borderRadius=\"md\"\n        bg=\"rose-200\"\n      >\n        <x.p\n          display=\"inline-block\"\n          fontFamily=\"Flow\"\n          lineHeight={5}\n          color=\"rose-700\"\n          px={6}\n          py={4}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          QrLmmW69vMQDtCOg48jidqvvWD2FzDt7I7bBoDc98SRP5OwvOScVYbRzFdfp540eF5v1pjogYkyI8NXqu4wY8chgsXIV0LU7XQKWJ98wLaBSHWiBhvkEU1T3sd6KEFo53CLjVjIz8UvZajb8sbsu62xTsF9cRtFdwEvusq6zJHvedymDCUkY6.\n          Mauris eleifend rutrum auctor. Phasellus convallis sagittis augue ut\n          ornare. Vestibulum et gravida lectus, sed ultrices sapien. Nullam\n          aliquet elit dui, vitae hendrerit lectus volutpat eget. In porttitor\n          tincidunt egestas. Pellentesque laoreet ligula at est vulputate\n          facilisis. Etiam tristique justo ut odio placerat ornare. Cras\n          bibendum, orci at ornare tincidunt, lacus nunc gravida enim, sit amet\n          euismod nunc lectus in lectus. Ut dictum nulla et arcu aliquet ornare.\n          Aliquam et dapibus lectus. Aenean mattis elit mi, sed ultricies augue\n          consectetur id. Sed id magna malesuada, luctus urna a, bibendum\n          tortor. Cras cursus cursus ex. Nulla fringilla elit vitae imperdiet\n          scelerisque. Donec ac sem eu diam convallis mollis a sed leo. Proin\n          congue augue turpis, eget rutrum dolor ultricies non. Nulla blandit\n          venenatis dapibus. Sed tincidunt mollis elit, quis suscipit nibh\n          eleifend quis. Donec ex lorem, auctor eu rutrum in, blandit id dolor.\n          Nulla molestie arcu turpis. In id felis vulputate, tempor massa eget,\n          malesuada mauris. Quisque fringilla consequat metus, luctus\n          scelerisque leo fringilla vel.\n        </x.p>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div overflow=\"scroll\" h={32}>\n    Lorem ipsum dolor sit amet...\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Align Content Utility in xstyled for React: 'flex-end' Alignment\nDESCRIPTION: This snippet shows how to align flex rows toward the end of the cross axis using alignContent='flex-end'. It uses React JSX components styled with xstyled to visually demonstrate rows packed at the bottom of the container with different background colors.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-content.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={48}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignContent=\"flex-end\"\n      bg=\"emerald-200\"\n      borderRadius=\"md\"\n    >\n      {Array.from({ length: 5 }, (_, index) => index + 1).map((value) => (\n        <x.div key={value} w={1 / 3} p={2}>\n          <x.div\n            p={2}\n            borderRadius=\"md\"\n            bg=\"emerald-500\"\n            color=\"white\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          >\n            {value}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div h={48} display=\"flex\" flexWrap=\"wrap\" alignContent=\"flex-end\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n    <div>4</div>\n    <div>5</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Fluid Width with Fractions and Percentages in React\nDESCRIPTION: Interactive example demonstrating fluid width options using fractions, decimal values, and calc expressions that are converted to percentages.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={6}>\n      {[\n        [\n          ['1/2', 1 / 2],\n          ['1/2', 1 / 2],\n        ],\n        [\n          ['2/5', 2 / 5],\n          ['3/5', 3 / 5],\n        ],\n        [\n          ['0.2', 0.2],\n          ['0.8', 0.8],\n        ],\n        [\n          ['calc(50% - 40px)', 'calc(50% - 40px)'],\n          ['calc(50% + 40px)', 'calc(50% + 40px)'],\n        ],\n      ].map((v, i) => (\n        <x.div\n          key={i}\n          display=\"flex\"\n          borderRadius=\"md\"\n          overflow=\"hidden\"\n          color=\"white\"\n          fontFamily=\"mono\"\n        >\n          <x.div w={v[0][1]} px={2} py={4} bg=\"rose-400\" textAlign=\"center\">\n            w={v[0][0]}\n          </x.div>\n          <x.div w={v[1][1]} px={2} py={4} bg=\"rose-500\" textAlign=\"center\">\n            w={v[1][0]}\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div w={1 / 2}>w=1/2</x.div>\n    <x.div w={1 / 2}>w=1/2</x.div>\n  </x.div>\n  <x.div display=\"flex\">\n    <x.div w={2 / 5}>w=2/5</x.div>\n    <x.div w={3 / 5}>w=3/5</x.div>\n  </x.div>\n  <x.div display=\"flex\">\n    <x.div w={0.2}>w=0.2</x.div>\n    <x.div w={0.8}>w=0.8</x.div>\n  </x.div>\n  <x.div display=\"flex\">\n    <x.div w=\"calc(50% - 40px)\">w=calc(50% - 40px)</x.div>\n    <x.div w=\"calc(50% + 40px)\">w=calc(50% + 40px)</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating a flow-root container with display=\"flow-root\" in React using XStyled\nDESCRIPTION: This snippet illustrates usage of the CSS 'flow-root' value in XStyled to create a block container establishing a new block formatting context, aiding in overflow and float management. It showcases React components with nested 'flow-root' divs for layout control.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<><template preview> <x.div spaceY={4}> <x.div display=\"flow-root\" bg=\"purple-300\" borderRadius=\"md\"> <x.div my={4} color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"purple-500\" p={6}> 1 </x.div> </x.div> <x.div display=\"flow-root\" bg=\"purple-300\" borderRadius=\"md\"> <x.div my={4} color=\"white\" fontWeight=\"extrabold\" textAlign=\"center\" bg=\"purple-500\" p={6}> 2 </x.div> </x.div> </x.div> </template> <x.div spaceY={4}> <x.div display=\"flow-root\"> <x.div my={4}>1</x.div> </x.div> <x.div display=\"flow-root\"> <x.div my={4}>2</x.div> </x.div> </x.div></>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cursor Style in React with xstyled (JSX)\nDESCRIPTION: This snippet shows how to apply cursor=\"default\" using xstyled's x.div component in React. This prop enforces the platform's default cursor (usually an arrow) regardless of the context. It relies on xstyled and React libraries, with support for standard x.div props for stylistic adjustments.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"default\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"amber-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"default\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Max-Width Values in xstyled React Components (JSX)\nDESCRIPTION: Illustrates usage of the maxWidth prop with fixed width values in xstyled React components. The snippet accepts numbers which are converted to pixels and strings specifying other CSS units such as 'px', 'rem', and 'ex'. This enables applying precise fixed max-width CSS properties beyond theme scales for diverse layout control.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-width.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4} mx=\"auto\" w={64}>\n      {[110, '12px', '4rem', '3ex'].map((v) => (\n        <x.div key={v} display=\"flex\" alignItems=\"center\" spaceX={4}>\n          <x.p fontSize=\"sm\" color=\"emerald-600\" w={24} textAlign=\"right\">\n            maxWidth={v}\n          </x.p>\n          <x.div\n            w={32}\n            bg=\"cool-gray-300\"\n            borderRadius=\"md\"\n            display=\"flex\"\n            alignItems=\"flex-end\"\n          >\n            <x.div\n              h={8}\n              maxWidth={v}\n              w={1}\n              borderRadius=\"md\"\n              bg=\"emerald-500\"\n              color=\"white\"\n              fontSize=\"2xl\"\n              fontWeight=\"extrabold\"\n            />\n          </x.div>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div maxWidth={110} w={32} />\n    <x.div maxWidth=\"12px\" w={32} />\n    <x.div maxWidth=\"4rem\" w={32} />\n    <x.div maxWidth=\"3ex\" w={32} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Resizing Textarea Horizontally with xstyled (JSX)\nDESCRIPTION: Illustrates using the `resize=\"horizontal\"` prop on an `x.textarea` component to allow only horizontal resizing. Includes a preview template for visual context.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/resize.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.textarea\n      resize=\"horizontal\"\n      border\n      borderColor=\"gray-300\"\n      borderRadius\n    />\n  </template>\n  <x.textarea resize=\"horizontal\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Alignment Control in Flex Containers\nDESCRIPTION: This snippet illustrates how to set dynamic 'alignItems' properties at specific breakpoints using responsive object notation. For example, applying 'alignItems: &quot;center&quot;' at medium screen sizes and above enables adaptive layout adjustments for better responsiveness.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-items.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" alignItems={{ md: 'center' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Integrating Color Modes with Gatsby SSR xstyled JavaScript\nDESCRIPTION: Provides the necessary configuration for integrating xstyled color modes with Gatsby's Server-Side Rendering (SSR). By adding this code to `gatsby-ssr.js`, the `getColorModeInitScriptElement` is injected into the page's body before the main content, which is crucial for preventing a flash of incorrect colors on initial load.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { getColorModeInitScriptElement } from '@xstyled/styled-components'\n\nexport function onRenderBody({ setPreBodyComponents }) {\n  setPreBodyComponents([getColorModeInitScriptElement()])\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Size to Contain with Styled Components (JSX)\nDESCRIPTION: This snippet demonstrates setting the background size to \"contain\" with styled components using the xstyled library. It renders a div with a background image, repeated and positioned. The output will be a div where the background image will be scaled to fit within the element. Dependencies are xstyled and styled-components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-size.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"emerald-300\"\n      h={48}\n      backgroundSize=\"contain\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div\n    backgroundSize=\"contain\"\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"center\"\n    backgroundImage=\"url(...)\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Min-Height Values in xstyled Components using JSX\nDESCRIPTION: Illustrates setting fixed minimum heights using numeric values (automatically converted to pixels) or strings with explicit units (like '12px', '4rem', '3ex') for the `minHeight` prop in `xstyled` components. Any valid CSS height value is accepted.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-height.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      {[123, '12px', '4rem', '3ex'].map((v) => (\n        <x.div\n          key={v}\n          spaceY={4}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <x.div\n            w={8}\n            minHeight={v}\n            borderRadius=\"md\"\n            bg=\"emerald-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n          <x.p fontSize=\"sm\" color=\"emerald-600\" textAlign=\"center\">\n            minHeight={v}\n          </x.p>\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div minHeight={123} h={0} />\n    <x.div minHeight=\"12px\" h={0} />\n    <x.div minHeight=\"4rem\" h={0} />\n    <x.div minHeight=\"3ex\" h={0} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Removing Border Radius with 'none' value in xstyled JSX\nDESCRIPTION: Illustrates how to explicitly remove any applied border radius by setting the `borderRadius` prop to \"none\". This is particularly useful for overriding styles at different breakpoints. The example provides both a visual preview and the JSX code. Requires the `@xstyled/styled-components` library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-radius.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      <x.div\n        bg=\"rose-500\"\n        p={6}\n        color=\"white\"\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"none\"\n      >\n        none\n      </x.div>\n    </x.div>\n  </template>\n  <x.div borderRadius=\"none\">none</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Manual Line Height Binding using `th.lineHeight` (JavaScript)\nDESCRIPTION: Illustrates how to manually apply a theme line height value using the `th.lineHeight` utility within a styled component. This is useful for complex CSS properties like `font` where the line height needs to be explicitly referenced.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/line-height.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Title = styled.h4`\n  font: arial 10px / ${th.lineHeight('loose')};\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing Skew Transformations with xstyled in JSX\nDESCRIPTION: This example demonstrates how to apply skew transformations to images using xstyled components. It shows different skew angle values (0, 3, 6, 12) applied to images within a responsive flex layout. Each image has the transform property enabled along with specific skewY values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/skew.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n      my={10}\n    >\n      {[0, 3, 6, 12].map((angle) => (\n        <x.div key={angle} w={24} h={24} bg=\"amber-300\" borderRadius=\"md\">\n          <x.img\n            h={24}\n            w={24}\n            transform\n            skewY={angle}\n            borderRadius=\"md\"\n            src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.img transform skewY={0} />\n  <x.img transform skewY={3} />\n  <x.img transform skewY={6} />\n  <x.img transform skewY={12} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Aligning Individual Flex Items Using alignSelf=\"auto\" in xstyled (JSX)\nDESCRIPTION: Demonstrates aligning a single flex item based on the container's align-items property by applying the alignSelf=\"auto\" prop on a x.div. Requires xstyled set up in a React project. The key parameter is alignSelf, which can be changed to apply different CSS align-self values to individual flex or grid items. Rendered output flexes three boxes with the middle one following the default alignment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/box-alignment/align-self.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div h={24} display=\"flex\" alignItems=\"stretch\" spaceX={2}>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"emerald-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        alignSelf=\"auto\"\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"emerald-600\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        bg=\"emerald-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" alignItems=\"stretch\">\n    <div>1</div>\n    <x.div alignSelf=\"auto\">2</x.div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation in xstyled (JSX)\nDESCRIPTION: Demonstrates how to apply rotation to elements using the `rotate` prop in xstyled components. The `transform` prop must be enabled first. Examples show applying rotation with different angle units (degrees, turns) to images within a flex layout, also showcasing responsive layout utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/rotate.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n      my={10}\n    >\n      {[0, 45, '0.5turn', 120].map((angle) => (\n        <x.div key={angle} w={16} h={16} bg=\"red-300\" borderRadius=\"md\">\n          <x.img\n            h={16}\n            w={16}\n            transform\n            rotate={angle}\n            borderRadius=\"md\"\n            src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.img transform rotate={0} />\n  <x.img transform rotate={45} />\n  <x.img transform rotate=\"0.5turn\" />\n  <x.img transform rotate={120} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Default Theme LineHeights Definition in xstyled - JavaScript\nDESCRIPTION: This snippet provides the complete lineHeights property from the default xstyled theme configuration in JavaScript. It includes both numeric and named keys, accounting for various sizing conventions, and ensures consistency with default font sizes. No modification is necessary unless overriding values; the object is supplied to the styled-components ThemeProvider internally by xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/line-heights.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  lineHeights: {\n    none: 1,\n    tight: 1.25,\n    snug: 1.375,\n    normal: 1.5,\n    relaxed: 1.625,\n    loose: 2,\n    3: '.75rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    7: '1.75rem',\n    8: '2rem',\n    9: '2.25rem',\n    10: '2.5rem',\n\n    // Match fontSizes\n    xs: '1rem',\n    sm: '1.25rem',\n    default: '1.5rem',\n    lg: '1.75rem',\n    xl: '1.75rem',\n    '2xl': '2rem',\n    '3xl': '2.25rem',\n    '4xl': '2.5rem',\n    '5xl': 1,\n    '6xl': 1,\n    '7xl': 1,\n    '8xl': 1,\n    '9xl': 1,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting to Normal Font Style with xstyled\nDESCRIPTION: This code shows how to revert text to normal font style using the 'fontStyle=\"normal\"' utility in an xstyled React component. It is useful for resetting italics or other styles at different breakpoints. Dependencies include React and xstyled. The result is a paragraph with normal font styling regardless of previous styles.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-style.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.p fontFamily=\"sans\" fontSize=\"xl\" color=\"emerald-700\" textAlign=\"center\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p fontStyle=\"normal\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying List Style Position with xstyled Components\nDESCRIPTION: Demonstrates using the `listStylePosition` prop on `x.ul` components within a React/JSX structure to set the list marker position to 'inside' or 'outside'. It dynamically generates examples for both possible values using `.map()` and displays them within definition lists.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/list-style-position.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={8}>\n      {['inside', 'outside'].map((listStylePosition) => (\n        <x.dl key={listStylePosition} color=\"violet-700\" overflow=\"hidden\">\n          <x.dt\n            w={16}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n            mb={1}\n          >\n            listStylePosition={listStylePosition}\n          </x.dt>\n          <x.dd fontSize=\"xl\" m={0}>\n            <x.ul\n              bg=\"violet-100\"\n              listStylePosition={listStylePosition}\n              borderRadius=\"md\"\n              p={0}\n              my={0}\n              ml={6}\n            >\n              <li>Lorem ipsum dolor sit amet, consectetur adipisicing elit</li>\n              <li>\n                Assumenda, quia temporibus eveniet a libero incidunt suscipit\n              </li>\n              <li>\n                Quidem, ipsam illum quis sed voluptatum quae eum fugit earum\n              </li>\n            </x.ul>\n          </x.dd>\n        </x.dl>\n      ))}\n    </x.div>\n  </template>\n  <x.ul listStylePosition=\"inside\">\n    <li>Lorem ipsum ...</li>\n  </x.div>\n  <x.ul listStylePosition=\"outside\">\n    <li>Lorem ipsum ...</li>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Fit 'cover' with xstyled React Components - JSX\nDESCRIPTION: This code sample shows how to use the objectFit=\"cover\" property with xstyled React components to make the image fully cover its container. The image might be cropped to fit container dimensions while maintaining aspect ratio. Prerequisites include the xstyled and React libraries. Users supply the image dimensions and an optional source. The rendered image fills the container completely, possibly with parts clipped. This pattern is ideal for hero images and backgrounds.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/object-fit.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div bg=\"indigo-300\" borderRadius=\"md\" overflow=\"hidden\">\n      <x.img\n        h={48}\n        w={1}\n        objectFit=\"cover\"\n        src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n        alt=\"\"\n      />\n    </x.div>\n  </template>\n  <x.div bg=\"rose-300\">\n    <x.img objectFit=\"cover\" h={48} w=\"100%\" />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Visibility Utility in xstyled\nDESCRIPTION: This snippet shows how to apply the visibility utility conditionally based on breakpoints using object notation. It demonstrates hiding an element at medium screen sizes and above by setting visibility={{ md: \"hidden\" }}.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/visibility.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div visibility={{ md: 'hidden' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Bounce Animation to SVG (JSX)\nDESCRIPTION: Shows how to apply the 'bounce' animation utility to an SVG element using the `animation` prop in xstyled JSX. This utility makes the element bounce vertically, often used for indicators like \"scroll down\" arrows.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.svg animation=\"bounce\" w={6} h={6}> {/* ... */}</x.svg>\n```\n\n----------------------------------------\n\nTITLE: Handling Reversed Element Order with xstyled Spacing\nDESCRIPTION: Shows how to use the `spaceXReverse` boolean prop in conjunction with `spaceX={4}` and `flexDirection='row-reverse'` on a parent `x.div`. This ensures correct horizontal spacing is applied (by adjusting the `--x-space-x-reverse` CSS custom property) when the visual order of child elements is reversed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/space-between.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      <x.div display=\"flex\" flexDirection=\"row-reverse\">\n        <x.div\n          w={16}\n          h={16}\n          color=\"white\"\n          bg=\"fuchsia-500\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          borderRadius=\"md\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          1\n        </x.div>\n        <x.div w={4} h={16} borderRadius=\"md\" bg=\"fuchsia-300\" />\n        <x.div\n          w={16}\n          h={16}\n          color=\"white\"\n          bg=\"fuchsia-500\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          borderRadius=\"md\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          2\n        </x.div>\n        <x.div w={4} h={16} borderRadius=\"md\" bg=\"fuchsia-300\" />\n        <x.div\n          w={16}\n          h={16}\n          color=\"white\"\n          bg=\"fuchsia-500\"\n          fontSize=\"2xl\"\n          fontWeight=\"extrabold\"\n          borderRadius=\"md\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          3\n        </x.div>\n      </x.div>\n    </>\n  </template>\n  <x.div display=\"flex\" spaceX={4} spaceXReverse>\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using useTimingFunction Hook in React Component\nDESCRIPTION: Details how to retrieve a transition timing function within React components via the `useTimingFunction` hook. This hook facilitates dynamic selection and application of easing functions inside React functional components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-timing-function.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTimingFunction } from '@xstyled/...'\n\nfunction Button() {\n  const timingFunction = useTimingFunction('ease-in')\n}\n```\n\n----------------------------------------\n\nTITLE: Box Sizing content-box in xstyled (JSX)\nDESCRIPTION: Illustrates setting the `box-sizing` property to `content-box` using the `boxSizing` prop in xstyled. With `content-box`, borders and padding are added to the element's specified height and width, increasing the total rendered size. The example includes flexbox properties to center the content.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/box-sizing.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <x.div\n        boxSizing=\"content-box\"\n        h={32}\n        w={32}\n        p={4}\n        border={4}\n        borderColor=\"rose-400\"\n        bg=\"rose-200\"\n        borderRadius=\"md\"\n      >\n        <x.div h={1} w={1} bg=\"rose-400\" />\n      </x.div>\n    </x.div>\n  </template>\n  <x.div boxSizing=\"content-box\" h={32} w={32} p={4} border={4}>\n    {/* ... */}\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: React Component Demonstration of Fluid Max-Height Utility\nDESCRIPTION: This snippet shows how fractional values between 0 and 1 are automatically converted into percentages for maximum height, supporting fractional, decimal, and percentage string formats. It visualizes dynamic max-height adjustments within a container, using fractional values to demonstrate fluid scaling.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-height.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"flex-end\"\n      mx=\"auto\"\n    >\n      <x.div\n        overflow=\"hidden\"\n        borderRadius=\"md\"\n        color=\"white\"\n        fontFamily=\"mono\"\n        h={48}\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-end\"\n        bg=\"cool-gray-300\"\n      >\n        <x.div\n          h={0.3}\n          px={2}\n          py={4}\n          bg=\"rose-500\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          0.3\n        </x.div>\n      </x.div>\n      <x.div\n        overflow=\"hidden\"\n        borderRadius=\"md\"\n        color=\"white\"\n        fontFamily=\"mono\"\n        h={48}\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"flex-end\"\n        bg=\"cool-gray-300\"\n      >\n        <x.div\n          h={0.2}\n          px={2}\n          py={4}\n          bg=\"cool-gray-300\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          color=\"rose-500\"\n        >\n          0.2\n        </x.div>\n        <x.div\n          h={0.5}\n          px={2}\n          py={4}\n          bg=\"rose-500\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          0.5\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div maxHeight={1 / 2} h={0.3}>\n    maxHeight=1/2\n  </x.div>\n  <x.div maxHeight={0.5} h={0.7}>\n    maxHeight=0.5\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Manually Binding Transition Property using th utility (JS)\nDESCRIPTION: Explains how to explicitly bind a theme's transition property value using the `th.transitionProperty` utility within a styled component's template literal. This allows combining theme-defined property sets (like 'default') with other transition settings like duration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-property.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...' // Assuming import from a styling library like styled-components or emotion\nimport { th } from '@xstyled/...' // Assuming import from @xstyled/core or similar\n\nconst Button = styled.button`\n  transition: ${th.transitionProperty('default')} 400ms;\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to Single Sides with xstyled in React (JSX)\nDESCRIPTION: This snippet demonstrates how to apply padding to individual sides of an element using xstyled's props pt, pr, pb, and pl within React JSX. It displays multiple x.div components styled with different padding sizes on top, right, bottom, and left respectively. Dependencies include React and xstyled's styled x components. The inputs are numeric spacing values (e.g., pt={6}). The output is visual spacing created by padding of specific rem sizes on the targeted sides.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/padding.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignItems=\"flex-start\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n      mx={-5}\n    >\n      <x.div mx={5} bg=\"rose-300\" borderRadius=\"md\" overflow=\"hidden\" pt={6}>\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          pt=6\n        </x.div>\n      </x.div>\n      <x.div\n        mx={5}\n        bg=\"rose-300\"\n        borderRadius=\"md\"\n        overflow=\"hidden\"\n        pr={4}\n        mt={6}\n      >\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          pr=4\n        </x.div>\n      </x.div>\n      <x.div\n        mx={5}\n        bg=\"rose-300\"\n        borderRadius=\"md\"\n        overflow=\"hidden\"\n        pb={8}\n        mt={6}\n      >\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          pb=8\n        </x.div>\n      </x.div>\n      <x.div\n        mx={5}\n        bg=\"rose-300\"\n        borderRadius=\"md\"\n        overflow=\"hidden\"\n        pl={2}\n        mt={6}\n      >\n        <x.div\n          bg=\"rose-600\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          pl=2\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div pt={6}>pt=6</x.div>\n  <x.div pr={4}>pr=4</x.div>\n  <x.div pb={8}>pb=8</x.div>\n  <x.div pl={2}>pl=2</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating a custom utility namespace with createX in xstyled (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom namespace called 'x' using createX, including only specific utilities such as fontSize. It helps in reducing bundle size by exposing only needed utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/composing-utilities.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createX, fontSize } from '@xstyled/...'\nimport { borderInline } from './border-inline'\n\nconst x = createX(fontSize)\n\n// Only \"fontSize\" is usable\n<x.div fontSize=\"10px\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Wrapping When Width Exceeds Row Capacity in xstyled JSX\nDESCRIPTION: This snippet illustrates how column wrapping is automatically handled in xstyled JSX when the summed weight (width fractions) of columns in a single row exceeds 1. Columns wrapped onto new lines as a group without explicit wrapping logic. The example uses fractions greater than 1 collectively (3/4, 1/3, 1/2) to demonstrate this behavior. The snippet requires React and xstyled, with key props being 'col' defining fractional widths and containment within a 'row'. Outputs a wrapped grid layout responsive to column widths.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      color=\"white\"\n      fontWeight=\"extrabold\"\n      overflow=\"hidden\"\n      p={2}\n      spaceY={2}\n    >\n      <x.div row alignItems=\"flex-start\" bg=\"emerald-200\" borderRadius=\"md\">\n        <x.div col={3 / 4} py={2}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 3} py={2}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n        <x.div col={1 / 2} py={2}>\n          <x.div bg=\"emerald-500\" py={2} textAlign=\"center\" borderRadius=\"md\" />\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col={3 / 4} />\n    <x.div col={1 / 3} />\n    <x.div col={1 / 2} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Targeting a Single Breakpoint with xstyled\nDESCRIPTION: Demonstrates how to apply a style at only one breakpoint by counteracting it at larger breakpoints. The example sets background color to red at medium screens only, with teal at all other sizes.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/responsive-design.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<x.div bg={{ _: 'teal-500', md: 'red-500', lg: 'teal-500' }} />\n```\n\n----------------------------------------\n\nTITLE: Overriding Display for Images with xstyled (JSX)\nDESCRIPTION: Demonstrates how to override Preflight's default `display: block` for an image. By using the `x.img` component and adding the `display=\"inline\"` utility prop, the image element can be rendered inline when needed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<x.img display=\"inline\" src=\"...\" alt=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a utility namespace with grouped utilities (JavaScript)\nDESCRIPTION: This snippet illustrates how to utilize utility groups, such as 'typography', to organize and access multiple related utilities collectively, simplifying style management in components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/composing-utilities.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createX, typography } from '@xstyled/...'\nimport { borderInline } from './border-inline'\n\nconst x = createX(typography)\n\n// \"fontSize\", \"fontWeight\" and all typography utilities are available\n<x.div fontSize=\"10px\" fontWeight=\"bold\" />\n```\n\n----------------------------------------\n\nTITLE: Using 'visibility=\"visible\"' in React with xstyled\nDESCRIPTION: This snippet demonstrates how to make an element visible after being hidden, using the visibility=\"visible\" prop in React components. The setup is similar to the hidden example, showing three boxes with the middle explicitly set to visible.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/visibility.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" justifyContent=\"center\" spaceX={4}>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"amber-500\"\n        w={32}\n        h={16}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        color=\"white\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        visibility=\"visible\"\n        borderRadius=\"md\"\n        bg=\"amber-500\"\n        w={32}\n        h={16}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        color=\"white\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        2\n      </x.div>\n      <x.div\n        borderRadius=\"md\"\n        bg=\"amber-500\"\n        w={32}\n        h={16}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        color=\"white\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" justifyContent=\"center\" spaceX={4}>\n    <x.div>1</x.div>\n    <x.div visibility=\"visible\">2</x.div>\n    <x.div>3</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Manual Binding of Transition Timing Function Using th.timingFunction\nDESCRIPTION: Shows how to manually bind a transition timing function within a styled component using the `th.timingFunction` utility from xstyled. This method allows dynamic or parameterized control over transition easing within styled-components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-timing-function.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Button = styled.button`\n  transition: color ${th.timingFunction('ease-in')} 150ms;\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Padding with xstyled in React (JSX)\nDESCRIPTION: This snippet shows how to apply horizontal padding using the shorthand prop px in xstyled within React JSX elements. It includes styled x.div elements with px set to 8 to add equal left and right padding. The snippet depends on React and xstyled. The input is a numeric value that corresponds to a spacing scale, with the output being horizontal padding applied to the element.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/padding.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div bg=\"emerald-300\" borderRadius=\"md\" overflow=\"hidden\" px={8}>\n        <x.div bg=\"emerald-600\" py={3} px={4}>\n          px=8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div px={8}>px=8</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Examples JSX\nDESCRIPTION: Demonstrates how to apply different text alignments using the `textAlign` property in xstyled components. Includes examples for left, center, right, and justify alignment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-align.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={8}>\n      {[\n        ['left', 'purple'],\n        ['center', 'rose'],\n        ['right', 'emerald'],\n        ['justify', 'amber'],\n      ].map(([textAlign, color]) => (\n        <x.dl key={textAlign} color={`${color}-700`} overflow=\"hidden\">\n          <x.dt\n            w={16}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n            mb={1}\n          >\n            textAlign={textAlign}\n          </x.dt>\n          <x.dd fontSize=\"xl\" m={0}>\n            <x.div\n              textAlign={textAlign}\n              fontFamily=\"flow\"\n              fontSize=\"3xl\"\n              lineHeight={0.8}\n              color={`${color}-700`}\n            >\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nobis\n              fugit, enim molestiae praesentium eveniet, recusandae et error\n              beatae facilis ex harum consequuntur, quia pariatur non. Doloribus\n              illo, ullam blanditiis ab.\n            </x.div>\n          </x.dd>\n        </x.dl>\n      ))}\n    </x.div>\n  </template>\n  <x.p textAlign=\"left\">Lorem ipsum ...</x.p>\n  <x.p textAlign=\"center\">Lorem ipsum ...</x.p>\n  <x.p textAlign=\"right\">Lorem ipsum ...</x.p>\n  <x.p textAlign=\"justify\">Lorem ipsum ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Font Family Hooks in xstyled\nDESCRIPTION: Example of using the useFont hook to get a font family value in any component. This allows accessing font values from the theme in functional components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { useFont } from '@xstyled/...'\n\nfunction Title() {\n  const font = useFont('sans')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Transition Properties in xstyled (diffjs)\nDESCRIPTION: This snippet illustrates modifying the transitionProperties object in a JavaScript theme configuration file for xstyled. It adds a new custom 'dialogs' property consisting of 'box-shadow' and 'transform', expanding the available transition property groups. Requires a project setup with styled-components/xstyled and a mechanism to merge the theme object with the application's ThemeProvider. Inputs include assignment or extension of the transitionProperties object; outputs affect which CSS properties can be transitioned via xstyled utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/transition-properties.mdx#_snippet_0\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n\n  export const theme = {\n    transitionProperties: {\n      // ...\n      colors: ['background-color', 'border-color', 'color', 'fill', 'stroke'],\n      opacity: ['opacity'],\n      shadow: ['box-shadow'],\n      transform: ['transform'],\n+     dialogs: ['box-shadow', 'transform'],\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Default Font Weights in xstyled Theme - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the default fontWeights object provided by xstyled for typical usage in a styled-components theme. No external dependencies are required beyond a working xstyled setup. The object maps standard weight names to string values representing CSS-compliant numeric font weights. Add this object to your theme to use the default set, with no customization needed. Keys like 'hairline', 'bold', and 'black' cover a broad range of font weights.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/font-weights.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  fontWeights: {\n    hairline: '100',\n    thin: '200',\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resetting Native Form Styles with appearance='none' in xstyled (JSX)\nDESCRIPTION: Demonstrates using the `appearance='none'` prop on an `x.select` component within a React application styled with xstyled. This removes the default browser styling, allowing for custom form component creation. The example contrasts a default select element with one where appearance is reset.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/appearance.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div maxWidth=\"sm\" mx=\"auto\" p={3}>\n      <x.div display=\"flex\" my={4}>\n        <x.select w={16}>\n          <option>Yes</option>\n          <option>No</option>\n          <option>Maybe</option>\n        </x.select>\n        <x.div mx={4}>Default browser styles applied</x.div>\n      </x.div>\n      <x.div display=\"flex\" my={4}>\n        <x.select appearance=\"none\" w={16}>\n          <option>Yes</option>\n          <option>No</option>\n          <option>Maybe</option>\n        </x.select>\n        <x.div mx={4}>Default styles removed</x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.select>\n    <option>Yes</option>\n    <option>No</option>\n    <option>Maybe</option>\n  </x.select>\n\n  <x.select appearance=\"none\">\n    <option>Yes</option>\n    <option>No</option>\n    <option>Maybe</option>\n  </x.select>\n</>\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Breakpoint Keys in Theme (JavaScript, Diff Format)\nDESCRIPTION: Shows a diff for migrating theme config from 'breakpoints' to 'screens' in xstyled v2+. Old and new key names are highlighted. Input: theme object. Output: Updated theme object for correct responsive behavior. Limitation: Example shown as a diff, not full JavaScript code.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n  const theme = {\n-   breakpoints: { xs: 0, md: 800 },\n+   screens: { xs: 0, md: 800 },\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Scaled Width from Theme in React\nDESCRIPTION: Interactive example showing how to use theme-based scaled width values. Demonstrates different width values including theme scale (1s) and numeric pixel values (8, 12, 16, 24).\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/width.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" flexDirection=\"column\" spaceY={4} mx=\"auto\" w={64}>\n      {['1s', 8, 12, 16, 24].map((v) => (\n        <x.div key={v} display=\"flex\" alignItems=\"center\" spaceX={4}>\n          <x.p fontSize=\"sm\" color=\"light-blue-600\" w={24} textAlign=\"right\">\n            w={v}\n          </x.p>\n          <x.div\n            h={8}\n            w={v}\n            borderRadius=\"md\"\n            bg=\"light-blue-500\"\n            color=\"white\"\n            fontSize=\"2xl\"\n            fontWeight=\"extrabold\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div>\n    <x.div w=\"1s\" />\n    <x.div w={8} />\n    <x.div w={12} />\n    <x.div w={16} />\n    <x.div w={24} />\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Divider Style with xstyled in JSX\nDESCRIPTION: This JSX snippet demonstrates applying the `divideStyle=\"dashed\"`, `divideY={4}`, and `divideColor=\"amber-500\"` props to an `x.div` component from xstyled. These props are used to create dashed, thick, and colored borders *between* the child elements, commonly used within grid or flex containers.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-style.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={1}\n      divideY={4}\n      divideStyle=\"dashed\"\n      divideColor=\"amber-500\"\n    >\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"amber-600\"\n        py={3}\n      >\n        1\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"amber-600\"\n        py={3}\n      >\n        2\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"amber-600\"\n        py={3}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div\n    display=\"grid\"\n    gridTemplateColumns={1}\n    divideY={4}\n    divideStyle=\"dashed\"\n    divideColor=\"amber-500\"\n  >\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Removing Default Margins with Preflight (CSS)\nDESCRIPTION: This CSS rule, part of Preflight, resets the default margins for various block-level elements (headings, paragraphs, lists, figures, etc.) to zero. This promotes consistency and encourages reliance on the defined spacing scale within the design system.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Transform Origin Utilities in xstyled (React, JavaScript)\nDESCRIPTION: This React JSX snippet showcases various usages of the transformOrigin prop with xstyled components. It uses the <x.div> and <x.img> components to illustrate how different values of transformOrigin (such as 'center', 'top left', 'bottom right', 'left') affect transformed images. The component uses responsive props for flex layouts and spacing, and it maps over possible origins to display multiple transformed elements. Dependencies: xstyled, React. Inputs include transformOrigin values and image URLs; output is a set of transformed and rotated images within styled divs. Responsive props such as flexDirection and spaceY illustrate breakpoint-based layout changes. The snippet assumes xstyled and React are properly installed and configured.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform-origin.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n      my={10}\n    >\n      {['center', 'top left', 'bottom right', 'left'].map((keyword) => (\n        <x.div\n          key={keyword}\n          w={20}\n          h={20}\n          bg=\"light-blue-300\"\n          borderRadius=\"md\"\n        >\n          <x.img\n            h={20}\n            w={20}\n            transform\n            transformOrigin={keyword}\n            rotate={45}\n            borderRadius=\"md\"\n            src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.img transform transformOrigin=\"center\" rotate={45} />\n  <x.img transform transformOrigin=\"top left\" rotate={45} />\n  <x.img transform transformOrigin=\"bottom right\" rotate={45} />\n  <x.img transform transformOrigin=\"left\" rotate={45} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using backgroundPosition prop with xstyled components in React\nDESCRIPTION: Example demonstrating various background position options in xstyled. The code creates a grid of nine boxes, each with a background image positioned differently (left top, top, right top, left, center, right, left bottom, bottom, right bottom) to showcase all common positioning options.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-position.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <div>\n      <x.div display=\"flex\" justifyContent=\"space-around\" mb={8}>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            left top\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"left top\"\n          />\n        </x.div>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            top\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"top\"\n          />\n        </x.div>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            right top\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"right top\"\n          />\n        </x.div>\n      </x.div>\n      <x.div display=\"flex\" justifyContent=\"space-around\" mb={8}>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            left\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"left\"\n          />\n        </x.div>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            center\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"center\"\n          />\n        </x.div>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            right\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"right\"\n          />\n        </x.div>\n      </x.div>\n      <x.div display=\"flex\" justifyContent=\"space-around\">\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            left bottom\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"left bottom\"\n          />\n        </x.div>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            bottom\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"bottom\"\n          />\n        </x.div>\n        <x.div flex=\"1 1 0\">\n          <x.p\n            textAlign=\"center\"\n            fontSize=\"sm\"\n            color=\"emerald-600\"\n            fontWeight=\"medium\"\n            mb={1}\n          >\n            right bottom\n          </x.p>\n          <x.div\n            mx=\"auto\"\n            bg=\"emerald-300\"\n            borderRadius=\"md\"\n            w={24}\n            h={24}\n            backgroundRepeat=\"no-repeat\"\n            backgroundImage=\"url('https://images.unsplash.com/photo-1459262838948-3e2de6c1ec80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=64&h=64&q=80')\"\n            backgroundPosition=\"right bottom\"\n          />\n        </x.div>\n      </x.div>\n    </div>\n  </template>\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"left top\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"top\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"right top\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"left\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"center\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"right\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"left bottom\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"bottom\"\n    backgroundImage=\"url(...)\"\n  />\n  <x.div\n    backgroundRepeat=\"no-repeat\"\n    backgroundPosition=\"right bottom\"\n    backgroundImage=\"url(...)\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Manual Font Family Binding with xstyled\nDESCRIPTION: Example of manually binding a font family using the th.font utility function in xstyled. Useful when you need more control over how the font family is applied.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-family.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Title = styled.h4`\n  font: ${th.font('sans')};\n`\n```\n\n----------------------------------------\n\nTITLE: Resizing Textarea Both Ways with xstyled (JSX)\nDESCRIPTION: Demonstrates using the `resize=\"both\"` prop on an `x.textarea` component to allow both horizontal and vertical resizing. The example includes a preview template showing the styled textarea and the core implementation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/resize.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.textarea resize=\"both\" border borderColor=\"gray-300\" borderRadius />\n  </template>\n  <x.textarea resize=\"both\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Vertical Alignment with xstyled\nDESCRIPTION: Explains how to apply vertical alignment at specific breakpoints using responsive object notation, such as 'verticalAlign={{ md: \"text-bottom\" }}'. Useful for adapting alignment styles across different screen sizes.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div verticalAlign={{ md: 'text-bottom' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Using divideColor in xstyled (fuchsia)\nDESCRIPTION: This snippet demonstrates using the `divideColor` prop to set the border color between elements to fuchsia. It utilizes xstyled's `x.div` component within a grid layout, showing three numbered elements with fuchsia borders. Dependencies include xstyled library and React. The input is the desired color value, the output is a styled div.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/divide-color.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"grid\"\n      gridTemplateColumns={3}\n      divideX\n      divideColor=\"fuchsia-500\"\n    >\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"fuchsia-600\"\n        px={6}\n      >\n        1\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"fuchsia-600\"\n        px={6}\n      >\n        2\n      </x.div>\n      <x.div\n        textAlign=\"center\"\n        fontWeight=\"extrabold\"\n        fontSize=\"2xl\"\n        color=\"fuchsia-600\"\n        px={6}\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div divideX divideColor=\"fuchsia-500\">\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Default xstyled Theme Texts Object in JavaScript\nDESCRIPTION: Provides the default 'texts' object from the xstyled theme configuration, mapping text size keys to their corresponding fontSize and lineHeight tokens. This default set ensures consistent typography styles out of the box. Modifying fontSizes and lineHeights associated with these keys will automatically reflect in text variants throughout the application. No additional dependencies are required besides xstyled's default theme setup. Input is the default theme object, output is a predefined set of typography variants used by the 'text' utility.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  texts: {\n    xs: { fontSize: 'xs', lineHeight: 'xs' },\n    sm: { fontSize: 'sm', lineHeight: 'sm' },\n    default: { fontSize: 'default', lineHeight: 'default' },\n    lg: { fontSize: 'lg', lineHeight: 'lg' },\n    xl: { fontSize: 'xl', lineHeight: 'xl' },\n    '2xl': { fontSize: '2xl', lineHeight: '2xl' },\n    '3xl': { fontSize: '3xl', lineHeight: '3xl' },\n    '4xl': { fontSize: '4xl', lineHeight: '4xl' },\n    '5xl': { fontSize: '5xl', lineHeight: '5xl' },\n    '6xl': { fontSize: '6xl', lineHeight: '6xl' },\n    '7xl': { fontSize: '7xl', lineHeight: '7xl' },\n    '8xl': { fontSize: '8xl', lineHeight: '8xl' },\n    '9xl': { fontSize: '9xl', lineHeight: '9xl' },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Letter Spacing Props with xstyled\nDESCRIPTION: Demonstrates how to apply various predefined letter spacing values (e.g., 'tighter', 'wide') and custom values (e.g., '20px') directly as `letterSpacing` props on xstyled components (`x.p`). Includes a preview section showing dynamic rendering using `x.div`, `x.dl`, etc.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/letter-spacing.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <template preview>\n    <x.div spaceY={4}>\n      {['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', '20px'].map(\n        (letterSpacing) => (\n          <x.dl key={letterSpacing} color=\"pink-700\" overflow=\"hidden\">\n            <x.dt\n              w={16}\n              flexShrink={0}\n              fontSize=\"sm\"\n              opacity={0.8}\n              fontFamily=\"mono\"\n              mb={1}\n            >\n              {letterSpacing}\n            </x.dt>\n            <x.dd fontSize=\"xl\" letterSpacing={letterSpacing} m={0}>\n              Computers have lots of memory but no imagination.\n            </x.dd>\n          </x.dl>\n        ),\n      )}\n    </x.div>\n  </template>\n  <x.p letterSpacing=\"tighter\">Computers have lots ...</x.p>\n  <x.p letterSpacing=\"tight\">Computers have lots ...</x.p>\n  <x.p letterSpacing=\"normal\">Computers have lots ...</x.p>\n  <x.p letterSpacing=\"wide\">Computers have lots ...</x.p>\n  <x.p letterSpacing=\"wider\">Computers have lots ...</x.p>\n  <x.p letterSpacing=\"widest\">Computers have lots ...</x.p>\n  <x.p letterSpacing=\"20px\">Computers have lots ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive Box Sizing in xstyled (JSX)\nDESCRIPTION: Shows how to apply the `boxSizing` property responsively using object notation in xstyled. In this example, `boxSizing` is set to `content-box` for medium screen sizes and above. This allows for different box-sizing values based on the screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/box-sizing.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div boxSizing={{ md: 'content-box' }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing 'nowrap' Flex Wrap in xstyled\nDESCRIPTION: This snippet demonstrates setting the flexWrap property to 'nowrap' to prevent flex items from wrapping, leading to overflow if content exceeds container bounds. It includes a code example with styled components rendering three items in a non-wrapping flex container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-wrap.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div display=\"flex\" flexWrap=\"nowrap\" spaceX={4} overflow=\"hidden\">\n  {[1, 2, 3].map((value) => (\n    <x.div\n      key={value}\n      w={2 / 5}\n      py={1}\n      flex=\"none\"\n      borderRadius=\"md\"\n      bg=\"emerald-500\"\n      color=\"white\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      fontSize=\"2xl\"\n      fontWeight=\"extrabold\"\n    >\n      {value}\n    </x.div>\n  ))}\n</x.div>\n<xd.div display=\"flex\" flexWrap=\"nowrap\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</xd.div>\n```\n\n----------------------------------------\n\nTITLE: Applying negative margin using xstyled\nDESCRIPTION: Shows how to apply a negative margin to an element using xstyled props. The example uses `mt={-8}` to pull the element upwards, demonstrating that negative values can be used with any of the margin utilities (`m`, `mt`, `mr`, `mb`, `ml`, `mx`, `my`). This is useful for overlapping elements.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/margin.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"space-around\"\n      alignItems=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <x.div\n          position=\"relative\"\n          w={32}\n          h={16}\n          bg=\"light-blue-300\"\n          borderRadius=\"md\"\n          overflow=\"hidden\"\n        >\n          <x.div\n            position=\"absolute\"\n            bottom={0}\n            w=\"100%\"\n            h={8}\n            bg=\"light-blue-800\"\n          />\n        </x.div>\n        <x.div\n          position=\"relative\"\n          mt={-8}\n          bg=\"light-blue-600\"\n          borderRadius=\"md\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          py={3}\n          px={4}\n        >\n          mt=-8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div w={32} h={16} bg=\"light-blue-300\" />\n  <x.div mt={-8} bg=\"light-blue-600\">\n    mt=-8\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Ending Color in Gradient with xstyled\nDESCRIPTION: Shows how to set the ending color of a gradient using the gradientTo prop. Unlike starting colors, gradients do not fade in from transparent by default.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/gradient-color-stops.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      h={24}\n      backgroundImage=\"gradient-to-r\"\n      gradientFrom=\"teal-400\"\n      gradientTo=\"blue-500\"\n    />\n  </template>\n  <x.div\n    backgroundImage=\"gradient-to-r\"\n    gradientFrom=\"teal-400\"\n    gradientTo=\"blue-500\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Responsive User Select in React with Styled Components\nDESCRIPTION: This snippet shows how to use responsive object notation to apply the `userSelect` property at different screen sizes using xstyled. It sets `userSelect` to \"none\" for medium screens and above.  It leverages xstyled's responsive design features and styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/user-select.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div userSelect={{ md: 'none' }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Spacing Scale in Theme - Diff\nDESCRIPTION: This code snippet demonstrates how to customize the spacing scale within an xstyled theme. It adds new spacing values (sm, md, lg, xl) to the `theme.space` object. The diff format highlights the additions to the existing theme object.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/space.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  // theme.js\n  export const theme = {\n    space: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Scale Transform with Images in JSX\nDESCRIPTION: This snippet demonstrates how to control element scaling by using transform and scale utilities together. It shows a responsive grid of images with different scale ratios (0.75, 1, 1.25, 1.5) and demonstrates both the implementation and visual result.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/scale.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      flexDirection={{ xs: 'column', md: 'row' }}\n      justifyContent=\"space-around\"\n      spaceY={{ xs: 0, md: 12 }}\n      spaceY={{ xs: 12, md: 0 }}\n      my={10}\n    >\n      {[0.75, 1, 1.25, 1.5].map((scale) => (\n        <x.div key={scale} w={16} h={16} bg=\"indigo-300\" borderRadius=\"md\">\n          <x.img\n            h={16}\n            w={16}\n            transform\n            scale={scale}\n            borderRadius=\"md\"\n            src=\"https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=285&h=285&q=80\"\n          />\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.img transform scale={0.75} />\n  <x.img transform scale={1} />\n  <x.img transform scale={1.25} />\n  <x.img transform scale={1.5} />\n</>\n```\n\n----------------------------------------\n\nTITLE: Default Theme Transition Properties in xstyled (JavaScript)\nDESCRIPTION: This snippet displays the structure of the defaultTheme's transitionProperties object in xstyled. It provides a list of CSS properties grouped under logical keys like default, colors, opacity, shadow, and transform for use in styled-components/xstyled themes. This requires no additional dependencies but assumes usage of xstyled or a compatible theme infrastructure. The object can be customized or used as-is by referencing or extending these property sets during application theming.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/transition-properties.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  transitionProperties: {\n    default: [\n      'background-color',\n      'border-color',\n      'color',\n      'fill',\n      'stroke',\n      'opacity',\n      'box-shadow',\n      'transform',\n    ],\n    colors: ['background-color', 'border-color', 'color', 'fill', 'stroke'],\n    opacity: ['opacity'],\n    shadow: ['box-shadow'],\n    transform: ['transform'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using borderWidth utility to set border for all sides in React xstyled\nDESCRIPTION: This snippet demonstrates how to apply a uniform border width to all sides of multiple components using the borderWidth prop. It showcases different border widths with styled divs in a grid layout for visual comparison.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-width.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gap={2} gridTemplateColumns={{ sm: 2, lg: 5 }}>\n      {[0, 'default', 2, 4, 8].map((borderWidth) => (\n        <x.div\n          p={6}\n          bg=\"indigo-300\"\n          color=\"white\"\n          textAlign=\"center\"\n          fontWeight=\"extrabold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderStyle=\"solid\"\n          borderColor=\"indigo-600\"\n          borderWidth={borderWidth}\n        >\n          {borderWidth}\n        </x.div>\n      ))}\n    </x.div>\n  </template>\n  <x.div borderWidth={0} borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth={2} borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth={4} borderStyle=\"solid\" borderColor=\"indigo-600\" />\n  <x.div borderWidth={8} borderStyle=\"solid\" borderColor=\"indigo-600\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Manual Spacing Scale Binding using th.space Utility\nDESCRIPTION: This snippet shows how to manually bind a spacing scale using the th.space utility. This approach allows combining spacing scale values with other CSS units or calculations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/padding-margin.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Card = styled.button`\n  margin: calc(2px + ${th.space(3)});\n`\n```\n\n----------------------------------------\n\nTITLE: Using display=\"contents\" in xstyled\nDESCRIPTION: This code snippet demonstrates how to use `display=\"contents\"` in xstyled to create a \"phantom\" container. The children of the container act as direct children of the parent element, effectively flattening the DOM structure for layout purposes. This is useful for manipulating the layout of elements without introducing extra DOM nodes.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div p={2} bg=\"purple-300\" display=\"flex\" borderRadius=\"md\">\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        color=\"white\"\n        fontWeight=\"extrabold\"\n        textAlign=\"center\"\n        bg=\"purple-500\"\n        p={6}\n        m={2}\n      >\n        1\n      </x.div>\n      <x.div display=\"contents\">\n        <x.div\n          flex=\"1 1 0\"\n          borderRadius=\"md\"\n          color=\"white\"\n          fontWeight=\"extrabold\"\n          textAlign=\"center\"\n          bg=\"purple-500\"\n          p={6}\n          m={2}\n        >\n          2\n        </x.div>\n        <x.div\n          flex=\"1 1 0\"\n          borderRadius=\"md\"\n          color=\"white\"\n          fontWeight=\"extrabold\"\n          textAlign=\"center\"\n          bg=\"purple-500\"\n          p={6}\n          m={2}\n        >\n          3\n        </x.div>\n      </x.div>\n      <x.div\n        flex=\"1 1 0\"\n        borderRadius=\"md\"\n        color=\"white\"\n        fontWeight=\"extrabold\"\n        textAlign=\"center\"\n        bg=\"purple-500\"\n        p={6}\n        m={2}\n      >\n        4\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flex=\"1 1 0\">1</x.div>\n    <x.div display=\"contents\">\n      <x.div flex=\"1 1 0\">2</x.div>\n      <x.div flex=\"1 1 0\">3</x.div>\n    </x.div>\n    <x.div flex=\"1 1 0\">4</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Ring Color Variable (CSS)\nDESCRIPTION: Preflight defines a CSS custom property `--x-ring-color` globally (`*`). It uses the theme helper `th.color` to get a themed default (`default-ring-color`) or falls back to a semi-transparent blue (`rgba(59,130,246,0.5)`). This variable provides the default color for xstyled's ring utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n* {\n  --x-ring-color: ${th.color('default-ring-color', 'rgba(59,130,246,0.5)')};\n}\n```\n\n----------------------------------------\n\nTITLE: Aliasing Existing Color in xstyled Theme in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to create an alias for an existing color within the xstyled theme using the `aliasColor` utility. It takes the desired alias name ('primary') and the original color name ('emerald'), creating new entries in the theme (e.g., 'primary-500') that map to the aliased color's values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/colors.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defaultTheme, aliasColor } from '@xstyled/...'\n\nexport const theme = {\n  colors: {\n    ...defaultTheme.colors,\n    // Using `primary-500` is equivalent to `emerald-500`\n    ...aliasColor('primary', 'emerald'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Sizes for Width Utilities in xstyled (JS Diff)\nDESCRIPTION: Shows how to extend or customize the theme's sizes scale in xstyled to set standardized size values for width, height, min-width, max-width, and related properties globally. This snippet adds new size keys like 'sm', 'md', 'lg', 'xl' with their corresponding CSS unit values, facilitating consistent design tokens across styling utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/max-width.mdx#_snippet_4\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    sizes: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Separated Table Borders with xstyled in React (JSX)\nDESCRIPTION: Demonstrates using xstyled React components to render an HTML table with separated borders by setting borderCollapse=\"separate\" on x.table. Dependencies include the xstyled library and React. Table and cell border colors are customized with borderColor props. Optional fontFamily and color props apply additional xstyled theming. Expects no children input and outputs a rendered table with each cell's border distinct; limitations include requirement for xstyled context and CSS-in-JS support.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/tables/border-collapse.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.table\n      w={1}\n      borderCollapse=\"separate\"\n      border\n      borderColor=\"green-800\"\n      fontFamily=\"Flow\"\n    >\n      <x.thead bg=\"emerald-200\">\n        <tr>\n          <x.th\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-800\"\n            textAlign=\"left\"\n            px={4}\n            py={2}\n          >\n            State\n          </x.th>\n          <x.th\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-800\"\n            textAlign=\"left\"\n            px={4}\n            py={2}\n          >\n            City\n          </x.th>\n        </tr>\n      </x.thead>\n      <tbody>\n        <tr>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Indiana\n          </x.td>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Indianapolis\n          </x.td>\n        </tr>\n        <tr>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Ohio\n          </x.td>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Columbus\n          </x.td>\n        </tr>\n        <tr>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Michigan\n          </x.td>\n          <x.td\n            border\n            borderColor=\"green-600\"\n            color=\"emerald-400\"\n            px={4}\n            py={2}\n          >\n            Detroit\n          </x.td>\n        </tr>\n      </tbody>\n    </x.table>\n  </template>\n  <x.table borderCollapse=\"separate\" border borderColor=\"green-800\">\n    <thead>\n      <tr>\n        <x.th border borderColor=\"green-600\">\n          State\n        </x.th>\n        <x.th border borderColor=\"green-600\">\n          City\n        </x.th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <x.td border borderColor=\"green-600\">\n          Indiana\n        </x.td>\n        <x.td border borderColor=\"green-600\">\n          Indianapolis\n        </x.td>\n      </tr>\n      <tr>\n        <x.td border borderColor=\"green-600\">\n          Ohio\n        </x.td>\n        <x.td border borderColor=\"green-600\">\n          Columbus\n        </x.td>\n      </tr>\n      <tr>\n        <x.td border borderColor=\"green-600\">\n          Michigan\n        </x.td>\n        <x.td border borderColor=\"green-600\">\n          Detroit\n        </x.td>\n      </tr>\n    </tbody>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Extending xstyled with Plugins via xstyled.config.js (JavaScript)\nDESCRIPTION: Illustrates the new plugin extension capability in xstyled v3+, allowing developers to add custom utilities and compose them with the xstyled core system. This config imports factory functions and a sample utility, then outputs extended style helpers. Dependencies: @xstyled/*, custom utility exports. Parameters: system, compose, borderInline utility. Input: Config file; Output: Extended CSS/styled exported functions usable in the application. Limitation: Custom utilities must match xstyled's expected API.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createCss, system, compose } from '@xstyled/...'\nimport { borderInline } from './utilities/border-inline'\n\nexport const { css, styled, x, createGlobalStyle } = createCss(\n  compose(system, borderInline),\n)\n```\n\n----------------------------------------\n\nTITLE: Extending xstyled Theme Transitions in JavaScript\nDESCRIPTION: This snippet shows how to export a theme object in JavaScript while adding a new custom transition preset named 'light' to the transitions property. Required dependency is the xstyled theming system, and this code typically resides in a theme.js file in a React or styled-components project. The transitions property is used to define reusable CSS transition values accessible throughout the app; here, 'light' refers to a color transition over 300ms with an ease-in-out curve.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/transitions.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// theme.js\n\nexport const theme = {\n  transitions: {\n    // ...\n    light: 'color 300ms ease-in-out'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Cursor Style in React with xstyled (JSX)\nDESCRIPTION: This snippet demonstrates how to use xstyled's cursor=\"auto\" prop in a React functional component to allow the browser to set the cursor type contextually, such as automatically switching to a text cursor over text areas. Requires xstyled and React as dependencies. The x.div component accepts common props like maxWidth, p, bg, mx, textAlign, and color to customize layout and style.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      cursor=\"auto\"\n      maxWidth=\"xs\"\n      p={2}\n      bg=\"rose-200\"\n      mx=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-600\"\n    >\n      Hover over this text\n    </x.div>\n  </template>\n  <x.div cursor=\"auto\">Hover over this text</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Serving the Production Build Locally (Bash)\nDESCRIPTION: This command runs a script (likely `gatsby serve`) to start a local web server for the production build generated by `npm run build`. This allows testing the optimized site locally, typically on http://localhost:9000/, before deployment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Defining Border Radius Utilities in xstyled Theme (JavaScript)\nDESCRIPTION: Explains how to customize border radius utilities using the `radii` key within the xstyled theme object. Keys (e.g., 'none', 'sm', 'default', 'lg', 'full') map to specific CSS border-radius values. These keys are used by the `borderRadius` utility.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const theme = {\n  radii: {\n    none: '0',\n    sm: '.125rem',\n    default: '.25rem',\n    lg: '.5rem',\n    full: '9999px',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Border Collapse with xstyled in React (JSX)\nDESCRIPTION: Illustrates the use of responsive object notation with the borderCollapse prop on x.table to set 'collapse' mode at the md breakpoint and beyond. Requires xstyled's responsive design system and React. Accepts a style object as the prop value, applying the border-collapse: collapse CSS property at the medium screen breakpoint. Outputs a table element styled responsively; only available when using xstyled with responsive configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/tables/border-collapse.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.table borderCollapse={{ md: 'collapse' }} />\n```\n\n----------------------------------------\n\nTITLE: Using Manual Styled Bindings for Box Shadows in xstyled\nDESCRIPTION: This example shows how to manually bind a shadow property using the th.shadow utility in xstyled. This approach provides more explicit control over shadow application in styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Button = styled.button`\n  shadow: ${th.shadow('lg')};\n`\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transforms in xstyled Theme (JavaScript)\nDESCRIPTION: This snippet shows how to add custom transform values to the `transforms` object within your xstyled theme configuration. Defining new key-value pairs here allows you to reference these custom transforms by name when styling components, providing reusable utility values. This requires a standard JavaScript theme file for xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/transforms.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// theme.js\nexport const theme = {\n  transforms: {\n    'scale-xl': 'scale(2, 2)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: xstyled Button Component with x.*\nDESCRIPTION: This snippet shows the creation of a button component using xstyled's `x.*` syntax for a declarative style.  It applies padding, color, border radius, font weight, transitions, background color, outline and ring effects.  It leverages xstyled's prop-based styling approach, enabling a more concise and readable syntax.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { x } from '@xstyled/styled-components'\n\nconst Button = (props) => (\n  <x.button\n    py={2}\n    px={4}\n    color=\"white\"\n    borderRadius=\"md\"\n    fontWeight=\"semibold\"\n    transition\n    bg={{ _: 'emerald-500', hover: 'emerald-800' }}\n    outline={{ focus: 'none' }}\n    ring={{ focus: true }}\n    ringColor={{ focus: 'emerald-500-a50' }}\n    {...props}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Weights in xstyled Theme Configuration - diff\nDESCRIPTION: This snippet shows modifications to the font weight values in the theme.js file for an xstyled project. By updating or adding entries to fontWeights, you can tailor the font scales (like 'extra-light' or 'extra-bold') to your project\\'s design system. Required dependency is an xstyled or styled-components theme configuration, and changes are made in JavaScript object notation. Key values are the font weight names and their numerical equivalents; the expected result is a customized theme object consumed by xstyled. Only the fontWeights section of the theme is affected.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/font-weights.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// theme.js\nexport const theme = {\n  fontSizes: {\n-     hairline: 100,\n+     'extra-light': 100,\n-     thin: 200,\n      light: 300,\n      normal: 400,\n      medium: 500,\n+     semibold: 600,\n      bold: 700,\n-     extrabold: 800,\n+     'extra-bold': 800,\n      black: 900,\n    },\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Applying 'lowercase' textTransform utility in React with xstyled\nDESCRIPTION: Shows how to convert text to lowercase using the 'textTransform=\"lowercase\"' utility, with example code demonstrating the transformation within styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-transform.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textTransform=\"lowercase\" fontSize=\"xl\" color=\"violet-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textTransform=\"lowercase\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Overriding Preflight Border Styles for Third-Party Integrations (CSS)\nDESCRIPTION: Provides a CSS workaround for issues caused by Preflight's global border reset when integrating third-party libraries (like Google Maps). This example overrides the `border-style` specifically for elements within a `.google-map` container.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.google-map * {\n  border-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Keys to xstyled Theme (JavaScript)\nDESCRIPTION: Illustrates adding arbitrary custom keys and values to the xstyled theme object. This example adds a `filters` section, which is not used by xstyled core utilities but can be accessed within custom components or utilities for project-specific styling needs. Requires importing `defaultTheme`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultTheme, ThemeProvider } from '@xstyled/styled-components'\n\nexport const theme = {\n  ...defaultTheme,\n  filters: {\n    grayscale: 'grayscale(1)',\n    invert: 'invert(1)',\n    sepia: 'sepia(1)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Letter Spacing via Styled Components (Manual Binding)\nDESCRIPTION: Demonstrates manual binding of letter spacing values within styled components using the `th.letterSpacing` utility from `@xstyled/system`. This method explicitly retrieves the theme value for a given spacing name. Requires `@xstyled/styled-components` and `@xstyled/system`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/letter-spacing.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/system'\n\nconst Title = styled.h4`\n  letter-spacing: ${th.letterSpacing('wide')};\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Background Attachment in xstyled (React)\nDESCRIPTION: This snippet demonstrates how to use responsive object notation to control `backgroundAttachment` at different breakpoints with xstyled. The code applies the `backgroundAttachment` property with a value of scroll at medium screen sizes and above. This requires xstyled and a basic understanding of its responsive design features. The output is a component whose background attachment behavior changes with the screen size.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-attachment.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div backgroundAttachment={{ md: 'scroll' }} />\n```\n\n----------------------------------------\n\nTITLE: Responsive Float in xstyled (React)\nDESCRIPTION: This code snippet demonstrates how to use responsive design features in xstyled to control the float property at different screen sizes. By using the `float={{ md: 'none' }}` syntax, the element will have `float: none` applied at medium screen sizes and above. This requires the xstyled library and is designed to be used with a responsive design configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/float.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.img float={{ md: 'none' }} />\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests (Shell)\nDESCRIPTION: This command runs the automated test suite for the xstyled project (`npm run test`). Node.js, npm, and project dependencies must be installed for the tests to run. It is crucial to ensure that all tests pass after implementing new features or fixing bugs to verify that changes have not introduced regressions.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh-session\nCODE:\n```\n$ npm run test\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font Families in theme.js\nDESCRIPTION: This code snippet shows how to extend a theme object with custom font family definitions using JavaScript. It adds 'display' and 'body' font families under the theme's fonts property, which can be utilized throughout a styling system. Dependencies include the theme object structure and potential CSS-in-JS styling solutions.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/font-families.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  // theme.js\n  export const theme = {\n    fonts: {\n+     display: 'Oswald, ...',\n+     body: 'Open Sans, ...',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Operations for @xstyled/system vs styled-system in JavaScript\nDESCRIPTION: This snippet provides sample output of a JavaScript benchmark comparing the @xstyled/system package to the styled-system package. The results display the number of operations per second for each library, including standard deviation across sampled runs, and identify the overall fastest solution. Intended as log or CLI output, this snippet aids developers in evaluating the relative performance of these libraries. No external dependencies are shown directly, and there are no functional parameters or return values; the context is observational only.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/performances.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@xstyled/system x 431,828 ops/sec ±1.06% (86 runs sampled)\nstyled-system x 549,224 ops/sec ±0.85% (90 runs sampled)\nFastest is styled-system\n```\n\n----------------------------------------\n\nTITLE: Applying Style with apply Method\nDESCRIPTION: This snippet shows how to apply style directly to the styled components by using the `apply` method. It allows the application of utility styles inside the component's CSS, even for features like `ring` that cannot be used directly in styled components.  The example applies `ring` and `ringColor` utilities on focus state.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled, { system } from '@xstyled/...'\n\nconst Button = styled.buttonBox`\n  border-radius: md;\n  font-weight: semibold;\n  transition: default;\n  background-color: emerald-500;\n  color: #fff;\n\n  &:focus {\n    ${system.apply({ ring: 2, ringColor: 'emerald-800' })}\n  }\n`\n\nfunction App() {\n  return <Button bg=\"red-500\">Danger</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Flex Wrap with Xstyled\nDESCRIPTION: This snippet illustrates how to apply responsive styles to flex items using Xstyled's responsive object notation. The `flexWrap` property is used to control wrapping behavior at different breakpoints. It applies `wrap-reverse` at the `md` (medium) screen size and above. This demonstrates the ability to adapt flex layout based on screen size. Requires React and Xstyled.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"flex\" flexWrap={{ md: 'wrap-reverse' }}>\n  {/* ... */}\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Installing @xstyled/prop-types package\nDESCRIPTION: Command to install the prop-types package for xstyled via npm. This package is necessary to generate prop types from system utilities.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/prop-types.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @xstyled/prop-types\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom variant Utility for xstyled (JavaScript)\nDESCRIPTION: Provides a custom implementation of the deprecated 'variant' utility in xstyled, used for pulling theme-based variations into a styled component. Dependencies: @xstyled/util (for getThemeValue, merge, warn, is, assign). Parameters: key (theme key), default (default value), variants (object), prop (checked prop name). Input: props object. Output: Returns the matching theme value or warns if not found. Limitation: Usage depends on the given theme structure.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/upgrade-guide.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getThemeValue, merge, warn, is, assign } from '@xstyled/util'\n\nconst variant =\n  ({ key = null, default: defaultValue, variants = {}, prop = 'variant' }) =>\n  (props) => {\n    const themeVariants = is(key) ? getThemeValue(props, key) : null\n    const computedVariants = merge(assign({}, variants), themeVariants)\n    const value = props[prop] !== undefined ? props[prop] : defaultValue\n    const result = getThemeValue(props, value, computedVariants)\n    warn(is(result), `variant \"${value}\" not found`)\n    return result\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Color with Alpha Variant in xstyled JSX\nDESCRIPTION: This snippet demonstrates how to apply a predefined color with a specific alpha (opacity) variant using the `xstyled` library within a JSX component. It sets the text color of a paragraph (`<x.p>`) to a defined `red-500` color with 50% opacity (`-a50`). This assumes 'red-500' is available in the theme.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/colors.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<x.p color=\"red-500-a50\" />\n```\n\n----------------------------------------\n\nTITLE: Repeat Background Image - xstyled/JSX\nDESCRIPTION: Demonstrates how to repeat a background image both vertically and horizontally using the `backgroundRepeat=\"repeat\"` prop in xstyled.  It sets the background color, height, and image source for the div. It utilizes the `x` object, part of the xstyled library, to create styled components. The preview component shows the rendered output.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-repeat.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"emerald-300\"\n      h={96}\n      backgroundRepeat=\"repeat\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div backgroundRepeat=\"repeat\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Automatic Styled Binding in xstyled (JS)\nDESCRIPTION: This JavaScript snippet illustrates how to automatically bind the `font-weight` style in a styled component created with xstyled's `styled` function. It defines a styled component `Title` where `font-weight` is set to `semibold`.  This utilizes xstyled's integration with styled-components and requires the @xstyled libraries and styled-components to be installed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-weight.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Title = styled.h4`\n  font-weight: semibold;\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical Padding with xstyled in React (JSX)\nDESCRIPTION: This snippet illustrates adding vertical padding with the py prop in xstyled using React JSX. The example elements use py={8} to set equal padding on top and bottom. React along with xstyled are required. The input number corresponds to spacing size, and the output is the vertical padding applied to the rendered elements.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/padding.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div bg=\"indigo-300\" borderRadius=\"md\" overflow=\"hidden\" py={8}>\n        <x.div bg=\"indigo-600\" py={3} px={4}>\n          py=8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div py={8}>py=8</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Theme-Aware Global Styles with xstyled in JavaScript\nDESCRIPTION: This snippet illustrates how to leverage automatic theming with createGlobalStyle from xstyled. The GlobalStyle component sets the body text color using a theme token (text-color), allowing dynamic color changes based on theme configuration. This requires a theme with defined colors and xstyled properly configured in the React application. The GlobalStyle component, when rendered inside App, injects theme-aware global CSS. Inputs are theme variable references within the template literal; output is the corresponding CSS injected globally.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-base-styles.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createGlobalStyle } from '@xstyled/...'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    /* Use theme.colors['text-color'] */\n    color: text-color;\n  }\n`\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      {/* ... */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing inset scale in theme configuration\nDESCRIPTION: This code shows how to customize theme values for inset utilities, enabling developers to define custom spacing scales globally. By adding a new value like 'sm' with '8px' to 'theme.inset,' all positioning utilities referencing inset will incorporate the custom value.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/top-right-bottom-left.mdx#_snippet_2\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    inset: {\n+     sm: '8px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying 'uppercase' textTransform utility in React with xstyled\nDESCRIPTION: Demonstrates how to convert text to uppercase using the 'textTransform=\"uppercase\"' utility. Includes React code with styled paragraph components illustrating this transformation.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-transform.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textTransform=\"uppercase\" fontSize=\"xl\" color=\"red-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textTransform=\"uppercase\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Manually Applying Themed Animation in Styled Components (JavaScript)\nDESCRIPTION: Demonstrates manually applying an animation defined in the xstyled theme within styled components using the `th.animation` utility function. This function retrieves the themed animation value based on the provided utility name ('ping') for use in CSS properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/animations/animation.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Button = styled.button`\n  animation: ${th.animation('ping')};\n`\n```\n\n----------------------------------------\n\nTITLE: No Repeat Background Image - xstyled/JSX\nDESCRIPTION: Shows how to prevent a background image from repeating using `backgroundRepeat=\"no-repeat\"`. The `backgroundPosition` is set to center to position the image. The example uses xstyled components and sets background color and height, as well as defining the background image's source.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-repeat.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      bg=\"red-300\"\n      h={96}\n      backgroundRepeat=\"no-repeat\"\n      backgroundPosition=\"center\"\n      backgroundImage=\"url('https://images.unsplash.com/photo-1490079027102-cd08f2308c73?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=200&h=200&q=80');\"\n    />\n  </template>\n  <x.div backgroundRepeat=\"no-repeat\" backgroundImage=\"url(...)\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Automatic Spacing Scale Binding with xstyled's styled\nDESCRIPTION: This example demonstrates how to use xstyled's styled component with automatic spacing scale binding. The margin property is set to a numeric value that automatically references the corresponding spacing scale.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/padding-margin.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Card = styled.button`\n  margin: 3;\n`\n```\n\n----------------------------------------\n\nTITLE: Globally Resetting Border Styles with Preflight (CSS)\nDESCRIPTION: Preflight uses this global CSS rule (`*`, `::before`, `::after`) to reset `border-width` to 0, `border-style` to `solid`, and set a default `border-color` (using `th.color` theme helper or 'currentColor'). This ensures consistency when applying border utilities like `border` which typically only set width.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n*,\n::before,\n::after {\n  border-width: 0;\n  border-style: solid;\n  border-color: ${th.color('default-border-color', 'currentColor')};\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Opacity with xstyled in React (JSX)\nDESCRIPTION: Shows how to set the opacity of an <x.div> element responsively, so that a specific opacity value applies only at the md (medium) breakpoint and above. This relies on xstyled's responsive object notation and requires React and @xstyled/styled-components. The opacity prop should be given an object specifying breakpoints. The output is a div whose opacity is 0.5 at medium and larger viewports, and default elsewhere.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/opacity.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div opacity={{ md: 0.5 }} />\n```\n\n----------------------------------------\n\nTITLE: Responsive Gradient Control in xstyled\nDESCRIPTION: Shows how to apply responsive gradient control using object notation. This example applies the red-500 starting color only at medium screen sizes and above.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/gradient-color-stops.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div gradientFrom={{ md: 'red-500' }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Background Clip Values with xstyled JSX\nDESCRIPTION: Demonstrates how to use the `backgroundClip` prop on `x.div` components to control where the background is drawn relative to the element's border, padding, and content box. Shows examples for 'border-box', 'padding-box', and 'content-box', illustrating the visual effect with borders.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/backgrounds/background-clip.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"grid\" gridTemplateColumns={{ _: 1, lg: 3 }} gap={2}>\n      <x.div\n        backgroundClip=\"border-box\"\n        p={6}\n        borderRadius=\"md\"\n        bg=\"indigo-600\"\n        border={4}\n        borderColor=\"indigo-300\"\n        borderStyle=\"dashed\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <x.span py={2}>border-box</x.span>\n      </x.div>\n      <x.div\n        backgroundClip=\"padding-box\"\n        p={6}\n        borderRadius=\"md\"\n        bg=\"indigo-600\"\n        border={4}\n        borderColor=\"indigo-300\"\n        borderStyle=\"dashed\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <x.span py={2}>padding-box</x.span>\n      </x.div>\n      <x.div\n        backgroundClip=\"content-box\"\n        p={6}\n        borderRadius=\"md\"\n        bg=\"indigo-600\"\n        border={4}\n        borderColor=\"indigo-300\"\n        borderStyle=\"dashed\"\n        fontWeight=\"extrabold\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <x.span py={2}>content-box</x.span>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div\n    backgroundClip=\"border-box\"\n    p={6}\n    bg=\"indigo-600\"\n    border={4}\n    borderColor=\"indigo-300\"\n    borderStyle=\"dashed\"\n  />\n  <x.div\n    backgroundClip=\"padding-box\"\n    p={6}\n    bg=\"indigo-600\"\n    border={4}\n    borderColor=\"indigo-300\"\n    borderStyle=\"dashed\"\n  />\n  <x.div\n    backgroundClip=\"content-box\"\n    p={6}\n    bg=\"indigo-600\"\n    border={4}\n    borderColor=\"indigo-300\"\n    borderStyle=\"dashed\"\n  />\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Auto User Select with React\nDESCRIPTION: This snippet demonstrates how to use `userSelect=\"auto\"` to revert to the browser's default text selection behavior. This is useful for resetting user select properties at different breakpoints. The `x.div` component is used to display the text with appropriate styling. This snippet leverages xstyled's component library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/user-select.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      mx=\"auto\"\n      maxWidth=\"sm\"\n      bg=\"light-blue-200\"\n      p={2}\n      userSelect=\"auto\"\n      textAlign=\"center\"\n      color=\"gray-500\"\n    >\n      This text is selectable\n    </x.div>\n  </template>\n  <x.div userSelect=\"auto\">This text is selectable</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Cloning xstyled and Creating a Branch (Shell)\nDESCRIPTION: This snippet demonstrates how to clone your forked xstyled repository from GitHub, change into the project directory, and create a new Git branch (`my_branch`) based on the `master` branch for making contributions. Git must be installed to execute these commands. Replace `<your_username>` with your actual GitHub username before running.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ git clone https://github.com/<your_username>/xstyled\n$ cd xstyled\n$ git checkout -b my_branch\n```\n\n----------------------------------------\n\nTITLE: xstyled rule: Unsupported mid-declaration interpolation (JavaScript)\nDESCRIPTION: Illustrates an unsupported pattern in xstyled where a prop value is interpolated directly into the middle of a CSS declaration string within a styled component's template literal. This prevents xstyled from recognizing the standard `prop: value;` pattern for analysis.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Box = styled.div`\n  margin: ${(p) => p.margin};\n`\n```\n\n----------------------------------------\n\nTITLE: Building Packages and Running Docs Locally (Shell)\nDESCRIPTION: This snippet shows commands to build the xstyled packages (`npm run build`) and then navigate to the `website` directory to run the documentation site locally (`npm run develop`). Node.js and npm must be installed and dependencies installed via `npm install` for these commands to work. It is useful for testing code changes that affect documentation or the build process.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# build packages\nnpm run build\n# run docs\ncd website\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Invalid styled-components code with css prop\nDESCRIPTION: This code snippet shows an example of code that will not function correctly when using the `css` prop provided by styled-components. The example attempts to conditionally style a div based on a React state variable. xstyled does not support this approach and recommends the `x.*` syntax.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Example() {\n  const [value, setValue] = useState(false)\n  return (\n    <div\n      css={\\`\n        color: ${value ? 'red' : 'blue'};\n      `}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Template Columns Theme in xstyled JavaScript\nDESCRIPTION: Explains how to extend the default set of `gridTemplateColumns` values available in the xstyled theme by modifying the `theme.gridTemplateColumns` object. This customization requires editing the theme configuration file (e.g., `theme.js`) and is used to define custom grid track sizes or counts that can then be used via the `gridTemplateColumns` prop.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-template-columns.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // theme.js\n  export const theme = {\n    gridTemplateColumns: {\n+     16: 'repeat(16, minmax(0, 1fr))',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying vertical margin using xstyled\nDESCRIPTION: Shows how to apply equal margin to the top and bottom sides of an element using the `my` prop. Providing a space value like `my={8}` sets the configured space unit (e.g., 2rem) for both the top and bottom margins.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/margin.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"flex\"\n      justifyContent=\"center\"\n      color=\"white\"\n      fontFamily=\"mono\"\n    >\n      <x.div bg=\"indigo-300\" borderRadius=\"md\" overflow=\"hidden\" py={8}>\n        <x.div bg=\"indigo-600\" py={3} px={4}>\n          my=8\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div my={8}>my=8</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Cursor Style in React with xstyled (JSX)\nDESCRIPTION: Illustrates how to use xstyled's responsive configuration for cursor styling by passing an object (e.g., cursor={{ md: 'pointer' }}) to set the cursor based on screen size (e.g., 'pointer' from medium screens upwards). React and xstyled are required, and the cursor prop accepts an object where keys correspond to breakpoints.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/cursor.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div cursor={{ md: 'pointer' }} />\n```\n\n----------------------------------------\n\nTITLE: Float None with xstyled (React)\nDESCRIPTION: This snippet demonstrates using `float=\"none\"` to reset the float property of an element in React using xstyled.  It shows a basic `x.img` component utilizing the `float=\"none\"` prop. The `src` prop specifies the image source.  The xstyled library is required, and a valid image source is needed for the code to render correctly.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/float.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      <x.img\n        mt={2}\n        mb={4}\n        h={32}\n        float=\"none\"\n        src=\"/img/placeholder-purple.svg\"\n      />\n      <x.p\n        color=\"purple-500\"\n        fontFamily=\"Flow\"\n        textAlign=\"justify\"\n        fontWeight=\"medium\"\n      >\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam venenatis\n        et lorem sit amet vehicula. Etiam vel nibh nec nisi euismod mollis\n        ultrices condimentum velit. Proin velit libero, interdum ac rhoncus sit\n        amet, pellentesque ac turpis. Quisque ac luctus turpis, vel efficitur\n        ante. Cras convallis risus vel vehicula dapibus. Donec eget neque\n        fringilla, faucibus mi quis, porttitor magna. Cras pellentesque leo est,\n        et luctus neque rutrum eu. Aliquam consequat velit sed sem posuere,\n        vitae sollicitudin mi consequat. Mauris eget ipsum sed dui rutrum\n        fringilla. Donec varius vehicula magna sit amet auctor. Ut congue\n        vehicula lectus in blandit. Vivamus suscipit eleifend turpis, nec\n        sodales sem vulputate a. Curabitur pulvinar libero viverra, efficitur\n        odio eu, finibus justo. Etiam eu vehicula felis.\n      </x.p>\n    </>\n  </template>\n  <x.img float=\"none\" src=\"path/to/image.jpg\" />\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam venenatis et\n    lorem sit amet vehicula. Etiam vel nibh nec nisi euismod mollis ultrices\n    condimentum velit. Proin velit libero, interdum ac rhoncus sit amet,\n    pellentesque ac turpis. Quisque ac luctus turpis, vel efficitur ante. Cras\n    convallis risus vel vehicula dapibus. Donec eget neque fringilla, faucibus\n    mi quis, porttitor magna. Cras pellentesque leo est, et luctus neque rutrum\n    eu. Aliquam consequat velit sed sem posuere, vitae sollicitudin mi\n    consequat. Mauris eget ipsum sed dui rutrum fringilla. Donec varius vehicula\n    magna sit amet auctor. Ut congue vehicula lectus in blandit. Vivamus\n    suscipit eleifend turpis, nec sodales sem vulputate a. Curabitur pulvinar\n    libero viverra, efficitur odio eu, finibus justo. Etiam eu vehicula felis.\n  </p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying responsive styles between breakpoints (xstyled, JavaScript)\nDESCRIPTION: Shows how to use the `between` utility with styled-components and the `css` utility to apply styles that are active only within a specific range defined by two breakpoints. It requires importing `between` and `css` from `@xstyled/...`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled, { css, between } from '@xstyled/...'\n\nconst Box = styled.div`\n  width: 200px;\n  height: 200px;\n  ${between(\n    'md',\n    'lg',\n    css`\n      height: 300px;\n    `,\n  )}\n`\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting (Shell)\nDESCRIPTION: This command executes the project's configured linting script (`npm run lint`), which checks the code for style guide violations, potential errors, and ensures code consistency across the project. Node.js, npm, and project dependencies must be installed. Passing the lint checks is a requirement before submitting a pull request.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh-session\nCODE:\n```\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Responsive div with styled.* (xstyled)\nDESCRIPTION: This snippet demonstrates a responsive div using xstyled's `styled.*` and media queries. It sets the initial width and then adjusts it based on the `md` breakpoint.  This code provides an example of how responsive styles are applied with the xstyled styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/migrate-from-styled-components.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@xstyled/styled-components'\n\nconst Button = styled.div`\n  width: 200;\n\n  @media (min-width: md) {\n    width: 300;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Default Pointer Cursor for Buttons (CSS)\nDESCRIPTION: This CSS rule from Preflight sets the `cursor` style to `pointer` for native `<button>` elements and any element with `role=\"button\"`. This provides a visual cue for interactive button elements, enhancing usability.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* Role button pointer */\n[role='button'],\nbutton {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: xstyled rule: Unsupported dynamic styles without css (JavaScript)\nDESCRIPTION: Shows an unsupported pattern in xstyled for applying dynamic, prop-based styles within styled-components using object syntax. Omitting the necessary `css` utility wrapper prevents xstyled from correctly parsing and transforming the styles based on theme values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/magic-styled-components.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled, { css } from '@xstyled/...'\n\nconst Box = styled.div`\n  ${(p) => ({ margin: p.margin })}\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Block Display for Replaced Elements (CSS)\nDESCRIPTION: Preflight applies `display: block` and `vertical-align: middle` to images (`img`) and other replaced elements like `svg`, `video`, and `canvas`. This default helps prevent common alignment issues associated with the browser's default `display: inline`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/preflight.mdx#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  vertical-align: middle;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Rotation in xstyled (JSX)\nDESCRIPTION: Illustrates how to apply rotation conditionally based on screen size using xstyled's responsive object notation. The `rotate` prop is given an object where keys are breakpoints (e.g., `md`) and values are the desired angle, applying the rotation only at or above that breakpoint. Requires the `transform` prop.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/rotate.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transform rotate={{ md: 90 }} />\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Colors using th Utility in xstyled (JavaScript)\nDESCRIPTION: Example of dynamically referencing another theme value within the theme definition itself. It uses the `th.color()` utility function to assign the value of the existing 'red-500' color to a new 'primary' color alias. Requires importing `th` and `defaultTheme`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/customization/theme.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { th, defaultTheme, ThemeProvider } from '@xstyled/styled-components'\n\nexport const theme = {\n  ...defaultTheme,\n  colors: {\n    ...defaultTheme.colors,\n    // Use `red-500` as `primary` color\n    primary: th.color('red-500'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling System Color Scheme Detection xstyled JavaScript\nDESCRIPTION: Shows how to prevent xstyled from automatically switching color modes based on the user's operating system preference (`@media (prefers-color-scheme)`). Adding `useColorSchemeMediaQuery: false` to the theme configuration disables this behavior, meaning the color mode will only change via explicit user interaction or the initial default setting.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/dark-mode.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  useColorSchemeMediaQuery: false,\n  colors: {\n    text: '#000',\n    background: '#fff',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Italic Font Style Using xstyled React Component\nDESCRIPTION: This snippet demonstrates how to apply an italic font style to a text element using the 'fontStyle=\"italic\"' prop in an xstyled React component. It showcases customization of font family, size, color, and alignment, relying on React and JSX. It requires the xstyled library and React environment. The output is a styled paragraph with italicized text.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-style.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.p\n      fontFamily=\"sans\"\n      fontSize=\"xl\"\n      fontStyle=\"italic\"\n      color=\"light-blue-700\"\n      textAlign=\"center\"\n    >\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p fontStyle=\"italic\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Default Timing Functions in xstyled Theme (JavaScript)\nDESCRIPTION: This snippet shows the default set of timing functions ('ease-in', 'ease-out', 'ease-in-out') and their cubic-bezier values that are included in the default xstyled theme. These are available if no custom `timingFunctions` are provided in the theme configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/timing-functions.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  timingFunctions: {\n    'ease-in': 'cubic-bezier(0.4, 0, 1, 1)',\n    'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',\n    'ease-in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Auto Rows with xstyled (JSX)\nDESCRIPTION: Demonstrates how to apply the `gridAutoRows` property using the xstyled `x.div` component. The `gridAutoRows` prop accepts a string value that maps directly to the CSS `grid-auto-rows` property, controlling the size of implicitly created rows.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/grid/grid-auto-rows.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div display=\"grid\" gridAutoFlow=\"rows\" gridAutoRows=\"max-content\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</x.div>\n```\n\n----------------------------------------\n\nTITLE: Responsive Transition Timing Function Utility\nDESCRIPTION: Illustrates how to apply transition timing functions conditionally based on screen size using responsive object notation. For instance, setting `transitionTimingFunction={{ md: 'ease-in' }}` applies the easing at medium screen sizes and larger, enabling responsive design for transition behaviors.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-timing-function.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<x.div transitionTimingFunction={{ md: 'ease-in' }} />\n```\n\n----------------------------------------\n\nTITLE: Styled Bindings (Manual) - xstyled (JavaScript)\nDESCRIPTION: Demonstrates how to manually bind a transition property using the `th.duration` utility from `@xstyled/...`. Requires importing `styled` and `th`. The function `th.duration` takes a duration key (e.g., 'instant') and returns the corresponding CSS value.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-duration.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styled from '...'\nimport { th } from '@xstyled/...'\n\nconst Switch = styled.radio`\n  transition: opacity ${th.duration('instant')};\n`\n```\n\n----------------------------------------\n\nTITLE: Automatic Styled Binding of Transition Timing Function\nDESCRIPTION: Demonstrates how to automatically bind transition timing functions in styled-components using xstyled's `styled` utility. The example binds a specific easing function `ease-in` directly via CSS syntax, integrating transition timing control into styled components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-timing-function.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport styled from '@xstyled/...'\n\nconst Button = styled.button`\n  transition-timing-function: ease-in;\n`\n```\n\n----------------------------------------\n\nTITLE: Responsive Border Style in xstyled\nDESCRIPTION: This code snippet demonstrates how to use responsive object notation in xstyled to apply different border styles at different breakpoints.  The `borderStyle` prop is given an object, where keys represent breakpoints (e.g., `md`) and values represent the desired border style.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/borders/border-style.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<x.div borderStyle={{ md: 'solid' }}>{/* ... */}</x.div>\n```\n\n----------------------------------------\n\nTITLE: Default xstyled Theme Letter Spacings JS\nDESCRIPTION: Shows the predefined set of letter spacing tokens and their corresponding values included in xstyled's default theme. These are the values used if no custom `letterSpacings` are provided in the user's theme configuration.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/letter-spacings.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst defaultTheme = {\n  // ...\n  letterSpacings: {\n    tighter: '-0.05em',\n    tight: '-0.025em',\n    normal: '0em',\n    wide: '0.025em',\n    wider: '0.05em',\n    widest: '0.1em',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering React Component with xstyled\nDESCRIPTION: This snippet imports a React component named 'Home' from a specified file path.  It then renders the 'Home' component within the application's view.  The 'Home' component is likely defined elsewhere and is expected to be a valid React component. This depends on the existence of the 'Home' component file at the specified path.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Home } from '../src/components/Home'\n\n<Home />\n```\n\n----------------------------------------\n\nTITLE: Using useTransform Hook for Accessing Transforms in xstyled (JavaScript)\nDESCRIPTION: Demonstrates use of the useTransform hook from xstyled to retrieve a named transform value inside a functional React component. Requires importing useTransform from xstyled, and your theme should define a transform named 'card'. When called, returns the transformation string, which can then be applied or inspected as needed. This hook is useful for accessing transform values at runtime based on component or app state.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transforms/transform.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useTransform } from '@xstyled/...'\n\nfunction Card() {\n  const transform = useTransform('card')\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Line-Through Text Decoration in React with xstyled\nDESCRIPTION: Example showing how to strike through text using the line-through value for the textDecoration prop in xstyled. The component uses red color styling for the preview.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/text-decoration.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.p textDecoration=\"line-through\" fontSize=\"xl\" color=\"red-700\">\n      Computers have lots of memory but no imagination.\n    </x.p>\n  </template>\n  <x.p textDecoration=\"line-through\">\n    Computers have lots of memory but no imagination.\n  </x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing Durations in xstyled Theme\nDESCRIPTION: Shows how to add custom duration values to the theme.durations section of an xstyled theme. The example demonstrates adding a 'very-slow' duration of 400ms to the existing durations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/partials/customizing/durations.mdx#_snippet_0\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n\n  export const theme = {\n    durations: {\n      // ...\n      instant: '100ms',\n      'fast-in': '250ms',\n      'fast-out': '200ms',\n      'slow-in': '300ms',\n      'slow-out': '250ms',\n+     'very-slow': '400ms',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: useDuration Hook - xstyled (JavaScript)\nDESCRIPTION: Explains how to use the `useDuration` hook to access a transition property in a component. Requires importing `useDuration` from `@xstyled/...`. The `useDuration` hook takes a duration key (e.g., 'fast-out') and returns the corresponding duration value.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-duration.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useDuration } from '@xstyled/...'\n\nfunction Button() {\n  const duration = useDuration('fast-out')\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Utility: Middle in xstyled React Components\nDESCRIPTION: Shows use of 'verticalAlign=\"middle\"' to align an element's middle point with the baseline plus half the x-height of its parent. Utilizes React styled components with dashed borders for visualization of middle alignment.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div lineHeight=\"none\" position=\"relative\">\n      <x.span w={0} h={8} display=\"inline-block\" verticalAlign=\"middle\">\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"purple-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={8}\n        />\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"purple-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={4}\n        />\n      </x.span>\n      <x.span\n        position=\"relative\"\n        zIndex={10}\n        color=\"purple-700\"\n        fontWeight=\"medium\"\n      >\n        Computers have lots of memory but no imagination.\n      </x.span>\n    </x.div>\n  </template>\n  <x.span display=\"inline-block\" verticalAlign=\"middle\">\n    ...\n  </x.span>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing @xstyled/styled-components via npm\nDESCRIPTION: This command installs the `@xstyled/styled-components` package and its required peer dependency `styled-components` using the npm package manager. Both packages are necessary to use xstyled with styled-components in a project.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/styled-components/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xstyled/styled-components styled-components\n```\n\n----------------------------------------\n\nTITLE: Using fontVariant prop in xstyled - JSX\nDESCRIPTION: This code snippet demonstrates how to use the `fontVariant` prop in xstyled components to apply different font variants. It iterates through an array of variant names, rendering each within an x.dl component to display a sample text with the corresponding font variant. It showcases the usage of xstyled's styling props such as `display`, `alignItems`, `color`, `overflow`, `w`, `flexShrink`, `fontSize`, `opacity`, and `fontFamily`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/font-variant.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <>\n      {['normal', 'common-ligatures', 'small-caps'].map((variant) => (\n        <x.dl\n          key={size}\n          display=\"flex\"\n          alignItems=\"baseline\"\n          color=\"violet-600\"\n          overflow=\"hidden\"\n        >\n          <x.dt\n            w={16}\n            flexShrink={0}\n            fontSize=\"sm\"\n            opacity={0.8}\n            fontFamily=\"mono\"\n          >\n            {size}\n          </x.dt>\n          <x.dd fontVariant={variant} fontWeight=\"medium\">\n            Computers have lots of memory but no imagination.\n          </x.dd>\n        </x.dl>\n      ))}\n    </>\n  </template>\n  <x.p fontVariant=\"normal\">Computers have lots ...</x.p>\n  <x.p fontVariant=\"common-ligatures\">Computers have lots ...</x.p>\n  <x.p fontVariant=\"small-caps\">Computers have lots ...</x.p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Styled Components Evaluation Speed in JavaScript\nDESCRIPTION: This snippet illustrates performance benchmarks for the evaluation phase of styled-components and @xstyled/styled-components, showing operations per second, statistical deviation, and sample sizes. Presented as example benchmark output, the snippet is used for comparison of code parsing speeds when applications load. No code execution is implied, and it is primarily intended for reference and analysis.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/performances.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nstyled-components x 45,910 ops/sec ±1.49% (86 runs sampled)\n@xstyled/styled-components x 17,538 ops/sec ±2.10% (87 runs sampled)\nFastest is styled-components\n```\n\n----------------------------------------\n\nTITLE: Using Table Display Properties in xstyled\nDESCRIPTION: This code snippet illustrates how to use table-related display properties in xstyled to create table-like layouts with divs. The properties include `display=\"table\"`, `display=\"table-row-group\"`, and `display=\"table-cell\"`, among others, which allow you to structure content as a table using xstyled components. This provides flexibility in styling and controlling table layouts.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/layout/display.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      display=\"table\"\n      w=\"100%\"\n      bg=\"rose-300\"\n      borderRadius=\"md\"\n      overflow=\"hidden\"\n    >\n      <x.div display=\"table-row-group\">\n        <x.div display=\"table-row\">\n          <x.div\n            display=\"table-cell\"\n            color=\"white\"\n            fontWeight=\"extrabold\"\n            textAlign=\"center\"\n            bg=\"rose-500\"\n            px={6}\n            py={4}\n          >\n            A cell with more content\n          </x.div>\n          <x.div\n            display=\"table-cell\"\n            color=\"white\"\n            fontWeight=\"extrabold\"\n            textAlign=\"center\"\n            bg=\"rose-400\"\n            px={6}\n            py={4}\n          >\n            Cell 2\n          </x.div>\n          <x.div\n            display=\"table-cell\"\n            color=\"white\"\n            fontWeight=\"extrabold\"\n            textAlign=\"center\"\n            bg=\"rose-500\"\n            px={6}\n            py={4}\n          >\n            Cell 3\n          </x.div>\n        </x.div>\n        <x.div display=\"table-row\">\n          <x.div\n            display=\"table-cell\"\n            color=\"white\"\n            fontWeight=\"extrabold\"\n            textAlign=\"center\"\n            bg=\"rose-400\"\n            px={6}\n            py={4}\n          >\n            Cell 4\n          </x.div>\n          <x.div\n            display=\"table-cell\"\n            color=\"white\"\n            fontWeight=\"extrabold\"\n            textAlign=\"center\"\n            bg=\"rose-500\"\n            px={6}\n            py={4}\n          >\n            A cell with more content\n          </x.div>\n          <x.div\n            display=\"table-cell\"\n            color=\"white\"\n            fontWeight=\"extrabold\"\n            textAlign=\"center\"\n            bg=\"rose-400\"\n            px={6}\n            py={4}\n          >\n            Cell 6\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"table\" w=\"100%\">\n    <x.div display=\"table-row-group\">\n      <x.div display=\"table-row\">\n        <x.div display=\"table-cell\">A cell with more content</x.div>\n        <x.div display=\"table-cell\">Cell 2</x.div>\n        <x.div display=\"table-cell\">Cell 3</x.div>\n      </x.div>\n      <x.div display=\"table-row\">\n        <x.div display=\"table-cell\">Cell 4</x.div>\n        <x.div display=\"table-cell\">A cell with more content</x.div>\n        <x.div display=\"table-cell\">Cell 6</x.div>\n      </x.div>\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Normal Whitespace in xstyled\nDESCRIPTION: This snippet demonstrates setting the `whiteSpace` property to \"normal\" within an xstyled `x.div` component. This configuration allows text to wrap normally, collapsing newlines and spaces. It uses a template preview alongside the actual implementation to show how the text renders.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/whitespace.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div w={3 / 4} px={6} py={4} bg=\"indigo-200\" borderRadius=\"lg\">\n      <x.div\n        whiteSpace=\"normal\"\n        fontFamily=\"Flow\"\n        color=\"indigo-500\"\n        fontSize=\"3xl\"\n        lineHeight={5}\n      >\n        {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n      </x.div>\n    </x.div>\n  </template>\n  <x.div w={3 / 4}>\n    <x.div whiteSpace=\"normal\">\n      {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Selecting All Text with userSelect in React\nDESCRIPTION: This snippet demonstrates how to automatically select all text when a user clicks on an element using the `userSelect=\"all\"` prop. The `x.div` component is used for styling, and it triggers the select all functionality.  This snippet leverages xstyled's component library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/user-select.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      mx=\"auto\"\n      maxWidth=\"sm\"\n      bg=\"fuchsia-200\"\n      p={2}\n      userSelect=\"all\"\n      textAlign=\"center\"\n      color=\"gray-500\"\n    >\n      Click anywhere in this text to select it all\n    </x.div>\n  </template>\n  <x.div userSelect=\"all\">Click anywhere in this text to select it all</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Sizes Scale in xstyled Theme using DiffJS\nDESCRIPTION: Demonstrates how to customize the shared `sizes` scale in the `xstyled` theme configuration file (`theme.js`) by adding new key-value pairs. Additions to `theme.sizes` (like `sm`, `md`, `lg`, `xl`) become available for use with sizing utilities like `minHeight`.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/sizing/min-height.mdx#_snippet_4\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    sizes: {\n+     sm: '8px',\n+     md: '16px',\n+     lg: '24px',\n+     xl: '48px',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Button component with styled-components\nDESCRIPTION: Example of creating a simple Button component using the x utility from xstyled with styled-components. The component applies a blue background color.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { x } from '@xstyled/styled-components'\n\nfunction Button(props) {\n  return <x.button bg=\"blue-500\" {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Text Selection with userSelect in React\nDESCRIPTION: This snippet demonstrates how to disable text selection within a React component using the `userSelect=\"none\"` prop. The `x.div` component is used for styling, and it prevents users from selecting the text within the element and its children. This snippet leverages xstyled's component library.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/interactivity/user-select.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      mx=\"auto\"\n      maxWidth=\"sm\"\n      bg=\"amber-200\"\n      p={2}\n      userSelect=\"none\"\n      textAlign=\"center\"\n      color=\"gray-500\"\n    >\n      This text is not selectable\n    </x.div>\n  </template>\n  <x.div userSelect=\"none\">This text is not selectable</x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Utility: Baseline in xstyled React Components\nDESCRIPTION: Provides an example of using 'verticalAlign=\"baseline\"' to align an element's baseline with its parent baseline. Uses React components with styled 'x' elements, demonstrating baseline alignment with dashed border indicators for visualization.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/vertical-align.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div lineHeight=\"none\" position=\"relative\">\n      <x.span w={0} h={8} display=\"inline-block\" verticalAlign=\"baseline\">\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"light-blue-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={8}\n        />\n        <x.span\n          position=\"absolute\"\n          top={0}\n          borderColor=\"light-blue-300\"\n          borderStyle=\"dashed\"\n          borderWidth=\"1 0\"\n          w={1}\n          h={4}\n        />\n      </x.span>\n      <x.span\n        position=\"relative\"\n        zIndex={10}\n        color=\"light-blue-700\"\n        fontWeight=\"medium\"\n      >\n        Computers have lots of memory but no imagination.\n      </x.span>\n    </x.div>\n  </template>\n  <x.span display=\"inline-block\" verticalAlign=\"baseline\">\n    ...\n  </x.span>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing Shadow Values in xstyled Theme\nDESCRIPTION: This example shows how to customize the shadow values by extending the theme.shadows section in your theme configuration. It adds a new '3xl' shadow with specific values for more intense shadowing.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/effects/box-shadow.mdx#_snippet_3\n\nLANGUAGE: diffjs\nCODE:\n```\n  // theme.js\n  export const theme = {\n    shadows: {\n+     '3xl': '0 100px 100px -12px rgba(0, 0, 0, 0.25)',\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-Wrap Whitespace in xstyled\nDESCRIPTION: This snippet sets `whiteSpace` to \"pre-wrap\" inside an xstyled `x.div`, preserving both newlines and spaces while wrapping text normally. It also includes `overflowX=\"auto\"`.  The code provides a template preview to visually demonstrate the resulting text rendering.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/typography/whitespace.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div\n      w={3 / 4}\n      px={6}\n      py={4}\n      bg=\"red-200\"\n      borderRadius=\"lg\"\n      overflowX=\"auto\"\n    >\n      <x.div\n        whiteSpace=\"pre-wrap\"\n        fontFamily=\"Flow\"\n        color=\"red-500\"\n        fontSize=\"3xl\"\n        lineHeight={5}\n      >\n        {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n      </x.div>\n    </x.div>\n  </template>\n  <x.div w={3 / 4} overflowX=\"auto\">\n    <x.div whiteSpace=\"pre-wrap\">\n      {`Lorem ipsum dolor sit amet, consectetur adipisicing elit. Omnis quidem itaque beatae, rem tenetur quia iure,\n      eum natus enim maxime\n      laudantium quibusdam illo nihil,\n\n  reprehenderit saepe quam aliquid odio accusamus.`}\n    </x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Accessing Transition Property Values with useTransitionProperty Hook (JS)\nDESCRIPTION: Demonstrates using the `useTransitionProperty` hook from xstyled to retrieve a specific transition property value (e.g., 'default') from the theme configuration within a functional React component. This allows programmatic access to theme values.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/transitions/transition-property.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { useTransitionProperty } from '@xstyled/...' // Assuming import from @xstyled/core or similar\n\nfunction Button() {\n  const transitionProperty = useTransitionProperty('default')\n  // transitionProperty now holds the theme value for 'default' transition property\n}\n```\n\n----------------------------------------\n\nTITLE: Generating prop-types from @xstyled/system in JavaScript\nDESCRIPTION: This snippet illustrates how to generate React prop-types based on @xstyled/system specifications, facilitating type safety and documentation consistency in styled-components projects. It relies on @xstyled/prop-types and @xstyled/system, referencing external documentation for style prop definitions.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/packages/prop-types/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# @xstyled/prop-types\n\nGenerate prop-types from [@xstyled/system](https://xstyled.dev/docs/style-props/).\n\nSee [documentation](https://xstyled.dev/docs/prop-types/)\n```\n\n----------------------------------------\n\nTITLE: React JSX example demonstrating multi-row equal-width columns with line breaks\nDESCRIPTION: This example shows how to enforce column wrapping onto new lines in a flexbox grid by inserting a full-width empty div (`w={1}`), enabling control over multi-row layouts with consistent column widths.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flexbox-grid.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<>\n  <template preview>\n    <x.div mx={2} color=\"white\" fontWeight=\"extrabold\">\n      <x.div row>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n        <x.div w={1} h={2} />\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n        <x.div col>\n          <x.div bg=\"orange-500\" py={2} textAlign=\"center\" borderRadius=\"md\">\n            col\n          </x.div>\n        </x.div>\n      </x.div>\n    </x.div>\n  </template>\n  <x.div row>\n    <x.div col>col</x.div>\n    <x.div col>col</x.div>\n    <x.div w={1} />\n    <x.div col>col</x.div>\n    <x.div col>col</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal Space Between Elements with xstyled\nDESCRIPTION: Demonstrates using the `spaceX={4}` prop on a parent `x.div` element with `display='flex'` to add horizontal spacing between its direct children in a React component. This utility applies calculated left and right margins to the children using CSS custom properties.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/spacing/space-between.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\">\n      <x.div\n        w={16}\n        h={16}\n        color=\"white\"\n        bg=\"fuchsia-500\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"md\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        1\n      </x.div>\n      <x.div w={4} h={16} borderRadius=\"md\" bg=\"fuchsia-300\" />\n      <x.div\n        w={16}\n        h={16}\n        color=\"white\"\n        bg=\"fuchsia-500\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"md\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        2\n      </x.div>\n      <x.div w={4} h={16} borderRadius=\"md\" bg=\"fuchsia-300\" />\n      <x.div\n        w={16}\n        h={16}\n        color=\"white\"\n        bg=\"fuchsia-500\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n        borderRadius=\"md\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        3\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\" spaceX={4}>\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Preventing Growth with flexGrow using xstyled and React\nDESCRIPTION: This snippet shows how to prevent a flex item from growing using the `flexGrow` prop set to 0. It's similar to the previous example, but the middle div uses `flexGrow={0}`.  This snippet uses xstyled and React.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/flexbox/flex-grow.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <template preview>\n    <x.div display=\"flex\" spaceX={3}>\n      <x.div\n        flexGrow={1}\n        h={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"emerald-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n      <x.div\n        flexGrow={0}\n        h={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"emerald-500\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        0\n      </x.div>\n      <x.div\n        flexGrow={1}\n        h={16}\n        px={5}\n        borderRadius=\"md\"\n        bg=\"emerald-400\"\n        color=\"white\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fontSize=\"2xl\"\n        fontWeight=\"extrabold\"\n      >\n        1\n      </x.div>\n    </x.div>\n  </template>\n  <x.div display=\"flex\">\n    <x.div flexGrow={1}>{/* This item will grow */}</x.div>\n    <x.div flexGrow={0}>{/* This item will not grow */}</x.div>\n    <x.div flexGrow={1}>{/* This item will grow */}</x.div>\n  </x.div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styling ChatNotification Component Using Styled-Components in JSX\nDESCRIPTION: This snippet demonstrates a React ChatNotification component styled traditionally using styled-components. Several styled.div and styled elements define the layout, typography, colors, and spacing with CSS-in-JS template literals. It illustrates common CSS properties such as flexbox layout, padding, margin, box shadow, and color assignments applied via styled-components. The component returns a structured notification UI with a logo and text message. Dependencies include React and styled-components.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/utility-props.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Container = styled.div`\n  display: flex;\n  max-width: 24rem;\n  margin: 0 auto;\n  padding: 1.5rem;\n  border-radius: 0.5rem;\n  background-color: #fff;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n`\n\nconst LogoWrapper = styled.div`\n  flex-shrink: 0;\n`\n\nconst Logo = styled.img`\n  height: 3rem;\n  width: 3rem;\n`\n\nconst Content = styled.div`\n  margin-left: 1.5rem;\n  padding-top: 0.25rem;\n`\n\nconst Title = styled.h4`\n  color: #1a202c;\n  font-size: 1.25rem;\n  line-height: 1.25;\n`\n\nconst Message = styled.p`\n  color: #718096;\n  font-size: 1rem;\n  line-height: 1.5;\n`\n\nfunction ChatNotification() {\n  return (\n    <Container>\n      <LogoWrapper>\n        <Logo src=\"/img/logo.svg\" alt=\"ChitChat Logo\" />\n      </LogoWrapper>\n      <Content>\n        <Title>ChitChat</Title>\n        <Message>You have a new message!</Message>\n      </Content>\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Performance Benchmark for Styled Components and xstyled in JavaScript\nDESCRIPTION: This code snippet presents benchmark results focused on rendering performance, comparing styled-components to @xstyled/styled-components. The results include the number of operations per second with statistical margins and identify the joint fastest libraries. The snippet targets developers analyzing rendering efficiency; it serves as performance log output rather than functional source code.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/performances.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nstyled-components x 1,008,161 ops/sec ±1.24% (86 runs sampled)\n@xstyled/styled-components x 1,009,807 ops/sec ±1.13% (86 runs sampled)\nFastest is @xstyled/styled-components,styled-components\n```\n\n----------------------------------------\n\nTITLE: Starting Benchmark Web Server with Bash\nDESCRIPTION: This snippet runs a web server for benchmarking @xstyled/styled-components versus styled-components in a real web environment using npm. The command requires Node.js and npm as prerequisites. It starts the server on http://localhost:8083, where benchmark results can be observed.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/benchmarks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing `createCss` for xstyled Configuration\nDESCRIPTION: Shows the initial step of importing the `createCss` function from the `@xstyled/...` package. This function is essential for setting up custom xstyled configurations.\nSOURCE: https://github.com/styled-components/xstyled/blob/main/website/pages/docs/core-concepts/adding-new-utilities.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// xstyled.config.js\nimport { createCss } from '@xstyled/...'\n```"
  }
]