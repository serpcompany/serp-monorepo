[
  {
    "owner": "kivy",
    "repo": "pyjnius",
    "content": "TITLE: Minimal PyJNIus Example: Interacting with Java Stack in Python\nDESCRIPTION: Demonstrates how to use PyJNIus to interact with a Java Stack object from Python. It shows loading the Java class, creating an instance, pushing elements, and popping them.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import autoclass\n\nStack = autoclass('java.util.Stack')\nstack = Stack()\nstack.push('hello')\nstack.push('world')\n\nprint(stack.pop()) # --> 'world'\nprint(stack.pop()) # --> 'hello'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of PyJNIus in Python\nDESCRIPTION: This snippet demonstrates how to use PyJNIus to access Java classes and methods from Python. It shows printing to console and using a Java Stack.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from jnius import autoclass\n>>> autoclass('java.lang.System').out.println('Hello world')\nHello world\n\n>>> Stack = autoclass('java.util.Stack')\n>>> stack = Stack()\n>>> stack.push('hello')\n>>> stack.push('world')\n>>> print(stack.pop())\nworld\n>>> print(stack.pop())\nhello\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JavaClass in Python\nDESCRIPTION: Demonstrates the minimum class definition for reflecting a Java class using PyJNIus. It shows how to set the __javaclass__ attribute and metaclass.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import JavaClass, MetaJavaClass\n\nclass Stack(JavaClass):\n    __javaclass__ = 'java/util/Stack'\n    __metaclass__ = MetaJavaClass\n```\n\n----------------------------------------\n\nTITLE: Implementing a Java Interface in Python\nDESCRIPTION: Demonstrates how to use PythonJavaClass to implement a Java interface (ListIterator) entirely in Python, allowing Python objects to be used where Java expects an interface implementation.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import PythonJavaClass, java_method\n\nclass PythonListIterator(PythonJavaClass):\n    __javainterfaces__ = ['java/util/ListIterator']\n\n    def __init__(self, collection, index=0):\n        super(PythonListIterator, self).__init__()\n        self.collection = collection\n        self.index = index\n\n    @java_method('()Z')\n    def hasNext(self):\n        return self.index < len(self.collection.data) - 1\n\n    @java_method('()Ljava/lang/Object;')\n    def next(self):\n        obj = self.collection.data[self.index]\n        self.index += 1\n        return obj\n\n    # etc...\n```\n\n----------------------------------------\n\nTITLE: Java Lambda Implementation in Python\nDESCRIPTION: Example of using Python lambda to implement Java Comparator interface for collection sorting\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnumbers = autoclass('java.util.ArrayList')()\nCollections = autoclass('java.util.Collections')\nnumbers.add(1)\nnumbers.add(3)\nrevSort = lambda i, j: j - i\nCollections.sort(numbers, revSort)\n```\n\n----------------------------------------\n\nTITLE: Advanced PyJNIus Usage with Manual Class Declaration\nDESCRIPTION: This snippet demonstrates how to manually declare Java classes and methods in PyJNIus for more control over class discovery and method resolution.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom jnius import MetaJavaClass, JavaClass, JavaMethod, JavaStaticMethod\n\nclass Hardware(JavaClass):\n    __metaclass__ = MetaJavaClass\n    __javaclass__ = 'org/renpy/android/Hardware'\n    vibrate = JavaStaticMethod('(D)V')\n    accelerometerEnable = JavaStaticMethod('(Z)V')\n    accelerometerReading = JavaStaticMethod('()[F')\n    getDPI = JavaStaticMethod('()I')\n\n# use that new class!\nprint('DPI is', Hardware.getDPI())\n\nHardware.accelerometerEnable()\nfor x in range(20):\n    print(Hardware.accelerometerReading())\n    sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Multiple Java Method Signatures Implementation\nDESCRIPTION: Example showing implementation of multiple Java method signatures with the same method name using different decorators\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass TestImplem(PythonJavaClass):\n    __javainterfaces__ = ['java/util/List']\n\n    @java_method('()Ljava/util/ListIterator;')\n    def listIterator(self):\n        return PythonListIterator(self)\n\n    @java_method('(I)Ljava/util/ListIterator;',\n                         name='ListIterator')\n    def listIteratorWithIndex(self, index):\n        return PythonListIterator(self, index)\n```\n\n----------------------------------------\n\nTITLE: Defining JavaMethods in a JavaClass\nDESCRIPTION: Shows how to define Java methods within a JavaClass using the JavaMethod class. It includes examples of defining methods with different return types.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Stack(JavaClass):\n    __javaclass__ = 'java/util/Stack'\n    __metaclass__ = MetaJavaClass\n\n    peek = JavaMethod('()Ljava/lang/Object;')\n    empty = JavaMethod('()Z')\n```\n\n----------------------------------------\n\nTITLE: Implementing Java ListIterator Interface in Python\nDESCRIPTION: Example of implementing a Java ListIterator interface using a Python class with java_method decorator\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PythonListIterator(PythonJavaClass):\n    __javainterfaces__ = ['java/util/ListIterator']\n    \n    @java_method('()Ljava/lang/Object;')\n    def next(self):\n        obj = self.collection.data[self.index]\n        self.index += 1\n        return obj\n```\n\n----------------------------------------\n\nTITLE: Automatic Recursive Inspection with PyJNIus\nDESCRIPTION: Illustrates PyJNIus's ability to automatically provide access to nested Java objects and methods through reflection. This example shows accessing System.out.println without explicitly loading the PrintStream class.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSystem = autoclass('java.lang.System')\nSystem.out.println('Hello World')\n```\n\n----------------------------------------\n\nTITLE: Thread Management with PyJNIus\nDESCRIPTION: Example of proper thread management in PyJNIus showing manual detachment in custom Thread subclass\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nimport jnius\n\nclass MyThread(threading.Thread):\n\n    def run(...):\n        try:\n            # use pyjnius here\n        finally:\n            jnius.detach()\n```\n\n----------------------------------------\n\nTITLE: JVM Configuration in PyJNIus\nDESCRIPTION: Example of configuring JVM options and classpath before importing jnius\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport jnius_config\njnius_config.add_options('-Xrs', '-Xmx4096')\njnius_config.set_classpath('.', '/usr/local/fem/plugins/*')\nimport jnius\n```\n\n----------------------------------------\n\nTITLE: Using JavaMultipleMethod for Overloaded Methods\nDESCRIPTION: Shows how to use JavaMultipleMethod to reflect Java methods with multiple signatures, allowing for method overloading in Python.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass String(JavaClass):\n    __javaclass__ = 'java/lang/String'\n    __metaclass__ = MetaJavaClass\n\n    getBytes = JavaMultipleMethod([\n        '(Ljava/lang/String;)[B',\n        '(Ljava/nio/charset/Charset;)[B',\n        '()[B'])\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaField in a JavaClass\nDESCRIPTION: Demonstrates how to define a Java field within a JavaClass using the JavaField class. It shows an example of a static field definition.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/api.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass System(JavaClass):\n    __javaclass__ = 'java/lang/System'\n    __metaclass__ = MetaJavaClass\n\n    out = JavaField('()Ljava/io/InputStream;', static=True)\n```\n\n----------------------------------------\n\nTITLE: Using PyJNIus with python-for-android\nDESCRIPTION: This example shows how to use PyJNIus in a python-for-android environment to access Android-specific functionality like accelerometer readings.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom jnius import autoclass\n\nHardware = autoclass('org.renpy.android.Hardware')\nprint('DPI is', Hardware.getDPI())\n\nHardware.accelerometerEnable(True)\nfor x in range(20):\n    print(Hardware.accelerometerReading())\n    sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Accelerometer Access\nDESCRIPTION: Java implementation of accelerometer access through SensorManager and corresponding Python usage with PyJNIus.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.myapp;\n\nimport org.kivy.android.PythonActivity;\nimport android.content.Context;\nimport android.hardware.Sensor;\nimport android.hardware.SensorEvent;\nimport android.hardware.SensorEventListener;\nimport android.hardware.SensorManager;\n\npublic class Hardware {\n    static public SensorEvent lastEvent = null;\n\n    static class AccelListener implements SensorEventListener {\n        public void onSensorChanged(SensorEvent ev) {\n            lastEvent = ev;\n        }\n        public void onAccuracyChanged(Sensor sensor , int accuracy) {\n        }\n    }\n\n    static AccelListener accelListener = new AccelListener();\n\n    static void accelerometerEnable(boolean enable) {\n        Context context = (Context) PythonActivity.mActivity;\n        SensorManager sm = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);\n        Sensor accel = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n\n        if (accel == null)\n            return;\n\n        if (enable)\n            sm.registerListener(accelListener, accel, SensorManager.SENSOR_DELAY_GAME);\n        else\n            sm.unregisterListener(accelListener, accel);\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom jnius import autoclass\n\nHardware = autoclass('org.myapp.Hardware')\n\n# activate the accelerometer\nHardware.accelerometerEnable(True)\n\n# read it\nfor i in xrange(20):\n    lastEvent = Hardware.lastEvent\n    if not lastEvent:\n        continue\n    print(lastEvent.values)\n    sleep(.1)\n\n# don't forget to deactivate it\nHardware.accelerometerEnable(False)\n```\n\n----------------------------------------\n\nTITLE: Playing Audio with Android MediaPlayer\nDESCRIPTION: Example of playing audio files using Android's MediaPlayer class. Demonstrates basic audio playback functionality.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import autoclass\nfrom time import sleep\n\n# get the MediaPlayer java class\nMediaPlayer = autoclass('android.media.MediaPlayer')\n\n# create our player\nmPlayer = MediaPlayer()\nmPlayer.setDataSource('/sdcard/testrecorder.3gp')\nmPlayer.prepare()\n\n# play\nprint('duration:', mPlayer.getDuration())\nmPlayer.start()\nprint('current position:', mPlayer.getCurrentPosition())\nsleep(5)\n\n# then after the play:\nmPlayer.release()\n```\n\n----------------------------------------\n\nTITLE: Implementing Text-to-Speech with Android TTS\nDESCRIPTION: Example of using Android's TextToSpeech class to convert text to speech in different languages.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import autoclass\nLocale = autoclass('java.util.Locale')\nPythonActivity = autoclass('org.kivy.android.PythonActivity')\nTextToSpeech = autoclass('android.speech.tts.TextToSpeech')\ntts = TextToSpeech(PythonActivity.mActivity, None)\n\n# Play something in english\ntts.setLanguage(Locale.US)\ntts.speak('Hello World.', TextToSpeech.QUEUE_FLUSH, None)\n\n# Queue something in french\ntts.setLanguage(Locale.FRANCE)\ntts.speak('Bonjour tout le monde.', TextToSpeech.QUEUE_ADD, None)\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with Android MediaRecorder\nDESCRIPTION: Implementation of audio recording using Android's MediaRecorder class. Records a 5-second audio clip in 3GPP format.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import autoclass\nfrom time import sleep\n\n# get the needed Java classes\nMediaRecorder = autoclass('android.media.MediaRecorder')\nAudioSource = autoclass('android.media.MediaRecorder$AudioSource')\nOutputFormat = autoclass('android.media.MediaRecorder$OutputFormat')\nAudioEncoder = autoclass('android.media.MediaRecorder$AudioEncoder')\n\n# create out recorder\nmRecorder = MediaRecorder()\nmRecorder.setAudioSource(AudioSource.MIC)\nmRecorder.setOutputFormat(OutputFormat.THREE_GPP)\nmRecorder.setOutputFile('/sdcard/testrecorder.3gp')\nmRecorder.setAudioEncoder(AudioEncoder.AMR_NB)\nmRecorder.prepare()\n\n# record 5 seconds\nmRecorder.start()\nsleep(5)\nmRecorder.stop()\nmRecorder.release()\n```\n\n----------------------------------------\n\nTITLE: Accessing Android Activity and Launching Intents\nDESCRIPTION: Shows how to access the current Android Activity and launch a web browser intent using PyJNIus.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import cast\nfrom jnius import autoclass\n\n# import the needed Java class\nPythonActivity = autoclass('org.kivy.android.PythonActivity')\nIntent = autoclass('android.content.Intent')\nUri = autoclass('android.net.Uri')\n\n# create the intent\nintent = Intent()\nintent.setAction(Intent.ACTION_VIEW)\nintent.setData(Uri.parse('http://kivy.org'))\n\ncurrentActivity = cast('android.app.Activity', PythonActivity.mActivity)\ncurrentActivity.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Getting Screen DPI with Android DisplayMetrics\nDESCRIPTION: Example showing how to access device screen DPI using Android's DisplayMetrics class through PyJNIus.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/android.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import autoclass\nDisplayMetrics = autoclass('android.util.DisplayMetrics')\nmetrics = DisplayMetrics()\nprint('DPI', metrics.getDeviceDensity())\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Java Classes with PyJNIus\nDESCRIPTION: Shows how to access nested Java classes using the '$' separator in the class name. This example demonstrates accessing the Android Build.VERSION class.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nversion = autoclass(\"android.os.Build$VERSION\")\nbase_os = version.BASE_OS\n```\n\n----------------------------------------\n\nTITLE: Inspecting Java Method Signatures in PyJNIus\nDESCRIPTION: This code shows how to use the 'signatures' method to inspect the discovered signatures of a Java method in PyJNIus.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> String = autoclass('java.lang.String')\n>>> dir(String)\n['CASE_INSENSITIVE_ORDER', '__class__', '_JavaClass__cls_storage', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__javaclass__', '__javaconstructor__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pyx_vtable__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'charAt', 'checkBounds', 'clone', 'codePointAt', 'codePointBefore', 'codePointCount', 'compareTo', 'compareToIgnoreCase', 'concat', 'contains', 'contentEquals', 'copyValueOf', 'empty', 'endsWith', 'equals', 'equalsIgnoreCase', 'finalize', 'format', 'getBytes', 'getChars', 'getClass', 'hashCode', 'indexOf', 'indexOfSupplementary', 'intern', 'isEmpty', 'join', 'lastIndexOf', 'lastIndexOfSupplementary', 'length', 'matches', 'nonSyncContentEquals', 'notify', 'notifyAll', 'offsetByCodePoints', 'regionMatches', 'registerNatives', 'replace', 'replaceAll', 'replaceFirst', 'split', 'startsWith', 'subSequence', 'substring', 'toCharArray', 'toLowerCase', 'toString', 'toUpperCase', 'trim', 'valueOf', 'wait']\n>>> String.format.signatures()\n[(['java/util/Locale', 'java/lang/String', 'java/lang/Object...'], 'java/lang/String'), (['java/lang/String', 'java/lang/Object...'], 'java/lang/String')]\n```\n\n----------------------------------------\n\nTITLE: Configuring PyInstaller Spec File for PyJNIus\nDESCRIPTION: This snippet shows a PyInstaller spec file configuration for packaging a PyJNIus application. It includes the necessary settings and highlights the importance of adding 'jnius_config' to the hiddenimports list to avoid import errors.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/packaging.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# -*- mode: python -*-\n\nblock_cipher = None\n\n\na = Analysis(\n    ['main.py'],\n    pathex=['<some path to main.py folder>'],\n    binaries=None,\n    datas=None,\n    hiddenimports=['jnius_config'],\n    hookspath=[],\n    runtime_hooks=[],\n    excludes=[],\n    win_no_prefer_redirects=False,\n    win_private_assemblies=False,\n    cipher=block_cipher\n)\n\npyz = PYZ(\n    a.pure,\n    a.zipped_data,\n    cipher=block_cipher\n)\n\nexe = EXE(\n    pyz,\n    a.scripts,\n    exclude_binaries=True,\n    name='main',\n    debug=False,\n    strip=False,\n    upx=True,\n    console=True\n)\n\ncoll = COLLECT(\n    exe,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    strip=False,\n    upx=True,\n    name='main'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PyJNIus Script in Python\nDESCRIPTION: This code snippet demonstrates a basic PyJNIus script that prints the path of the currently used Java installation. It uses the autoclass function to access Java's System class.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/packaging.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jnius import autoclass\n\nif __name__ == '__main__':\n    print(autoclass('java.lang.System').getProperty('java.home'))\n```\n\n----------------------------------------\n\nTITLE: Installing PyJNIus using pip\nDESCRIPTION: This command installs PyJNIus using pip, the Python package installer.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyjnius\n```\n\n----------------------------------------\n\nTITLE: Installing PyJNIus using pip\nDESCRIPTION: Command to install PyJNIus using pip package manager. This should work on Linux, macOS, and Windows platforms.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyjnius\n```\n\n----------------------------------------\n\nTITLE: Installing PyJNIus from Source using pip\nDESCRIPTION: Command to build and install PyJNIus from source code using pip. This process automatically handles Cython installation and compilation requirements.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/building.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Adding PyJNIus to Buildozer requirements\nDESCRIPTION: Specifies how to include PyJNIus in the requirements for a Buildozer project, typically used for building Android apps.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nrequirements = pyjnius\n```\n\n----------------------------------------\n\nTITLE: Adding PyJNIus to Python-for-Android requirements\nDESCRIPTION: Command to include PyJNIus when creating a dist or apk using python-for-android, specifying it in the requirements argument.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\np4a apk --requirements=pyjnius\n```\n\n----------------------------------------\n\nTITLE: Installing PyJNIus using Conda\nDESCRIPTION: Command to install PyJNIus using Conda package manager from the conda-forge channel.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pyjnius\n```\n\n----------------------------------------\n\nTITLE: Installing specific PyJNIus package label with Conda\nDESCRIPTION: Command to install a specific package label (e.g., gcc7) of PyJNIus using Conda package manager from the conda-forge channel.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge/label/gcc7 pyjnius\n```\n\n----------------------------------------\n\nTITLE: Building PyJNIus for Development\nDESCRIPTION: Command to compile the PyJNIus extension within the directory for development purposes using make.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/building.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Running PyJNIus Test Suite\nDESCRIPTION: Command to execute the PyJNIus test suite to verify proper functionality. Requires pytest to be installed in the Python environment.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/building.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake tests\n```\n\n----------------------------------------\n\nTITLE: ReadTheDocs Configuration in YAML\nDESCRIPTION: Configuration file for ReadTheDocs documentation build system, referenced in version 1.6.1 changelog as a new mandatory addition.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.readthedocs.yaml\n```\n\n----------------------------------------\n\nTITLE: Java Code Cleanup in NativeInvocationHandler\nDESCRIPTION: Java code cleanup mentioned in version 1.6.1 changelog for the NativeInvocationHandler.java file.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nNativeInvocationHandler.java\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Lists required Python packages with version constraints. Uses the ~= operator for Sphinx to allow patch version updates, and == for Furo to pin to a specific version.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nSphinx~=7.2.6\nfuro==2024.8.6\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logos and Links using HTML\nDESCRIPTION: This HTML code generates a grid of sponsor logos with links to their websites. It uses OpenCollective's API to dynamically fetch sponsor information and display their avatars.\nSOURCE: https://github.com/kivy/pyjnius/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/kivy/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/3/avatar.svg\"></a>\n\n<a href=\"https://opencollective.com/kivy/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/7/avatar.svg\"></a>\n\n<a href=\"https://opencollective.com/kivy/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/11/avatar.svg\"></a>\n\n<a href=\"https://opencollective.com/kivy/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/kivy/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/kivy/sponsor/15/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: RST Link Declaration for PyJNIus FAQ\nDESCRIPTION: ReStructuredText markup defining a reference link to the PyJNIus FAQ on GitHub\nSOURCE: https://github.com/kivy/pyjnius/blob/master/docs/source/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _faq:\\n\\nFAQ\\n===\\n\\nPyJNIus has an `online FAQ <https://github.com/kivy/pyjnius/blob/master/FAQ.md>`_. It contains the answers to\\nquestions that repeatedly come up.\n```"
  }
]