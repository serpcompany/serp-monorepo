[
  {
    "owner": "auth0",
    "repo": "nextjs-auth0",
    "content": "TITLE: Implementing Auth0 Authentication Middleware in Next.js\nDESCRIPTION: Setting up middleware for handling authentication in a Next.js application with Auth0, including configuration for path matching exceptions.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from \"next/server\"\n\nimport { auth0 } from \"./lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  return await auth0.middleware(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Authentication in a Next.js Component\nDESCRIPTION: Example of a Next.js component that uses Auth0 for authentication, showing both authenticated and unauthenticated user states with login and signup links.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth0 } from \"@/lib/auth0\"\n\nexport default async function Home() {\n  const session = await auth0.getSession()\n\n  if (!session) {\n    return (\n      <main>\n        <a href=\"/auth/login?screen_hint=signup\">Sign up</a>\n        <a href=\"/auth/login\">Log in</a>\n      </main>\n    )\n  }\n\n  return (\n    <main>\n      <h1>Welcome, {session.user.name}!</h1>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Auth0 Login Link with Parameters\nDESCRIPTION: Shows how to create a login link with dynamic authorization parameters using query strings\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/auth/login?audience=urn:my-api\">Login</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Environment Variables\nDESCRIPTION: Required environment variables to be added to .env.local file for configuring Auth0 authentication in a Next.js application.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH0_DOMAIN=\nAUTH0_CLIENT_ID=\nAUTH0_CLIENT_SECRET=\nAUTH0_SECRET=\nAPP_BASE_URL=\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token in NextJS Middleware\nDESCRIPTION: This code snippet shows how to obtain an access token for calling external APIs in NextJS middleware using the auth0.getAccessToken(request, authRes) method. It checks for authentication, redirects unauthenticated users, and retrieves the access token.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  const accessToken = await auth0.getAccessToken(request, authRes)\n\n  // the headers from the auth middleware should always be returned\n  return authRes\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth0 Client Instance in TypeScript\nDESCRIPTION: Creating and exporting an instance of the Auth0 client to be used throughout the application for server-side authentication methods.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Auth0Client } from \"@auth0/nextjs-auth0/server\"\n\nexport const auth0 = new Auth0Client()\n```\n\n----------------------------------------\n\nTITLE: Client-Side User Authentication Status with React Hook\nDESCRIPTION: Demonstrates using the useUser() hook to access authentication state in a client component\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { useUser } from \"@auth0/nextjs-auth0\"\n\nexport default function Profile() {\n  const { user, isLoading, error } = useUser()\n\n  if (isLoading) return <div>Loading...</div>\n\n  return (\n    <main>\n      <h1>Profile</h1>\n      <div>\n        <pre>{JSON.stringify(user, null, 2)}</pre>\n      </div>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Client Authorization Parameters\nDESCRIPTION: Demonstrates how to initialize an Auth0 client with custom authorization parameters for scope and audience\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  authorizationParameters: {\n    scope: \"openid profile email\",\n    audience: \"urn:custom:api\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Middleware in v4\nDESCRIPTION: Demonstrates the new approach in v4 where routes are mounted automatically by the middleware, replacing the need for explicit route handlers.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from \"next/server\"\n\nimport { auth0 } from \"./lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  return await auth0.middleware(request)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Auth Routes with Auth0 Client\nDESCRIPTION: Example of customizing the default authentication routes (login, logout, callback, and back-channel logout) when instantiating the Auth0 client. This allows mapping Auth0 functionality to application-specific URL paths.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Auth0Client } from \"@auth0/nextjs-auth0/server\"\n\nexport const auth0 = new Auth0Client({\n  routes: {\n    login: \"/login\",\n    logout: \"/logout\",\n    callback: \"/callback\",\n    backChannelLogout: \"/backchannel-logout\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Initial User to Auth0Provider in NextJS Root Layout\nDESCRIPTION: This code snippet shows how to wrap components in an Auth0Provider and pass an initial user object from the server. It retrieves the session using auth0.getSession() and provides the user data to child components via the Auth0Provider.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Auth0Provider } from \"@auth0/nextjs-auth0\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  const session = await auth0.getSession()\n\n  return (\n    <html lang=\"en\">\n      <body>\n        <Auth0Provider user={session?.user}>{children}</Auth0Provider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Redirect After Authentication in Next.js\nDESCRIPTION: Demonstrates how to configure the post-authentication redirect URL using startInteractiveLogin with Auth0. The returnTo parameter specifies the destination path after successful authentication.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth0 } from \"./lib/auth0\";\nimport { NextRequest } from \"next/server\";\n\nexport const GET = async (req: NextRequest) => {\n  return auth0.startInteractiveLogin({\n    returnTo: '/dashboard',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using useUser() Hook for Client-Side Authentication in v4\nDESCRIPTION: Demonstrates how to use the useUser() hook for client-side authentication checks in v4, which can be used in place of withPageAuthRequired on the client side.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { useUser } from \"@auth0/nextjs-auth0\"\n\nexport default function Profile() {\n  const { user, isLoading, error } = useUser()\n\n  if (isLoading) return <div>Loading...</div>\n  if (!user) return <div>Not authenticated!</div>\n\n  return (\n    <main>\n      <h1>Profile</h1>\n      <div>\n        <pre>{JSON.stringify(user, null, 2)}</pre>\n      </div>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Client with Static Authorization Parameters\nDESCRIPTION: Example of configuring static authorization parameters when instantiating the Auth0 client, which will be used for all authorization requests. This sets default scopes and API audience values.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  authorizationParameters: {\n    scope: \"openid profile email\",\n    audience: \"urn:custom:api\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Auth0 Access Token Management in Next.js Middleware\nDESCRIPTION: Shows how to handle authentication and access token retrieval in Next.js middleware, including session validation and token refresh handling.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  const accessToken = await auth0.getAccessTokenForConnection({ connection: 'google-oauth2' }, request, authRes)\n\n  // the headers from the auth middleware should always be returned\n  return authRes\n}\n```\n\n----------------------------------------\n\nTITLE: Auth0 Next.js SDK Routes Configuration\nDESCRIPTION: Defines the six core authentication routes provided by the SDK including login, logout, callback, profile, access-token, and backchannel-logout endpoints. These routes handle various authentication flows and user session management.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n1. `/auth/login`: the login route that the user will be redirected to to initiate an authentication transaction\n2. `/auth/logout`: the logout route that must be added to your Auth0 application's Allowed Logout URLs\n3. `/auth/callback`: the callback route that must be added to your Auth0 application's Allowed Callback URLs\n4. `/auth/profile`: the route to check the user's session and return their attributes\n5. `/auth/access-token`: the route to check the user's session and return an access token\n6. `/auth/backchannel-logout`: the route that will receive a `logout_token` when a configured Back-Channel Logout initiator occurs\n```\n\n----------------------------------------\n\nTITLE: Advanced Auth0 Middleware with Header Propagation in Next.js\nDESCRIPTION: Implements middleware with header propagation to prevent unnecessary token refreshes when using both middleware and API routes or getServerSideProps.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  const accessToken = await auth0.getAccessTokenForConnection({ connection: 'google-oauth2' }, request, authRes)\n\n  // create a new response with the updated request headers\n  const resWithCombinedHeaders = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  })\n\n  // set the response headers (set-cookie) from the auth response\n  authRes.headers.forEach((value, key) => {\n    resWithCombinedHeaders.headers.set(key, value)\n  })\n\n  // the headers from the auth middleware should always be returned\n  return resWithCombinedHeaders\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Implementation\nDESCRIPTION: Shows how to implement authentication checks in NextJS middleware\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  // the headers from the auth middleware should always be returned\n  return authRes\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Access Token in Next.js Pages Router\nDESCRIPTION: Demonstrates access token retrieval in Pages Router API routes using getAccessTokenForConnection with request and response objects.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<{ message: string }>\n) {\n  try {\n    const token = await auth0.getAccessTokenForConnection({ connection: 'google-oauth2' }, req, res)\n  } catch (err) {\n    // err will be an instance of AccessTokenError if an access token could not be obtained\n  }\n\n  res.status(200).json({ message: \"Success!\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Authentication in Pages Router\nDESCRIPTION: Demonstrates authentication checking using getServerSideProps in the Pages Router\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { GetServerSideProps, InferGetServerSidePropsType } from \"next\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport const getServerSideProps = (async (ctx) => {\n  const session = await auth0.getSession(ctx.req)\n\n  if (!session) return { props: { user: null } }\n\n  return { props: { user: session.user ?? null } }\n}) satisfies GetServerSideProps<{ user: any | null }>\n\nexport default function Page({\n  user,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  if (!user) {\n    return (\n      <main>\n        <p>Not authenticated!</p>\n      </main>\n    )\n  }\n\n  return (\n    <main>\n      <p>Welcome, {user.name}!</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Auth0 Middleware with Other Middleware in Next.js\nDESCRIPTION: Example of combining Auth0 middleware with other custom middleware in a Next.js application. This implementation routes auth-related paths to Auth0 middleware while preserving headers needed for authentication across other middleware responses.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function middleware(request: NextRequest) {\n  const authResponse = await auth0.middleware(request)\n\n  // if path starts with /auth, let the auth middleware handle it\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authResponse\n  }\n\n  // call any other middleware here\n  const someOtherResponse = await someOtherMiddleware(request)\n\n  // add any headers from the auth middleware to the response\n  for (const [key, value] of authResponse.headers) {\n    someOtherResponse.headers.set(key, value)\n  }\n\n  return someOtherResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Authentication Check in App Router\nDESCRIPTION: Shows how to verify authentication status and access user session in a Server Component\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth0 } from \"@/lib/auth0\"\n\nexport default async function Home() {\n  const session = await auth0.getSession()\n\n  if (!session) {\n    return <div>Not authenticated</div>\n  }\n\n  return (\n    <main>\n      <h1>Welcome, {session.user.name}!</h1>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ID Token from Session\nDESCRIPTION: Demonstrates how to access the ID token from an authenticated session\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = await auth0.getSession();\nconst idToken = session.tokenSet.idToken;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token in NextJS Pages API Route\nDESCRIPTION: This snippet demonstrates how to obtain an access token for calling external APIs in a NextJS Pages API route using the auth0.getAccessToken(req, res) method. It handles potential errors and returns a JSON response.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<{ message: string }>\n) {\n  try {\n    const token = await auth0.getAccessToken(req, res)\n    // call external API with token...\n  } catch (err) {\n    // err will be an instance of AccessTokenError if an access token could not be obtained\n  }\n\n  res.status(200).json({ message: \"Success!\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Session Update in Pages Router API Route\nDESCRIPTION: Demonstrates how to update session data in a Pages Router API route\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\ntype ResponseData =\n  | {}\n  | {\n      error: string\n    }\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  const session = await auth0.getSession(req)\n\n  if (!session) {\n    return res.status(401).json({ error: \"Unauthorized\" })\n  }\n\n  await auth0.updateSession(req, res, {\n    ...session,\n    updatedAt: Date.now(),\n  })\n\n  res.status(200).json({})\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token in Client-Side NextJS Component\nDESCRIPTION: This snippet demonstrates how to obtain an access token for calling external APIs on the client-side using the getAccessToken() helper function from @auth0/nextjs-auth0. It handles potential errors and provides a button to trigger the token retrieval.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { getAccessToken } from \"@auth0/nextjs-auth0\"\n\nexport default function Component() {\n  async function fetchData() {\n    try {\n      const token = await getAccessToken()\n      // call external API with token...\n    } catch (err) {\n      // err will be an instance of AccessTokenError if an access token could not be obtained\n    }\n  }\n\n  return (\n    <main>\n      <button onClick={fetchData}>Fetch Data</button>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Authorization Parameters for Interactive Login\nDESCRIPTION: Example of customizing authorization parameters when calling startInteractiveLogin programmatically. This allows setting request-specific parameters like scope and audience for individual authentication attempts.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth0 } from \"./lib/auth0\";\nimport { NextRequest } from \"next/server\";\n\nexport const GET = async (req: NextRequest) => {\n  // Call startInteractiveLogin with optional parameters\n  return auth0.startInteractiveLogin({\n    authorizationParameters: {\n      scope: \"openid profile email\",\n      audience: \"urn:custom:api\",\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token in NextJS Server Route\nDESCRIPTION: This code snippet shows how to obtain an access token for calling external APIs in a NextJS server route using the auth0.getAccessToken() method. It handles potential errors and returns a JSON response.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function GET() {\n  try {\n    const token = await auth0.getAccessToken()\n    // call external API with token...\n  } catch (err) {\n    // err will be an instance of AccessTokenError if an access token could not be obtained\n  }\n\n  return NextResponse.json({\n    message: \"Success!\",\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Settings for Auth0 Client\nDESCRIPTION: Example of configuring session behavior including rolling sessions, absolute duration, and inactivity duration. These settings control when sessions expire and how they are extended through user activity.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  session: {\n    rolling: true,\n    absoluteDuration: 60 * 60 * 24 * 30, // 30 days in seconds\n    inactivityDuration: 60 * 60 * 24 * 7, // 7 days in seconds\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Access Token in Next.js App Router\nDESCRIPTION: Shows how to obtain an access token for a specific connection using getAccessTokenForConnection in a server route. Includes error handling for access token retrieval failures.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function GET() {\n  try {\n    const token = await auth0.getAccessTokenForConnection({ connection: 'google-oauth2' })\n    // call external API with token...\n  } catch (err) {\n    // err will be an instance of AccessTokenError if an access token could not be obtained\n  }\n\n  return NextResponse.json({\n    message: \"Success!\",\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 401 Handler in Auth0 NextJS SDK\nDESCRIPTION: This code snippet shows how to implement a custom 401 (Unauthorized) handler in the Auth0 NextJS SDK v3. It uses the handleAuth function to define a custom response for unauthorized requests.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V3_MIGRATION_GUIDE.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuth } from \"@auth0/nextjs-auth0\"\n\nexport default handleAuth({\n  \"401\"(_req, res) {\n    res.status(401).json({\n      error: \"not_authenticated\",\n      description:\n        \"The user does not have an active session or is not authenticated\",\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatically Starting Interactive Login with Auth0\nDESCRIPTION: Example of programmatically initiating the Auth0 login process from a Next.js route handler without redirecting to the built-in auth/login endpoint. This provides more control over when authentication flows are triggered.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth0 } from \"./lib/auth0\";\nimport { NextRequest } from \"next/server\";\n\nexport const GET = async (req: NextRequest) => {\n  return auth0.startInteractiveLogin();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring default handlers in Auth0 Next.js SDK v2\nDESCRIPTION: New ability to configure default handlers in the Auth0 Next.js SDK. V2 allows passing options to default handlers or creating new handlers based on configurations.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default handleAuth({\n  login: async (req, res) => {\n    try {\n      await handleLogin(req, res, {\n        authorizationParams: { connection: \"github\" },\n      })\n    } catch (error) {\n      // ...\n    }\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default handleAuth({\n  login: handleLogin({\n    authorizationParams: { connection: \"github\" },\n  }),\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default handleAuth({\n  login: handleLogin((req) => {\n    return {\n      authorizationParams: { connection: \"github\" },\n    }\n  }),\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default handleAuth({\n  // Creates /api/auth/signup\n  signup: handleLogin({\n    authorizationParams: { screen_hint: \"signup\" },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Sessions with Custom SessionStore\nDESCRIPTION: Example of implementing a custom session store to persist user sessions in a database instead of cookies. This requires implementing get, set, delete, and optionally deleteByLogoutToken methods for session management.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  sessionStore: {\n    async get(id) {\n      // query and return a session by its ID\n    },\n    async set(id, sessionData) {\n      // upsert the session given its ID and sessionData\n    },\n    async delete(id) {\n      // delete the session using its ID\n    },\n    async deleteByLogoutToken({ sid, sub }: { sid: string; sub: string }) {\n      // optional method to be implemented when using Back-Channel Logout\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Improved afterCallback with response handling in Auth0 Next.js SDK v2\nDESCRIPTION: Enhanced afterCallback function that can write to the response. V2 allows terminating the request or setting redirect headers directly in afterCallback.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst afterCallback = (req, res, session, state) => {\n  if (session.user.isAdmin) {\n    return session;\n  } else {\n    res.status(401).end('User is not admin');\n  }\n}; // 💥 Fails with ERR_HTTP_HEADERS_SENT\n\nconst afterCallback = (req, res, session, state) => {\n  if (!session.user.isAdmin) {\n    res.setHeader('Location', '/admin');\n  }\n  return session;\n}; // 💥 Fails with ERR_HTTP_HEADERS_SENT\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst afterCallback = (req, res, session, state) => {\n  if (session.user.isAdmin) {\n    return session;\n  } else {\n    res.status(401).end('User is not admin');\n  }\n}; // Terminates the request with 401 if user is not admin\n\nconst afterCallback = (req, res, session, state) => {\n  if (!session.user.isAdmin) {\n    res.setHeader('Location', '/admin');\n  }\n  return session;\n}; // Redirects to `/admin` if user is admin\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom onCallback Hook with Auth0 Client in TypeScript\nDESCRIPTION: Example of a custom onCallback hook implementation that handles error redirection and successful authentication callback processing with NextResponse. The hook receives error, context, and session parameters and must return a Promise that resolves to a NextResponse.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  async onCallback(error, context, session) {\n    // redirect the user to a custom error page\n    if (error) {\n      return NextResponse.redirect(\n        new URL(`/error?error=${error.message}`, process.env.APP_BASE_URL)\n      )\n    }\n\n    // complete the redirect to the provided returnTo URL\n    return NextResponse.redirect(\n      new URL(context.returnTo || \"/\", process.env.APP_BASE_URL)\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing custom error handling in Auth0 Next.js SDK v2\nDESCRIPTION: Improved error handling with a centralized onError handler for auth routes. V2 allows setting a default error handler for all auth routes instead of implementing it in each route.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default handleAuth({\n  async login(req, res) {\n    try {\n      await handleLogin(req, res)\n    } catch (error) {\n      errorLogger(error)\n      res.status(error.status || 500).end()\n    }\n  },\n  async callback(req, res) {\n    try {\n      await handleLogin(req, res)\n    } catch (error) {\n      errorLogger(error)\n      res.status(error.status || 500).end()\n    }\n  },\n  // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default handleAuth({\n  onError(req, res, error) {\n    errorLogger(error)\n    // You can finish the response yourself if you want to customize\n    // the status code or redirect the user\n    // res.writeHead(302, {\n    //     Location: '/custom-error-page'\n    // });\n    // res.end();\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSessionSaved Hook in Auth0 Client Configuration\nDESCRIPTION: This snippet demonstrates how to use the beforeSessionSaved hook in the Auth0 client configuration. It allows modifying the session claims before they are persisted, adding custom properties to the user object.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  async beforeSessionSaved(session, idToken) {\n    return {\n      ...session,\n      user: {\n        ...session.user,\n        foo: \"bar\",\n      },\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Removing getServerSidePropsWrapper in Auth0 Next.js SDK v2\nDESCRIPTION: Removal of getServerSidePropsWrapper in favor of direct getServerSideProps usage. With explicit session updates in v2, wrapping getServerSideProps is no longer necessary.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getServerSideProps = getServerSidePropsWrapper((ctx) => {\n  const session = getSession(ctx.req, ctx.res)\n  if (session) {\n    // User is authenticated\n  } else {\n    // User is not authenticated\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getServerSideProps = async (ctx) => {\n  const session = await getSession(ctx.req, ctx.res)\n  if (session) {\n    // User is authenticated\n  } else {\n    // User is not authenticated\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Propagating Session Updates in NextJS Pages Router Middleware\nDESCRIPTION: This code snippet shows how to propagate session updates made in middleware to the request object when using the Pages Router. It creates a new response with combined headers to ensure session updates are accessible within the same request.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  await auth0.updateSession(request, authRes, {\n    ...session,\n    user: {\n      ...session.user,\n      // add custom user data\n      updatedAt: Date.now(),\n    },\n  })\n\n  // create a new response with the updated request headers\n  const resWithCombinedHeaders = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  })\n\n  // set the response headers (set-cookie) from the auth response\n  authRes.headers.forEach((value, key) => {\n    resWithCombinedHeaders.headers.set(key, value)\n  })\n\n  // the headers from the auth middleware should always be returned\n  return resWithCombinedHeaders\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating useUser and withPageAuthRequired to /client export in Auth0 Next.js SDK v2\nDESCRIPTION: Migration of client-side hook useUser and HOC withPageAuthRequired to /client imports, while keeping server-side withPageAuthRequired in the root export.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.js\nimport { useUser } from \"@auth0/nextjs-auth0\"\n\nexport default function Index() {\n  const { user, error, isLoading } = useUser()\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>{error.message}</div>\n\n  if (user) {\n    return (\n      <div>\n        Welcome {user.name}! <a href=\"/api/auth/logout\">Logout</a>\n      </div>\n    )\n  }\n\n  return <a href=\"/api/auth/login\">Login</a>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.js\n\n// The SSR version of withPageAuthRequired is still in the root export\nimport { withPageAuthRequired as withPageAuthRequiredSSR } from \"@auth0/nextjs-auth0\"\nimport {\n  useUser,\n  withPageAuthRequired as withPageAuthRequiredCSR,\n} from \"@auth0/nextjs-auth0/client\"\n\nexport default withPageAuthRequiredCSR(function Index() {\n  const { user, error, isLoading } = useUser()\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>{error.message}</div>\n\n  if (user) {\n    return (\n      <div>\n        Welcome {user.name}! <a href=\"/api/auth/logout\">Logout</a>\n      </div>\n    )\n  }\n\n  return <a href=\"/api/auth/login\">Login</a>\n})\n\nexport const getServerSideProps = withPageAuthRequiredSSR()\n```\n\n----------------------------------------\n\nTITLE: Updating Session in NextJS Middleware with Auth0\nDESCRIPTION: This snippet demonstrates how to update the session of an authenticated user in NextJS middleware using the auth0.updateSession() method. It checks for authentication, redirects unauthenticated users, and adds custom user data to the session.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  await auth0.updateSession(request, authRes, {\n    ...session,\n    user: {\n      ...session.user,\n      // add custom user data\n      updatedAt: Date.now(),\n    },\n  })\n\n  // the headers from the auth middleware should always be returned\n  return authRes\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAccessToken - After (v1.x)\nDESCRIPTION: Example of how to use the new getAccessToken method in version 1.x of the Auth0 NextJS SDK.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/shows.js\nimport auth0 from \"../../lib/auth0\"\n\nexport default async function shows(req, res) {\n  const { accessToken } = await auth0.getAccessToken(req, res, {\n    scopes: [\"read:shows\"],\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Session Update in App Router\nDESCRIPTION: Shows how to update the session data in a Server Route or Server Action\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function GET() {\n  const session = await auth0.getSession()\n\n  if (!session) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n  }\n\n  await auth0.updateSession({\n    ...session,\n    updatedAt: Date.now(),\n  })\n\n  return NextResponse.json(null, { status: 200 })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getSession - After (v1.x)\nDESCRIPTION: Example of how to use the getSession method in version 1.x of the Auth0 NextJS SDK. It now requires both request and response arguments.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/shows.js\nimport auth0 from \"../../lib/auth0\"\n\nexport default function shows(req, res) {\n  const session = auth0.getSession(req, res) // Note: the extra argument\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Auth0 Middleware Configuration with Matchers\nDESCRIPTION: Shows the complete middleware configuration required in v4, including the matcher patterns to exclude static assets and other non-application routes.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// middleware.ts\n\nimport type { NextRequest } from \"next/server\"\n\nimport { auth0 } from \"./lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  return await auth0.middleware(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using handleLogout - After (v1.x)\nDESCRIPTION: Example of how to use the handleLogout method in version 1.x of the Auth0 NextJS SDK. Note the change from 'redirectTo' to 'returnTo'.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/logout.js\nimport auth0 from \"../../utils/auth0\"\n\nexport default async function logout(req, res) {\n  try {\n    await auth0.handleLogout(req, res, {\n      returnTo: \"/custom-url\",\n    })\n  } catch (error) {\n    console.error(error)\n    res.status(error.status || 500).end(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication with getSession() in v4\nDESCRIPTION: Shows how to use the getSession() method to check if a user is authenticated on the server-side, which replaces the withPageAuthRequired wrapper from v3.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Page() {\n  const session = await getSession()\n\n  if (!session) {\n    // the user will be redirected to authenticate and then taken to the\n    // /dashboard route after successfully being authenticated\n    return redirect('/auth/login?returnTo=/dashboard')\n  }\n\n  return <h1>Hello, {session.user.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Using handleCallback - Before (v0.x)\nDESCRIPTION: Example of how to use the handleCallback method in version 0.x of the Auth0 NextJS SDK.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/callback.js\nimport auth0 from \"../../utils/auth0\"\n\nexport default async function callback(req, res) {\n  try {\n    await auth0.handleCallback(req, res, {\n      async onUserLoaded(req, res, session, state) {\n        return session\n      },\n    })\n  } catch (error) {\n    console.error(error)\n    res.status(error.status || 500).end(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Auth0 Middleware in v4\nDESCRIPTION: Demonstrates how to implement route protection in v4 using the getSession() handler in the middleware, which replaces the previous withPageAuthRequired approach.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  // authentication routes — let the middleware handle it\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const { origin } = new URL(request.url)\n  const session = await auth0.getSession()\n\n  // user does not have a session — redirect to login\n  if (!session) {\n    return NextResponse.redirect(`${origin}/auth/login`)\n  }\n\n  return authRes\n}\n```\n\n----------------------------------------\n\nTITLE: Using handleLogout - Before (v0.x)\nDESCRIPTION: Example of how to use the handleLogout method in version 0.x of the Auth0 NextJS SDK.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/logout.js\nimport auth0 from \"../../utils/auth0\"\n\nexport default async function logout(req, res) {\n  try {\n    await auth0.handleLogout(req, res, {\n      redirectTo: \"/custom-url\",\n    })\n  } catch (error) {\n    console.error(error)\n    res.status(error.status || 500).end(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Authorization Parameters Configuration in v4\nDESCRIPTION: Shows how to statically configure authorization parameters when initializing the Auth0 SDK in v4, providing an alternative to the query string approach.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = new Auth0Client({\n  authorizationParameters: {\n    scope: \"openid profile email\",\n    audience: \"urn:custom:api\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 NextJS SDK - Before (v0.x)\nDESCRIPTION: Example of how to configure the Auth0 NextJS SDK in version 0.x. It shows the old configuration options and structure.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initAuth0 } from \"@auth0/nextjs-auth0\"\n\nexport default initAuth0({\n  domain: \"my-tenant.auth0.com\",\n  clientId: \"MY_CLIENT_ID\",\n  clientSecret: \"MY_CLIENT_SECRET\",\n  scope: \"openid profile\",\n  audience: \"MY_AUDIENCE\",\n  redirectUri: \"http://localhost:3000/api/callback\",\n  postLogoutRedirectUri: \"http://localhost:3000/\",\n  session: {\n    cookieSecret: \"some_very_long_secret_string\",\n    cookieLifetime: 60 * 60 * 8,\n    storeIdToken: false,\n    storeRefreshToken: false,\n    storeAccessToken: false,\n  },\n  oidcClient: {\n    clockTolerance: 10000,\n    httpTimeout: 2500,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Authorization Parameters via Query String in v4\nDESCRIPTION: Demonstrates how to pass authorization parameters in v4 by appending them to the query parameter of the login endpoint, which will be automatically forwarded to the /authorize endpoint.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/auth/login?audience=urn:my-api\">Login</a>\n```\n\n----------------------------------------\n\nTITLE: Generating Session Cookie for Testing Auth0 Authentication\nDESCRIPTION: Example of using the generateSessionCookie helper function to create a session cookie value for testing authentication flows. This helper can simulate authenticated sessions for test environments.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateSessionCookie } from \"@auth0/nextjs-auth0/testing\"\n\nconst sessionCookieValue = await generateSessionCookie(\n  {\n    user: {\n      sub: \"user_123\",\n    },\n    tokenSet: {\n      accessToken: \"at_123\",\n      refreshToken: \"rt_123\",\n      expiresAt: 123456789,\n    },\n  },\n  {\n    secret: process.env.AUTH0_SECRET!,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Legacy Auth Route Handler from v3\nDESCRIPTION: Shows the legacy implementation of route handling in Auth0 SDK v3 where a dynamic Route Handler was required to mount authentication endpoints.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuth } from \"@auth0/nextjs-auth0\"\n\nexport const GET = handleAuth()\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/e2e/test-app/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Setting Required Environment Variables in Auth0 SDK v4\nDESCRIPTION: Lists the required environment variables for the Auth0 SDK v4, highlighting the changes from v3 such as AUTH0_BASE_URL being renamed to APP_BASE_URL and AUTH0_ISSUER_BASE_URL being renamed to AUTH0_DOMAIN.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH0_DOMAIN\nAUTH0_CLIENT_ID\nAUTH0_CLIENT_SECRET\nAUTH0_SECRET\nAPP_BASE_URL\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building the Project (Shell)\nDESCRIPTION: Commands for installing project dependencies, building the project, and watching for changes during development.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run build\npnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Migrating UserProvider to /client export in Auth0 Next.js SDK v2\nDESCRIPTION: Migration of UserProvider import from root export to /client in _app.js. The v2 SDK requires importing client-side components from the /client path.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport React from \"react\"\nimport { UserProvider } from \"@auth0/nextjs-auth0\"\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <UserProvider>\n      <Component {...pageProps} />\n    </UserProvider>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport React from \"react\"\nimport { UserProvider } from \"@auth0/nextjs-auth0/client\"\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <UserProvider>\n      <Component {...pageProps} />\n    </UserProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Serving API Documentation (Shell)\nDESCRIPTION: Commands for generating API documentation and serving it locally using http-server.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run docs\nnpx http-server docs\n```\n\n----------------------------------------\n\nTITLE: Using getSession with Promises in Auth0 Next.js SDK v2\nDESCRIPTION: Migration of getSession from synchronous to asynchronous Promise-based usage in API routes. The v2 version requires awaiting the Promise returned by getSession.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/api/my-api\nimport { getSession } from \"@auth0/nextjs-auth0\"\n\nfunction myApiRoute(req, res) {\n  const session = getSession(req, res)\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/api/my-api\nimport { getSession } from \"@auth0/nextjs-auth0\"\n\nasync function myApiRoute(req, res) {\n  const session = await getSession(req, res)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 NextJS SDK Beta Version\nDESCRIPTION: Command to install the beta version of the Auth0 NextJS SDK package using npm.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @auth0/nextjs-auth0@beta\n```\n\n----------------------------------------\n\nTITLE: Using updateSession in Auth0 Next.js SDK v2\nDESCRIPTION: Introduction of the new updateSession method for explicitly saving session modifications. Unlike v1 where updates were saved implicitly, v2 requires explicitly calling updateSession.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V2_MIGRATION_GUIDE.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/api/update-user\nimport { getSession } from \"@auth0/nextjs-auth0\"\n\nfunction myApiRoute(req, res) {\n  const session = getSession(req, res)\n  session.foo = \"bar\"\n  res.json({ success: true })\n}\n// The updated session is serialized and the cookie is updated\n// when the cookie headers are written to the response.\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/api/update-user\nimport { getSession, updateSession } from \"@auth0/nextjs-auth0\"\n\nasync function myApiRoute(req, res) {\n  const session = await getSession(req, res)\n  // The session is updated, serialized and the cookie is updated\n  // everytime you call `updateSession`.\n  await updateSession(req, res, {\n    ...session,\n    user: { ...session.user, foo: \"bar\" },\n  })\n  res.json({ success: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Using handleLogin - After (v1.x)\nDESCRIPTION: Example of how to use the handleLogin method in version 1.x of the Auth0 NextJS SDK. Note the changes in parameter names.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/login.js\nimport auth0 from \"../../utils/auth0\"\n\nexport default async function login(req, res) {\n  try {\n    await auth0.handleLogin(req, res, {\n      authorizationParams: {\n        login_hint: \"foo@acme.com\",\n        ui_locales: \"nl\",\n        scope: \"some other scope\",\n        foo: \"bar\",\n      },\n      returnTo: \"/custom-url\",\n    })\n  } catch (error) {\n    console.error(error)\n    res.status(error.status || 500).end(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using handleLogin - Before (v0.x)\nDESCRIPTION: Example of how to use the handleLogin method in version 0.x of the Auth0 NextJS SDK.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/login.js\nimport auth0 from \"../../utils/auth0\"\n\nexport default async function login(req, res) {\n  try {\n    await auth0.handleLogin(req, res, {\n      authParams: {\n        login_hint: \"foo@acme.com\",\n        ui_locales: \"nl\",\n        scope: \"some other scope\",\n        foo: \"bar\",\n      },\n      redirectTo: \"/custom-url\",\n    })\n  } catch (error) {\n    console.error(error)\n    res.status(error.status || 500).end(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getSession - Before (v0.x)\nDESCRIPTION: Example of how to use the getSession method in version 0.x of the Auth0 NextJS SDK.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/shows.js\nimport auth0 from \"../../lib/auth0\"\n\nexport default function shows(req, res) {\n  const session = auth0.getSession(req)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 NextJS SDK - After (v1.x)\nDESCRIPTION: Example of how to configure the Auth0 NextJS SDK in version 1.x. It demonstrates the new configuration options and structure.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initAuth0 } from \"@auth0/nextjs-auth0\"\n\nexport default initAuth0({\n  baseURL: \"http://localhost:3000\",\n  issuerBaseURL: \"https://my-tenant.auth0.com\",\n  clientID: \"MY_CLIENT_ID\",\n  clientSecret: \"MY_CLIENT_SECRET\",\n  secret: \"some_very_long_secret_string\",\n  clockTolerance: 60,\n  httpTimeout: 5000,\n  authorizationParams: {\n    scope: \"openid profile email\",\n    audience: \"MY_AUDIENCE\",\n  },\n  routes: {\n    callback: \"/api/callback\",\n    postLogoutRedirect: \"/\",\n  },\n  session: {\n    rollingDuration: 60 * 60 * 24,\n    absoluteDuration: 60 * 60 * 24 * 7,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using handleCallback - After (v1.x)\nDESCRIPTION: Example of how to use the handleCallback method in version 1.x of the Auth0 NextJS SDK. Note the change from 'onUserLoaded' to 'afterCallback'.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/callback.js\nimport auth0 from \"../../utils/auth0\"\n\nexport default async function callback(req, res) {\n  try {\n    await auth0.handleCallback(req, res, {\n      async afterCallback(req, res, session, state) {\n        return session\n      },\n    })\n  } catch (error) {\n    console.error(error)\n    res.status(error.status || 500).end(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAccessToken - Before (v0.x)\nDESCRIPTION: Example of how to use the tokenCache to get an access token in version 0.x of the Auth0 NextJS SDK.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V1_MIGRATION_GUIDE.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/shows.js\nimport auth0 from \"../../lib/auth0\"\n\nexport default async function shows(req, res) {\n  const tokenCache = auth0.tokenCache(req, res)\n  const { accessToken } = await tokenCache.getAccessToken({\n    scopes: [\"read:shows\"],\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Auth0 NextJS SDK v3 on Next.js 12\nDESCRIPTION: This JavaScript configuration snippet shows how to modify the Webpack config in Next.js 12 to ignore certain modules required by Auth0 NextJS SDK v3. This is necessary because these modules are only available in Next.js 13 and later.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V3_MIGRATION_GUIDE.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpack = require(\"webpack\")\n\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  webpack(config) {\n    config.plugins.push(\n      new webpack.IgnorePlugin({\n        resourceRegExp: /^next\\/(navigation|headers)$/,\n      })\n    )\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Type Annotations for API Handler in Auth0 NextJS SDK\nDESCRIPTION: This snippet demonstrates how to update the type annotations for an API handler when migrating from v2 to v3 of the Auth0 NextJS SDK. It shows the addition of explicit type annotations for the request and response parameters.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V3_MIGRATION_GUIDE.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\"\nimport { withApiAuthRequired } from \"@auth0/nextjs-auth0\"\n\nexport default withApiAuthRequired(async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.status(200).json({})\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Auth0 Secret with OpenSSL\nDESCRIPTION: Command to generate a secure random hexadecimal string using OpenSSL, used for the AUTH0_SECRET environment variable to encrypt session and transaction cookies.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -hex 32\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 Next.js SDK via NPM\nDESCRIPTION: Command to install the Auth0 Next.js SDK package which requires Node.js 20 LTS or newer LTS versions.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @auth0/nextjs-auth0\n```\n\n----------------------------------------\n\nTITLE: Running Tests for nextjs-auth0 (Shell)\nDESCRIPTION: Commands for running unit tests, test coverage, and E2E tests. Note that E2E tests require the TEST_USER_PASSWORD environment variable to be set.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:unit\npnpm run test:coverage\npnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Running Tests for nextjs-auth0\nDESCRIPTION: Commands for running unit tests, test coverage, and E2E tests. Note that E2E tests require the TEST_USER_PASSWORD environment variable to be set.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/docs/media/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:unit\npnpm run test:coverage\npnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building the Project\nDESCRIPTION: Commands for installing dependencies, building the project, and watching for changes during development.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/docs/media/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run build\npnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Generating and Serving API Documentation\nDESCRIPTION: Commands for generating API documentation and serving it locally using http-server.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/docs/media/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run docs\nnpx http-server docs\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/examples/with-next-intl/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/examples/with-shadcn/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Propagating Access Token in NextJS Pages Router Middleware\nDESCRIPTION: This snippet demonstrates how to propagate the access token and headers from middleware to ensure it's accessible in API routes or getServerSideProps when using the Pages Router. It creates a new response with combined headers.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/EXAMPLES.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\"\n\nimport { auth0 } from \"@/lib/auth0\"\n\nexport async function middleware(request: NextRequest) {\n  const authRes = await auth0.middleware(request)\n\n  if (request.nextUrl.pathname.startsWith(\"/auth\")) {\n    return authRes\n  }\n\n  const session = await auth0.getSession(request)\n\n  if (!session) {\n    // user is not authenticated, redirect to login page\n    return NextResponse.redirect(new URL(\"/auth/login\", request.nextUrl.origin))\n  }\n\n  const accessToken = await auth0.getAccessToken(request, authRes)\n\n  // create a new response with the updated request headers\n  const resWithCombinedHeaders = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  })\n\n  // set the response headers (set-cookie) from the auth response\n  authRes.headers.forEach((value, key) => {\n    resWithCombinedHeaders.headers.set(key, value)\n  })\n\n  // the headers from the auth middleware should always be returned\n  return resWithCombinedHeaders\n}\n```\n\n----------------------------------------\n\nTITLE: v3 Custom Authorization Parameters Configuration\nDESCRIPTION: Shows how custom authorization parameters were configured in v3 by specifying a custom handler with the authorizationParams option.\nSOURCE: https://github.com/auth0/nextjs-auth0/blob/main/V4_MIGRATION_GUIDE.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuth, handleLogin } from \"@auth0/nextjs-auth0\"\n\nexport default handleAuth({\n  login: handleLogin({\n    authorizationParams: { audience: \"urn:my-api\" },\n  }),\n})\n```"
  }
]