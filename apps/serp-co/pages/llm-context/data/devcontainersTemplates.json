[
  {
    "owner": "devcontainers",
    "repo": "templates",
    "content": "TITLE: Configuring HTTPS Settings in devcontainer.json for ASP.NET\nDESCRIPTION: This JSON snippet shows how to configure HTTPS settings in the devcontainer.json file for ASP.NET applications. It sets environment variables for the certificate path and password, and specifies the HTTPS protocol for port 5001.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": {\n    \"ASPNETCORE_Kestrel__Certificates__Default__Password\": \"SecurePwdGoesHere\",\n    \"ASPNETCORE_Kestrel__Certificates__Default__Path\": \"${containerEnv:HOME}/.aspnet/https/aspnetapp.pfx\"\n},\n\"portsAttributes\": {\n    \"5001\": {\n        \"protocol\": \"https\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows the PostgreSQL container to be accessible from the host machine on localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jupyter Notebook Auto-Start in devcontainer.json\nDESCRIPTION: JSON configuration to automatically start Jupyter Notebook when the container starts. Uses nohup to keep the server running in the background, with logs directed to nohup.out.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// Use 'postStartCommand' to run commands after the container is created.\n\"postStartCommand\": \"nohup bash -c 'jupyter notebook --ip=0.0.0.0 --port=8888 --allow-root &'\",\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json for HTTPS in ASP.NET\nDESCRIPTION: This JSON snippet shows how to configure devcontainer.json to enable HTTPS in ASP.NET. It sets environment variables for the certificate path and password, and specifies the HTTPS protocol for a specific port.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": {\n    \"ASPNETCORE_Kestrel__Certificates__Default__Password\": \"SecurePwdGoesHere\",\n    \"ASPNETCORE_Kestrel__Certificates__Default__Path\": \"${containerEnv:HOME}/.aspnet/https/aspnetapp.pfx\"\n},\n\"portsAttributs\": {\n    \"5001\": {\n        \"protocol\": \"https\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to use the 'forwardPorts' property in devcontainer.json to make ports available locally. This is recommended for web frameworks and tools that typically only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Exporting Dev Certificate for HTTPS in ASP.NET (Windows PowerShell)\nDESCRIPTION: PowerShell command to export a local dev certificate for enabling HTTPS in ASP.NET on Windows. This creates a trusted certificate and exports it to a specified location with a password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/README.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"$env:USERPROFILE/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Moving Certificate to Correct Location in Dev Container\nDESCRIPTION: Bash command to create the necessary directory and move the exported certificate to the correct location within the Dev Container. This step is crucial after copying the certificate into the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.aspnet/https && mv aspnetapp.pfx $HOME/.aspnet/https\n```\n\n----------------------------------------\n\nTITLE: Setting Up Port Forwarding for Web Frameworks in devcontainer.json\nDESCRIPTION: JSON configuration for forwarding ports from web applications running inside the container. This example shows how to make port 9000 available locally.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies from environment.yml in Dockerfile\nDESCRIPTION: Dockerfile RUN command that automatically installs dependencies from an environment.yml file during container build. This provides a convenient way to define and install all required packages.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN if [ -f \"/tmp/conda-tmp/environment.yml\" ]; then /opt/conda/bin/conda env update -n base -f /tmp/conda-tmp/environment.yml; fi \\\n    && rm -rf /tmp/conda-tmp\n```\n\n----------------------------------------\n\nTITLE: Exporting Dev Certificate for HTTPS in ASP.NET (macOS/Linux)\nDESCRIPTION: This bash command exports a local development certificate for enabling HTTPS in ASP.NET applications on macOS or Linux. It creates a trusted certificate and exports it to a specific location with a password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"${HOME}/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Dev Certificate for HTTPS in ASP.NET (macOS/Linux)\nDESCRIPTION: Terminal command to export a local dev certificate for enabling HTTPS in ASP.NET on macOS or Linux. This creates a trusted certificate and exports it to a specified location with a password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/README.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"${HOME}/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Frameworks in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to configure port forwarding for web frameworks in the devcontainer.json file. It makes port 9000 available locally, which is useful for frameworks that only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Using Dev Container CLI to Apply Templates\nDESCRIPTION: Example command using the Dev Container CLI to apply a C++ template with Debian 12 image variant and adding the Azure CLI feature.\nSOURCE: https://github.com/devcontainers/templates/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer templates apply --workspace-folder . \\\n    --template-id ghcr.io/devcontainers/templates/cpp:latest \\\n    --template-args '{ \"imageVariant\": \"debian-12\" }' \\\n    --features '[{ \"id\": \"ghcr.io/devcontainers/features/azure-cli:1\", \"options\": { \"version\" : \"1\" } }]'\n```\n\n----------------------------------------\n\nTITLE: Exporting HTTPS Dev Certificate in macOS/Linux\nDESCRIPTION: Command to trust and export the ASP.NET HTTPS development certificate to a PFX file in macOS/Linux terminal. The certificate is saved to the user's home directory with a specified password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"${HOME}/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Local Dev Certificate for HTTPS in ASP.NET (macOS/Linux)\nDESCRIPTION: This bash command exports a local development certificate for enabling HTTPS in ASP.NET on macOS or Linux. It trusts the certificate and exports it to a specific location with a secure password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"${HOME}/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows external tools to connect to the PostgreSQL database on the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring the Base Dockerfile for JavaScript Development\nDESCRIPTION: Sample Dockerfile configuration that uses the official Microsoft JavaScript Node.js dev container image as a base. This can be modified to use other Debian/Ubuntu-based images.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Bind Mount in Bash using Environment Variable\nDESCRIPTION: Bash command to run a Docker container with a bind mount, using the LOCAL_WORKSPACE_FOLDER environment variable to reference the host path.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v \"${LOCAL_WORKSPACE_FOLDER//\\\\/\\/}:/workspace\" debian bash\n```\n\n----------------------------------------\n\nTITLE: Exporting Dev Certificate for HTTPS in ASP.NET (macOS/Linux)\nDESCRIPTION: This shell command exports a local dev certificate for enabling HTTPS in ASP.NET on macOS or Linux.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"${HOME}/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding in devcontainer.json for PostgreSQL\nDESCRIPTION: JSON configuration to enable port forwarding for PostgreSQL in the development container, allowing the database to be accessible from the host machine at localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities with Pipx in Miniconda Container\nDESCRIPTION: Example command to install a Python utility (prospector) using pipx in an isolated environment without affecting the global Python installation.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Bind Mount from Inside a Container\nDESCRIPTION: Bash command that demonstrates how to run a Docker container with a bind mount using the environment variable that references the local workspace folder. The command includes path normalization to handle potential backslashes in Windows paths.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v \"${LOCAL_WORKSPACE_FOLDER//\\\\/\\/}:/workspace\" debian bash\n```\n\n----------------------------------------\n\nTITLE: Moving Certificate to Correct Location in Container\nDESCRIPTION: Bash command to create the necessary directory structure and move the certificate file to the correct location within the container. This step is performed after starting the Dev Container and copying the certificate file.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.aspnet/https && mv aspnetapp.pfx $HOME/.aspnet/https\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows external tools to connect to the PostgreSQL database when working with the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies from environment.yml in Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to automatically install dependencies from an environment.yml file when building the container. It checks if the file exists and updates the base Conda environment accordingly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN if [ -f \"/tmp/conda-tmp/environment.yml\" ]; then /opt/conda/bin/conda env update -n base -f /tmp/conda-tmp/environment.yml; fi \\\n    && rm -rf /tmp/conda-tmp\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Bind Mount from Inside Container\nDESCRIPTION: Bash command demonstrating how to run a Docker container with a bind mount that maps the host workspace folder to a path inside the new container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v \"${LOCAL_WORKSPACE_FOLDER//\\\\/\\/}:/workspace\" debian bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications\nDESCRIPTION: This JSON snippet shows how to use the 'forwardPorts' property in devcontainer.json to make ports available locally. This is recommended for web frameworks and tools that typically only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Adding Network Mode for Additional Services in Docker Compose\nDESCRIPTION: This YAML snippet shows how to configure a service in docker-compose.yml to run on the same network as the database container, allowing port forwarding to function correctly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: JSON configuration snippet showing how to use the forwardPorts property to make application ports (e.g., 9000) available locally, which works better than the ports property in cloud environments like Codespaces.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-mongo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Using Docker Run with Proper Bind Mount from Inside Container\nDESCRIPTION: Bash command demonstrating how to use the LOCAL_WORKSPACE_FOLDER environment variable to correctly bind mount the workspace folder when running Docker commands from within the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v \"${LOCAL_WORKSPACE_FOLDER//\\\\/\\/}:/workspace\" debian bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to use the forwardPorts property in devcontainer.json to make ports available locally. This is recommended for web frameworks and tools that only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows access to the PostgreSQL database from the host machine on port 5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Forwarding PostgreSQL Port in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to forward the PostgreSQL port 5432 to the host machine in the devcontainer.json configuration file. This allows external tools to connect to the PostgreSQL database when using the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities with Pipx\nDESCRIPTION: Example command showing how to install Python development utilities using pipx in an isolated environment.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to use the forwardPorts property in devcontainer.json to make container ports available locally, which is crucial for cloud environments like Codespaces.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Forwarding PostgreSQL Port in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to forward the PostgreSQL port (5432) to make it accessible from the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Auto-Installing Dependencies from environment.yml\nDESCRIPTION: Dockerfile snippet that automatically installs dependencies from an environment.yml file during container build, which can be modified to change this behavior.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN if [ -f \"/tmp/conda-tmp/environment.yml\" ]; then /opt/conda/bin/conda env update -n base -f /tmp/conda-tmp/environment.yml; fi \\\n    && rm -rf /tmp/conda-tmp\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities with pipx\nDESCRIPTION: Bash command to install additional Python utilities in isolated environments using pipx, which avoids impacting the global Python environment.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows external tools to connect to the PostgreSQL database when connected to the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Forwarding MongoDB Port in devcontainer.json\nDESCRIPTION: JSON configuration snippet showing how to forward the MongoDB port (27017) to make it accessible from local tools outside the development container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-mongo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"27017\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Port Forwarding in devcontainer.json\nDESCRIPTION: JSON configuration to add port forwarding for Jupyter Notebook in the Dev Container settings. This exposes port 8888 to allow accessing Jupyter from the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Use 'forwardPorts' to make a list of ports inside the container available locally.\n\"forwardPorts\": [8888],\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker in Docker Container Image in devcontainer.json\nDESCRIPTION: Example of how to modify the .devcontainer.json file to use a different Debian/Ubuntu-based container image like Node.js instead of the default image for the Docker in Docker template.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-in-docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json for PostgreSQL\nDESCRIPTION: JSON configuration to enable port forwarding for PostgreSQL in the Dev Container, allowing the database to be accessible from the host machine on port 5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Adding Network Configuration for Additional Services in Docker Compose\nDESCRIPTION: YAML configuration snippet for adding additional services to the Docker Compose file, ensuring they run on the same network as the database container to enable port forwarding.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Options in Markdown Table\nDESCRIPTION: A markdown table showing the available configuration options for the Node.js & JavaScript devcontainer template. It includes the option ID, description, type, and default value.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Node.js version (use -bookworm, -bullseye variants on local arm64/Apple Silicon): | string | 22-bookworm |\n```\n\n----------------------------------------\n\nTITLE: Updating Vcpkg Package Repository in C++ Dev Container\nDESCRIPTION: Command to update the available Vcpkg library packages by pulling the latest changes from the git repository. This ensures the container has access to the most recent package definitions.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd \"${VCPKG_ROOT}\"\ngit pull --ff-only\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: JSON configuration to enable port forwarding for PostgreSQL from the container to the host machine. This allows external tools to connect to the database on localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Adding Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures that the service runs on the same network as the database container, allowing the 'forwardPorts' functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for MongoDB in devcontainer.json\nDESCRIPTION: JSON configuration to forward MongoDB's default port 27017 to allow external tool connections to the database from the local machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-mongo/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"27017\" ]\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Notebook Server in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to add a postStartCommand in devcontainer.json to start a Jupyter notebook server after the container is created. It uses nohup to keep the server running in the background.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Use 'postStartCommand' to run commands after the container is created.\n\"postStartCommand\": \"nohup bash -c 'jupyter notebook --ip=0.0.0.0 --port=8888 --allow-root &'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for MariaDB in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for MariaDB in the devcontainer.json file. It allows the MariaDB container to be accessible from the host machine on localhost:3306.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"3306\" ]\n```\n\n----------------------------------------\n\nTITLE: Adding Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures that the service runs on the same network as the database container, allowing the 'forwardPorts' functionality in devcontainer.json to work correctly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Root in PHP Dev Container (Bash)\nDESCRIPTION: Bash command to set up a symlink from the project directory to Apache's web root. This allows direct serving of project files and can be run from a terminal after the container is started.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod a+x \"$(pwd)\" && sudo rm -rf /var/www/html && sudo ln -s \"$(pwd)\" /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Creating Source Code Symlink for Apache in Terminal\nDESCRIPTION: This Bash command creates a symlink from the current directory to the Apache www folder. It can be executed from a terminal window after the container is up and running.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod a+x \"$(pwd)\" && sudo rm -rf /var/www/html && sudo ln -s \"$(pwd)\" /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows the PostgreSQL container to be accessible from the host machine on localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in Docker Compose\nDESCRIPTION: This YAML snippet shows how to configure the network mode for additional services in the docker-compose.yml file. It ensures the service runs on the same network as the database container, allowing 'forwardPorts' in devcontainer.json to function properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Setting Local Workspace Environment Variable in devcontainer.json\nDESCRIPTION: Configuration for providing access to the host's workspace folder path within the container. This enables proper bind mounting when running Docker commands from within the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": { \"LOCAL_WORKSPACE_FOLDER\": \"${localWorkspaceFolder}\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version in Dockerfile\nDESCRIPTION: Dockerfile RUN command to install Python 3.6 with Conda and reconfigure pipx to work with the new Python version, ensuring utility isolation is maintained.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN conda install -y python=3.6 \\\n    && pip install --no-cache-dir pipx \\\n    && pipx uninstall pipx \\\n    && pipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for MariaDB in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for MariaDB in the devcontainer.json file. It allows the MariaDB container to be accessible from the host machine on localhost:3306.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"3306\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file to ensure they run on the same network as the database container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Forwarding Application Port in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to forward an application port (in this case, 9000) to the host machine in the devcontainer.json configuration. This is recommended for web frameworks and tools that typically only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda (Dockerfile)\nDESCRIPTION: Dockerfile commands for installing a different Python version and updating related utilities.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/README.md#2025-04-17_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN conda install -y python=3.6 \\\n    && pip install --no-cache-dir pipx \\\n    && pipx uninstall pipx \\\n    && pipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This snippet shows how to update the devcontainer.json file to forward the PostgreSQL port 5432, allowing external tools to connect to the database when using the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json for HTTPS in ASP.NET\nDESCRIPTION: JSON configuration to be added to devcontainer.json for enabling HTTPS in ASP.NET. This sets environment variables for the certificate path and password, and configures the HTTPS port.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": {\n    \"ASPNETCORE_Kestrel__Certificates__Default__Password\": \"SecurePwdGoesHere\",\n    \"ASPNETCORE_Kestrel__Certificates__Default__Path\": \"${containerEnv:HOME}/.aspnet/https/aspnetapp.pfx\"\n},\n\"portsAttributes\": {\n    \"5001\": {\n        \"protocol\": \"https\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services\nDESCRIPTION: YAML configuration to ensure additional services run on the same network as the database container. This allows the 'forwardPorts' feature in devcontainer.json to function correctly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICENAME]\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Python Version in Dockerfile\nDESCRIPTION: Dockerfile RUN command to install a different version of Python using Conda. This can be used when customizing the container image during build time.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN conda install -y python=3.6\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for PostgreSQL in DevContainer JSON\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the DevContainer configuration. It allows the database to be accessible from the host machine on localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in devcontainer.json for ASP.NET\nDESCRIPTION: This JSON snippet shows how to configure HTTPS settings in the devcontainer.json file for ASP.NET, including environment variables and port attributes.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": {\n    \"ASPNETCORE_Kestrel__Certificates__Default__Password\": \"SecurePwdGoesHere\",\n    \"ASPNETCORE_Kestrel__Certificates__Default__Path\": \"${containerEnv:HOME}/.aspnet/https/aspnetapp.pfx\"\n},\n\"portsAttributes\": {\n    \"5001\": {\n        \"protocol\": \"https\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda (Terminal)\nDESCRIPTION: Commands for installing a different Python version using conda, including updating pipx and reinstalling utilities.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.6\npip install --no-cache-dir pipx\npipx uninstall pipx\npipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version in Dockerfile\nDESCRIPTION: Dockerfile commands for installing a different Python version and updating pipx within a Docker build process.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN conda install -y python=3.6 \\\n    && pip install --no-cache-dir pipx \\\n    && pipx uninstall pipx \\\n    && pipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Jupyter Notebooks in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to configure port forwarding for Jupyter notebooks in the devcontainer.json file. It adds port 8888 to the forwardPorts array to make the Jupyter notebook accessible from the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Use 'forwardPorts' to make a list of ports inside the container available locally.\n\"forwardPorts\": [8888]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in devcontainer.json for ASP.NET\nDESCRIPTION: This JSON snippet shows how to configure the devcontainer.json file to enable HTTPS for ASP.NET, including environment variables for the certificate path and password, and port attributes for HTTPS.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": {\n    \"ASPNETCORE_Kestrel__Certificates__Default__Password\": \"SecurePwdGoesHere\",\n    \"ASPNETCORE_Kestrel__Certificates__Default__Path\": \"${containerEnv:HOME}/.aspnet/https/aspnetapp.pfx\"\n},\n\"portsAttributs\": {\n    \"5001\": {\n        \"protocol\": \"https\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Root in PHP Dev Container (JSON)\nDESCRIPTION: JSON configuration for the postCreateCommand in devcontainer.json. This command sets up a symlink from the project directory to Apache's web root, allowing direct serving of the project files.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"sudo chmod a+x \\\"$(pwd)\\\" && sudo rm -rf /var/www/html && sudo ln -s \\\"$(pwd)\\\" /var/www/html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Code Symlink in PHP Development Container\nDESCRIPTION: JSON configuration to add a symlink from the source code to the Apache www folder. This is added to the postCreateCommand in the devcontainer.json file.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"sudo chmod a+x \\\"$(pwd)\\\" && sudo rm -rf /var/www/html && sudo ln -s \\\"$(pwd)\\\" /var/www/html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Code Symlink in postCreateCommand\nDESCRIPTION: This JSON snippet shows how to add a symlink from the source code to the Apache www folder using the postCreateCommand in devcontainer.json. This allows direct serving of the project files through Apache.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"sudo chmod a+x \\\"$(pwd)\\\" && sudo rm -rf /var/www/html && sudo ln -s \\\"$(pwd)\\\" /var/www/html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json for HTTPS Support\nDESCRIPTION: JSON configuration to add to the devcontainer.json file for enabling HTTPS support. Sets environment variables for the certificate path and password, and configures port 5001 to use HTTPS protocol.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": {\n    \"ASPNETCORE_Kestrel__Certificates__Default__Password\": \"SecurePwdGoesHere\",\n    \"ASPNETCORE_Kestrel__Certificates__Default__Path\": \"${containerEnv:HOME}/.aspnet/https/aspnetapp.pfx\",\n},\n\"portsAttributes\": {\n    \"5001\": {\n        \"protocol\": \"https\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: JSON configuration for forwarding ports from the container to the local machine, which is necessary for accessing web services running inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Code Symlink in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to configure a symlink from the source code to the Apache www folder in the devcontainer.json file. It's added to the postCreateCommand to set up the symlink automatically when the container is created.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"sudo chmod a+x \\\"$(pwd)\\\" && sudo rm -rf /var/www/html && sudo ln -s \\\"$(pwd)\\\" /var/www/html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures that the service runs on the same network as the database container, allowing the 'forwardPorts' functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Exporting Local Dev Certificate for HTTPS in ASP.NET (Windows PowerShell)\nDESCRIPTION: This PowerShell command exports a local development certificate for enabling HTTPS in ASP.NET. It trusts the certificate and exports it to a specific location with a secure password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/README.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"$env:USERPROFILE/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet shows how to configure the network mode for additional services in the docker-compose.yml file. It ensures the service runs on the same network as the database container, allowing forwardPorts to function properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: JSON configuration to forward PostgreSQL port 5432 from the dev container to the host machine. This allows external tools to connect to the database when using the dev container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures that the service runs on the same network as the database container, allowing the 'forwardPorts' functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Exporting Dev Certificate for HTTPS in ASP.NET (Windows PowerShell)\nDESCRIPTION: This PowerShell command exports a local development certificate for enabling HTTPS in ASP.NET applications. It creates a trusted certificate and exports it to a specific location with a password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"$env:USERPROFILE/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Setting Post-Create Commands in devcontainer.json\nDESCRIPTION: JSON configuration to specify commands that should run after the container is created. This example shows how to check the installed versions of g++ and git.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"postCreateCommand\": \"g++ --version && git --version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: JSON configuration to forward the PostgreSQL port to the host machine, enabling external tools to connect to the database running in the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. This ensures the service runs on the same network as the database container and allows the forwardPorts functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Exporting HTTPS Dev Certificate for ASP.NET in Windows PowerShell\nDESCRIPTION: This PowerShell command exports a local development certificate for HTTPS in ASP.NET, trusting it and saving it to a specified location with a password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"$env:USERPROFILE/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures the service runs on the same network as the database container, allowing the 'forwardPorts' feature in devcontainer.json to function properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. This allows the database to be accessible from the host machine on localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: YAML configuration for adding services to the docker-compose.yml file. This setting ensures services run on the same network as the database container, enabling localhost access and port forwarding.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Exporting Dev Certificate for HTTPS in ASP.NET (Windows PowerShell)\nDESCRIPTION: This PowerShell command exports a local dev certificate for enabling HTTPS in ASP.NET on Windows.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"$env:USERPROFILE/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Python Version with Conda\nDESCRIPTION: These code snippets show how to install a different version of Python using Conda. The first example is for running in a terminal, while the second is for use in a Dockerfile.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.6\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN conda install -y python=3.6\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding for PostgreSQL in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to enable port forwarding for PostgreSQL in the devcontainer.json file. It allows the PostgreSQL container to be accessible from the host machine on localhost:5432.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Adding Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures that the service runs on the same network as the database container, allowing the forwardPorts functionality in devcontainer.json to work correctly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICENAME]\n```\n\n----------------------------------------\n\nTITLE: Moving Certificate to Correct Location in Dev Container\nDESCRIPTION: This bash command creates the necessary directory and moves the exported certificate to the correct location within the Dev Container for ASP.NET to use it for HTTPS.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.aspnet/https && mv aspnetapp.pfx $HOME/.aspnet/https\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Python Version with Conda Command\nDESCRIPTION: Bash command to install a different version of Python using Conda package manager. This allows customizing the Python environment within the Anaconda container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.6\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda\nDESCRIPTION: Commands to install a different Python version (3.6) using Conda, then reinstall pipx to maintain isolated utility installations with the new Python version.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.6\npip install --no-cache-dir pipx\npipx uninstall pipx\npipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the Docker Compose file. It ensures the service runs on the same network as the database container, allowing the 'forwardPorts' functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Moving Certificate to Correct Location in Dev Container\nDESCRIPTION: This bash command creates the necessary directory and moves the exported certificate to the correct location within the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.aspnet/https && mv aspnetapp.pfx $HOME/.aspnet/https\n```\n\n----------------------------------------\n\nTITLE: Starting Apache Server in PHP Dev Container\nDESCRIPTION: Command to start the Apache web server within the PHP development container. Apache will be available on port 8080 after execution.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napache2ctl start\n```\n\n----------------------------------------\n\nTITLE: Updating Vcpkg Library Packages in Bash\nDESCRIPTION: This command updates the available library packages in Vcpkg by pulling the latest changes from the git repository. It navigates to the Vcpkg root directory and performs a fast-forward git pull.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${VCPKG_ROOT}\"\ngit pull --ff-only\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: YAML configuration to add a new service to the Docker Compose file. The 'network_mode' setting ensures the service runs on the same network as the database container, allowing port forwarding to function properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Moving HTTPS Certificate in Dev Container\nDESCRIPTION: This Bash command creates the necessary directory and moves the HTTPS certificate to the correct location within the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.aspnet/https && mv aspnetapp.pfx $HOME/.aspnet/https\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in Docker Compose\nDESCRIPTION: YAML configuration snippet demonstrating how to add additional services to the docker-compose.yml file with the proper network mode to ensure they're accessible via localhost within the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-mongo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Updating Vcpkg in Shell\nDESCRIPTION: Command to update Vcpkg to the latest version by pulling from its git repository. This ensures access to the most recent library packages.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd \"${VCPKG_ROOT}\"\ngit pull --ff-only\n```\n\n----------------------------------------\n\nTITLE: Adding Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures the service runs on the same network as the database container, allowing localhost access and port forwarding.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Moving Dev Certificate in Container (Bash)\nDESCRIPTION: This Bash command creates the necessary directory and moves the dev certificate to the correct location within the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.aspnet/https && mv aspnetapp.pfx $HOME/.aspnet/https\n```\n\n----------------------------------------\n\nTITLE: Updating CMake Version in Dockerfile\nDESCRIPTION: Shows how to specify a custom CMake version in the Dockerfile. This is useful when the default CMake version is not compatible with Vcpkg requirements.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n${templateOption:reinstallCmakeVersionFromSource}\n```\n\n----------------------------------------\n\nTITLE: Adding Network Mode to Docker Compose Service Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a service in docker-compose.yml to run on the same network as the database container. This allows the 'forwardPorts' functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Go Dependencies in Dockerfile\nDESCRIPTION: This YAML snippet demonstrates how to add a RUN command in the Go Dockerfile to install additional Go dependencies. It uses the 'go get' command to fetch and install a package from a GitHub repository.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# This line can be modified to add any needed additional packages\nRUN go get -x <github-link-for-package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to configure port forwarding in the devcontainer.json file. It forwards port 9000 from the container to the local machine, making it accessible for local development.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/README.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for MariaDB Port Forwarding\nDESCRIPTION: DevContainer configuration snippet to enable port forwarding for MariaDB database access from the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"3306\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: YAML configuration snippet showing how to add other services to the docker-compose.yml file with proper network mode settings to ensure localhost accessibility.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICENAME]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utility with pipx in Bash\nDESCRIPTION: This snippet demonstrates how to use pipx to install a Python utility (prospector) in an isolated environment within the devcontainer. It showcases the recommended method for adding additional tools without affecting the global Python setup.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/python/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Forwarding Ports in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to use the forwardPorts property in devcontainer.json to make ports available locally.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-postgres/NOTES.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Forwarding in devcontainer.json\nDESCRIPTION: JSON configuration to enable port forwarding for MariaDB in the devcontainer.json file. This allows external tools to connect to the database from the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"forwardPorts\": [ \"3306\" ]\n```\n\n----------------------------------------\n\nTITLE: Adding Network Configuration for Additional Services in Docker Compose\nDESCRIPTION: YAML configuration to ensure additional services in docker-compose.yml run on the same network as the database container, allowing forwardPorts functionality to work properly in the Dev Container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities Using Pipx in Bash\nDESCRIPTION: This Bash command shows how to install additional Python utilities using pipx within the container. It demonstrates the installation of the 'prospector' tool as an example.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json for Web Applications\nDESCRIPTION: JSON configuration to forward container ports to the local machine, making web applications running in the container accessible locally.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version with Conda\nDESCRIPTION: Bash commands for installing a different version of Python using Conda, then updating pipx to work with the new Python version.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.6\npip install --no-cache-dir pipx\npipx uninstall pipx\npipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Adding Service to Docker Compose with Network Mode Configuration\nDESCRIPTION: YAML configuration for adding additional services to the docker-compose.yml file with the correct network mode setting to ensure services are available on localhost.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities Using pipx in Bash\nDESCRIPTION: This Bash command shows how to install additional Python utilities using pipx. In this example, it installs the 'prospector' utility in an isolated environment to avoid impacting the global Python environment.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to use the 'forwardPorts' property in devcontainer.json to make specific ports available locally. This is useful for web frameworks and tools that typically only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Exporting HTTPS Dev Certificate in Windows PowerShell\nDESCRIPTION: Command to trust and export the ASP.NET HTTPS development certificate to a PFX file in Windows PowerShell. The certificate is saved to the user's profile with a specified password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"$env:USERPROFILE/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Network Mode\nDESCRIPTION: Docker Compose configuration snippet showing how to configure network mode for additional services.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork_mode: service:[$SERVICENAME]\n```\n\n----------------------------------------\n\nTITLE: Starting Apache Web Server in PHP Dev Container\nDESCRIPTION: This bash command starts the Apache web server in the PHP development container. After execution, Apache will be available on port 8080.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napache2ctl start\n```\n\n----------------------------------------\n\nTITLE: Exporting HTTPS Dev Certificate for ASP.NET in macOS/Linux\nDESCRIPTION: This shell command exports a local development certificate for HTTPS in ASP.NET on macOS or Linux, trusting it and saving it to a specified location with a password.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet dev-certs https --trust; dotnet dev-certs https -ep \"${HOME}/.aspnet/https/aspnetapp.pfx\" -p \"SecurePwdGoesHere\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in Docker Compose\nDESCRIPTION: YAML configuration to ensure additional services run on the same network as the database container, enabling localhost access and port forwarding functionality.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-mongo/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Setting Local Workspace Environment Variable in Dev Container JSON\nDESCRIPTION: JSON configuration to set an environment variable for the local workspace folder path, which can be used for bind mounts inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": { \"LOCAL_WORKSPACE_FOLDER\": \"${localWorkspaceFolder}\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Different Python Version in Dockerfile\nDESCRIPTION: Dockerfile commands to install a specific Python version and update pipx tools to work with the new version.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN conda install -y python=3.6 \\\n    && pip install --no-cache-dir pipx \\\n    && pipx uninstall pipx \\\n    && pipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures that the service runs on the same network as the database container, allowing the 'forwardPorts' feature in devcontainer.json to function properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Node.js Base Image for Kubernetes Dev Container\nDESCRIPTION: This JSON snippet demonstrates how to modify the .devcontainer.json file to use a Node.js base image instead of the default. It specifies the use of the mcr.microsoft.com/devcontainers/javascript-node:18-bullseye image.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/kubernetes-helm/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Different Python Version with Conda\nDESCRIPTION: Bash commands to install a different Python version using Conda, updating pipx to work with the new Python version.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda install python=3.6\npip install --no-cache-dir pipx\npipx uninstall pipx\npipx reinstall-all\n```\n\n----------------------------------------\n\nTITLE: Creating Source Code Symlink for Apache in PHP Dev Container\nDESCRIPTION: This bash command creates a symlink from the current directory to the Apache www folder in the PHP development container. It's useful for directly serving the source code through Apache.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod a+x \"$(pwd)\" && sudo rm -rf /var/www/html && sudo ln -s \"$(pwd)\" /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Image for Docker-in-Docker Container\nDESCRIPTION: Example configuration showing how to modify the .devcontainer.json file to use a Node.js-based container image with Docker-in-Docker functionality. This demonstrates updating the image property to use the official Microsoft Node.js development container image.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-in-docker/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Go Dependencies in Dockerfile\nDESCRIPTION: Docker RUN command example for installing additional Go packages in the container during build, extending the default configuration.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go-postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# This line can be modified to add any needed additional packages\nRUN go get -x <github-link-for-package>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities with pipx\nDESCRIPTION: This Bash command shows how to install additional Python utilities using pipx. The example installs the 'prospector' tool in an isolated environment to avoid impacting the global Python environment.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Updating Dev Container Image for JavaScript/Node.js in JSON\nDESCRIPTION: This code snippet demonstrates how to modify the .devcontainer.json file to use a Node.js-based container image instead of the default. It specifies the use of the mcr.microsoft.com/devcontainers/javascript-node:18-bullseye image.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/kubernetes-helm-minikube/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Setting Post-Creation Commands in devcontainer.json\nDESCRIPTION: Configuration for running commands after the container is created. This example demonstrates checking installed versions of Java, Git, and Node.js.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"java -version && git --version && node --version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Port Forwarding in devcontainer.json\nDESCRIPTION: JSON configuration to add port forwarding for PostgreSQL in the Dev Container settings. This allows external tools to access the PostgreSQL database at localhost:5432 from the host machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [ \"5432\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Image in JSON\nDESCRIPTION: Example JSON configuration that shows how to specify a container image in the '.devcontainer.json' file. This particular example demonstrates setting up a JavaScript Node.js development environment using Microsoft's dev container image.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities Using pipx\nDESCRIPTION: This Bash command shows how to install additional Python utilities using pipx. It demonstrates the installation of the 'prospector' tool in an isolated environment, avoiding impact on the global Python setup.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Image in Dockerfile for Docker-outside-of-Docker\nDESCRIPTION: Example Dockerfile that can be modified to work with different Debian/Ubuntu-based images like node or python. This particular example uses a JavaScript Node image as the base.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications in devcontainer.json\nDESCRIPTION: JSON configuration to forward port 9000 from the dev container to the host machine. This is recommended for web frameworks and tools that typically only listen on localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utility with pipx\nDESCRIPTION: This snippet demonstrates how to use pipx to install additional Python utilities in isolated environments within the container. The example shows the installation of the 'prospector' tool.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/python/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Updating Dev Container Image for JavaScript Node in JSON\nDESCRIPTION: This JSON snippet demonstrates how to modify the .devcontainer.json file to use a JavaScript Node image instead of the default. It specifies the use of Node.js 18 on Debian Bullseye.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/kubernetes-helm/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to use the 'forwardPorts' property in devcontainer.json to make ports available locally. It's recommended for web frameworks and tools that often only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Utilities with pipx\nDESCRIPTION: Bash command for installing Python utilities using pipx, which creates isolated environments for Python applications to avoid impacting the global Python environment.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npipx install prospector\n```\n\n----------------------------------------\n\nTITLE: Automatically Installing Dependencies from environment.yml\nDESCRIPTION: Dockerfile command that checks for and installs dependencies from an environment.yml file during container build, providing automated setup of the Conda environment.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN if [ -f \"/tmp/conda-tmp/environment.yml\" ]; then /opt/conda/bin/conda env update -n base -f /tmp/conda-tmp/environment.yml; fi \\\n    && rm -rf /tmp/conda-tmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet illustrates how to use the forwardPorts property in devcontainer.json to make container ports available locally. It's recommended for web frameworks and tools that typically only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Loading Environment.yml in Dockerfile\nDESCRIPTION: Dockerfile RUN command that conditionally loads dependencies from an environment.yml file into the base Conda environment during container build.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN if [ -f \"/tmp/conda-tmp/environment.yml\" ]; then /opt/conda/bin/conda env update -n base -f /tmp/conda-tmp/environment.yml; fi \\\n    && rm -rf /tmp/conda-tmp\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Creation Commands in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to add post-creation commands to the devcontainer.json file. It runs version checks for Java, Git, and Node.js after the container is created.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"java -version && git --version && node --version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications\nDESCRIPTION: JSON configuration snippet to forward a web application port (9000) from the container to the local machine, which works better than port publishing in cloud environments like Codespaces.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Environment Dependencies Installation in Dockerfile\nDESCRIPTION: Dockerfile command for automatically installing dependencies from environment.yml file during container build.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda/README.md#2025-04-17_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN if [ -f \"/tmp/conda-tmp/environment.yml\" ]; then /opt/conda/bin/conda env update -n base -f /tmp/conda-tmp/environment.yml; fi \\\n    && rm -rf /tmp/conda-tmp\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for C++ Project with Testing and Packaging\nDESCRIPTION: This CMake script sets up a C++ project named 'test-project'. It enables testing, creates an executable from main.cpp, and configures CPack for packaging. The minimum CMake version required is 3.0.0, and the project version is set to 0.1.0.\nSOURCE: https://github.com/devcontainers/templates/blob/main/test/cpp-mariadb/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0.0)\nproject(test-project VERSION 0.1.0)\n\ninclude(CTest)\nenable_testing()\n\nadd_executable(test-project main.cpp)\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications\nDESCRIPTION: JSON configuration example showing how to forward ports for web applications running in the container, making them accessible locally.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/miniconda-postgres/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Starting Apache Web Server in PHP Container\nDESCRIPTION: This Bash command demonstrates how to start the Apache web server within the PHP container. After execution, Apache will be available on port 8080.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napache2ctl start\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker outside of Docker Dev Container Template in JSON\nDESCRIPTION: JSON configuration for the dev container template, specifying the Docker image to use. This example shows how to use a Node.js image instead of the default.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications\nDESCRIPTION: JSON configuration to forward web application ports for local access, particularly useful for frameworks that listen only to localhost within the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/javascript-node-mongo/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Starting Apache Server in PHP Development Container\nDESCRIPTION: Command to start the Apache server within the PHP development container. Apache will be available on port 8080.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napache2ctl start\n```\n\n----------------------------------------\n\nTITLE: Shell Command for Updating Vcpkg\nDESCRIPTION: Command to update the Vcpkg package manager by pulling the latest changes from its git repository.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd \"${VCPKG_ROOT}\"\ngit pull --ff-only\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Port Forwarding\nDESCRIPTION: DevContainer configuration for forwarding ports to make web frameworks and tools accessible locally.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Customizing Container Image for JavaScript Node.js in Dev Container JSON\nDESCRIPTION: This code snippet demonstrates how to modify the .devcontainer.json file to use a different base image, specifically the JavaScript Node.js image from Microsoft's dev container collection.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/kubernetes-helm-minikube/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"image\": \"mcr.microsoft.com/devcontainers/javascript-node:18-bullseye\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for C++ Application\nDESCRIPTION: This CMake script sets up a C++ project named 'test-project'. It defines the minimum CMake version, project details, enables testing, creates an executable, and configures CPack for packaging. The script is typically used as the root CMakeLists.txt file for a C++ project.\nSOURCE: https://github.com/devcontainers/templates/blob/main/test/cpp/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0.0)\nproject(test-project VERSION 0.1.0)\n\ninclude(CTest)\nenable_testing()\n\nadd_executable(test-project main.cpp)\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Frameworks in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to configure port forwarding for web frameworks in the devcontainer.json file. It makes port 9000 available locally, which is useful for frameworks that only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php-mariadb/NOTES.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Template Options in Markdown\nDESCRIPTION: A markdown table showing the available options for the Go development container template. It includes the option ID, description, type, and default value for the Go version selection.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Go version: | string | 1.23-bookworm |\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode for Additional Services in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the network mode for additional services in the docker-compose.yml file. It ensures the service runs on the same network as the database container, allowing the 'forwardPorts' functionality in devcontainer.json to work properly.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:[$SERVICE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Web Applications in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to set up port forwarding for web applications in the devcontainer.json file. It forwards port 9000 from the container to the local machine.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/java-postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Displaying Ruby Environment Options in Markdown\nDESCRIPTION: A markdown table showing the available options for configuring the Ruby development environment. It includes the option ID, description, type, and default value for the Ruby image variant.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Ruby version (use -bookworm, -bullseye variants on local arm64/Apple Silicon): | string | 3.4-bullseye |\n```\n\n----------------------------------------\n\nTITLE: Adding Local Workspace Environment Variable to Dev Container\nDESCRIPTION: JSON configuration snippet for '.devcontainer.json' that sets up a remote environment variable to reference the local workspace folder path. This allows for properly referencing host paths when using Docker bind mounts from within the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": { \"LOCAL_WORKSPACE_FOLDER\": \"${localWorkspaceFolder}\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to configure port forwarding in devcontainer.json. It forwards port 9000 to make it available locally, which is recommended for web frameworks and tools that only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/dotnet-mssql/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Displaying Options Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists the available options for the development container template. It includes the option ID, description, type, and default value.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/typescript-node/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Node.js version (use -bookworm, -bullseye variants on local arm64/Apple Silicon): | string | 22-bookworm |\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Post-Creation Commands\nDESCRIPTION: DevContainer configuration showing how to run commands after container creation using postCreateCommand property.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"g++ --version && git --version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in DevContainer JSON\nDESCRIPTION: This JSON snippet illustrates how to configure port forwarding in the DevContainer JSON file. It shows how to make port 9000 available locally, which is useful for web frameworks and tools that typically only listen to localhost inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ruby-rails-postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Displaying Ubuntu Devcontainer Options Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists the available options for the Ubuntu devcontainer template. It includes the option ID, description, type, and default value for the image variant selection.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/ubuntu/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Ubuntu version (use ubuntu-22.04 or ubuntu-24.04 on local arm64/Apple Silicon): | string | jammy |\n```\n\n----------------------------------------\n\nTITLE: Setting Local Workspace Environment Variable in devcontainer.json\nDESCRIPTION: JSON configuration to create an environment variable that maps to the host's workspace folder path, enabling proper bind mounts from inside the container.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remoteEnv\": { \"LOCAL_WORKSPACE_FOLDER\": \"${localWorkspaceFolder}\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: Configuration that forwards container ports to the local machine, making them accessible even when applications only listen on localhost within the container. Works in cloud environments like GitHub Codespaces.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/docker-outside-of-docker-compose/NOTES.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in devcontainer.json\nDESCRIPTION: JSON configuration to forward ports in the devcontainer.json file. This is recommended for making web frameworks and tools accessible locally, especially in cloud environments like Codespaces.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/cpp-mariadb/NOTES.md#2025-04-17_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Generic Port Forwarding Configuration in devcontainer.json\nDESCRIPTION: JSON configuration example for port forwarding in the Dev Container. This is recommended instead of using ports in docker-compose.yml as it works better in cloud environments like Codespaces.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/anaconda-postgres/NOTES.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [9000]\n```\n\n----------------------------------------\n\nTITLE: Creating Source Code Symlink in PHP Development Container\nDESCRIPTION: Bash command to create a symlink from the source code to the Apache www folder. This can be executed from a terminal window once the container is running.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/php/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod a+x \"$(pwd)\" && sudo rm -rf /var/www/html && sudo ln -s \"$(pwd)\" /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Displaying Debian Container Options in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists the available options for the Debian container template. It includes the option ID, description, type, and default value for the image variant selection.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/debian/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Debian version (use bookworm or bullseye on local arm64/Apple Silicon): | string | bullseye |\n```\n\n----------------------------------------\n\nTITLE: Displaying Options Table in Markdown\nDESCRIPTION: A markdown table showing the available options for the Rust development container template. It includes the option ID, description, type, and default value.\nSOURCE: https://github.com/devcontainers/templates/blob/main/src/rust/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Options Id | Description | Type | Default Value |\n|-----|-----|-----|-----|\n| imageVariant | Debian OS version (use bookworm, or bullseye on local arm64/Apple Silicon): | string | bullseye |\n```"
  }
]