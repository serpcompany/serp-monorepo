[
  {
    "owner": "gethomepage",
    "repo": "homepage",
    "content": "TITLE: Custom API Widget Configuration\nDESCRIPTION: This YAML snippet demonstrates the configuration options for a custom API widget, including the URL, refresh interval, authentication details, request method, headers, request body, display settings, and field mappings. It allows fetching and displaying data from a custom API endpoint.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: customapi\n  url: http://custom.api.host.or.ip:port/path/to/exact/api/endpoint\n  refreshInterval: 10000 # optional - in milliseconds, defaults to 10s\n  username: username # auth - optional\n  password: password # auth - optional\n  method: GET # optional, e.g. POST\n  headers: # optional, must be object, see below\n  requestBody: # optional, can be string or object, see below\n  display: # optional, default to block, see below\n  mappings:\n    - field: key\n      label: Field 1\n      format: text # optional - defaults to text\n    - field: path.to.key2\n      format: number # optional - defaults to text\n      label: Field 2\n    - field: path.to.another.key3\n      label: Field 3\n      format: percent # optional - defaults to text\n    - field: key\n      label: Field 4\n      format: date # optional - defaults to text\n      locale: nl # optional\n      dateStyle: long # optional - defaults to \"long\". Allowed values: `[\"full\", \"long\", \"medium\", \"short\"]`.\n      timeStyle: medium # optional - Allowed values: `[\"full\", \"long\", \"medium\", \"short\"]`.\n    - field: key\n      label: Field 5\n      format: relativeDate # optional - defaults to text\n      locale: nl # optional\n      style: short # optional - defaults to \"long\". Allowed values: `[\"long\", \"short\", \"narrow\"]`.\n      numeric: auto # optional - defaults to \"always\". Allowed values `[\"always\", \"auto\"]`.\n    - field: key\n      label: Field 6\n      format: text\n      additionalField: # optional\n        field: hourly.time.key\n        color: theme # optional - defaults to \"\". Allowed values: `[\"theme\", \"adaptive\", \"black\", \"white\"]`.\n        format: date # optional\n    - field: key\n      label: Number of things in array\n      format: size\n    # This (no field) will take the root of the API response, e.g. when APIs return an array:\n    - label: Number of items\n      format: size\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Widgets in services.yaml\nDESCRIPTION: This snippet shows how to configure a service widget in the `services.yaml` file. It includes settings for the service icon, href, description, server, container, and widget-specific configurations for tautulli and uptimekuma. The `url` and `key` (for tautulli) or `slug` (for uptimekuma) parameters are required for the widgets to function correctly.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- Plex:\n    icon: plex.png\n    href: https://plex.my.host\n    description: Watch movies and TV shows.\n    server: localhost\n    container: plex\n    widgets:\n      - type: tautulli\n        url: http://172.16.1.1:8181\n        key: aabbccddeeffgghhiijjkkllmmnnoo\n      - type: uptimekuma\n        url: http://172.16.1.2:8080\n        slug: aaaaaaabbbbb\n```\n\n----------------------------------------\n\nTITLE: Define Homepage Service with Docker Compose\nDESCRIPTION: This Docker Compose configuration defines the Homepage service. It specifies the image, container name, port mapping, volume mounts for configuration and Docker socket integration, and sets the HOMEPAGE_ALLOWED_HOSTS environment variable. It assumes the existence of a local config directory.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/docker.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    ports:\n      - 3000:3000\n    volumes:\n      - /path/to/config:/app/config # Make sure your local config directory exists\n      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations\n    environment:\n      HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n```\n\n----------------------------------------\n\nTITLE: Automatic Service Discovery via Traefik IngressRoute - YAML\nDESCRIPTION: This YAML snippet shows how to configure automatic service discovery using Traefik IngressRoute custom resource definitions and Homepage annotations.  The `gethomepage.dev/href` annotation is required for Homepage to recognize and process the IngressRoute.  Other annotations allow customization of the service within Homepage.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: emby\n  annotations:\n    gethomepage.dev/href: \"https://emby.example.com\"\n    gethomepage.dev/enabled: \"true\"\n    gethomepage.dev/description: Media Server\n    gethomepage.dev/group: Media\n    gethomepage.dev/icon: emby.png\n    gethomepage.dev/app: emby-app # optional, may be needed if app.kubernetes.io/name != ingress metadata.name\n    gethomepage.dev/name: Emby\n    gethomepage.dev/widget.type: \"emby\"\n    gethomepage.dev/widget.url: \"https://emby.example.com\"\n    gethomepage.dev/pod-selector: \"\"\n    gethomepage.dev/weight: 10 # optional\n    gethomepage.dev/instance: \"public\" # optional\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`emby.example.com`)\n      services:\n        - kind: Service\n          name: emby\n          namespace: emby\n          port: 8080\n          scheme: http\n          strategy: RoundRobin\n          weight: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Widget - Monthly View (YAML)\nDESCRIPTION: This YAML configuration sets up the calendar widget in monthly view, allowing customization of the first day of the week, maximum events displayed, time display, timezone, and integrations with services like Sonarr and iCal. It demonstrates how to configure integrations by specifying the type, service group, service name, color, and additional parameters such as `unmonitored` for *arr services or `url`, `name`, and `showName` for iCal.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/calendar.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: calendar\n  firstDayInWeek: sunday # optional - defaults to monday\n  view: monthly # optional - possible values monthly, agenda\n  maxEvents: 10 # optional - defaults to 10\n  showTime: true # optional - show time for event happening today - defaults to false\n  timezone: America/Los_Angeles # optional and only when timezone is not detected properly (slightly slower performance) - force timezone for ical events (if it's the same - no change, if missing or different in ical - will be converted to this timezone)\n  integrations: # optional\n    - type: sonarr # active widget type that is currently enabled on homepage - possible values: radarr, sonarr, lidarr, readarr, ical\n      service_group: Media # group name where widget exists\n      service_name: Sonarr # service name for that widget\n      color: teal # optional - defaults to pre-defined color for the service (teal for sonarr)\n      params: # optional - additional params for the service\n        unmonitored: true # optional - defaults to false, used with *arr stack\n    - type: ical # Show calendar events from another service\n      url: https://domain.url/with/link/to.ics # URL with calendar events\n      name: My Events # required - name for these calendar events\n      color: zinc # optional - defaults to pre-defined color for the service (zinc for ical)\n      params: # optional - additional params for the service\n        showName: true # optional - show name before event title in event line - defaults to false\n```\n\n----------------------------------------\n\nTITLE: Automatic Service Discovery via Ingress - YAML\nDESCRIPTION: This YAML snippet demonstrates automatic service discovery in Homepage using Kubernetes Ingress annotations. It shows how to configure various service properties like description, group, icon, and widget details directly within the Ingress resource using `gethomepage.dev/` annotations.  No namespace or app values are needed, as they're automatically inferred.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: emby\n  annotations:\n    gethomepage.dev/enabled: \"true\"\n    gethomepage.dev/description: Media Server\n    gethomepage.dev/group: Media\n    gethomepage.dev/icon: emby.png\n    gethomepage.dev/name: Emby\n    gethomepage.dev/widget.type: \"emby\"\n    gethomepage.dev/widget.url: \"https://emby.example.com\"\n    gethomepage.dev/pod-selector: \"\"\n    gethomepage.dev/weight: 10 # optional\n    gethomepage.dev/instance: \"public\" # optional\nspec:\n  rules:\n    - host: emby.example.com\n      http:\n        paths:\n          - backend:\n              service:\n                name: emby\n                port:\n                  number: 8080\n            path: /\n            pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Launch\nDESCRIPTION: This YAML snippet configures the Quick Launch feature, which allows users to search services, perform web searches, or open URLs by typing on the homepage. Settings include `searchDescriptions`, `hideInternetSearch`, `showSearchSuggestions`, `hideVisitURL`, and `provider`. \nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nquicklaunch:\n  searchDescriptions: true\n  hideInternetSearch: true\n  showSearchSuggestions: true\n  hideVisitURL: true\n  provider: google # google, duckduckgo, bing, baidu, brave or custom\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration for credentialedProxyHandler - YAML\nDESCRIPTION: YAML configuration for defining a widget that utilizes `credentialedProxyHandler`. It shows how to define the `url` and `key` properties which are used by the proxy handler to make authenticated requests. The API key is passed as an `X-API-Key` header.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      key: your-api-key\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Kubernetes - YAML\nDESCRIPTION: This YAML snippet defines a service within the Homepage configuration, linked to a Kubernetes pod. It specifies metadata such as the icon, href, and description, along with Kubernetes-specific details like the namespace and app name, which are used to create a label selector for pod matching.  Only CPU and memory stats are collected.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- Emby:\n  icon: emby.png\n  href: \"http://emby.home/\"\n  description: Media server\n  namespace: media # The kubernetes namespace the app resides in\n  app: emby # The name of the deployed app\n```\n\n----------------------------------------\n\nTITLE: Docker Labels for Automatic Service Discovery\nDESCRIPTION: This YAML snippet shows docker labels for automatic service discovery within Homepage. These labels configure the service's group, name, icon, href, and description.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  emby:\n    image: lscr.io/linuxserver/emby:latest\n    container_name: emby\n    ports:\n      - 8096:8096\n    restart: unless-stopped\n    labels:\n      - homepage.group=Media\n      - homepage.name=Emby\n      - homepage.icon=emby.png\n      - homepage.href=http://emby.home/\n      - homepage.description=Media server\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Field Visibility in YAML\nDESCRIPTION: This snippet demonstrates how to control the visibility of widget fields using the `fields` property in the `services.yaml` configuration. The `fields` property is a YAML array of strings, specifying which fields should be displayed. If the `fields` property is not specified, all fields are displayed.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- Sonarr:\n    icon: sonarr.png\n    href: http://sonarr.host.or.ip\n    widget:\n      type: sonarr\n      fields: [\"wanted\", \"queued\"]\n      url: http://sonarr.host.or.ip\n      key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Adding Service Integrations in YAML\nDESCRIPTION: This snippet demonstrates how to add service integrations (widgets) to services using the `widget` property in the `services.yaml` file.  It shows examples for Radarr and Sonarr, including setting the `type`, `url`, and `key` properties for their respective integrations. This works independently of the Docker integration.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        description: Series management\n        widget:\n          type: sonarr\n          url: http://sonarr.host\n          key: apikeyapikeyapikeyapikeyapikey\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        description: Movie management\n        widget:\n          type: radarr\n          url: http://radarr.host\n          key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Helm Repository and Installation\nDESCRIPTION: Adds the jameswynn helm repository and installs the homepage chart. This simplifies the deployment process by using pre-packaged configurations. Requires Helm to be installed.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add jameswynn https://jameswynn.github.io/helm-charts\nhelm install my-release jameswynn/homepage\n```\n\n----------------------------------------\n\nTITLE: Adding Ping Monitoring in YAML\nDESCRIPTION: This snippet demonstrates how to add ping monitoring to services using the `ping` property in `services.yaml`. The `ping` property specifies the hostname to ping to monitor the availability of the service.  As of v0.8.0, the ping feature attempts to use a true (ICMP) ping command on the underlying host. Currently, only IPv4 is supported. In some cases you may need to install e.g. the `iputils-ping` package on the host system.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        ping: sonarr.host\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        ping: some.other.host\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Service Discovery - YAML\nDESCRIPTION: This YAML snippet showcases how to enable multiple service discovery methods, including Ingress, Traefik IngressRoute, and Gateway API in Homepage's Kubernetes configuration.  It configures Homepage to discover services defined using these Kubernetes resources.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningress: true # default, enable ingress\ntraefik: true # enable traefik ingressRoute\ngateway: true # enable gateway-api\n```\n\n----------------------------------------\n\nTITLE: Defining Service Groups in YAML\nDESCRIPTION: This snippet demonstrates how to define service groups within the `services.yaml` file.  Groups are top-level array entries, and services are defined as array entries within each group. Each service has properties like `href`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Service A:\n        href: http://localhost/\n\n- Group B:\n    - Service B:\n        href: http://localhost/\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Services in a Group in YAML\nDESCRIPTION: This snippet illustrates defining multiple services within a single group in `services.yaml`. Services are defined as array entries within the group, each with properties such as `href`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Service A:\n        href: http://localhost/\n\n    - Service B:\n        href: http://localhost/\n\n    - Service C:\n        href: http://localhost/\n\n- Group B:\n    - Service D:\n        href: http://localhost/\n```\n\n----------------------------------------\n\nTITLE: Integrating Docker Containers in YAML\nDESCRIPTION: This snippet demonstrates how to connect services to Docker containers using the `server` and `container` properties in the `services.yaml` file. This integration allows for monitoring the container's status and resource usage. Clicking on the status label of a service with Docker integration enabled will expand the container stats, where you can see CPU, Memory, and Network activity.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Service A:\n        href: http://localhost/\n        description: This is my service\n        server: my-server\n        container: my-container\n\n- Group B:\n    - Service B:\n        href: http://localhost/\n        description: This is another service\n        server: other-server\n        container: other-container\n```\n\n----------------------------------------\n\nTITLE: Configuring Bookmarks in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure bookmarks in the `bookmarks.yaml` file for the homepage application. It includes examples of using abbreviations (`abbr`), icons, and custom descriptions. The bookmarks are organized into categories like Developer, Social, and Entertainment.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/bookmarks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- Developer:\n    - Github:\n        - abbr: GH\n          href: https://github.com/\n\n- Social:\n    - Reddit:\n        - icon: reddit.png\n          href: https://reddit.com/\n          description: The front page of the internet\n\n- Entertainment:\n    - YouTube:\n        - abbr: YT\n          href: https://youtube.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with Socket Directly in YAML\nDESCRIPTION: This YAML snippet demonstrates configuring a Docker instance using a direct socket connection. The socket path is specified. Homepage must run as root.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmy-docker:\n  socket: /var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring PhotoPrism Widget\nDESCRIPTION: This YAML snippet demonstrates the configuration for a PhotoPrism widget. It includes the widget type, URL, authentication credentials (either username/password or an API key), and specifies the allowed fields for data retrieval from PhotoPrism. Ensure to replace placeholder values with your actual PhotoPrism instance details.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/photoprism.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: photoprism\n  url: http://photoprism.host.or.ip:port\n  username: admin # required only if using username/password\n  password: password # required only if using username/password\n  key: # required only if using app passwords\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Configuration\nDESCRIPTION: Configures service discovery using Kubernetes Ingress annotations. This allows Homepage to dynamically detect services and display them.  Relies on the `gethomepage.dev/*` annotations.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: homepage\n  annotations:\n    gethomepage.dev/enabled: \"true\"\n    gethomepage.dev/description: Dynamically Detected Homepage\n    gethomepage.dev/group: Operations\n    gethomepage.dev/icon: homepage.png\n    gethomepage.dev/name: Homepage\nspec:\n  rules:\n    - host: homepage.example.com\n      http:\n        paths:\n          - backend:\n              service:\n                name: homepage\n                port:\n                  number: 3000\n            path: /\n            pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Adding Emby Service Widget in YAML\nDESCRIPTION: This snippet demonstrates how to attach an Emby service widget to a service in the `services.yaml` file.  The `widget` property specifies the widget type, URL, and API key for integration with the Emby service.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- Emby:\n    icon: emby.png\n    href: http://emby.host.or.ip/\n    description: Movies & TV Shows\n    widget:\n      type: emby\n      url: http://emby.host.or.ip\n      key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Example JSON API Response\nDESCRIPTION: This JSON snippet presents an example API response containing information about a character, including their ID, name, status, species, gender, origin, and locations. It is used as a reference for configuring the `mappings` section of the custom API widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"name\": \"Rick Sanchez\",\n  \"status\": \"Alive\",\n  \"species\": \"Human\",\n  \"gender\": \"Male\",\n  \"origin\": {\n    \"name\": \"Earth (C-137)\"\n  },\n  \"locations\": [\n    {\n      \"name\": \"Earth (C-137)\"\n    },\n    {\n      \"name\": \"Citadel of Ricks\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define Homepage Service with Docker Compose (Non-Root)\nDESCRIPTION: This Docker Compose configuration defines the Homepage service, configured to run as a non-root user. It includes PUID and PGID environment variables, which are expected to be defined in a `.env` file. Ensure proper ownership and permissions are set for the mounted volumes.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/docker.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    ports:\n      - 3000:3000\n    volumes:\n      - /path/to/config:/app/config # Make sure your local config directory exists\n      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations, see alternative methods\n    environment:\n      HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n      PUID: $PUID\n      PGID: $PGID\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonarr Widget YAML\nDESCRIPTION: This YAML snippet shows how to configure the Sonarr widget.  It defines the widget type, Sonarr URL, API key, and whether to enable the detailed queue listing. The `url` field should be set to the Sonarr instance address, the `key` should be the API key found in Sonarr settings, and `enableQueue` optionally enables a detailed queue listing.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/sonarr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: sonarr\n  url: http://sonarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableQueue: true # optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building (pnpm)\nDESCRIPTION: Installs project dependencies and builds the production bundle using `pnpm`. `pnpm install` installs all required node modules, and `pnpm build` creates the optimized static files for deployment. This ensures the application is ready to run.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/source.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in Widget Configuration JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how to define the `api` property in a widget configuration. The `api` property represents the URL of the API endpoint that the widget uses to fetch data, allowing for placeholders like `{url}` and `{endpoint}`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n};\n```\n\n----------------------------------------\n\nTITLE: Homebridge Widget Configuration YAML\nDESCRIPTION: This YAML configuration defines the Homebridge widget. It requires the Config UI X plugin to be installed in Homebridge. The configuration specifies the type, URL, username, and password for accessing the Homebridge instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/homebridge.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: homebridge\n  url: http://homebridge.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration with API key - YAML\nDESCRIPTION: This YAML configuration shows how to define a widget with an API key, which is then used by the `genericProxyHandler` to authenticate requests. The `url` and `key` parameters are defined within the `widget` section.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# Widget Configuration\n- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://example.com\n      key: your-api-key\n```\n\n----------------------------------------\n\nTITLE: Fetch data from API with query parameters (JavaScript)\nDESCRIPTION: This code snippet shows how to use the `useWidgetAPI` hook to fetch data from a specified endpoint with query parameters.  It imports the `useWidgetAPI` hook and calls it with the widget metadata, endpoint name, and an object containing the query parameters.  The `params` must be whitelisted in the widget metadata object.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { data, error } = useWidgetAPI(widget, \"stats\", { start: \"2021-01-01\", end: \"2021-12-31\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Overseerr Widget Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Overseerr widget with the necessary parameters. It requires the Overseerr URL and API key to connect to the Overseerr instance. The 'widget' section defines the type as 'overseerr' and includes the URL and API key for authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/overseerr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: overseerr\n  url: http://overseerr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Multiple Widgets Configuration with Docker Labels\nDESCRIPTION: This YAML snippet shows docker labels to configure multiple widgets with different types and properties. The labels are indexed to define different widgets. This example configures an emby and an uptimekuma widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlabels: ...\n  - homepage.widgets[0].type=emby\n  - homepage.widgets[0].url=http://emby.home\n  - homepage.widgets[0].key=yourembyapikeyhere\n  - homepage.widgets[1].type=uptimekuma\n  - homepage.widgets[1].url=http://uptimekuma.home\n  - homepage.widgets[1].slug=youreventslughere\n```\n\n----------------------------------------\n\nTITLE: Run Homepage with Docker Run\nDESCRIPTION: This Docker command runs the Homepage container directly using the `docker run` command. It maps port 3000, sets the HOMEPAGE_ALLOWED_HOSTS environment variable, and mounts volumes for the config directory and Docker socket integration.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3000:3000 -e HOMEPAGE_ALLOWED_HOSTS=gethomepage.dev -v /path/to/config:/app/config -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/gethomepage/homepage:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with TLS in YAML\nDESCRIPTION: This YAML snippet demonstrates configuring a remote Docker instance with TLS. It requires the specification of the keyFile, caFile, and certFile paths relative to the config directory.  Docker must be set up to accept TLS connections.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmy-remote-docker:\n  host: 192.168.0.101\n  port: 275\n  tls:\n    keyFile: tls/key.pem\n    caFile: tls/ca.pem\n    certFile: tls/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin Widget in YAML\nDESCRIPTION: This YAML snippet configures the Jellyfin widget. It sets the Jellyfin server URL, API key, and enables optional features such as content blocks and the \"Now Playing\" display.  The `enableUser`, `showEpisodeNumber` and `expandOneStreamToTwoRows` options are also configured. It requires a valid Jellyfin server and API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/jellyfin.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: jellyfin\n  url: http://jellyfin.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableBlocks: true # optional, defaults to false\n  enableNowPlaying: true # optional, defaults to true\n  enableUser: true # optional, defaults to false\n  showEpisodeNumber: true # optional, defaults to false\n  expandOneStreamToTwoRows: false # optional, defaults to true\n```\n\n----------------------------------------\n\nTITLE: Radarr Widget Configuration in YAML\nDESCRIPTION: Configures the Radarr widget with the necessary parameters such as the Radarr URL, API key, and an option to enable the queue listing. The `url` specifies the address of the Radarr instance, `key` is the API key obtained from Radarr settings, and `enableQueue` is a boolean that toggles the detailed queue listing.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/radarr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: radarr\n  url: http://radarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableQueue: true # optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Miniflux Widget Configuration YAML\nDESCRIPTION: Configures the Miniflux widget with the specified URL and API key.  The `url` field should point to the Miniflux instance. The `key` field should contain the Miniflux API key, which can be found under Settings > API keys in Miniflux.  This widget configuration also implicitly suggests that `unread` and `read` are allowed fields.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/miniflux.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: miniflux\n  url: http://miniflux.host.or.ip:port\n  key: minifluxapikey\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources Widget - Base Configuration YAML\nDESCRIPTION: This YAML snippet configures the resources widget to display CPU, memory, disk usage, CPU temperature, uptime, and network usage. It includes optional parameters for temperature limits, units (imperial or metric), refresh interval, disk units (bytes or bbytes), and specifies the disk mount path. A network interface can be specified, otherwise the default is used.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/resources.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- resources:\n    cpu: true\n    memory: true\n    disk: /disk/mount/path\n    cputemp: true\n    tempmin: 0 # optional, minimum cpu temp\n    tempmax: 100 # optional, maximum cpu temp\n    uptime: true\n    units: imperial # only used by cpu temp, options: 'imperial' or 'metric'\n    refresh: 3000 # optional, in ms\n    diskUnits: bytes # optional, bytes (default) or bbytes. Only applies to disk\n    network: true # optional, uses 'default' if true or specify a network interface name\n```\n\n----------------------------------------\n\nTITLE: Proxmox Widget Configuration in YAML\nDESCRIPTION: This YAML snippet configures the Proxmox widget in the Homepage application. It specifies the Proxmox URL, username (API token ID), password (API token secret), and an optional node.  The username should be in the format `username@pam!Token ID`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/proxmox.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: proxmox\n  url: https://proxmox.host.or.ip:8006\n  username: api_token_id\n  password: api_token_secret\n  node: pve-1 # optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Mappings in Widget JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to configure the `mappings` property in a widget configuration.  It includes configurations for the `/api/stats` and `/api/notices` endpoints, illustrating how to define the `endpoint` and `map` properties for each mapping. The example imports `asJson`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { asJson } from \"utils/proxy/api-helpers\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats?start=...&end=...`\n    stats: {\n      endpoint: \"stats\",\n      validate: [\"total\", \"average\"],\n      params: [\"start\", \"end\"],\n    },\n    // `/api/notices`\n    notices: {\n      endpoint: \"notices\",\n      map: (data) => {\n        total: asJson(data).length;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures the Azure DevOps widget. It specifies the widget type, organization, project, and other parameters necessary to connect to Azure DevOps and retrieve data. The configuration includes options for both pipeline status and pull request reporting, such as definition ID, branch name, user email, and repository ID.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/azuredevops.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: azuredevops\n  organization: myOrganization\n  project: myProject\n  definitionId: pipelineDefinitionId # required for pipelines\n  branchName: branchName # optional for pipelines, leave empty for all\n  userEmail: email # required for pull requests\n  repositoryId: prRepositoryId # required for pull requests\n  key: personalaccesstoken\n```\n\n----------------------------------------\n\nTITLE: Defining Homepage service using Docker Compose\nDESCRIPTION: This YAML snippet defines the Homepage service using Docker Compose. It specifies the image, container name, environment variables (including required HOMEPAGE_ALLOWED_HOSTS, and optional PUID and PGID), port mapping, volume mounts for configuration and Docker socket (for Docker integrations), and restart policy.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    environment:\n      HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n      PUID: 1000 # optional, your user id\n      PGID: 1000 # optional, your group id\n    ports:\n      - 3000:3000\n    volumes:\n      - /path/to/config:/app/config # Make sure your local config directory exists\n      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Uptime Kuma Widget Configuration in YAML\nDESCRIPTION: This YAML snippet configures the Uptime Kuma widget. It defines the widget type, the URL of the Uptime Kuma instance, and the slug of the status page to retrieve data from.  The `url` field should point to the Uptime Kuma instance, and the `slug` field should match the status page slug configured in Uptime Kuma.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/uptime-kuma.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: uptimekuma\n  url: http://uptimekuma.host.or.ip:port\n  slug: statuspageslug\n```\n\n----------------------------------------\n\nTITLE: Configuring Prowlarr Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Prowlarr widget. It defines the widget type as 'prowlarr' and includes the necessary parameters such as the Prowlarr URL and API key.  The 'url' parameter specifies the address of the Prowlarr instance, and the 'key' parameter holds the Prowlarr API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/prowlarr.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: prowlarr\n  url: http://prowlarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Configuring Emby Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of the Emby widget. It specifies the Emby server URL, API key, and various optional parameters such as enabling data blocks, the \"Now Playing\" feature, user information display, showing episode numbers, and expanding single streams to two rows. The `enableBlocks` parameter allows enabling specific data blocks (`movies`, `series`, `episodes`, `songs`).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/emby.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: emby\n  url: http://emby.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableBlocks: true # optional, defaults to false\n  enableNowPlaying: true # optional, defaults to true\n  enableUser: true # optional, defaults to false\n  showEpisodeNumber: true # optional, defaults to false\n  expandOneStreamToTwoRows: false # optional, defaults to true\n```\n\n----------------------------------------\n\nTITLE: Autobrr Widget Configuration in YAML\nDESCRIPTION: Configures the Autobrr widget within a homepage application. The configuration includes the Autobrr instance URL and the API key required for authentication. This widget displays information about approved pushes, rejected pushes, filters, and indexers from the Autobrr instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/autobrr.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: autobrr\n  url: http://autobrr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration for jsonrpcProxyHandler - YAML\nDESCRIPTION: YAML configuration for defining a widget using `jsonrpcProxyHandler`. It shows how to configure the `url`, `username`, and `password` (or `key`) properties for JSON-RPC authentication. Two example configurations using username/password and api key authentication are provided.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      username: your-username\n      password: your-password\n```\n\nLANGUAGE: YAML\nCODE:\n```\n- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      key: your-api-token\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitlab Widget - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Gitlab widget. It requires specifying the Gitlab URL, a personal access token as the 'key', and the user's Gitlab ID. The widget type is set to 'gitlab'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/gitlab.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: gitlab\n  url: http://gitlab.host.or.ip:port\n  key: personal-access-token\n  user_id: 123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Widget with YAML\nDESCRIPTION: This YAML code snippet demonstrates how to configure a Home Assistant widget. It includes the widget type, URL, access key, and custom state and template queries. The custom queries retrieve data from sensors and templates, defining labels and values for display.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/homeassistant.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: homeassistant\n  url: http://homeassistant.host.or.ip:port\n  key: access_token\n  custom:\n    - state: sensor.total_power\n    - state: sensor.total_energy_today\n      label: energy today\n    - template: \"{{ states.switch|selectattr('state','equalto','on')|list|length }}\"\n      label: switches on\n    - state: weather.forecast_home\n      label: wind speed\n      value: \"{attributes.wind_speed} {attributes.wind_speed_unit}\"\n```\n\n----------------------------------------\n\nTITLE: NextDNS Widget Configuration in YAML\nDESCRIPTION: This YAML snippet configures a NextDNS widget. It requires a profile ID and API key obtained from the NextDNS website under Account > API and Setup > Endpoints > ID, respectively. The 'profile' field should be replaced with the actual profile ID, and the 'key' field with the API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/nextdns.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: nextdns\n  profile: profileid\n  key: yourapikeyhere\n```\n\n----------------------------------------\n\nTITLE: Configuring Moonraker Widget with API Key (YAML)\nDESCRIPTION: This snippet configures the connection to a Moonraker instance using an API key. It defines the widget type as 'moonraker', the URL, and includes the 'key' parameter for authorization.  This is needed if the homepage IP is not whitelisted in the Moonraker configuration. The API key needs to be a valid key from the Moonraker instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/moonraker.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: moonraker\n  url: http://moonraker.host.or.ip:port\n  key: api_keymoonraker\n```\n\n----------------------------------------\n\nTITLE: Configuring Paperless-ngx Widget with API Token (YAML)\nDESCRIPTION: This YAML snippet configures the Paperless-ngx widget using an API token for authentication.  It requires specifying the URL of the Paperless-ngx instance and the API token. The `widget` type is set to `paperlessngx`, and the `key` field holds the API token value.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/paperlessngx.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: paperlessngx\n  url: http://paperlessngx.host.or.ip:port\n  key: token\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Component in React\nDESCRIPTION: This React component demonstrates a basic widget structure. It fetches data using `useWidgetAPI`, handles errors, and displays data or placeholders using `Container` and `Block` components. It uses `useTranslation` for internationalization.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/component.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTranslation } from \"next-i18next\";\n\nimport Container from \"components/services/widget/container\";\nimport Block from \"components/services/widget/block\";\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { t } = useTranslation();\n  const { widget } = service;\n  const { data, error } = useWidgetAPI(widget, \"info\");\n\n  if (error) {\n    return <Container service={service} error={error} />;\n  }\n\n  if (!data) {\n    return (\n      <Container service={service}>\n        <Block label=\"yourwidget.key1\" />\n        <Block label=\"yourwidget.key2\" />\n        <Block label=\"yourwidget.key3\" />\n      </Container>\n    );\n  }\n\n  return (\n    <Container service={service}>\n      <Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} />\n      <Block label=\"yourwidget.key2\" value={t(\"common.number\", { value: data.key2 })} />\n      <Block label=\"yourwidget.key3\" value={t(\"common.number\", { value: data.key3 })} />\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Traefik Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures the Traefik widget. It specifies the type as 'traefik', the URL for the Traefik instance, and optional username and password for authentication if required. Allowed fields for the widget are 'routers', 'services', and 'middleware'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/traefik.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: traefik\n  url: http://traefik.host.or.ip\n  username: username # optional\n  password: password # optional\n```\n\n----------------------------------------\n\nTITLE: Docker Labels for Widget Configuration\nDESCRIPTION: This YAML snippet shows docker labels used to configure widgets for a service within Homepage. Labels define widget type, URL, and key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - homepage.group=Media\n  - homepage.name=Emby\n  - homepage.icon=emby.png\n  - homepage.href=http://emby.home/\n  - homepage.description=Media server\n  - homepage.widget.type=emby\n  - homepage.widget.url=http://emby.home\n  - homepage.widget.key=yourembyapikeyhere\n  - homepage.widget.fields=[\"field1\",\"field2\"] # optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Synology DiskStation Widget - YAML\nDESCRIPTION: This YAML snippet shows the configuration for the Synology DiskStation widget, including the URL, username, password, and optional volume parameter. The URL specifies the address of the DiskStation, and the username and password are used for authentication. The volume parameter allows specifying which volume's free space to display.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/diskstation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: diskstation\n  url: http://diskstation.host.or.ip:port\n  username: username\n  password: password\n  volume: volume_N # optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Gluetun Widget\nDESCRIPTION: This YAML code snippet demonstrates how to configure the Gluetun widget. It specifies the widget type, URL for the Gluetun instance, and an optional API key. The URL should point to the Gluetun HTTP control server and the key is not required when the `/v1/publicip/ip` endpoint is configured with `auth = none`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/gluetun.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: gluetun\n  url: http://gluetun.host.or.ip:port\n  key: gluetunkey # Not required if /v1/publicip/ip endpoint is configured with `auth = none`\n```\n\n----------------------------------------\n\nTITLE: Configuring Paperless-ngx Widget with Username/Password (YAML)\nDESCRIPTION: This YAML snippet configures the Paperless-ngx widget using a username and password for authentication. It requires specifying the URL of the Paperless-ngx instance, along with the username and password for a user with API access. The `widget` type is set to `paperlessngx`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/paperlessngx.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: paperlessngx\n  url: http://paperlessngx.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackett Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Jackett widget. It requires specifying the URL of the Jackett instance.  Optionally, if Jackett has an admin password set, the `password` field must also be configured.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/jackett.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: jackett\n  url: http://jackett.host.or.ip\n  password: jackettadminpassword # optional\n```\n\n----------------------------------------\n\nTITLE: Mailcow Widget Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration for a Mailcow widget. It specifies the widget type as 'mailcow', the URL of the Mailcow instance, and the API key for authentication. The widget can display 'domains', 'mailboxes', 'mails', and 'storage' information.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/mailcow.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: mailcow\n  url: https://mailcow.host.or.ip\n  key: mailcowapikey\n```\n\n----------------------------------------\n\nTITLE: Zabbix Widget Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration structure for the Zabbix widget. It includes the widget type, Zabbix server URL, and API key.  Ensure to replace 'http://zabbix.host.or.ip/zabbix' with your Zabbix server's address and 'your-api-key' with a valid Zabbix API token.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/zabbix.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: zabbix\n  url: http://zabbix.host.or.ip/zabbix\n  key: your-api-key\n```\n\n----------------------------------------\n\nTITLE: Glances Widget Configuration in YAML\nDESCRIPTION: Configures the Glances widget to monitor system resources via the Glances API. Requires the Glances service to be running in web server mode. Includes options for specifying the URL, authentication credentials, and which resources to monitor (CPU, memory, disk, temperature, uptime).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/glances.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- glances:\n    url: http://host.or.ip:port\n    username: user # optional if auth enabled in Glances\n    password: pass # optional if auth enabled in Glances\n    version: 4 # required only if running glances v4 or higher, defaults to 3\n    cpu: true # optional, enabled by default, disable by setting to false\n    mem: true # optional, enabled by default, disable by setting to false\n    cputemp: true # disabled by default\n    uptime: true # disabled by default\n    disk: / # disabled by default, use mount point of disk(s) in glances. Can also be a list (see below)\n    diskUnits: bytes # optional, bytes (default) or bbytes. Only applies to disk\n    expanded: true # show the expanded view\n    label: MyMachine # optional\n```\n\n----------------------------------------\n\nTITLE: Pterodactyl Widget Configuration YAML\nDESCRIPTION: Defines the configuration for a Pterodactyl widget. The configuration includes the widget type (pterodactyl), the URL of the Pterodactyl instance, and the API key for authentication. Allowed fields are `nodes` and `servers`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/pterodactyl.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: pterodactyl\n  url: http://pterodactylhost:port\n  key: pterodactylapikey\n```\n\n----------------------------------------\n\nTITLE: Scrutiny Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures a scrutiny widget.  It specifies the widget type as 'scrutiny' and sets the URL to the scrutiny instance.  Allowed fields include 'passed', 'failed', and 'unknown'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/scrutiny.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: scrutiny\n  url: http://scrutiny.host.or.ip\n```\n\n----------------------------------------\n\nTITLE: Configure Slskd Widget in YAML\nDESCRIPTION: This snippet demonstrates how to configure a Slskd widget within a YAML configuration file. It defines the widget's type, URL, and the API key used to authenticate with the Slskd instance.  The URL specifies the address of the Slskd server, and the key provides secure access to the server.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/slskd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: slskd\n  url: http[s]://slskd.host.or.ip[:5030]\n  key: generatedapikey\n```\n\n----------------------------------------\n\nTITLE: Kavita Widget Configuration\nDESCRIPTION: This YAML snippet configures the Kavita widget, specifying the connection URL, username, password, and an optional API key. It defines the widget type as `kavita`. Allowed fields are `seriesCount` and `totalFiles`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/kavita.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: kavita\n  url: http://kavita.host.or.ip:port\n  username: username\n  password: password\n  key: kavitaapikey # Optional, e.g. if not using username and password\n```\n\n----------------------------------------\n\nTITLE: Configuring NetAlertX Widget in YAML\nDESCRIPTION: This snippet demonstrates how to configure the NetAlertX widget in a YAML file. It shows the necessary parameters such as the widget type, URL, and optional API key for authentication if a password is enabled on the NetAlertX instance. The URL specifies the address of the NetAlertX server, and the key should be the SYNC_api_token.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/netalertx.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: netalertx\n  url: http://ip:port\n  key: netalertxsyncapitoken # optional, only if password is enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Tube Archivist Widget in YAML\nDESCRIPTION: This YAML snippet configures a Tube Archivist widget by specifying the type, URL, and API key required to connect to a Tube Archivist instance. The `url` parameter should be the address of the Tube Archivist server, and `key` is the API key used for authentication. Requires Tube Archivist version 0.4.4 or later.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/tubearchivist.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: tubearchivist\n  url: http://tubearchivist.host.or.ip\n  key: tubearchivistapikey\n```\n\n----------------------------------------\n\nTITLE: Configuring Tdarr Widget with YAML\nDESCRIPTION: This YAML snippet configures a Tdarr widget by specifying the widget type, the URL of the Tdarr server, and an optional API key.  The `widget` section defines the widget's properties, allowing integration with the Tdarr server.  The `url` parameter specifies the address of the Tdarr instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/tdarr.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: tdarr\n  url: http://tdarr.host.or.ip\n  key: tdarrapikey # optional\n```\n\n----------------------------------------\n\nTITLE: Search Configuration (Multiple Providers)\nDESCRIPTION: Configures a search widget with a dropdown menu containing multiple search providers (Brave, Google, DuckDuckGo). Custom providers are excluded from the dropdown functionality.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/search.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- search:\n    provider: [brave, google, duckduckgo]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minecraft Widget in YAML\nDESCRIPTION: This YAML snippet configures a Minecraft widget. It specifies the widget type as 'minecraft' and provides the URL for the Minecraft server using the UDP protocol. The allowed fields for this widget are 'players', 'version', and 'status'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/minecraft.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: minecraft\n  url: udp://minecraftserveripordomain:port\n```\n\n----------------------------------------\n\nTITLE: Adding Site Monitor in YAML\nDESCRIPTION: This snippet showcases how to add site monitoring to services using the `siteMonitor` property in `services.yaml`. The `siteMonitor` property specifies the URL to monitor for availability and response time. The site monitor feature works by making an http `HEAD` request to the URL, and falls back to `GET` in case that fails.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        siteMonitor: http://sonarr.host/\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        siteMonitor: http://some.other.host/\n```\n\n----------------------------------------\n\nTITLE: Configuring pfSense Widget for API v2 (YAML)\nDESCRIPTION: Configures a pfSense widget to connect to the pfSense API v2. It specifies the URL, authentication credentials (username/password or API key in headers), WAN interface, API version, and fields to display. Supports either username/password or an API key for authentication. The `wan` parameter defines the interface to monitor.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/pfsense.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: pfsense\n  url: http://pfsense.host.or.ip:port\n  username: user # optional, or API key\n  password: pass # optional, or API key\n  headers: # optional, or username/password\n    X-API-Key: key\n  wan: igb0\n  version: 2 # optional, defaults to 1 for api v1\n  fields: [\"load\", \"memory\", \"temp\", \"wanStatus\"] # optional\n```\n\n----------------------------------------\n\nTITLE: Tandoor Widget Configuration YAML\nDESCRIPTION: This YAML snippet defines the configuration for a Tandoor widget. It specifies the widget type, the URL of the Tandoor frontend, and the API key used for authentication. The API key should be generated in Tandoor's settings with `read` scope.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/tandoor.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: tandoor\n  url: http://tandoor-frontend.host.or.ip\n  key: tandoor-api-token\n```\n\n----------------------------------------\n\nTITLE: Configuring ruTorrent Widget\nDESCRIPTION: This YAML snippet configures the ruTorrent widget. It specifies the widget type, the URL of the ruTorrent instance, and optional username and password credentials for authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/rutorrent.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: rutorrent\n  url: http://rutorrent.host.or.ip\n  username: username # optional, false if not used\n  password: password # optional, false if not used\n```\n\n----------------------------------------\n\nTITLE: Configuring OctoPrint Widget in YAML\nDESCRIPTION: This YAML snippet configures the OctoPrint widget to connect to an OctoPrint instance. It requires the OctoPrint server URL and API key for authentication. The widget type is specified as 'octoprint'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/octoprint.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: octoprint\n  url: http://octoprint.host.or.ip:port\n  key: youroctoprintapikey\n```\n\n----------------------------------------\n\nTITLE: Service Show Stats Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to configure the `showStats` option to display docker stats for a specific service.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- Example Service:\n  ...\n  showStats: true\n```\n\n----------------------------------------\n\nTITLE: Unifi Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures a Unifi widget to display connectivity status. It requires the Unifi controller's URL, either a username and password or an API key for authentication, and optionally a site name. The 'type' field is set to 'unifi'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/unifi-controller.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: unifi\n  url: https://unifi.host.or.ip:port\n  site: Site Name # optional\n  username: user\n  password: pass\n  key: unifiapikey # required if using API key instead of username/password\n```\n\n----------------------------------------\n\nTITLE: UptimeRobot Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures the UptimeRobot widget. It specifies the widget type, the UptimeRobot API URL, and the API key used to authenticate requests.  The 'key' parameter should be replaced with a valid UptimeRobot API token.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/uptimerobot.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: uptimerobot\n  url: https://api.uptimerobot.com\n  key: uptimerobotapitoken\n```\n\n----------------------------------------\n\nTITLE: Configuring Channels DVR Server Widget\nDESCRIPTION: This YAML snippet configures a Channels DVR Server widget. It defines the widget type as 'channelsdvrserver' and specifies the URL for the Channels DVR Server, including the host or IP address and port number. The URL parameter is crucial for the widget to connect to the correct server instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/channelsdvrserver.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: channelsdvrserver\n  url: http://server.host.or.ip:port\n```\n\n----------------------------------------\n\nTITLE: Custom Headers Configuration\nDESCRIPTION: This YAML snippet shows how to configure custom headers for the API request using the `headers` option in the custom API widget. This is useful for authentication or passing other request-specific information.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  X-API-Token: token\n```\n\n----------------------------------------\n\nTITLE: Configuring GameDig Widget in YAML\nDESCRIPTION: This YAML snippet configures a GameDig widget to retrieve information from a game server. It specifies the widget type, server type (e.g., csgo), and the server URL. The URL should include the protocol (udp or tcp), hostname or IP address, and port.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/gamedig.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: gamedig\n  serverType: csgo # see https://github.com/gamedig/node-gamedig#games-list\n  url: udp://server.host.or.ip:port\n```\n\n----------------------------------------\n\nTITLE: Configuring Spoolman Widget in YAML\nDESCRIPTION: This YAML configuration defines a Spoolman widget, specifying the URL of the Spoolman instance and optionally defining which spools to display via their IDs.  The `widget` key defines a widget of `type` spoolman, with the `url` specifying the Spoolman server address. The `spoolIds` array (optional) controls which spools are displayed.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/spoolman.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: spoolman\n  url: http://spoolman.host.or.ip\n  spoolIds: [1, 2, 3, 4] # optional\n```\n\n----------------------------------------\n\nTITLE: Navidrome Widget Configuration\nDESCRIPTION: Defines the YAML configuration for the Navidrome widget. It includes the widget type, Navidrome URL, username, authentication token (generated using md5 hash of password and salt), and the salt value.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/navidrome.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: navidrome\n  url: http://navidrome.host.or.ip:port\n  user: username\n  token: token #md5(password + salt)\n  salt: randomsalt\n```\n\n----------------------------------------\n\nTITLE: Adguard Home Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures an Adguard Home widget. It specifies the widget type as 'adguard' and includes connection details such as the URL of the Adguard Home instance, the username, and the password for authentication. Ensure the URL is accessible and the username/password combination is correct for proper widget functionality.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/adguard-home.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: adguard\n  url: http://adguard.host.or.ip\n  username: admin\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate Widget\nDESCRIPTION: This YAML snippet configures a Frigate widget.  It specifies the widget type as 'frigate', the URL of the Frigate instance, and optionally enables recent event listings by setting 'enableRecentEvents' to true. The URL must point to a running Frigate instance.  Omitting 'enableRecentEvents' defaults it to false.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/frigate.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: frigate\n  url: http://frigate.host.or.ip:port\n  enableRecentEvents: true # Optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: FRITZ!Box YAML Widget Configuration\nDESCRIPTION: This YAML snippet provides an example configuration for the FRITZ!Box widget. It specifies the widget type as 'fritzbox' and sets the URL to the FRITZ!Box device. The URL should be the local IP address of the FRITZ!Box.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/fritzbox.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: fritzbox\n  url: http://192.168.178.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Audiobookshelf Widget\nDESCRIPTION: This YAML snippet configures the Audiobookshelf widget. It requires the URL of the Audiobookshelf instance and a valid API key. The `type` field specifies the widget type as `audiobookshelf`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/audiobookshelf.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: audiobookshelf\n  url: http://audiobookshelf.host.or.ip:port\n  key: audiobookshelflapikey\n```\n\n----------------------------------------\n\nTITLE: Configure Stocks Widget in services.yaml\nDESCRIPTION: This code snippet demonstrates how to configure the Stocks widget in the `services.yaml` file.  It specifies the widget type, provider, US market status display option, and a watchlist of stock symbols.  The `watchlist` supports up to 28 items.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/stocks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: stocks\n  provider: finnhub\n  showUSMarketStatus: true # optional, defaults to true\n  watchlist:\n    - GME\n    - AMC\n    - NVDA\n    - TSM\n    - BRK.A\n    - TSLA\n    - AAPL\n    - MSFT\n    - AMZN\n    - BRK.B\n```\n\n----------------------------------------\n\nTITLE: Configuring ESPHome Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the ESPHome widget. It includes specifying the ESPHome instance URL, optional username and password for authentication, and the `type` of the widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/esphome.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: esphome\n  url: http://esphome.host.or.ip:port\n  username: myesphomeuser # only if auth enabled\n  password: myesphomepass # only if auth enabled\n```\n\n----------------------------------------\n\nTITLE: Komga Widget Configuration in YAML\nDESCRIPTION: Configures the Komga widget with essential parameters such as URL, username, password, and an optional API key. It specifies the widget type as 'komga' and provides authentication details for accessing the Komga API. The 'url' parameter specifies the Komga server address.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/komga.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: komga\n  url: http://komga.host.or.ip:port\n  username: username\n  password: password\n  key: komgaapikey # optional\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration for synologyProxyHandler - YAML\nDESCRIPTION: YAML configuration for defining a widget using `synologyProxyHandler`. It shows how to configure the `url`, `username`, and `password` properties for Synology API authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      username: your-username\n      password: your-password\n```\n\n----------------------------------------\n\nTITLE: Configuring Pyload Widget with YAML\nDESCRIPTION: This YAML snippet configures the Pyload widget.  It defines the widget type as 'pyload' and specifies the URL, username, and password for accessing the Pyload instance. The `widget` key contains the configuration details including the type, URL, username, and password.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/pyload.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: pyload\n  url: http://pyload.host.or.ip:port\n  username: username\n  password: password # only needed if set\n```\n\n----------------------------------------\n\nTITLE: QNAP Single Volume Tracking YAML\nDESCRIPTION: This YAML configuration snippet shows how to track a single volume instead of the sum of all volumes.  By adding the `volume` field and specifying the volume name as it appears in the QNAP device, the widget will track only the specified volume usage as _volumeUsage_.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/qnap.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvolume: Volume Name From QNAP\n```\n\n----------------------------------------\n\nTITLE: Configure Finnhub Provider in settings.yaml\nDESCRIPTION: This code snippet shows how to configure the Finnhub provider in the `settings.yaml` file.  It requires replacing `yourfinnhubapikeyhere` with your actual Finnhub API key. This key is used to authenticate requests to the Finnhub API.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/stocks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  finnhub: yourfinnhubapikeyhere\n```\n\n----------------------------------------\n\nTITLE: Mylar3 Widget YAML Configuration\nDESCRIPTION: This YAML snippet configures a Mylar3 widget, specifying the type as 'mylar', the URL of the Mylar3 instance, and the API key for authentication.  Ensure that the API is enabled in Mylar3 settings for this configuration to work correctly.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/mylar.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: mylar\n  url: http://mylar3.host.or.ip:port\n  key: yourmylar3apikey\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenWeatherMap Widget with YAML\nDESCRIPTION: This YAML snippet configures the OpenWeatherMap widget. It specifies the location using latitude and longitude, sets the units to metric, provides the API key (or specifies the provider), and configures caching to avoid exceeding API limits. It also allows optional formatting of numbers.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/openweathermap.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- openweathermap:\n    label: Kyiv #optional\n    latitude: 50.449684\n    longitude: 30.525026\n    units: metric # or imperial\n    provider: openweathermap\n    apiKey: youropenweathermapkey # required only if not using provider, this reveals api key in requests\n    cache: 5 # Time in minutes to cache API responses, to stay within limits\n    format: # optional, Intl.NumberFormat options\n      maximumFractionDigits: 1\n```\n\n----------------------------------------\n\nTITLE: Search Configuration (Google)\nDESCRIPTION: Configures a search widget using Google as the search provider.  It sets the focus to the search bar on page load and displays search suggestions. The search results will open in a new tab (_blank).  This configuration requires no external dependencies.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/search.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- search:\n    provider: google # google, duckduckgo, bing, baidu, brave or custom\n    focus: true # Optional, will set focus to the search bar on page load\n    showSearchSuggestions: true # Optional, will show search suggestions. Defaults to false\n    target: _blank # One of _self, _blank, _parent or _top\n```\n\n----------------------------------------\n\nTITLE: Headscale Widget Configuration YAML\nDESCRIPTION: This YAML snippet shows the configuration for the Headscale widget. It defines the widget type, URL, node ID, and API key needed to connect to a Headscale instance.  The URL should point to the Headscale server, the nodeId should be a valid node ID, and the key should be a valid API access token.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/headscale.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: headscale\n  url: http://headscale.host.or.ip:port\n  nodeId: nodeid\n  key: headscaleapiaccesstoken\n```\n\n----------------------------------------\n\nTITLE: Homebox Widget Configuration in YAML\nDESCRIPTION: This YAML configuration defines a Homebox widget. It specifies the type, URL, username, password, and the fields to be displayed. The `fields` parameter is optional and defaults to a predefined set of fields if not specified.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/homebox.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: homebox\n  url: http://homebox.host.or.ip:port\n  username: username\n  password: password\n  fields: [\"items\", \"locations\", \"totalValue\"] # optional - default fields shown\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Widget with YAML\nDESCRIPTION: This YAML snippet configures a Grafana widget. It specifies the widget type as 'grafana' and includes the URL, username, and password for accessing the Grafana instance. Ensure to replace the placeholder values with your actual Grafana credentials and URL.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/grafana.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: grafana\n  url: http://grafana.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Proxmox Backup Server Widget Configuration\nDESCRIPTION: This YAML snippet configures a Proxmox Backup Server widget.  It specifies the widget type, the URL of the Proxmox Backup Server, and the credentials (username and password) for accessing the server via an API token. The username is the API token ID, and the password is the API token secret.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/proxmoxbackupserver.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: proxmoxbackupserver\n  url: https://proxmoxbackupserver.host:port\n  username: api_token_id\n  password: api_token_secret\n```\n\n----------------------------------------\n\nTITLE: Search Configuration (Custom)\nDESCRIPTION: Configures a search widget using a custom search provider. The `url` parameter specifies the base URL for the search query, and the `suggestionUrl` parameter (optional) provides a URL for search suggestions. The search results open in a new tab (_blank).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/search.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- search:\n    provider: custom\n    url: https://www.ecosia.org/search?q=\n    target: _blank\n    suggestionUrl: https://ac.ecosia.org/autocomplete?type=list&q= # Optional\n    showSearchSuggestions: true # Optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Vikunja Widget YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Vikunja widget. It requires specifying the Vikunja instance URL (`url`), API key (`key`), and optionally enabling the task list (`enableTaskList`). The `enableTaskList` option defaults to `false` if not specified.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/vikunja.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: vikunja\n  url: http[s]://vikunja.host.or.ip[:port]\n  key: vikunjaapikey\n  enableTaskList: true # optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Configuring TrueNAS Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of a TrueNAS widget. It includes options for URL, username/password or API key authentication, enabling detailed pool listings, and specifying the TrueNAS type (Scale or Core). The `enablePools` option requires `nasType` to be set to 'core' when using TrueNAS Core.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/truenas.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: truenas\n  url: http://truenas.host.or.ip\n  username: user # not required if using api key\n  password: pass # not required if using api key\n  key: yourtruenasapikey # not required if using username / password\n  enablePools: true # optional, defaults to false\n  nasType: scale # defaults to scale, must be set to 'core' if using enablePools with TrueNAS Core\n```\n\n----------------------------------------\n\nTITLE: Configuring JDownloader Widget in YAML\nDESCRIPTION: This YAML snippet configures the JDownloader widget for NextPVR. It specifies the widget type, JDownloader credentials (username and password), and the name of the JDownloader instance. Ensure the provided credentials have access to the JDownloader API.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/jdownloader.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: jdownloader\n  username: JDownloader Username\n  password: JDownloader Password\n  client: Name of JDownloader Instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Mealie Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of a Mealie widget. It requires the Mealie URL, a valid API key, and optionally the Mealie version if it's greater than 1. The API key should be generated under 'Profile > Manage Your API Tokens > Generate'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/mealie.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: mealie\n  url: http://mealie-frontend.host.or.ip\n  key: mealieapitoken\n  version: 2 # only required if version > 1, defaults to 1\n```\n\n----------------------------------------\n\nTITLE: FreshRSS Widget Configuration in YAML\nDESCRIPTION: This YAML snippet configures a FreshRSS widget. It requires the FreshRSS URL, username, and API password.  Allowed fields include \"subscriptions\" and \"unread\".\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/freshrss.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: freshrss\n  url: http://freshrss.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Mode to Cluster\nDESCRIPTION: Configures the Homepage application to run in cluster mode within Kubernetes. This setting is specified in the `kubernetes.yaml` file and is crucial for proper integration with the Kubernetes environment. Requires that the kubernetes.yaml file exists.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmode: default\n```\n\n----------------------------------------\n\nTITLE: PeaNUT Widget Configuration\nDESCRIPTION: This YAML configuration defines the settings for the PeaNUT widget. It specifies the type as 'peanut', the URL to the PeaNUT service, the key (name) of the UPS, and optional username and password for authentication if required.  It allows monitoring of 'battery_charge', 'ups_load', and 'ups_status'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/peanut.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: peanut\n  url: http://peanut.host.or.ip:port\n  key: nameofyourups\n  username: username # only needed if set\n  password: password # only needed if set\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkwarden Widget\nDESCRIPTION: This YAML snippet demonstrates how to configure the Linkwarden widget. It specifies the widget type, the URL of the Linkwarden instance, and the API key for authentication. Ensure to replace 'http://linkwarden.host.or.ip' with your Linkwarden instance URL and 'myApiKeyHere' with your generated API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/linkwarden.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: linkwarden\n  url: http://linkwarden.host.or.ip\n  key: myApiKeyHere # On your Linkwarden install, go to Settings > Access Tokens. Generate a token.\n```\n\n----------------------------------------\n\nTITLE: Configuring Wg-Easy Widget\nDESCRIPTION: This YAML snippet configures the Wg-Easy widget. It specifies the widget type as 'wgeasy', the URL of the Wg-Easy instance, the password required to access the instance, and an optional threshold value. The threshold determines how long to wait (in minutes) since the last handshake before considering a device connected.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/wgeasy.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: wgeasy\n  url: http://wg.easy.or.ip\n  password: yourwgeasypassword\n  threshold: 2 # optional\n```\n\n----------------------------------------\n\nTITLE: Configure Karakeep Widget YAML\nDESCRIPTION: This YAML snippet configures the Karakeep widget.  It specifies the widget type, the URL of the Karakeep instance, and the API key for authentication.  The `url` should be replaced with the actual Karakeep instance URL and `key` with a valid API key generated from Karakeep.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/karakeep.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: karakeep\n  url: http[s]://karakeep.host.or.ip[:port]\n  key: karakeep_api_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Speedtest Tracker Widget\nDESCRIPTION: This YAML snippet demonstrates how to configure the Speedtest Tracker widget. It includes settings for the URL of the Speedtest Tracker instance, the version of the Speedtest Tracker API to use (version 1 or version 2), an API key (required for version 2), and the precision of bitrate values displayed. Version 1 is compatible with both 'alexjustesen/speedtest-tracker' and 'henrywhitaker3/Speedtest-Tracker' while version 2 is only compatible with 'alexjustesen/speedtest-tracker'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/speedtest-tracker.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: speedtest\n  url: http://speedtest.host.or.ip\n  version: 1 # optional, default is 1\n  key: speedtestapikey # required for version 2\n  bitratePrecision: 3 # optional, default is 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Suwayomi Widget using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Suwayomi widget. It includes parameters such as the widget type, URL of the Suwayomi server, optional username and password for authentication, and an optional category ID. The category ID defaults to all categories if not specified.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/suwayomi.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: suwayomi\n  url: http://suwayomi.host.or.ip\n  username: username #optional\n  password: password #optional\n  category: 0 #optional, defaults to all categories\n```\n\n----------------------------------------\n\nTITLE: Caddy Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures a Caddy widget to monitor a Caddy server. The `type` is set to `caddy`, and the `url` specifies the address of the Caddy admin API. Ensure the admin port (default 2019) is accessible.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/caddy.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: caddy\n  url: http://caddy.host.or.ip:adminport # default admin port is 2019\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with IP:PORT in YAML\nDESCRIPTION: This YAML snippet demonstrates configuring a remote Docker instance using its IP address and port number.  The host and port are specified under the docker configuration. Ensure the Docker instance is configured to accept API traffic over HTTP.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmy-remote-docker:\n  host: 192.168.0.101\n  port: 2375\n```\n\n----------------------------------------\n\nTITLE: Gatus Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures a Gatus widget.  It specifies the widget type as \"gatus\" and provides the URL to the Gatus instance.  The `url` parameter defines the endpoint where the Gatus service is running, allowing the widget to fetch status data.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/gatus.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: gatus\n  url: http://gatus.host.or.ip:port\n```\n\n----------------------------------------\n\nTITLE: Medusa Widget Configuration in YAML\nDESCRIPTION: This YAML snippet configures a Medusa widget. It defines the widget type as 'medusa' and specifies the URL and API key required to connect to the Medusa instance. The URL should point to the Medusa server, and the API key is necessary for authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/medusa.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: medusa\n  url: http://medusa.host.or.ip:port\n  key: medusaapikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Configuring Longhorn Widget\nDESCRIPTION: This YAML snippet demonstrates how to configure the Longhorn widget to show the expanded view, aggregate values, node names as labels, and individual nodes. It also shows how to include a specific list of nodes.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/longhorn.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- longhorn:\n    # Show the expanded view\n    expanded: true\n    # Shows a node representing the aggregate values\n    total: true\n    # Shows the node names as labels\n    labels: true\n    # Show the nodes\n    nodes: true\n    # An explicit list of nodes to show. All are shown by default if \"nodes\" is true\n    include:\n      - node1\n      - node2\n```\n\n----------------------------------------\n\nTITLE: Configuring Moonraker Widget Basic Connection (YAML)\nDESCRIPTION: This snippet configures the basic connection to a Moonraker instance. It defines the widget type as 'moonraker' and specifies the URL where the Moonraker instance is running.  No API key is included, so the connecting IP needs to be whitelisted. The URL should point to the Moonraker instance's address.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/moonraker.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: moonraker\n  url: http://moonraker.host.or.ip:port\n```\n\n----------------------------------------\n\nTITLE: Configure Slskd API Key in YAML\nDESCRIPTION: This snippet shows how to configure an API key for Slskd in the `slskd.yml` configuration file. It includes the key itself, a role (readonly in this case), and a CIDR block that specifies the homepage subnet. This configuration enables secure access to Slskd's API.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/slskd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhomepage_widget:\n  key: <generated key>\n  role: readonly\n  cidr: <homepage subnet>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout - YAML\nDESCRIPTION: This snippet shows how to configure the layout of service and bookmark sections to be either \"column\" or \"row\" based layouts. It assumes you have a group named `Media` in your `services.yaml` or `bookmarks.yaml` file.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  Media:\n    style: row\n    columns: 4\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Manager Widget YAML Configuration\nDESCRIPTION: This YAML snippet configures the Nginx Proxy Manager (npm) widget. It specifies the widget type, the URL of the npm instance, and the username and password for accessing the npm web UI. The `url` parameter must point to the npm host or IP address.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/nginx-proxy-manager.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: npm\n  url: http://npm.host.or.ip\n  username: admin_username\n  password: admin_password\n```\n\n----------------------------------------\n\nTITLE: DeveLanCacheUI Widget Configuration\nDESCRIPTION: This YAML snippet configures a DeveLanCacheUI widget.  It specifies the widget type as 'develancacheui' and the URL where the DeveLanCacheUI backend API can be accessed.  Replace 'http://your.develancacheui_backend.host:port' with the actual URL of your DeveLanCacheUI backend instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/develancacheui.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: develancacheui\n  url: http://your.develancacheui_backend.host:port\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Widget - Agenda View (YAML)\nDESCRIPTION: This YAML configuration sets up the calendar widget in agenda view, which displays a list of events from configured integrations. It allows customization of maximum events displayed, time display, and the number of previous days to show events from. Integrations are configured in the same way as in the Monthly view, allowing events from services like Sonarr, Radarr, Lidarr, Readarr and ical.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/calendar.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: calendar\n  view: agenda\n  maxEvents: 10 # optional - defaults to 10\n  showTime: true # optional - show time for event happening today - defaults to false\n  previousDays: 3 # optional - shows events since three days ago - defaults to 0\n  integrations: # same as in Monthly view example\n```\n\n----------------------------------------\n\nTITLE: Omada Widget Configuration YAML\nDESCRIPTION: Configures the Omada widget by specifying the type, URL, username, password, and site. The URL points to the Omada controller, and the username and password provide authentication. The site specifies the site name within the Omada controller to monitor.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/omada.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: omada\n  url: http://omada.host.or.ip:port\n  username: username\n  password: password\n  site: sitename\n```\n\n----------------------------------------\n\nTITLE: Sorting Groups in Layout - YAML\nDESCRIPTION: This snippet shows how to sort service and bookmark groups by specifying their order in the layout block. It also demonstrates how to mix in groups defined by Docker labels.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  - Auto-Discovered1:\n  - Configured1:\n  - Configured2:\n  - Auto-Discovered2:\n  - Configured3:\n      style: row\n      columns: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring EVCC Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an EVCC widget. It specifies the widget type as \"evcc\" and provides the URL to access the EVCC instance. Replace \"http://evcc.host.or.ip:port\" with the actual URL of your EVCC installation.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/evcc.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: evcc\n  url: http://evcc.host.or.ip:port\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchtower Widget\nDESCRIPTION: This YAML snippet configures the Watchtower widget. It specifies the widget type as 'watchtower', the URL where Watchtower metrics are exposed, and a key for authentication.  Ensure Watchtower is configured to enable metrics at the provided URL.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/watchtower.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: watchtower\n  url: http://your-ip-address:8080\n  key: demotoken\n```\n\n----------------------------------------\n\nTITLE: Adding Category Icons in Layout - YAML\nDESCRIPTION: This snippet demonstrates how to add an icon to a category under the `layout` setting, similar to the options for service icons.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nHome Management & Info:\n    icon: home-assistant.png\n  Server Tools:\n    icon: https://cdn-icons-png.flaticon.com/512/252/252035.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Portainer Widget in YAML\nDESCRIPTION: This YAML snippet configures a Portainer widget by specifying the type, URL, environment ID (env), and API key. The URL points to the Portainer instance, 'env' specifies the environment ID within Portainer, and 'key' provides the API key for authentication. The widget will then be able to display container status based on running, stopped and total counts.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/portainer.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: portainer\n  url: https://portainer.host.or.ip:9443\n  env: 1\n  key: ptr_accesskeyaccesskeyaccesskeyaccesskey\n```\n\n----------------------------------------\n\nTITLE: Grouping Resources with Labels - YAML\nDESCRIPTION: This YAML snippet demonstrates how to group resources under named sections using the `label` option.  It creates two resource groups: 'System' (displaying CPU and memory) and 'Storage' (displaying disk usage for a specified mount path). This allows for logical grouping of resources within the widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/resources.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- resources:\n    label: System\n    cpu: true\n    memory: true\n\n- resources:\n    label: Storage\n    disk: /mnt/storage\n```\n\n----------------------------------------\n\nTITLE: Plant-it Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures the Plant-it widget. It specifies the widget type, the URL of the Plant-it API, and the API key required for authentication. It also implies the allowed fields that can be used with the widget (events, plants, photos, and species).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/plantit.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: plantit\n  url: http://plant-it.host.or.ip:port # api port\n  key: plantit-api-key\n```\n\n----------------------------------------\n\nTITLE: Nextcloud Widget Configuration with Username/Password - YAML\nDESCRIPTION: Configures the Nextcloud widget using username and password for authentication. The 'url' parameter specifies the Nextcloud instance address, 'username' provides the username, and 'password' provides the corresponding password. Note that using a token is the preferred authentication method if available.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/nextcloud.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: nextcloud\n  url: https://nextcloud.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Initializing Advanced Widget Configuration JavaScript\nDESCRIPTION: This snippet showcases an advanced widget configuration using JavaScript. It includes a credentialed proxy handler, API helpers for JSON processing, and complex mappings with validation, parameters, and data transformation. It imports `credentialedProxyHandler`, `asJson`, and `jsonArrayFilter`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport credentialedProxyHandler from \"utils/proxy/handlers/credentialed\";\nimport { asJson, jsonArrayFilter } from \"utils/proxy/api-helpers\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: credentialedProxyHandler,\n\n  mappings: {\n    stats: {\n      endpoint: \"stats\",\n      validate: [\"total\", \"average\"],\n      params: [\"start\", \"end\"],\n    },\n    notices: {\n      endpoint: \"notices\",\n      map: (data) => {\n        total: asJson(data).length;\n      },\n    },\n    warnings: {\n      endpoint: \"notices\",\n      map: (data) => {\n        total: jsonArrayFilter(data, (alert) => alert.type === \"warning\").length;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Info Widgets in widgets.yaml\nDESCRIPTION: This snippet shows how to configure an info widget in the `widgets.yaml` file. It includes settings for the widget label, latitude, longitude, and cache duration.  The `latitude` and `longitude` parameters are specific to the `openmeteo` widget type and are used to fetch weather data. The `cache` parameter specifies how often the data should be refreshed.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- openmeteo:\n    label: Current\n    latitude: 36.66\n    longitude: -117.51\n    cache: 5\n```\n\n----------------------------------------\n\nTITLE: Stash Widget Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Stash widget. It includes the widget type, Stash instance URL, API key, and a list of fields to display. The API key is required only if the Stash instance has login credentials. The fields parameter specifies which data points to show (e.g., \"scenes\", \"images\").\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/stash.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: stash\n  url: http://stash.host.or.ip\n  key: stashapikey\n  fields: [\"scenes\", \"images\"] # optional - default fields shown\n```\n\n----------------------------------------\n\nTITLE: Complete Widget Component in component.jsx\nDESCRIPTION: Presents the complete code for the widget's functional component in `component.jsx`. This component fetches data, handles errors, displays a loading state and dynamically renders data with translations.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTranslation } from \"next-i18next\";\n\nimport Container from \"components/services/widget/container\";\nimport Block from \"components/services/widget/block\";\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { t } = useTranslation();\n  const { widget } = service;\n  const { data, error } = useWidgetAPI(widget, \"info\");\n\n  if (error) {\n    return <Container service={service} error={error} />;\n  }\n\n  if (!data) {\n    return (\n      <Container service={service}>\n        <Block label=\"yourwidget.key1\" />\n        <Block label=\"yourwidget.key2\" />\n        <Block label=\"yourwidget.key3\" />\n      </Container>\n    );\n  }\n\n  return (\n    <Container service={service}>\n      <Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} />\n      <Block label=\"yourwidget.key2\" value={t(\"common.number\", { value: data.key2 })} />\n      <Block label=\"yourwidget.key3\" value={t(\"common.number\", { value: data.key3 })} />\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Crowdsec Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures a Crowdsec widget. It defines the widget type, URL, username (machine_id), and password for accessing the Crowdsec API. Ensure the URL is accessible and credentials are valid for successful integration.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/crowdsec.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: crowdsec\n  url: http://crowdsechostorip:port\n  username: localhost # machine_id in crowdsec\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Adding Service Descriptions in YAML\nDESCRIPTION: This snippet illustrates how to add descriptions to services within the `services.yaml` file. The `description` property allows you to provide a brief explanation or information about the service.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Service A:\n        href: http://localhost/\n        description: This is my service\n\n- Group B:\n    - Service B:\n        href: http://localhost/\n        description: This is another service\n```\n\n----------------------------------------\n\nTITLE: Technitium DNS Widget Configuration\nDESCRIPTION: This YAML snippet configures a Technitium DNS Server widget. It specifies the widget type, the URL of the DNS server, the API key for authentication, and the time range for data retrieval. The `range` parameter is optional and defaults to `LastHour` if not specified. The API key should be generated from a dedicated API user in the Technitium DNS Dashboard.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/technitium.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: technitium\n  url: <url to dns server>\n  key: biglongapitoken\n  range: LastDay # optional, defaults to LastHour\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates the basic configuration for a Prometheus widget. It sets the widget type to 'prometheus' and specifies the URL of the Prometheus server.  No dependencies are explicitly defined in the snippet itself, but a running Prometheus instance is required.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/prometheus.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: prometheus\n  url: http://prometheushost:port\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Proxy Handler in Homepage - JS\nDESCRIPTION: Demonstrates how to create a custom proxy handler in Homepage. It imports necessary utilities like `createLogger` and `httpProxy`, defines an asynchronous function that handles the request, fetches data from the API using `httpProxy`, and sends the response with the appropriate status and data.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport createLogger from \"utils/logger\";\nimport { httpProxy } from \"utils/proxy/http\";\n\nconst logger = createLogger(\"customProxyHandler\");\n\nexport default async function customProxyHandler(req, res, map) {\n  const { url } = req.query;\n\n  const [status, contentType, data] = await httpProxy(url);\n\n  return res.status(status).send(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Transformation Examples\nDESCRIPTION: This YAML snippet provides examples of data transformation techniques used within the custom API widget, including `remap`, `scale`, `prefix`, and `suffix`. These transformations allow manipulating the data retrieved from the API before displaying it in the widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- field: key4\n  label: Field 4\n  format: text\n  remap:\n    - value: 0\n      to: None\n    - value: 1\n      to: Connected\n    - any: true # will map all other values\n      to: Unknown\n- field: key5\n  label: Power\n  format: float\n  scale: 0.001 # can be number or string e.g. 1/16\n  suffix: \"kW\"\n- field: key6\n  label: Price\n  format: float\n  prefix: \"$\"\n```\n\n----------------------------------------\n\nTITLE: Configuring jsonrpcProxyHandler with mappings - JS\nDESCRIPTION: Demonstrates how to configure `jsonrpcProxyHandler` with endpoint mappings. The `mappings` object defines aliases for different API methods, allowing for a more readable and maintainable widget configuration.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport jsonrpcProxyHandler from \"utils/proxy/handlers/jsonrpc\";\n\nconst widgetExample = {\n  api: \"{url}/api/jsonrpc\",\n  proxyHandler: jsonrpcProxyHandler,\n\n  mappings: {\n    total: { endpoint: \"total\" },\n    average: { endpoint: \"average\" },\n    trigger: { endpoint: \"trigger.get\" },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tautulli Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Tautulli widget to display Plex stream information. It includes the Tautulli URL, API key, and optional settings such as enabling user display, showing episode numbers, and controlling stream row expansion.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/plex-tautulli.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: tautulli\n  url: http://tautulli.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableUser: true # optional, defaults to false\n  showEpisodeNumber: true # optional, defaults to false\n  expandOneStreamToTwoRows: false # optional, defaults to true\n```\n\n----------------------------------------\n\nTITLE: Use Equal Height Cards - YAML\nDESCRIPTION: This snippet demonstrates how to enable equal height cards for groups of services, this will make all cards in a row the same height.  It shows both global and per-group settings.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nuseEqualHeights: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuseEqualHeights: false\nlayout:\n  ...\n  Group Name:\n    useEqualHeights: true # overrides global setting\n```\n\n----------------------------------------\n\nTITLE: Pi-hole API Endpoint Test\nDESCRIPTION: This `curl` command tests the connectivity and response from the Pi-hole API. It retrieves data from the `/admin/api.php` endpoint, allowing you to verify that the Pi-hole service is accessible and functioning correctly. Useful for debugging Pi-hole widget issues.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/troubleshooting/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -k http://PIHOLEIPORHOST/admin/api.php\n```\n\n----------------------------------------\n\nTITLE: Configuring pfSense Widget for API v1 (YAML)\nDESCRIPTION: Configures a pfSense widget to connect to the pfSense API v1. Uses 'Authorization' header with client_id and client_token obtained from pfSense API. API version is set to 1.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/pfsense.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nheaders: # optional, or username/password\n  Authorization: client_id client_token # obtained from pfSense API\nversion: 1\n```\n\n----------------------------------------\n\nTITLE: Gotify Widget Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of a Gotify widget. It requires specifying the Gotify server URL and a valid client token obtained from the Gotify admin page. The configuration defines the 'type' as 'gotify', the 'url' to access the Gotify server, and the 'key' as the client's API token.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/gotify.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: gotify\n  url: http://gotify.host.or.ip\n  key: clientoken\n```\n\n----------------------------------------\n\nTITLE: Using genericProxyHandler in Homepage - JS\nDESCRIPTION: Demonstrates how to use the `genericProxyHandler` in a Homepage widget configuration to make unauthenticated requests to a specified API endpoint. The API URL is defined using placeholders that can be populated from the widget configuration.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport genericProxyHandler from \"utils/proxy/handlers/generic\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: genericProxyHandler,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Widget Service in services.yaml\nDESCRIPTION: This code snippet demonstrates how to add a custom widget as a service in the `services.yaml` file for the Homepage application. It defines the widget's icon, URL, type, and API endpoint URL, which is used to fetch data for the widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- Services:\n    - Your Widget:\n        icon: yourwidget.svg\n        href: https://example.com/\n        widget:\n          type: yourwidget\n          url: http://127.0.0.1:1337\n```\n\n----------------------------------------\n\nTITLE: Configuring Flood Widget\nDESCRIPTION: This YAML snippet configures the Flood widget by specifying the `type` as `flood`, along with the `url` of the Flood instance. Optionally, `username` and `password` can be provided for authentication. The widget allows monitoring of leech, download, seed, and upload activities.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/flood.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: flood\n  url: http://flood.host.or.ip\n  username: username # if set\n  password: password # if set\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Component in component.jsx\nDESCRIPTION: Defines the `Component` function, the main component for the widget. It uses the `useTranslation` hook to access translation strings and the `useWidgetAPI` hook to fetch data. The component handles error states, loading states (skeleton view), and displaying data using `Container` and `Block` components.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Component({ service }) {}\n```\n\n----------------------------------------\n\nTITLE: ArgoCD Helm Chart Overrides for RBAC\nDESCRIPTION: This YAML snippet shows the helm chart overrides to create a new account called `readonly` and attaches the `role:readonly` role to it. The account has the `apiKey` capability.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/argocd.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs:\n  cm:\n    accounts.readonly: apiKey\n  rbac:\n    policy.csv: \"g, readonly, role:readonly\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MJPEG Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an MJPEG widget within the Homepage application. The `stream` parameter specifies the URL of the MJPEG stream, allowing the widget to display the video feed. Ensure the URL is accessible from the Homepage instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/mjpeg.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: mjpeg\n  stream: http://mjpeg.host.or.ip/webcam/stream\n```\n\n----------------------------------------\n\nTITLE: Pod Selector for Service Widgets\nDESCRIPTION: Uses `pod-selector` to bridge the gap when ingress and deployment labels do not conform. It allows selecting pods based on field selectors to aggregate multiple deployments under one application.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- Comms\n    - Element Chat:\n        icon: matrix-light.png\n        href: https://chat.example.com\n        description: Matrix Synapse Powered Chat\n        app: matrix-element\n        namespace: comms\n        pod-selector: >-\n            app.kubernetes.io/instance in (\n                matrix-element,\n                matrix-media-repo,\n                matrix-media-repo-postgresql,\n                matrix-synapse\n            )\n```\n\n----------------------------------------\n\nTITLE: OpenWRT ACL Configuration\nDESCRIPTION: This JSON snippet defines an Access Control List (ACL) for the Homepage widget in OpenWRT.  It grants read access to specific ubus endpoints required by the widget. This ACL restricts the widget's access to only necessary system and network information, enhancing security.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/openwrt.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": {\n    \"description\": \"Homepage widget\",\n    \"read\": {\n      \"ubus\": {\n        \"network.interface.wan\": [\"status\"],\n        \"network.interface.lan\": [\"status\"],\n        \"network.device\": [\"status\"],\n        \"system\": [\"info\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Widget Object in component.jsx\nDESCRIPTION: Destructures the `widget` object from the `service` prop, providing access to the widget's metadata, such as the API endpoint.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { widget } = service;\n```\n\n----------------------------------------\n\nTITLE: Using credentialedProxyHandler in Homepage - JS\nDESCRIPTION: Demonstrates the usage of `credentialedProxyHandler` to make authenticated requests by setting request headers. Credentials like API keys are pulled from the widget's configuration in the `services.yaml` file.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport credentialedProxyHandler from \"utils/proxy/handlers/credentialed\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}?key={key}\",\n  proxyHandler: credentialedProxyHandler,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring What's Up Docker Widget\nDESCRIPTION: This YAML configuration defines the settings for the What's Up Docker widget. It includes the widget type, URL for the Docker instance, and optional username and password for authentication. The 'url' parameter is required and should point to the What's Up Docker service endpoint.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/whatsupdocker.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: whatsupdocker\n  url: http://whatsupdocker:port\n  username: username # optional\n  password: password # optional\n```\n\n----------------------------------------\n\nTITLE: Using Widget API with Parameters in React JavaScript\nDESCRIPTION: This React JavaScript snippet shows how to use the `useWidgetAPI` hook to fetch data with specified parameters. It passes `start` and `end` dates as parameters to the API endpoint for the 'stats' mapping.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: statsData, error: statsError } = useWidgetAPI(widget, \"stats\", {\n  start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n  end: new Date(),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bazarr Widget\nDESCRIPTION: This YAML snippet configures the Bazarr widget. It requires the Bazarr URL and API key. The 'type' field specifies the widget type as 'bazarr'.  The 'url' field should point to your Bazarr instance, and the 'key' field should contain your Bazarr API key, found under `Settings > General` in Bazarr.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/bazarr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: bazarr\n  url: http://bazarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Configuring Service YAML for Widget\nDESCRIPTION: This YAML snippet shows how to configure a service for a widget, including the icon, href, widget type, and URL. It is used alongside the JavaScript widget configuration to define how the widget is integrated into the Homepage.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- Services:\n    - Your Widget:\n        icon: yourwidget.svg\n        href: https://example.com/\n        widget:\n          type: yourwidget\n          url: http://127.0.0.1:1337\n```\n\n----------------------------------------\n\nTITLE: Using jsonrpcProxyHandler in Homepage - JS\nDESCRIPTION: Illustrates the usage of `jsonrpcProxyHandler` to make authenticated JSON-RPC requests to an API endpoint. It shows the integration with a React component `useWidgetAPI` and defines mappings for different API endpoints within the widget configuration.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Container from \"components/services/widget/container\";\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { widget } = service;\n\n  const { data, error } = useWidgetAPI(widget, 'trigger', { \"triggerids\": \"14062\", \"output\": \"extend\", \"selectFunctions\": \"extend\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Romm Widget Configuration\nDESCRIPTION: This YAML configuration defines a Romm widget. It specifies the widget type as 'romm', a URL for the widget's data source, and an optional list of fields to display. The 'fields' parameter allows you to customize which data points are shown in the widget; if more than 4 fields are specified, only the first 4 are used.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/romm.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: romm\n  url: http://romm.host.or.ip\n  fields: [\"platforms\", \"totalRoms\", \"saves\", \"states\"] # optional - default fields shown\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Property in Mappings JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to configure the `map` property within the `mappings` object. The `map` property is a function that transforms the API response before it is passed to the widget. The example imports `asJson` and uses it to calculate the total number of notices.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { asJson } from \"utils/proxy/api-helpers\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/notices`\n    notices: {\n      endpoint: \"notices\",\n      map: (data) => {\n        total: asJson(data).length;\n      },\n    },\n    // `/api/notices`\n    warnings: {\n      endpoint: \"notices\",\n      map: (data) => {\n        total: asJson(data).filter((alert) => alert.type === \"warning\").length;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs in Layout - YAML\nDESCRIPTION: This snippet shows how to configure a tabbed view in the layout. Tabs are only active if you set the `tab` field on at least one layout group.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  ...\n  Bookmark Group on First Tab:\n    tab: First\n\n  First Service Group:\n    tab: First\n    style: row\n    columns: 4\n\n  Second Service Group:\n    tab: Second\n    columns: 4\n\n  Third Service Group:\n    tab: Third\n    style: row\n\n  Bookmark Group on Fourth Tab:\n    tab: Fourth\n\n  Service Group on every Tab:\n    style: row\n    columns: 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Xteve Widget in YAML\nDESCRIPTION: This YAML snippet configures the Xteve widget by specifying the type, URL, and optional credentials. The `type` field must be set to `xteve`.  The `url` parameter is the address of your Xteve instance. The optional `username` and `password` fields are for authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/xteve.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: xteve\n  url: http://xteve.host.or.ip\n  username: username # optional\n  password: password # optional\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime - 24-Hour Time YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the DateTime widget to display time in a 24-hour format. The `timeStyle` is set to `short`, and `hourCycle` is set to `h23`. This configures the time to be displayed without AM/PM.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/datetime.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# 13:37\nformat:\n  timeStyle: short\n  hourCycle: h23\n```\n\n----------------------------------------\n\nTITLE: Custom API Widget Mappings Configuration\nDESCRIPTION: This YAML snippet shows docker labels to configure the CustomAPI widget with mappings for custom fields. Labels specify the label and field for each mapping to extract data from the API response.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - homepage.group=Media\n  - homepage.name=Emby\n  - homepage.icon=emby.png\n  - homepage.href=http://emby.home/\n  - homepage.description=Media server\n  - homepage.widget.type=customapi\n  - homepage.widget.url=http://argus.service/api/v1/service/summary/emby\n  - homepage.widget.mappings[0].label=Deployed Version\n  - homepage.widget.mappings[0].field.status=deployed_version\n  - homepage.widget.mappings[1].label=Latest Version\n  - homepage.widget.mappings[1].field.status=latest_version\n```\n\n----------------------------------------\n\nTITLE: Glances Widget with Graphless View\nDESCRIPTION: This YAML snippet showcases how to configure a Glances widget to display network usage data in a compact \"graphless\" view.  By adding `chart: false` to the widget configuration, the widget will display a simplified view without the graph.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/glances.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- Network Usage:\n    widget:\n      type: glances\n      url: http://glances.host.or.ip:port\n      metric: network:enp0s25\n      chart: false\n```\n\n----------------------------------------\n\nTITLE: Using synologyProxyHandler in Homepage - JS\nDESCRIPTION: Illustrates how to use the `synologyProxyHandler` for making authenticated requests to a Synology API. It showcases the API URL structure specific to Synology DSM and the use of mappings to define different API endpoints.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport synologyProxyHandler from \"utils/proxy/handlers/synology\";\n\nconst widgetExample = {\n  api: \"{url}/webapi/{cgiPath}?api={apiName}&version={maxVersion}&method={apiMethod}\",\n  proxyHandler: synologyProxyHandler,\n\n  mappings: {\n    system_storage: {\n      apiName: \"SYNO.Core.System\",\n      apiMethod: 'info&type=\"storage\"',\n      endpoint: \"system_storage\",\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mastodon Widget with YAML\nDESCRIPTION: This YAML snippet configures a Mastodon widget by specifying its type and the base URL of the Mastodon instance. It defines the widget's type as 'mastodon' and sets the 'url' parameter to the desired Mastodon host.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/mastodon.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: mastodon\n  url: https://mastodon.host.name\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Disks in Glances YAML\nDESCRIPTION: Demonstrates how to specify multiple disks to be monitored by the Glances widget.  Each disk is listed as a separate item within a YAML list under the `disk` property. This configuration allows for monitoring the usage of multiple mount points.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/glances.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndisk:\n  - /\n  - /boot\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers Property in Mappings JavaScript\nDESCRIPTION: This JavaScript code illustrates how to configure the `headers` property within the `mappings` object. The `headers` property is an object containing additional headers that should be included in the API request.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Glances Widget Configuration\nDESCRIPTION: This YAML snippet demonstrates the basic configuration for a Glances widget. It specifies the widget type, URL of the Glances server, optional authentication details (username and password), Glances version, metric to display (e.g., CPU), disk unit formatting, refresh interval in milliseconds, and the number of data points to display in the widget. The `version` parameter is required only if running Glances v4 or higher.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/glances.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: glances\n  url: http://glances.host.or.ip:port\n  username: user # optional if auth enabled in Glances\n  password: pass # optional if auth enabled in Glances\n  version: 4 # required only if running glances v4 or higher, defaults to 3\n  metric: cpu\n  diskUnits: bytes # optional, bytes (default) or bbytes. Only applies to disk\n  refreshInterval: 5000 # optional - in milliseconds, defaults to 1000 or more, depending on the metric\n  pointsLimit: 15 # optional, defaults to 15\n```\n\n----------------------------------------\n\nTITLE: CoinMarketCap Widget Configuration with Symbols in YAML\nDESCRIPTION: This YAML snippet configures the CoinMarketCap widget, specifying the widget type, currency (optional), a list of currency symbols, an API key, and a default interval (optional). The API key is essential for accessing CoinMarketCap data. The `defaultinterval` specifies the time range for the displayed data.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/coin-market-cap.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: coinmarketcap\n  currency: GBP # Optional\n  symbols: [BTC, LTC, ETH]\n  key: apikeyapikeyapikeyapikeyapikey\n  defaultinterval: 7d # Optional\n```\n\n----------------------------------------\n\nTITLE: Setting Card Background Blur - YAML\nDESCRIPTION: This snippet demonstrates how to apply a blur filter to the service & bookmark cards. Note this is incompatible with background blur, saturate and brightness filters.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncardBlur: xs # xs, md, etc... see https://tailwindcss.com/docs/backdrop-blur\n```\n\n----------------------------------------\n\nTITLE: OpenWRT Widget Configuration\nDESCRIPTION: This YAML snippet configures the OpenWRT widget in the Homepage application. It specifies the widget type, URL of the OpenWRT instance, username, password, and optionally the interface name to monitor. The `url`, `username`, and `password` parameters are essential for establishing a connection with the OpenWRT device.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/openwrt.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: openwrt\n  url: http://host.or.ip\n  username: homepage\n  password: pass\n  interfaceName: eth0 # optional\n```\n\n----------------------------------------\n\nTITLE: Container Component with Error\nDESCRIPTION: This example demonstrates passing an error to the `Container` component for error handling. The `error` prop is used to display an error message within the widget container when there's a problem fetching data.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/component.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Container service={service} error={error}></Container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Open-Meteo Widget in Homepage YAML\nDESCRIPTION: This snippet configures the Open-Meteo weather widget within a Homepage setup using YAML.  It defines parameters such as latitude, longitude, timezone, units, cache duration, and number formatting.  Latitude and longitude can be omitted to use the user's current location (requires HTTPS).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/openmeteo.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- openmeteo:\n    label: Kyiv # optional\n    latitude: 50.449684\n    longitude: 30.525026\n    timezone: Europe/Kiev # optional\n    units: metric # or imperial\n    cache: 5 # Time in minutes to cache API responses, to stay within limits\n    format: # optional, Intl.NumberFormat options\n      maximumFractionDigits: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Connection to Socket Proxy in YAML\nDESCRIPTION: This YAML snippet shows how to configure the Homepage docker instance to connect to the docker-socket-proxy. The host is set to the name of the dockerproxy container and the port to 2375.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmy-docker:\n  host: dockerproxy\n  port: 2375\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Placement Constraints\nDESCRIPTION: This YAML snippet is Docker Swarm configuration example which constrains services to be deployed on a manager node.  This is required for Homepage to detect all services within the swarm.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n....\n  deploy:\n    placement:\n      constraints:\n        - node.role == manager\n...\n```\n\n----------------------------------------\n\nTITLE: Setting a Local Background Image - YAML\nDESCRIPTION: This snippet demonstrates how to set a background image using a path relative to the `/app/public/images` directory, after mounting the directory via Docker Compose.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbackground: /images/background.png\n```\n\n----------------------------------------\n\nTITLE: CoinMarketCap Widget Configuration with Slugs in YAML\nDESCRIPTION: This YAML snippet configures the CoinMarketCap widget, using slugs instead of symbols. It specifies the widget type, a list of currency slugs, and an API key. Slugs are preferred over symbols to guarantee uniqueness. The API key is essential for accessing CoinMarketCap data.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/coin-market-cap.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: coinmarketcap\n  slugs: [chia-network, uniswap]\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Block Component Placeholder Layout\nDESCRIPTION: This shows a placeholder layout using the `Block` component within the `Container`. When data is unavailable, these `Block` components display placeholders using only labels, indicating missing data entries.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/component.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Container service={service}>\n  <Block label=\"yourwidget.key1\" />\n  <Block label=\"yourwidget.key2\" />\n  <Block label=\"yourwidget.key3\" />\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Netdata Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Netdata widget by specifying its type as 'netdata' and providing the URL of the Netdata instance. The 'url' parameter is crucial for the widget to fetch data from the specified Netdata server. This configuration allows the homepage to display metrics and information from the Netdata monitoring tool.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/netdata.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: netdata\n  url: http://netdata.host.or.ip\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: This YAML configuration defines the title, description, icon, and hidden elements for the homepage. It sets the page title to 'Home', provides a description, assigns a material icon, and hides the navigation, table of contents, and path elements.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Home\ndescription: A modern, fully static, fast, secure, fully proxied, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages.\nicon: material/home\nhide:\n  - navigation\n  - toc\n  - path\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Service Widgets in YAML\nDESCRIPTION: This snippet illustrates how to attach multiple widgets to a service using the `widgets` property (an array) in `services.yaml`. Each widget specifies its `type`, `url`, and any other necessary properties (e.g., `key` and `slug`).  Note that multiple widgets per service are not yet supported with Kubernetes ingress annotations.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- Emby:\n    icon: emby.png\n    href: http://emby.host.or.ip/\n    description: Movies & TV Shows\n    widgets:\n      - type: emby\n        url: http://emby.host.or.ip\n        key: apikeyapikeyapikeyapikeyapikey\n      - type: uptimekuma\n        url: http://uptimekuma.host.or.ip:port\n        slug: statuspageslug\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useWidgetAPI in component.jsx\nDESCRIPTION: Uses the `useWidgetAPI` hook to fetch data from the API, specifying the widget object and the `info` endpoint. Returns an object with `data` and `error` properties, handling potential API errors.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = useWidgetAPI(widget, \"info\");\n```\n\n----------------------------------------\n\nTITLE: Setting Link Target for a Specific Service\nDESCRIPTION: This YAML snippet shows how to configure the target attribute for a specific service. The `target` key accepts values such as `_blank` (open in new tab), `_self` (open in same tab), and `_top` (open in new window). This overrides any global setting.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n- Example Service:\n    href: https://example.com/\n    ...\n    target: _self\n```\n\n----------------------------------------\n\nTITLE: Verifying Service Connectivity in Docker\nDESCRIPTION: This command allows you to verify network connectivity from inside a Docker container. It is useful for troubleshooting widget connectivity issues by ensuring that the Homepage container can reach the service it's trying to connect to. This is a crucial step in diagnosing network-related problems with service widgets.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/troubleshooting/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec homepage ping SERVICEIPORDOMAIN\n```\n\n----------------------------------------\n\nTITLE: List View with Additional Field\nDESCRIPTION: This YAML configuration demonstrates the use of the `additionalField` property in the list view of the custom API widget. It allows displaying additional information next to the primary field, with optional color coding based on the value of the additional field.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- field: key\n  label: Field\n  format: text\n  remap:\n    - value: 0\n      to: None\n    - value: 1\n      to: Connected\n    - any: true # will map all other values\n      to: Unknown\n  additionalField:\n    field: hourly.time.key\n    color: theme\n    format: date\n```\n\n----------------------------------------\n\nTITLE: Longhorn Storage Widget Configuration\nDESCRIPTION: Configures the Longhorn widget to display storage stats. It allows showing expanded views, aggregate values, node names, and explicit node lists. Requires Longhorn to be installed.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- longhorn:\n    # Show the expanded\n    expanded: true\n    # Shows a node representing the aggregate values\n    total: true\n    # Shows the node names as labels\n    labels: true\n    # Show the nodes\n    nodes: true\n    # An explicit list of nodes to show. All are shown by default if \"nodes\" is true\n    include:\n      - node1\n      - node2\n```\n\n----------------------------------------\n\nTITLE: Configuring Unmanic Widget with YAML\nDESCRIPTION: This YAML snippet configures an Unmanic widget, specifying its type and the URL of the Unmanic instance.  The `type` field sets the widget type to 'unmanic'. The `url` field should be set to the address where the Unmanic instance is accessible.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/unmanic.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: unmanic\n  url: http://unmanic.host.or.ip:port\n```\n\n----------------------------------------\n\nTITLE: Custom Request Body Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom request body for the API request using the `requestBody` option in the custom API widget. It shows how to specify the request body as either a string or an object.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  foo: bar\n```\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody: \"{\\\"foo\\\":\\\"bar\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: NZBget Widget Configuration in YAML\nDESCRIPTION: This YAML snippet provides a sample configuration for an NZBget widget. It includes the widget type, URL, username, and password for authentication. The authentication method is HTTP Basic Auth, using ControlUsername and ControlPassword.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/nzbget.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: nzbget\n  url: http://nzbget.host.or.ip\n  username: controlusername\n  password: controlpassword\n```\n\n----------------------------------------\n\nTITLE: Disabling Collapsible Sections - YAML\nDESCRIPTION: This snippet demonstrates how to disable the collapsible feature of services & bookmarks.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndisableCollapse: true\n```\n\n----------------------------------------\n\nTITLE: iFrame Widget Full Configuration YAML\nDESCRIPTION: This snippet illustrates a full configuration of an iFrame widget with various optional parameters. It includes parameters like classes (using Tailwind CSS), referrerPolicy, allowPolicy, allowFullscreen, loadingStrategy, allowScrolling, and refreshInterval to customize the iFrame's behavior and appearance.  The refreshInterval parameter is in milliseconds.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/iframe.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: iframe\n  name: myIframe\n  src: http://example.com\n  classes: h-60 sm:h-60 md:h-60 lg:h-60 xl:h-60 2xl:h-72 # optional, use tailwind height classes, see https://tailwindcss.com/docs/height\n  referrerPolicy: same-origin # optional, no default\n  allowPolicy: autoplay; fullscreen; gamepad # optional, no default\n  allowFullscreen: false # optional, default: true\n  loadingStrategy: eager # optional, default: eager\n  allowScrolling: no # optional, default: yes\n  refreshInterval: 2000 # optional, no default\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflared Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the `cloudflared` widget. It requires an `accountid` (from the Cloudflare Zero Trust dashboard URL), a `tunnelid` (found in the Tunnels dashboard), and a `key` which is a Cloudflare API token with `Account.Cloudflare Tunnel:Read` permissions.  This widget displays tunnel status and origin IP information.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/cloudflared.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: cloudflared\n  accountid: accountid # from zero trust dashboard url e.g. https://one.dash.cloudflare.com/<accountid>/home/quick-start\n  tunnelid: tunnelid # found in tunnels dashboard under the tunnel name\n  key: cloudflareapitoken # api token with `Account.Cloudflare Tunnel:Read` https://dash.cloudflare.com/profile/api-tokens\n```\n\n----------------------------------------\n\nTITLE: Grouping Multiple Disks with Labels - YAML\nDESCRIPTION: This YAML snippet demonstrates grouping multiple disks under a single label using an array of paths for the `disk` option. It creates a 'Storage' resource group and displays the usage for three different disk mount points: `/mnt/storage`, `/mnt/backup`, and `/mnt/media`. This simplifies the display of multiple disk usages.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/resources.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- resources:\n    label: Storage\n    disk:\n      - /mnt/storage\n      - /mnt/backup\n      - /mnt/media\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Endpoints Property JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the `allowedEndpoints` property. This property defines a regular expression that whitelists the API endpoints a widget is permitted to access, enhancing security by preventing unauthorized data access.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  allowedEndpoints: /^stats|notices$/,\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Expanded Resource Details - YAML\nDESCRIPTION: This YAML snippet shows how to enable expanded details for a resource group by setting the `expanded` property to `true`. It groups three disks under the label 'Array Disks' and configures the widget to display additional details for each disk.  When `expanded` is not supplied, the default is set to `false`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/resources.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- resources:\n    label: Array Disks\n    expanded: true\n    disk:\n      - /disk1\n      - /disk2\n      - /disk3\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Metadata in widget.js\nDESCRIPTION: Defines the widget metadata, including the API endpoint, proxy handler, and endpoint mappings. It uses the `genericProxyHandler` for API data fetching and specifies the `v1/info` endpoint. The `widget` object configures how the component will fetch data from the API.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport genericProxyHandler from \"utils/proxy/handlers/generic\"; // (1)!\n\nconst widget = /* (2)! */ {\n  api: \"{url}/{endpoint}\" /* (3)! */,\n  proxyHandler: genericProxyHandler /* (1)! */,\n\n  mappings: /* (4)! */ {\n    info: /* (5)! */ {\n      endpoint: \"v1/info\" /* (6)! */,\n    },\n  },\n};\n\nexport default widget;\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Socket Proxy\nDESCRIPTION: This docker-compose.yaml snippet configures a docker-socket-proxy container to expose the Docker socket securely and a homepage container that connects to it.  The proxy restricts access and the homepage container mounts the configuration and exposes port 3000.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndockerproxy:\n  image: ghcr.io/tecnativa/docker-socket-proxy:latest\n  container_name: dockerproxy\n  environment:\n    - CONTAINERS=1 # Allow access to viewing containers\n    - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)\n    - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)\n    - POST=0 # Disallow any POST operations (effectively read-only)\n  ports:\n    - 127.0.0.1:2375:2375\n  volumes:\n    - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only\n  restart: unless-stopped\n\nhomepage:\n  image: ghcr.io/gethomepage/homepage:latest\n  container_name: homepage\n  volumes:\n    - /path/to/config:/app/config\n  ports:\n    - 3000:3000\n  restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Configuring Kopia Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of a Kopia widget. It specifies the widget type, Kopia server URL, credentials, and optional snapshot host/path for selecting a specific backup source. The `url` field points to the Kopia server API endpoint.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/kopia.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: kopia\n  url: http://kopia.host.or.ip:port\n  username: username\n  password: password\n  snapshotHost: hostname # optional\n  snapshotPath: path # optional\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Width Layout - YAML\nDESCRIPTION: This snippet demonstrates how to make the homepage take up the entire window width.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nfullWidth: true\n```\n\n----------------------------------------\n\nTITLE: SABnzbd Widget YAML Configuration\nDESCRIPTION: This YAML snippet configures the SABnzbd widget. It requires the SABnzbd URL and API key. The 'type' field must be set to 'sabnzbd'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/sabnzbd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: sabnzbd\n  url: http://sabnzbd.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Open Homepage in Browser\nDESCRIPTION: This command opens the Homepage application in the default web browser using `xdg-open`.  It assumes the application is accessible at `http://homepage.k3d.localhost:8080/`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/k3d/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nxdg-open http://homepage.k3d.localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Configuring HDHomerun Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an HDHomerun widget, specifying the type, URL, tuner number, and fields to display.  The `url` parameter is the HDHomerun device's IP address or hostname. The `tuner` parameter selects a specific tuner on the device, defaulting to 0 if omitted. The `fields` parameter defines which data fields to show on the widget, defaulting to pre-defined fields if omitted.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/hdhomerun.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: hdhomerun\n  url: http://hdhomerun.host.or.ip\n  tuner: 0 # optional - defaults to 0, used for tuner-specific fields\n  fields: [\"channels\", \"hd\"] # optional - default fields shown\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric Widget Configuration YAML\nDESCRIPTION: This YAML configuration defines a Prometheus metric widget with multiple metrics, each with a label and a PromQL query. It demonstrates the use of `refreshInterval` to control the update frequency and the `format` object to customize the metric's display.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/prometheusmetric.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: prometheusmetric\n  url: https://prometheus.host.or.ip\n  refreshInterval: 10000 # optional - in milliseconds, defaults to 10s\n  metrics:\n    - label: Metric 1\n      query: alertmanager_alerts{state=\"active\"}\n    - label: Metric 2\n      query: apiserver_storage_size_bytes{node=\"mynode\"}\n      format:\n        type: bytes\n    - label: Metric 3\n      query: avg(prometheus_notifications_latency_seconds)\n      format:\n        type: number\n        suffix: s\n        options:\n          maximumFractionDigits: 4\n    - label: Metric 4\n      query: time()\n      refreshInterval: 1000 # will override global refreshInterval\n      format:\n        type: date\n        scale: 1000\n        options:\n          timeStyle: medium\n```\n\n----------------------------------------\n\nTITLE: Rendering Data with Translations in component.jsx\nDESCRIPTION: Renders the widget with fetched data, using the `t` function to translate and format data values. The data is displayed within `Block` components inside a `Container` component.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <Container service={service}>\n    <Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} />\n    <Block label=\"yourwidget.key2\" value={t(\"common.number\", { value: data.key2 })} />\n    <Block label=\"yourwidget.key3\" value={t(\"common.number\", { value: data.key3 })} />\n  </Container>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useTranslation Hook in component.jsx\nDESCRIPTION: Retrieves the `t` function from the `useTranslation` hook.  This function is used to translate the labels and data values within the widget, ensuring localization support.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { t } = useTranslation();\n```\n\n----------------------------------------\n\nTITLE: Using genericProxyHandler with API key - JS\nDESCRIPTION: Illustrates how to pass API keys from the widget configuration to the `genericProxyHandler` for authenticated requests. The API key is included as a query parameter in the API URL.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/proxies.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport genericProxyHandler from \"utils/proxy/handlers/generic\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}?key={key}\",\n  proxyHandler: genericProxyHandler,\n};\n```\n\n----------------------------------------\n\nTITLE: Glances Widget with CPU and Network Usage\nDESCRIPTION: This YAML snippet illustrates how to configure two Glances widgets for monitoring CPU and network usage. It demonstrates setting the `type` to `glances`, specifying the `url` of the Glances server, and defining the `metric` for each widget.  The network usage example shows how to specify a network interface (e.g., `enp0s25`).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/glances.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- CPU Usage:\n    widget:\n      type: glances\n      url: http://glances.host.or.ip:port\n      metric: cpu\n- Network Usage:\n    widget:\n      type: glances\n      url: http://glances.host.or.ip:port\n      metric: network:enp0s25\n```\n\n----------------------------------------\n\nTITLE: Starting the Homepage server\nDESCRIPTION: This bash snippet demonstrates how to start the Homepage server in production mode using `pnpm start`. This assumes that the application has been built previously using `pnpm build`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring PiHole Widget\nDESCRIPTION: This YAML snippet shows how to configure a PiHole widget. It includes the widget type, URL of the PiHole instance, version number (required for v6 or higher), and API key (optional, in v6 can be your password or app password). The 'url' parameter specifies the address of the PiHole server, while 'version' specifies the PiHole version.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/pihole.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: pihole\n  url: http://pi.hole.or.ip\n  version: 6 # required if running v6 or higher, defaults to 5\n  key: yourpiholeapikey # optional, in v6 can be your password or app password\n```\n\n----------------------------------------\n\nTITLE: Tailscale Widget Configuration\nDESCRIPTION: This YAML snippet configures a Tailscale widget. It requires a device ID and a Tailscale API key for authentication and data retrieval.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/tailscale.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: tailscale\n  deviceid: deviceid\n  key: tailscalekey\n```\n\n----------------------------------------\n\nTITLE: Configure Homepage Logo Icon\nDESCRIPTION: This YAML snippet shows how to configure the homepage logo and optionally specify a custom icon URL. The `logo` key defines the logo configuration, and the `icon` key specifies the URL of the desired image for the logo.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/logo.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- logo:\n    icon: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/I_Love_New_York.svg/1101px-I_Love_New_York.svg.png # optional\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMediaVault Widget\nDESCRIPTION: This YAML snippet configures the OpenMediaVault widget. It defines the widget type, URL of the OpenMediaVault server, username, password, and the method to retrieve data.  The `method` field is required and determines what information to display, such as the status of running services using `services.getStatus`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/openmediavault.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: openmediavault\n  url: http://omv.host.or.ip\n  username: admin\n  password: pass\n  method: services.getStatus # required\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Homepage\nDESCRIPTION: This script builds and deploys the Homepage application to the k3d cluster. It assumes the script is located in the `k3d` directory. The script likely includes steps to build the application image and deploy it using kubectl or helm.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/k3d/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./k3d-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Dynamic List View Configuration\nDESCRIPTION: This YAML snippet demonstrates the configuration for a dynamic list view in the custom API widget. It shows how to display a list of items from an array in the API response, with each item having a name and label, and optional limits and targets.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: customapi\n  url: https://example.com/api/servers\n  display: dynamic-list\n  mappings:\n    items: data # optional, the path to the array in the API response. Omit this option if the array is at the root level\n    name: id # required, field in each item to use as the item name (left side)\n    label: ip_address # required, field in each item to use as the item label (right side)\n    limit: 5 # optional, limit the number of items to display\n    target: https://example.com/server/{id} # optional, makes items clickable with template support\n```\n\n----------------------------------------\n\nTITLE: Setting a Fixed Color Palette - YAML\nDESCRIPTION: This snippet shows how to configure a fixed color palette, disabling the palette switcher. Supported colors are: `slate`, `gray`, `zinc`, `neutral`, `stone`, `amber`, `yellow`, `lime`, `green`, `emerald`, `teal`, `cyan`, `sky`, `blue`, `indigo`, `violet`, `purple`, `fuchsia`, `pink`, `rose`, `red`, `white`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncolor: slate\n```\n\n----------------------------------------\n\nTITLE: Configuring Beszel Widget in YAML\nDESCRIPTION: This YAML snippet configures the Beszel widget for the Homepage application. It specifies the widget type, Beszel server URL, authentication credentials (username and password), the optional system ID for single system view, and the Beszel API version to use. The `systemId` allows focusing on a single system's metrics. `version` specifies the Beszel API version and impacts the data structure.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/beszel.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: beszel\n  url: http://beszel.host.or.ip\n  username: username # email\n  password: password\n  systemId: systemId # optional\n  version: 2 # optional, default is 1\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Pod Selector - YAML\nDESCRIPTION: This YAML snippet defines a service in Homepage using a `podSelector` to match pods based on labels.  This is helpful for more complex scenarios when the standard `app` label is not sufficient.  Any field selector can be used allowing for complex pod selection based on labels.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- Element Chat:\n    icon: matrix-light.png\n    href: https://chat.example.com\n    description: Matrix Synapse Powered Chat\n    app: matrix-element\n    namespace: comms\n    podSelector: >-\n      app.kubernetes.io/instance in (\n          matrix-element,\n          matrix-media-repo,\n          matrix-media-repo-postgresql,\n          matrix-synapse\n      )\n```\n\n----------------------------------------\n\nTITLE: Configuring Icons-Only Layout - YAML\nDESCRIPTION: This snippet demonstrates how to specify an icon-only layout for bookmarks, either for a specific group or globally.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  Media:\n    iconsOnly: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbookmarksStyle: icons\n```\n\n----------------------------------------\n\nTITLE: Nested Groups in Layout - YAML\nDESCRIPTION: This snippet demonstrates how to apply settings to nested groups within services config by nesting them in the layout block.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  Group A:\n    style: row\n    columns: 4\n  Group C:\n    style: row\n    columns: 2\n    Nested Group A:\n      style: row\n      columns: 2\n    Nested Group B:\n      style: row\n      columns: 2\n```\n\n----------------------------------------\n\nTITLE: Setting up translation strings in JSON\nDESCRIPTION: This JSON snippet demonstrates how to set up translation strings for a widget. It defines a JSON object where the keys represent the translation keys and the values are the corresponding English translations. This object is added to the `public/locales/en/common.js` file.\n\nNote: Only English translations should be added directly; other languages are managed via Crowdin.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/translations.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"yourwidget\": {\n  \"key1\": \"Value 1\",\n  \"key2\": \"Value 2\",\n  \"key3\": \"Value 3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UrBackup Widget\nDESCRIPTION: This YAML configuration snippet defines the settings for the UrBackup widget. It includes the type, username, password, URL of the UrBackup server, and an optional parameter 'maxDays' to customize the threshold for marking clients as out of date. The widget retrieves client status and disk usage information from the UrBackup server.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/urbackup.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: urbackup\n  username: urbackupUsername\n  password: urbackupPassword\n  url: http://urbackupUrl:55414\n  maxDays: 5 # optional\n```\n\n----------------------------------------\n\nTITLE: Cloning the Homepage repository\nDESCRIPTION: This bash snippet demonstrates how to clone the Homepage repository from GitHub using the `git clone` command. This is the first step in setting up Homepage from source.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/gethomepage/homepage.git\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Configuration in YAML\nDESCRIPTION: This YAML snippet shows the configuration needed in docker.yaml to specify that a Docker instance is part of a Docker Swarm cluster.  The `swarm` setting enables Swarm support.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmy-docker:\n  socket: /var/run/docker.sock\n  swarm: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Healthchecks Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Healthchecks widget, including the URL of the Healthchecks server, the API key, and optionally the UUID of a specific check. If the UUID is omitted, the widget displays total 'up' and 'down' statistics.  The API key is essential for authentication and authorization to access the Healthchecks API.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/healthchecks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: healthchecks\n  url: http://healthchecks.host.or.ip:port\n  key: <YOUR_API_KEY>\n  uuid: <CHECK_UUID> # optional, if not included total statistics for all checks is shown\n```\n\n----------------------------------------\n\nTITLE: Transmission Widget Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Transmission widget.  It defines the widget type, URL, username, password, and optionally the RPC URL. The `rpcUrl` parameter should match the value of \"rpc-url\" in the Transmission's settings.json file. Allowed fields are `[\"leech\", \"download\", \"seed\", \"upload\"]`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/transmission.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: transmission\n  url: http://transmission.host.or.ip\n  username: username\n  password: password\n  rpcUrl: /transmission/ # Optional. Matches the value of \"rpc-url\" in your Transmission's settings.json file\n```\n\n----------------------------------------\n\nTITLE: Mapping Configuration Examples\nDESCRIPTION: This YAML snippet showcases different ways to define the `mappings` section in the custom API widget configuration, demonstrating how to extract data from various levels of the JSON response using field paths. It illustrates how to map fields to labels for display in the widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmappings:\n  - field: name # Rick Sanchez\n    label: Name\n  - field: status # Alive\n    label: Status\n  - field: origin.name # Earth (C-137)\n    label: Origin\n  - field: locations.1.name # Citadel of Ricks\n    label: Location\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmappings:\n  - field:\n      locations:\n        1: name # Citadel of Ricks\n    label: Location\n```\n\n----------------------------------------\n\nTITLE: Hiding Headers in Layout - YAML\nDESCRIPTION: This snippet demonstrates how to hide headers for sections in the layout by setting `header` to `false`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  Section A:\n    header: false\n  Section B:\n    style: row\n    columns: 3\n    header: false\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and building Homepage\nDESCRIPTION: These bash snippets outline the commands required to install dependencies and build the production bundle for the Homepage application.  It uses `pnpm` to install packages and then builds the application.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring MySpeed Widget in YAML\nDESCRIPTION: This YAML snippet configures a MySpeed widget, specifying its type, URL, and password (if required). The `url` field should point to the MySpeed host, and the `password` field is only necessary if a password is set on the MySpeed server. Allowed fields for data display are `ping`, `download`, and `upload`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/myspeed.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: myspeed\n  url: http://myspeed.host.or.ip:port\n  password: password # only required if password is set\n```\n\n----------------------------------------\n\nTITLE: Defining API Providers\nDESCRIPTION: This YAML snippet defines shared API provider options and secrets. Providers can be defined under the `providers` section, specifying API keys, URLs, usernames, and passwords. These providers can then be referenced by widgets using the `provider` key instead of directly providing the API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  openweathermap: openweathermapapikey\n  finnhub: yourfinnhubapikeyhere\n  longhorn:\n    url: https://longhorn.example.com\n    username: admin\n    password: LonghornPassword\n```\n\n----------------------------------------\n\nTITLE: Initially Collapsed Sections - YAML\nDESCRIPTION: This snippet demonstrates how to initially collapse sections by adding the `initiallyCollapsed` option to the layout group, or globally using the `groupsInitiallyCollapsed` option.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  Section A:\n    initiallyCollapsed: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\ngroupsInitiallyCollapsed: true\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Directory Permissions in UNRAID\nDESCRIPTION: This snippet sets the permissions for the icon directory in the UNRAID container. It removes execute permissions for user and read/write/execute permissions for group/others, adds user permissions, and adds execute permissions to directories for all. This ensures proper access to the icon files by the Homepage application.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/unraid.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod -R u-x,go-rwx,go+u,ugo+X /app/public/icons\n```\n\n----------------------------------------\n\nTITLE: Running Homepage with Docker\nDESCRIPTION: This bash snippet shows how to run the Homepage application using Docker.  It includes setting environment variables for HOMEPAGE_ALLOWED_HOSTS (required), PUID, and PGID (optional), mapping port 3000, mounting volumes for configuration and the Docker socket (for optional Docker integrations), and setting the restart policy. Replace `/path/to/config` with the actual path to your configuration directory.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name homepage \\\n  -e HOMEPAGE_ALLOWED_HOSTS=gethomepage.dev \\\n  -e PUID=1000 \\\n  -e PGID=1000 \\\n  -p 3000:3000 \\\n  -v /path/to/config:/app/config \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  --restart unless-stopped \\\n  ghcr.io/gethomepage/homepage:latest\n```\n\n----------------------------------------\n\nTITLE: Hiding Homepage Version\nDESCRIPTION: This YAML snippet demonstrates how to hide the release version displayed at the bottom of the homepage. Setting `hideVersion` to `true` disables the version display.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nhideVersion: true\n```\n\n----------------------------------------\n\nTITLE: Finnhub Provider Configuration in settings.yaml\nDESCRIPTION: This snippet shows how to configure the Finnhub.io API key as a provider within the `settings.yaml` file. This configuration is a prerequisite for using the Stocks widget. Replace `yourfinnhubapikeyhere` with your actual Finnhub API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/stocks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  finnhub: yourfinnhubapikeyhere\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Property in Mappings JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `body` property within the `mappings` object. The `body` property is an object containing the data to be sent in the request body, typically used with `POST` or `PUT` methods. This example also includes setting the `Content-Type` header.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/graphql`\n    stats: {\n      endpoint: \"graphql\",\n      method: \"POST\",\n      body: {\n        query: `\n          query {\n            stats {\n              total\n              average\n            }\n          }\n        `,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Target\nDESCRIPTION: This YAML snippet shows how to configure the target attribute for links on the homepage. The `target` key accepts values such as `_blank` (open in new tab), `_self` (open in same tab), and `_top` (open in new window). This can be set globally or overridden for individual services.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ntarget: _blank # Possible options include _blank, _self, and _top\n```\n\n----------------------------------------\n\nTITLE: Search Suggestion Response Format\nDESCRIPTION: Defines the expected JSON response format for the `suggestionUrl` when using a custom search provider with search suggestions. The JSON structure consists of an array. The first element is the user's search query. The second element is another array, where each entry is a search suggestion related to the search query.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/search.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"home\",\n  [\n    \"home depot\",\n    \"home depot near me\",\n    \"home equity loan\",\n    \"homeworkify\",\n    \"homedepot.com\",\n    \"homebase login\",\n    \"home depot credit card\",\n    \"home goods\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Atsumeru Widget Configuration\nDESCRIPTION: Defines the configuration for an Atsumeru widget, including the type, URL, username, and password.  The URL specifies the address of the Atsumeru instance.  The username and password must match those used for web or supported apps login.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/atsumeru.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: atsumeru\n  url: http://atsumeru.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring LubeLogger Widget with YAML\nDESCRIPTION: This YAML snippet configures the LubeLogger widget. It requires specifying the `url`, `username`, and `password` to connect to the LubeLogger instance. The optional `vehicleID` parameter switches the widget to single-vehicle mode, displaying data for only the specified vehicle.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/lubelogger.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: lubelogger\n  url: https://lubelogger.host.or.ip\n  username: lubeloggerusername\n  password: lubeloggerpassword\n  vehicleID: 1 # optional, changes to single-vehicle version\n```\n\n----------------------------------------\n\nTITLE: Configuring Immich Widget\nDESCRIPTION: This YAML snippet configures the Immich widget with essential parameters. It requires the Immich server URL, an API key from an admin user, and an optional version specifier. The widget displays statistics about users, photos, videos, and storage from the Immich instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/immich.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: immich\n  url: http://immich.host.or.ip\n  key: adminapikeyadminapikeyadminapikey\n  version: 2 # optional, default is 1\n```\n\n----------------------------------------\n\nTITLE: Download Station Widget Configuration (YAML)\nDESCRIPTION: This YAML snippet configures the Synology Download Station widget. It defines the widget type, URL, username, and password for connecting to the Download Station.  Note: the widget is not compatible with 2FA. Allowed fields are: `[\"leech\", \"download\", \"seed\", \"upload\"]`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/downloadstation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: downloadstation\n  url: http://downloadstation.host.or.ip:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring qBittorrent Widget with YAML\nDESCRIPTION: This YAML snippet configures the qBittorrent widget. It specifies the type of the widget, the URL of the qBittorrent instance, the username and password for authentication, and an optional flag to enable leech progress display. The URL should point to the qBittorrent web UI.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/qbittorrent.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: qbittorrent\n  url: http://qbittorrent.host.or.ip\n  username: username\n  password: password\n  enableLeechProgress: true # optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric Formatting YAML\nDESCRIPTION: This YAML configuration demonstrates data transformation options for Prometheus metric values. It includes examples of using `scale`, `prefix`, and `suffix` to modify and format the displayed metrics.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/prometheusmetric.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- query: my_custom_metric{}\n  label: Metric 1\n  format:\n    type: number\n    scale: 1000 # multiplies value by a number or fraction string e.g. 1/16\n- query: my_custom_metric{}\n  label: Metric 2\n  format:\n    type: number\n    prefix: \"$\" # prefixes value with given string\n- query: my_custom_metric{}\n  label: Metric 3\n  format:\n    type: number\n    suffix: \"€\" # suffixes value with given string\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Bookmark Group Columns - YAML\nDESCRIPTION: This snippet demonstrates how to set the maximum columns for bookmark groups separately.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nmaxBookmarkGroupColumns: 6 # default is 6, max 8\n```\n\n----------------------------------------\n\nTITLE: Fetch data from API endpoint using useWidgetAPI (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `useWidgetAPI` hook to fetch data from a specified endpoint. It imports the `useWidgetAPI` hook and calls it with the widget metadata and endpoint name. The hook returns the fetched data and any potential errors.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { data, error } = useWidgetAPI(widget, \"stats\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deluge Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Deluge widget. It includes the type, URL of the Deluge instance, the webui password, and an optional flag to enable or disable the leech progress display. Ensure the URL is accessible and the password matches the Deluge webui password.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/deluge.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: deluge\n  url: http://deluge.host.or.ip\n  password: password # webui password\n  enableLeechProgress: true # optional, defaults to false\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Widget\nDESCRIPTION: This YAML snippet configures the Authentik widget. It specifies the widget type, Authentik URL, and the API key for authentication.  The URL should point to the Authentik instance, and the key should be a valid API token generated in Authentik. Requires an active Authentik instance with a generated API token.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/authentik.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: authentik\n  url: http://authentik.host.or.ip:port\n  key: api_token\n```\n\n----------------------------------------\n\nTITLE: Plex Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures a Plex widget within a larger dashboard configuration. It specifies the widget type as 'plex', the URL of the Plex server, and the API key required for authentication. It allows fetching data related to streams, albums, movies, and TV shows.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/plex.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: plex\n  url: http://plex.host.or.ip:32400\n  key: mytokenhere # see https://www.plexopedia.com/plex-media-server/general/plex-token/\n```\n\n----------------------------------------\n\nTITLE: Configuring Mikrotik Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Mikrotik widget. It specifies the type, URL, username, and password for connecting to the Mikrotik device. Allowed fields are 'uptime', 'cpuLoad', 'memoryUsed', and 'numberOfLeases'. HTTPS may be required.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/mikrotik.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: mikrotik\n  url: https://mikrotik.host.or.ip\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring APCUPS Widget in YAML\nDESCRIPTION: This YAML snippet configures the `apcups` widget to connect to an apcupsd daemon.  The `url` parameter specifies the TCP address of the apcupsd server. Ensure the specified host and port are accessible from the system running the homepage application.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/apcups.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: apcups\n  url: tcp://your.acpupsd.host:3551\n```\n\n----------------------------------------\n\nTITLE: Configuring Validate Property in Mappings JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how to configure the `validate` property within the `mappings` object. The `validate` property is an array of strings representing the keys that should be validated in the API response before the widget is rendered.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n      validate: [\"total\", \"average\"],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Docker Stats per Service\nDESCRIPTION: This YAML snippet shows how to enable the display of Docker stats for a specific service in `services.yaml`. Setting `showStats` to `true` enables the stats display for that particular service, overriding global settings.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n- Example Service:\n    ...\n    showStats: true\n```\n\n----------------------------------------\n\nTITLE: OPNSense Widget Configuration\nDESCRIPTION: This YAML configuration defines the settings for the OPNSense widget. It specifies the widget type, the URL of the OPNSense instance, the username (API key), password (API secret), and an optional WAN interface. The username and password correspond to the API key and secret generated in OPNSense.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/opnsense.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: opnsense\n  url: http://opnsense.host.or.ip\n  username: key\n  password: secret\n  wan: opt1 # optional, defaults to wan\n```\n\n----------------------------------------\n\nTITLE: OpenWRT User Configuration\nDESCRIPTION: This configuration block defines a user in the `/etc/config/rpcd` file of OpenWRT. It specifies the username, password (as a hashed string), and the ACL that the user should use. The ACL grants the user specific permissions to access ubus endpoints.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/openwrt.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nconfig login\n        option username 'homepage'\n        option password '<hashedpassword>'\n        list read homepage\n```\n\n----------------------------------------\n\nTITLE: Setting a Service ID in YAML\nDESCRIPTION: This YAML snippet demonstrates how to assign a unique ID to a service within the homepage configuration.  This ID can then be used to target the service with custom CSS or JavaScript for tailored styling or behavior. The `id` field allows for specific customization.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/custom-css-js.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nService:\n    id: myserviceid\n    icon: icon.png\n    ...\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in component.jsx\nDESCRIPTION: Imports required dependencies for the widget component, including `useTranslation` for translations, `Container` and `Block` for UI structure, and `useWidgetAPI` for fetching data from the API.  These imports provide the necessary building blocks for constructing the widget's user interface and data interactions.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTranslation } from \"next-i18next\"; // (1)!\n\nimport Container from \"components/services/widget/container\"; // (2)!\nimport Block from \"components/services/widget/block\"; // (3)!\nimport useWidgetAPI from \"utils/proxy/use-widget-api\"; // (4)!\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefly III Widget with YAML\nDESCRIPTION: This snippet configures the Firefly III widget using YAML. It specifies the widget type, the Firefly III instance URL, and the API key. Ensure the URL and key are correctly set for the widget to function properly.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/firefly.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: firefly\n  url: https://firefly.host.or.ip\n  key: personalaccesstoken.personalaccesstoken.personalaccesstoken\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Property in Mappings JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `method` property within the `mappings` object. The `method` property specifies the HTTP method that should be used to make the API request, defaulting to `GET` if not specified.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n      method: \"POST\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Service Icons in YAML\nDESCRIPTION: This snippet showcases how to specify icons for services within the `services.yaml` file. The `icon` property can reference icons from various sources, including Dashboard Icons, Material Design Icons (mdi), Simple Icons (si), and remote or local URLs.  You can also specify a custom color for `mdi` and `si` icons by adding a hex color code as a suffix e.g. `mdi-XX-#f0d453` or `si-XX-#a712a2`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        description: Series management\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        description: Movie management\n\n- Group C:\n    - Service:\n        icon: mdi-flask-outline\n        href: http://service.host/\n        description: My cool service\n```\n\n----------------------------------------\n\nTITLE: QNAP Widget Configuration YAML\nDESCRIPTION: This YAML configuration defines the settings for the QNAP widget. It includes the widget type, URL of the QNAP device, username, and password for authentication. The allowed fields for monitoring are cpuUsage, memUsage, systemTempC, poolUsage, and volumeUsage.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/qnap.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: qnap\n  url: http://qnap.host.or.ip:port\n  username: user\n  password: pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Ghostfolio Widget\nDESCRIPTION: This YAML configuration defines a Ghostfolio widget with the type set to 'ghostfolio'. It specifies the URL of the Ghostfolio instance and the Bearer token for authentication. Allowed fields for display are `gross_percent_today`, `gross_percent_1y`, `gross_percent_max`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/ghostfolio.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: ghostfolio\n  url: http://ghostfoliohost:port\n  key: ghostfoliobearertoken\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Connection Mode - YAML\nDESCRIPTION: This YAML snippet configures the Kubernetes connection mode for Homepage. The `mode` parameter determines how Homepage connects to the Kubernetes cluster.  The options are 'disabled', 'default', and 'cluster', where 'default' uses the standard kubeconfig resolution.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmode: default\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime - Locale and Long Date/Time YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the DateTime widget with a specific locale and a long date and time format. The `locale` is set to `nl` (Dutch), and both `dateStyle` and `timeStyle` are set to `long`. This will render the date and time in the Dutch language with a detailed format.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/datetime.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# 4 januari 2023 om 13:51:25 PST\nlocale: nl\nformat:\n  dateStyle: long\n  timeStyle: long\n```\n\n----------------------------------------\n\nTITLE: Setting Header Style - YAML\nDESCRIPTION: This snippet demonstrates how to set the header style. Available options: `underlined`, `boxed`, `clean`, `boxedWidgets`\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nheaderStyle: underlined # default style\n```\n\nLANGUAGE: yaml\nCODE:\n```\nheaderStyle: boxed\n```\n\nLANGUAGE: yaml\nCODE:\n```\nheaderStyle: clean\n```\n\nLANGUAGE: yaml\nCODE:\n```\nheaderStyle: boxedWidgets\n```\n\n----------------------------------------\n\nTITLE: Readarr Widget Configuration YAML\nDESCRIPTION: Configures the Readarr widget with the URL of the Readarr instance and the API key.  The 'type' field specifies that this is a Readarr widget.  The 'url' field points to the Readarr server, and the 'key' field provides the API key for authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/readarr.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: readarr\n  url: http://readarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Configuring Lidarr Widget in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Lidarr widget. It includes the widget type, the Lidarr URL, and the API key. The API key must be obtained from the Lidarr settings, and the URL should point to the Lidarr instance.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/lidarr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: lidarr\n  url: http://lidarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: OpenDTU Widget YAML Configuration\nDESCRIPTION: This YAML snippet configures an OpenDTU widget for a homepage. It specifies the widget type as 'opendtu' and defines the URL to access the OpenDTU instance. The 'url' parameter determines the endpoint from which the widget retrieves data.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/opendtu.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: opendtu\n  url: http://opendtu.host.or.ip\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Style - YAML\nDESCRIPTION: This snippet demonstrates how to set the style for icons (e.g. `icon: mdi-XXXX`) to be either a gradient or flat (matching your theme).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\niconStyle: theme # optional, defaults to gradient\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Widget YAML\nDESCRIPTION: This snippet shows the basic YAML structure for configuring a DateTime widget. It sets the text size to 'xl' and the time style to 'short'. The `format` options are passed to the Intl.DateTimeFormat function for rendering the date and time.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/datetime.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- datetime:\n    text_size: xl\n    format:\n      timeStyle: short\n```\n\n----------------------------------------\n\nTITLE: Configuring FileFlows Widget with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a FileFlows widget.  It specifies the widget type as 'fileflows' and sets the URL to your FileFlows instance. Replace `http://your.fileflows.host:port` with the actual address of your FileFlows server.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/fileflows.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: fileflows\n  url: http://your.fileflows.host:port\n```\n\n----------------------------------------\n\nTITLE: Using Defined API Provider\nDESCRIPTION: This YAML snippet shows how to use a previously defined API provider in a widget configuration. Instead of directly specifying the API key, the `provider` key is used to reference the provider defined in the `providers` section.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n- openweathermap:\n    latitude: 50.449684\n    longitude: 30.525026\n    provider: openweathermap\n```\n\n----------------------------------------\n\nTITLE: Configuring Longhorn Provider Credentials\nDESCRIPTION: This YAML snippet demonstrates how to configure the Longhorn provider credentials in the `settings.yaml` file. This includes specifying the username, password, and URL for accessing the Longhorn API.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/longhorn.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nproviders:\n  longhorn:\n    username: \"longhorn-username\" # optional\n    password: \"very-secret-longhorn-password\" # optional\n    url: https://longhorn.aesop.network\n```\n\n----------------------------------------\n\nTITLE: Obtaining Ghostfolio Bearer Token\nDESCRIPTION: This command demonstrates how to obtain a Bearer token from the Ghostfolio API by making a POST request to the anonymous authentication endpoint. It requires specifying the `accessToken` in the request body.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/ghostfolio.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X POST http://localhost:3333/api/v1/auth/anonymous -H 'Content-Type: application/json' -d '{ \"accessToken\": \"SECURITY_TOKEN_OF_ACCOUNT\" }'\n```\n\n----------------------------------------\n\nTITLE: Setting a Background Image URL - YAML\nDESCRIPTION: This snippet demonstrates how to set a background image for the homepage using a full URL. The image will be fetched from the provided URL and used as the page's background.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbackground: https://images.unsplash.com/photo-1502790671504-542ad42d5189?auto=format&fit=crop&w=2560&q=80\n```\n\n----------------------------------------\n\nTITLE: Jellyseerr Widget Configuration\nDESCRIPTION: Configures a Jellyseerr widget using YAML.  Requires specifying the Jellyseerr instance URL and API key. The 'type' field is set to 'jellyseerr', and example values are provided for the URL and API key.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/jellyseerr.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: jellyseerr\n  url: http://jellyseerr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Hiding Widget Errors per Service\nDESCRIPTION: This YAML snippet hides visible API error messages for a service widget in `services.yaml`. Setting `hideErrors` to `true` hides error messages for the specified widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n- Example Service:\n    ...\n    widget:\n    ...\n        hideErrors: true\n```\n\n----------------------------------------\n\nTITLE: Stocks Widget Configuration in widgets.yaml\nDESCRIPTION: This snippet demonstrates how to configure the Stocks widget within the `widgets.yaml` file.  It sets the provider to `finnhub`, optionally enables color, sets the cache duration, and defines the watchlist of stock symbols. The watchlist can contain up to 8 items.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/stocks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- stocks:\n    provider: finnhub\n    color: true # optional, defaults to true\n    cache: 1 # optional, default caches results for 1 minute\n    watchlist:\n      - GME\n      - AMC\n      - NVDA\n      - AMD\n      - TSM\n      - MSFT\n      - AAPL\n      - BRK.A\n```\n\n----------------------------------------\n\nTITLE: Configuring Ombi Widget\nDESCRIPTION: This YAML snippet configures an Ombi widget. It specifies the type as 'ombi', the URL of the Ombi instance, and the API key for authentication. The API key should be retrieved from the Ombi settings.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/ombi.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: ombi\n  url: http://ombi.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Gitea Widget Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration structure for the Gitea widget. It includes the widget type, Gitea instance URL, and API key.  The API key requires `notifications`, `repository` and `issue` permissions.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/gitea.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: gitea\n  url: http://gitea.host.or.ip:port\n  key: giteaapitoken\n```\n\n----------------------------------------\n\nTITLE: Setting Status Style\nDESCRIPTION: This YAML snippet configures the status style for Docker/K8s status, site monitors, and pings.  The `statusStyle` can be set to 'dot' (green dot for success) or 'basic' (UP/DOWN).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nstatusStyle: \"dot\"\n```\n\n----------------------------------------\n\nTITLE: Nextcloud Widget Configuration with Token - YAML\nDESCRIPTION: Configures the Nextcloud widget using a token for authentication. The 'url' parameter specifies the Nextcloud instance address, and 'key' provides the NC-Token. This is the preferred authentication method if a token is available.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/nextcloud.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: nextcloud\n  url: https://nextcloud.host.or.ip:port\n  key: token\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncthing Relay Server Widget in YAML\nDESCRIPTION: This YAML configuration snippet shows how to define a Syncthing Relay Server widget. It requires specifying the widget type as `strelaysrv` and providing the URL of the Syncthing relay server. The URL should point to the relay server's HTTP API endpoint.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/syncthing-relay-server.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: strelaysrv\n  url: http://syncthing.host.or.ip:22070\n```\n\n----------------------------------------\n\nTITLE: Setting the Language\nDESCRIPTION: This YAML snippet demonstrates how to set the desired language for the homepage application. The `language` key is used to specify the language code (e.g., 'fr' for French). Supported languages include ca, de, en, es, fr, he, hr, hu, it, nb-NO, nl, pt, ru, sv, vi, zh-CN, and zh-Hant. Locales can be specified for widgets like DateTime.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: fr\n```\n\n----------------------------------------\n\nTITLE: Mounting Image Directory for Background - YAML\nDESCRIPTION: This snippet shows how to mount a directory containing images into the container using Docker Compose. This allows you to reference local images for the background.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - /my/homepage/images:/app/public/images\n```\n\n----------------------------------------\n\nTITLE: Configuring Calibre-web Widget in YAML\nDESCRIPTION: This YAML snippet configures a Calibre-web widget.  It requires the `url`, `username`, and `password` to connect to the Calibre-web instance. The `type` is set to `calibreweb` to identify the widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/calibre-web.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: calibreweb\n  url: http://your.calibreweb.host:port\n  username: username\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Setting Status Style per Service\nDESCRIPTION: This YAML snippet configures the status style for a specific service. The `statusStyle` can be set to 'dot' (green dot for success) or 'basic' (UP/DOWN).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n- Example Service:\n    ...\n    statusStyle: 'dot'\n```\n\n----------------------------------------\n\nTITLE: Configuring Greeting Widget with YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up a greeting widget. It includes settings for text size and the text to be displayed. Valid text sizes are 4xl, 3xl, 2xl, xl, md, sm, and xs.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/greeting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- greeting:\n    text_size: xl\n    text: Greeting Text\n```\n\n----------------------------------------\n\nTITLE: Sonarr API Endpoint Test\nDESCRIPTION: This `curl` command tests the Sonarr API by retrieving the queue. It requires an API key passed as a query parameter. The endpoint `/api/v3/queue` is used to fetch queue details, enabling verification of Sonarr connectivity and functionality.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/troubleshooting/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -k 'http://SONARRIPORHOST:PORT/api/v3/queue?apikey=YOURAPIKEY'\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with pnpm\nDESCRIPTION: This command starts the Next.js development server using pnpm. It allows developers to preview and test changes in a local environment at http://localhost:3000.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL - YAML\nDESCRIPTION: This snippet shows how to set the documents base URL, which may be necessary in some proxy configurations. The URL must be a full, absolute URL.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nbase: http://host.local/homepage\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime - Short Date and Time YAML\nDESCRIPTION: This YAML snippet shows how to configure the DateTime widget to display both date and time in a short format with AM/PM. It sets both `dateStyle` and `timeStyle` to `short` and enables `hour12` for AM/PM display. This combines a short date and short time representation.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/datetime.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# 1/23/22, 1:37 PM\nformat:\n  dateStyle: short\n  timeStyle: short\n  hour12: true\n```\n\n----------------------------------------\n\nTITLE: iFrame Widget Basic Configuration YAML\nDESCRIPTION: This snippet demonstrates the basic configuration of an iFrame widget using YAML. It includes the widget type, name, and source URL. This configuration will render a simple iFrame displaying the content from the specified URL.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/iframe.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: iframe\n  name: myIframe\n  src: http://example.com\n```\n\n----------------------------------------\n\nTITLE: ArgoCD Widget Configuration\nDESCRIPTION: This YAML snippet configures the ArgoCD widget with the type, URL, and API key. The URL points to the ArgoCD instance, and the key is the API key for authentication.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/argocd.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: argocd\n  url: http://argocd.host.or.ip:port\n  key: argocdapikey\n```\n\n----------------------------------------\n\nTITLE: Showing Docker Stats Globally\nDESCRIPTION: This YAML snippet shows how to enable the display of Docker stats for all services globally in `settings.yaml`. Setting `showStats` to `true` enables the stats display.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nshowStats: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Gateway API Compatibility\nDESCRIPTION: Enables the Kubernetes gateway-api compatibility by setting the `route` value to `gateway`. This configuration option determines how Homepage interacts with ingress controllers in the Kubernetes cluster. Requires an ingress controller.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroute: gateway\n```\n\n----------------------------------------\n\nTITLE: Update Container Image Tag for Homepage - Docker\nDESCRIPTION: This snippet illustrates the required change in your Docker Compose or Kubernetes deployment configuration to point to the new Homepage container image.  Replace the old image tag with the new one to ensure you are using the latest version from the gethomepage/homepage repository. This migration is necessary from version v0.7.2 onwards.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/more/homepage-move.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nimage: ghcr.io/benphelps/homepage:latest\n```\n\nLANGUAGE: docker\nCODE:\n```\nimage: ghcr.io/gethomepage/homepage:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Instance Name\nDESCRIPTION: This YAML snippet defines the instance name used for automatic Docker service discovery.  The `instanceName` allows differentiation between multiple homepage instances.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ninstanceName: public\n```\n\n----------------------------------------\n\nTITLE: Configuring SWAG Dashboard Widget in YAML\nDESCRIPTION: This code snippet demonstrates how to configure a SWAG Dashboard widget using YAML. The configuration specifies the widget type as `swagdashboard` and provides the URL to access the dashboard. The URL should point to the SWAG Dashboard instance, typically running on port 81.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/swagdashboard.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nwidget:\n  type: swagdashboard\n  url: http://swagdashboard.host.or.ip:adminport # default port is 81\n```\n\n----------------------------------------\n\nTITLE: Setting Background Opacity and Filters - YAML\nDESCRIPTION: This snippet shows how to configure filters and opacity for a background image, including blur, saturation, brightness and opacity. These settings allow customization of how the background image blends with the background color.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbackground:\n  image: /images/background.png\n  blur: sm # sm, \"\", md, xl... see https://tailwindcss.com/docs/backdrop-blur\n  saturate: 50 # 0, 50, 100... see https://tailwindcss.com/docs/backdrop-saturate\n  brightness: 50 # 0, 50, 75... see https://tailwindcss.com/docs/backdrop-brightness\n  opacity: 50 # 0-100\n```\n\n----------------------------------------\n\nTITLE: Changedetection.io Widget Configuration YAML\nDESCRIPTION: This YAML snippet configures the Changedetection.io widget. It requires the URL of the Changedetection.io instance and the API key. The type is 'changedetectionio'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/changedetectionio.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwidget:\n  type: changedetectionio\n  url: http://changedetection.host.or.ip:port\n  key: apikeyapikeyapikeyapikeyapikey\n```\n\n----------------------------------------\n\nTITLE: Setting the Start URL - YAML\nDESCRIPTION: This snippet shows how to customize the start URL. This is required for installable apps. The default value is `/`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstartUrl: https://custom.url\n```\n\n----------------------------------------\n\nTITLE: Block Component with Label and Value\nDESCRIPTION: This snippet illustrates the usage of the `Block` component to display a key-value pair. The `label` prop is used for translation keys, and the `value` prop displays the actual value, often translated and formatted via `useTranslation`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/component.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Update Checks\nDESCRIPTION: This YAML snippet demonstrates how to disable automatic checks for new versions from GitHub. Setting `disableUpdateCheck` to `true` disables the update check.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\ndisableUpdateCheck: true\n```\n\n----------------------------------------\n\nTITLE: Setting a Fixed Theme - YAML\nDESCRIPTION: This snippet demonstrates how to configure a fixed theme, disabling the theme switcher. The theme can be either `dark` or `light`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntheme: dark # or light\n```\n\n----------------------------------------\n\nTITLE: Hiding Widget Errors Globally\nDESCRIPTION: This YAML snippet hides visible API error messages globally in `settings.yaml`. Setting `hideErrors` to `true` hides error messages.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nhideErrors: true\n```\n\n----------------------------------------\n\nTITLE: Setting the Page Title - YAML\nDESCRIPTION: This snippet demonstrates how to customize the title of the homepage. The title will be displayed in the browser tab or window title bar.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My Awesome Homepage\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in YAML\nDESCRIPTION: This YAML snippet configures a service within Homepage, linking it to a Docker container. It specifies the icon, href, description, server (Docker instance name), and container name.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- Emby:\n  icon: emby.png\n  href: \"http://emby.home/\"\n  description: Media server\n  server: my-docker # The docker server that was configured\n  container: emby # The name of the container you'd like to connect\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Service Groups in YAML\nDESCRIPTION: This snippet shows how to create nested groups in the `services.yaml` file. The nesting is achieved by defining groups within other groups, using the same array-entry format as top-level groups.  Each service has properties like `href`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/services.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- Group A:\n    - Service A:\n        href: http://localhost/\n\n    - Group B:\n        - Service B:\n            href: http://localhost/\n\n        - Service C:\n            href: http://localhost/\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Direct Socket Access\nDESCRIPTION: This docker-compose.yaml snippet configures the Homepage container to directly access the Docker socket. The local socket is passed to the container via a volume mount. Note that Homepage must be running as root to use the socket directly.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhomepage:\n  image: ghcr.io/gethomepage/homepage:latest\n  container_name: homepage\n  volumes:\n    - /path/to/config:/app/config\n    - /var/run/docker.sock:/var/run/docker.sock # pass local proxy\n  ports:\n    - 3000:3000\n  restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Container Component Usage\nDESCRIPTION: This code snippet shows how to use the `Container` component.  It wraps the widget content and provides a consistent layout. The `service` prop contains service-related information, and the `error` prop handles errors during API data fetching.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/component.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Container service={service}></Container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Widget\nDESCRIPTION: Configures the Kubernetes widget to display cluster and node information. It shows aggregate CPU and memory stats and custom labels. Requires a metrics service.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- kubernetes:\n    cluster:\n      # Shows the cluster node\n      show: true\n      # Shows the aggregate CPU stats\n      cpu: true\n      # Shows the aggregate memory stats\n      memory: true\n      # Shows a custom label\n      showLabel: true\n      label: \"cluster\"\n    nodes:\n      # Shows the clusters\n      show: true\n      # Shows the CPU for each node\n      cpu: true\n      # Shows the memory for each node\n      memory: true\n      # Shows the label, which is always the node name\n      showLabel: true\n```\n\n----------------------------------------\n\nTITLE: Homepage Instance Specific Labels\nDESCRIPTION: This YAML snippet shows how to configure labels specific to a particular Homepage instance using the `instanceName` setting.  It shows different hrefs for internal and public instances.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - homepage.group=Media\n  - homepage.name=Emby\n  - homepage.icon=emby.png\n  - homepage.instance.internal.href=http://emby.lan/\n  - homepage.instance.public.href=https://emby.mydomain.com/\n  - homepage.description=Media server\n```\n\n----------------------------------------\n\nTITLE: Running Homepage Server (pnpm)\nDESCRIPTION: Runs the Homepage server using `pnpm`. The `HOMEPAGE_ALLOWED_HOSTS` environment variable is set to specify allowed hosts.  This command starts the application and makes it accessible via the specified host and port.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/source.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHOMEPAGE_ALLOWED_HOSTS=gethomepage.dev:1234 pnpm start\n```\n\n----------------------------------------\n\nTITLE: Rendering Skeleton View in component.jsx\nDESCRIPTION: Renders a skeleton view (placeholders) when no data is available, improving the user experience during loading. The skeleton view consists of a `Container` and `Block` components with translated labels.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (!data) {\n  return (\n    <Container service={service}>\n      <Block label=\"yourwidget.key1\" />\n      <Block label=\"yourwidget.key2\" />\n      <Block label=\"yourwidget.key3\" />\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Service Widget Configuration\nDESCRIPTION: Manually configures a service widget using `namespace` and `app` fields on the service entry. It creates a label selector `app.kubernetes.io/name=home-assistant`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/kubernetes.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- Home Automation\n    - Home-Assistant:\n        icon: home-assistant.png\n        href: https://home.example.com\n        description: Home Automation\n        app: home-assistant\n        namespace: home\n```\n\n----------------------------------------\n\nTITLE: Generate Password Hash in OpenWRT Shell\nDESCRIPTION: This shell command generates a `crypt(5)` password hash using the `uhttpd` utility in the OpenWRT shell. The resulting hash should then be used to configure the user's password in the `/etc/config/rpcd` file. Replace `<somepassphrase>` with the desired password.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/openwrt.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nuhttpd -m \"<somepassphrase>\"\n```\n\n----------------------------------------\n\nTITLE: Disabling IPv6 in Docker Compose\nDESCRIPTION: This YAML snippet disables IPv6 for the Homepage container using the `sysctls` option in a docker-compose file. Setting `net.ipv6.conf.all.disable_ipv6` to `1` prevents the container from using IPv6, which can resolve connectivity issues with certain public APIs.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/troubleshooting/index.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  homepage:\n    ...\n    sysctls:\n      - net.ipv6.conf.all.disable_ipv6=1\n```\n\n----------------------------------------\n\nTITLE: Homepage Docker Configuration Example\nDESCRIPTION: This snippet shows an example of a service configuration in Homepage using the Docker integration. It demonstrates how to define a service (Plex) with an icon, a link (href), and the container name.  The container parameter specifies which docker container to monitor for CPU, RAM, and other stats.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/unraid.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    - Plex:\n        icon: /icons/plex.png\n        href: https://app.plex.com\n        container: plex\n```\n\n----------------------------------------\n\nTITLE: Handling Error State in component.jsx\nDESCRIPTION: Conditionally renders the `Container` component with the error prop if an error occurs during data fetching. This allows for error display to the user.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/tutorial.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (error) {\n  return <Container service={service} error={error} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Configuration File Ownership in UNRAID\nDESCRIPTION: This snippet changes the ownership of the configuration directory to the 'nobody' user and 'users' group within the UNRAID container. This step is essential for the Homepage application to properly access and modify its configuration files.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/unraid.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchown -R nobody:users /app/config\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Service Label Configuration\nDESCRIPTION: This YAML snippet shows an example of deploying labels for docker swarm service.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/docker.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n....\n  deploy:\n    labels:\n      - homepage.icon=foobar\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning Homepage Repository (git)\nDESCRIPTION: Clones the Homepage repository from GitHub using `git`. This is the first step in installing Homepage from source.  The command downloads the entire project codebase to the local machine.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/gethomepage/homepage.git\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Widget Configuration JavaScript\nDESCRIPTION: This code snippet demonstrates a basic widget configuration in JavaScript, including the API endpoint, proxy handler, and a simple mapping for the 'stats' endpoint. It imports `genericProxyHandler` and defines a widget configuration object.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport genericProxyHandler from \"utils/proxy/handlers/generic\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: genericProxyHandler,\n\n  mappings: {\n    stats: { endpoint: \"stats\" }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration File Permissions in UNRAID\nDESCRIPTION: This snippet sets the permissions for the configuration directory in the UNRAID container. It removes execute permissions for user and read/write/execute permissions for group/others, adds user permissions, and adds execute permissions to directories for all. This ensures proper access for the Homepage application.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/unraid.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod -R u-x,go-rwx,go+u,ugo+X /app/config\n```\n\n----------------------------------------\n\nTITLE: Adding a link to an info widget\nDESCRIPTION: This YAML snippet shows how to add a link to an information widget, such as a logo widget. The `href` option specifies the URL, and the `target` option determines how the link opens (e.g., in a new tab).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/info-widgets.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogo:\n  href: https://example.com\n  target: _blank # Optional, can be set in settings\n```\n\n----------------------------------------\n\nTITLE: Setting a Favicon URL - YAML\nDESCRIPTION: This snippet shows how to set a custom favicon for the homepage using a full URL. The favicon will be displayed in the browser tab.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfavicon: https://www.google.com/favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Styling Homepage Elements CSS\nDESCRIPTION: This CSS code snippet hides the source code link in the header and removes the box-shadow from images, SVGs, and videos within the content. It customizes the appearance of the homepage by modifying the display of specific HTML elements.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/index.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n  .md-header__source {\n    display: none;\n  }\n  .md-typeset img, .md-typeset svg, .md-typeset video {\n    box-shadow: none;\n  }\n```\n\n----------------------------------------\n\nTITLE: Portainer API Endpoint Test\nDESCRIPTION: This `curl` command tests the Portainer API by retrieving information about Docker containers. It requires an API key to authenticate the request. The endpoint `/api/endpoints/2/docker/containers/json` is used to fetch container details.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/troubleshooting/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -k -H 'X-Api-Key:YOURKEY' 'https://PORTAINERIPORHOST:PORT/api/endpoints/2/docker/containers/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Handler in Widget JavaScript\nDESCRIPTION: This snippet demonstrates configuring the `proxyHandler` property within a widget configuration using JavaScript. It imports `genericProxyHandler` and assigns it to the `proxyHandler` property, enabling unauthenticated API requests. Requires the `genericProxyHandler` to be defined elsewhere.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: genericProxyHandler,\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Directory Ownership in UNRAID\nDESCRIPTION: This snippet changes the ownership of the icon directory to the 'nobody' user and 'users' group within the UNRAID container. This is important for Homepage to display the icons correctly.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/unraid.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchown -R nobody:users /app/public/icons\n```\n\n----------------------------------------\n\nTITLE: HTML Div Structure for Homepage Content\nDESCRIPTION: This HTML code snippet defines the structure for displaying content on the homepage. It includes styling to center and limit the width of the content area, along with image elements and a paragraph element to describe the homepage's features.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/index.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"margin-top: -100px;\"></div>\n\n<div style=\"max-width: 70%; margin: 0 auto; display: block;\">\n\n<img src=\"assets/banner_light@2x.webp\" alt=\"homepage\" style=\"max-width: 100%; max-height: 175px; margin: 0 auto; display: block;\" />\n\n<img src=\"assets/homepage_demo_clip.webp\" alt=\"homepage\" style=\"max-width: 100%; margin: 0 auto; display: block;\" />\n\n<p style=\"margin: 0 0 30px;\">A modern, <em>fully static, fast</em>, secure <em>fully proxied</em>, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages. Easily configured via YAML files or through docker label discovery.</p>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: AdGuard API Endpoint Test\nDESCRIPTION: This `curl` command retrieves statistics from the AdGuard API using basic authentication. It tests connectivity and verifies that the AdGuard service is responding as expected. The username and password must be provided in the format 'username:password'.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/troubleshooting/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -k -u 'username:password' http://ADGUARDIPORHOST/control/stats\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Quick Launch Search\nDESCRIPTION: This YAML snippet configures a custom search provider for the Quick Launch feature. It includes settings for the search `url`, `target` and `suggestionUrl` parameters. The suggestion url allows the quick launch to show search suggestions from the provider.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nquicklaunch:\n  provider: custom\n  url: https://www.ecosia.org/search?q=\n  target: _blank\n  suggestionUrl: https://ac.ecosia.org/autocomplete?type=list&q=\n```\n\n----------------------------------------\n\nTITLE: Linting Code with pnpm\nDESCRIPTION: This command lints the codebase using pnpm to identify and fix code style issues. It ensures code quality and consistency across the project.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Service Discovery - YAML\nDESCRIPTION: This YAML snippet shows how to enable different service discovery methods in Homepage for Kubernetes. It allows enabling Ingress, Traefik IngressRoute, and Gateway API service discovery by setting the corresponding boolean flags to `true`.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/kubernetes.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningress: true # default, enable ingress only\n```\n\n----------------------------------------\n\nTITLE: Using next-i18next in React Component\nDESCRIPTION: This code snippet demonstrates how to use the `useTranslation` hook from `next-i18next` in a React component to translate text. It imports the necessary hook and component modules and then renders the component, using the `t` function to translate the labels for the `Block` components.\n\nDependencies: `next-i18next`, `components/services/widget/container`, `components/services/widget/block`\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/translations.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTranslation } from \"next-i18next\";\n\nimport Container from \"components/services/widget/container\";\nimport Block from \"components/services/widget/block\";\n\nexport default function Component() {\n  const { t } = useTranslation();\n\n  return (\n    <Container service={service}>\n      <Block label=\"yourwidget.key1\" />\n      <Block label=\"yourwidget.key2\" />\n      <Block label=\"yourwidget.key3\" />\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Params Property in Mappings JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates configuring the `params` property within the `mappings` object. The `params` property is an array of strings that represent the keys that should be passed as parameters to the API endpoint.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats?start=...&end=...`\n    stats: {\n      endpoint: \"stats\",\n      params: [\"start\", \"end\"],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example API Response for Dynamic List\nDESCRIPTION: This JSON snippet provides an example API response containing an array of server objects. It is intended for use with the dynamic list view configuration of the custom API widget.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/services/customapi.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    { \"id\": \"server1\", \"name\": \"Server 1\", \"ip_address\": \"192.168.0.1\" },\n    { \"id\": \"server2\", \"name\": \"Server 2\", \"ip_address\": \"192.168.0.2\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NPM packages\nDESCRIPTION: This bash snippet uses `pnpm install` to install the required NPM packages for the project's development environment. `pnpm` is the preferred package manager for this project.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting a Local Favicon - YAML\nDESCRIPTION: This snippet demonstrates how to set a custom favicon using a path relative to the `/app/public` directory.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfavicon: /images/favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Setting the Page Description - YAML\nDESCRIPTION: This snippet shows how to customize the description of the homepage.  The description might be used for SEO purposes, but the location where it renders is not specified here.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A description of my awesome homepage\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Widget Configuration in YAML\nDESCRIPTION: This YAML snippet configures a Kubernetes widget to display CPU and memory usage statistics for both the entire cluster and individual nodes. It allows enabling or disabling the display of these metrics, as well as showing labels for each.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/kubernetes.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- kubernetes:\n    cluster:\n      # Shows cluster-wide statistics\n      show: true\n      # Shows the aggregate CPU stats\n      cpu: true\n      # Shows the aggregate memory stats\n      memory: true\n      # Shows a custom label\n      showLabel: true\n      label: \"cluster\"\n    nodes:\n      # Shows node-specific statistics\n      show: true\n      # Shows the CPU for each node\n      cpu: true\n      # Shows the memory for each node\n      memory: true\n      # Shows the label, which is always the node name\n      showLabel: true\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime - 12-Hour Time YAML\nDESCRIPTION: This YAML snippet configures the DateTime widget to display time in a 12-hour format with AM/PM. The `timeStyle` is set to `short`, and `hour12` is set to `true`. This shows the time with AM/PM indicators.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/info/datetime.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# 1:37 PM\nformat:\n  timeStyle: short\n  hour12: true\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Property in Mappings JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to define the `endpoint` property within the `mappings` configuration. The `endpoint` property specifies the API endpoint that the widget will use, replacing the `{endpoint}` placeholder in the `api` property.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/metadata.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the development server\nDESCRIPTION: This bash snippet shows how to start the development server for the Homepage application using `pnpm dev`. It will typically run the application in watch mode, automatically rebuilding and reloading on code changes.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Run Tilt for Continuous Deployment\nDESCRIPTION: This command starts Tilt, a local CI loop for Kubernetes development. Tilt monitors changes in the application code and automatically updates the deployment in the k3d cluster. It requires a Tiltfile to be configured in the project directory.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/k3d/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntilt up\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages with pnpm\nDESCRIPTION: This command installs the necessary NPM packages for the Homepage project using pnpm. pnpm is the preferred package manager for this project, ensuring consistency and efficiency in dependency management.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/widgets/authoring/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Create K3d Cluster\nDESCRIPTION: This script starts a k3d cluster. It's assumed the script is located in the `k3d` directory.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/k3d/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./k3d-up.sh\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Globally (npm)\nDESCRIPTION: Installs the `pnpm` package manager globally using `npm`.  `pnpm` is used for managing dependencies and building the project. This step is required if `pnpm` is not already installed on the system.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/installation/source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Serving the documentation\nDESCRIPTION: This bash snippet shows how to serve the documentation locally using `mkdocs serve`. Alternatively, the documentation can be built using `mkdocs build` to generate a static site.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve # or build, to build the static site\n```\n\n----------------------------------------\n\nTITLE: Installing documentation dependencies\nDESCRIPTION: This bash snippet demonstrates how to install the necessary Python packages for building the project's documentation using pip. The requirements are specified in the `requirements.txt` file.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Log Path\nDESCRIPTION: This YAML snippet demonstrates how to customize the path for the homepage logfile. The `logpath` setting specifies the directory where the `logs` folder will be created.\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nlogpath: /logfile/path\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Group Columns - YAML\nDESCRIPTION: This snippet shows how to set the maximum number of columns of groups on larger screen sizes (only for groups with `style: columns`).\nSOURCE: https://github.com/gethomepage/homepage/blob/dev/docs/configs/settings.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nmaxGroupColumns: 8 # default is 4 for services, 6 for bookmarks, max 8\n```"
  }
]