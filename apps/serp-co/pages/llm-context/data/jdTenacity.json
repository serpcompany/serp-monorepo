[
  {
    "owner": "jd",
    "repo": "tenacity",
    "content": "TITLE: Basic Retry Implementation with Tenacity\nDESCRIPTION: Demonstrates the simplest use case of retrying a flaky function that occasionally raises an IOError until it successfully returns a value.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom tenacity import retry\n\n@retry\ndef do_something_unreliable():\n    if random.randint(0, 10) > 1:\n        raise IOError(\"Broken sauce, everything is hosed!!!111one\")\n    else:\n        return \"Awesome sauce!\"\n\nprint(do_something_unreliable())\n```\n\n----------------------------------------\n\nTITLE: Exponential Backoff for Retry Wait Times\nDESCRIPTION: Implementing exponential backoff for wait times to gradually increase delays between retries, up to a maximum limit.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_exponential(multiplier=1, min=4, max=10))\ndef wait_exponential_1():\n    print(\"Wait 2^x * 1 second between each retry starting with 4 seconds, then up to 10 seconds, then 10 seconds afterwards\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Retry on Specific Exception Types\nDESCRIPTION: Configuring retry to only happen for specific exception types, ignoring others or allowing them to propagate immediately.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass ClientError(Exception):\n    \"\"\"Some type of client error.\"\"\"\n\n@retry(retry=retry_if_exception_type(IOError))\ndef might_io_error():\n    print(\"Retry forever with no wait if an IOError occurs, raise any other errors\")\n    raise Exception\n\n@retry(retry=retry_if_not_exception_type(ClientError))\ndef might_client_error():\n    print(\"Retry forever with no wait if any error other than ClientError occurs. Immediately raise ClientError.\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Async Retry Examples with Different Frameworks\nDESCRIPTION: Shows how to use the retry decorator with various async frameworks including asyncio, Trio, Tornado, and curio. Each example demonstrates the appropriate syntax for the specific framework.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n@retry\nasync def my_asyncio_function(loop):\n    await loop.getaddrinfo('8.8.8.8', 53)\n```\n\nLANGUAGE: python\nCODE:\n```\n@retry\nasync def my_async_trio_function():\n    await trio.socket.getaddrinfo('8.8.8.8', 53)\n```\n\nLANGUAGE: python\nCODE:\n```\n@retry\n@tornado.gen.coroutine\ndef my_async_tornado_function(http_client, url):\n    yield http_client.fetch(url)\n```\n\nLANGUAGE: python\nCODE:\n```\n@retry(sleep=curio.sleep)\nasync def my_async_curio_function():\n    await asks.get('https://example.org')\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Retry Conditions\nDESCRIPTION: Combining different retry conditions using logical operators to create complex retry behaviors based on multiple factors.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef is_none_p(value):\n    \"\"\"Return True if value is None\"\"\"\n    return value is None\n\n@retry(retry=(retry_if_result(is_none_p) | retry_if_exception_type()))\ndef might_return_none():\n    print(\"Retry forever ignoring Exceptions with no wait if return value is None\")\n```\n\n----------------------------------------\n\nTITLE: Retry with Wait Strategies\nDESCRIPTION: Examples demonstrating different wait strategies between retry attempts including fixed wait, random wait, and exponential backoff.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_fixed(2))\ndef wait_2_s():\n    print(\"Wait 2 second between retries\")\n    raise Exception\n\n@retry(wait=wait_random(min=1, max=2))\ndef wait_random_1_to_2_s():\n    print(\"Randomly wait 1 to 2 seconds between retries\")\n    raise Exception\n\n@retry(wait=wait_exponential(multiplier=1, min=4, max=10))\ndef wait_exponential_1():\n    print(\"Wait 2^x * 1 second between each retry starting with 4 seconds, then up to 10 seconds, then 10 seconds afterwards\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Retry with Exception Handling\nDESCRIPTION: Examples showing how to handle specific exceptions and control retry behavior based on exception types.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ClientError(Exception):\n    \"\"\"Some type of client error.\"\"\"\n\n@retry(retry=retry_if_exception_type(IOError))\ndef might_io_error():\n    print(\"Retry forever with no wait if an IOError occurs, raise any other errors\")\n    raise Exception\n\n@retry(retry=retry_if_not_exception_type(ClientError))\ndef might_client_error():\n    print(\"Retry forever with no wait if any error other than ClientError occurs. Immediately raise ClientError.\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Retry Based on Return Value\nDESCRIPTION: Using the function's return value to determine whether to retry, supporting conditional retry logic based on results.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef is_none_p(value):\n    \"\"\"Return True if value is None\"\"\"\n    return value is None\n\n@retry(retry=retry_if_result(is_none_p))\ndef might_return_none():\n    print(\"Retry with no wait if return value is None\")\n```\n\n----------------------------------------\n\nTITLE: Random Wait Time Between Retries\nDESCRIPTION: Adding randomness to the wait time between retries to prevent thundering herd problems when multiple clients retry simultaneously.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_random(min=1, max=2))\ndef wait_random_1_to_2_s():\n    print(\"Randomly wait 1 to 2 seconds between retries\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Limiting Retry Attempts\nDESCRIPTION: Configuring Tenacity to stop after a specific number of attempts using the stop_after_attempt parameter.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(7))\ndef stop_after_7_attempts():\n    print(\"Stopping after 7 attempts\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Changing Retry Arguments at Runtime with retry_with\nDESCRIPTION: Shows how to dynamically modify retry behavior at runtime by using the retry_with function. This allows for flexibility in changing retry parameters without modifying the original decorator.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(3))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\ntry:\n    raise_my_exception.retry_with(stop=stop_after_attempt(4))()\nexcept Exception:\n    pass\n\nprint(raise_my_exception.statistics)\n```\n\n----------------------------------------\n\nTITLE: Exponential Jitter for Distributed Services\nDESCRIPTION: Using random exponential jitter to minimize retry collisions when multiple processes compete for shared resources.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_random_exponential(multiplier=1, max=60))\ndef wait_exponential_jitter():\n    print(\"Randomly wait up to 2^x * 1 seconds between each retry until the range reaches 60 seconds, then randomly up to 60 seconds afterwards\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Chained Backoff Strategy\nDESCRIPTION: Building a sequence of different wait times to create a custom backoff strategy with different delays for different retry stages.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_chain(*[wait_fixed(3) for i in range(3)] +\n                       [wait_fixed(7) for i in range(2)] +\n                       [wait_fixed(9)]))\ndef wait_fixed_chained():\n    print(\"Wait 3s for 3 attempts, 7s for the next 2 attempts and 9s for all attempts thereafter\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Custom Before Sleep Logging Callback for Tenacity\nDESCRIPTION: Creates a custom before_sleep callback function that logs retry attempts at different severity levels based on the attempt number. This helps with monitoring retry behavior in applications.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\ndef my_before_sleep(retry_state):\n    if retry_state.attempt_number < 1:\n        loglevel = logging.INFO\n    else:\n        loglevel = logging.WARNING\n    logger.log(\n        loglevel, 'Retrying %s: attempt %s ended with: %s',\n        retry_state.fn, retry_state.attempt_number, retry_state.outcome)\n\n@retry(stop=stop_after_attempt(3), before_sleep=my_before_sleep)\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\ntry:\n    raise_my_exception()\nexcept RetryError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrying a Code Block with Context Manager\nDESCRIPTION: Shows how to retry a code block without wrapping it in a function using a for loop and context manager. This approach allows for isolating failing blocks while sharing context.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom tenacity import Retrying, RetryError, stop_after_attempt\n\ntry:\n    for attempt in Retrying(stop=stop_after_attempt(3)):\n        with attempt:\n            raise Exception('My code is failing!')\nexcept RetryError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Async Retrying Code Blocks\nDESCRIPTION: Shows how to use AsyncRetrying for asynchronous code blocks, allowing retry behavior in async contexts. This is the asynchronous equivalent of the context manager-based retrying approach.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom tenacity import AsyncRetrying, RetryError, stop_after_attempt\n\nasync def function():\n   try:\n       async for attempt in AsyncRetrying(stop=stop_after_attempt(3)):\n           with attempt:\n               raise Exception('My code is failing!')\n   except RetryError:\n       pass\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Return Value Callback in Tenacity\nDESCRIPTION: Demonstrates how to create a custom callback function that returns the result of the last retry attempt instead of raising an exception. This is useful when you want to handle retry failures gracefully.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef return_last_value(retry_state):\n    \"\"\"return the result of the last call attempt\"\"\"\n    return retry_state.outcome.result()\n\ndef is_false(value):\n    \"\"\"Return True if value is False\"\"\"\n    return value is False\n\n# will return False after trying 3 times to get a different result\n@retry(stop=stop_after_attempt(3),\n       retry_error_callback=return_last_value,\n       retry=retry_if_result(is_false))\ndef eventually_return_false():\n    return False\n```\n\n----------------------------------------\n\nTITLE: Accessing Retry Statistics\nDESCRIPTION: Demonstrates how to access the retry statistics attached to a function decorated with @retry, useful for monitoring and debugging.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(3))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\ntry:\n```\n\n----------------------------------------\n\nTITLE: Retry with Logging\nDESCRIPTION: Examples showing how to implement logging before, after, and between retry attempts.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n@retry(stop=stop_after_attempt(3), before=before_log(logger, logging.DEBUG))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\n@retry(stop=stop_after_attempt(3), after=after_log(logger, logging.DEBUG))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\n@retry(stop=stop_after_attempt(3),\n       before_sleep=before_sleep_log(logger, logging.DEBUG))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n```\n\n----------------------------------------\n\nTITLE: Before Retry Callback with Logging\nDESCRIPTION: Adding a callback function to execute before each retry attempt, used for logging the retry process.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\n@retry(stop=stop_after_attempt(3), before=before_log(logger, logging.DEBUG))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n```\n\n----------------------------------------\n\nTITLE: After Retry Callback with Logging\nDESCRIPTION: Adding a callback function to execute after each failed retry attempt, used for logging the retry failures.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\n@retry(stop=stop_after_attempt(3), after=after_log(logger, logging.DEBUG))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n```\n\n----------------------------------------\n\nTITLE: Logging Before Sleep Between Retries\nDESCRIPTION: Implementing logging that happens just before waiting for the next retry attempt, useful for monitoring retry wait intervals.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\n@retry(stop=stop_after_attempt(3),\n       before_sleep=before_sleep_log(logger, logging.DEBUG))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n```\n\n----------------------------------------\n\nTITLE: Patching Retry Behavior for Testing\nDESCRIPTION: Shows how to temporarily modify retry behavior for testing purposes using mock.patch. This technique avoids unnecessary wait times during tests while preserving the original retry logic.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(3), wait=wait_fixed(3))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\nfrom unittest import mock\n\nwith mock.patch.object(raise_my_exception.retry, \"wait\", wait_fixed(0)):\n    try:\n        raise_my_exception()\n    except Exception:\n        pass\n\nprint(raise_my_exception.statistics)\n```\n\n----------------------------------------\n\nTITLE: Async Function Retry Examples for Different Frameworks\nDESCRIPTION: Examples of using the retry decorator with asyncio, Trio, and Tornado coroutines. Shows that sleeps are handled asynchronously in each framework.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@retry\nasync def my_asyncio_function(loop):\n    await loop.getaddrinfo('8.8.8.8', 53)\n```\n\nLANGUAGE: python\nCODE:\n```\n@retry\nasync def my_async_trio_function():\n    await trio.socket.getaddrinfo('8.8.8.8', 53)\n```\n\nLANGUAGE: python\nCODE:\n```\n@retry\n@tornado.gen.coroutine\ndef my_async_tornado_function(http_client, url):\n    yield http_client.fetch(url)\n```\n\n----------------------------------------\n\nTITLE: Async Retrying with Context Manager\nDESCRIPTION: Example of using AsyncRetrying to retry async code blocks using a context manager pattern. This provides the same flexibility as the synchronous version but for async code.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom tenacity import AsyncRetrying, RetryError, stop_after_attempt\n\nasync def function():\n   try:\n       async for attempt in AsyncRetrying(stop=stop_after_attempt(3)):\n           with attempt:\n               raise Exception('My code is failing!')\n   except RetryError:\n       pass\n```\n\n----------------------------------------\n\nTITLE: Using Retrying Class Directly with Variables\nDESCRIPTION: Example of using the Retrying class directly instead of the retry decorator, allowing for variable-based configuration of retry parameters. Useful when retry logic needs to be determined at runtime.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef never_good_enough(arg1):\n    raise Exception('Invalid argument: {}'.format(arg1))\n\ndef try_never_good_enough(max_attempts=3):\n    retryer = Retrying(stop=stop_after_attempt(max_attempts), reraise=True)\n    retryer(never_good_enough, 'I really do try')\n```\n\n----------------------------------------\n\nTITLE: Using Retrying Class Directly with Variables\nDESCRIPTION: Demonstrates how to use the Retrying class directly instead of the decorator syntax, which allows for more dynamic configuration of retry parameters using variables.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef never_good_enough(arg1):\n    raise Exception('Invalid argument: {}'.format(arg1))\n\ndef try_never_good_enough(max_attempts=3):\n    retryer = Retrying(stop=stop_after_attempt(max_attempts), reraise=True)\n    retryer(never_good_enough, 'I really do try')\n```\n\n----------------------------------------\n\nTITLE: Setting Result in Retry State for Retry Strategies\nDESCRIPTION: Shows how to set a result in the retry_state for use in retry strategies like retry_if_result. This allows for retrying based on the result value of the previous attempt.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom tenacity import AsyncRetrying, retry_if_result\n\nasync def function():\n   async for attempt in AsyncRetrying(retry=retry_if_result(lambda x: x < 3)):\n       with attempt:\n           result = 1  # Some complex calculation, function call, etc.\n       if not attempt.retry_state.outcome.failed:\n           attempt.retry_state.set_result(result)\n   return result\n```\n\n----------------------------------------\n\nTITLE: Setting Result in Async Retrying for Retry Strategies\nDESCRIPTION: Shows how to set a result to the retry attempt so it's available for retry strategies like retry_if_result. Demonstrates accessing and modifying the retry_state property.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom tenacity import AsyncRetrying, retry_if_result\n\nasync def function():\n   async for attempt in AsyncRetrying(retry=retry_if_result(lambda x: x < 3)):\n       with attempt:\n           result = 1  # Some complex calculation, function call, etc.\n       if not attempt.retry_state.outcome.failed:\n           attempt.retry_state.set_result(result)\n   return result\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Event Loops with Tenacity\nDESCRIPTION: Example of using alternative event loops like curio with Tenacity by passing the correct sleep function to the retry decorator.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@retry(sleep=curio.sleep)\nasync def my_async_curio_function():\n    await asks.get('https://example.org')\n```\n\n----------------------------------------\n\nTITLE: Accessing Statistics After Custom Exception Handling\nDESCRIPTION: Shows how to access retry statistics after handling exceptions with a basic try/except block. The example demonstrates catching an exception from a function while still being able to view its retry statistics.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nraise_my_exception()\n    except Exception:\n        pass\n\n    print(raise_my_exception.statistics)\n```\n\n----------------------------------------\n\nTITLE: Explicit Retry with TryAgain Exception\nDESCRIPTION: Using the TryAgain exception to explicitly trigger a retry from within the function's implementation.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@retry\ndef do_something():\n    result = something_else()\n    if result == 23:\n       raise TryAgain\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Propagation with reraise\nDESCRIPTION: Setting reraise=True to make the original exception appear at the end of the stack trace for improved visibility.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@retry(reraise=True, stop=stop_after_attempt(3))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\ntry:\n    raise_my_exception()\nexcept MyException:\n    # timed out retrying\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retry with Stop Conditions\nDESCRIPTION: Examples showing different stopping conditions including attempt limits and time delays.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(7))\ndef stop_after_7_attempts():\n    print(\"Stopping after 7 attempts\")\n    raise Exception\n\n@retry(stop=stop_after_delay(10))\ndef stop_after_10_s():\n    print(\"Stopping after 10 seconds\")\n    raise Exception\n\n@retry(stop=stop_before_delay(10))\ndef stop_before_10_s():\n    print(\"Stopping 1 attempt before 10 seconds\")\n    raise Exception\n\n@retry(stop=(stop_after_delay(10) | stop_after_attempt(5)))\ndef stop_after_10_s_or_5_retries():\n    print(\"Stopping after 10 seconds or 5 retries\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Limiting Retry Duration\nDESCRIPTION: Configuring Tenacity to stop retrying after a specific time period using stop_after_delay parameter.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_delay(10))\ndef stop_after_10_s():\n    print(\"Stopping after 10 seconds\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Preventing Retry Exceeding Time Limit\nDESCRIPTION: Using stop_before_delay to prevent starting a new retry when the next attempt would exceed the time limit.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_before_delay(10))\ndef stop_before_10_s():\n    print(\"Stopping 1 attempt before 10 seconds\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Stop Conditions\nDESCRIPTION: Creating a composite stop condition using the OR operator to stop after either a time limit or number of attempts is reached.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=(stop_after_delay(10) | stop_after_attempt(5)))\ndef stop_after_10_s_or_5_retries():\n    print(\"Stopping after 10 seconds or 5 retries\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Fixed Wait Time Between Retries\nDESCRIPTION: Configuring a constant wait time between retry attempts to avoid polling too frequently.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_fixed(2))\ndef wait_2_s():\n    print(\"Wait 2 second between retries\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Using Custom Callback for Return Value in Tenacity Retry\nDESCRIPTION: Example demonstrating how to use a custom callback function to return the result of the last call attempt after all retries fail, instead of raising an exception. This shows defining custom functions for retry logic.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef return_last_value(retry_state):\n    \"\"\"return the result of the last call attempt\"\"\"\n    return retry_state.outcome.result()\n\ndef is_false(value):\n    \"\"\"Return True if value is False\"\"\"\n    return value is False\n\n# will return False after trying 3 times to get a different result\n@retry(stop=stop_after_attempt(3),\n       retry_error_callback=return_last_value,\n       retry=retry_if_result(is_false))\ndef eventually_return_false():\n    return False\n```\n\n----------------------------------------\n\nTITLE: Custom Before Sleep Callback with Logging in Tenacity\nDESCRIPTION: Implementing a custom before_sleep callback function that logs retry attempts with different log levels depending on the attempt number. Shows how to access retry state information to customize behavior.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\ndef my_before_sleep(retry_state):\n    if retry_state.attempt_number < 1:\n        loglevel = logging.INFO\n    else:\n        loglevel = logging.WARNING\n    logger.log(\n        loglevel, 'Retrying %s: attempt %s ended with: %s',\n        retry_state.fn, retry_state.attempt_number, retry_state.outcome)\n\n@retry(stop=stop_after_attempt(3), before_sleep=my_before_sleep)\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\ntry:\n    raise_my_exception()\nexcept RetryError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Changing Retry Arguments at Runtime with retry_with\nDESCRIPTION: Example showing how to change retry decorator arguments at runtime using the retry_with function attached to wrapped functions. This allows for dynamic adjustment of retry behavior.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(3))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\ntry:\n    raise_my_exception.retry_with(stop=stop_after_attempt(4))()\nexcept Exception:\n    pass\n\nprint(raise_my_exception.statistics)\n```\n\n----------------------------------------\n\nTITLE: Available Retry Condition Methods\nDESCRIPTION: Shows the available retry condition methods that can be used to customize retry behavior based on exceptions or results.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nretry_if_exception\nretry_if_exception_type\nretry_if_not_exception_type\nretry_unless_exception_type\nretry_if_result\nretry_if_not_result\nretry_if_exception_message\nretry_if_not_exception_message\nretry_any\nretry_all\n```\n\n----------------------------------------\n\nTITLE: Retrying Code Blocks with Context Manager\nDESCRIPTION: Demonstrates how to retry a code block without wrapping it in a function by using a for loop with a context manager. This approach allows for isolating failing code while sharing context.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom tenacity import Retrying, RetryError, stop_after_attempt\n\ntry:\n    for attempt in Retrying(stop=stop_after_attempt(3)):\n        with attempt:\n            raise Exception('My code is failing!')\nexcept RetryError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Patching Retry Behavior Temporarily for Testing\nDESCRIPTION: Demonstrates how to temporarily modify the behavior of a retry-decorated function using mock.patch. This is useful in test scenarios to avoid unnecessary wait times.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@retry(stop=stop_after_attempt(3), wait=wait_fixed(3))\ndef raise_my_exception():\n    raise MyException(\"Fail\")\n\nfrom unittest import mock\n\nwith mock.patch.object(raise_my_exception.retry, \"wait\", wait_fixed(0)):\n    try:\n        raise_my_exception()\n    except Exception:\n        pass\n\nprint(raise_my_exception.statistics)\n```\n\n----------------------------------------\n\nTITLE: Basic Retry with Default Settings\nDESCRIPTION: Example showing the default behavior of retrying forever without waiting when an exception is raised.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@retry\ndef never_gonna_give_you_up():\n    print(\"Retry forever ignoring Exceptions, don't wait between retries\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Basic Forever Retry Implementation\nDESCRIPTION: Example showing infinite retry behavior that continues until success.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@retry\ndef never_gonna_give_you_up():\n    print(\"Retry forever ignoring Exceptions, don't wait between retries\")\n    raise Exception\n```\n\n----------------------------------------\n\nTITLE: Basic Retry Implementation in Python\nDESCRIPTION: Simple example showing basic retry functionality that retries an unreliable operation until it succeeds.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom tenacity import retry\n\n@retry\ndef do_something_unreliable():\n    if random.randint(0, 10) > 1:\n        raise IOError(\"Broken sauce, everything is hosed!!!111one\")\n    else:\n        return \"Awesome sauce!\"\n\nprint(do_something_unreliable())\n```\n\n----------------------------------------\n\nTITLE: Installing Tenacity with pip\nDESCRIPTION: Command to install the Tenacity package using pip package manager.\nSOURCE: https://github.com/jd/tenacity/blob/main/README.rst#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install tenacity\n```\n\n----------------------------------------\n\nTITLE: Installing Tenacity with pip\nDESCRIPTION: Command to install the Tenacity package using pip package manager.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install tenacity\n```\n\n----------------------------------------\n\nTITLE: Initializing Sphinx Changelog with Release Notes Directive\nDESCRIPTION: Sets up a basic changelog structure using Sphinx's release-notes directive in reStructuredText format. This allows for automatic generation of release notes documentation.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/changelog.rst#2025-04-13_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nChangelog\n=========\n\n.. release-notes::\n```\n\n----------------------------------------\n\nTITLE: Fixed Wait with Random Jitter\nDESCRIPTION: Combining fixed wait times with random jitter to help avoid thundering herd problems when retrying distributed services.\nSOURCE: https://github.com/jd/tenacity/blob/main/doc/source/index.rst#2025-04-13_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@retry(wait=wait_fixed(3) + wait_random(0, 2))\ndef wait_fixed_jitter():\n    print(\"Wait at least 3 seconds, and add up to 2 seconds of random delay\")\n    raise Exception\n```"
  }
]