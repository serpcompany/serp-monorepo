[
  {
    "owner": "inokawa",
    "repo": "virtua",
    "content": "TITLE: React Vertical Scroll\nDESCRIPTION: This React component demonstrates basic vertical scrolling using the VList component from Virtua.  It creates a list of 1000 items with varying heights.  React >= 16.14 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VList } from \"virtua\";\n\nexport const App = () => {\n  return (\n    <VList style={{ height: 800 }}>\n      {Array.from({ length: 1000 }).map((_, i) => (\n        <div\n          key={i}\n          style={{\n            height: Math.floor(Math.random() * 10) * 10 + 10,\n            borderBottom: \"solid 1px gray\",\n            background: \"white\",\n          }}\n        >\n          {i}\n        </div>\n      ))}\n    </VList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: getItemSize Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method retrieves the size of an item in the virtualized list or grid. It takes the item's index as input and returns the size of the item as a number. This is essential for proper virtualization, allowing the calculation of scroll sizes and viewport rendering.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: React Horizontal Scroll\nDESCRIPTION: This React component demonstrates horizontal scrolling using the VList component from Virtua. It generates a list of 1000 items with random widths. React >= 16.14 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VList } from \"virtua\";\n\nexport const App = () => {\n  return (\n    <VList style={{ height: 400 }} horizontal>\n      {Array.from({ length: 1000 }).map((_, i) => (\n        <div\n          key={i}\n          style={{\n            width: Math.floor(Math.random() * 10) * 10 + 10,\n            borderRight: \"solid 1px gray\",\n            background: \"white\",\n          }}\n        >\n          {i}\n        </div>\n      ))}\n    </VList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Get Item Size in VGrid (getItemSize)\nDESCRIPTION: This method returns the size of an item within the VGrid, specified by its horizontal and vertical indices. The size is returned as an array containing the width and height of the item.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemSize**(`indexX`, `indexY`): \\[`number`, `number`\\]\n```\n\n----------------------------------------\n\nTITLE: Memoizing Elements with useMemo in React\nDESCRIPTION: This code snippet demonstrates how to use `useMemo` to memoize React elements within a virtual scroller. This can improve performance by reducing re-renders and preserving element instances, especially when dealing with large datasets. It includes state management for scroll position using `useState` and renders the `VList` component with the memoized elements.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst elements = useMemo(\n  () => tooLongArray.map((d) => <Component key={d.id} {...d} />),\n  [tooLongArray]\n);\nconst [position, setPosition] = useState(0);\nreturn (\n  <div>\n    <div>position: {position}</div>\n    <VList onScroll={(offset) => setPosition(offset)}>{elements}</VList>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Get Item Size in VList (Typescript)\nDESCRIPTION: This method retrieves the size of an item in the virtualized list based on its index. The index parameter specifies the item for which to retrieve the size. It returns a number representing the item's size.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: scrollToIndex Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method scrolls the virtualized list or grid to the item specified by the given index. It accepts the index of the item to scroll to and an optional options object (`ScrollToIndexOpts`) for configuring the scrolling behavior. The method returns void.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n```\n\n----------------------------------------\n\nTITLE: findStartIndex Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method returns the index of the first visible item in the virtualized list or grid. It calculates the starting index based on the current scroll offset and item sizes. It is crucial for determining which items to render within the viewport.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **findStartIndex**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: getItemOffset Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method retrieves the offset of an item from the start of the virtualized list or grid. It takes the item's index as input and returns the corresponding offset as a number. This is useful for calculating the position of items within the virtualized space.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: React Server Components (RSC) Support\nDESCRIPTION: This React component demonstrates the use of Virtua with React Server Components (RSC) in Next.js. It renders RSC as children of the VList component. React >= 16.14 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// page.tsx in App Router of Next.js\n\nexport default async () => {\n  const articles = await fetchArticles();\n  return (\n    <div>\n      <div>This is Server Component</div>\n      <VList style={{ height: 300 }}>\n        {articles.map((a) => (\n          <div key={a.id} style={{ border: \"solid 1px gray\", height: 80 }}>\n            {a.content}\n          </div>\n        ))}\n      </VList>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: scrollTo Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method scrolls the virtualized list or grid to a specific offset. It takes the offset from the start as input and scrolls the viewport accordingly. This allows for precise control over the scroll position and returns void.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: scrollTo Method\nDESCRIPTION: This method scrolls the list to a specific offset. It takes the desired scroll offset as a number.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n\nDefined in: [src/solid/Virtualizer.tsx:78](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L78)\n\nScroll to the given offset.\n\n#### Parameters\n\n##### offset\n\n`number`\n\noffset from start\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Scroll To Index in VList (Typescript)\nDESCRIPTION: This method scrolls the virtualized list to the item specified by its index. The index parameter indicates the item to scroll to, and the optional opts parameter allows specifying scroll options. It does not return any value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n```\n\n----------------------------------------\n\nTITLE: Get Item Offset in VGrid (getItemOffset)\nDESCRIPTION: This method retrieves the offset of an item from the start of the VGrid, based on its horizontal and vertical indices. It returns an array containing the x and y coordinates of the offset.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemOffset**(`indexX`, `indexY`): \\[`number`, `number`\\]\n```\n\n----------------------------------------\n\nTITLE: Scroll By Offset in Virtualized List (scrollBy)\nDESCRIPTION: This method scrolls the virtualized list by the given offset from the current position. It takes the offset as a number and returns void.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: Scroll To Offset in VList (Typescript)\nDESCRIPTION: This method scrolls the virtualized list to the given offset. The offset parameter specifies the scroll position from the start of the list. It doesn't return any value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with Virtua and memo in React\nDESCRIPTION: This code snippet showcases using render props with Virtua to create elements lazily. It also utilizes `memo` to optimize the rendering of individual item components within the virtual scroller. This technique helps reduce the initial render cost, especially with a large number of items. The `Component` is memoized to prevent unnecessary re-renders during scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst Component = memo(HeavyItem);\n\n<VList count={items.length}>\n  {(i) => {\n    const item = items[i];\n    return <Component key={item.id} data={item} />;\n  }}\n</VList>;\n```\n\n----------------------------------------\n\nTITLE: getItemOffset Method\nDESCRIPTION: Defines the `getItemOffset` method within the `VirtualizerHandle` interface. This method calculates and returns the offset of an item from the start of the virtualized list, based on its index. It is used to determine the position of items within the virtualized scrollable area.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:99](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L99)\n\nGet item offset from start.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Default Item Component in VirtualizerProps\nDESCRIPTION: Specifies the default component or element type for the item element within the Virtualizer component.  It defaults to \"div\", meaning each virtualized item is rendered as a standard HTML div element. This component will receive CustomItemComponentProps as props.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerProps.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: scrollTo Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method scrolls the virtualized list to a specific offset. It takes the offset value as input and does not return any value (void). This method enables precise control over the scroll position within the virtualized list.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n\nDefined in: [src/solid/Virtualizer.tsx:78](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L78)\n\nScroll to the given offset.\n\n#### Parameters\n\n##### offset\n\n`number`\n\noffset from start\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Scroll to Offset in VGrid (scrollTo)\nDESCRIPTION: This method scrolls the VGrid to the specified horizontal and vertical offset. The offsetX and offsetY parameters determine the scroll position from the top-left corner of the grid.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollTo**(`offsetX`, `offsetY`): `void`\n```\n\n----------------------------------------\n\nTITLE: findEndIndex Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method returns the index of the last visible item in the virtualized list or grid. It calculates the ending index based on the current scroll offset, viewport size, and item sizes. It is crucial for determining which items to render within the viewport.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **findEndIndex**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Setting default 'item' element type in VirtualizerProps\nDESCRIPTION: This code snippet shows the default value for the 'item' property in the VirtualizerProps interface. This property determines the component or element type used for each item element within the virtualized list. By default, it's set to \"div\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerProps.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: getItemSize Method\nDESCRIPTION: This method retrieves the size of a specific item in the list. It accepts the item's index as input and returns a number representing the item's size.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n\nDefined in: [src/solid/Virtualizer.tsx:67](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L67)\n\nGet item size.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: scrollBy Method\nDESCRIPTION: This method scrolls the list by a specified offset relative to the current position. It accepts the offset as a number.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n\nDefined in: [src/solid/Virtualizer.tsx:83](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L83)\n\nScroll by the given offset.\n\n#### Parameters\n\n##### offset\n\n`number`\n\noffset from current position\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: scrollToIndex Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method scrolls the virtualized list to the item specified by its index. It accepts the item's index and an optional options object for configuring the scroll behavior. The method does not return any value (void).\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n\nDefined in: [src/solid/Virtualizer.tsx:73](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L73)\n\nScroll to the item specified by index.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n##### opts?\n\n[`ScrollToIndexOpts`](../../react/interfaces/ScrollToIndexOpts.md)\n\noptions\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Default Overscan Value in VirtualizerProps\nDESCRIPTION: Specifies the default value for the overscan property within the VirtualizerProps interface. Overscan determines the number of items rendered above and below the visible bounds of the list. A lower value improves performance, while a higher value prevents blank items during fast scrolling. The default value is 4.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: scrollToIndex Method Definition (TypeScript)\nDESCRIPTION: Defines the scrollToIndex method for scrolling to a specific item in the list. It takes the item's index and optional scroll options as input. This method is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n```\n\n----------------------------------------\n\nTITLE: scrollBy Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method scrolls the virtualized list or grid by a specified offset relative to the current scroll position. It accepts the offset as input and adjusts the scroll position accordingly. It allows for incremental scrolling and returns void.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: Scroll By Offset in VGrid (scrollBy)\nDESCRIPTION: This method scrolls the VGrid by the specified horizontal and vertical offset relative to the current scroll position. The offsetX and offsetY parameters determine the amount to scroll in each direction.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollBy**(`offsetX`, `offsetY`): `void`\n```\n\n----------------------------------------\n\nTITLE: Interface definition for CustomItemComponentProps in TypeScript\nDESCRIPTION: Defines the interface `CustomItemComponentProps` with properties: `style` of type `CSSProperties`, `index` of type `number`, `children` of type `ReactNode`, and an optional `ref` of type `LegacyRef<any>`. This interface is used to provide props to custom item components within the Virtualizer and WindowVirtualizer components of the virtua library. The `ref` property is only available in React 19 or later.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/CustomItemComponentProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomItemComponentProps {\n  style: CSSProperties;\n  index: number;\n  children: ReactNode;\n  ref?: LegacyRef<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Item Offset in Virtualized List (getItemOffset)\nDESCRIPTION: This method retrieves the offset from the start of the virtualized list for a given item index. It takes the item's index as input and returns the corresponding offset as a number.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: Scroll to Offset in Virtualized List (scrollTo)\nDESCRIPTION: This method scrolls the virtualized list to the given offset from the start. It takes the offset as a number and returns void.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: Default Key Getter\nDESCRIPTION: Specifies the default behavior for obtaining the key of an item if a custom `getKey` function is not provided. In this case, the index of the item in the data array is used as the key. Using a key is recommended for performance optimization in the VList component.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultGetKey (returns index of item)\n```\n\n----------------------------------------\n\nTITLE: VListProps Interface Definition\nDESCRIPTION: Defines the VListProps interface, which extends Pick<VirtualizerProps, ...>.ViewportComponentAttributes. This interface is used to configure the VList component, providing properties for controlling virtualization behavior, rendering, and accessibility. The 'reverse' property allows for aligning items to the end of the list when the total size of items is smaller than the viewport size, which is useful for chat-like applications.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VListProps extends Pick<VirtualizerProps, \"children\" | \"count\" | \"overscan\" | \"itemSize\" | \"shift\" | \"horizontal\" | \"cache\" | \"ssrCount\" | \"item\" | \"onScroll\" | \"onScrollEnd\" | \"keepMounted\">[\"ViewportComponentAttributes\"] {\n  reverse?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: getItemOffset Method Definition (TypeScript)\nDESCRIPTION: Defines the getItemOffset method for retrieving the offset of an item from the start of the list. It takes the item's index as input and returns the offset as a number. This is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: Shift Property in VList (Typescript)\nDESCRIPTION: The shift property controls how the scroll position is maintained when items are added to or removed from the beginning of the list. When set to true, the scroll position is maintained from the end of the list; otherwise, it's maintained from the start. This is useful for reverse infinite scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **shift**: `boolean` = `Boolean`\n```\n\n----------------------------------------\n\nTITLE: scrollBy Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method scrolls the virtualized list by a specified offset relative to the current position. It accepts the offset value as input and does not return any value (void). This function is useful for implementing incremental scrolling or responding to scroll events.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n\nDefined in: [src/solid/Virtualizer.tsx:83](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L83)\n\nScroll by the given offset.\n\n#### Parameters\n\n##### offset\n\n`number`\n\noffset from current position\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Scroll to Index in Virtualized List (scrollToIndex)\nDESCRIPTION: This method scrolls the virtualized list to the item specified by the given index. It accepts the item's index and an optional options object (`ScrollToIndexOpts`) to customize the scroll behavior.  It returns void.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n```\n\n----------------------------------------\n\nTITLE: ItemProps Property in VList (Typescript)\nDESCRIPTION: The itemProps property is a function that provides properties/attributes for each item element in the list. This allows customization of individual item rendering. Note that this prop will be merged into the item prop in a future version.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **itemProps**: `ItemProps`\n```\n\n----------------------------------------\n\nTITLE: getItemSize Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method returns the size of a specific item in the virtualized list. It accepts the item's index as input and returns its size as a number. This information is necessary for determining the overall scrollable area and calculating visible item ranges.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n\nDefined in: [src/solid/Virtualizer.tsx:67](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L67)\n\nGet item size.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: scrollTo Method\nDESCRIPTION: Defines the `scrollTo` method within the `VirtualizerHandle` interface. This method scrolls the virtualized list to a specific offset. It takes the offset from the start of the list as a parameter.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n\nDefined in: [src/svelte/Virtualizer.type.ts:115](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L115)\n\nScroll to the given offset.\n\n#### Parameters\n\n##### offset\n\n`number`\n\noffset from start\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: scrollToIndex Method\nDESCRIPTION: This method scrolls the list to a specific item index. It takes the index of the item to scroll to and an optional `ScrollToIndexOpts` object for additional configuration.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n\nDefined in: [src/solid/Virtualizer.tsx:73](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L73)\n\nScroll to the item specified by index.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n##### opts?\n\n[`ScrollToIndexOpts`](../../react/interfaces/ScrollToIndexOpts.md)\n\noptions\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: findStartIndex Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method, represented as a function, determines the index of the first visible item in the virtualized list. It takes no arguments and returns the start index as a number. This function is crucial for rendering only the visible portion of the list, optimizing performance.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **findStartIndex**: () => `number`\n\nDefined in: [src/solid/Virtualizer.tsx:53](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L53)\n\nFind the start index of visible range of items.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: getItemSize Method\nDESCRIPTION: Defines the `getItemSize` method within the `VirtualizerHandle` interface. This method returns the size of an item at a given index within the virtualized list. This information is crucial for accurately calculating the visible range and managing the virtualized rendering process.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:104](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L104)\n\nGet item size.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: viewportSize Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property returns the size of the visible viewport of the virtualized list or grid. It represents the height or width of the visible area, depending on the `horizontal` setting. If `horizontal` is true, it returns the offsetWidth value; otherwise, it returns the offsetHeight value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `readonly` **viewportSize**: `number`\n```\n\n----------------------------------------\n\nTITLE: VGrid Component Definition (TypeScript)\nDESCRIPTION: Defines the experimental_VGrid React component using TypeScript. It accepts VGridProps and RefAttributes<VGridHandle> as props and returns a ReactNode. This is a virtualized grid component for rendering large datasets efficiently.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/functions/experimental_VGrid.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **experimental_VGrid**(`props`): `ReactNode`\n```\n\n----------------------------------------\n\nTITLE: findEndIndex Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method, represented as a function, identifies the index of the last visible item in the virtualized list. It takes no arguments and returns the end index as a number. Together with findStartIndex, it defines the range of items that need to be rendered.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> **findEndIndex**: () => `number`\n\nDefined in: [src/solid/Virtualizer.tsx:57](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L57)\n\nFind the end index of visible range of items.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: scrollOffset Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property returns the current scroll offset of the virtualized list or grid. It represents the distance scrolled from the beginning of the content. If `horizontal` is true, it returns the scrollLeft value; otherwise, it returns the scrollTop value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `readonly` **scrollOffset**: `number`\n```\n\n----------------------------------------\n\nTITLE: Scroll to Index in VGrid (scrollToIndex)\nDESCRIPTION: This method scrolls the VGrid to the item specified by its horizontal and vertical indices. It allows programmatic scrolling to a specific item within the grid.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollToIndex**(`indexX`, `indexY`): `void`\n```\n\n----------------------------------------\n\nTITLE: Find Start Index in VGrid (findStartIndex)\nDESCRIPTION: This method determines the horizontal and vertical indices of the first visible item in the VGrid's current viewport. It returns an array containing the x and y coordinates of the start index.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> **findStartIndex**: () => \\[`number`, `number`\\]\n```\n\n----------------------------------------\n\nTITLE: Get Viewport Height Property in VGrid\nDESCRIPTION: This property provides the height of the visible viewport of the VGrid. It represents the portion of the grid that is currently visible.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **viewportHeight**: `number`\n```\n\n----------------------------------------\n\nTITLE: scrollToIndex Method\nDESCRIPTION: Defines the `scrollToIndex` method within the `VirtualizerHandle` interface. This method allows scrolling the virtualized list to a specific item, indicated by its index. It accepts an optional `ScrollToIndexOpts` object for configuring the scroll behavior.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollToIndex**(`index`, `opts`?): `void`\n\nDefined in: [src/svelte/Virtualizer.type.ts:110](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L110)\n\nScroll to the item specified by index.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n##### opts?\n\n[`ScrollToIndexOpts`](../../react/interfaces/ScrollToIndexOpts.md)\n\noptions\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Optional OnScroll Handler in VList (Typescript)\nDESCRIPTION: This optional property defines a handler function to be called when the virtualized list is scrolled.  It receives a variable number of arguments (`args`) that contain scroll-related information, typically including the scroll position.  The function can return any value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **onScroll**: (...`args`) => `any`\n```\n\n----------------------------------------\n\nTITLE: Scroll Offset Property in VList (Typescript)\nDESCRIPTION: This read-only property provides access to the current scroll offset of the VList. It returns the `scrollTop` value if `horizontal` is false, and the `scrollLeft` value if `horizontal` is true. It indicates how far the content has been scrolled.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollOffset**: `number`\n```\n\n----------------------------------------\n\nTITLE: Scroll By Offset in VList (Typescript)\nDESCRIPTION: This method scrolls the virtualized list by the given offset. The offset parameter specifies the amount to scroll relative to the current position. It does not return any value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: scrollOffset Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property provides the current scroll offset of the virtualized list, representing either the scrollTop (for vertical lists) or scrollLeft (for horizontal lists). This property is crucial for tracking the current viewport position.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollOffset**: `number`\n\nDefined in: [src/solid/Virtualizer.tsx:41](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L41)\n\nGet current scrollTop, or scrollLeft if horizontal: true.\n```\n\n----------------------------------------\n\nTITLE: React Window Scroll\nDESCRIPTION: This React component demonstrates window scrolling using the WindowVirtualizer component from Virtua. It virtualizes the list based on the window scroll position. React >= 16.14 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WindowVirtualizer } from \"virtua\";\n\nexport const App = () => {\n  return (\n    <div style={{ padding: 200 }}>\n      <WindowVirtualizer>\n        {Array.from({ length: 1000 }).map((_, i) => (\n          <div\n            key={i}\n            style={{\n              height: Math.floor(Math.random() * 10) * 10 + 10,\n              borderBottom: \"solid 1px gray\",\n              background: \"white\",\n            }}\n          >\n            {i}\n          </div>\n        ))}\n      </WindowVirtualizer>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Get Item Size in Virtualized List (getItemSize)\nDESCRIPTION: This method retrieves the size of an item in the virtualized list, based on its index. It requires the item's index as input and returns the size as a number.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: Setting default 'overscan' value in VirtualizerProps\nDESCRIPTION: This code snippet shows the default value for the 'overscan' property in the VirtualizerProps interface. Overscan defines the number of items to render above and below the visible bounds of the list, helping to prevent blank items during fast scrolling. By default, it's set to 4.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerProps.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: getViewportSize Property\nDESCRIPTION: Defines the `getViewportSize` property within the `VirtualizerHandle` interface. This property (as a function) returns the current viewport size, represented by offsetHeight for vertical lists or offsetWidth for horizontal lists. It provides the size of the visible area.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> **getViewportSize**: () => `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:86](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L86)\n\nGet current offsetHeight, or offsetWidth if horizontal: true.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: scrollSize Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property returns the total scrollable size of the virtualized list, corresponding to scrollHeight (for vertical lists) or scrollWidth (for horizontal lists). This value is essential for determining the maximum scroll offset and the overall content size.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollSize**: `number`\n\nDefined in: [src/solid/Virtualizer.tsx:45](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L45)\n\nGet current scrollHeight, or scrollWidth if horizontal: true.\n```\n\n----------------------------------------\n\nTITLE: Default Value for Cell Width\nDESCRIPTION: Specifies the default cell width for unmeasured items in the VGrid component. This value is used as a hint for initial rendering, reducing potential scroll jump. It's recommended to configure this value if cell sizes are predetermined.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n100\n```\n\n----------------------------------------\n\nTITLE: Find Start Index in VList (Typescript)\nDESCRIPTION: This method finds the start index of the visible range of items in the virtualized list. It calculates which item is at the top (or left, if horizontal) of the visible viewport. It returns the index of the first visible item.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n> **findStartIndex**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: VirtualizerProps overscan Default Value\nDESCRIPTION: This code snippet shows the default value for the `overscan` property within the `VirtualizerProps` interface. Overscan determines the number of items rendered above and below the visible bounds of the list, improving perceived performance during fast scrolling. A value of 4 is used by default.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerProps.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Default Value for Cell Height\nDESCRIPTION: Specifies the default cell height for unmeasured items within the VGrid component.  This value is used as a hint to reduce scroll jump during initial rendering. It is recommended to override if cell sizes are fixed and known.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n40\n```\n\n----------------------------------------\n\nTITLE: Horizontal Property in VList (Typescript)\nDESCRIPTION: The horizontal property determines whether the list is rendered horizontally or vertically. When set to true, the list is rendered horizontally; otherwise, it is rendered vertically.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **horizontal**: `boolean` = `Boolean`\n```\n\n----------------------------------------\n\nTITLE: Solid Usage\nDESCRIPTION: This Solid component demonstrates basic usage of the VList component from Virtua. It renders a list with dynamic heights based on a data array. solid-js >= 1.0 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VList } from \"virtua/solid\";\n\nexport const App = () => {\n  const sizes = [20, 40, 80, 77];\n  const data = Array.from({ length: 1000 }).map((_, i) => sizes[i % 4]);\n\n  return (\n    <VList data={data} style={{ height: \"800px\" }}>\n      {(d, i) => (\n        <div\n          style={{\n            height: d + \"px\",\n            \"border-bottom\": \"solid 1px #ccc\",\n            background: \"#fff\",\n          }}\n        >\n          {i}\n        </div>\n      )}\n    </VList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: findStartIndex Property\nDESCRIPTION: Defines the `findStartIndex` property within the `VirtualizerHandle` interface. This property (as a function) determines the index of the first visible item in the virtualized list. It is crucial for efficient rendering by only rendering visible items.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **findStartIndex**: () => `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:90](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L90)\n\nFind the start index of visible range of items.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Overscan Property in VList (Typescript)\nDESCRIPTION: The overscan property specifies the number of items to render above and below the visible bounds of the list. Increasing this value can help prevent blank items from appearing during fast scrolling. It defaults to 4 if not explicitly set.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **overscan**: `number` = `Number`\n```\n\n----------------------------------------\n\nTITLE: Shift Property Declaration in TypeScript\nDESCRIPTION: Defines the `shift` property of the `WindowVirtualizer` class. When set to `true`, scroll position is maintained from the end when items are added/removed from the start, useful for reverse infinite scrolling. It defaults to `false` if not specified.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/WindowVirtualizer.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nBoolean\n```\n\n----------------------------------------\n\nTITLE: ItemSize Property in VList (Typescript)\nDESCRIPTION: The itemSize property provides a hint for the size of unmeasured items. Setting this can reduce scroll jumps when items are measured, especially if initial item sizes are predictable. If not set, the component estimates initial item sizes from measured sizes.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **itemSize**: `number` = `Number`\n```\n\n----------------------------------------\n\nTITLE: Default Overscan Value\nDESCRIPTION: Defines the default value for the overscan property in the VirtualizerProps interface. The overscan property determines the number of items to render above and below the visible bounds of the list. A lower value provides better performance, while a higher value helps avoid showing blank items during fast scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Horizontal Property Definition\nDESCRIPTION: Defines the `horizontal` property, which indicates whether the list is rendered horizontally or vertically. The default value is `Boolean`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **horizontal**: `boolean` = `Boolean`\n```\n\n----------------------------------------\n\nTITLE: scrollBy Method Definition (TypeScript)\nDESCRIPTION: Defines the scrollBy method for scrolling the list by a given offset. It takes the offset as input. This method is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: Default Overscan Value in WindowVirtualizerProps\nDESCRIPTION: Specifies the default `overscan` value for the WindowVirtualizer component. The default value is 4. This indicates the number of items to render above and below the visible bounds of the list, which helps prevent blank items from appearing during fast scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/WindowVirtualizerProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Default Offset Value - TypeScript\nDESCRIPTION: Shows the default value of the `offset` property within the `ScrollToIndexOpts` interface. It defaults to 0, meaning no additional offset is applied when scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/ScrollToIndexOpts.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: getScrollOffset Property Definition (TypeScript)\nDESCRIPTION: Defines the getScrollOffset property for getting the current scroll offset of the list. It returns the scroll offset as a number. This property is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getScrollOffset**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Overscan Property Definition\nDESCRIPTION: Defines the `overscan` property, which specifies the number of items to render above and below the visible bounds of the list.  Increasing this value can help avoid showing blank items during fast scrolling. The default value is `Number`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **overscan**: `number` = `Number`\n```\n\n----------------------------------------\n\nTITLE: Defining default getKey function in VirtualizerProps\nDESCRIPTION: This code snippet shows the default implementation of the getKey function within the VirtualizerProps interface. If no getKey function is provided, it defaults to returning the index of the item. This is used for uniquely identifying list items to optimize rendering performance.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultGetKey (returns index of item)\n```\n\n----------------------------------------\n\nTITLE: Define ScrollToIndexAlign Type Alias TypeScript\nDESCRIPTION: This code snippet defines a type alias `ScrollToIndexAlign` in TypeScript. It specifies the possible string values that can be used to align the scroll position when scrolling to a particular index within a virtualized list or grid. The options include aligning to the start, center, end, or nearest position.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/type-aliases/ScrollToIndexAlign.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScrollToIndexAlign = \"start\" | \"center\" | \"end\" | \"nearest\";\n```\n\n----------------------------------------\n\nTITLE: Item Size Property Definition\nDESCRIPTION: Defines the `itemSize` property, which is an optional item size hint for unmeasured items.  It helps reduce scroll jumps when items are measured. The default value is `Number`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **itemSize**: `number` = `Number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-label in React\nDESCRIPTION: This code snippet defines the optional `aria-label` attribute as a string. It defines a string value that labels the current element for accessibility purposes. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-label**: `string`\n```\n\n----------------------------------------\n\nTITLE: Default Item Component in WindowVirtualizerProps\nDESCRIPTION: This snippet presents the default value for the `item` property in the `WindowVirtualizerProps` interface.  The default value is \"div\", indicating that item elements will be standard HTML div elements, receiving `CustomItemComponentProps`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/WindowVirtualizerProps.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Shift Property Definition\nDESCRIPTION: Defines the `shift` property, which determines whether the scroll position is maintained from the end when items are added to or removed from the start of the list.  This is useful for reverse infinite scrolling. The default value is `Boolean`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **shift**: `boolean` = `Boolean`\n```\n\n----------------------------------------\n\nTITLE: getScrollSize Property\nDESCRIPTION: Defines the `getScrollSize` property within the `VirtualizerHandle` interface. This property (as a function) returns the current scroll size, which is scrollHeight for vertical scrolling and scrollWidth for horizontal scrolling. It provides the total scrollable area size of the virtualized list.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> **getScrollSize**: () => `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:82](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L82)\n\nGet current scrollHeight, or scrollWidth if horizontal: true.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Default value for overscan property\nDESCRIPTION: Specifies the default value for the 'overscan' property in the WindowVirtualizerProps interface. The overscan property determines the number of items rendered above/below the visible bounds of the list. A lower value gives better performance, while a higher value avoids showing blank items during fast scrolling. The default value is set to 4.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/WindowVirtualizerProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: scrollBy Method\nDESCRIPTION: Defines the `scrollBy` method within the `VirtualizerHandle` interface. This method scrolls the virtualized list by a specified offset relative to the current scroll position. It takes the offset value as a parameter.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **scrollBy**(`offset`): `void`\n\nDefined in: [src/svelte/Virtualizer.type.ts:120](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L120)\n\nScroll by the given offset.\n\n#### Parameters\n\n##### offset\n\n`number`\n\noffset from current position\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: VirtualizerProps item Default Value\nDESCRIPTION: This code snippet shows the default value for the `item` property within the `VirtualizerProps` interface. The `item` property determines the component or element type for each item within the virtualized list.  By default, each item uses a `div` element.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerProps.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: scrollSize Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property returns the total scrollable size of the virtualized list or grid. It represents the total height or width of the content, depending on the `horizontal` setting. If `horizontal` is true, it returns the scrollWidth value; otherwise, it returns the scrollHeight value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `readonly` **scrollSize**: `number`\n```\n\n----------------------------------------\n\nTITLE: Default Value for Overscan\nDESCRIPTION: Defines the number of items to render outside the visible bounds of the grid. A lower value enhances performance, but a higher value prevents blank items during rapid scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n2\n```\n\n----------------------------------------\n\nTITLE: Defining aria-colindex attribute\nDESCRIPTION: This code defines the `aria-colindex` attribute, which represents an element's column index within a table, grid, or treegrid. It's an optional property inherited from `ViewportComponentAttributes` and helps assistive technologies understand the position of elements within a tabular structure.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-colindex**: `number`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2640\n\nDefines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n\n#### See\n\n - aria-colcount\n - aria-colspan.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-colindex`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-live attribute\nDESCRIPTION: This code defines the `aria-live` attribute, which indicates that an element will be updated and describes the types of updates expected. Inherited from `ViewportComponentAttributes`, this is essential for dynamic content, allowing assistive technologies to notify users of changes in live regions of a webpage, such as chat logs or stock tickers.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-live**: `\"off\"` \\| `\"assertive\"` \\| `\"polite\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2727\n\nIndicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-live`\n```\n\n----------------------------------------\n\nTITLE: Defining CustomCellComponent React Type Alias\nDESCRIPTION: Defines a type alias `CustomCellComponent` as a React ForwardRefExoticComponent. It uses `React.PropsWithoutRef` and `React.RefAttributes` to define the component's properties and ref respectively. The component takes `CustomCellComponentProps` as its primary props.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/type-aliases/CustomCellComponent.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nReact.ForwardRefExoticComponent<React.PropsWithoutRef<CustomCellComponentProps> & React.RefAttributes<any>>\n```\n\n----------------------------------------\n\nTITLE: Defining aria-dropeffect attribute\nDESCRIPTION: This code defines the deprecated `aria-dropeffect` attribute, which indicated the functions that could be performed when a dragged object was released on the drop target. This attribute was deprecated in ARIA 1.1. and inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-dropeffect**: `\"copy\"` \\| `\"none\"` \\| `\"link\"` \\| `\"move\"` \\| `\"execute\"` \\| `\"popup\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2682\n\nIndicates what functions can be performed when a dragged object is released on the drop target.\n\n#### Deprecated\n\nin ARIA 1.1\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-dropeffect`\n```\n\n----------------------------------------\n\nTITLE: Viewport Size Property in VList (Typescript)\nDESCRIPTION: This read-only property provides the size of the visible viewport of the VList. It returns the `offsetHeight` if `horizontal` is false, and the `offsetWidth` if `horizontal` is true. This reflects the visible area of the list.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **viewportSize**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-controls attribute\nDESCRIPTION: This code defines the `aria-controls` attribute, an optional string that identifies the element(s) whose content or presence is controlled by the current element.  Inherited from `ViewportComponentAttributes`, it enables assistive technologies to understand the relationship between elements and their controlled counterparts, improving accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-controls**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2655\n\nIdentifies the element (or elements) whose contents or presence are controlled by the current element.\n\n#### See\n\naria-owns.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-controls`\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Height Property in VGrid\nDESCRIPTION: This property provides the total height of the scrollable content within the VGrid. It represents the maximum possible vertical scroll position.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollHeight**: `number`\n```\n\n----------------------------------------\n\nTITLE: Setting default 'as' element type in VirtualizerProps\nDESCRIPTION: This code snippet shows the default value for the 'as' property in the VirtualizerProps interface. This property determines the component or element type used for the container element of the virtualized list. By default, it's set to \"div\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Define CustomItemComponent Type Alias (TypeScript)\nDESCRIPTION: Defines a type alias named `CustomItemComponent` which is a `ComponentType` that accepts `CustomItemComponentProps`. This type is used to define the type of custom item components that can be rendered in the Virtua virtualized list. It ensures that the custom component receives the correct props.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/type-aliases/CustomItemComponent.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CustomItemComponent = `ComponentType`<[`CustomItemComponentProps`](../interfaces/CustomItemComponentProps.md)>\n```\n\n----------------------------------------\n\nTITLE: viewportSize Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property provides the size of the visible viewport, returning offsetHeight (for vertical lists) or offsetWidth (for horizontal lists). This property is key to calculating the number of visible items and optimizing rendering.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **viewportSize**: `number`\n\nDefined in: [src/solid/Virtualizer.tsx:49](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L49)\n\nGet current offsetHeight, or offsetWidth if horizontal: true.\n```\n\n----------------------------------------\n\nTITLE: SsrCount Property in VList (Typescript)\nDESCRIPTION: The ssrCount property is used for server-side rendering (SSR). If set, it specifies the number of items to mount during the initial rendering, regardless of the container size. This ensures content is available before hydration.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **ssrCount**: `number` = `Number`\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Width Property in VGrid\nDESCRIPTION: This property provides the total width of the scrollable content within the VGrid. It represents the maximum possible horizontal scroll position.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollWidth**: `number`\n```\n\n----------------------------------------\n\nTITLE: scrollSize Property\nDESCRIPTION: This read-only property retrieves the total scroll size of the list. It returns the scrollHeight value for vertical lists and scrollWidth for horizontal lists.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollSize**: `number`\n\nDefined in: [src/solid/Virtualizer.tsx:45](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L45)\n\nGet current scrollHeight, or scrollWidth if horizontal: true.\n```\n\n----------------------------------------\n\nTITLE: Data Property in VList (Typescript)\nDESCRIPTION: The data property holds the data items rendered by the VList component. It is an array of unknown types. This data drives the virtualized rendering.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **data**: `unknown`[]\n```\n\n----------------------------------------\n\nTITLE: Get Item Offset in VList (Typescript)\nDESCRIPTION: This method retrieves the offset of an item from the start of the virtualized list based on its index. The index parameter specifies the item for which to retrieve the offset. It returns a number representing the offset.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: Optional OnScrollEnd Handler in VList (Typescript)\nDESCRIPTION: This optional property defines a handler function to be called when scrolling ends in the virtualized list. It receives a variable number of arguments in an array (`args`).  The function can return any value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **onScrollEnd**: (...`args`) => `any`\n```\n\n----------------------------------------\n\nTITLE: getViewportSize Property Definition (TypeScript)\nDESCRIPTION: Defines the getViewportSize property for getting the current viewport size of the list. It returns the viewport size as a number. This property is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getViewportSize**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-multiline Attribute\nDESCRIPTION: Defines the `aria-multiline` attribute, which indicates whether a text box accepts multiple lines of input or only a single line. This attribute is optional and inherits from `ViewportComponentAttributes.aria-multiline`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-multiline**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: viewportSize Property\nDESCRIPTION: This read-only property retrieves the visible size of the viewport. It returns the offsetHeight for vertical lists and offsetWidth for horizontal lists.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **viewportSize**: `number`\n\nDefined in: [src/solid/Virtualizer.tsx:49](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L49)\n\nGet current offsetHeight, or offsetWidth if horizontal: true.\n```\n\n----------------------------------------\n\nTITLE: Horizontal Property Declaration in TypeScript\nDESCRIPTION: Defines the `horizontal` property of the `WindowVirtualizer` class. When set to `true`, the list is rendered horizontally. Otherwise, it is rendered vertically. Defaults to `false` if not specified.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/WindowVirtualizer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nBoolean\n```\n\n----------------------------------------\n\nTITLE: Get Viewport Width Property in VGrid\nDESCRIPTION: This property provides the width of the visible viewport of the VGrid. It represents the portion of the grid that is currently visible.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **viewportWidth**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-disabled attribute\nDESCRIPTION: This code defines the `aria-disabled` attribute, a boolean indicating whether the element is perceivable but not editable or operable.  Inherited from `ViewportComponentAttributes`, this attribute enables assistive technologies to accurately represent the state of disabled elements.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-disabled**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2677\n\nIndicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n\n#### See\n\n - aria-hidden\n - aria-readonly.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-disabled`\n```\n\n----------------------------------------\n\nTITLE: getScrollSize Property Definition (TypeScript)\nDESCRIPTION: Defines the getScrollSize property for getting the current scroll size of the list. It returns the scroll size as a number. This property is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getScrollSize**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Find End Index in VGrid (findEndIndex)\nDESCRIPTION: This method determines the horizontal and vertical indices of the last visible item in the VGrid's current viewport. It returns an array containing the x and y coordinates of the end index.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> **findEndIndex**: () => \\[`number`, `number`\\]\n```\n\n----------------------------------------\n\nTITLE: Defining aria-colcount attribute\nDESCRIPTION: This snippet defines the `aria-colcount` attribute, which specifies the total number of columns in a table, grid, or treegrid. It's an optional property inherited from `ViewportComponentAttributes` and is used to improve accessibility by providing structural information to assistive technologies.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-colcount**: `number`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2635\n\nDefines the total number of columns in a table, grid, or treegrid.\n\n#### See\n\naria-colindex.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-colcount`\n```\n\n----------------------------------------\n\nTITLE: getItemOffset Method\nDESCRIPTION: This method retrieves the offset of an item from the start of the list. It takes the item's index as a parameter and returns a number representing the offset.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n\nDefined in: [src/solid/Virtualizer.tsx:62](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L62)\n\nGet item offset from start.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: VListProps Interface Definition\nDESCRIPTION: Defines the interface `VListProps` which extends `Pick<VirtualizerProps<T>, ...>.ViewportComponentAttributes`. It inherits properties related to virtualization and adds properties specific to the VList component. This interface is used to type the props passed to the VList component.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VListProps<T> extends Pick<VirtualizerProps<T>, \"data\" | \"getKey\" | \"overscan\" | \"itemSize\" | \"shift\" | \"horizontal\" | \"children\" | \"onscroll\" | \"onscrollend\">.ViewportComponentAttributes {\n  children: Snippet<[T, number]>;\n  shift?: boolean;\n  data: T[];\n  overscan?: number;\n  itemSize?: number;\n  horizontal?: boolean;\n  onscroll?(): void;\n  onscrollend?(): void;\n  getKey?(): string | number;\n  style?: null | string;\n  id?: null | string;\n  role?: null | AriaRole;\n  class?: null | string;\n  tabindex?: null | number;\n  \"aria-activedescendant\"?: null | string;\n  \"aria-atomic\"?: null | Booleanish;\n  \"aria-autocomplete\"?: null | \"inline\" | \"none\" | \"both\" | \"list\";\n  \"aria-busy\"?: null | Booleanish;\n  \"aria-checked\"?: null | boolean | \"mixed\" | \"false\" | \"true\";\n  \"aria-colcount\"?: null | number;\n  \"aria-colindex\"?: null | number;\n  \"aria-colspan\"?: null | number;\n  \"aria-controls\"?: null | string;\n  \"aria-current\"?: null | \"time\" | \"page\" | \"location\" | \"date\" | \"step\" | Booleanish;\n  \"aria-describedby\"?: null | string;\n  \"aria-details\"?: null | string;\n  \"aria-disabled\"?: null | Booleanish;\n}\n```\n\n----------------------------------------\n\nTITLE: Find End Index in VList (Typescript)\nDESCRIPTION: This method finds the end index of the visible range of items in the virtualized list. It calculates which item is at the bottom (or right, if horizontal) of the visible viewport. It returns the index of the last visible item.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n> **findEndIndex**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Default Value for Overscan Property in TypeScript\nDESCRIPTION: Shows the default value of the overscan property in the WindowVirtualizer class, which determines the number of items rendered beyond the visible bounds. This value is used to avoid blank items during fast scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/WindowVirtualizer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Defining aria-description attribute\nDESCRIPTION: This code defines the `aria-description` attribute, an optional string value that describes or annotates the current element.  Inherited from `ViewportComponentAttributes`, this attribute enables assistive technologies to provide users with a detailed description, improving the accessibility of React components.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-description**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2667\n\nDefines a string value that describes or annotates the current element.\n\n#### See\n\nrelated aria-describedby.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-description`\n```\n\n----------------------------------------\n\nTITLE: getItemOffset Method in VirtualizerHandle (TypeScript)\nDESCRIPTION: This method retrieves the offset of an item from the start of the virtualized list. It takes the index of the item as input and returns the offset as a number. This function is essential for calculating item positions within the virtualized viewport.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerHandle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **getItemOffset**(`index`): `number`\n\nDefined in: [src/solid/Virtualizer.tsx:62](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L62)\n\nGet item offset from start.\n\n#### Parameters\n\n##### index\n\n`number`\n\nindex of item\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-expanded attribute\nDESCRIPTION: This code defines the `aria-expanded` attribute, a boolean indicating whether an element (or a controlled grouping element) is currently expanded or collapsed.  Inherited from `ViewportComponentAttributes`, this attribute helps assistive technologies to understand the state of expandable elements, improving UI accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-expanded**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2689\n\nIndicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-expanded`\n```\n\n----------------------------------------\n\nTITLE: Vue Usage\nDESCRIPTION: This Vue component demonstrates basic usage of the VList component from Virtua. It renders a list with dynamic heights based on a data array. Vue >= 3.2 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VList } from \"virtua/vue\";\n\nconst sizes = [20, 40, 180, 77];\nconst data = Array.from({ length: 1000 }).map((_, i) => sizes[i % 4]);\n</script>\n\n<template>\n  <VList :data=\"data\" :style=\"{ height: '800px' }\" #default=\"{ item, index }\">\n    <div\n      :key=\"index\"\n      :style=\"{\n        height: item + 'px',\n        background: 'white',\n        borderBottom: 'solid 1px #ccc',\n      }\"\n    >\n      {{ index }}\n    </div>\n  </VList>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Default Overscan Value in WindowVirtualizerProps\nDESCRIPTION: This snippet shows the default value for the `overscan` property in the `WindowVirtualizerProps` interface. The default value is 4, which determines the number of items rendered above and below the visible bounds of the list.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/WindowVirtualizerProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Defining aria-placeholder attribute\nDESCRIPTION: This code defines the `aria-placeholder` attribute, which defines a short hint intended to aid the user with data entry when the control has no value. Inherited from `ViewportComponentAttributes`, this attribute provides guidance within input fields, improving usability and accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-placeholder**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2746\n\nDefines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-placeholder`\n```\n\n----------------------------------------\n\nTITLE: findStartIndex Property Definition (TypeScript)\nDESCRIPTION: Defines the findStartIndex property for finding the start index of the visible range of items in the list. It returns the start index as a number. This property is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **findStartIndex**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-flowto attribute\nDESCRIPTION: This code defines the `aria-flowto` attribute, which identifies the next element(s) in an alternate reading order.  Inherited from `ViewportComponentAttributes`, it allows assistive technologies to override the default reading order, improving accessibility for complex layouts.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-flowto**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2694\n\nIdentifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-flowto`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-current attribute\nDESCRIPTION: This code defines the `aria-current` attribute, used to indicate the element that represents the current item within a container or set of related elements. It is an optional attribute with several possible string or boolean values.  Inherited from `ViewportComponentAttributes`, this attribute enhances accessibility by explicitly marking the current item for assistive technologies.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-current**: `boolean` \\| `\"time\"` \\| `\"page\"` \\| `\"false\"` \\| `\"true\"` \\| `\"location\"` \\| `\"date\"` \\| `\"step\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2657\n\nIndicates the element that represents the current item within a container or set of related elements.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-current`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-dropeffect in React\nDESCRIPTION: This code snippet defines the optional `aria-dropeffect` attribute with specific string literal types. This attribute indicates what functions can be performed when a dragged object is released on the drop target. It's deprecated in ARIA 1.1 and inherited from the `ViewportComponentAttributes` interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-dropeffect**: `\"copy\"` \\| `\"none\"` \\| `\"link\"` \\| `\"move\"` \\| `\"execute\"` \\| `\"popup\"`\n```\n\n----------------------------------------\n\nTITLE: getScrollOffset Property\nDESCRIPTION: Defines the `getScrollOffset` property within the `VirtualizerHandle` interface. This property (as a function) returns the current scroll offset, either scrollTop for vertical scrolling or scrollLeft for horizontal scrolling. It allows accessing the current scroll position of the virtualized list.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> **getScrollOffset**: () => `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:78](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L78)\n\nGet current scrollTop, or scrollLeft if horizontal: true.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-colindextext attribute\nDESCRIPTION: This snippet defines the `aria-colindextext` attribute, which provides a human-readable text alternative of the `aria-colindex` attribute. It's an optional property inherited from `ViewportComponentAttributes` and enhances accessibility by offering a more understandable representation of the column index.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-colindextext**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2645\n\nDefines a human readable text alternative of aria-colindex.\n\n#### See\n\naria-rowindextext.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-colindextext`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-label attribute\nDESCRIPTION: This code defines the `aria-label` attribute, a string value that labels the current element. Inherited from `ViewportComponentAttributes`, it provides a text alternative for elements, making them more accessible to users with disabilities.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-label**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2718\n\nDefines a string value that labels the current element.\n\n#### See\n\naria-labelledby.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-label`\n```\n\n----------------------------------------\n\nTITLE: Default Item Type\nDESCRIPTION: Sets the default element type for each cell within the VGrid component. It defaults to a 'div' element and can be customized using a specific intrinsic element type or a custom cell component.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Scroll Size Property in VList (Typescript)\nDESCRIPTION: This read-only property provides the total scrollable size of the VList. It returns the `scrollHeight` if `horizontal` is false, and the `scrollWidth` if `horizontal` is true. This represents the total size of the content, even if it's not all visible at once.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollSize**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-haspopup attribute\nDESCRIPTION: This code defines the `aria-haspopup` attribute, which indicates the availability and type of interactive popup element that can be triggered by an element. Inherited from `ViewportComponentAttributes`, this attribute improves accessibility by informing assistive technologies about elements that trigger popups.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-haspopup**: `boolean` \\| `\"grid\"` \\| `\"dialog\"` \\| `\"menu\"` \\| `\"listbox\"` \\| `\"false\"` \\| `\"true\"` \\| `\"tree\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2701\n\nIndicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-haspopup`\n```\n\n----------------------------------------\n\nTITLE: Define aria-orientation Attribute\nDESCRIPTION: Defines the `aria-orientation` attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. This attribute is optional and inherits from `ViewportComponentAttributes.aria-orientation`. It can accept the values null, \"horizontal\", or \"vertical\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-orientation**: `null` \\| `\"horizontal\"` \\| `\"vertical\"`\n```\n\n----------------------------------------\n\nTITLE: findEndIndex Property\nDESCRIPTION: Defines the `findEndIndex` property within the `VirtualizerHandle` interface. This property (as a function) determines the index of the last visible item in the virtualized list. It works in conjunction with `findStartIndex` to identify the range of items to be rendered.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VirtualizerHandle.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> **findEndIndex**: () => `number`\n\nDefined in: [src/svelte/Virtualizer.type.ts:94](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/svelte/Virtualizer.type.ts#L94)\n\nFind the end index of visible range of items.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-description in React\nDESCRIPTION: This code snippet defines the optional `aria-description` attribute as a string. This attribute provides a string value that describes or annotates the current element. It is inherited from the `ViewportComponentAttributes` interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-description**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-invalid attribute\nDESCRIPTION: This code defines the `aria-invalid` attribute, which indicates whether the entered value does not conform to the expected format. Inherited from `ViewportComponentAttributes`, this attribute is crucial for accessibility, as it informs assistive technologies about invalid input fields.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-invalid**: `boolean` \\| `\"false\"` \\| `\"true\"` \\| `\"grammar\"` \\| `\"spelling\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2711\n\nIndicates the entered value does not conform to the format expected by the application.\n\n#### See\n\naria-errormessage.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-invalid`\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Definition: VList in TypeScript\nDESCRIPTION: Defines `VList` as a constant of type `ComponentType` in TypeScript. This indicates that `VList` is a Svelte component, making it a reusable UI element within a Svelte application. The definition appears within the Svelte type definitions.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/variables/VList.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst VList: ComponentType\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Top Property in VGrid\nDESCRIPTION: This property provides the current vertical scroll position of the VGrid. It represents the distance from the top of the scrollable content to the top of the visible viewport.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollTop**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-hidden attribute\nDESCRIPTION: This code defines the `aria-hidden` attribute, which indicates whether an element is exposed to an accessibility API. Inherited from `ViewportComponentAttributes`, this attribute allows developers to hide elements from assistive technologies, enhancing accessibility by presenting a cleaner interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-hidden**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2706\n\nIndicates whether the element is exposed to an accessibility API.\n\n#### See\n\naria-disabled.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-hidden`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-rowindex in React (TypeScript)\nDESCRIPTION: Defines an element's row index or position within a table, grid, or treegrid. It's an optional number attribute inherited from `ViewportComponentAttributes`. Consider `aria-rowcount` and `aria-rowspan` for related functionalities.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowindex**: `number`\n\nDefined in: node_modules/@types/react/index.d.ts:2791\n```\n\n----------------------------------------\n\nTITLE: Defining aria-level attribute\nDESCRIPTION: This code defines the `aria-level` attribute, which defines the hierarchical level of an element within a structure. Inherited from `ViewportComponentAttributes`, it is typically used in elements like headings or tree items to indicate their position in a hierarchy, thereby improving accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-level**: `number`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2725\n\nDefines the hierarchical level of an element within a structure.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-level`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-disabled in React\nDESCRIPTION: This code snippet defines the optional `aria-disabled` attribute as a `Booleanish` type. This attribute indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. It is inherited from the `ViewportComponentAttributes` interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-disabled**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: findEndIndex Property Definition (TypeScript)\nDESCRIPTION: Defines the findEndIndex property for finding the end index of the visible range of items in the list. It returns the end index as a number. This property is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **findEndIndex**: () => `number`\n```\n\n----------------------------------------\n\nTITLE: Default Item Component Value\nDESCRIPTION: Specifies the default component or element type for item elements within the Virtualizer. This is defined through the 'item' property and its default value is \"div\". The component receives CustomItemComponentProps as props.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Define aria-multiselectable Attribute\nDESCRIPTION: Defines the `aria-multiselectable` attribute, which indicates that the user may select more than one item from the current selectable descendants. This attribute is optional and inherits from `ViewportComponentAttributes.aria-multiselectable`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-multiselectable**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-required Attribute\nDESCRIPTION: Defines the `aria-required` attribute, which indicates that user input is required on the element before a form may be submitted. This attribute is optional and inherits from `ViewportComponentAttributes.aria-required`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-required**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-rowspan Attribute\nDESCRIPTION: Defines the `aria-rowspan` attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. This attribute is optional and inherits from `ViewportComponentAttributes.aria-rowspan`. It can accept either null or a number value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowspan**: `null` \\| `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-readonly Attribute\nDESCRIPTION: Defines the `aria-readonly` attribute, which indicates that the element is not editable, but is otherwise operable. This attribute is optional and inherits from `ViewportComponentAttributes.aria-readonly`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-readonly**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-details attribute\nDESCRIPTION: This code defines the `aria-details` attribute, an optional string that identifies the element that provides a detailed, extended description for the object.  Inherited from `ViewportComponentAttributes`, it enhances accessibility by pointing assistive technologies to elements containing in-depth descriptions.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-details**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2672\n\nIdentifies the element that provides a detailed, extended description for the object.\n\n#### See\n\naria-describedby.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-details`\n```\n\n----------------------------------------\n\nTITLE: Default Overscan Value\nDESCRIPTION: Defines the default value for the `overscan` property in the VListProps interface. The default value is set to 4. This prop controls the number of items rendered above/below the visible bounds of the list to avoid showing blank items during fast scrolling.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: findStartIndex Method\nDESCRIPTION: This method finds the index of the first visible item in the list. It returns the index as a number.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> **findStartIndex**: () => `number`\n\nDefined in: [src/solid/Virtualizer.tsx:53](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L53)\n\nFind the start index of visible range of items.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-labelledby attribute\nDESCRIPTION: This code defines the `aria-labelledby` attribute, which identifies the element(s) that label the current element.  Inherited from `ViewportComponentAttributes`, this attribute is used to associate a label with an element, enhancing accessibility by providing context and descriptions to assistive technologies.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-labelledby**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2723\n\nIdentifies the element (or elements) that labels the current element.\n\n#### See\n\naria-describedby.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-labelledby`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-rowspan in React (TypeScript)\nDESCRIPTION: Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. It's an optional number attribute inherited from `ViewportComponentAttributes`. Consider `aria-rowindex` and `aria-colspan` for related functionalities.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowspan**: `number`\n\nDefined in: node_modules/@types/react/index.d.ts:2801\n```\n\n----------------------------------------\n\nTITLE: scrollOffset Property\nDESCRIPTION: This read-only property retrieves the current scroll offset of the list.  It returns the scrollTop value for vertical lists and scrollLeft for horizontal lists.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollOffset**: `number`\n\nDefined in: [src/solid/Virtualizer.tsx:41](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L41)\n\nGet current scrollTop, or scrollLeft if horizontal: true.\n```\n\n----------------------------------------\n\nTITLE: Defining aria-multiline in React\nDESCRIPTION: This code snippet defines the optional `aria-multiline` attribute as a `Booleanish` type. It indicates whether a text box accepts multiple lines of input or only a single line. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-multiline**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-details in React\nDESCRIPTION: This code snippet defines the optional `aria-details` attribute as a string. This attribute identifies the element that provides a detailed, extended description for the object. It is inherited from the `ViewportComponentAttributes` interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-details**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-sort Attribute in Svelte\nDESCRIPTION: This snippet defines the `aria-sort` attribute which indicates the sort order of items in a table or grid. It is an optional attribute that can accept `null`, `\"none\"`, `\"ascending\"`, `\"descending\"`, or `\"other\"` as values. It inherits from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **aria-sort**: `null` | `\"none\"` | `\"ascending\"` | `\"descending\"` | `\"other\"`\n```\n\n----------------------------------------\n\nTITLE: KeepMounted Property in VList (Typescript)\nDESCRIPTION: The keepMounted property is a list of indexes that should always be mounted, even when they are off-screen.  This can be useful for items that require persistent state or visibility for accessibility reasons.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/VList.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **keepMounted**: `number`[]\n```\n\n----------------------------------------\n\nTITLE: Defining aria-posinset attribute\nDESCRIPTION: This code defines the `aria-posinset` attribute, which defines an element's number or position in the current set of listitems or treeitems. Inherited from `ViewportComponentAttributes`, this helps assistive technologies accurately convey the position of elements within a dynamic list or tree structure to the user, improving navigability.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-posinset**: `number`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2751\n\nDefines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n\n#### See\n\naria-setsize.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-posinset`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-rowindextext in React (TypeScript)\nDESCRIPTION: Defines a human-readable text alternative of `aria-rowindex`. It's an optional string attribute inherited from `ViewportComponentAttributes`. `aria-colindextext` can be considered related.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowindextext**: `string`\n\nDefined in: node_modules/@types/react/index.d.ts:2796\n```\n\n----------------------------------------\n\nTITLE: Defining aria-modal attribute\nDESCRIPTION: This code defines the `aria-modal` attribute, which indicates whether an element is modal when displayed. Inherited from `ViewportComponentAttributes`, it informs assistive technologies when an element is displayed in a modal context, thus allowing the screen reader to focus on the modal and its content for better accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-modal**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2729\n\nIndicates whether an element is modal when displayed.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-modal`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-describedby in React\nDESCRIPTION: This code snippet defines the optional `aria-describedby` attribute as a string. This attribute identifies the element(s) that describes the object for accessibility purposes. It is inherited from the `ViewportComponentAttributes` interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-describedby**: `string`\n```\n\n----------------------------------------\n\nTITLE: Default Align Value - TypeScript\nDESCRIPTION: Shows the default value of the `align` property within the `ScrollToIndexOpts` interface.  It defaults to \"start\", aligning the item to the beginning of the list.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/ScrollToIndexOpts.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"start\"\n```\n\n----------------------------------------\n\nTITLE: Define aria-owns Attribute\nDESCRIPTION: Defines the `aria-owns` attribute, which identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. This attribute is optional and inherits from `ViewportComponentAttributes.aria-owns`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-owns**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuemax Attribute in Svelte\nDESCRIPTION: This snippet defines the `aria-valuemax` attribute, representing the maximum allowed value for a range widget.  It is an optional attribute and accepts either `null` or a `number`. This attribute inherits from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **aria-valuemax**: `null` | `number`\n```\n\n----------------------------------------\n\nTITLE: Default Key Function in WindowVirtualizerProps\nDESCRIPTION: Defines a default function for generating keys for items in the list. If no `getKey` function is provided, this default function returns the index of the item. This is important for performance optimization within the WindowVirtualizer component.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/WindowVirtualizerProps.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultGetKey (returns index of item)\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuenow in React (TypeScript)\nDESCRIPTION: Defines the current value for a range widget. It's an optional number attribute inherited from `ViewportComponentAttributes`. See also `aria-valuetext`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-valuenow**: `number`\n\nDefined in: node_modules/@types/react/index.d.ts:2822\n```\n\n----------------------------------------\n\nTITLE: Defining aria-orientation in React\nDESCRIPTION: This code snippet defines the optional `aria-orientation` attribute with string literal types. It indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-orientation**: `\"horizontal\"` \\| `\"vertical\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-live in React\nDESCRIPTION: This code snippet defines the optional `aria-live` attribute with string literal types. It indicates that an element will be updated and describes the types of updates expected. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-live**: `\"off\"` \\| `\"assertive\"` \\| `\"polite\"`\n```\n\n----------------------------------------\n\nTITLE: findEndIndex Method\nDESCRIPTION: This method finds the index of the last visible item in the list. It returns the index as a number.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VListHandle.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> **findEndIndex**: () => `number`\n\nDefined in: [src/solid/Virtualizer.tsx:57](https://github.com/inokawa/virtua/blob/41a33aaa191d1b7d2f2edf9ebdf280019e03fb14/src/solid/Virtualizer.tsx#L57)\n\nFind the end index of visible range of items.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport Component Attributes Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named `ViewportComponentAttributes` that combines specific HTML attributes and ARIA attributes for use in a React viewport component. It uses the `Pick` utility type to select specific HTML attributes from `React.HTMLAttributes<HTMLElement>`. It includes properties like className, style, id, role, tabIndex, onKeyDown, and onWheel, along with all `React.AriaAttributes` for enhanced accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/type-aliases/ViewportComponentAttributes.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ViewportComponentAttributes = Pick<React.HTMLAttributes<HTMLElement>, \"className\" | \"style\" | \"id\" | \"role\" | \"tabIndex\" | \"onKeyDown\" | \"onWheel\"> & React.AriaAttributes;\n```\n\n----------------------------------------\n\nTITLE: Define aria-pressed Attribute\nDESCRIPTION: Defines the `aria-pressed` attribute, which indicates the current \"pressed\" state of toggle buttons. This attribute is optional and inherits from `ViewportComponentAttributes.aria-pressed`. It can accept the values null, `boolean`, \"mixed\", \"false\", or \"true\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-pressed**: `null` \\| `boolean` \\| `\"mixed\"` \\| `\"false\"` \\| `\"true\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-flowto in React\nDESCRIPTION: This code snippet defines the optional `aria-flowto` attribute as a string. It identifies the next element in an alternate reading order. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-flowto**: `string`\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Left Property in VGrid\nDESCRIPTION: This property provides the current horizontal scroll position of the VGrid. It represents the distance from the left of the scrollable content to the left of the visible viewport.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridHandle.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` **scrollLeft**: `number`\n```\n\n----------------------------------------\n\nTITLE: Default Container Component in VirtualizerProps\nDESCRIPTION: Defines the default component or element type used for the container element of the Virtualizer component. The default value is \"div\", indicating a standard HTML div element will be used as the container.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Defining aria-haspopup in React\nDESCRIPTION: This code snippet defines the optional `aria-haspopup` attribute with several possible string and boolean values. It indicates the availability and type of interactive popup element that can be triggered by an element. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-haspopup**: `boolean` \\| `\"grid\"` \\| `\"dialog\"` \\| `\"menu\"` \\| `\"listbox\"` \\| `\"false\"` \\| `\"true\"` \\| `\"tree\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-modal in React\nDESCRIPTION: This code snippet defines the optional `aria-modal` attribute as a `Booleanish` type. It indicates whether an element is modal when displayed. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-modal**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-pressed attribute\nDESCRIPTION: This code defines the `aria-pressed` attribute, which indicates the current \"pressed\" state of toggle buttons. Inherited from `ViewportComponentAttributes`, it is crucial for accessibility, allowing assistive technologies to accurately represent the state of toggle buttons.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-pressed**: `boolean` \\| `\"mixed\"` \\| `\"false\"` \\| `\"true\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2756\n\nIndicates the current \"pressed\" state of toggle buttons.\n\n#### See\n\n - aria-checked\n - aria-selected.\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuenow Attribute in Svelte\nDESCRIPTION: This snippet defines the `aria-valuenow` attribute for representing the current value for a range widget. This attribute is optional and accepts either `null` or a `number`. It inherits from `ViewportComponentAttributes` and relates to `aria-valuetext`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **aria-valuenow**: `null` | `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-live Attribute\nDESCRIPTION: Defines the `aria-live` attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. This attribute is optional and inherits from `ViewportComponentAttributes.aria-live`. It can accept the values null, \"off\", \"assertive\", or \"polite\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-live**: `null` \\| `\"off\"` \\| `\"assertive\"` \\| `\"polite\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-level in React\nDESCRIPTION: This code snippet defines the optional `aria-level` attribute as a number. It defines the hierarchical level of an element within a structure. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-level**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-errormessage in React\nDESCRIPTION: This code snippet defines the optional `aria-errormessage` attribute as a string. This attribute identifies the element that provides an error message for the object. It is inherited from the `ViewportComponentAttributes` interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-errormessage**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuetext Attribute in Svelte\nDESCRIPTION: This snippet defines the `aria-valuetext` attribute, providing a human-readable text alternative for the `aria-valuenow` attribute in a range widget. This optional attribute accepts either `null` or a `string` value. It inherits from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **aria-valuetext**: `null` | `string`\n```\n\n----------------------------------------\n\nTITLE: Default Value for 'as' Property in TypeScript\nDESCRIPTION: Specifies the default HTML element used as the container for the WindowVirtualizer component.  By default, it uses a 'div' element.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/WindowVirtualizer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Defining aria-relevant in React\nDESCRIPTION: This code snippet defines the optional `aria-relevant` attribute with string literal types. It indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-relevant**: `\"text\"` \\| `\"all\"` \\| `\"additions\"` \\| `\"additions removals\"` \\| `\"additions text\"` \\| `\"removals\"` \\| `\"removals additions\"` \\| `\"removals text\"` \\| `\"text additions\"` \\| `\"text removals\"`\n```\n\n----------------------------------------\n\nTITLE: Define aria-haspopup Attribute\nDESCRIPTION: Defines the `aria-haspopup` attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. This attribute is optional and inherits from `ViewportComponentAttributes.aria-haspopup`. It can accept the values null, \"grid\", \"dialog\", \"menu\", \"listbox\", \"tree\", or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-haspopup**: `null` \\| `\"grid\"` \\| `\"dialog\"` \\| `\"menu\"` \\| `\"listbox\"` \\| `\"tree\"` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-hidden in React\nDESCRIPTION: This code snippet defines the optional `aria-hidden` attribute as a `Booleanish` type. It indicates whether the element is exposed to an accessibility API. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-hidden**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-rowindex Attribute\nDESCRIPTION: Defines the `aria-rowindex` attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. This attribute is optional and inherits from `ViewportComponentAttributes.aria-rowindex`. It can accept either null or a number value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowindex**: `null` \\| `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-relevant Attribute\nDESCRIPTION: Defines the `aria-relevant` attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This attribute is optional and inherits from `ViewportComponentAttributes.aria-relevant`. It can accept the values null, \"text\", \"all\", \"additions\", \"additions removals\", \"additions text\", \"removals\", \"removals additions\", \"removals text\", \"text additions\", or \"text removals\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-relevant**: `null` \\| `\"text\"` \\| `\"all\"` \\| `\"additions\"` \\| `\"additions removals\"` \\| `\"additions text\"` \\| `\"removals\"` \\| `\"removals additions\"` \\| `\"removals text\"` \\| `\"text additions\"` \\| `\"text removals\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuemin in React (TypeScript)\nDESCRIPTION: Defines the minimum allowed value for a range widget. It's an optional number attribute inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-valuemin**: `number`\n\nDefined in: node_modules/@types/react/index.d.ts:2817\n```\n\n----------------------------------------\n\nTITLE: Defining aria-keyshortcuts in React\nDESCRIPTION: This code snippet defines the optional `aria-keyshortcuts` attribute as a string. It indicates keyboard shortcuts that activate or give focus to an element. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-keyshortcuts**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-selected in React (TypeScript)\nDESCRIPTION: Indicates the current \"selected\" state of various widgets. It's an optional `Booleanish` attribute inherited from `ViewportComponentAttributes`. Consider `aria-checked` and `aria-pressed` for related functionalities.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-selected**: `Booleanish`\n\nDefined in: node_modules/@types/react/index.d.ts:2806\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuetext in React (TypeScript)\nDESCRIPTION: Defines the human-readable text alternative of `aria-valuenow` for a range widget. It's an optional string attribute inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-valuetext**: `string`\n\nDefined in: node_modules/@types/react/index.d.ts:2824\n```\n\n----------------------------------------\n\nTITLE: Defining aria-keyshortcuts attribute\nDESCRIPTION: This code defines the `aria-keyshortcuts` attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. Inherited from `ViewportComponentAttributes`, it provides assistive technologies with information about available keyboard shortcuts, improving accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-keyshortcuts**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2713\n\nIndicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-keyshortcuts`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-describedby attribute\nDESCRIPTION: This code defines the `aria-describedby` attribute, an optional string that identifies the element(s) that describe the current object. Inherited from `ViewportComponentAttributes`, this attribute improves accessibility by allowing assistive technologies to associate descriptive text with elements, providing more context for users.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-describedby**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2662\n\nIdentifies the element (or elements) that describes the object.\n\n#### See\n\naria-labelledby\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-describedby`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-pressed in React\nDESCRIPTION: This code snippet defines the optional `aria-pressed` attribute with different possible values (boolean and string literals). It indicates the current \"pressed\" state of toggle buttons. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-pressed**: `boolean` \\| `\"mixed\"` \\| `\"false\"` \\| `\"true\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-setsize in React (TypeScript)\nDESCRIPTION: Defines the number of items in the current set of listitems or treeitems. It's an optional number attribute inherited from `ViewportComponentAttributes`. Not required if all elements in the set are present in the DOM. See also `aria-posinset`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-setsize**: `number`\n\nDefined in: node_modules/@types/react/index.d.ts:2811\n```\n\n----------------------------------------\n\nTITLE: Define aria-selected Attribute\nDESCRIPTION: Defines the `aria-selected` attribute, which indicates the current \"selected\" state of various widgets. This attribute is optional and inherits from `ViewportComponentAttributes.aria-selected`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-selected**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-labelledby Attribute\nDESCRIPTION: Defines the `aria-labelledby` attribute, which identifies the element (or elements) that labels the current element. This attribute is optional and inherits from `ViewportComponentAttributes.aria-labelledby`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-labelledby**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-multiline attribute\nDESCRIPTION: This code defines the `aria-multiline` attribute, which indicates whether a text box accepts multiple lines of input or only a single line. Inherited from `ViewportComponentAttributes`, this is vital for accessibility, allowing assistive technologies to understand the input capabilities of a text area.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-multiline**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2731\n\nIndicates whether a text box accepts multiple lines of input or only a single line.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-multiline`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-readonly in React\nDESCRIPTION: This code snippet defines the optional `aria-readonly` attribute as a `Booleanish` type. It indicates that the element is not editable, but is otherwise operable. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-readonly**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-modal Attribute\nDESCRIPTION: Defines the `aria-modal` attribute, which indicates whether an element is modal when displayed. This attribute is optional and inherits from `ViewportComponentAttributes.aria-modal`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-modal**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-colspan attribute\nDESCRIPTION: The code defines the `aria-colspan` attribute, which specifies the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. This optional attribute, inherited from `ViewportComponentAttributes`, is crucial for accessibility, providing assistive technologies with information about cell layout in tabular structures.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-colspan**: `number`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2650\n\nDefines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n\n#### See\n\n - aria-colindex\n - aria-rowspan.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-colspan`\n```\n\n----------------------------------------\n\nTITLE: Define aria-hidden Attribute\nDESCRIPTION: Defines the `aria-hidden` attribute, which indicates whether the element is exposed to an accessibility API. This attribute is optional and inherits from `ViewportComponentAttributes.aria-hidden`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-hidden**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-label Attribute\nDESCRIPTION: Defines the `aria-label` attribute, which defines a string value that labels the current element. This attribute is optional and inherits from `ViewportComponentAttributes.aria-label`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-label**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-roledescription in React\nDESCRIPTION: This code snippet defines the optional `aria-roledescription` attribute as a string. It defines a human-readable, author-localized description for the role of an element. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-roledescription**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-owns attribute\nDESCRIPTION: This code defines the `aria-owns` attribute, which identifies an element(s) to define a visual, functional, or contextual parent/child relationship between DOM elements. Inherited from `ViewportComponentAttributes`, this allows assistive technologies to correctly interpret the relationships between elements when the DOM hierarchy does not adequately represent them.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-owns**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2741\n\nIdentifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n\n#### See\n\naria-controls.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-owns`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-placeholder in React\nDESCRIPTION: This code snippet defines the optional `aria-placeholder` attribute as a string. It defines a short hint to aid the user with data entry when the control has no value. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-placeholder**: `string`\n```\n\n----------------------------------------\n\nTITLE: Define aria-placeholder Attribute\nDESCRIPTION: Defines the `aria-placeholder` attribute, which defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. This attribute is optional and inherits from `ViewportComponentAttributes.aria-placeholder`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-placeholder**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-orientation attribute\nDESCRIPTION: This code defines the `aria-orientation` attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. Inherited from `ViewportComponentAttributes`, this is relevant for scrollable elements or sliders, and assistive technologies use this to accurately describe the orientation to the user.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-orientation**: `\"horizontal\"` \\| `\"vertical\"`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2735\n\nIndicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-orientation`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-rowcount in React\nDESCRIPTION: This code snippet defines the optional `aria-rowcount` attribute as a number. It defines the total number of rows in a table, grid, or treegrid. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowcount**: `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-setsize Attribute\nDESCRIPTION: Defines the `aria-setsize` attribute, which defines the number of items in the current set of listitems or treeitems. This attribute is optional and inherits from `ViewportComponentAttributes.aria-setsize`. It can accept either null or a number value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-setsize**: `null` \\| `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-posinset Attribute\nDESCRIPTION: Defines the `aria-posinset` attribute, which defines an element's number or position in the current set of listitems or treeitems. This attribute is optional and inherits from `ViewportComponentAttributes.aria-posinset`. It can accept either null or a number value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-posinset**: `null` \\| `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-labelledby in React\nDESCRIPTION: This code snippet defines the optional `aria-labelledby` attribute as a string. It identifies the element(s) that labels the current element for accessibility purposes. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-labelledby**: `string`\n```\n\n----------------------------------------\n\nTITLE: React Customization with Virtualizer\nDESCRIPTION: This React component demonstrates customization using the Virtualizer component from Virtua, allowing for more complex styling and markup than the basic VList component. It adds a header above the virtualized list.  React >= 16.14 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtualizer } from \"virtua\";\n\nexport const App = () => {\n  return (\n    <div style={{ overflowY: \"auto\", height: 800 }}>\n      <div style={{ height: 40 }}>header</div>\n      <Virtualizer startMargin={40}>\n        {Array.from({ length: 1000 }).map((_, i) => (\n          <div\n            key={i}\n            style={{\n              height: Math.floor(Math.random() * 10) * 10 + 10,\n              borderBottom: \"solid 1px gray\",\n              background: \"white\",\n            }}\n          >\n            {i}\n          </div>\n        ))}\n      </Virtualizer>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining aria-owns in React\nDESCRIPTION: This code snippet defines the optional `aria-owns` attribute as a string. It identifies element(s) to define a parent/child relationship between DOM elements where the DOM hierarchy cannot represent it. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-owns**: `string`\n```\n\n----------------------------------------\n\nTITLE: Installing Virtua\nDESCRIPTION: This command installs the Virtua package using npm.  It is a prerequisite for using the library in any project.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install virtua\n```\n\n----------------------------------------\n\nTITLE: Defining aria-expanded in React\nDESCRIPTION: This code snippet defines the optional `aria-expanded` attribute as a `Booleanish` type. It indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-expanded**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Default Value for 'item' Property in TypeScript\nDESCRIPTION: Specifies the default HTML element used as the item container for the WindowVirtualizer component.  By default, it uses a 'div' element.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/WindowVirtualizer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Define aria-errormessage Attribute\nDESCRIPTION: Defines the `aria-errormessage` attribute, which identifies the element that provides an error message for the object. This attribute is optional and inherits from `ViewportComponentAttributes.aria-errormessage`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-errormessage**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Define aria-keyshortcuts Attribute\nDESCRIPTION: Defines the `aria-keyshortcuts` attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. This attribute is optional and inherits from `ViewportComponentAttributes.aria-keyshortcuts`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-keyshortcuts**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-multiselectable in React\nDESCRIPTION: This code snippet defines the optional `aria-multiselectable` attribute as a `Booleanish` type. It indicates that the user may select more than one item from the current selectable descendants. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-multiselectable**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: VirtualizerProps as Default Value\nDESCRIPTION: This code snippet shows the default value for the `as` property within the `VirtualizerProps` interface. The `as` property specifies the component or element type for the container element of the virtualized list. By default, it uses a `div` element.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/solid/interfaces/VirtualizerProps.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Defining aria-errormessage attribute\nDESCRIPTION: This code defines the `aria-errormessage` attribute, an optional string pointing to the element that provides the error message for the object. Inherited from `ViewportComponentAttributes`, this helps assistive technologies to identify and convey error messages to users, improving accessibility.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-errormessage**: `string`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2687\n\nIdentifies the element that provides an error message for the object.\n\n#### See\n\n - aria-invalid\n - aria-describedby.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-errormessage`\n```\n\n----------------------------------------\n\nTITLE: Define aria-grabbed Attribute (Deprecated)\nDESCRIPTION: Defines the `aria-grabbed` attribute, which indicates an element's \"grabbed\" state in a drag-and-drop operation.  This attribute is optional and deprecated in ARIA 1.1. It inherits from `ViewportComponentAttributes.aria-grabbed`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-grabbed**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-multiselectable attribute\nDESCRIPTION: This code defines the `aria-multiselectable` attribute, which indicates that the user may select more than one item from the current selectable descendants. Inherited from `ViewportComponentAttributes`, it allows assistive technologies to correctly interpret the behavior of multi-select components, thus providing a better experience for users.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-multiselectable**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2733\n\nIndicates that the user may select more than one item from the current selectable descendants.\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-multiselectable`\n```\n\n----------------------------------------\n\nTITLE: Svelte Usage\nDESCRIPTION: This Svelte component demonstrates basic usage of the VList component from Virtua. It renders a list with dynamic heights based on a data array. svelte >= 5.0 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { VList } from \"virtua/svelte\";\n\n  const sizes = [20, 40, 180, 77];\n\n  const data = Array.from({ length: 1000 }).map((_, i) => sizes[i % 4] );\n</script>\n\n<VList {data} style=\"height: 100vh;\" getKey={(_, i) => i}>\n  {#snippet children(item, index)}\n    <div\n      style=\"\n        height: {item}px;\n        background: white;\n        border-bottom: solid 1px #ccc;\n      \"\n    >\n      {index}\n    </div>\n  {/snippet}\n</VList>\n```\n\n----------------------------------------\n\nTITLE: Defining aria-grabbed attribute\nDESCRIPTION: This code defines the deprecated `aria-grabbed` attribute, which indicated an element's \"grabbed\" state in a drag-and-drop operation. This attribute was deprecated in ARIA 1.1 and inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VListProps.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-grabbed**: `Booleanish`\n\nDefined in: node\\_modules/@types/react/index.d.ts:2699\n\nIndicates an element's \"grabbed\" state in a drag-and-drop operation.\n\n#### Deprecated\n\nin ARIA 1.1\n\n#### Inherited from\n\n`ViewportComponentAttributes.aria-grabbed`\n```\n\n----------------------------------------\n\nTITLE: SSR Count Property Definition\nDESCRIPTION: Defines the `ssrCount` property, which is used for server-side rendering (SSR). If set, the specified amount of items will be mounted in the initial rendering regardless of the container size until hydrated. The default value is `Number`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/vue/classes/Virtualizer.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n> `readonly` `optional` **ssrCount**: `number` = `Number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-required in React\nDESCRIPTION: This code snippet defines the optional `aria-required` attribute as a `Booleanish` type. It indicates that user input is required on the element before a form may be submitted. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-required**: `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-roledescription Attribute\nDESCRIPTION: Defines the `aria-roledescription` attribute, which defines a human-readable, author-localized description for the role of an element. This attribute is optional and inherits from `ViewportComponentAttributes.aria-roledescription`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-roledescription**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: getItemSize Method Definition (TypeScript)\nDESCRIPTION: Defines the getItemSize method for retrieving the size of an item. It takes the item's index as input and returns the size as a number. This method is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **getItemSize**(`index`): `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-invalid in React\nDESCRIPTION: This code snippet defines the optional `aria-invalid` attribute, allowing boolean and string literal values. It indicates that the entered value does not conform to the expected format. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-invalid**: `boolean` \\| `\"false\"` \\| `\"true\"` \\| `\"grammar\"` \\| `\"spelling\"`\n```\n\n----------------------------------------\n\nTITLE: scrollTo Method Definition (TypeScript)\nDESCRIPTION: Defines the scrollTo method for scrolling to a specific offset in the list. It takes the offset as input. This method is inherited from the VirtualizerHandle interface.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListHandle.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **scrollTo**(`offset`): `void`\n```\n\n----------------------------------------\n\nTITLE: CacheSnapshot Interface Definition Typescript\nDESCRIPTION: Defines the `CacheSnapshot` interface, which represents a serializable snapshot of the cache. This interface is intended for internal use within the library, and it is not recommended for users to modify it directly. It includes a property `[cacheSymbol]` of type `never`. The `cacheSymbol` property likely serves as a unique identifier or flag related to the cache.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/CacheSnapshot.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CacheSnapshot {\n  [cacheSymbol]: never\n}\n```\n\n----------------------------------------\n\nTITLE: Defining aria-sort in React (TypeScript)\nDESCRIPTION: Indicates if items in a table or grid are sorted in ascending or descending order. It's an optional attribute inherited from `ViewportComponentAttributes` with possible values: `\"none\"`, `\"ascending\"`, `\"descending\"`, or `\"other\"`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-sort**: `\"none\"` \\| `\"ascending\"` \\| `\"descending\"` \\| `\"other\"`\n\nDefined in: node_modules/@types/react/index.d.ts:2813\n```\n\n----------------------------------------\n\nTITLE: Default Container Component in WindowVirtualizerProps\nDESCRIPTION: This snippet displays the default value for the `as` property in the `WindowVirtualizerProps` interface. The default value is \"div\", meaning the container element will be a standard HTML div element.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/WindowVirtualizerProps.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"div\"\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuemax in React (TypeScript)\nDESCRIPTION: Defines the maximum allowed value for a range widget. It's an optional number attribute inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-valuemax**: `number`\n\nDefined in: node_modules/@types/react/index.d.ts:2815\n```\n\n----------------------------------------\n\nTITLE: cache Property in VirtualizerHandle (TypeScript)\nDESCRIPTION: This read-only property provides access to the current cache snapshot of the virtualized list or grid. It returns a `CacheSnapshot` object, containing cached item sizes and offsets, which improves performance by avoiding recalculations.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VirtualizerHandle.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `readonly` **cache**: [`CacheSnapshot`](CacheSnapshot.md)\n```\n\n----------------------------------------\n\nTITLE: Defining aria-posinset in React\nDESCRIPTION: This code snippet defines the optional `aria-posinset` attribute as a number. It defines an element's number or position in the current set of listitems or treeitems. It is inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-posinset**: `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-invalid Attribute\nDESCRIPTION: Defines the `aria-invalid` attribute, which indicates that the entered value does not conform to the format expected by the application. This attribute is optional and inherits from `ViewportComponentAttributes.aria-invalid`. It can accept the values null, \"grammar\", \"spelling\", or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-invalid**: `null` \\| `\"grammar\"` \\| `\"spelling\"` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: Define aria-expanded Attribute\nDESCRIPTION: Defines the `aria-expanded` attribute, which indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. This attribute is optional and inherits from `ViewportComponentAttributes.aria-expanded`. It can accept either null or a `Booleanish` value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-expanded**: `null` \\| `Booleanish`\n```\n\n----------------------------------------\n\nTITLE: React Vertical and Horizontal Scroll\nDESCRIPTION: This React component demonstrates vertical and horizontal scrolling using the experimental VGrid component from Virtua. It creates a grid of 1000 rows and 500 columns. React >= 16.14 is required.\nSOURCE: https://github.com/inokawa/virtua/blob/main/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { experimental_VGrid as VGrid } from \"virtua\";\n\nexport const App = () => {\n  return (\n    <VGrid style={{ height: 800 }} row={1000} col={500}>\n      {({ rowIndex, colIndex }) => (\n        <div\n          style={{\n            width: ((colIndex % 3) + 1) * 100,\n            border: \"solid 1px gray\",\n            background: \"white\",\n          }}\n        >\n          {rowIndex} / {colIndex}\n        </div>\n      )}\n    </VGrid>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Define aria-rowcount Attribute\nDESCRIPTION: Defines the `aria-rowcount` attribute, which defines the total number of rows in a table, grid, or treegrid. This attribute is optional and inherits from `ViewportComponentAttributes.aria-rowcount`. It can accept either null or a number value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-rowcount**: `null` \\| `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-level Attribute\nDESCRIPTION: Defines the `aria-level` attribute, which defines the hierarchical level of an element within a structure. This attribute is optional and inherits from `ViewportComponentAttributes.aria-level`. It can accept either null or a number value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-level**: `null` \\| `number`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-valuemin Attribute in Svelte\nDESCRIPTION: This snippet defines the `aria-valuemin` attribute, representing the minimum allowed value for a range widget. It is an optional attribute that accepts either `null` or a `number`. This attribute inherits from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n> `optional` **aria-valuemin**: `null` | `number`\n```\n\n----------------------------------------\n\nTITLE: Define aria-flowto Attribute\nDESCRIPTION: Defines the `aria-flowto` attribute, which identifies the next element (or elements) in an alternate reading order of content. This attribute is optional and inherits from `ViewportComponentAttributes.aria-flowto`. It can accept either null or a string value.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-flowto**: `null` \\| `string`\n```\n\n----------------------------------------\n\nTITLE: Define aria-dropeffect Attribute (Deprecated)\nDESCRIPTION: Defines the `aria-dropeffect` attribute, which indicates what functions can be performed when a dragged object is released on the drop target. This attribute is optional and deprecated in ARIA 1.1. It inherits from `ViewportComponentAttributes.aria-dropeffect` and can accept the values null, \"copy\", \"none\", \"link\", \"move\", \"execute\", or \"popup\".\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/svelte/interfaces/VListProps.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-dropeffect**: `null` \\| `\"copy\"` \\| `\"none\"` \\| `\"link\"` \\| `\"move\"` \\| `\"execute\"` \\| `\"popup\"`\n```\n\n----------------------------------------\n\nTITLE: Defining aria-grabbed in React\nDESCRIPTION: This code snippet defines the optional `aria-grabbed` attribute as a `Booleanish` type. It indicates an element's \"grabbed\" state in a drag-and-drop operation. It's deprecated in ARIA 1.1 and inherited from `ViewportComponentAttributes`.\nSOURCE: https://github.com/inokawa/virtua/blob/main/docs/react/interfaces/VGridProps.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **aria-grabbed**: `Booleanish`\n```"
  }
]