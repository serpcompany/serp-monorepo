[
  {
    "owner": "facebook",
    "repo": "react-native",
    "content": "TITLE: Using the start command in React Native CLI\nDESCRIPTION: Command for starting the React Native development server with available options including port configuration, host settings, cache management, and HTTPS capabilities.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/community-cli-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @react-native-community/cli start [options]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Synchronous Layout Test with React Native\nDESCRIPTION: A test case that verifies view layout dimensions using the synchronous test API. This example shows how to create a view with specific dimensions, measure it, and assert that its computed dimensions match the expected values.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst EXPECTED_WIDTH = 100;\nconst EXPECTED_HEIGHT = 200;\n\nfunction BasicLayoutTestCase({harness}) {\n  const viewRef = useRef(null);\n\n  const runTest = useCallback(() => {\n    const view = viewRef.current;\n    if (view != null) {\n      view.measureInWindow(({width, height}) => {\n        harness.test(({assert_equals}) => {\n          assert_equals(\n            width,\n            EXPECTED_WIDTH,\n            `view's computed width should be ${EXPECTED_WIDTH}`,\n          );\n          assert_equals(\n            height,\n            EXPECTED_HEIGHT,\n            `view's computed width should be ${EXPECTED_HEIGHT}`,\n          );\n        }, \"view's width and height are correct\");\n      });\n    }\n  }, [harness]);\n\n  return (\n    <>\n      <View\n        ref={viewRef}\n        style={{width: EXPECTED_WIDTH, height: EXPECTED_HEIGHT}}\n      />\n      <Button title=\"Start Test\" onPress={runTest} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring babel.config.js with React Native preset\nDESCRIPTION: Basic configuration for babel.config.js file that uses the React Native preset. This configuration tells Babel to use the @react-native/babel-preset module for transforming JavaScript code.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"module:@react-native/babel-preset\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic RNTester Platform Test Component\nDESCRIPTION: Example showing how to structure a basic test case with RNTesterPlatformTest component. This demonstrates how to set up a test with title, description, instructions, and a test component that receives the harness API.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ExampleTestCase ({ harness }) { /* ... */ }\n\n<RNTesterPlatformTest\n  title=\"Example Test\"\n  description=\"Imagine there's a detailed description of this example test here\"\n  instructions={[\n    \"This is the example test's first step\",\n    \"A second step\",\n    \"A third step\",\n  ]}\n  component={ExampleTestCase}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating React Component State Updates and Event Loop Processing in React Native\nDESCRIPTION: This code example demonstrates how the React Native event loop handles state updates across multiple components. It shows how a button press triggers state updates that are processed in microtasks, and how layout effects are executed synchronously within the same microtask, with all UI updates being flushed to the host platform only at the end of the event loop tick.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props) {\n  const [showContent, setShowContent] = useState(false);\n\n  return (\n    <>\n      <Header\n        onPressButton={event => {\n          // A task executes all the event handlers.\n          // The state update is processed in a microtask.\n          setShowContent(true);\n        }}\n      />\n      {showContent ? <Content /> : null}\n    </>\n  );\n}\n\nfunction Content(props) {\n  const [width, setWidth] = useState(0);\n\n  // Executed synchronously as part of the commit phase, in the microtask.\n  useLayoutEffect(() => {\n    // This state update is processed synchronously in the same microtask.\n    // UI updates are still not flushed to the host platform until the end\n    // of the event loop tick, so the user never saw this changed widths.\n    setWidth(ref.getBoundingClientRect().width);\n  }, []);\n\n  return (\n    <>\n      <SomeView ref={ref} />\n      <OtherComponent width={width} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React Native\nDESCRIPTION: ESLint configuration snippet showing how to add the React Native plugin to your project's ESLint configuration file (.eslintrc or package.json).\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"@react-native\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Feature Flags in JavaScript\nDESCRIPTION: Shows how to import and use both common and JS-only feature flags in JavaScript code by checking their boolean values.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';\n\nif (ReactNativeFeatureFlags.enableNativeBehavior()) {\n  // Native flag\n}\n\nif (ReactNativeFeatureFlags.enableJSBehavior()) {\n  // JS-only flag\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React Native\nDESCRIPTION: JSON configuration to extend the React Native ESLint rules in a project. This should be added to the .eslintrc file or the eslintConfig field in package.json to apply the standardized linting rules.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-config-react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"@react-native\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flags in JavaScript Configuration File\nDESCRIPTION: Example of how to define common and JS-only feature flags in the ReactNativeFeatureFlags.config.js file, which serves as the source of truth for feature flag definitions.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  common: {\n    enableNativeBehavior: {\n      description: 'Enable some behavior both in native and in JS.',\n      defaultValue: false,\n    },\n  },\n  jsOnly: {\n    enableJSBehavior: {\n      description: 'Enables some behavior in the JS layer.',\n      defaultValue: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a New Method to Native Module Interface in JavaScript\nDESCRIPTION: Example showing how adding a new method to a Native Module interface can cause compatibility issues with older native clients.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface Spec extends TurboModule {\n  log: (eventName: string, content: string) => void;\n  logError: (message: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a Fantom Test\nDESCRIPTION: This snippet shows the basic structure of a Fantom test, including importing the Fantom package, creating a root element, rendering components, and performing checks. It demonstrates the similarity to Jest unit tests.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Fantom from '@react-native/fantom';\n\ndescribe('My feature', () => {\n  it('should do something interesting', () => {\n    const root = Fantom.createRoot();\n\n    Fantom.runTask(() => {\n      root.render(/* ... */);\n    });\n\n    /* some checks */\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling a Newly Added Native Module Method in JavaScript\nDESCRIPTION: Example of calling a newly added method on a Native Module which would cause crashes on older native clients.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nNativeAnalytics.logError('Oh No! We hit a crash')\n```\n\n----------------------------------------\n\nTITLE: Implementing Dev Middleware in a Custom Server with Metro\nDESCRIPTION: This snippet demonstrates how to attach the middleware to a Metro dev server using the createDevMiddleware API. It shows the basic pattern for integrating the middleware with Metro's runServer function.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/dev-middleware/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDevMiddleware } from '@react-native/dev-middleware';\n\nfunction myDevServerImpl(args) {\n  ...\n\n  const {middleware, websocketEndpoints} = createDevMiddleware({\n    projectRoot: metroConfig.projectRoot,\n    serverBaseUrl: `http://${args.host}:${args.port}`,\n    logger,\n  });\n\n  await Metro.runServer(metroConfig, {\n    host: args.host,\n    ...,\n    unstable_extraMiddleware: [\n      middleware,\n      // Optionally extend with additional HTTP middleware\n    ],\n    websocketEndpoints: {\n      ...websocketEndpoints,\n      // Optionally extend with additional WebSocket endpoints\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Feature Flags in C++/Objective-C\nDESCRIPTION: Code snippet demonstrating how to access common feature flags in C++ or Objective-C code by including the appropriate header and checking flag values.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#include <react/featureflags/ReactNativeFeatureFlags.h>\n\nif (ReactNativeFeatureFlags::enableNativeBehavior()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up React Native Android CMake Project\nDESCRIPTION: Main CMake configuration that defines the project and includes the necessary React Native architecture components. This configures the native modules project and links it with React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\n# Define the library name here.\nproject(appmodules)\n\n# This file includes all the necessary to let you build your application with the New Architecture.\ninclude(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing React Native Components with Fantom\nDESCRIPTION: This snippet demonstrates how to create a root element, render a View component, and test its layout properties using Fantom. It showcases Fantom's ability to calculate and inspect layout without mocking.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = Fantom.createRoot({viewportWidth: 200, viewportHeight: 600});\nlet viewElement;\n\nFantom.runTask(() => {\n  root.render(\n    <View\n      ref={node => {\n        viewElement = node;\n      }}\n      style={{width: '50%', height: '10%'}}\n    />,\n  );\n});\n\n// Without Fantom, getBoundingClientRect would have to be mocked.\nconst boundingClientRect = viewElement.getBoundingClientRect();\nexpect(boundingClientRect.height).toBe(60);\nexpect(boundingClientRect.width).toBe(100);\n```\n\n----------------------------------------\n\nTITLE: Accessing Feature Flags in Kotlin\nDESCRIPTION: Example of how to access common feature flags in Kotlin code by importing the ReactNativeFeatureFlags class and checking flag values in a method.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.facebook.react.internal.featureflags.ReactNativeFeatureFlags\n\nfun someMethod() {\n  if (ReactNativeFeatureFlags.enableNativeBehavior()) {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling inlineRequires in Metro Configuration\nDESCRIPTION: Configuration for enabling inlineRequires by default in Metro for new React Native projects. This change provides performance benefits but results in a slightly different JavaScript execution order.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// In metro.config.js\ninlineRequires: true\n```\n\n----------------------------------------\n\nTITLE: Describing @react-native/typescript-config Package in Markdown\nDESCRIPTION: This Markdown snippet introduces the @react-native/typescript-config package, explaining its purpose of providing a default tsconfig.json for new React Native apps. It emphasizes that the configuration is version-specific and should be kept in sync with the app's React Native version.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/typescript-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-native/typescript-config\n\nThis package provides the default `tsconfig.json` used by newly built React Native apps.\n\nThis template is customized for specific versions of React Native, and should be updated in sync with the rest of your app.\n```\n\n----------------------------------------\n\nTITLE: Overriding Feature Flags in JavaScript\nDESCRIPTION: Example of how to override JS-only feature flags in JavaScript by calling the override method with an object containing flag override functions.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';\n\nReactNativeFeatureFlags.override({\n  enableJSBehavior: () => true,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for iOS\nDESCRIPTION: Commands to install Bundler and CocoaPods dependencies for running RNTester on iOS.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngem install bundler\nbundle install && bundle exec pod install\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing React Native Repository\nDESCRIPTION: Commands to clone the React Native repository and install dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/facebook/react-native.git\ncd react-native\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Implementing a Schema Compatibility Check Script\nDESCRIPTION: Example script showing how to use the compareSchemas function to check compatibility between current and previous schema versions and handle different compatibility outcomes.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {compareSchemas} from '@react-native/compatibility-check';\nconst util = require('util');\n\nasync function run(argv: Argv, STDERR: string) {\n  const debug = (log: mixed) => {\n    argv.debug &&\n      console.info(util.inspect(log, {showHidden: false, depth: null}));\n  };\n\n  const currentSchema =\n    JSON.parse(/*you'll read the file generated by codegen wherever it is in your app*/);\n  const previousSchema =\n    JSON.parse(/*you'll read the schema file that you persisted from when your native app was built*/);\n\n  const safetyResult = compareSchemas(currentSchema, previousSchema);\n\n  const summary = safetyResult.getSummary();\n  switch (summary.status) {\n    case 'ok':\n      debug('No changes in boundary');\n      console.log(JSON.stringify(summary));\n      break;\n    case 'patchable':\n      debug('Changes in boundary, but are compatible');\n      debug(result.getDebugInfo());\n      console.log(JSON.stringify(summary));\n      break;\n    default:\n      debug(result.getDebugInfo());\n      console.error(JSON.stringify(result.getErrors()));\n      throw new Error(`Incompatible changes in boundary`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Using Optional Native Module Methods in JavaScript\nDESCRIPTION: Example showing how to safely use an optional method by checking for its existence before calling it.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (NativeAnalytics.logError) {\n  NativeAnalytics.logError('Oh No! We hit a crash');\n}\n```\n\n----------------------------------------\n\nTITLE: Making Method Additions Compatible with Optional Properties\nDESCRIPTION: Example showing how to safely add a new method to a Native Module interface by making it optional.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface Spec extends TurboModule {\n  log: (eventName: string, content: string) => void;\n  logError?: (message: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Clean Command with React Native Core CLI Utils in JavaScript\nDESCRIPTION: This snippet demonstrates how to use @react-native/core-cli-utils to create an Android clean command in a custom framework CLI. It sets up a Commander command, uses the clean.android utility, and executes cleaning tasks with logging.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/core-cli-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command } from 'commander';\nimport cli from '@react-native/core-cli-utils';\nimport debug from 'debug';\n\nconst android = new Command('android');\n\nconst frameworkFindsAndroidSrcDir = \"...\";\nconst tasks = cli.clean.android(frameworkFindsAndroidSrcDir);\nconst log = debug('fancy-framework:android');\n\nandroid\n    .command('clean')\n    .description(cli.clean.android)\n    .action(async () => {\n        const log = debug('fancy-framework:android:clean');\n        log(`🧹 let me clean your Android caches`);\n        // Add other caches your framework needs besides the normal React Native caches\n        // here.\n        for (const task of tasks) {\n            try {\n                log(`\\t ${task.label}`);\n                // See: https://github.com/sindresorhus/execa#lines\n                const {stdout} = await task.action({ lines: true })\n                log(stdout.join('\\n\\tGradle: '));\n            } catch (e) {\n                log(`\\t ⚠️ whoops: ${e.message}`);\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Using the bundle command in React Native CLI\nDESCRIPTION: Command for building a JavaScript bundle from an entry file with options for platform targeting, minification, sourcemap generation, and asset management.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/community-cli-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @react-native-community/cli bundle --entry-file <path> [options]\n```\n\n----------------------------------------\n\nTITLE: Overriding Feature Flags in C++/Objective-C\nDESCRIPTION: Demonstrates how to create a custom class that extends the default feature flags implementation in C++/Objective-C to override specific flag values.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n#include <react/featureflags/ReactNativeFeatureFlags.h>\n#include <react/featureflags/ReactNativeFeatureFlagsDefaults.h>\n\nclass CustomReactNativeFeatureFlags : public ReactNativeFeatureFlagsDefaults {\n public:\n  CustomReactNativeFeatureFlags();\n\n  bool enableNativeBehavior() override {\n    return true;\n  }\n}\n\nReactNativeFeatureFlags::override(std::make_unique<CustomReactNativeFeatureFlags>());\n```\n\n----------------------------------------\n\nTITLE: Testing ScrollView Scrolling with Fantom\nDESCRIPTION: This code snippet demonstrates how to test ScrollView scrolling logic using Fantom's scrollTo method, which triggers an onScroll event and updates the shadow tree.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFantom.scrollTo(scrollViewElement, {\n  x: 0,\n  y: 1,\n});\n\nexpect(scrollViewElement.scrollTop).toBe(1);\n```\n\n----------------------------------------\n\nTITLE: Modifying a Union Type Parameter in a Native Module Interface\nDESCRIPTION: Example showing a modification to a union type parameter in a TurboModule interface which can cause compatibility issues.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface Spec extends TurboModule {\n  // You add 'system' to this union\n  +setColorScheme: (color: 'light' | 'dark') => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Conscrypt Dependency in build.gradle\nDESCRIPTION: Code snippet showing how to add Conscrypt TLS 1.3 support to Android applications by including the dependency in the build.gradle file. This enables TLS 1.3 support for all Android versions.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation('org.conscrypt:conscrypt-android:2.0.0')\n```\n\n----------------------------------------\n\nTITLE: Running RNTester on Android\nDESCRIPTION: Command to build and run RNTester on Android from the root of the repository.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags with CLI\nDESCRIPTION: Shell command to print a list of all available feature flags with their configurations using the feature flags CLI tool.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyarn featureflags --print\n```\n\n----------------------------------------\n\nTITLE: Configuring Fantom Tests with Pragmas\nDESCRIPTION: This snippet shows how to configure Fantom tests using pragmas in the docblock, including setting feature flags and defining the compilation mode for the bundle.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @fantom_flags jsOnlyTestFlag:true\n * @fantom_mode opt\n */\n```\n\n----------------------------------------\n\nTITLE: Running Fantom Tests from Command Line\nDESCRIPTION: These shell commands demonstrate how to run Fantom tests from the command line, including options for running specific test patterns and using watch mode.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn fantom [optional test pattern]\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn fantom --watch [optional test pattern]\n```\n\n----------------------------------------\n\nTITLE: Configuring Android API 28 Security for Metro Access\nDESCRIPTION: This code adds a security configuration for metro access when using Android API 28, fixing related issues.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix issue with use of Android API 28 by adding security config for metro access\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Analytics Native Module Interface in JavaScript\nDESCRIPTION: Example of a simple TurboModule interface definition for an Analytics module with a basic log method.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface Spec extends TurboModule {\n  log: (eventName: string, content: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up RNTester iOS Build Files\nDESCRIPTION: Commands to clean up generated files and folders for a clean installation of RNTester on iOS.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/rn-tester\nyarn clean-ios\n```\n\n----------------------------------------\n\nTITLE: New API Feature - Appearance Module Integration\nDESCRIPTION: Addition of the Appearance module that allows detecting user's theme preference (dark/light mode) and related useColorScheme hook for theme-aware components.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Appearance, useColorScheme } from 'react-native';\n\n// Using the hook\nconst colorScheme = useColorScheme();\n\n// Using Appearance API\nconst currentTheme = Appearance.getColorScheme();\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Configuration for Android\nDESCRIPTION: This code update addresses warnings related to updating to gradle 4.10.1 or higher in the Android build process.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix warnings related to updating to gradle 4.10.1 or higher\n```\n\n----------------------------------------\n\nTITLE: Setting Metro Bundler Host using Android System Properties\nDESCRIPTION: Shows how to set the Metro bundler server host using Android System Properties for easier debugging across multiple apps or app installs.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nadb shell setprop metro.host\n```\n\n----------------------------------------\n\nTITLE: React Native Animation Validation Fix\nDESCRIPTION: Fix for validation of event mappings in AnimatedEvent and support for AnimationInterpolation as possible type for toValue in animations.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Running Tests for @react-native/codegen\nDESCRIPTION: Commands to run the test suite for the @react-native/codegen package. These commands should be executed from the React Native root folder, starting with installing dependencies and then running Jest.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-codegen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest packages/react-native-codegen\n```\n\n----------------------------------------\n\nTITLE: Setting Autocomplete Attribute Example\nDESCRIPTION: Example showing how to properly set the autocomplete attribute on a form field in React Native to enable browser autofill functionality. The autocomplete attribute helps browsers correctly identify form fields for autofilling user data.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormInputAssignedAutocompleteValueToIdOrNameAttributeError.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextInput\n  id=\"email\"\n  name=\"email\"\n  autocomplete=\"email\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Enum Values for Backward Compatibility\nDESCRIPTION: Example showing how to maintain backward compatibility when changing enum values by supporting both old and new values.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nenum TestEnum {\n  LIGHT = 1,\n  DARK = 2,\n  SYSTEM = 3,\n  SYSTEM_ALSO = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/assets-registry Package\nDESCRIPTION: Command to install the @react-native/assets-registry package as a development dependency using yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/assets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @react-native/assets-registry\n```\n\n----------------------------------------\n\nTITLE: Updating Proguard Config for Android\nDESCRIPTION: Adds a new ProGuard rule to keep JNI classes when using Hermes 0.4.0.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_11\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keep class com.facebook.jni.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Adding a New Method for Union Type Modifications\nDESCRIPTION: Example showing how to safely add support for new union values by creating a new optional method rather than modifying the existing one.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface Spec extends TurboModule {\n  +setColorScheme: (color: 'light' | 'dark') => void\n  +setColorSchemeWithSystem?: (color: 'light' | 'dark' | 'system') => void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Type for Native Module Interface\nDESCRIPTION: Example of defining an enum type used in a TurboModule interface for color scheme values returned from native.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nenum TestEnum {\n  LIGHT = 1,\n  DARK = 2,\n  SYSTEM = 3,\n}\n\nexport interface Spec extends TurboModule {\n  getColorScheme: () => TestEnum;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for React Native Library in CMake\nDESCRIPTION: Sets up include directories for the reactnative library by reusing the interface include directories from all component libraries. This ensures proper header resolution during compilation.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(reactnative\n        PUBLIC\n        $<TARGET_PROPERTY:bridgeless,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:bridgelessnativeviewconfig,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:callinvokerholder,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:fabricjni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:glog_init,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jserrorhandler,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jsinspector,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jsinspector_cdp,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jsinspector_network,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jsinspector_tracing,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jsireact,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:mapbufferjni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_bridging,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_codegen_rncore,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_cxxreact,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_debug,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_devsupportjni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_featureflags,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_featureflagsjni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_nativemodule_core,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_nativemodule_defaults,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_nativemodule_dom,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_nativemodule_featureflags,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_nativemodule_idlecallbacks,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_nativemodule_microtasks,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_newarchdefaults,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_performance_timeline,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_animations,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_attributedstring,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_consistency,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_core,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_css,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_debug,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_dom,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_element,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_graphics,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_imagemanager,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_leakchecker,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_mapbuffer,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_mounting,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_observers_events,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_runtimescheduler,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_scheduler,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_telemetry,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_textlayoutmanager,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_uimanager,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_renderer_uimanager_consistency,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:react_utils,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:reactnativeblob,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:reactnativejni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:reactnativejni_common,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:reactperflogger,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rninstance,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_image,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_legacyviewmanagerinterop,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_modal,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_native,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_progressbar,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_root,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_safeareaview,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_scrollview,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_switch,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_text,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_textinput,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:rrc_view,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:runtimeexecutor,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:turbomodulejsijni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:uimanagerjni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:yoga,INTERFACE_INCLUDE_DIRECTORIES>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing React Native ESLint Plugin with Yarn\nDESCRIPTION: Command to install the ESLint plugin and its dependencies using Yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev eslint @react-native/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/eslint-plugin-specs with Yarn\nDESCRIPTION: Command to install the @react-native/eslint-plugin-specs package as a development dependency using Yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-specs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @react-native/eslint-plugin-specs\n```\n\n----------------------------------------\n\nTITLE: Installing JSC for Android RNTester\nDESCRIPTION: Commands to install and start RNTester with JSC instead of Hermes on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/rn-tester\nyarn install-android-jsc\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for React Native Library in CMake\nDESCRIPTION: Applies React Native specific compiler options to the reactnative target with private visibility.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_reactnative_options(reactnative PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for @react-native/js-polyfills\nDESCRIPTION: Commands to run tests for the @react-native/js-polyfills package. These commands should be executed from the React Native root folder. The first command installs dependencies, and the second runs the tests using Jest.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/polyfills/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest packages/polyfills\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Native 0.57\nDESCRIPTION: JSON configuration required for updating the Babel preset in React Native 0.57, which now uses metro-react-native-babel-preset instead of babel-preset-react-native.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n  {\n    \"presets\": [\"module:metro-react-native-babel-preset\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/babel-preset with npm\nDESCRIPTION: Command to install @react-native/babel-preset as a development dependency using npm package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @react-native/babel-preset --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using testOnly_pressed prop in TouchableHighlight for testing\nDESCRIPTION: The testOnly_pressed prop can be set on TouchableHighlight components to simulate the pressed state in snapshot tests.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n<TouchableHighlight\n  testOnly_pressed={true}\n>\n  <Text>Press me</Text>\n</TouchableHighlight>\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Dependencies for iOS\nDESCRIPTION: Commands to install and configure third-party dependencies for iOS to fix build issues with Xcode 10.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncd node_modules/react-native\nscripts/ios-install-third-party.sh\ncd third-party/glog-0.3.5/\n../../scripts/ios-configure-glog.sh\n```\n\n----------------------------------------\n\nTITLE: Running Danger for Pull Request Analysis in React Native\nDESCRIPTION: This command demonstrates how to run Danger to analyze a GitHub pull request for the React Native project. It requires a GitHub Public Access Token and the PR URL.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-bots/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/react-native-bots && yarn\nDANGER_GITHUB_API_TOKEN=ghp_<REDACTED> yarn danger pr https://github.com/facebook/react-native/pull/1234\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Pointer Event Test with React Native\nDESCRIPTION: Demonstrates how to use the useAsyncTest hook to verify pointer events. This example creates a test that waits for a pointermove event and automatically completes when the event is triggered.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction BasicPointerMoveTestCase({harness}) {\n  const testPointerMove = harness.useAsyncTest('pointermove event received');\n\n  return (\n    <View\n      style={{width: 100, height: 100, backgroundColor: 'black'}}\n      onPointerMove={() => testPointerMove.done()}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/eslint-config with Yarn\nDESCRIPTION: Command to install the ESLint configuration package along with its peer dependencies using Yarn. This installs eslint, prettier, and the React Native ESLint config package as development dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-config-react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev eslint prettier @react-native/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Installing Metro Config Dependencies\nDESCRIPTION: Command to install Metro bundler configuration and related dependencies using yarn package manager. Installs js-polyfills, metro-config, metro-babel-transformer, metro-runtime, and metro-config packages.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/metro-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @react-native/js-polyfills metro-config @react-native/metro-babel-transformer metro-runtime @react-native/metro-config\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration Update\nDESCRIPTION: Changes to Metro bundler configuration in react-native CLI, affecting how the Metro bundler is configured and initialized.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// metro.config.js settings are now preserved\n// CLI doesn't override existing metro.config.js configurations\n```\n\n----------------------------------------\n\nTITLE: Ignoring YellowBox Warnings in React Native\nDESCRIPTION: Shows the new recommended way to ignore YellowBox warnings in React Native, replacing the deprecated console.ignoredYellowBox approach. This pattern helps suppress specific warning messages that you've acknowledged.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nYellowBox.ignoreWarnings([...])\n```\n\n----------------------------------------\n\nTITLE: Warning Message for Bridgeless Mode in React Native iOS\nDESCRIPTION: A markdown warning message indicating that the Bridgeless Mode library for iOS in React Native is not production-ready and subject to breaking changes. It advises users about the risks of using these APIs.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Bridgeless Mode for iOS\n\nThis library is not ready for integration for production nor local experimentation. Expect breaking changes regularly if you use any of these APIs. Use at your own risk!\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Normalize Colors Package\nDESCRIPTION: Command to install the @react-native/normalize-colors package as a development dependency using yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/normalize-color/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @react-native/normalize-colors\n```\n\n----------------------------------------\n\nTITLE: Modifying Fabric Flag in RNTester's Podfile\nDESCRIPTION: Ruby code snippet to disable Fabric in RNTester's Podfile for testing non-fabric components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nfabric_enabled = false\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/codegen with Yarn\nDESCRIPTION: Command to install the @react-native/codegen package as a development dependency using Yarn. This package is used for code generation in React Native projects.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-codegen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @react-native/codegen\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake build configuration for React Native Android\nDESCRIPTION: Core CMake configuration that sets up the project, enables LTO support if available, and configures ccache. Defines basic project parameters and build options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nproject(ReactAndroid)\n\ninclude(CheckIPOSupported)\ncheck_ipo_supported(RESULT IPO_SUPPORT)\nif (IPO_SUPPORT)\n  message(STATUS \"LTO support is enabled\")\n  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\nendif()\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies for React Native 0.68.1\nDESCRIPTION: Example package.json dependencies section showing the aligned versions of React and React Native for version 0.68.1. This represents one of the two synchronization points between the frameworks.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Renderer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"react\": \"17.0.2\",\n    \"react-native\": \"0.68.1\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional Chaining Operator in React Native\nDESCRIPTION: This commit enables the optional chaining operator (?.) plugins in React Native, allowing for safer property access and method calls.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Enable ?.  optional chaining operator plugins\n// Commit: aa6f394c4236e5a4998c3be8ed61ec1bab950775\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Method Signature in React Native\nDESCRIPTION: This code snippet shows an update to an iOS method signature for bundle URL retrieval in React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\nupdated `jsBundleURLForBundleRoot:fallbackResource` to `jsBundleURLForBundleRoot:`\n```\n\n----------------------------------------\n\nTITLE: Testing React Native Gradle Plugin\nDESCRIPTION: Commands to run tests for the gradle plugin. Requires executing from the React Native root folder, first installing dependencies and then running the Gradle test task.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/gradle-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew -p packages/gradle-plugin test\n```\n\n----------------------------------------\n\nTITLE: Including React Native Gradle Plugin in Gradle Build Script\nDESCRIPTION: Example of how to include the React Native Gradle Plugin in a project's build.gradle file by adding it as a classpath dependency in the buildscript block.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/gradle-plugin/react-native-gradle-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n    // ...\n    dependencies {\n        classpath(\"com.facebook.react:react-native-gradle-plugin\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/babel-plugin-codegen with yarn\nDESCRIPTION: Command to install the babel plugin and its dependencies using yarn. This installs both @babel/core and the @react-native/babel-plugin-codegen as development dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/babel-plugin-codegen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/core @react-native/babel-plugin-codegen\n```\n\n----------------------------------------\n\nTITLE: Enhanced Platform Selection API\nDESCRIPTION: Extension of Platform.select to support 'native' as an option for platform-specific code implementation.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPlatform.select({\n  native: () => require('NativeComponent'),\n  default: () => require('WebComponent')\n});\n```\n\n----------------------------------------\n\nTITLE: Android Border Radius Fix\nDESCRIPTION: Patch to correctly implement border radius styling on Android components.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// b432b8f13b - Correctly set the border radius on android\n```\n\n----------------------------------------\n\nTITLE: Fixing URLSearchParams Encoding in JavaScript\nDESCRIPTION: Encodes URL parameters in URLSearchParams.toString() method for security purposes.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nEncode URL params in URLSearchParams.toString()\n```\n\n----------------------------------------\n\nTITLE: Overriding Feature Flags in Kotlin\nDESCRIPTION: Shows how to override feature flag values in Kotlin by creating an anonymous object that extends the defaults class and overrides specific methods.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.facebook.react.internal.featureflags.ReactNativeFeatureFlags\nimport com.facebook.react.internal.featureflags.ReactNativeFeatureFlagsDefaults\n\nfun overrideFeatureFlags() {\n  ReactNativeFeatureFlags.override(object : ReactNativeFeatureFlagsDefaults() {\n    override fun useMicrotasks(): Boolean = true\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling animated tracking with native driver in React Native\nDESCRIPTION: Use the useNativeDriver flag to enable animated tracking with the native driver for smoother animations that track other Animated.Values.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimated.timing(animatedValue, {\n  toValue: otherAnimatedValue,\n  duration: 1000,\n  useNativeDriver: true\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Associating Labels with Form Fields in HTML\nDESCRIPTION: Two recommended approaches for associating labels with form fields for accessibility: either nesting the input element inside the label element, or using matching 'for' and 'id' attributes to create the association.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormLabelHasNeitherForNorNestedInput.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# No label associated with a form field\n\nA `<label>` isn't associated with a form field.\n\nTo fix this issue, nest the `<input>` in the `<label>` or provide a `for` attribute on the `<label>` that matches a form field `id`.\n```\n\n----------------------------------------\n\nTITLE: Executing Publish Updated Packages Script in Node.js\nDESCRIPTION: This command publishes all updated packages (excluding react-native) to npm. It is triggered when a commit on a release branch contains the specific comment #publish-packages-to-npm.\nSOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases-ci/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `publish-updated-packages`\n\nPublishes all updated packages (excluding `react-native`) to npm. Triggered when a commit on a release branch contains `#publish-packages-to-npm`.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native View Component\nDESCRIPTION: This CMake script configures the build for the React Native view component. It sets minimum required CMake version, enables verbose makefiles, includes React Native flags, collects source files, and defines an object library with its include paths and dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/view/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_view_SRC CONFIGURE_DEPENDS\n        *.cpp\n        platform/android/react/renderer/components/view/*.cpp)\n\nadd_library(rrc_view OBJECT ${rrc_view_SRC})\n\ntarget_include_directories(rrc_view\n        PUBLIC\n          ${REACT_COMMON_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/\n)\n\ntarget_link_libraries(rrc_view\n        folly_runtime\n        glog\n        glog_init\n        jsi\n        logger\n        react_debug\n        react_renderer_core\n        react_renderer_css\n        react_renderer_debug\n        react_renderer_graphics\n        yoga)\ntarget_compile_reactnative_options(rrc_view PRIVATE \"Fabric\")\ntarget_compile_options(rrc_view PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Error Message for Incompatible Enum Value Modification\nDESCRIPTION: Detailed error message from the compatibility-check tool when detecting an incompatible change to an enum value.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nColorManager: Object contained a property with a type mismatch\n   -- getColorScheme: has conflicting type changes\n       --new: ()=>Enum<number>\n       --old: ()=>Enum<number>\n       Function return types do not match\n           --new: ()=>Enum<number>\n           --old: ()=>Enum<number>\n           Enum types do not match\n               --new: Enum<number> {LIGHT = 1, DARK = 2, SYSTEM = -1}\n               --old: Enum<number> {LIGHT = 1, DARK = 2, SYSTEM = 3}\n               Enum contained a member with a type mismatch\n                   -- Member SYSTEM: has conflicting changes\n                       --new: -1\n                       --old: 3\n                       Numeric literals are not equal\n                           --new: -1\n                           --old: 3\n```\n\n----------------------------------------\n\nTITLE: iOS App Extension Shared Application Access\nDESCRIPTION: Fix to prevent calling sharedApplication in iOS App Extensions, which is not allowed by Apple.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_17\n\nLANGUAGE: objective-c\nCODE:\n```\n// c5ea18f738 - Don't call sharedApplication in App Extension\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Dependencies in React Native Android\nDESCRIPTION: This snippet shows updates to Gradle, Kotlin, and SDK versions for the Android build of React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nBump Kotlin version to 1.6.10\nBump Soloader to 0.10.3\nBump Gradle to 7.3\nBump Android compile and target SDK to 31\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Image resizeMode=repeat on Android in React Native\nDESCRIPTION: This Android-specific addition implements support for the 'repeat' resize mode for images, allowing for tiled image backgrounds.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_38\n\nLANGUAGE: Java\nCODE:\n```\n// Support Image resizeMode=repeat\n// Commit: 0459e4ffaadb161598ce1a5b14c08d49a9257c9c\n```\n\n----------------------------------------\n\nTITLE: Implementing Image.defaultSource on Android in React Native\nDESCRIPTION: This Android-specific addition implements the Image.defaultSource feature, allowing for a default image to be displayed while the main image is loading.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\n// Implement Image.defaultSource\n// Commit: b0fa3228a77d89d6736da6fcae5dd32f74f3052c\n```\n\n----------------------------------------\n\nTITLE: Using the new UTFSequence module in React Native\nDESCRIPTION: The UTFSequence module provides common Unicode sequences like Emoji. It can be imported and used to insert Unicode characters.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { UTFSequence } from 'react-native';\n\nconsole.log(UTFSequence.HOURGLASS);\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler-Specific Flags\nDESCRIPTION: Sets compiler-specific flags for different compilers (Clang, GNU, MSVC) to handle warnings and error handling appropriately.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(jsi_compile_flags \"\")\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\" OR\n    \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"GNU\")\n  list(APPEND jsi_compile_flags \"-Wno-non-virtual-dtor\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"MSVC\")\n  # Turn on Error Handling in MSVC, otherwise objects are not destructed\n  # when they go out of scope due to exceptions.\n  list(APPEND jsi_compile_flags \"/EHsc\")\nendif()\ntarget_compile_options(jsi PRIVATE ${jsi_compile_flags})\n```\n\n----------------------------------------\n\nTITLE: Error Message for Incompatible Union Type Modification\nDESCRIPTION: Example error message from the compatibility-check tool when detecting an incompatible addition to a union type parameter.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nColorManager.setColorScheme parameter 0: Union added items, but native will not expect/support them\n  -- position 3 system\n```\n\n----------------------------------------\n\nTITLE: Fixing Exception During TextView Fading on Android\nDESCRIPTION: This code resolves an exception that was occurring while fading a TextView component on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix exception occurring while fading a TextView\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/babel-preset with yarn\nDESCRIPTION: Command to install @react-native/babel-preset as a development dependency using yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @react-native/babel-preset\n```\n\n----------------------------------------\n\nTITLE: Configuring Fantom Tester Executable\nDESCRIPTION: Defines the 'fantom_tester' executable, specifies its source files, links it with the Yoga library, and sets compiler options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SOURCES \"src/*.cpp\" \"src/*.h\")\nadd_executable(fantom_tester ${SOURCES})\n\ntarget_link_libraries(fantom_tester PUBLIC yogacore)\n\ntarget_compile_options(fantom_tester\n  PRIVATE\n    -Wall\n    -Werror\n    -fexceptions\n    -frtti\n    -std=c++20)\n```\n\n----------------------------------------\n\nTITLE: Adding accessibilityTraits Prop Type to Text Component in React Native\nDESCRIPTION: This commit adds the accessibilityTraits prop type to the Text component, improving accessibility support in React Native applications.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add prop type accessibilityTraits to Text\n// Commit: 654435d1ed9e584e65fff601e1fa50591e042664\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Build Configuration in React Native\nDESCRIPTION: This snippet demonstrates changes to the Android build configuration, including NDK setup and Gradle plugin modifications.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\nUse side-by-side NDK for Android\nLeverage Gradle implicit dependency substitution for Gradle Plugin\n```\n\n----------------------------------------\n\nTITLE: Generate Source Maps in Android for Hermes\nDESCRIPTION: Fix for generating correct source maps on Android when Hermes is not enabled and adjusting source map generation location outside of assets directory.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// b1f81be4bc - Generate correct source map if hermes not enabled\n// 60e75dc1ab - Generate source maps outside of assets/\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in Markdown\nDESCRIPTION: Illustrates the hierarchical structure of documentation files and directories within the React Native project. This structure supports both exploratory and goal-based documentation use cases.\nSOURCE: https://github.com/facebook/react-native/blob/main/__docs__/GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `<root>/__docs__/README.md` (with links to subsystems 1, 2, etc.)\n  - `Subsystem 1/__docs__/README.md` (with links to root and subsystems 1.1,\n    1.2, etc.)\n    - `Subsystem 1.1/__docs__/README.md` (with links to subsystem 1 and\n      subsystems 1.1.1, 1.1.2, etc.)\n    - `Subsystem 1.2/__docs__/README.md`\n  - `Subsystem 2/__docs__/README.md`\n```\n\n----------------------------------------\n\nTITLE: Improving Switch Accessibility in React Native\nDESCRIPTION: Enhances the accessibility features of the Switch component for better user experience.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nSwitch: Improve Accessibility ([0c8db08f51](https://github.com/facebook/react-native/commit/0c8db08f519fdf5162dff1d9a18b58885c4c7d2f) by [@yungsters](https://github.com/yungsters))\n```\n\n----------------------------------------\n\nTITLE: Preserving Existing Global Performance Object\nDESCRIPTION: Fix to prevent overwriting the global.performance object if it has already been initialized, maintaining existing functionality.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\ndfebcb70a5c948db94d1cd580bbcaa0aaa702349\n```\n\n----------------------------------------\n\nTITLE: Handling NDK Version-Specific Unwinder Library\nDESCRIPTION: Determines the appropriate unwinder library based on NDK version to prevent undefined '_Unwind_Resume' symbol issues when handling C++ exceptions.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID_NDK_REVISION VERSION_LESS \"23.0.0\")\n  set(LIB_UNWIND gcc)\nelse()\n  set(LIB_UNWIND unwind)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Android Clean Command in Bash\nDESCRIPTION: This snippet shows how to execute the Android clean command implemented using @react-native/core-cli-utils in a custom framework CLI. It demonstrates the expected output format.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/core-cli-utils/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./fancy-framework android clean\n🧹 let me clean your Android caches\n    Gradle: // a bunch of gradle output\n    Gradle: ....\n```\n\n----------------------------------------\n\nTITLE: Adding Support for CRLF in build.gradle for react-native link on Android\nDESCRIPTION: This Android-specific addition adds support for build.gradle files with CRLF line endings when using the react-native link command.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_35\n\nLANGUAGE: Java\nCODE:\n```\n// Add support for build.gradle with CRLF for use with react-native link\n// Commit: 843cfc3b202433aad9a236b1b623da7c45e1ac15\n```\n\n----------------------------------------\n\nTITLE: Fixed Text View Nesting in React Native\nDESCRIPTION: Fix to support rendering Views with no fixed size when nested within Text components, addressing crashes with nested Text/View/Image components.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Fixing Inverted Horizontal ScrollView on Android\nDESCRIPTION: This code fixes an issue with inverted horizontal ScrollView components on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix Inverted Horizontal ScrollView\n```\n\n----------------------------------------\n\nTITLE: Updating Native Module with @ReactModule Annotation in Java\nDESCRIPTION: Example of how to update an Android Native Module to use the required @ReactModule annotation. This change is necessary to access the .getNativeModule method on the ReactContext.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// CustomModule.java\n\n// ...\n+  import com.facebook.react.module.annotations.ReactModule;\n\n+  @ReactModule(name=\"CustomBridge\")\npublic class CustomModule extends ReactContextBaseJavaModule {\n  // ...\n\n  @Override\n  public String getName() {\n      return \"CustomBridge\";\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TextInput Accessibility Enhancement\nDESCRIPTION: Addition of autoFocus property to TextInput component and improvements to selection handling.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<TextInput\n  autoFocus={true}\n  onSelectionChange={(event) => {\n    const {selection} = event.nativeEvent;\n    // Handle selection change\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Folly Runtime Library in CMake\nDESCRIPTION: Creates a static library target for Folly runtime and configures its compilation options, include directories, and dependency linkage. Enables exceptions, RTTI, and applies all the previously defined Folly flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(folly_runtime STATIC ${folly_runtime_SRC})\n\ntarget_compile_options(folly_runtime\n        PRIVATE\n        -fexceptions\n        -fno-omit-frame-pointer\n        -frtti\n        -Wno-sign-compare\n        ${folly_FLAGS})\n\ntarget_compile_options(folly_runtime PUBLIC ${folly_FLAGS})\n\ntarget_include_directories(folly_runtime PUBLIC .)\ntarget_link_libraries(folly_runtime glog double-conversion boost fmt fast_float)\n```\n\n----------------------------------------\n\nTITLE: Adding textTransform Style Support on iOS in React Native\nDESCRIPTION: This iOS-specific addition implements support for the textTransform style property, allowing for text case transformations in iOS applications.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_41\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Add textTransform style support\n// Commit: 8621d4b79731e13a0c6e397abd93c193c6219000\n```\n\n----------------------------------------\n\nTITLE: Removing prepareReact call from bridge in JavaScript\nDESCRIPTION: Removes the 'prepareReact' call from the bridge, likely as part of a refactoring or optimization.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n80f9e1f7de407ea417cecb04b3ba20b05696b478\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n56a42e57d05ff609e8fce35dcb5e9db7938db801\n```\n\n----------------------------------------\n\nTITLE: Updating setTimeout Usage for Text Component Focus in JavaScript\nDESCRIPTION: Demonstrates the breaking change where public methods of Text components are no longer bound to the instance. The code shows how to update setTimeout usage to properly focus a Text component.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old (no longer works):\nsetTimeout(this._txtRef.focus, 1000);\n\n// New (correct usage):\nsetTimeout(() => this._txtRef.focus(), 1000);\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Usage Documentation to RCTBridgeModule.h for iOS\nDESCRIPTION: This iOS-specific addition includes documentation for Swift usage in the RCTBridgeModule.h file, improving guidance for Swift developers using React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_42\n\nLANGUAGE: Swift\nCODE:\n```\n// Add docs for Swift usage to RCTBridgeModule.h\n// Commit: ca898f4367083e0943603521a41c48dec403e6c9\n```\n\n----------------------------------------\n\nTITLE: Running tests for @react-native/virtualized-lists\nDESCRIPTION: Commands to run tests for the virtualized-lists package from the React Native root folder, including installing dependencies first.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/virtualized-lists/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn jest packages/virtualized-lists\n```\n\n----------------------------------------\n\nTITLE: Adding displayName to ActivityIndicator in React Native\nDESCRIPTION: Adds a displayName property to the ActivityIndicator component to improve debugging and testing.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix: Add displayName to ActivityIndicator (#22417) ([53da585832](https://github.com/facebook/react-native/commit/53da5858326bbddd2df112f86b2c1e935adc3882))\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Shared Library with Component Objects in CMake\nDESCRIPTION: Creates a shared library named 'reactnative' that combines object files from various React Native components. This approach reduces the number of .so files that need to be shipped in the final library, as noted in the file's comment.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(reactnative\n        SHARED\n          $<TARGET_OBJECTS:bridgeless>\n          $<TARGET_OBJECTS:bridgelessnativeviewconfig>\n          $<TARGET_OBJECTS:callinvokerholder>\n          $<TARGET_OBJECTS:fabricjni>\n          $<TARGET_OBJECTS:glog_init>\n          $<TARGET_OBJECTS:jni_lib_merge_glue>\n          $<TARGET_OBJECTS:jserrorhandler>\n          $<TARGET_OBJECTS:jsinspector>\n          $<TARGET_OBJECTS:jsitooling>\n          $<TARGET_OBJECTS:jsinspector_cdp>\n          $<TARGET_OBJECTS:jsinspector_network>\n          $<TARGET_OBJECTS:jsinspector_tracing>\n          $<TARGET_OBJECTS:jsireact>\n          $<TARGET_OBJECTS:logger>\n          $<TARGET_OBJECTS:mapbufferjni>\n          $<TARGET_OBJECTS:oscompat>\n          $<TARGET_OBJECTS:react_bridging>\n          $<TARGET_OBJECTS:react_codegen_rncore>\n          $<TARGET_OBJECTS:react_cxxreact>\n          $<TARGET_OBJECTS:react_debug>\n          $<TARGET_OBJECTS:react_devsupportjni>\n          $<TARGET_OBJECTS:react_featureflags>\n          $<TARGET_OBJECTS:react_featureflagsjni>\n          $<TARGET_OBJECTS:react_nativemodule_core>\n          $<TARGET_OBJECTS:react_nativemodule_defaults>\n          $<TARGET_OBJECTS:react_nativemodule_dom>\n          $<TARGET_OBJECTS:react_nativemodule_featureflags>\n          $<TARGET_OBJECTS:react_nativemodule_idlecallbacks>\n          $<TARGET_OBJECTS:react_nativemodule_microtasks>\n          $<TARGET_OBJECTS:react_newarchdefaults>\n          $<TARGET_OBJECTS:react_performance_timeline>\n          $<TARGET_OBJECTS:react_renderer_animations>\n          $<TARGET_OBJECTS:react_renderer_attributedstring>\n          $<TARGET_OBJECTS:react_renderer_componentregistry>\n          $<TARGET_OBJECTS:react_renderer_consistency>\n          $<TARGET_OBJECTS:react_renderer_core>\n          $<TARGET_OBJECTS:react_renderer_debug>\n          $<TARGET_OBJECTS:react_renderer_dom>\n          $<TARGET_OBJECTS:react_renderer_element>\n          $<TARGET_OBJECTS:react_renderer_graphics>\n          $<TARGET_OBJECTS:react_renderer_imagemanager>\n          $<TARGET_OBJECTS:react_renderer_leakchecker>\n          $<TARGET_OBJECTS:react_renderer_mapbuffer>\n          $<TARGET_OBJECTS:react_renderer_mounting>\n          $<TARGET_OBJECTS:react_renderer_observers_events>\n          $<TARGET_OBJECTS:react_renderer_runtimescheduler>\n          $<TARGET_OBJECTS:react_renderer_scheduler>\n          $<TARGET_OBJECTS:react_renderer_telemetry>\n          $<TARGET_OBJECTS:react_renderer_textlayoutmanager>\n          $<TARGET_OBJECTS:react_renderer_uimanager>\n          $<TARGET_OBJECTS:react_renderer_uimanager_consistency>\n          $<TARGET_OBJECTS:react_utils>\n          $<TARGET_OBJECTS:reactnativeblob>\n          $<TARGET_OBJECTS:reactnativejni>\n          $<TARGET_OBJECTS:reactnativejni_common>\n          $<TARGET_OBJECTS:reactperflogger>\n          $<TARGET_OBJECTS:rninstance>\n          $<TARGET_OBJECTS:rrc_image>\n          $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>\n          $<TARGET_OBJECTS:rrc_modal>\n          $<TARGET_OBJECTS:rrc_native>\n          $<TARGET_OBJECTS:rrc_progressbar>\n          $<TARGET_OBJECTS:rrc_root>\n          $<TARGET_OBJECTS:rrc_safeareaview>\n          $<TARGET_OBJECTS:rrc_scrollview>\n          $<TARGET_OBJECTS:rrc_switch>\n          $<TARGET_OBJECTS:rrc_text>\n          $<TARGET_OBJECTS:rrc_textinput>\n          $<TARGET_OBJECTS:rrc_view>\n          $<TARGET_OBJECTS:runtimeexecutor>\n          $<TARGET_OBJECTS:turbomodulejsijni>\n          $<TARGET_OBJECTS:uimanagerjni>\n          $<TARGET_OBJECTS:yoga>\n)\n```\n\n----------------------------------------\n\nTITLE: Running Release Script Commands in Node.js\nDESCRIPTION: Demonstrates how to run the release script commands using Node.js. It shows the general syntax for executing these scripts and obtaining help information.\nSOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnode <command> --help\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Origin Resource Policy Headers for Same-Site Resources\nDESCRIPTION: HTTP header configuration for allowing same-site resources to be loaded. This header should be added to the resource's HTML response when the resource and your site are served from the same site.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameOrigin.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCross-Origin-Resource-Policy: same-site\n```\n\n----------------------------------------\n\nTITLE: Android TextInput Cursor API Update\nDESCRIPTION: Implementation of new setTextCursorDrawable API for Android 10 compatibility in TextInput components.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Preserving SystemUiVisibility Flags for StatusBar on Android\nDESCRIPTION: This fix prevents StatusBar from overwriting previously set SystemUiVisibility flags on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix StatusBar overwriting previously set `SystemUiVisibility` flags\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Core Renderer Library in CMake\nDESCRIPTION: This CMake script sets up the build process for the React Native Core Renderer library. It defines the minimum CMake version, enables verbose output, includes React Native flags, collects source files, and configures the library with necessary dependencies and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/core/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_core_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_core OBJECT ${react_renderer_core_SRC})\n\ntarget_include_directories(react_renderer_core PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(react_renderer_core\n        folly_runtime\n        glog\n        jsi\n        logger\n        react_debug\n        react_featureflags\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mapbuffer\n        react_renderer_runtimescheduler\n        react_utils\n        runtimeexecutor)\ntarget_compile_reactnative_options(react_renderer_core PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_core PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Running Code Analysis Bot for Pull Request Linting in React Native\nDESCRIPTION: This command shows how to run the Code Analysis Bot to perform linting on a GitHub pull request for the React Native project. It requires a GitHub token and the PR number.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-bots/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_TOKEN=[ENV_ABOVE] GITHUB_PR_NUMBER=1234 yarn lint-ci\n```\n\n----------------------------------------\n\nTITLE: Documenting User Authentication Rejection in React Native\nDESCRIPTION: A comment that documents the scenario when a user actively declines a sign-in attempt in a React Native application. This message is likely used as part of error handling or user flow documentation.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestApprovalDeclined.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# User declined the sign-in attempt.\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for React Native Unit Tests in CMake\nDESCRIPTION: Links the 'reactnative_unittest' target with all required libraries, including various React Native components, Facebook libraries like Folly and Yoga, Google libraries like glog, and testing frameworks like GTest.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(reactnative_unittest\n  fabricjni\n  folly_runtime\n  glog\n  glog_init\n  gtest_main\n  hermes-engine::libhermes\n  hermes_inspector_modern\n  jserrorhandler\n  jsi\n  mapbufferjni\n  react_codegen_rncore\n  react_cxxreact\n  react_debug\n  react_renderer_animations\n  react_renderer_attributedstring\n  react_renderer_core\n  react_renderer_css\n  react_renderer_debug\n  react_renderer_dom\n  react_renderer_element\n  react_renderer_graphics\n  react_renderer_mapbuffer\n  react_renderer_mounting\n  react_renderer_telemetry\n  react_renderer_textlayoutmanager\n  react_renderer_uimanager\n  react_renderer_uimanager_consistency\n  react_utils\n  reactnative\n  rrc_legacyviewmanagerinterop\n  rrc_modal\n  rrc_root\n  rrc_scrollview\n  rrc_text\n  rrc_textinput\n  rrc_view\n  yoga\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to React Native Shared Library in CMake\nDESCRIPTION: Links required external libraries to the reactnative shared library. These dependencies include Android system libraries, logging utilities, and core React Native dependencies like yoga and JSI.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(reactnative\n          PUBLIC\n            android\n            double-conversion\n            fbjni\n            folly_runtime\n            glog\n            jsi\n            log\n            yogacore\n)\n```\n\n----------------------------------------\n\nTITLE: Running tests for babel-plugin-codegen\nDESCRIPTION: Commands to run the tests for the babel-plugin-codegen package from the React Native root folder. First install dependencies with yarn, then run the tests using Jest.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/babel-plugin-codegen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest packages/babel-plugin-codegen\n```\n\n----------------------------------------\n\nTITLE: Configuring Yoga Core Library Sources\nDESCRIPTION: Gathers all C++ source files for the Yoga Core library and adds them to a static library target.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SOURCES CONFIGURE_DEPENDS\n    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/**/*.cpp)\n\nadd_library(yogacore STATIC ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Renderer Debug Library in CMake\nDESCRIPTION: This CMake script sets up the build configuration for the React Native renderer debug library. It defines minimum CMake version, enables verbose output, includes common flags, collects source files, and configures the library with appropriate dependencies and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/debug/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_debug_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_debug OBJECT ${react_renderer_debug_SRC})\n\ntarget_include_directories(react_renderer_debug PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(react_renderer_debug folly_runtime react_debug)\ntarget_compile_reactnative_options(react_renderer_debug PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_debug PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building fmt Library with CMake in React Native\nDESCRIPTION: Sets up the CMake build for the fmt static library by specifying minimum CMake version, enabling verbose output, including React Native flags, and configuring the build target with appropriate includes and compile options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/fmt/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(fmt STATIC src/format.cc)\n\ntarget_include_directories(fmt PUBLIC include)\ntarget_compile_reactnative_options(fmt PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Error Message for getUserInfo() Function Failure in React Native\nDESCRIPTION: An error message that indicates the getUserInfo() function failed to execute properly because the configuration and well-known files it depends on were invalid or improperly formatted.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthUserInfoRequestInvalidConfigOrWellKnown.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# getUserInfo() failed because the config and well-known files were invalid.\n```\n\n----------------------------------------\n\nTITLE: Enabling Interprocedural Optimization\nDESCRIPTION: Checks if interprocedural optimization is supported and enables it for the Yoga Core target if available.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_ipo_supported(RESULT result)\nif(result)\n  set_target_properties(yogacore PROPERTIES\n    CMAKE_INTERPROCEDURAL_OPTIMIZATION true)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing React Native Normalize Colors Package\nDESCRIPTION: Commands to run tests for the normalize-colors package from the React Native root folder. Includes dependency installation and jest test execution.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/normalize-color/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn jest packages/normalize-color\n```\n\n----------------------------------------\n\nTITLE: Adding space-evenly justifyContent Value in React Native\nDESCRIPTION: Foundational work for implementing a new 'space-evenly' value for the justifyContent property in React Native layouts.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\n1050e0b47611602b758f73d99f51a1dd5ceabade\n```\n\n----------------------------------------\n\nTITLE: Creating JSI Library Target\nDESCRIPTION: Creates the JSI library target and sets its include directories.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(jsi\n        jsi.cpp)\n\ntarget_include_directories(jsi PUBLIC ..)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Debug Library Build with CMake\nDESCRIPTION: Complete CMake configuration for building the react_debug library. It sets minimum CMake version, enables verbose output, includes react-native-flags, compiles all .cpp files in the directory, and configures necessary include directories, library dependencies, and compiler options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/debug/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_debug_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_debug OBJECT ${react_debug_SRC})\n\ntarget_include_directories(react_debug PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_debug log folly_runtime)\n\ntarget_compile_reactnative_options(react_debug PRIVATE \"Fabric\")\ntarget_compile_options(react_debug PRIVATE -Wpedantic)\nif(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)\n        target_compile_options(react_debug PUBLIC -DNDEBUG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building JSI Tooling Library in CMake for React Native\nDESCRIPTION: This CMake script configures and builds the JSI tooling library for React Native. It collects source files from the react/runtime directory, sets up include paths, and links against dependencies like react_cxxreact, folly_runtime, glog, and jsi. The script also applies React Native-specific compilation options and enforces pedantic warnings.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsitooling/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\nfile(GLOB jsitooling_SRC CONFIGURE_DEPENDS react/runtime/*.cpp)\nadd_library(jsitooling OBJECT ${jsitooling_SRC})\n\ntarget_include_directories(jsitooling\n    PUBLIC\n    ${REACT_COMMON_DIR}\n    ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\ntarget_link_libraries(jsitooling\n        react_cxxreact\n        folly_runtime\n        glog\n        jsi)\n\ntarget_compile_reactnative_options(jsitooling PRIVATE \"ReactNative\")\ntarget_compile_options(jsitooling PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking with React Native Codegen\nDESCRIPTION: Adds conditional linking with the React Native code generation system, ensuring the build works during Gradle sync in Android Studio when the codegen target might not exist yet.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# For Gradle Syncs (i.e. when you first open the project in Android Studio),\n# the react_codegen_AppSpecs target is not existing yet as it's generated by\n# Codegen. Therefore skip the linking with that library if it's missing in the\n# CMake dependency Graph. It will be included anyway in the final build.\nif (TARGET react_codegen_AppSpecs)\n    target_include_directories(react_codegen_AppSpecs PUBLIC .)\n    target_link_libraries(nativecxxmoduleexample react_codegen_AppSpecs)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking Android-specific Dependencies\nDESCRIPTION: Conditionally links the Android log library when building for Android platforms.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (ANDROID)\n    target_link_libraries(yogacore log)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermes Executor Build in CMake for React Native\nDESCRIPTION: This CMake script defines the build configuration for the Hermes JavaScript engine executor in React Native. It collects source files, sets up include directories, defines library dependencies including the Hermes engine, and configures compilation options with special handling for debug builds enabling the debugger.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/hermes/reactexecutor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nfile(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(hermes_executor\n        OBJECT\n        ${hermes_executor_SRC}\n)\ntarget_merge_so(hermes_executor)\ntarget_include_directories(hermes_executor PRIVATE .)\ntarget_link_libraries(\n        hermes_executor\n        hermes_executor_common\n        hermes-engine::libhermes\n        jsi\n        reactnative\n)\ntarget_compile_reactnative_options(hermes_executor PRIVATE)\ntarget_compile_options(hermes_executor PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)\n```\n\n----------------------------------------\n\nTITLE: Running tests for eslint-plugin-specs package\nDESCRIPTION: Commands to run the test suite for the eslint-plugin-specs package from the React Native root folder. Includes installing dependencies and executing the Jest test runner.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-specs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn jest packages/eslint-plugin-specs\n```\n\n----------------------------------------\n\nTITLE: Linking Required Dependencies for Native C++ Module\nDESCRIPTION: Links the native C++ module library with necessary React Native dependencies including fbjni, jsi, and reactnative libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(nativecxxmoduleexample\n        fbjni\n        jsi\n        reactnative\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Yoga Library to the Project\nDESCRIPTION: Includes the Yoga library as a subdirectory in the project using the custom function.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Common targets\nadd_react_common_subdir(yoga)\n```\n\n----------------------------------------\n\nTITLE: Configuring CallInvokerHolder Library Build in CMake\nDESCRIPTION: Defines the build configuration for the callinvokerholder library which handles native method call invocation. Includes source files, include directories, and links required dependencies like fbjni and runtimeexecutor.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/turbomodule/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        callinvokerholder\n        OBJECT\n        ReactCommon/CallInvokerHolder.cpp\n        ReactCommon/NativeMethodCallInvokerHolder.cpp\n)\n\ntarget_include_directories(callinvokerholder\n        PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n        )\n\ntarget_link_libraries(callinvokerholder\n        fbjni\n        runtimeexecutor\n        callinvoker\n        reactperfloggerjni)\ntarget_compile_reactnative_options(callinvokerholder PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Animations Renderer Build\nDESCRIPTION: Configures and builds a static library for React Native's animations renderer component. Sets up compiler flags, includes necessary directories, and links required dependencies like Folly, JSI, Yoga, and other React Native renderer components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/animations/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_animations_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_animations STATIC ${react_renderer_animations_SRC})\n\ntarget_include_directories(react_renderer_animations PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_animations\n        folly_runtime\n        glog\n        glog_init\n        jsi\n        react_debug\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mounting\n        react_renderer_uimanager\n        rrc_view\n        runtimeexecutor\n        yoga\n)\ntarget_compile_reactnative_options(react_renderer_animations PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_animations PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Creating Native C++ Module Library\nDESCRIPTION: Finds all C++ source files in the directory and creates a static library named 'nativecxxmoduleexample' from them.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB nativecxxmoduleexample_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(nativecxxmoduleexample STATIC ${nativecxxmoduleexample_SRC})\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Compilation Options for React Native\nDESCRIPTION: Sets compilation options for C++ code, including enabling exceptions, RTTI, C++20 standard, and defining necessary macros for React Native integration.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(\n        -fexceptions\n        -frtti\n        -std=c++20\n        -Wall\n        -Wpedantic\n        -DFOLLY_NO_CONFIG=1\n        -DLOG_TAG=\\\"ReactNative\\\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for React Native Fantom Tester\nDESCRIPTION: Sets up the CMake project 'fantom_tester', defines minimum CMake version, enables verbose output, and adds a build ID to shared libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nproject(fantom_tester)\n\n# Convert input paths to CMake format (with forward slashes)\nfile(TO_CMAKE_PATH \"${REACT_COMMON_DIR}\" REACT_COMMON_DIR)\n\n# Make sure every shared lib includes a .note.gnu.build-id header\nadd_link_options(-Wl,--build-id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermes Executor Common Library in CMake for React Native\nDESCRIPTION: Defines the build configuration for the hermes_executor_common library. It collects all source files, sets include directories, configures dependencies, and handles debug/release build differences. The library integrates the Hermes JavaScript engine with React Native's native modules system.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/hermes/executor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(\n        hermes_executor_common\n        OBJECT\n        ${hermes_executor_SRC}\n)\ntarget_include_directories(hermes_executor_common PUBLIC .)\ntarget_link_libraries(hermes_executor_common\n        hermes-engine::libhermes\n        hermes_inspector_modern\n        jsi\n        reactnative\n)\n\ntarget_compile_reactnative_options(hermes_executor_common PRIVATE)\nif(${CMAKE_BUILD_TYPE} MATCHES Debug)\n        target_compile_options(\n                hermes_executor_common\n                PRIVATE\n                -DHERMES_ENABLE_DEBUGGER=1\n        )\nelse()\n        target_compile_options(\n                hermes_executor_common\n                PRIVATE\n                -DNDEBUG\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Yoga Core\nDESCRIPTION: Sets up the CMake project for Yoga Core, including minimum CMake version, project name, and verbose output.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13...3.26)\nproject(yogacore)\nset(CMAKE_VERBOSE_MAKEFILE on)\n```\n\n----------------------------------------\n\nTITLE: Creating the JSInspector CDP Library in React Native\nDESCRIPTION: Builds the JSInspector CDP library by gathering all CPP source files in the directory, creating an OBJECT library, configuring it for shared object merging, including necessary headers, and linking against folly_runtime.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/cdp/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB jsinspector_cdp_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(jsinspector_cdp OBJECT ${jsinspector_cdp_SRC})\ntarget_merge_so(jsinspector_cdp)\n\ntarget_include_directories(jsinspector_cdp PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(jsinspector_cdp\n        folly_runtime\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Text Layout Manager\nDESCRIPTION: This CMake script configures the build for React Native's text layout manager component. It collects source files, sets up include directories, and defines library dependencies needed for compilation. The script specifically targets the Fabric architecture and enables pedantic warnings.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/textlayoutmanager/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_textlayourmanager_SRC CONFIGURE_DEPENDS\n        *.cpp\n        platform/android/react/renderer/textlayoutmanager/*.cpp)\n\nadd_library(react_renderer_textlayoutmanager\n        OBJECT\n        ${react_renderer_textlayourmanager_SRC})\n\ntarget_include_directories(react_renderer_textlayoutmanager\n        PUBLIC\n          .\n          ${REACT_COMMON_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/\n)\n\ntarget_link_libraries(react_renderer_textlayoutmanager\n        glog\n        fbjni\n        folly_runtime\n        mapbufferjni\n        react_debug\n        react_renderer_attributedstring\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mapbuffer\n        react_renderer_mounting\n        react_renderer_telemetry\n        react_utils\n        reactnativejni\n        yoga\n)\ntarget_compile_reactnative_options(react_renderer_textlayoutmanager PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_textlayoutmanager PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Native C++ Module\nDESCRIPTION: Configures the include directories for the native C++ module library, making the current directory publicly accessible.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(nativecxxmoduleexample PUBLIC .)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Timing Interface Library in CMake\nDESCRIPTION: Sets up a CMake interface library for React timing functionality. The configuration includes setting minimum CMake version, enabling verbose output, including React Native flags, and configuring the interface library with appropriate include directories and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/timing/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(react_timing INTERFACE)\n\ntarget_include_directories(react_timing INTERFACE ${REACT_COMMON_DIR})\ntarget_compile_reactnative_options(react_timing INTERFACE)\ntarget_compile_options(react_timing INTERFACE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting Request Mode to 'no-cors' in React Native\nDESCRIPTION: Example of setting a fetch request's mode to 'no-cors' to bypass CORS requirements when an opaque response is sufficient. This approach disables CORS checks but makes the response content inaccessible.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/corsInvalidHeaderValues.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nno-cors\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Charset Appending in Fetch POST Requests\nDESCRIPTION: This code prevents fetch() POST requests from automatically appending 'charset=utf-8' to the Content-Type header on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nPrevent `fetch()` POST requests from appending `charset=utf-8` to `Content-Type` header\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Renderer Scheduler Library in CMake\nDESCRIPTION: This CMake script configures the build for the React Native renderer scheduler library. It compiles C++ source files into a static library and sets up the necessary include directories and linked dependencies. The configuration includes compiler flags specific to the Fabric renderer architecture.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/scheduler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_scheduler_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_scheduler STATIC ${react_renderer_scheduler_SRC})\n\ntarget_include_directories(react_renderer_scheduler PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_scheduler\n        folly_runtime\n        glog\n        jsi\n        react_debug\n        react_featureflags\n        react_performance_timeline\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mounting\n        react_renderer_observers_events\n        react_renderer_runtimescheduler\n        react_renderer_uimanager\n        react_utils\n        rrc_root\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(react_renderer_scheduler PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_scheduler PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Renderer Element Library\nDESCRIPTION: Sets up the CMake configuration for building the React Native renderer element library. It defines the minimum CMake version, includes necessary files, sets up source files, and configures compilation options and dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/element/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_element_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_element OBJECT ${react_renderer_element_SRC})\n\ntarget_include_directories(react_renderer_element PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_element\n        folly_runtime\n        glog\n        react_renderer_core\n        react_renderer_componentregistry\n)\ntarget_compile_reactnative_options(react_renderer_element PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_element PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Microtasks Library in CMake\nDESCRIPTION: Sets up the CMake build configuration for the react_nativemodule_microtasks library. It defines the minimum CMake version, includes React Native flags, compiles all CPP files in the directory, and links against required dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/microtasks/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_nativemodule_microtasks_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_nativemodule_microtasks OBJECT ${react_nativemodule_microtasks_SRC})\n\ntarget_include_directories(react_nativemodule_microtasks PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_nativemodule_microtasks\n        react_codegen_rncore\n        react_cxxreact\n)\ntarget_compile_reactnative_options(react_nativemodule_microtasks PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_microtasks PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native CSS Renderer Library in CMake\nDESCRIPTION: Configures the React Native CSS renderer library, creating either an INTERFACE library (if header-only) or an OBJECT library based on whether source files are found. Sets up include directories, links required dependencies, and applies React Native specific compiler options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/css/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_css_SRC CONFIGURE_DEPENDS *.cpp)\n\n# We need to create library as INTERFACE if it is header only\nif(\"${react_renderer_css_SRC}\" STREQUAL \"\")\n  add_library(react_renderer_css INTERFACE)\n\n  target_include_directories(react_renderer_css INTERFACE ${REACT_COMMON_DIR})\n  target_link_libraries(react_renderer_css INTERFACE\n        fast_float\n        glog\n        react_debug\n        react_utils)\n  target_compile_reactnative_options(react_renderer_css INTERFACE \"Fabric\")\n  target_compile_options(react_renderer_css INTERFACE -Wpedantic)\nelse()\n  add_library(react_renderer_css OBJECT ${react_renderer_css_SRC})\n\n  target_include_directories(react_renderer_css PUBLIC ${REACT_COMMON_DIR})\n  target_link_libraries(react_renderer_css\n        fast_float\n        glog\n        react_debug\n        react_utils)\n  target_compile_reactnative_options(react_renderer_css PRIVATE \"Fabric\")\n  target_compile_options(react_renderer_css PRIVATE -Wpedantic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Blob Library\nDESCRIPTION: This snippet sets up the CMake configuration for building the React Native Blob library. It defines the minimum CMake version, includes necessary modules, specifies source files, creates a library target, and sets compilation and linking options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/reactnativeblob/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB reactnativeblob_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)\nadd_library(reactnativeblob OBJECT ${reactnativeblob_SRC})\n\ntarget_include_directories(reactnativeblob PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_merge_so(reactnativeblob)\n\ntarget_link_libraries(reactnativeblob\n        jsireact\n        fbjni\n        folly_runtime\n        jsi\n        reactnativejni)\n\ntarget_compile_reactnative_options(reactnativeblob PRIVATE)\ntarget_compile_options(reactnativeblob PRIVATE -fvisibility=hidden)\n```\n\n----------------------------------------\n\nTITLE: HTML iframe Example with Disabled Attribution Reporting Permission\nDESCRIPTION: Example of how a parent frame can disable the attribution-reporting permission in a child iframe using the allow attribute with a 'none' value.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arPermissionPolicyDisabled.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"…\" allow=\"attribution-reporting 'none'\">\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Error Description in Image onError Callback\nDESCRIPTION: This code fixes an issue where undefined error descriptions were occurring in the Image component's onError callback on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix undefined error description in Image `onError` callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Yoga Module Build in CMake for React Native\nDESCRIPTION: This CMake configuration sets up the build process for the Yoga layout engine in React Native. It compiles C++ source files into a library, includes necessary dependencies like yogacore and fbjni, and applies optimization flags. The configuration also incorporates React Native's custom build utilities.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/yogajni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB yoga_SRC CONFIGURE_DEPENDS jni/*.cpp)\nadd_library(yoga OBJECT ${yoga_SRC})\n\ntarget_include_directories(yoga PUBLIC jni)\ntarget_merge_so(yoga)\n\ntarget_link_libraries(yoga\n        yogacore\n        fbjni\n        log\n        android\n)\n\ntarget_compile_reactnative_options(yoga PRIVATE)\ntarget_compile_options(yoga PRIVATE -fvisibility=hidden -O3)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native DOM Module Library in CMake\nDESCRIPTION: Sets up the CMake configuration for building the React Native DOM module library. It defines the library target, includes necessary files, sets compiler flags, and specifies dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/dom/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_nativemodule_dom_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_nativemodule_dom\n        OBJECT\n            ${react_nativemodule_dom_SRC}\n            $<TARGET_OBJECTS:react_codegen_rncore>\n)\n\ntarget_include_directories(react_nativemodule_dom PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_nativemodule_dom\n        rrc_root\n        react_codegen_rncore\n        react_cxxreact\n        react_renderer_dom\n        react_renderer_uimanager\n)\ntarget_compile_reactnative_options(react_nativemodule_dom PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_dom PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring RRC Native Library Build in CMake for React Native\nDESCRIPTION: This CMake script configures the build process for the 'rrc_native' library. It sets the minimum required CMake version, includes React Native common flags, collects source files, and establishes dependencies and compiler options for the library.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/componentregistry/native/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_native_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(rrc_native OBJECT ${rrc_native_SRC})\n\ntarget_include_directories(rrc_native PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(rrc_native\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_utils\n        callinvoker\n)\ntarget_compile_reactnative_options(rrc_native PRIVATE \"Fabric\")\ntarget_compile_options(rrc_native PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native DevTools Runtime Settings\nDESCRIPTION: Sets up CMake configuration for building the React Native DevTools runtime settings library. It includes necessary directories, links dependencies, and sets compilation flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/devtoolsruntimesettings/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(react_devtoolsruntimesettingscxx INTERFACE)\n\ntarget_include_directories(react_devtoolsruntimesettingscxx INTERFACE .)\n\ntarget_link_libraries(react_devtoolsruntimesettingscxx jsi)\ntarget_compile_reactnative_options(react_devtoolsruntimesettingscxx PRIVATE)\ntarget_compile_options(react_devtoolsruntimesettingscxx PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Error Message for Incompatible Native Module Method Addition\nDESCRIPTION: Example error message from the compatibility-check tool when detecting an incompatible addition of a required method.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNativeAnalytics: Object added required properties, which native will not provide\n  -- logError\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Sample TurboModule Static Library in CMake\nDESCRIPTION: This CMake script sets up the build configuration for a sample TurboModule static library. It specifies the minimum CMake version, enables verbose output, includes React Native flags, collects source files, and configures the library with appropriate include directories, linked dependencies, and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/samples/platform/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB sampleturbomodule_SRC CONFIGURE_DEPENDS ReactCommon/*.cpp)\nadd_library(sampleturbomodule STATIC ${sampleturbomodule_SRC})\n\ntarget_include_directories(sampleturbomodule PUBLIC .)\n\ntarget_link_libraries(sampleturbomodule\n        fbjni\n        jsi\n        reactnative\n)\n\ntarget_compile_reactnative_options(sampleturbomodule PRIVATE \"ReactNative\")\ntarget_compile_options(sampleturbomodule PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle for Custom CMake in React Native\nDESCRIPTION: Code showing how to extend the Android Gradle build file to use a custom CMake configuration for React Native. This modification points Gradle to a custom CMake file location.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n   // Other config here...\n   externalNativeBuild {\n       cmake {\n           path \"src/main/jni/CMakeLists.txt\"\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing TextTransform with Other Text Styles on Android\nDESCRIPTION: This code snippet fixes an issue where textTransform was not working correctly when used with other text styles on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix textTransform when used with other text styles on Android (#22670)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Runtime Scheduler Library\nDESCRIPTION: This CMake snippet sets up the build configuration for the React Native Runtime Scheduler library. It defines the minimum CMake version, includes utility files, specifies source files, and configures the library with its dependencies and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/runtimescheduler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_runtimescheduler_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_runtimescheduler STATIC ${react_renderer_runtimescheduler_SRC})\n\ntarget_include_directories(react_renderer_runtimescheduler PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_runtimescheduler\n        callinvoker\n        jsi\n        react_debug\n        react_performance_timeline\n        react_renderer_consistency\n        react_renderer_debug\n        react_timing\n        react_utils\n        react_featureflags\n        runtimeexecutor\n        jsinspector_tracing)\ntarget_compile_reactnative_options(react_renderer_runtimescheduler PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_runtimescheduler PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting Up ADB Reverse for Physical Android Devices\nDESCRIPTION: Command to set up ADB reverse for accessing Metro on a physical Android device.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nadb reverse tcp:8081 tcp:8081\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard Version\nDESCRIPTION: Configures the C++ standard version to C++14 and makes it required for the build.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native DevTools Runtime Settings Module\nDESCRIPTION: This CMake snippet sets up the build configuration for the React Native DevTools Runtime Settings module. It defines the minimum CMake version, enables verbose output, includes React Native flags, and creates a library target with specific compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/devtoolsruntimesettings/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_nativemodule_devtoolsruntimesettings_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_nativemodule_devtoolsruntimesettings OBJECT ${react_nativemodule_devtoolsruntimesettings_SRC})\n\ntarget_include_directories(react_nativemodule_devtoolsruntimesettings PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_nativemodule_devtoolsruntimesettings\n        react_devtoolsruntimesettingscxx\n)\ntarget_compile_reactnative_options(react_nativemodule_devtoolsruntimesettings PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_devtoolsruntimesettings PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Adding Support for flexWrap: 'wrap-reverse' in React Native\nDESCRIPTION: This commit adds support for the 'wrap-reverse' value in the flexWrap style property, expanding layout options for components.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Support flexWrap: 'wrap-reverse'\n// Commit: d69e55060fd76d91eccc45905d250a9fce4b2c49\n```\n\n----------------------------------------\n\nTITLE: Commenting on Cross-Origin Security Issue in React Native\nDESCRIPTION: This comment highlights a security concern where the getUserInfo() function is being called from a different origin than the config URL. This could potentially lead to unauthorized access or data leakage if not properly handled.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthUserInfoRequestNotSameOrigin.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# getUserInfo() caller is not same origin as the config URL.\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building React Bridging Library with CMake\nDESCRIPTION: This CMake script sets up the compilation of the React Bridging library for React Native. It includes necessary files, defines source files, and sets compilation flags and linked libraries. The script creates an object library named 'react_bridging' with specific include directories and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/bridging/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_bridging_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(react_bridging OBJECT ${react_bridging_SRC})\n\ntarget_include_directories(react_bridging PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_bridging jsi callinvoker)\ntarget_compile_reactnative_options(react_bridging PRIVATE \"ReactNative\")\ntarget_compile_options(react_bridging PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Configuration for React Native Feature Flags JNI Library\nDESCRIPTION: Configures the CMake build process for the react_featureflagsjni library, including minimum CMake version requirements, includes necessary utility files, glob patterns for source files, and sets up library dependencies and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/featureflags/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_featureflagsjni_SRCS CONFIGURE_DEPENDS *.cpp)\n\nadd_library(\n        react_featureflagsjni\n        OBJECT\n        ${react_featureflagsjni_SRCS}\n)\n\ntarget_include_directories(react_featureflagsjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_link_libraries(\n        react_featureflagsjni\n        fbjni\n        react_featureflags\n        reactnativejni\n)\n\ntarget_merge_so(react_featureflagsjni)\ntarget_compile_reactnative_options(react_featureflagsjni PRIVATE \"ReactNative\")\n```\n\n----------------------------------------\n\nTITLE: Breaking Image Component Method Changes\nDESCRIPTION: Image component public methods (blur, focus, measure, measureInWindow, measureLayout, setNativeProps) are no longer bound to component instances. Method references must now be wrapped in arrow functions when used as callbacks.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way - no longer works\nsetTimeout(this._imgRef.focus, 1000);\n\n// New way - correct usage\nsetTimeout(() => this._imgRef.focus(), 1000);\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Error Handler Library in CMake for React Native\nDESCRIPTION: This CMake script sets up the build configuration for the JavaScript error handler library in React Native. It defines the source files, includes necessary directories, links required libraries, and sets compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jserrorhandler/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB js_error_handler_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(\n        jserrorhandler\n        OBJECT\n        ${js_error_handler_SRC}\n)\ntarget_include_directories(jserrorhandler PUBLIC .)\ntarget_link_libraries(jserrorhandler\n        jsi\n        folly_runtime\n        mapbufferjni\n        react_featureflags\n)\ntarget_compile_reactnative_options(jserrorhandler PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Yoga CMake Build Settings for React Native\nDESCRIPTION: This CMake script sets up the build configuration for Yoga in React Native. It enforces Release mode for all builds to optimize performance, even in debug builds. The script sets verbose output and adds the yoga subdirectory to the build process.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\n# Yoga by default does not enable optimizations in debug builds. Enable -O2\n# for all builds in RN for faster debug app performance (at the cost of not\n# being able to debug inside Yoga)\nset(CMAKE_BUILD_TYPE Release)\n\nadd_subdirectory(yoga)\n```\n\n----------------------------------------\n\nTITLE: Extending Error Message for RCTFatalException on iOS\nDESCRIPTION: Improves error reporting by extending the reason message for RCTFatalException on iOS.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_22\n\nLANGUAGE: Objective-C\nCODE:\n```\nExtend reason message for `RCTFatalException` (#22532) ([2831d9ef61](https://github.com/facebook/react-native/commit/2831d9ef614280d08699f3134eeaeda84c30234e) by [@zackzachariah](https://github.com/zackzachariah))\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building React Native MapBuffer Renderer Library with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the React Native MapBuffer renderer library. It includes necessary directories, compiles source files, and links required libraries. The script also sets compilation flags and options specific to the Fabric architecture.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/mapbuffer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\nfile(GLOB react_renderer_mapbuffer_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_mapbuffer OBJECT ${react_renderer_mapbuffer_SRC})\n\ntarget_include_directories(react_renderer_mapbuffer PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(react_renderer_mapbuffer glog glog_init react_debug)\ntarget_compile_reactnative_options(react_renderer_mapbuffer PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_mapbuffer PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Creating JSExecutor Library Target\nDESCRIPTION: Creates and configures the JSExecutor library target by gathering source files and setting include directories.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB jscexecutor_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)\nadd_library(jscexecutor OBJECT ${jscexecutor_SRC})\n\ntarget_include_directories(jscexecutor PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_merge_so(jscexecutor)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building JSI Library with CMake\nDESCRIPTION: CMake configuration that builds the JSI (JavaScript Interface) shared library. It sets minimum CMake version, includes React Native flags, collects source files, and configures compilation options with dependencies on folly_runtime and glog libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\n\nfile(GLOB jsi_SRC CONFIGURE_DEPENDS jsi/*.cpp)\nadd_library(jsi SHARED ${jsi_SRC})\n\ntarget_include_directories(jsi PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_link_libraries(jsi\n        folly_runtime\n        glog)\n\ntarget_compile_reactnative_options(jsi PRIVATE \"ReactNative\")\ntarget_compile_options(jsi PRIVATE -O3 -Wno-unused-lambda-capture)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Image Manager Component with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the React Native Image Manager component. It includes source files, defines include directories, and links necessary dependencies to create the react_renderer_imagemanager library object.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/imagemanager/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_imagemanager_SRC CONFIGURE_DEPENDS\n        *.cpp\n        platform/android/react/renderer/imagemanager/*.cpp)\n\nadd_library(react_renderer_imagemanager\n        OBJECT\n        ${react_renderer_imagemanager_SRC})\n\ntarget_include_directories(react_renderer_imagemanager\n        PUBLIC\n          ${REACT_COMMON_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/\n        PRIVATE\n          ${CMAKE_CURRENT_SOURCE_DIR}\n        )\n\ntarget_link_libraries(react_renderer_imagemanager\n        folly_runtime\n        mapbufferjni\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mounting\n        reactnativejni\n        yoga)\ntarget_compile_reactnative_options(react_renderer_imagemanager PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_imagemanager PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Adding Support for springDamping in SpringInterpolator in React Native\nDESCRIPTION: This commit adds support for the springDamping parameter in the SpringInterpolator, allowing for more control over spring animations.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add support for springDamping in SpringInterpolator\n// Commit: 1dde989919d2c272ca7fcaa5c4b2d9ee02c490a0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native UIManager Renderer\nDESCRIPTION: This CMake snippet sets up the build configuration for the React Native UIManager renderer. It defines the minimum CMake version, includes necessary files, sets up the library target, and configures compiler options and linked libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/uimanager/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_uimanager_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_uimanager OBJECT ${react_renderer_uimanager_SRC})\n\ntarget_include_directories(react_renderer_uimanager PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_uimanager\n        glog\n        folly_runtime\n        jsi\n        react_cxxreact\n        react_debug\n        react_featureflags\n        react_renderer_componentregistry\n        react_renderer_consistency\n        react_renderer_uimanager_consistency\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_dom\n        react_renderer_graphics\n        react_renderer_leakchecker\n        react_renderer_runtimescheduler\n        react_renderer_mounting\n        rrc_root\n        rrc_view\n        runtimeexecutor\n)\ntarget_compile_reactnative_options(react_renderer_uimanager PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_uimanager PRIVATE -Wno-unused-local-typedef)\ntarget_compile_options(react_renderer_uimanager PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Bridgeless Library\nDESCRIPTION: This CMake script sets up the build configuration for the React Native bridgeless library. It defines the source files, compilation options, and links necessary dependencies for the bridgeless implementation.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB bridgeless_SRC \"*.cpp\")\n\nadd_library(bridgeless\n        OBJECT\n        ${bridgeless_SRC}\n)\ntarget_compile_reactnative_options(bridgeless PRIVATE)\ntarget_compile_options(bridgeless PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)\ntarget_include_directories(bridgeless PUBLIC .)\n\ntarget_link_libraries(\n        bridgeless\n        jserrorhandler\n        fabricjni\n        react_featureflagsjni\n        turbomodulejsijni\n        jsi\n        jsitooling\n        jsireact\n        react_utils\n        jsinspector\n        react_featureflags\n        react_performance_timeline\n        react_utils\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for @react-native/assets-registry\nDESCRIPTION: Commands to install dependencies and run tests for the assets-registry package in the React Native project.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/assets/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn jest packages/assets\n```\n\n----------------------------------------\n\nTITLE: Flow Type Definition Updates\nDESCRIPTION: Enhanced Flow type definitions for ViewPropTypes and TimePickerAndroid interfaces.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_5\n\nLANGUAGE: flow\nCODE:\n```\n// Updated ViewPropTypes Flow definitions\ntype ViewPropTypes = {\n  // enhanced type definitions\n};\n```\n\n----------------------------------------\n\nTITLE: Adding devDependencies Support for Templates in React Native\nDESCRIPTION: This commit adds support for devDependencies in React Native templates, allowing for better management of development-specific dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add devDependencies support for templates\n// Commit: c4ab03a18e75e6ed55444b5d86f3ceea435b9a78\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Executor Library Build in CMake\nDESCRIPTION: Sets up the build configuration for the runtimeexecutor library, including source file collection, library definition, include directories, and linking with dependencies. Applies React Native specific compilation flags and additional warning options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/runtimeexecutor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB_RECURSE runtimeexecutor_SRC CONFIGURE_DEPENDS *.cpp *.h)\n\nadd_library(runtimeexecutor OBJECT ${runtimeexecutor_SRC})\n\ntarget_include_directories(runtimeexecutor PUBLIC .)\n\ntarget_link_libraries(runtimeexecutor jsi)\ntarget_compile_reactnative_options(runtimeexecutor PRIVATE)\ntarget_compile_options(runtimeexecutor PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Fixing Android Crash on Animation with useNativeDriver\nDESCRIPTION: This code addresses a crash that was occurring on Android when animating with the useNativeDriver option.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix Android crash on animating with `useNativeDriver`\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Text Component Library\nDESCRIPTION: This CMake script sets up the build configuration for the React Native text component library. It defines the minimum CMake version, includes necessary utilities, specifies source files, and sets up compilation and linking options for the 'rrc_text' library.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/text/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_text_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(rrc_text OBJECT ${rrc_text_SRC})\n\ntarget_include_directories(rrc_text PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(rrc_text\n        glog\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_renderer_attributedstring\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mapbuffer\n        react_renderer_mounting\n        react_renderer_textlayoutmanager\n        react_utils\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_text PRIVATE \"Fabric\")\ntarget_compile_options(rrc_text PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Defining Folly Runtime Source Files in CMake\nDESCRIPTION: Lists all the source files that comprise the Folly runtime library, including core utilities, concurrency, containers, string manipulation, JSON parsing, and system-level functionality.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(folly_runtime_SRC\n        folly/Conv.cpp\n        folly/Demangle.cpp\n        folly/FileUtil.cpp\n        folly/Format.cpp\n        folly/ScopeGuard.cpp\n        folly/SharedMutex.cpp\n        folly/String.cpp\n        folly/Unicode.cpp\n        folly/concurrency/CacheLocality.cpp\n        folly/container/detail/F14Table.cpp\n        folly/detail/FileUtilDetail.cpp\n        folly/detail/Futex.cpp\n        folly/detail/SplitStringSimd.cpp\n        folly/detail/UniqueInstance.cpp\n        folly/hash/SpookyHashV2.cpp\n        folly/json/dynamic.cpp\n        folly/json/json_pointer.cpp\n        folly/json/json.cpp\n        folly/lang/CString.cpp\n        folly/lang/SafeAssert.cpp\n        folly/lang/ToAscii.cpp\n        folly/memory/detail/MallocImpl.cpp\n        folly/net/NetOps.cpp\n        folly/portability/SysUio.cpp\n        folly/synchronization/SanitizeThread.cpp\n        folly/synchronization/ParkingLot.cpp\n        folly/system/AtFork.cpp\n        folly/system/ThreadId.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/virtualized-lists with Yarn\nDESCRIPTION: Command to install the @react-native/virtualized-lists package using Yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/virtualized-lists/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native/virtualized-lists\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Image Module\nDESCRIPTION: This CMake script sets up the build configuration for the React Native image module. It defines the minimum CMake version, includes necessary utilities, sets up the source files, and configures the 'rrc_image' library with its dependencies and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/image/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_image_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(rrc_image OBJECT ${rrc_image_SRC})\n\ntarget_include_directories(rrc_image PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(rrc_image\n        glog\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_utils\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_imagemanager\n        react_renderer_mapbuffer\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_image PRIVATE \"Fabric\")\ntarget_compile_options(rrc_image PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Android ViewHelper Deprecation\nDESCRIPTION: Breaking change removing ViewHelper in favor of ViewCompat. This requires updating android:theme to use Theme.AppCompat.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Before:\nViewHelper.setBackground(view, background);\n\n// After:\nViewCompat.setBackground(view, background);\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Homebrew-installed Node on iOS in React Native\nDESCRIPTION: This iOS-specific addition adds support for Node.js installations via Homebrew, improving development environment flexibility on macOS.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_40\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Add support for Homebrew-installed Node\n// Commit: 0964135a178b459e06b44a49a4ecb0dd6c5bec9b\n```\n\n----------------------------------------\n\nTITLE: Configuring JSInspector Network Module Build in React Native with CMake\nDESCRIPTION: This CMake script configures the build for the JSInspector Network module in React Native. It sets minimum CMake version, compilation options for C++20, glob patterns for source files, and links against folly_runtime and jsinspector_cdp dependencies. The script also enables verbose output during the build process.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/network/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\n\nadd_compile_options(\n        -fexceptions\n        -std=c++20\n        -Wall\n        -Wpedantic)\n\nfile(GLOB jsinspector_network_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(jsinspector_network OBJECT ${jsinspector_network_SRC})\ntarget_merge_so(jsinspector_network)\n\ntarget_include_directories(jsinspector_network PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(jsinspector_network\n        folly_runtime\n        jsinspector_cdp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TurboModuleJSIJNI Library Build in CMake\nDESCRIPTION: Sets up the build configuration for the turbomodulejsijni library (to be renamed to react_nativemodule_manager) which handles native module management. Includes source files, additional objects, and links required dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/turbomodule/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        turbomodulejsijni\n        OBJECT\n        ReactCommon/BindingsInstallerHolder.cpp\n        ReactCommon/OnLoad.cpp\n        ReactCommon/TurboModuleManager.cpp\n        $<TARGET_OBJECTS:logger>\n        $<TARGET_OBJECTS:react_bridging>\n)\ntarget_merge_so(turbomodulejsijni)\n\ntarget_include_directories(\n        turbomodulejsijni\n        PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\ntarget_link_libraries(turbomodulejsijni\n        fbjni\n        jsi\n        react_nativemodule_core\n        callinvokerholder\n        reactperfloggerjni)\ntarget_compile_reactnative_options(turbomodulejsijni PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native NativeModule Defaults Library with CMake\nDESCRIPTION: This CMake script sets up the react_nativemodule_defaults library, which serves as a collection of default native modules for React Native. It includes compiler settings, links with required dependencies like DOM, DevTools, FeatureFlags, Microtasks, and IdleCallbacks modules, and applies React Native specific compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/defaults/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_nativemodule_defaults_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_nativemodule_defaults OBJECT ${react_nativemodule_defaults_SRC})\n\ntarget_include_directories(react_nativemodule_defaults PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_nativemodule_defaults\n        react_nativemodule_dom\n        react_nativemodule_devtoolsruntimesettings\n        react_nativemodule_featureflags\n        react_nativemodule_microtasks\n        react_nativemodule_idlecallbacks\n)\ntarget_compile_reactnative_options(react_nativemodule_defaults PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_defaults PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Popup Menu Android Specs Library\nDESCRIPTION: This CMake script sets up the build configuration for the react_codegen_ReactPopupMenuAndroidSpecs library. It defines the source files, include directories, linked libraries, and compilation options. The library is built as an OBJECT library and includes C++ files from the current directory and the ReactPopupMenuAndroidSpecs subdirectory.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-popup-menu-android/android/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nfile(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/ReactPopupMenuAndroidSpecs/*.cpp)\n\nadd_library(\n  react_codegen_ReactPopupMenuAndroidSpecs\n  OBJECT\n  ${react_codegen_SRCS}\n)\n\ntarget_include_directories(react_codegen_ReactPopupMenuAndroidSpecs PUBLIC . react/renderer/components/ReactPopupMenuAndroidSpecs)\n\ntarget_link_libraries(\n  react_codegen_ReactPopupMenuAndroidSpecs\n  fbjni\n  jsi\n  reactnative\n)\n\ntarget_compile_options(\n  react_codegen_ReactPopupMenuAndroidSpecs\n  PRIVATE\n  -DLOG_TAG=\\\"ReactNative\\\"\n  -fexceptions\n  -frtti\n  -std=c++20\n  -Wall\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Enum Value in a Native Module Interface\nDESCRIPTION: Example showing a modification to an enum value in a TurboModule interface which can cause compatibility issues.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nenum TestEnum {\n  LIGHT = 1,\n  DARK = 2,\n  SYSTEM = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Symbol Usage for SystraceSection\nDESCRIPTION: Implementation of different symbols for SystraceSection based on the WITH_FBYSTRACE flag to optimize tracing.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_59\n\nLANGUAGE: C++\nCODE:\n```\n03956c4ecfda381396336f725ea1c12d913df17d\n```\n\n----------------------------------------\n\nTITLE: Configuring JSC Runtime Library Build in CMake\nDESCRIPTION: Configures the build process for the JSC Runtime library. Sets up include directories, links required dependencies like jsc, jsi, and reactnative, and configures compilation options including optimization flags. Includes special handling for Debug/Release builds and React Native specific compilation flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\n\nadd_library(jscruntime\n        OBJECT\n        JSCRuntime.h\n        JSCRuntime.cpp)\n\ntarget_include_directories(jscruntime PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_merge_so(jscruntime)\n\ntarget_link_libraries(jscruntime\n        jsc\n        jsi\n        reactnative)\n\nif(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)\n        target_compile_options(jscruntime PRIVATE -DNDEBUG)\nendif()\n\ntarget_compile_reactnative_options(jscruntime PRIVATE \"ReactNative\")\ntarget_compile_options(jscruntime PRIVATE -O3 -Wno-unused-lambda-capture)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Renderer Observers Events Library\nDESCRIPTION: This CMake snippet sets up the project, includes utilities, defines source files, and configures the react_renderer_observers_events library. It specifies include directories, links required libraries, and sets compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/observers/events/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_observers_events_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_observers_events OBJECT ${react_renderer_observers_events_SRC})\n\ntarget_include_directories(react_renderer_observers_events PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(react_renderer_observers_events\n        react_performance_timeline\n        react_timing\n        react_renderer_core\n        react_renderer_runtimescheduler\n        react_featureflags\n        react_renderer_uimanager\n        react_utils)\ntarget_compile_reactnative_options(react_renderer_observers_events PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_observers_events PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Requirements and Flags for React Native Android\nDESCRIPTION: Configures the minimum CMake version, enables verbose output, and includes common React Native flags for the build process.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Bridgeless Instance Library\nDESCRIPTION: This CMake snippet sets up the build configuration for a React Native bridgeless instance library. It defines the minimum CMake version, includes utility files, specifies source files, and configures the 'rninstance' library with compilation options and dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB_RECURSE bridgeless_jni_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(rninstance\n        OBJECT\n        ${bridgeless_jni_SRC}\n)\n\ntarget_compile_reactnative_options(rninstance PRIVATE)\ntarget_compile_options(rninstance PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)\n\ntarget_merge_so(rninstance)\ntarget_include_directories(rninstance PUBLIC .)\ntarget_link_libraries(\n        rninstance\n        fabricjni\n        react_featureflagsjni\n        turbomodulejsijni\n        jsi\n        jsitooling\n        fbjni\n        bridgeless\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Native Module Core Library in CMake\nDESCRIPTION: This CMake script configures the build for the react_nativemodule_core library. It sets up source files, include directories, and links necessary dependencies for the React Native project.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/core/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_nativemodule_core_SRC CONFIGURE_DEPENDS\n        ReactCommon/*.cpp\n        platform/android/ReactCommon/*.cpp)\nadd_library(react_nativemodule_core\n        OBJECT\n        ${react_nativemodule_core_SRC})\n\ntarget_include_directories(react_nativemodule_core\n        PUBLIC\n          ${CMAKE_CURRENT_SOURCE_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/\n        )\n\ntarget_link_libraries(react_nativemodule_core\n        fbjni\n        folly_runtime\n        glog\n        jsi\n        react_bridging\n        react_debug\n        react_utils\n        react_featureflags\n        reactperflogger\n        reactnativejni)\ntarget_compile_reactnative_options(react_nativemodule_core PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_core PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Linking to React Native Feature Flags Documentation in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a link to the main React Native documentation page using Markdown syntax. It provides a quick way for developers to navigate back to the project's home page.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/featureflags/__docs__/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[🏠 Home](../../../../../__docs__/README.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring reactnativejni Library for React Native Android\nDESCRIPTION: Defines the main reactnativejni library with all React Native Android JNI implementation files. Includes configuration for dependencies, linking with other libraries, and compile options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\n\nadd_library(\n        reactnativejni\n        OBJECT\n          CatalystInstanceImpl.cpp\n          InspectorNetworkRequestListener.cpp\n          JExecutor.cpp\n          JInspector.cpp\n          JMessageQueueThread.cpp\n          JReactCxxErrorHandler.cpp\n          JReactSoftExceptionLogger.cpp\n          JRuntimeExecutor.cpp\n          JRuntimeScheduler.cpp\n          JSLoader.cpp\n          JSLogging.cpp\n          JavaModuleWrapper.cpp\n          JniJSModulesUnbundle.cpp\n          MethodInvoker.cpp\n          ModuleRegistryBuilder.cpp\n          OnLoad.cpp\n          ReactInstanceManagerInspectorTarget.cpp\n          SafeReleaseJniRef.cpp\n)\ntarget_merge_so(reactnativejni)\n\n# TODO This should not be ../../\ntarget_include_directories(reactnativejni PUBLIC ../../)\n\ntarget_link_libraries(reactnativejni\n        android\n        callinvokerholder\n        fbjni\n        folly_runtime\n        glog_init\n        logger\n        react_cxxreact\n        react_renderer_runtimescheduler\n        reactnativejni_common\n        runtimeexecutor\n        yoga\n        )\ntarget_compile_reactnative_options(reactnativejni PRIVATE)\ntarget_compile_options(reactnativejni PRIVATE -Wno-unused-lambda-capture)\n```\n\n----------------------------------------\n\nTITLE: Commit Reference in Markdown\nDESCRIPTION: Example of how commit references are formatted in the changelog, showing links to specific commits and contributors.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[@Kudo](https://github.com/Kudo) for his work on fixing this via [557989a86f](https://github.com/facebook/react-native/commit/557989a86f8730113393ed229927d607a478e524)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native CXX Runtime\nDESCRIPTION: Sets up CMake build configuration for React Native's C++ runtime library. Includes compilation flags, source files globbing, and dependency specifications. The configuration enables verbose build output and links against required libraries like boost, folly, and JSI.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/cxxreact/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_cxxreact_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_cxxreact OBJECT ${react_cxxreact_SRC})\n\ntarget_include_directories(react_cxxreact PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_cxxreact\n        boost\n        callinvoker\n        folly_runtime\n        glog\n        jsi\n        jsinspector\n        logger\n        reactperflogger\n        runtimeexecutor\n        react_debug)\n\ntarget_compile_reactnative_options(react_cxxreact PRIVATE \"ReactNative\")\ntarget_compile_options(react_cxxreact PRIVATE -Wno-unused-lambda-capture)\n```\n\n----------------------------------------\n\nTITLE: Configuring CallInvoker Interface Library in CMake\nDESCRIPTION: Sets up a CMake interface library named 'callinvoker' with React Native specific compilation flags and include directories. Requires CMake 3.13 or higher and includes React Native common flags from cmake-utils.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/callinvoker/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(callinvoker INTERFACE)\n\ntarget_include_directories(callinvoker INTERFACE .)\ntarget_compile_reactnative_options(callinvoker INTERFACE)\ntarget_compile_options(callinvoker INTERFACE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Calling target_merge_so for React Native Library in CMake\nDESCRIPTION: Invokes the target_merge_so function on the reactnative library, which likely handles special merging operations for shared objects on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_merge_so(reactnative)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building react_featureflags Library in CMake\nDESCRIPTION: Sets up CMake configuration for the React Native feature flags library. It specifies the minimum CMake version, enables verbose output, includes React Native flags utilities, collects source files, and configures the library with appropriate include directories, dependencies, and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/featureflags/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_featureflags_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_featureflags OBJECT ${react_featureflags_SRC})\n\ntarget_include_directories(react_featureflags PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_featureflags folly_runtime)\ntarget_compile_reactnative_options(react_featureflags PRIVATE \"ReactNative\")\ntarget_compile_options(react_featureflags PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring UIManager Consistency Module Build in CMake\nDESCRIPTION: Sets up CMake configuration for building the React Native UIManager consistency module. It defines the library target, includes necessary directories, links required dependencies, and sets specific compiler options for the Fabric renderer component.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/uimanager/consistency/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_uimanager_consistency_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_uimanager_consistency OBJECT ${react_renderer_uimanager_consistency_SRC})\n\ntarget_include_directories(react_renderer_uimanager_consistency PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_uimanager_consistency\n        glog\n        rrc_root\n        react_renderer_consistency\n        react_renderer_mounting)\ntarget_compile_reactnative_options(react_renderer_uimanager_consistency PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_uimanager_consistency PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting contextMenuHidden property on TextInput in React Native\nDESCRIPTION: The contextMenuHidden property can be used to hide the context menu on TextInput components.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n<TextInput\n  contextMenuHidden={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring GTest Executable for React Native Unit Tests in CMake\nDESCRIPTION: Defines a CMake executable target named 'reactnative_unittest' that includes numerous test source files from React Native's core components. The configuration specifies which test files to compile, with some problematic tests commented out and categorized by their failure type.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(reactnative_unittest\n  ${REACT_COMMON_DIR}/cxxreact/tests/jsarg_helpers.cpp\n  ${REACT_COMMON_DIR}/cxxreact/tests/jsbigstring.cpp\n  ${REACT_COMMON_DIR}/cxxreact/tests/methodcall.cpp\n  ${REACT_COMMON_DIR}/cxxreact/tests/RecoverableErrorTest.cpp\n  ${REACT_COMMON_DIR}/react/bridging/tests/BridgingTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/attributedstring/tests/AttributedStringBoxTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/components/image/tests/ImageTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/components/root/tests/RootShadowNodeTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/components/scrollview/tests/ScrollViewTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/LayoutTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/ViewTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/DynamicPropsUtilitiesTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/EventQueueProcessorTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/FindNodeAtPointTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/LayoutableShadowNodeTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/PrimitivesTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/RawPropsTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeFamilyTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/debug/tests/DebugStringConvertibleTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/element/tests/ElementTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/GraphicsTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/TransformTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/imagemanager/tests/ImageManagerTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/mapbuffer/tests/MapBufferTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StackingContextTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StateReconciliationTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/RuntimeSchedulerTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/SchedulerPriorityTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/telemetry/tests/TransactionTelemetryTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/textlayoutmanager/tests/TextLayoutManagerTest.cpp\n  ${REACT_COMMON_DIR}/react/renderer/uimanager/tests/FabricUIManagerTest.cpp\n\n  ########## (COMPILE BUT FAIL ON ASSERTS) ###########\n  # ${REACT_COMMON_DIR}/react/renderer/animations/tests/LayoutAnimationTest.cpp\n  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/MountingTest.cpp\n  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/ShadowTreeLifeCycleTest.cpp\n\n  ########## (COMPILE BUT FAIL WITH RUNTIME EXCEPTIONS) ###########\n  # ${REACT_COMMON_DIR}/hermes/inspector-modern/chrome/tests/ConnectionDemuxTests.cpp\n\n  ########## (DO NOT COMPILE) ###########\n  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeTest.cpp\n  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ConcreteShadowNodeTest.cpp\n  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ComponentDescriptorTest.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermes Instance JNI Library Build for React Native with CMake\nDESCRIPTION: This CMake configuration sets up the build process for the Hermes Instance JNI library, which provides JNI bindings for the Hermes JavaScript engine in React Native. It identifies source files, includes required dependencies, and configures the library target with appropriate compilation flags and linked libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/hermes/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB_RECURSE hermes_instance_jni_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(hermesinstancejni\n        OBJECT\n        ${hermes_instance_jni_SRC}\n)\ntarget_include_directories(hermesinstancejni PRIVATE .)\ntarget_merge_so(hermesinstancejni)\n\ntarget_link_libraries(hermesinstancejni\n        hermes-engine::libhermes\n        jsitooling\n        fbjni\n        bridgelesshermes\n        reactnative\n)\n\ntarget_compile_reactnative_options(hermesinstancejni PRIVATE)\ntarget_compile_options(hermesinstancejni PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Android Switch Component\nDESCRIPTION: This CMake script configures the build process for the React Native Android Switch component. It sets up the required minimum CMake version, includes React Native flags, collects source files, and defines the static library with appropriate dependencies and compiler options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/switch/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_switch_SRCS CONFIGURE_DEPENDS androidswitch/react/renderer/components/androidswitch/*.cpp)\n\nadd_library(\n        rrc_switch\n        STATIC\n        ${rrc_switch_SRCS}\n)\n\ntarget_include_directories(rrc_switch PUBLIC androidswitch/)\n\ntarget_link_libraries(\n        rrc_switch\n        glog\n        fbjni\n        folly_runtime\n        glog_init\n        react_codegen_rncore\n        react_debug\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_uimanager\n        reactnativejni\n        rrc_view\n        yoga\n)\n\ntarget_compile_reactnative_options(rrc_switch PRIVATE \"Fabric\")\ntarget_compile_options(rrc_switch PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Building React Native Test Package\nDESCRIPTION: Commands to install dependencies, build the project, and run the React Native code generator. These steps are required for setting up the testing package.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-test-library/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn build\nnpx react-native codegen\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Sets up the library dependencies for JSExecutor, including the unwinder library and React Native components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(jscexecutor\n        ${LIB_UNWIND}\n        jscruntime\n        jsi\n        reactnative)\ntarget_compile_reactnative_options(jscexecutor PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Modal Component\nDESCRIPTION: Sets up the build configuration for the React Native Modal component, including version requirements, source file collection, library dependencies, and compiler settings. This CMake script creates a static library named 'rrc_modal' that's part of the Fabric renderer architecture.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/modal/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_modal_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(rrc_modal STATIC ${rrc_modal_SRC})\n\ntarget_include_directories(rrc_modal PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(rrc_modal\n        glog\n        folly_runtime\n        glog_init\n        react_codegen_rncore\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_imagemanager\n        react_renderer_uimanager\n        rrc_image\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_modal PRIVATE \"Fabric\")\ntarget_compile_options(rrc_modal PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Unifying Systrace Native Hook Argument Passing\nDESCRIPTION: Standardization of argument passing for Systrace native hooks to improve consistency and maintainability.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_58\n\nLANGUAGE: C++\nCODE:\n```\n52e3ae9063705bac53bad99ffe23976c29c8f1b2\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Performance Logger\nDESCRIPTION: Sets up CMake configuration for building the React Native Performance Logger library. It defines the minimum CMake version, sets verbosity, includes necessary files, and configures the library with its dependencies and compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/reactperflogger/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB reactperflogger_SRC CONFIGURE_DEPENDS\n        reactperflogger/*.cpp\n        fusebox/*.cpp)\nadd_library(reactperflogger OBJECT ${reactperflogger_SRC})\n\ntarget_include_directories(reactperflogger PUBLIC .)\n\ntarget_link_libraries(reactperflogger\n        react_timing\n        folly_runtime\n)\ntarget_compile_reactnative_options(reactperflogger PRIVATE)\ntarget_compile_options(reactperflogger PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Application Modules in CMake\nDESCRIPTION: Defines the CMake configuration for React Native application modules on Android. It sets up the project, includes the React Native application CMake utilities, adds subdirectories for sample TurboModule and NativeCxxModule implementations, and links the project against these sample modules.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/android/app/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\n# Define the application dynamic library name here.\nproject(appmodules)\n\ninclude(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)\n\nadd_subdirectory(${REACT_COMMON_DIR}/react/nativemodule/samples/platform/android/ sampleturbomodule_build)\nadd_subdirectory(${REACT_COMMON_DIR}/../../rn-tester/NativeCxxModuleExample/ nativecxxmoduleexample_build)\n\n# RN Tester needs to link against the sample turbomobule\ntarget_link_libraries(${CMAKE_PROJECT_NAME}\n        sampleturbomodule)\n# RN Tester needs to link against the NativeCxxModuleExample\ntarget_link_libraries(${CMAKE_PROJECT_NAME}\n        nativecxxmoduleexample)\n```\n\n----------------------------------------\n\nTITLE: Installing the React Native Compatibility Check Package\nDESCRIPTION: Command to install the @react-native/compatibility-check package using Yarn.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native/compatibility-check\n```\n\n----------------------------------------\n\nTITLE: Android OkHttpClient Provider Update\nDESCRIPTION: Breaking change replacing OkHttpClientProvider.replaceOkHttpClient method with setOkHttpClientFactory for version 0.54+.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Before:\nOkHttpClientProvider.replaceOkHttpClient();\n\n// After:\nOkHttpClientProvider.setOkHttpClientFactory();\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Renderer Telemetry Library in CMake\nDESCRIPTION: This CMake script sets up the build configuration for the React Native renderer telemetry library. It collects all .cpp files in the directory, creates an object library, and configures the necessary include directories and dependencies for compilation. The script also applies specific compiler flags for the Fabric architecture and enables pedantic warning checks.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_telemetry_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_telemetry OBJECT ${react_renderer_telemetry_SRC})\n\ntarget_include_directories(react_renderer_telemetry PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_telemetry\n        folly_runtime\n        glog\n        glog_init\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_utils\n        rrc_root\n        rrc_view\n        yoga)\ntarget_compile_reactnative_options(react_renderer_telemetry PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_telemetry PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Allowed Attribution Reporting API Headers List in Markdown\nDESCRIPTION: Lists the four Attribution Reporting API headers that should not be mixed across web and OS contexts in the same HTTP response. At most one header should be used from either the web or OS category.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arWebAndOsHeaders.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Attribution-Reporting-Register-OS-Source`\n- `Attribution-Reporting-Register-OS-Trigger`\n- `Attribution-Reporting-Register-Source`\n- `Attribution-Reporting-Register-Trigger`\n```\n\n----------------------------------------\n\nTITLE: Configuring reactnativejni_common Library for React Native Android\nDESCRIPTION: Defines the reactnativejni_common library that contains shared JNI code used by both old and new architectures. Includes SO merging utilities, source files, include directories, and required dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\n\nadd_library(\n        reactnativejni_common\n        OBJECT\n          JDynamicNative.cpp\n          JReactMarker.cpp\n          NativeArray.cpp\n          NativeCommon.cpp\n          NativeMap.cpp\n          OnLoad-common.cpp\n          ReadableNativeArray.cpp\n          ReadableNativeMap.cpp\n          WritableNativeArray.cpp\n          WritableNativeMap.cpp\n)\ntarget_merge_so(reactnativejni_common)\ntarget_include_directories(reactnativejni_common PUBLIC ../../)\n\ntarget_link_libraries(reactnativejni_common fbjni folly_runtime react_cxxreact)\ntarget_compile_reactnative_options(reactnativejni_common PRIVATE)\ntarget_compile_options(reactnativejni_common PRIVATE -Wno-unused-lambda-capture)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Functions Blocked by Content Security Policy\nDESCRIPTION: Lists JavaScript functions that are typically blocked by Content Security Policy due to their ability to evaluate strings as code. These functions should be avoided for better security.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cspEvalViolation.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\neval()\nnew Function()\nsetTimeout([string], ...)\nsetInterval([string], ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Renderer Leak Checker\nDESCRIPTION: Sets up a CMake build configuration for the React Native renderer leak checker library. It defines minimum CMake version, includes common flags, creates a static library from all CPP files in the directory, and configures dependencies and compiler options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/leakchecker/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_leakchecker_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_leakchecker STATIC ${react_renderer_leakchecker_SRC})\n\ntarget_include_directories(react_renderer_leakchecker PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(react_renderer_leakchecker\n        glog\n        react_renderer_core\n        runtimeexecutor)\ntarget_compile_reactnative_options(react_renderer_leakchecker PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_leakchecker PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Preventing Crash on CheckBox for Older Android Versions\nDESCRIPTION: This fix prevents crashes that were occurring with CheckBox components on older versions of Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix crash on CheckBox on older Android versions\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the react_newarchdefaults Library in CMake\nDESCRIPTION: This CMake script configures the building of the react_newarchdefaults library. It gathers C++ source files, sets up the library as an object library, specifies include directories, and links against various React Native dependencies including fbjni, fabricjni, and other native modules.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/newarchdefaults/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_newarchdefaults_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(react_newarchdefaults OBJECT ${react_newarchdefaults_SRC})\n\ntarget_merge_so(react_newarchdefaults)\n\ntarget_include_directories(react_newarchdefaults PUBLIC .)\n\ntarget_link_libraries(react_newarchdefaults\n        fbjni\n        fabricjni\n        react_featureflagsjni\n        react_nativemodule_core\n        react_codegen_rncore\n        react_cxxreactpackage\n        react_nativemodule_defaults\n        react_nativemodule_dom\n        react_nativemodule_featureflags\n        react_nativemodule_microtasks\n        react_nativemodule_idlecallbacks\n        jsi)\n\ntarget_compile_reactnative_options(react_newarchdefaults PRIVATE \"ReactNative\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermestooling Shared Library in CMake for React Native\nDESCRIPTION: Creates a shared library named 'hermestooling' that merges multiple Hermes-related libraries. This acts as an umbrella library that consolidates bridgelesshermes, hermes_executor, and other Hermes components. The library can be removed by React Native Gradle Plugin for users who opt to use JSC instead of Hermes.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/hermes/tooling/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\n# hermestooling is a shared library where we merge all the hermes* related libraries.\n#\n# It acts as an 'umbrella' library and gets removed by RNGP (see `configureJsEnginePackagingOptions`)\n# Please note that this library gets removed for users that opt to use JSC as their JS engine.\n\nadd_library(hermestooling\n        SHARED\n        $<TARGET_OBJECTS:bridgelesshermes>\n        $<TARGET_OBJECTS:hermes_executor>\n        $<TARGET_OBJECTS:hermes_executor_common>\n        $<TARGET_OBJECTS:hermes_inspector_modern>\n        $<TARGET_OBJECTS:hermesinstancejni>\n        $<TARGET_OBJECTS:jni_lib_merge_glue>\n        $<TARGET_OBJECTS:jsijniprofiler>\n)\ntarget_merge_so(hermestooling)\ntarget_link_libraries(hermestooling\n        PUBLIC\n        reactnative\n        jsi\n        hermes-engine::libhermes\n)\ntarget_include_directories(hermestooling\n        PUBLIC\n        $<TARGET_PROPERTY:bridgelesshermes,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:hermes_executor,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:hermes_executor_common,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:hermes_inspector_modern,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:hermesinstancejni,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jsijniprofiler,INTERFACE_INCLUDE_DIRECTORIES>\n)\ntarget_compile_reactnative_options(hermestooling PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native DevSupport JNI Library\nDESCRIPTION: Sets up CMake build configuration for the React Native DevSupport JNI library. Includes required dependencies, configures source files, and specifies library linking requirements. The build process includes merging shared objects and setting up compilation options specific to React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/devsupport/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_devsupportjni_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(react_devsupportjni OBJECT ${react_devsupportjni_SRC})\n\ntarget_merge_so(react_devsupportjni)\n\ntarget_include_directories(react_devsupportjni PUBLIC .)\n\ntarget_link_libraries(react_devsupportjni\n        fbjni\n        jsinspector)\n\ntarget_compile_reactnative_options(react_devsupportjni PRIVATE \"ReactNative\")\n```\n\n----------------------------------------\n\nTITLE: Configuring JSI React Library Build in CMake\nDESCRIPTION: Defines CMake build configuration for the JSI React library. Sets up minimum CMake version, creates library target with source files, configures include directories, and specifies library dependencies. Includes performance optimization flags and React Native specific compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsiexecutor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(jsireact\n        OBJECT\n        jsireact/JSIExecutor.cpp\n        jsireact/JSINativeModules.cpp)\n\ntarget_include_directories(jsireact PUBLIC .)\n\ntarget_link_libraries(jsireact\n        react_cxxreact\n        reactperflogger\n        folly_runtime\n        glog\n        jsi)\n\ntarget_compile_reactnative_options(jsireact PRIVATE)\ntarget_compile_options(jsireact PRIVATE -O3)\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Renderer Library in CMake for React Native\nDESCRIPTION: This CMake script configures the build process for the React Native DOM renderer. It sets up the module as an object library, includes necessary directories, links required dependencies, and applies specific compiler options and flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/dom/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_dom_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_dom OBJECT ${react_renderer_dom_SRC})\n\ntarget_include_directories(react_renderer_dom PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_dom\n        react_renderer_core\n        react_renderer_graphics\n        rrc_root\n        rrc_text)\ntarget_compile_reactnative_options(react_renderer_dom PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_dom PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Resolving Dev Settings Menu Display Issue on Android\nDESCRIPTION: This fix ensures the dev settings menu appears correctly for certain codebases where namespace conflicts were preventing its display.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix dev settings menu not appearing for certain codebases due to namespace conflicts\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Verbose Output\nDESCRIPTION: Defines the minimum required CMake version and enables verbose output during the build process.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n```\n\n----------------------------------------\n\nTITLE: Linking to Feature Flags System Documentation in Markdown\nDESCRIPTION: This code snippet shows how to create a link to the specific Feature Flags system documentation within the React Native project using Markdown syntax. It helps developers navigate to more detailed information about the feature flags implementation.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/featureflags/__docs__/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Feature Flags system](../../../src/private/featureflags/__docs__/README.md)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Configuration for React Native CXXReactPackage\nDESCRIPTION: Configures the CMake build system for the React Native CXXReactPackage library. It defines an interface library with include directories, links dependencies like fb and fbjni, and applies React Native specific compiler flags and options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/cxxreactpackage/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\n#########################\n###  cxxreactpackage  ###\n#########################\n\nadd_library(react_cxxreactpackage INTERFACE)\n\ntarget_include_directories(react_cxxreactpackage\n        INTERFACE\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\ntarget_link_libraries(react_cxxreactpackage\n        INTERFACE\n        fb\n        fbjni)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\ntarget_compile_reactnative_options(react_cxxreactpackage INTERFACE)\ntarget_compile_options(react_cxxreactpackage INTERFACE -Wno-unused-lambda-capture)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSC Tooling Shared Library in CMake for React Native Android\nDESCRIPTION: This CMake snippet creates a shared library 'jsctooling' that merges JSC-related libraries for React Native Android. It sets up the library, links dependencies, configures include directories, and applies React Native-specific compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jsctooling/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(jsctooling\n        SHARED\n        $<TARGET_OBJECTS:jni_lib_merge_glue>\n        $<TARGET_OBJECTS:jscinstance>\n        $<TARGET_OBJECTS:jscruntime>\n        $<TARGET_OBJECTS:jscexecutor>\n)\ntarget_merge_so(jsctooling)\ntarget_link_libraries(jsctooling\n        PUBLIC\n        reactnative\n        jsc\n)\ntarget_include_directories(jsctooling\n        PUBLIC\n        $<TARGET_PROPERTY:jscexecutor,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jscruntime,INTERFACE_INCLUDE_DIRECTORIES>\n        $<TARGET_PROPERTY:jscinstance,INTERFACE_INCLUDE_DIRECTORIES>\n)\ntarget_compile_reactnative_options(jsctooling PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native ScrollView Component Build\nDESCRIPTION: This CMake script sets up the build environment for the React Native ScrollView component. It defines the source files, include directories, linked libraries, and compiler options for the 'rrc_scrollview' static library.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/scrollview/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_scrollview_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/scrollview/*.cpp)\nadd_library(rrc_scrollview STATIC ${rrc_scrollview_SRC})\n\ntarget_include_directories(rrc_scrollview PUBLIC ${REACT_COMMON_DIR} . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)\n\ntarget_link_libraries(rrc_scrollview\n        glog\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mapbuffer\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_scrollview PRIVATE \"Fabric\")\ntarget_compile_options(rrc_scrollview PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Updating babelHelpers with Babel 7 Support in React Native\nDESCRIPTION: This commit updates the babelHelpers to add support for Babel 7 in React Native. It ensures compatibility with the latest version of Babel.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update babelHelpers with Babel 7 support\n// Commit: fbd1beaf666be9c09a380784f8c0cd34ba083a6b\n```\n\n----------------------------------------\n\nTITLE: Updating Debugger Frontend Assets for Stable Branch using Shell\nDESCRIPTION: This shell command updates the compiled assets for the debugger frontend by running a Node.js script for a specific stable branch (e.g., 0.73-stable).\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode scripts/debugger-frontend/sync-and-build --branch 0.73-stable\n```\n\n----------------------------------------\n\nTITLE: Updating Yoga Logical Operator in C++\nDESCRIPTION: Uses logical operator instead of bit operation in Yoga layout engine.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nUse logical operator instead of bit operation in Yoga\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Environment for MapBuffer JNI Library in React Native\nDESCRIPTION: This CMake configuration sets up the build process for the MapBuffer JNI library in React Native. It sets minimum required CMake version, enables verbose makefile output, includes utility files for SO merging and React Native flags, configures source files, include directories, and links necessary dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/mapbuffer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB mapbuffer_SRC CONFIGURE_DEPENDS\n        ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/*.cpp)\n\nadd_library(mapbufferjni OBJECT ${mapbuffer_SRC})\n\ntarget_include_directories(mapbufferjni\n        PUBLIC\n          ${CMAKE_CURRENT_SOURCE_DIR}\n        PRIVATE\n          ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/\n)\n\ntarget_merge_so(mapbufferjni)\n\ntarget_link_libraries(mapbufferjni\n        fbjni\n        folly_runtime\n        glog\n        glog_init\n        react_debug\n        react_renderer_mapbuffer\n        react_utils\n        yoga\n)\n\ntarget_compile_reactnative_options(mapbufferjni PRIVATE \"Fabric\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native JSInspector CDP Module\nDESCRIPTION: Defines the build configuration for the JSInspector CDP (Chrome DevTools Protocol) module. It sets the minimum CMake version, enables verbose makefile output, includes SoMerging utilities, and configures compiler options including C++20 standard and warning flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/cdp/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\n\nadd_compile_options(\n        -fexceptions\n        -std=c++20\n        -Wall\n        -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting Folly Compilation Flags in CMake\nDESCRIPTION: Defines a set of compilation flags for the Folly library to configure its behavior for mobile environments. These flags disable certain features and enable others appropriate for Android/mobile platforms.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(folly_FLAGS\n        -DFOLLY_NO_CONFIG=1\n        -DFOLLY_HAVE_CLOCK_GETTIME=1\n        -DFOLLY_USE_LIBCPP=1\n        -DFOLLY_CFG_NO_COROUTINES=1\n        -DFOLLY_MOBILE=1\n        -DFOLLY_HAVE_RECVMMSG=1\n        -DFOLLY_HAVE_PTHREAD=1\n        # If APP_PLATFORM in Application.mk targets android-23 above, please comment\n        # the following line. NDK uses GNU style stderror_r() after API 23.\n        -DFOLLY_HAVE_XSI_STRERROR_R=1\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Decimal Pad Support on Android in React Native\nDESCRIPTION: This Android-specific addition implements support for a decimal pad input type, enhancing numeric input capabilities on Android devices.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\n// Add decimal pad to android\n// Commit: 75e49a0637eaa3bd3bb7e445648f084a42d9c8af\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native/js-polyfills with Yarn\nDESCRIPTION: Command to install the @react-native/js-polyfills package using Yarn package manager. This is the recommended installation method for the package.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/polyfills/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native/js-polyfills\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Build Configuration for JSExecutor\nDESCRIPTION: Configures the base CMake settings, sets compilation options for visibility and exceptions, and includes required utility files for SO merging and React Native flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nadd_compile_options(-fvisibility=hidden -fexceptions -frtti)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermes Shared Library Import in CMake\nDESCRIPTION: Sets up CMake configuration to import the Hermes JavaScript engine as a shared library. Specifies minimum CMake version 3.13, enables verbose build output, and configures the library import with the appropriate ABI-specific path.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/hermes/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nadd_library(hermes SHARED IMPORTED GLOBAL)\nset_target_properties(hermes\n        PROPERTIES\n        IMPORTED_LOCATION\n        ${CMAKE_CURRENT_SOURCE_DIR}/jni/${ANDROID_ABI}/libhermes.so)\n```\n\n----------------------------------------\n\nTITLE: React Native StyleSheet Type Definition Update\nDESCRIPTION: Fix for StyleSheet.create return type definition and validation for functions with custom prototype methods.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Optimizing RCTShadowView for RCTSurface performance in Objective-C\nDESCRIPTION: Makes changes to RCTShadowView to increase the performance of RCTSurface, improving rendering efficiency.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_51\n\nLANGUAGE: Objective-C\nCODE:\n```\nf96f9c5fd692000f561e87cba68642ef7daf43e7\n```\n\n----------------------------------------\n\nTITLE: Adding EXTRA_PACKAGER_ARGS to iOS React Native Xcode Script\nDESCRIPTION: A code modification to the react-native-xcode.sh script that adds an extensibility point for additional packager arguments. This allows developers to pass custom arguments to the Metro bundler during iOS builds.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nEXTRA_PACKAGER_ARGS\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Glog Initialization\nDESCRIPTION: Sets up CMake build configuration for glog initialization library. Includes compiler options for exceptions and frame pointers, links required dependencies, and sets up target include directories.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/fbgloginit/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nadd_compile_options(-fexceptions -fno-omit-frame-pointer)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(glog_init OBJECT glog_init.cpp)\n\ntarget_include_directories(glog_init PUBLIC .)\n\ntarget_link_libraries(glog_init log glog)\ntarget_compile_reactnative_options(glog_init PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Configuring UIManager JNI Library Build in CMake for React Native Android\nDESCRIPTION: This CMake script sets up the build configuration for the UIManager JNI library in React Native for Android. It includes necessary files, defines the library target, sets include directories, links dependencies, and applies React Native-specific compile options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/uimanager/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB uimanagerjni_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)\nadd_library(uimanagerjni\n        OBJECT\n            ${uimanagerjni_SRC}\n            $<TARGET_OBJECTS:react_renderer_graphics>\n            $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>\n            $<TARGET_OBJECTS:rrc_view>\n)\ntarget_merge_so(uimanagerjni)\n\ntarget_include_directories(uimanagerjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_link_libraries(uimanagerjni\n        bridgelessnativeviewconfig\n        callinvokerholder\n        fbjni\n        folly_runtime\n        glog\n        glog_init\n        jsi\n        log\n        react_renderer_componentregistry\n        reactnativejni\n        rrc_native\n        yoga\n)\n\ntarget_compile_reactnative_options(uimanagerjni PRIVATE \"ReactNative\")\n```\n\n----------------------------------------\n\nTITLE: Fixing Location-related Exceptions on Android\nDESCRIPTION: This code addresses issues with the Location API that were leading to exceptions in two specific cases on Android.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix issue with Location that led to exceptions in two cases\n```\n\n----------------------------------------\n\nTITLE: Deprecated Pattern for Ignoring YellowBox Warnings in React Native\nDESCRIPTION: Shows the deprecated approach for ignoring YellowBox warnings in React Native. This pattern is no longer recommended and developers should migrate to YellowBox.ignoreWarnings().\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.ignoredYellowBox = [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring JSInspector Library Build in React Native with CMake\nDESCRIPTION: This CMake snippet configures the build process for the jsinspector library, which contains app-global state singletons. It defines an OBJECT library from all cpp files in the directory, sets include paths, links necessary dependencies, and applies React Native-specific compilation options including debug flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB jsinspector_SRC CONFIGURE_DEPENDS *.cpp)\n# jsinspector contains singletons that hold app-global state (InspectorFlags, InspectorImpl).\n# Placing it in a shared library makes the singletons safe to use from arbitrary shared libraries\n# (even ones that don't depend on one another).\nadd_library(jsinspector OBJECT ${jsinspector_SRC})\ntarget_merge_so(jsinspector)\n\ntarget_include_directories(jsinspector PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(jsinspector\n        folly_runtime\n        glog\n        jsinspector_network\n        jsinspector_tracing\n        react_featureflags\n        runtimeexecutor\n)\ntarget_compile_reactnative_options(jsinspector PRIVATE)\ntarget_compile_options(jsinspector PRIVATE\n        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED=1>\n        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED_DEVONLY=1>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Debugger Frontend Assets for Main Branch using Shell\nDESCRIPTION: This shell command updates the compiled assets for the debugger frontend by running a Node.js script for the main branch.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode scripts/debugger-frontend/sync-and-build --branch main\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Library with ASM Files for React Native Android\nDESCRIPTION: Sets up a static boost library using assembly files needed for Folly futures. The configuration enables ASM language support, finds assembly source files for the current Android ABI, and creates a static library with appropriate compiler options and include directories.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/boost/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\n# These ASM files are picked from the boost release separately,\n# because the react native version does not include anything outside of headers.\n# They are required for Folly futures to compile successfully.\nENABLE_LANGUAGE(ASM)\nfile(GLOB_RECURSE\n        boostasm_SRC\n        CONFIGURE_DEPENDS\n        ${CMAKE_CURRENT_SOURCE_DIR}/asm/${ANDROID_ABI}/*.S)\nadd_library(boost STATIC ${boostasm_SRC})\n\nset_target_properties(boost PROPERTIES LINKER_LANGUAGE CXX)\n\ntarget_include_directories(boost PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/boost_1_83_0)\ntarget_compile_options(boost PRIVATE -fexceptions -frtti)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSI JNI Profiler Library Build in CMake\nDESCRIPTION: This CMake configuration sets up the build for the JSI JNI Profiler library. It collects all CPP source files, includes necessary utility scripts, and configures the library with appropriate compilation options and dependencies including Hermes engine, JSI, and React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/hermes/instrumentation/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nfile(GLOB_RECURSE jsijniprofiler_SRC CONFIGURE_DEPENDS *.cpp)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(\n        jsijniprofiler\n        OBJECT\n        ${jsijniprofiler_SRC}\n)\ntarget_compile_reactnative_options(jsijniprofiler PRIVATE)\ntarget_merge_so(jsijniprofiler)\n\ntarget_include_directories(jsijniprofiler PRIVATE .)\n\ntarget_link_libraries(\n      jsijniprofiler\n      hermes-engine::libhermes\n      jsi\n      reactnative\n)\n```\n\n----------------------------------------\n\nTITLE: Adding componentControllerClass to CKComponent for RCTSurface in Objective-C\nDESCRIPTION: Adds an explicit componentControllerClass to CKComponent for use with RCTSurface, likely to improve component handling.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_50\n\nLANGUAGE: Objective-C\nCODE:\n```\nab972708a8dcc9b37c19843f2fe134928a7c7a3f\n```\n\n----------------------------------------\n\nTITLE: Updating Promise Dependency in package.json\nDESCRIPTION: Bumps version of 'promise' package from 8.0.3 to 8.2.0, enabling Promise.allSettled functionality.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"promise\": \"8.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Debugger Frontend Path in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the absolute path to the directory containing the frontend assets and suggests passing it to a static server.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst frontendPath = require('@react-native/debugger-frontend');\n\n// Pass frontendPath to a static server, etc\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Google Logging Library\nDESCRIPTION: Sets up CMake build configuration for glog library with specific source files, include directories, and compiler options. Configures the library as static and sets both private and public include paths for internal and external usage.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/glog/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(glog\n        STATIC\n        glog-0.3.5/src/demangle.cc\n        glog-0.3.5/src/logging.cc\n        glog-0.3.5/src/raw_logging.cc\n        glog-0.3.5/src/signalhandler.cc\n        glog-0.3.5/src/symbolize.cc\n        glog-0.3.5/src/utilities.cc\n        glog-0.3.5/src/vlog_is_on.cc\n        )\n\n# For private compilation, we include all the headers.\n# config.h is also there.\ntarget_include_directories(glog PRIVATE .)\n# For consumer, we set the `exported` dir as the\n# include folder.\ntarget_include_directories(glog PUBLIC exported)\n\ntarget_compile_reactnative_options(glog PRIVATE)\n\ntarget_compile_options(glog PRIVATE\n        -Wwrite-strings\n        -Woverloaded-virtual\n        -Wno-sign-compare\n        -DNDEBUG\n        -g\n        -O2\n        -DHAVE_PREAD=1\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native OS Compatibility Library\nDESCRIPTION: This CMake snippet sets up the build configuration for the OS compatibility layer in React Native. It defines the minimum CMake version, enables verbose output, includes React Native specific flags, and creates an object library from all .cpp files in the directory.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/oscompat/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB oscompat_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(oscompat OBJECT ${oscompat_SRC})\n\ntarget_include_directories(oscompat PUBLIC .)\ntarget_compile_reactnative_options(oscompat PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Adding methods to control dirty propagation in Objective-C\nDESCRIPTION: Introduces designated methods to control dirty propagation in the React Native rendering process.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_52\n\nLANGUAGE: Objective-C\nCODE:\n```\naf226ef949f3a21ef68a6e6b9fbd4cc06fa05152\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Feature Flags Module\nDESCRIPTION: This CMake snippet sets up the build configuration for the React Native Feature Flags native module. It defines the minimum CMake version, sets verbose output, includes common flags, compiles source files, and sets up include directories and library dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/featureflags/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_nativemodule_featureflags_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_nativemodule_featureflags OBJECT ${react_nativemodule_featureflags_SRC})\n\ntarget_include_directories(react_nativemodule_featureflags PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_nativemodule_featureflags\n        react_codegen_rncore\n        react_cxxreact\n        react_featureflags\n)\ntarget_compile_reactnative_options(react_nativemodule_featureflags PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_featureflags PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Provider Token Invalid Error Message in Markdown\nDESCRIPTION: Error message indicating that a provider's authentication token is invalid or has expired.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestIdTokenInvalidResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Provider's token is invalid.\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Utils Library in CMake\nDESCRIPTION: Sets up the CMake configuration for building the React Native utils library. It defines source files, includes directories, sets compilation flags, and specifies linked libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/utils/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_utils_SRC CONFIGURE_DEPENDS *.cpp *.mm)\nadd_library(react_utils OBJECT ${react_utils_SRC})\n\ntarget_include_directories(react_utils PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_utils\n        glog\n        glog_init\n        jsireact\n        react_debug)\ntarget_compile_reactnative_options(react_utils PRIVATE \"Fabric\")\ntarget_compile_options(react_utils PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Performance Logger JNI Library in CMake\nDESCRIPTION: Sets up CMake configuration for reactperfloggerjni interface library, including minimum CMake version, verbose output, dependency inclusion, and library configuration with necessary include directories and linked libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/reactperflogger/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(reactperfloggerjni INTERFACE)\n\ntarget_include_directories(reactperfloggerjni\n        INTERFACE\n          ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\ntarget_link_libraries(reactperfloggerjni\n        INTERFACE\n        fbjni\n        android\n        reactperflogger)\n\ntarget_compile_reactnative_options(reactperfloggerjni INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Android Clang Isnan Definition\nDESCRIPTION: Explicit definition of isnan for Android clang-5 to match gcc's default behavior.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_55\n\nLANGUAGE: cpp\nCODE:\n```\n#define isnan __builtin_isnan\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Root\nDESCRIPTION: Sets up the CMake environment, defines the 'rrc_root' library target, and configures its compilation and linking options. It includes necessary React Native directories and libraries, and sets specific compiler flags.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/root/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_root_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(rrc_root OBJECT ${rrc_root_SRC})\n\ntarget_include_directories(rrc_root PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(rrc_root\n        folly_runtime\n        glog\n        glog_init\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_root PRIVATE \"Fabric\")\ntarget_compile_options(rrc_root PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Invalid or Missing @property Rule in React Native\nDESCRIPTION: A placeholder that would be replaced with the specific @property rule that was ignored due to containing an invalid property or missing a required property in React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/propertyRuleIssue.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{PLACEHOLDER_property}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Logger Library\nDESCRIPTION: Sets up CMake configuration for building the React Native logger library. Includes source files, sets include directories, and links against the glog dependency. Uses verbose makefile output and requires CMake 3.13 or higher.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/logger/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB logger_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(logger OBJECT ${logger_SRC})\n\ntarget_include_directories(logger PUBLIC .)\n\ntarget_link_libraries(logger glog)\ntarget_compile_reactnative_options(logger PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Setting up OSSLibraryExampleSpec Codegen Library in React Native with CMake\nDESCRIPTION: Configures CMake to build the OSSLibraryExampleSpec component library for React Native. Defines build settings including compiler flags for C++20, exception handling, and RTTI support. Links against fbjni, jsi, and reactnative libraries, which are essential dependencies for React Native components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-test-library/android/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nfile(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/OSSLibraryExampleSpec/*.cpp)\n\nadd_library(\n  react_codegen_OSSLibraryExampleSpec\n  OBJECT\n  ${react_codegen_SRCS}\n)\n\ntarget_include_directories(react_codegen_OSSLibraryExampleSpec PUBLIC . react/renderer/components/OSSLibraryExampleSpec)\n\ntarget_link_libraries(\n  react_codegen_OSSLibraryExampleSpec\n  fbjni\n  jsi\n  reactnative\n)\n\ntarget_compile_options(\n  react_codegen_OSSLibraryExampleSpec\n  PRIVATE\n  -DLOG_TAG=\\\"ReactNative\\\"\n  -fexceptions\n  -frtti\n  -std=c++20\n  -Wall\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of <label> 'for' Attribute in HTML\nDESCRIPTION: This snippet demonstrates the incorrect use of the <label> element's 'for' attribute, which references a form field by its 'name' instead of 'id'. This can cause issues with browser autofill and accessibility tools.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormLabelForNameError.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=FORM_ELEMENT>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Unimplemented View Component in React Native\nDESCRIPTION: This snippet sets up the CMake configuration for building the unimplemented view component in React Native. It defines the minimum CMake version, includes necessary utilities, creates a static library from source files, sets include directories, links required libraries, and applies compilation options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/unimplementedview/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_unimplementedview_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(rrc_unimplementedview STATIC ${rrc_unimplementedview_SRC})\n\ntarget_include_directories(rrc_unimplementedview PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(rrc_unimplementedview\n        glog\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_unimplementedview PRIVATE \"Fabric\")\ntarget_compile_options(rrc_unimplementedview PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Running Metro Config Tests\nDESCRIPTION: Two-step process for running package tests from React Native root folder. First installs dependencies, then executes Jest tests specifically for the metro-config package.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/metro-config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest packages/metro-config\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Hermes Inspector Modern Library in CMake\nDESCRIPTION: This CMake script sets up the build configuration for the Hermes Inspector Modern library. It includes necessary files, defines source files, sets compiler options, and specifies library dependencies. The script also enables debugging features in Debug build mode.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/hermes/inspector-modern/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB hermesinspectormodern_SRC CONFIGURE_DEPENDS chrome/*.cpp)\n\nadd_library(hermes_inspector_modern\n        OBJECT\n        ${hermesinspectormodern_SRC})\n\ntarget_compile_reactnative_options(hermes_inspector_modern PRIVATE)\n\nif(${CMAKE_BUILD_TYPE} MATCHES Debug)\n        target_compile_options(\n                hermes_inspector_modern\n                PRIVATE\n                -DHERMES_ENABLE_DEBUGGER=1\n        )\nendif()\n\ntarget_include_directories(hermes_inspector_modern PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(hermes_inspector_modern\n        hermes-engine::libhermes\n        jsi\n        reactnative)\n```\n\n----------------------------------------\n\nTITLE: Configuring Double-Conversion Library for React Native with CMake\nDESCRIPTION: Sets up the CMake build configuration for the double-conversion library. It creates a static library from multiple source files, configures include directories, and applies specific compiler options including React Native flags and warning suppressions.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/double-conversion/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(double-conversion\n        STATIC\n        double-conversion/bignum.cc\n        double-conversion/bignum-dtoa.cc\n        double-conversion/cached-powers.cc\n        double-conversion/diy-fp.cc\n        double-conversion/double-conversion.cc\n        double-conversion/fast-dtoa.cc\n        double-conversion/fixed-dtoa.cc\n        double-conversion/strtod.cc)\n\ntarget_include_directories(double-conversion PUBLIC .)\n\ntarget_compile_reactnative_options(double-conversion PRIVATE)\ntarget_compile_options(double-conversion PRIVATE -Wno-unused-variable -Wno-unused-local-typedefs)\n```\n\n----------------------------------------\n\nTITLE: Using aria-labelledby Attribute Example\nDESCRIPTION: This snippet demonstrates the concept of aria-labelledby attribute references which must match element IDs for proper accessibility functionality. The aria-labelledby attribute should contain space-separated IDs that correspond to existing element IDs in the DOM.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormAriaLabelledByToNonExistingId.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# An aria-labelledby attribute doesn't match any element id\n```\n\n----------------------------------------\n\nTITLE: Configuring JNI Library Merge Glue in CMake for React Native\nDESCRIPTION: Sets up the CMake project, includes necessary files, and defines the 'jni_lib_merge_glue' library. This library is essential for so-merging in React Native OSS, handling JNI_OnLoad function redefinition.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/jni-lib-merge/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(jni_lib_merge_glue OBJECT jni_lib_merge.c)\n\nadd_definitions(-DJNI_MERGE_PRINT_ONLOAD)\n\ntarget_include_directories(jni_lib_merge_glue PUBLIC jni-lib-merge)\n\ntarget_link_libraries(jni_lib_merge_glue PUBLIC log)\ntarget_compile_options(jni_lib_merge_glue PRIVATE -frtti -fexceptions)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native AttributedString Renderer with CMake\nDESCRIPTION: This CMake script configures the build for the AttributedString renderer component in React Native. It finds source files, creates a library target, sets include directories, and specifies dependencies like folly, glog, and other React Native components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/attributedstring/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_attributedstring_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_attributedstring OBJECT ${react_renderer_attributedstring_SRC})\n\ntarget_include_directories(react_renderer_attributedstring PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_attributedstring\n        folly_runtime\n        glog\n        glog_init\n        react_debug\n        rrc_view\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_mapbuffer\n        react_utils\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(react_renderer_attributedstring PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_attributedstring PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastFloat Interface Library in CMake\nDESCRIPTION: Creates and configures a fast_float interface library with React Native compilation options. Sets minimum CMake version, enables verbose makefile output, and configures include directories.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/fast_float/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nadd_library(fast_float INTERFACE)\n\ntarget_include_directories(fast_float INTERFACE include)\ntarget_compile_reactnative_options(fast_float INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Explaining Cookie Security Issue in React Native\nDESCRIPTION: This snippet outlines a security issue where a cookie is not sent from one origin to another on same-site requests due to different schemes. It recommends migrating the entire site to HTTPS and using the Secure attribute on cookies to resolve the issue.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/SameSiteExcludeNavigationContextDowngrade.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Migrate entirely to HTTPS to have cookies sent on same-site requests\n\nA cookie was not sent to {PLACEHOLDER_destination} origin from {PLACEHOLDER_origin} context on a navigation.\nBecause this cookie would have been sent across schemes on the same site, it was not sent.\nThis behavior enhances the `SameSite` attribute's protection of user data from request forgery by network attackers.\n\nResolve this issue by migrating your site (as defined by the eTLD+1) entirely to HTTPS.\nIt is also recommended to mark the cookie with the `Secure` attribute if that is not already the case.\n```\n\n----------------------------------------\n\nTITLE: Configuring JSC Instance Library in CMake for React Native Android\nDESCRIPTION: This CMake script configures the build for the 'jscinstance' library in React Native. It includes utility functions for SO merging, sets up source files, includes directories, and specifies dependencies like jscruntime, fbjni, and reactnative. The script also applies React Native specific compilation options and sets visibility to hidden.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/jsc/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB jscinstance_SRC CONFIGURE_DEPENDS \"*.cpp\")\n\nadd_library(jscinstance OBJECT ${jscinstance_SRC})\n\ntarget_include_directories(jscinstance PUBLIC .)\ntarget_merge_so(jscinstance)\n\ntarget_link_libraries(jscinstance\n        jscruntime\n        fbjni\n        reactnative\n)\ntarget_compile_reactnative_options(jscinstance PRIVATE)\ntarget_compile_options(jscinstance PRIVATE -fvisibility=hidden)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Component Registry CMake Build\nDESCRIPTION: This CMake script configures the build process for the React Native component registry module. It sets up verbose build output, includes React Native flags, compiles all .cpp files in the directory, and links against required dependencies like Folly, JSI, and other React Native components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/componentregistry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_componentregistry_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_componentregistry OBJECT ${react_renderer_componentregistry_SRC})\n\ntarget_include_directories(react_renderer_componentregistry PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_componentregistry\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_utils\n        rrc_legacyviewmanagerinterop\n)\ntarget_compile_reactnative_options(react_renderer_componentregistry PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_componentregistry PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Updating Metro Configuration for React Native 0.57\nDESCRIPTION: Diff showing the required changes to migrate a custom Metro packager configuration (rn-cli.config.js) to work with React Native 0.57's updated Metro configuration structure.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n-const blacklist = require('metro/src/blacklist')\n+const blacklist = require('metro-config/src/defaults/blacklist')\n\n// ...\n\nmodule.exports = {\n+  watchFolders: alternateRoots,\n+  resolver: {\n+    blacklistRE: blacklist\n+  },\n+  transformer: {\n+    babelTransformerPath: require.resolve('./scripts/transformer.js'),\n+  },\n-  getProjectRoots() {\n-    return [\n-      path.resolve(__dirname),\n-    ].concat(alternateRoots)\n-  },\n-  getBlacklistRE() {\n-    return blacklist;\n-  },\n-  transformModulePath: require.resolve('./scripts/transformer.js'),\n}\n```\n\n----------------------------------------\n\nTITLE: Token Fetching Error Message in Markdown\nDESCRIPTION: An error message indicating that a request to fetch tokens is invalid. This may appear during authentication flows or API token requests.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestIdTokenInvalidRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The token fetching request is invalid.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function for Adding React Common Subdirectories\nDESCRIPTION: Creates a function 'add_react_common_subdir' to simplify adding subdirectories from the React Common directory.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_react_common_subdir relative_path)\n  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} src/${relative_path})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native ProgressBar Component\nDESCRIPTION: This CMake script creates a library for the React Native ProgressBar component. It gathers source files, configures include directories, and links against required dependencies like glog, fbjni, folly, and various React Native renderer libraries. The build is specifically configured for Fabric architecture with pedantic warnings enabled.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/progressbar/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_progressbar_SRC CONFIGURE_DEPENDS android/react/renderer/components/progressbar/*.cpp)\nadd_library(rrc_progressbar OBJECT ${rrc_progressbar_SRC})\n\ntarget_include_directories(rrc_progressbar\n        PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}/android/\n)\n\ntarget_link_libraries(rrc_progressbar\n        glog\n        fbjni\n        folly_runtime\n        glog_init\n        react_codegen_rncore\n        react_debug\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_uimanager\n        reactnativejni\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_progressbar PRIVATE \"Fabric\")\ntarget_compile_options(rrc_progressbar PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Updating React version for React Native 0.57.5-0.57.7\nDESCRIPTION: When upgrading to React Native versions 0.57.5-0.57.7, you need to also upgrade react and react-test-renderer to version 16.6.1.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"16.6.1\",\n    \"react-test-renderer\": \"16.6.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message in Markdown\nDESCRIPTION: Simple error message header indicating that a provider's accounts list has validation issues\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestAccountsInvalidResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Provider's accounts list is invalid.\n```\n\n----------------------------------------\n\nTITLE: Configuring SafeAreaView Component Build in React Native with CMake\nDESCRIPTION: This CMake script defines the build configuration for the React Native SafeAreaView component. It creates a static library target named 'rrc_safeareaview', sets up include directories, links required dependencies, and applies compiler options specific to the React Native Fabric architecture.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/safeareaview/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_safeareaview_SRCS CONFIGURE_DEPENDS *.cpp)\n\nadd_library(\n        rrc_safeareaview\n        STATIC\n        ${rrc_safeareaview_SRCS}\n)\n\ntarget_include_directories(rrc_safeareaview PUBLIC .)\n\ntarget_link_libraries(\n        rrc_safeareaview\n        glog\n        fbjni\n        folly_runtime\n        glog_init\n        react_codegen_rncore\n        react_debug\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_uimanager\n        reactnativejni\n        rrc_view\n        yoga\n)\n\ntarget_compile_reactnative_options(rrc_safeareaview PRIVATE \"Fabric\")\ntarget_compile_options(rrc_safeareaview PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Adding DOCTYPE Declaration to Fix Quirks Mode in HTML\nDESCRIPTION: This code snippet shows the DOCTYPE declaration that should be added to HTML documents to render pages in No Quirks Mode instead of Quirks Mode. Adding this declaration at the beginning of HTML documents prevents rendering quirks that are incompatible with current HTML and CSS specifications.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CompatibilityModeQuirks.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Cookies in Markdown\nDESCRIPTION: This snippet defines the attributes of cookies that are considered third-party and explains Chrome's policy on blocking them. It uses Markdown syntax to highlight key terms.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cookieExcludeThirdPartyPhaseoutRead.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Reading third-party cookie is blocked\n\nCookies with the `SameSite=None; Secure` and not `Partitioned` attributes that operate in cross-site contexts are third-party cookies.\nChrome blocks third-party cookies to protect user data from cross-site tracking.\n\nPlease refer to the article linked to learn more about preparing your site to avoid potential breakage due to this.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cross-Site Redirect Chain in Markdown\nDESCRIPTION: This snippet illustrates an example of a cross-site redirect chain where site A redirects to site B, which then redirects back to site A, resulting in the final request to site A being treated as a cross-site request.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cookieCrossSiteRedirectDowngrade.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor example: If site A redirects to site B which then redirects back to site A,\nthe final request to site A will be a cross-site request.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Android TextInput Component\nDESCRIPTION: Sets up CMake configuration for building the React Native Android TextInput component. It defines source files, includes directories, specifies libraries, and sets compile options.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/textinput/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB rrc_textinput_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/androidtextinput/*.cpp)\nadd_library(rrc_textinput OBJECT ${rrc_textinput_SRC})\n\ntarget_include_directories(rrc_textinput PUBLIC . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)\n\ntarget_link_libraries(rrc_textinput\n        glog\n        folly_runtime\n        glog_init\n        jsi\n        react_debug\n        react_renderer_attributedstring\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_imagemanager\n        react_renderer_mapbuffer\n        react_renderer_mounting\n        react_renderer_textlayoutmanager\n        react_renderer_uimanager\n        react_utils\n        rrc_image\n        rrc_text\n        rrc_view\n        yoga\n)\ntarget_compile_reactnative_options(rrc_textinput PRIVATE \"Fabric\")\ntarget_compile_options(rrc_textinput PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Implementing Systrace-based Telemetry for Hermes GC\nDESCRIPTION: Addition of Systrace-based telemetry to the Hermes Garbage Collector for improved performance monitoring.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_57\n\nLANGUAGE: C++\nCODE:\n```\n05e862d48d363a8af765b2f0283569419dbd2e5c\n```\n\n----------------------------------------\n\nTITLE: HTTP Headers for Attribution Reporting\nDESCRIPTION: Example of HTTP headers that need to be registered from a secure origin for Attribution Reporting API functionality.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arUntrustworthyReportingOrigin.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAttribution-Reporting-Register-Source\nAttribution-Reporting-Register-Trigger\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Cookie Attributes in Markdown\nDESCRIPTION: This snippet defines the attributes of cookies that are considered third-party and blocked by Chrome. It specifies that cookies with 'SameSite=None; Secure' and not 'Partitioned' attributes operating in cross-site contexts are third-party cookies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cookieExcludeThirdPartyPhaseoutSet.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCookies with the `SameSite=None; Secure` and not `Partitioned` attributes that operate in cross-site contexts are third-party cookies.\n```\n\n----------------------------------------\n\nTITLE: Configuring React Renderer Consistency Library in CMake\nDESCRIPTION: This CMake script configures the build for the 'react_renderer_consistency' library in React Native's Fabric renderer. It sets up compilation flags, includes necessary paths, and creates an object library from all C++ source files in the directory.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/consistency/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_consistency_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_consistency OBJECT ${react_renderer_consistency_SRC})\n\ntarget_include_directories(react_renderer_consistency PUBLIC ${REACT_COMMON_DIR})\ntarget_compile_reactnative_options(react_renderer_consistency PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_consistency PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Path conversion and ccache configuration\nDESCRIPTION: Converts input paths to CMake format and configures ccache support for faster builds. Sets build ID option for shared libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(TO_CMAKE_PATH \"${REACT_ANDROID_DIR}\" REACT_ANDROID_DIR)\nfile(TO_CMAKE_PATH \"${REACT_BUILD_DIR}\" REACT_BUILD_DIR)\nfile(TO_CMAKE_PATH \"${REACT_COMMON_DIR}\" REACT_COMMON_DIR)\n\nfind_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nendif(CCACHE_FOUND)\n\nadd_link_options(-Wl,--build-id)\n```\n\n----------------------------------------\n\nTITLE: Setting Request Mode to 'no-cors' in React Native\nDESCRIPTION: Example of setting the request mode to 'no-cors' to handle requests with schemes that don't support CORS. This approach allows the request to proceed but results in an opaque response where the content is inaccessible.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/corsDisabledScheme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`no-cors`\n```\n\n----------------------------------------\n\nTITLE: Adding unsafe-eval to Content Security Policy\nDESCRIPTION: Shows how to modify the Content Security Policy to allow string evaluation. This should only be used if absolutely necessary, as it increases security risks.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cspEvalViolation.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\nscript-src 'unsafe-eval'\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Renderer Graphics Library in CMake\nDESCRIPTION: This CMake script configures and builds the react_renderer_graphics library. It sets minimum CMake version, includes dependencies, compiles source files, and links against required libraries like glog, fbjni, and folly_runtime. The library is part of React Native's Fabric architecture.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/graphics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_graphics_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_renderer_graphics OBJECT ${react_renderer_graphics_SRC})\n\ntarget_include_directories(react_renderer_graphics\n        PUBLIC\n          ${REACT_COMMON_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/\n        )\n\ntarget_link_libraries(react_renderer_graphics\n        glog\n        fbjni\n        folly_runtime\n        react_debug\n        react_utils\n)\ntarget_compile_reactnative_options(react_renderer_graphics PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_graphics PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Directory helper functions for React Native components\nDESCRIPTION: Helper functions to add subdirectories for different parts of React Native: Android-specific, build, third-party NDK, and common components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_react_android_subdir relative_path)\n  add_subdirectory(${REACT_ANDROID_DIR}/${relative_path} ReactAndroid/${relative_path})\nendfunction()\n\nfunction(add_react_build_subdir relative_path)\n  add_subdirectory(${REACT_BUILD_DIR}/${relative_path} build/${relative_path})\nendfunction()\n\nfunction(add_react_third_party_ndk_subdir relative_path)\n  add_react_build_subdir(third-party-ndk/${relative_path})\nendfunction()\n\nfunction(add_react_common_subdir relative_path)\n  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} ReactCommon/${relative_path})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Header Requirement in Markdown\nDESCRIPTION: This snippet defines a requirement for the 'match' field in the 'Use-As-Dictionary' HTTP response header. It states that the field must be a string, which is crucial for proper header parsing and usage in React Native applications.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/sharedDictionaryWriteErrorNonStringMatchField.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The `match` field of the `Use-As-Dictionary` HTTP response header must be a string\n```\n\n----------------------------------------\n\nTITLE: Documenting navigator.credentials.get API limitation in Markdown\nDESCRIPTION: A comment that highlights an important constraint when using the Web Credentials API. It warns developers that they cannot have multiple simultaneous navigator.credentials.get requests.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestTooManyRequests.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Only one navigator.credentials.get request may be outstanding at one time.\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the Bridgeless Hermes Library in React Native with CMake\nDESCRIPTION: This CMake script configures the bridgelesshermes library by gathering source files, setting up include directories, and linking required dependencies. It applies React Native-specific compilation options and enables the Hermes debugger in debug builds.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/hermes/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB_RECURSE bridgeless_hermes_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(\n        bridgelesshermes\n        OBJECT\n        ${bridgeless_hermes_SRC}\n)\ntarget_include_directories(bridgelesshermes PUBLIC .)\n\ntarget_link_libraries(bridgelesshermes\n        hermes-engine::libhermes\n        hermes_executor_common\n        hermes_inspector_modern\n        jsi\n        jsinspector\n        reactnative\n)\n\ntarget_compile_reactnative_options(bridgelesshermes PRIVATE \"Fabric\")\nif(${CMAKE_BUILD_TYPE} MATCHES Debug)\n        target_compile_options(\n                bridgelesshermes\n                PRIVATE\n                -DHERMES_ENABLE_DEBUGGER=1\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for React Native Unit Tests in CMake\nDESCRIPTION: Configures compiler options for the 'reactnative_unittest' target. It applies React Native-specific compilation options and enables the Hermes debugger through a compile definition.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_reactnative_options(reactnative_unittest PRIVATE)\ntarget_compile_options(reactnative_unittest PRIVATE -DHERMES_ENABLE_DEBUGGER)\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression Dictionary Transport in Chrome\nDESCRIPTION: Instructions for enabling the Compression Dictionary Transport feature through Chrome flags. This flag can optimize network requests by allowing compression dictionaries to be transported between client and server.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/sharedDictionaryWriteErrorFeatureDisabled.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nchrome://flags/#enable-compression-dictionary-transport\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridgeless Native View Config Library in CMake for React Native\nDESCRIPTION: Sets up a CMake build configuration for the 'bridgelessnativeviewconfig' library. The configuration establishes minimum CMake version requirements, includes React Native common flags, collects all C++ source files recursively, and creates an object library with proper include directories and dependencies.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/nativeviewconfig/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB_RECURSE bridgeless_nativeviewconfig_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(\n        bridgelessnativeviewconfig\n        OBJECT\n        ${bridgeless_nativeviewconfig_SRC}\n)\ntarget_include_directories(bridgelessnativeviewconfig PUBLIC .)\n\ntarget_link_libraries(bridgelessnativeviewconfig jsi)\ntarget_compile_reactnative_options(bridgelessnativeviewconfig PRIVATE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Yoga Core\nDESCRIPTION: Configures the include directories for the Yoga Core library, both for build and install interfaces.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(yogacore\n    PUBLIC\n    $<BUILD_INTERFACE:${YOGA_ROOT}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/yoga>)\n```\n\n----------------------------------------\n\nTITLE: DevTools Settings Persistence Table in Markdown\nDESCRIPTION: A markdown table comparing two DevTools settings modules (DevToolsRuntimeSettings and DevToolsSettings) and their persistence behavior across native and JavaScript VM restarts.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/devtoolsruntimesettings/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Module | Survives native restarts | Survives JavaScript VM restarts |\n| --- | --- | --- |\n| DevToolsRuntimeSettings | No | Yes\n| DevToolsSettings | Yes | Yes\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for jsinspector_tracing Library in React Native\nDESCRIPTION: This CMake script sets up the build configuration for the jsinspector_tracing library. It includes necessary utilities, defines the library source files, and specifies compilation options and dependencies. The script also enables verbose output and sets the minimum required CMake version.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/tracing/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB jsinspector_tracing_SRC CONFIGURE_DEPENDS *.cpp)\n\nadd_library(jsinspector_tracing OBJECT ${jsinspector_tracing_SRC})\ntarget_merge_so(jsinspector_tracing)\n\ntarget_include_directories(jsinspector_tracing PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(jsinspector_tracing\n        folly_runtime\n        oscompat\n)\ntarget_compile_reactnative_options(jsinspector_tracing PRIVATE)\ntarget_compile_options(jsinspector_tracing PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Idle Callbacks Module\nDESCRIPTION: Sets up CMake build configuration for React Native idle callbacks native module. Includes dependency specifications, compilation flags, and library linking. Requires CMake 3.13 or higher and React Native common directory setup.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/idlecallbacks/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\nfile(GLOB react_nativemodule_idlecallbacks_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_nativemodule_idlecallbacks OBJECT ${react_nativemodule_idlecallbacks_SRC})\n\ntarget_include_directories(react_nativemodule_idlecallbacks PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_nativemodule_idlecallbacks\n        react_codegen_rncore\n        react_cxxreact\n        react_renderer_runtimescheduler\n)\ntarget_compile_reactnative_options(react_nativemodule_idlecallbacks PRIVATE \"ReactNative\")\ntarget_compile_options(react_nativemodule_idlecallbacks PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Rules\nDESCRIPTION: Configures the installation rules for JSI header files, excluding test files from installation.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${PROJECT_SOURCE_DIR}/API/jsi/\" DESTINATION include\n  FILES_MATCHING PATTERN \"*.h\"\n  PATTERN \"test\" EXCLUDE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric JNI Library Build in React Native Android\nDESCRIPTION: This CMake script configures the build process for the Fabric JNI implementation in React Native Android. It includes several utility files, sets up the fabricjni library from source files, and links against numerous dependencies including React renderer components, UI managers, and yoga.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/fabric/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\ninclude(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB fabricjni_SRCS CONFIGURE_DEPENDS *.cpp)\n\nadd_library(\n        fabricjni\n        OBJECT\n        ${fabricjni_SRCS}\n)\n\ntarget_include_directories(fabricjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_merge_so(fabricjni)\n\ntarget_link_libraries(\n        fabricjni\n        fbjni\n        folly_runtime\n        glog\n        jsi\n        mapbufferjni\n        react_codegen_rncore\n        react_debug\n        react_featureflags\n        react_renderer_animations\n        react_renderer_attributedstring\n        react_renderer_componentregistry\n        react_renderer_core\n        react_renderer_css\n        react_renderer_debug\n        react_renderer_dom\n        react_renderer_graphics\n        react_renderer_imagemanager\n        react_renderer_mapbuffer\n        react_renderer_mounting\n        react_renderer_runtimescheduler\n        react_renderer_scheduler\n        react_renderer_telemetry\n        react_renderer_textlayoutmanager\n        react_renderer_uimanager\n        react_renderer_uimanager_consistency\n        rrc_legacyviewmanagerinterop\n        react_utils\n        reactnativejni\n        rrc_image\n        rrc_modal\n        rrc_progressbar\n        rrc_root\n        rrc_safeareaview\n        rrc_scrollview\n        rrc_switch\n        rrc_text\n        rrc_textinput\n        rrc_unimplementedview\n        rrc_view\n        yoga\n)\n\ntarget_compile_reactnative_options(fabricjni PRIVATE \"Fabric\")\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Performance Timeline Library in CMake\nDESCRIPTION: Sets up the CMake build for the React Native performance timeline library. It defines the minimum CMake version, sets verbose output, includes React Native flags, compiles source files, and configures compilation options and linked libraries.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_performance_timeline_SRC CONFIGURE_DEPENDS *.cpp)\nadd_library(react_performance_timeline OBJECT ${react_performance_timeline_SRC})\n\ntarget_compile_reactnative_options(react_performance_timeline PRIVATE \"ReactNative\")\ntarget_compile_options(react_performance_timeline PRIVATE -Wpedantic)\n\ntarget_include_directories(react_performance_timeline PUBLIC ${REACT_COMMON_DIR})\ntarget_link_libraries(react_performance_timeline\n        jsinspector_tracing\n        reactperflogger\n        react_timing\n        react_cxxreact)\n```\n\n----------------------------------------\n\nTITLE: Printing Feature Flags as JSON\nDESCRIPTION: Shell command to print all feature flags as structured JSON data, useful for consuming the configuration programmatically.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn featureflags --print --json\n```\n\n----------------------------------------\n\nTITLE: Executing Publish NPM Script in Node.js\nDESCRIPTION: This command prepares release artifacts and publishes the react-native package to npm. It is part of the automated release process for React Native.\nSOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases-ci/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `publish-npm`\n\nPrepares release artifacts and publishes the `react-native` package to npm.\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Flags Using Yarn Command\nDESCRIPTION: Shell command to regenerate the code that provides access to feature flags after any changes to their definitions.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn featureflags --update\n```\n\n----------------------------------------\n\nTITLE: Describing React Native Release Testing Scripts in Markdown\nDESCRIPTION: This Markdown snippet provides an overview of the scripts used for release testing in React Native. It explains the purpose of the scripts and lists two main commands: 'test-e2e-local' for setting up and installing test app configurations, and 'test-e2e-local-clean' for cleaning up between tests.\nSOURCE: https://github.com/facebook/react-native/blob/main/scripts/release-testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# scripts/release-testing\n\nScripts supporting local manual release testing. See also [How to Test a Release](https://reactnative.dev/contributing/release-testing).\n\n## Commands\n\nFor information on command arguments, run `node <command> --help`.\n\n### `test-e2e-local`\n\nSet up, build, and install a given test app configuration.\n\n### `test-e2e-local-clean`\n\nClean up all file system and cache state between tests.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Label Usage in HTML Forms\nDESCRIPTION: This snippet shows an example of incorrect usage of the 'for' attribute in a label element. The 'for' attribute doesn't match any element 'id', which can cause issues with form autofill and accessibility.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormLabelForMatchesNonExistingIdError.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=FORM_ELEMENT>\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Origin Resource Policy Header for External Resources\nDESCRIPTION: This header configuration enables cross-origin access to resources that would otherwise be restricted to same-site usage. Adding this header to the resource's HTTP response will allow it to be loaded from any origin, which presents potential security implications.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameSite.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nCross-Origin-Resource-Policy: cross-origin\n```\n\n----------------------------------------\n\nTITLE: Describing Attribution Trigger Registration Error in Markdown\nDESCRIPTION: This markdown snippet explains the conditions under which an attribution trigger registration is ignored, including the required headers and restrictions on HTTP redirect chains.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arTriggerIgnored.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# An attribution trigger registration was ignored because the request was ineligible\n\nThis page tried to register a trigger using the Attribution Reporting API, but\nthe request was ineligible to do so, so the trigger registration was ignored.\n\nA request is eligible for trigger registration if it has an\n`Attribution-Reporting-Eligible` header whose value is a structured dictionary\nthat contains the key `trigger`, or if the header is absent. Otherwise, any\n`Attribution-Reporting-Register-Trigger` response header will be ignored.\n\nAdditionally, a single HTTP redirect chain may register only all sources or all\ntriggers, not a combination of both.\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Gradle Plugin using Yarn\nDESCRIPTION: Command to install the @react-native/gradle-plugin package using Yarn package manager.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/gradle-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native/gradle-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Renderer Mounting Build in CMake\nDESCRIPTION: This CMake script configures the build process for the react_renderer_mounting library. It collects source files from the current directory and its subdirectories, sets up include paths, and links required dependencies including Folly, glog, JSI, and various React Native renderer components.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/mounting/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\ninclude(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)\n\nfile(GLOB react_renderer_mounting_SRC CONFIGURE_DEPENDS\n        *.cpp\n        internal/*.cpp\n        stubs/*.cpp)\nadd_library(react_renderer_mounting OBJECT ${react_renderer_mounting_SRC})\n\ntarget_include_directories(react_renderer_mounting PRIVATE .)\ntarget_include_directories(react_renderer_mounting PUBLIC ${REACT_COMMON_DIR})\n\ntarget_link_libraries(react_renderer_mounting\n        folly_runtime\n        glog\n        glog_init\n        jsi\n        react_debug\n        react_renderer_core\n        react_renderer_debug\n        react_renderer_graphics\n        react_renderer_telemetry\n        react_utils\n        rrc_root\n        rrc_view\n        yoga)\ntarget_compile_reactnative_options(react_renderer_mounting PRIVATE \"Fabric\")\ntarget_compile_options(react_renderer_mounting PRIVATE -Wpedantic)\n```\n\n----------------------------------------\n\nTITLE: Adding Back Deprecated getParent Methods in Yoga for Android\nDESCRIPTION: This Android-specific addition reintroduces deprecated getParent methods in Yoga to maintain API compatibility.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_39\n\nLANGUAGE: Java\nCODE:\n```\n// Yoga: Add back deprecated getParent methods for non-breaking API change\n// Commit: c3c5c3cbce24a31f73ae6339e377ee76ca6401ad\n```\n\n----------------------------------------\n\nTITLE: Executing Prepare Package for Release Script in Node.js\nDESCRIPTION: This command prepares files within the react-native package and template for the target release version. It creates a new commit and tag, which triggers the publish-npm.js script in a new workflow.\nSOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases-ci/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `prepare-package-for-release`\n\nPrepares files within the `react-native` package and template for the target release version. Writes a new commit and tag, which will trigger `publish-npm.js` in a new workflow.\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Headers in Markdown\nDESCRIPTION: Version headers for React Native changelogs showing markdown formatting for major version sections.\nSOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog (pre 0.60)\n\n## v0.59.10\n\n## v0.59.9\n\n## v0.59.8\n\n## v0.59.7\n\n## v0.59.6\n\n## v0.59.5\n\n## v0.59.4\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Origin Resource Policy Headers for Cross-Origin Resources\nDESCRIPTION: HTTP header configuration for allowing cross-origin resources to be loaded. This header should be added when the resource is served from a different location than your website, with the caution that it allows any website to embed the resource.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameOrigin.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nCross-Origin-Resource-Policy: cross-origin\n```\n\n----------------------------------------\n\nTITLE: Importing Animated Library in React Native\nDESCRIPTION: Shows how to import the Animated module from React Native using ES6 destructuring syntax. This is the basic setup needed to start using the Animated API.\nSOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/AnimatedGratuitousApp/AnExSlides.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar { Animated } = require('react-native');\n```"
  }
]