[
  {
    "owner": "sveltejs",
    "repo": "svelte",
    "content": "TITLE: Basic $inspect Usage in Svelte\nDESCRIPTION: Demonstrates basic usage of $inspect rune for logging reactive state changes. Shows monitoring of multiple state variables that update through user interactions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/07-$inspect.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message); // will console.log when `count` or `message` change\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Svelte Component with Button and Styles\nDESCRIPTION: A simple Svelte component example that demonstrates the basic structure including script logic, markup, and styling. Shows how to create a button with a click handler and custom styling.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/01-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\tfunction greet() {\n\t\talert('Welcome to Svelte!');\n\t}\n</script>\n\n<button onclick={greet}>click me</button>\n\n<style>\n\tbutton {\n\t\tfont-size: 2em;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Local Constants with {@const} in Svelte Templates - Svelte\nDESCRIPTION: This example demonstrates the use of the {@const} statement within a {#each} block to compute and reference a local constant, 'area', for each item in the 'boxes' array. Requires a Svelte environment with a declared 'boxes' array of objects containing 'width' and 'height' properties. Inside each iteration, the area is calculated and displayed together with component values. Input: an array of boxes; Output: text lines showing the calculation and result for each box. The {@const} tag must only be a direct child of allowed blocks (e.g., {#each}, {#if}) and cannot be used arbitrarily in the template.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/09-@const.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Component Structure\nDESCRIPTION: Shows the basic structure of a .svelte component file with all optional sections: module script, instance script, markup, and style sections. This template demonstrates the standard organization of a Svelte component file.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/03-svelte-files.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n\t// module-level logic goes here\n\t// (you will rarely use this)\n</script>\n\n<script>\n\t// instance-level logic goes here\n</script>\n\n<!-- markup (zero or more items) goes here -->\n\n<style>\n\t/* styles go here */\n</style>\n```\n\n----------------------------------------\n\nTITLE: Extending Svelte HTML DOM Typings in TypeScript\nDESCRIPTION: Enhances Svelte's built-in DOM typings by declaring new custom elements, attributes, and events within the global svelteHTML namespace. Requires placing the declaration in a .d.ts file referenced in tsconfig.json. Key parameters include custom element tag names and attribute names. Inputs are new custom elements or events; outputs are extended editor type support and fewer TypeScript errors. No outside dependencies are needed beyond TypeScript support in the project.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n/// file: additional-svelte-typings.d.ts\\ndeclare namespace svelteHTML {\\n\\t// enhance elements\\n\\tinterface IntrinsicElements {\\n\\t\\t'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };\\n\\t}\\n\\t// enhance attributes\\n\\tinterface HTMLAttributes<T> {\\n\\t\\t// If you want to use the beforeinstallprompt event\\n\\t\\tonbeforeinstallprompt?: (event: any) => any;\\n\\t\\t// If you want to use myCustomAttribute={..} (note: all lowercase)\\n\\t\\tmycustomattribute?: any; // You can replace any with something more specific if you like\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Reactive State with Arrays in Svelte\nDESCRIPTION: This example shows how to create deeply reactive state using an array of objects. It demonstrates that modifying properties of nested objects will trigger UI updates.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet todos = $state([\n\t{\n\t\tdone: false,\n\t\ttext: 'add more todos'\n\t}\n]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntodos[0].done = !todos[0].done;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntodos.push({\n\tdone: false,\n\ttext: 'eat lunch'\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Derivations with $derived.by in Svelte\nDESCRIPTION: This code snippet explains using `$derived.by` for complex derivations in Svelte components, allowing more elaborate logic in derived states. The `total` variable calculates the sum of an array `numbers`, reacting to additions in the array. Dependencies are managed automatically, marking the derived value as dirty when `numbers` change.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet numbers = $state([1, 2, 3]);\n\tlet total = $derived.by(() => {\n\t\tlet total = 0;\n\t\tfor (const n of numbers) {\n\t\t\ttotal += n;\n\t\t}\n\t\treturn total;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\t{numbers.join(' + ')} = {total}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Managing Intervals with $effect and Teardown Functions in Svelte\nDESCRIPTION: Demonstrates creating an effect that sets up a JavaScript `setInterval`. The effect returns a teardown function using `clearInterval` to clean up the interval when the effect's dependencies (`milliseconds`) change or when the component is destroyed, preventing memory leaks. The interval itself updates a `$state` variable (`count`).\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet milliseconds = $state(1000);\n\n\t$effect(() => {\n\t\t// This will be recreated whenever `milliseconds` changes\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, milliseconds);\n\n\t\treturn () => {\n\t\t\t// if a teardown function is provided, it will run\n\t\t\t// a) immediately before the effect re-runs\n\t\t\t// b) when the component is destroyed\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<h1>{count}</h1>\n\n<button onclick={() => (milliseconds *= 2)}>slower</button>\n<button onclick={() => (milliseconds /= 2)}>faster</button>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Arrays with Each Block - Svelte\nDESCRIPTION: Demonstrates basic usage of the 'each' block in Svelte for iterating over arrays of items. No dependencies are required, and it shows how to access individual item properties within the loop.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Testing Components with @testing-library/svelte\nDESCRIPTION: Demonstrates a modern approach to component testing using @testing-library/svelte. This example shows how to render components, simulate user events, and assert UI changes with better readability and maintainability.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { render, screen } from '@testing-library/svelte';\nimport userEvent from '@testing-library/user-event';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', async () => {\n\tconst user = userEvent.setup();\n\trender(Component);\n\n\tconst button = screen.getByRole('button');\n\texpect(button).toHaveTextContent(0);\n\n\tawait user.click(button);\n\texpect(button).toHaveTextContent(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Store Usage in Svelte Component\nDESCRIPTION: Demonstrates basic store operations including creation, subscription, and value updates using the $ prefix syntax.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up a new SvelteKit project\nDESCRIPTION: Commands to create, set up, and start a new SvelteKit application. This includes creating the project structure, installing dependencies, and launching the development server.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create my-app\ncd my-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Reactive State in Svelte\nDESCRIPTION: This snippet demonstrates how to create a simple reactive state using the $state rune in a Svelte component. It shows a button that increments a count when clicked.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rune Usage in Svelte\nDESCRIPTION: This snippet shows how to use a rune in Svelte. The $state rune is used to declare a reactive state variable 'message' with an initial value of 'hello'. Runes are prefixed with $ and look like functions, but have special compiler-level meaning.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/01-what-are-runes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet message = $state('hello');\n```\n\n----------------------------------------\n\nTITLE: Restricting Dynamic Component Types and Props with Svelte's Component Type - svelte - svelte\nDESCRIPTION: This snippet uses Svelte's Component type to restrict a property to only components with certain prop requirements. It demonstrates how to type the DynamicComponent prop and its expected props, as well as proper usage within the Svelte template. Inputs are component constructors and their typed props; output is a type-safe interface for rendering dynamic components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\n\timport type { Component } from 'svelte';\n\n\tinterface Props {\n\t\t// only components that have at most the \\\"prop\\\"\n\t\t// property required can be passed\n\t\tDynamicComponent: Component<{ prop: string }>;\n\t}\n\n\tlet { DynamicComponent }: Props = $props();\n</script>\n\n<DynamicComponent prop=\\\"foo\\\" />\n```\n\n----------------------------------------\n\nTITLE: Else Blocks in Each - Svelte\nDESCRIPTION: An 'each' block can utilize an 'else' clause to provide alternative rendering when the list is empty. This example shows rendering a fallback message when no items are present.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Derived State in Svelte\nDESCRIPTION: This snippet demonstrates creating derived state variables using the `$derived` rune in a Svelte component. The `doubled` variable is derived from `count`, showcasing reactive value updates. Key parameters include the derived expression `count * 2`, with expected outputs reflecting changes in `count`. Dependencies involve the `$state` function. The expression must be side-effect-free.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\n----------------------------------------\n\nTITLE: Overriding Derived State Values in Svelte\nDESCRIPTION: This snippet illustrates overriding derived state values temporarily in a Svelte component. The `likes` variable is derived from `post.likes`, displaying reactive UI updates during asynchronous operations. Key functionality includes incrementing and rolling back `likes`, with dependencies on server communication via the `like()` function.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { post, like } = $props();\n\n\tlet likes = $derived(post.likes);\n\n\tasync function onclick() {\n\t\t// increment the `likes` count immediately...\n\t\tlikes += 1;\n\n\t\t// and tell the server, which will eventually update `post`\n\t\ttry {\n\t\t\tawait like();\n\t\t} catch {\n\t\t\t// failed! roll back the change\n\t\t\tlikes -= 1;\n\t\t}\n\t}\n</script>\n\n<button {onclick}>🧡 {likes}</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Await Block Structure in Svelte\nDESCRIPTION: Demonstrates the full syntax of an await block in Svelte, including pending, fulfilled, and rejected states.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#await expression}...{:then name}...{:catch name}...{/await}\n```\n\n----------------------------------------\n\nTITLE: Mounting a Svelte Component to the DOM\nDESCRIPTION: Creates a component instance and mounts it to a specified DOM element with optional props. Unlike Svelte 4, effects and onMount callbacks don't run automatically during mounting.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2322\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Non-tracked Scopes with $effect.root in JavaScript\nDESCRIPTION: Shows how to use $effect.root to create a non-tracked scope that doesn't auto-cleanup. This is useful for nested effects that you want to manually control and for creating effects outside component initialization.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst destroy = $effect.root(() => {\n\t$effect(() => {\n\t\t// setup\n\t});\n\n\treturn () => {\n\t\t// cleanup\n\t};\n});\n\n// later...\ndestroy();\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte #if Block Structure\nDESCRIPTION: Demonstrates the basic structure of a Svelte #if block for conditional rendering.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#if expression}...{/if}\n```\n\n----------------------------------------\n\nTITLE: Typing and Using Props in Svelte Components with TypeScript - Svelte - svelte\nDESCRIPTION: Demonstrates how to add TypeScript support to Svelte component scripts by specifying lang=\\\"ts\\\" on the script tag. Shows variable typing, function typing, and event handling in a Svelte template using type annotations. Requires Svelte and TypeScript setup; lang=\\\"ts\\\" enables type-only features and static typing within Svelte files. Inputs are inferred from Svelte props and event handlers, outputs depend on the function and UI logic.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={(e: Event) => greet(e.target.innerText)}>\n\t{name as string}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Typing $state Variables in Svelte Components - typescript\nDESCRIPTION: Demonstrates typing usage for Svelte's $state helper in TypeScript code. Shows both initializing with a value for correct typing and a scenario where omitting the value leads to the type including undefined, triggering a type error. Inputs are intended to be the initial values (or lack thereof) passed into $state calls; output is a strongly-typed or type-error-producing variable depending on initialization.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet count: number = $state(0);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\n// Error: Type 'number | undefined' is not assignable to type 'number'\nlet count: number = $state();\n```\n\n----------------------------------------\n\nTITLE: Keyed Each Blocks - Svelte\nDESCRIPTION: Shows how to implement keyed iteration in 'each' blocks. Keys must uniquely identify each element, optimizing DOM diffing. Recommended keys are strings or numbers.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components in Svelte\nDESCRIPTION: Demonstrates how to import a component and use it within a Svelte template. Shows the difference between regular HTML elements and component tags.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Renaming Svelte Props During Destructuring\nDESCRIPTION: Shows how to rename a prop during destructuring using the `:` syntax. This is useful if the incoming prop name is a JavaScript reserved keyword (like `super`) or an invalid identifier. It also demonstrates combining renaming with setting a fallback value.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nlet { super: trouper = 'lights are gonna find me' } = $props();\n```\n\n----------------------------------------\n\nTITLE: Converting let to $state in Svelte 5\nDESCRIPTION: Shows how to migrate a reactive variable declaration from Svelte 4's implicit let syntax to Svelte 5's explicit $state rune.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using onMount with Cleanup Function in Svelte 5\nDESCRIPTION: Shows how to use the onMount hook with a return function that acts as cleanup when the component is unmounted. This pattern is useful for clearing intervals, event listeners, or other resources.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Attempting to Mutate a Non-Reactive Object Prop (Svelte)\nDESCRIPTION: Child component (`Child.svelte`) receiving a non-reactive object prop. Attempting to mutate a property (`object.count`) within the child component has no effect on reactivity, as the prop itself is not a reactive state proxy.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => {\n\t// has no effect\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped CSS Styles in Svelte Components - Svelte\nDESCRIPTION: This snippet demonstrates how to include a \\u003cstyle\\u003e block within a Svelte component to scope CSS to elements defined in that component. The component-level CSS is automatically isolated by Svelte, which hashes the style and adds a scoping class (e.g., .svelte-123xyz) to relevant elements. Developers can define styles targeting component-local elements, ensuring no leakage to the global scope. No external dependencies required. The example targets all \\u003cp\\u003e elements within the component, making them burlywood in color. Input: Svelte component markup. Output: CSS styles scoped only to this component's elements.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/01-scoped-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\\n\\tp {\\n\\t\\t/* this will only affect <p> elements in this component */\\n\\t\\tcolor: burlywood;\\n\\t}\\n</style>\\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Rest Props in Svelte\nDESCRIPTION: Illustrates how to use the rest property syntax (`...others`) during destructuring with `$props()` to capture all remaining props (those not explicitly destructured) into a separate object.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nlet { a, b, c, ...others } = $props();\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Action Implementation\nDESCRIPTION: Demonstrates the basic structure of a Svelte action using $effect for setup and cleanup. The action is called when an element is mounted and can perform setup and teardown operations.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/12-use.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node) {\n\t\t// the node has been mounted in the DOM\n\n\t\t$effect(() => {\n\t\t\t// setup goes here\n\n\t\t\treturn () => {\n\t\t\t\t// teardown goes here\n\t\t\t};\n\t\t});\n\t}\n</script>\n\n<div use:myaction>...</div>\n```\n\n----------------------------------------\n\nTITLE: Using the class: Directive in Svelte\nDESCRIPTION: Demonstrates using the `class:` directive to conditionally add classes based on boolean variables. The directive simplifies the syntax for adding classes when condition matches class name.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- These are equivalent -->\\n<div class={{ cool, lame: !cool }}>...</div>\\n<div class:cool={cool} class:lame={!cool}>...</div>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<div class:cool class:lame={!cool}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Whoosh Transition with Svelte\nDESCRIPTION: This Svelte code defines a custom `whoosh` transition function that scales an element in. It adjusts the scale transformation based on easing and parameters to provide a custom effect.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\\n<script>\\n\\timport { elasticOut } from 'svelte/easing';\\n\\n\\t/** @type {boolean} */\\n\\texport let visible;\\n\\n\\t/**\\n\\t * @param {HTMLElement} node\\n\\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\\n\\t */\\n\\tfunction whoosh(node, params) {\\n\\t\\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\\n\\n\\t\\treturn {\\n\\t\\t\\tdelay: params.delay || 0,\\n\\t\\t\\tduration: params.duration || 400,\\n\\t\\t\\teasing: params.easing || elasticOut,\\n\\t\\t\\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\\n\\t\\t};\\n\\t}\\n</script>\\n\\n{#if visible}\\n\\t<div in:whoosh>whooshes in</div>\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bindable Prop in Svelte\nDESCRIPTION: This snippet shows how to create a bindable prop 'value' in a Svelte component using the $bindable rune. It also demonstrates how to use the bind directive with an input element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/06-$bindable.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { value = $bindable(), ...props } = $props();\n</script>\n\n<input bind:value={value} {...props} />\n\n<style>\n\tinput {\n\t\tfont-family: 'Comic Sans MS';\n\t\tcolor: deeppink;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Svelte Action with Parameters\nDESCRIPTION: Shows how to pass and receive parameters in a Svelte action. The action receives both the DOM node and custom data as arguments.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/12-use.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node, data) {\n\t\t// ...\n\t}\n</script>\n\n<div use:myaction={data}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Typing Wrapper Components with SvelteHTMLElements Interface - svelte - svelte\nDESCRIPTION: Provides a method for typing props for native elements that do not have dedicated interfaces in Svelte. Demonstrates the use of SvelteHTMLElements for generic type-safe prop forwarding in wrapper components. Inputs are derived from $props and cast to the relevant SvelteHTMLElements shape; outputs are fully-typed props for the inner div.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\n\timport type { SvelteHTMLElements } from 'svelte/elements';\n\n\tlet { children, ...rest }: SvelteHTMLElements['div'] = $props();\n</script>\n\n<div {...rest}>\n\t{@render children?.()}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Window Event Handling in Svelte\nDESCRIPTION: Demonstrates the basic syntax for adding event handlers to the window object using the <svelte:window> element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:window onevent={handler} />\n```\n\n----------------------------------------\n\nTITLE: Keydown Event Handler Example in Svelte\nDESCRIPTION: Complete example showing how to handle keyboard events using <svelte:window> with a keydown event handler.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window onkeydown={handleKeydown} />\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Svelte\nDESCRIPTION: Demonstrates how to add event listeners to elements in Svelte using on:event syntax.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => console.log('clicked')}>click me</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Value Binding in Svelte\nDESCRIPTION: Demonstrates the basic syntax of bind:value directive with input elements, showing both explicit and shorthand formats.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<input bind:value={value} />\n<input bind:value />\n```\n\n----------------------------------------\n\nTITLE: Using Svelte Snippets for Repeated Content\nDESCRIPTION: Demonstrates how to use snippets to reduce duplicative code in an image gallery. The example creates a reusable figure snippet that can be rendered in different contexts.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t<figure>\n\t\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t\t</figure>\n\t\t</a>\n\t{:else}\n\t\t<figure>\n\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t</figure>\n\t{/if}\n{/each}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Component Props in Svelte\nDESCRIPTION: Demonstrates how to pass properties (props) to components in Svelte, including the shorthand syntax.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Widget foo={bar} answer={42} text=\"hello\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Separate In and Out Transitions in Svelte\nDESCRIPTION: This Svelte code demonstrates using the `in:` and `out:` directives to apply distinct transitions. The `div` element uses the `fly` transition when it enters the DOM (`in:fly={{ y: 200 }}`) and the `fade` transition when it leaves (`out:fade`). Visibility is controlled by a checkbox bound to the reactive `$state` variable `visible`. Requires importing `fade` and `fly` from `svelte/transition`.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/14-in-and-out.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { fade, fly } from 'svelte/transition';\n  \n  let visible = $state(false);\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n\t<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach: Using $derived for Computed Values\nDESCRIPTION: Shows the recommended approach for creating computed values using $derived instead of effects. This is cleaner and less error-prone than using effects for state synchronization.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Passing Reactive State to Functions in Svelte\nDESCRIPTION: This example demonstrates how to pass reactive state to functions in Svelte. It shows that functions need to use getter functions to access the current state values.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(getA, getB) {\n\treturn () => getA() + getB();\n}\n\nlet a = $state(1);\nlet b = $state(2);\nlet total = add(() => a, () => b);\nconsole.log(total()); // 3\n\na = 3;\nb = 4;\nconsole.log(total()); // 7\n```\n\n----------------------------------------\n\nTITLE: Defining Global State in Svelte Module\nDESCRIPTION: Shows how to define global state in a separate Svelte module, which can be imported and used across components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const myGlobalState = $state({\n\tuser: {\n\t\t// ...\n\t}\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Input Value Binding Example\nDESCRIPTION: Demonstrates binding an input's value to a state variable with live updates.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet message = $state('hello');\n</script>\n\n<input bind:value={message} />\n<p>{message}</p>\n```\n\n----------------------------------------\n\nTITLE: Using a Bindable Prop in a Parent Component\nDESCRIPTION: This snippet demonstrates how to use a bindable prop in a parent component. It imports the FancyInput component and binds its 'value' prop to a local state variable.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/06-$bindable.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('hello');\n</script>\n\n<FancyInput bind:value={message} />\n<p>{message}</p>\n```\n\n----------------------------------------\n\nTITLE: Triggering Svelte Transitions with {#key}\nDESCRIPTION: This snippet demonstrates how the `{#key}` block can be used to trigger a Svelte transition (`transition:fade`) on an element whenever the `value` variable changes. The `<div>` is destroyed and recreated, causing the fade transition to run each time, providing visual feedback for the data change.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/04-key.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n```\n\n----------------------------------------\n\nTITLE: Converting export let to $props in Svelte 5\nDESCRIPTION: Demonstrates how to migrate component props from Svelte 4's export let syntax to Svelte 5's $props rune with destructuring.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { optional = 'unset', required } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Derived Store Examples\nDESCRIPTION: Various examples of creating derived stores from single and multiple source stores.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { derived } from 'svelte/store';\n\nconst doubled = derived(a, ($a) => $a * 2);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { derived } from 'svelte/store';\n\nconst delayed = derived(\n\ta,\n\t($a, set) => {\n\t\tsetTimeout(() => set($a), 1000);\n\t},\n\t2000\n);\n\nconst delayedIncrement = derived(a, ($a, set, update) => {\n\tset($a);\n\tsetTimeout(() => update((x) => x + 1), 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Scoping CSS Keyframes and Animations in Svelte Components - Svelte\nDESCRIPTION: This snippet shows how to declare and use CSS keyframes and animation rules within a Svelte component's \\u003cstyle\\u003e block. Svelte automatically scopes the keyframe name and adjusts related animation rules to prevent naming collisions with other components or global CSS. The .bouncy class applies a component-local animation, and the @keyframes definition is unique to the component. No external dependencies are needed. Input: Svelte component style code. Output: Keyframes and animations that affect only this component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/01-scoped-styles.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\\n\\t.bouncy {\\n\\t\\tanimation: bounce 10s;\\n\\t}\\n\\n\\t/* these keyframes are only accessible inside this component */\\n\\t@keyframes bounce {\\n\\t\\t/* ... */\\n\\t}\\n</style>\\n\n```\n\n----------------------------------------\n\nTITLE: Using tick Function in Svelte 5\nDESCRIPTION: Shows how to use the tick function to ensure UI updates complete before continuing execution. The tick function returns a promise that resolves when pending state changes have been applied.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { tick } from 'svelte';\n\n\t$effect.pre(() => {\n\t\tconsole.log('the component is about to update');\n\t\ttick().then(() => {\n\t\t\t\tconsole.log('the component just updated');\n\t\t});\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Numeric Input Bindings\nDESCRIPTION: Shows how to bind numeric inputs (number and range) with min/max constraints and real-time calculation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n</script>\n\n<label>\n\t<input type=\"number\" bind:value={a} min=\"0\" max=\"10\" />\n\t<input type=\"range\" bind:value={a} min=\"0\" max=\"10\" />\n</label>\n\n<label>\n\t<input type=\"number\" bind:value={b} min=\"0\" max=\"10\" />\n\t<input type=\"range\" bind:value={b} min=\"0\" max=\"10\" />\n</label>\n\n<p>{a} + {b} = {a + b}</p>\n```\n\n----------------------------------------\n\nTITLE: Receiving Props in a Svelte Component using $props\nDESCRIPTION: Shows the basic usage of the `$props()` rune within a child component (`MyComponent.svelte`) to receive all passed props as a single object. The received `props` object can then be used to access individual property values, like `props.adjective`.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<p>this component is {props.adjective}</p>\n```\n\n----------------------------------------\n\nTITLE: Using $state in Svelte Class Fields\nDESCRIPTION: This snippet illustrates how to use $state in class fields, both public and private. It shows a Todo class with reactive properties and methods to manipulate the state.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Todo {\n\tdone = $state(false);\n\ttext = $state();\n\n\tconstructor(text) {\n\t\tthis.text = text;\n\t}\n\n\treset() {\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data with Slots vs Snippets Across Components\nDESCRIPTION: Shows how to migrate from Svelte 4's slot binding with 'let:' to Svelte 5's snippet approach for passing data between parent and child components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\timport List from './List.svelte';\n</script>\n\n<List items={['one', 'two', 'three']} ---let:item--->\n\t+++{#snippet item(text)}+++\n\t\t<span>{text}</span>\n\t+++{/snippet}+++\n\t---<span slot=\"empty\">No items yet</span>---\n\t+++{#snippet empty()}\n\t\t<span>No items yet</span>\n\t{/snippet}+++\n</List>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: List.svelte --->\n<script>\n\tlet { items, +++item, empty+++ } = $props();\n</script>\n\n{#if items.length}\n\t<ul>\n\t\t{#each items as entry}\n\t\t\t<li>\n\t\t\t\t---<slot item={entry} />---\n\t\t\t\t+++{@render item(entry)}+++\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{:else}\n\t---<slot name=\"empty\" />---\n\t+++{@render empty?.()}+++\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Writable Store with Subscription Handling\nDESCRIPTION: Demonstrates writable store creation with subscription lifecycle management.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0, () => {\n\tconsole.log('got a subscriber');\n\treturn () => console.log('no more subscribers');\n});\n\ncount.set(1); // does nothing\n\nconst unsubscribe = count.subscribe((value) => {\n\tconsole.log(value);\n}); // logs 'got a subscriber', then '1'\n\nunsubscribe(); // logs 'no more subscribers'\n```\n\n----------------------------------------\n\nTITLE: Applying Local and Global Transitions in Svelte\nDESCRIPTION: This snippet illustrates the difference between local and global transitions in Svelte. Local transitions are scoped to their block, while global transitions respond to state changes in parent blocks. It uses Svelte's transition directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#if x}\\n\\t{#if y}\\n\\t\\t<p transition:fade>fades in and out only when y changes</p>\\n\\n\\t\\t<p transition:fade|global>fades in and out when x or y change</p>\\n\\t{/if}\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Tag for Svelte Component - Svelte - Svelte\nDESCRIPTION: This snippet demonstrates assigning a custom HTML tag name to a Svelte component when compiling it as a custom element by setting the 'customElement' attribute in the <svelte:options> directive. No external dependencies are required besides Svelte itself. The main parameter is a string specifying the custom element's tag name (e.g., 'my-custom-element'). This configuration directs the compiler to expose the component as a Web Component using the given tag, without producing direct output in the file.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/07-svelte-options.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options customElement=\"my-custom-element\" />\n```\n\n----------------------------------------\n\nTITLE: Indexed Iteration - Svelte\nDESCRIPTION: Illustrates how to include an index within an 'each' block in Svelte, allowing access to item indices during iteration similar to an index in 'array.map(...)'.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n\n```\n\n----------------------------------------\n\nTITLE: Spread Attributes in Svelte\nDESCRIPTION: Shows how to use spread attributes to pass multiple properties to a component at once.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<Widget {...things} />\n```\n\n----------------------------------------\n\nTITLE: Migrating $: statements to $effect in Svelte 5\nDESCRIPTION: This snippet demonstrates how to convert a $: statement using run() from svelte/legacy to $effect() in Svelte 5. The $effect() function is preferred for side effects in the new version.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t---import { run } from 'svelte/legacy';---\n\t---run(() => {---\n\t+++$effect(() => {+++\n\t\t// some side effect code\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Obtaining DOM Node References via bind:this - Svelte - Svelte\nDESCRIPTION: This snippet illustrates the use of bind:this to acquire a reference to a DOM node—in this case, a canvas element. The script block declares a variable canvas of type HTMLCanvasElement and sets up a Svelte effect ($effect) to access the canvas context and invoke a drawing function. This pattern requires the component to be mounted before the DOM node reference is available.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\t/** @type {HTMLCanvasElement} */\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst ctx = canvas.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<canvas bind:this={canvas}></canvas>\n```\n\n----------------------------------------\n\nTITLE: Typing Svelte Props with JSDoc\nDESCRIPTION: Shows how to add type safety to Svelte component props using JSDoc comments within a standard JavaScript `<script>` tag. The `@type` annotation specifies the expected shape of the destructured props.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {{ adjective: string }} */\n\tlet { adjective } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Each Blocks Without an Item - Svelte\nDESCRIPTION: Explains rendering elements a specific number of times using 'each' blocks without defining an item variable. Useful for fixed iterations.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n\n<div class=\"chess-board\">\n\t{#each { length: 8 }, rank}\n\t\t{#each { length: 8 }, file}\n\t\t\t<div class:black={(rank + file) % 2 === 1}></div>\n\t\t{/each}\n\t{/each}\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Destructuring and Rest Patterns in Each Blocks - Svelte\nDESCRIPTION: Demonstrates the use of JavaScript destructuring and rest patterns within Svelte's 'each' blocks to extract and pass properties more flexibly.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n\n```\n\n----------------------------------------\n\nTITLE: Svelte #if Block with Else\nDESCRIPTION: Illustrates the complete structure of a Svelte #if block including an else clause.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{#if expression}...{:else}...{/if}\n```\n\n----------------------------------------\n\nTITLE: Passing Props to a Svelte Component\nDESCRIPTION: Demonstrates how a parent component (`App.svelte`) imports and renders a child component (`MyComponent`), passing a property named `adjective` with the value \"cool\". This is analogous to passing attributes to HTML elements.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\timport MyComponent from './MyComponent.svelte';\n</script>\n\n<MyComponent adjective=\"cool\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of <svelte:body> Component in Svelte\nDESCRIPTION: Demonstrates the basic syntax for using the <svelte:body> component to add an event listener to the document body.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/04-svelte-body.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:body onevent={handler} />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typing for Svelte Snippets\nDESCRIPTION: Shows how to use TypeScript to type Svelte snippets using the Snippet interface imported from 'svelte'. Demonstrates defining parameter types for snippets.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\tdata: any[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[any]>;\n\t}\n\n\tlet { data, children, row }: Props = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic <svelte:head> Structure in Svelte\nDESCRIPTION: Demonstrates the basic structure of the <svelte:head> element in Svelte. This element is used to insert content into the document's head section.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/05-svelte-head.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:head>...</svelte:head>\n```\n\n----------------------------------------\n\nTITLE: Full Await Block Example in Svelte\nDESCRIPTION: Provides a complete example of an await block handling all three states of a Promise: pending, fulfilled, and rejected.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled or not a Promise -->\n\t<p>The value is {value}</p>\n{:catch error}\n\t<!-- promise was rejected -->\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach: Using Function Bindings and Callbacks\nDESCRIPTION: Shows the recommended approach for linking inputs using function bindings or callbacks instead of effects. This is more explicit and avoids potential infinite loops.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet total = 100;\n\tlet spent = $state(0);\n\tlet left = $state(total);\n\n\tfunction updateSpent(value) {\n\t\tspent = value;\n\t\tleft = total - spent;\n\t}\n\n\tfunction updateLeft(value) {\n\t\tleft = value;\n\t\tspent = total - left;\n\t}\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={() => spent, updateSpent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={() => left, updateLeft} max={total} />\n\t{left}/{total} left\n</label>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attribute Values in Svelte\nDESCRIPTION: Shows how to use JavaScript expressions within attribute values for dynamic content.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<a href=\"page/{p}\">page {p}</a>\n```\n\n----------------------------------------\n\nTITLE: Using Object for Class Attribute in Svelte\nDESCRIPTION: This example demonstrates setting class attributes using an object, where truthy object keys determine the applied classes. It leverages the `clsx` library in Svelte 5.16. This requires the `props` object to include a `cool` key.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n\\tlet { cool } = $props();\\n</script>\\n\\n<!-- results in `class=\\\"cool\\\"` if `cool` is truthy,\\n     `class=\\\"lame\\\"` otherwise -->\\n<div class={{ cool, lame: !cool }}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Readable Store Implementation\nDESCRIPTION: Examples of creating readable stores with time-based updates and alternating values.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readable } from 'svelte/store';\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying a Fallback Value for a Bindable Prop\nDESCRIPTION: This snippet shows how to specify a fallback value for a bindable prop when no value is passed from the parent component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/06-$bindable.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet { value = $bindable('fallback'), ...props } = $props();\n```\n\n----------------------------------------\n\nTITLE: Using 'onerror' for Error Reporting\nDESCRIPTION: Illustrates how to use the 'onerror' attribute in a Svelte boundary to report errors using an external service. It showcases the passing of error and reset functions for error tracking and handling.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:boundary onerror={(e) => report(e)}>\n\t...\n</svelte:boundary>\n```\n\n----------------------------------------\n\nTITLE: Reactive Propagation with $derived in Svelte\nDESCRIPTION: This code demonstrates reactive state propagation in Svelte using `$derived`. It highlights how derived values, such as `large`, react to changes in dependencies like `count`. The snippet emphasizes Svelte's push-pull reactivity model, where derived expressions are recalculated on read, provided their dependencies change.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet large = $derived(count > 10);\n</script>\n\n<button onclick={() => count++}>\n\t{large}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Understanding Asynchronous Dependency Tracking in $effect (TypeScript)\nDESCRIPTION: Illustrates that `$effect` only tracks dependencies read synchronously within its function body. In this example, `color` is read immediately and becomes a dependency, while `size` is read inside a `setTimeout` callback (asynchronously) and thus changes to `size` will not cause the effect to re-run. Requires `canvas`, `color`, and `size` to be declared.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: index.ts\ndeclare let canvas: {\n\twidth: number;\n\theight: number;\n\tgetContext(type: '2d', options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D;\n};\ndeclare let color: string;\ndeclare let size: number;\n\n// ---cut---\n$effect(() => {\n\tconst context = canvas.getContext('2d');\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t// this will re-run whenever `color` changes...\n\tcontext.fillStyle = color;\n\n\tsetTimeout(() => {\n\t\t// ...but not when `size` changes\n\t\tcontext.fillRect(0, 0, size, size);\n\t}, 0);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Context in Svelte Parent Component\nDESCRIPTION: Demonstrates how to set context in a parent Svelte component using setContext function.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('my-context', 'hello from Parent.svelte');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Context Helpers in JavaScript\nDESCRIPTION: Defines helper functions for setting and getting context with TypeScript type annotations for improved type safety.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getContext, setContext } from 'svelte';\n\nconst key = {};\n\n/** @param {User} user */\nexport function setUserContext(user) {\n\tsetContext(key, user);\n}\n\nexport function getUserContext() {\n\treturn /** @type {User} */ (getContext(key));\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting onMount for Asynchronous Return Functions (JavaScript)\nDESCRIPTION: Highlights a change in `onMount` behavior in Svelte 4. Returning a function asynchronously from `onMount` (e.g., inside an `async` function) will now cause a type error because the returned cleanup function would not be registered correctly for component destruction. The fix involves ensuring the `onMount` callback itself is synchronous, potentially using `.then()` for asynchronous operations within it, and returning the cleanup function synchronously.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @noErrors\n// Example where this change reveals an actual bug\nonMount(\n---\t// someCleanup() not called because function handed to onMount is async\n\tasync () => {\n\t\tconst something = await foo();---\n+++\t// someCleanup() is called because function handed to onMount is sync\n\t() => {\n\t\tfoo().then(something => {...});\n\t\t// ...\n\t\treturn () => someCleanup();\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Using onDestroy Hook in Svelte 5\nDESCRIPTION: Demonstrates the onDestroy lifecycle hook which runs immediately before a component is unmounted. This is the only lifecycle hook that runs inside server-side components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { onDestroy } from 'svelte';\n\n\tonDestroy(() => {\n\t\tconsole.log('the component is being destroyed');\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Writable Store Implementation\nDESCRIPTION: Example of creating and using a writable store with subscription handling and value updates.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0);\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\ncount.set(1); // logs '1'\n\ncount.update((n) => n + 1); // logs '2'\n```\n\n----------------------------------------\n\nTITLE: Using $effect for Canvas Drawing in Svelte\nDESCRIPTION: Shows how to use the `$effect` rune to interact with a canvas element. The effect function accesses `$state` variables (`size`, `color`) and re-runs whenever they change, updating the canvas drawing accordingly. It depends on a bound `canvas` element and runs only in the browser after mount and subsequent state updates.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// this will re-run whenever `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\"></canvas>\n```\n\n----------------------------------------\n\nTITLE: Tracking Object vs. Property Dependencies in $effect (Svelte)\nDESCRIPTION: Explains the nuance of dependency tracking with `$effect`. Accessing the `$state` object (`state`) directly only triggers the effect if the object reference changes (rarely), while accessing a property like `state.value` tracks changes to that property. Accessing a `$derived` value (`derived`) always triggers re-runs on source changes because it creates a new object reference.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet state = $state({ value: 0 });\n\tlet derived = $derived({ value: state.value * 2 });\n\n\t// this will run once, because `state` is never reassigned (only mutated)\n\t$effect(() => {\n\t\tstate;\n\t});\n\n\t// this will run whenever `state.value` changes...\n\t$effect(() => {\n\t\tstate.value;\n\t});\n\n\t// ...and so will this, because `derived` is a new object each time\n\t$effect(() => {\n\t\tderived;\n\t});\n</script>\n\n<button onclick={() => (state.value += 1)}>\n\t{state.value}\n</button>\n\n<p>{state.value} doubled is {derived.value}</p>\n```\n\n----------------------------------------\n\nTITLE: Re-initializing Svelte Components with {#key}\nDESCRIPTION: This example shows how to use the `{#key}` block to force a Svelte `<Component />` to be destroyed and recreated whenever the `value` variable changes. This ensures the component is re-initialized from scratch, useful when internal state needs resetting based on an external value.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/04-key.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#key value}\n\t<Component />\n{/key}\n```\n\n----------------------------------------\n\nTITLE: Simplified Await Block with Then in Svelte\nDESCRIPTION: Illustrates a simplified await block syntax focusing only on the fulfilled state of a Promise.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{#await expression then name}...{/await}\n```\n\n----------------------------------------\n\nTITLE: Using $state.snapshot in Svelte\nDESCRIPTION: This snippet shows how to use $state.snapshot to take a static snapshot of a deeply reactive $state proxy. It's useful when passing state to external libraries that don't expect a proxy.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet counter = $state({ count: 0 });\n\n\tfunction onclick() {\n\t\t// Will log `{ count: ... }` rather than `Proxy { ... }`\n\t\tconsole.log($state.snapshot(counter));\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exporting Reactive State Across Modules in Svelte\nDESCRIPTION: This snippet shows how to correctly export reactive state across modules in Svelte. It demonstrates that directly reassigned state cannot be exported, and provides two alternative approaches.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 1: Don't reassign the exported state\nexport const counter = $state({\n\tcount: 0\n});\n\nexport function increment() {\n\tcounter.count += 1;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 2: Don't directly export the state\nlet count = $state(0);\n\nexport function getCount() {\n\treturn count;\n}\n\nexport function increment() {\n\tcount += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using $effect.pre for Pre-DOM Update Logic in Svelte\nDESCRIPTION: Demonstrates the `$effect.pre` rune, which runs an effect *before* Svelte applies DOM updates. This example implements an autoscroll feature for a message list. It checks the scroll position of a bound `div` pre-update (triggered by changes in `messages.length`) and schedules the actual scroll using `tick()` to occur post-update, ensuring the scroll happens after new messages are rendered.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { tick } from 'svelte';\n\n\tlet div = $state();\n\tlet messages = $state([]);\n\n\t// ...\n\n\t$effect.pre(() => {\n\t\tif (!div) return; // not yet mounted\n\n\t\t// reference `messages` array length so that this code re-runs whenever it changes\n\t\tmessages.length;\n\n\t\t// autoscroll when new messages are added\n\t\tif (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {\n\t\t\ttick().then(() => {\n\t\t\t\tdiv.scrollTo(0, div.scrollHeight);\n\t\t\t});\n\t\t}\n\t});\n</script>\n\n<div bind:this={div}>\n\t{#each messages as message}\n\t\t<p>{message}</p>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customized Fade Transition with Parameters in Svelte\nDESCRIPTION: This example shows how to use transition parameters to customize the fade effect's duration. It demonstrates the use of object parameters within the transition directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{#if visible}\\n\\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive Snippets in Svelte\nDESCRIPTION: Demonstrates how snippets can reference themselves and other snippets to create recursive structures, such as a countdown display with a final blastoff animation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet blastoff()}\n\t<span>🚀</span>\n{/snippet}\n\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n\n{@render countdown(10)}\n```\n\n----------------------------------------\n\nTITLE: Multiple Style Directives on a Single Element in Svelte\nDESCRIPTION: Shows how to apply multiple style: directives on a single element, including using static values and dynamic expressions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Document in Svelte\nDESCRIPTION: This snippet demonstrates how to add an event listener to the document object using the <svelte:document> element in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/03-svelte-document.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:document onevent={handler} />\n```\n\n----------------------------------------\n\nTITLE: Readonly Store Usage\nDESCRIPTION: Demonstrates creating a readonly store from a writable store.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readonly, writable } from 'svelte/store';\n\nconst writableStore = writable(1);\nconst readableStore = readonly(writableStore);\n\nreadableStore.subscribe(console.log);\n\nwritableStore.set(2); // console: 2\n// @errors: 2339\nreadableStore.set(2); // ERROR\n```\n\n----------------------------------------\n\nTITLE: Typing Wrapper Components Using HTMLButtonAttributes - svelte - svelte\nDESCRIPTION: Illustrates how to forward all DOM attributes and children to a native element by destructuring HTMLButtonAttributes from $props. Utilizes Svelte's type definitions for DOM elements, ensuring type safety when exposing native props in wrapper components. Inputs are the props object passed to the component; the output is a native button with forwarded props and optional children rendering.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>\n\t{@render children?.()}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Attempting to Mutate a Prop's Fallback Object Value (Svelte)\nDESCRIPTION: Child component (`Child.svelte`) defining a fallback value for an object prop. If the parent doesn't provide the `object` prop, the fallback `{ count: 0 }` is used. Attempting to mutate this fallback object has no effect because fallback values are not converted into reactive state proxies unless declared with `$bindable`.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n\tlet { object = { count: 0 } } = $props();\n</script>\n\n<button onclick={() => {\n\t// has no effect if the fallback value is used\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Destructuring Props in a Svelte Component using $props\nDESCRIPTION: Illustrates the common practice of destructuring the object returned by `$props()` directly into local variables within the component's script. This provides more concise access to individual prop values like `adjective`.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet { adjective } = $props();\n</script>\n\n<p>this component is {adjective}</p>\n```\n\n----------------------------------------\n\nTITLE: Using onMount Hook in Svelte 5\nDESCRIPTION: Demonstrates how to use the onMount lifecycle hook to run code after a component is mounted to the DOM. This hook is called during component initialization and doesn't run during server-side rendering.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Typed Svelte Action with Custom Events\nDESCRIPTION: Illustrates how to implement a typed Svelte action with custom event handlers. Includes type definitions for the node, parameters, and custom events.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/12-use.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/**\n\t * @type {import('svelte/action').Action<\n\t * \tHTMLDivElement,\n\t * \tundefined,\n\t * \t{\n\t * \t\tonswiperight: (e: CustomEvent) => void;\n\t * \t\tonswipeleft: (e: CustomEvent) => void;\n\t * \t\t// ...\n\t * \t}\n\t * >}\n\t */\n\tfunction gestures(node) {\n\t\t$effect(() => {\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swipeleft'));\n\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swiperight'));\n\t\t});\n\t}\n</script>\n\n<div\n\tuse:gestures\n\tonswipeleft={next}\n\tonswiperight={prev}\n>...</div>\n```\n\n----------------------------------------\n\nTITLE: Using :global Block for Multiple Global Selectors in Svelte\nDESCRIPTION: Demonstrates how to apply global styles to multiple selectors using a :global {...} block, including examples of both root-level and nested global styles.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/02-global-styles.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\t:global {\n\t\t/* applies to every <div> in your application */\n\t\tdiv { ... }\n\n\t\t/* applies to every <p> in your application */\n\t\tp { ... }\n\t}\n\n\t.a :global {\n\t\t/* applies to every `.b .c .d` element, in any component,\n\t\t   that is inside an `.a` element in this component */\n\t\t.b .c .d {...}\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating server-side rendering in Svelte 5\nDESCRIPTION: This example demonstrates how to update server-side rendering code for Svelte 5. It replaces the static render method with the new render function imported from svelte/server.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n+++import { render } from 'svelte/server';+++\nimport App from './App.svelte';\n\n---const { html, head } = App.render({ props: { message: 'hello' }});---\n+++const { html, head } = render(App, { props: { message: 'hello' }});+++\n```\n\n----------------------------------------\n\nTITLE: Creating Global @keyframes in Svelte\nDESCRIPTION: Shows how to create globally accessible keyframe animations by prefixing the animation name with -global-. The prefix is removed during compilation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/02-global-styles.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\t@keyframes -global-my-animation-name {\n\t\t/* code goes here */\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Parent Component Updating a Prop Passed to Child (Svelte)\nDESCRIPTION: Parent component (`App.svelte`) using `$state` to create reactive state (`count`) which is passed as a prop to the `Child` component. Clicking the button in the parent updates the state, which causes the prop value in the child to update.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (parent): {count}\n</button>\n\n<Child {count} />\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content in Svelte\nDESCRIPTION: Demonstrates how to render HTML content safely using the @html tag in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n{@html potentiallyUnsafeHtmlString}\n```\n\n----------------------------------------\n\nTITLE: Svelte #if Block with Else If\nDESCRIPTION: Shows the structure of a Svelte #if block including an else if condition.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#if expression}...{:else if expression}...{/if}\n```\n\n----------------------------------------\n\nTITLE: Function Bindings in Svelte\nDESCRIPTION: Shows how to use function bindings for validation and transformation of values, including both writable and readonly bindings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<input bind:value={\n\t() => value,\n\t(v) => value = v.toLowerCase()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating state management for component instances in Svelte 5\nDESCRIPTION: This snippet shows how to replace the $set method with $state for managing reactive properties in Svelte 5. It demonstrates creating a reactive property object and manipulating it directly.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$set({ foo: 'baz' });---\n+++const props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';+++\n```\n\n----------------------------------------\n\nTITLE: Comparing Event Modifiers in Svelte 4 vs 5\nDESCRIPTION: Shows how Svelte 4's event modifiers are replaced with explicit function wrappers in Svelte 5. The example demonstrates how to implement 'once' and 'preventDefault' modifiers as wrapper functions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<button on:click|once|preventDefault={handler}>...</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction once(fn) {\n\t\treturn function (event) {\n\t\t\tif (fn) fn.call(this, event);\n\t\t\tfn = null;\n\t\t};\n\t}\n\n\tfunction preventDefault(fn) {\n\t\treturn function (event) {\n\t\t\tevent.preventDefault();\n\t\t\tfn.call(this, event);\n\t\t};\n\t}\n</script>\n\n<button onclick={once(preventDefault(handler))}>...</button>\n```\n\n----------------------------------------\n\nTITLE: Form Reset with Default Value\nDESCRIPTION: Demonstrates input binding with defaultValue and form reset functionality.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet value = $state('');\n</script>\n\n<form>\n\t<input bind:value defaultValue=\"not the empty string\">\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Compiler Options - Svelte - Svelte\nDESCRIPTION: This snippet shows how to use the <svelte:options> block in a Svelte component to specify component-specific compiler options. The 'option' attribute is a placeholder, and should be replaced by a specific option such as 'runes', 'namespace', 'customElement', or 'css'. Dependencies include the Svelte compiler, and usage is supported in component files (.svelte). Inputs are boolean values, strings, or objects for their respective options; no outputs are produced directly, but the compiled component behavior is affected. Options like 'immutable' and 'accessors' are deprecated in recent Svelte versions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/07-svelte-options.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options option={value} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Transition with Svelte\nDESCRIPTION: This Svelte code demonstrates how to use the `fade` transition from the `svelte/transition` module. The code toggles the visibility of a div element with a fade effect. Dependencies include Svelte and the `fade` transition.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n\\timport { fade } from 'svelte/transition';\\n\\n\\tlet visible = $state(false);\\n</script>\\n\\n<button onclick={() => visible = !visible}>toggle</button>\\n\\n{#if visible}\\n\\t<div transition:fade>fades in and out</div>\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Defining an Error Boundary in Svelte\nDESCRIPTION: This snippet demonstrates how to create a Svelte boundary using the 'onerror' attribute to handle errors. It is designed to prevent errors occurring within a component from affecting the entire app. The snippet requires a Svelte application with version 5.3.0 or later.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:boundary onerror={handler}>...</svelte:boundary>\n```\n\n----------------------------------------\n\nTITLE: Boolean and Nullish Attribute Handling in Svelte\nDESCRIPTION: Demonstrates how Svelte handles boolean attributes and nullish values for attributes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n```\n\n----------------------------------------\n\nTITLE: Updating component unmounting in Svelte 5\nDESCRIPTION: This example demonstrates how to replace the $destroy method with the new unmount function in Svelte 5 for removing a component from the DOM.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n+++import { mount, unmount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$destroy();---\n+++const app = mount(App, { target: document.getElementById(\"app\") });\nunmount(app);+++\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Classes in Svelte\nDESCRIPTION: This snippet shows how to conditionally set a class on an HTML element in Svelte using a ternary expression. Dependencies include a boolean condition (`large`). The output will change the class between 'large' and 'small' depending on the condition.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class={large ? 'large' : 'small'}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Events from a Svelte Custom Element\nDESCRIPTION: This snippet demonstrates how to create a Svelte custom element with buttons that dispatch custom events. The $host rune is used to access the host element and trigger custom events when buttons are clicked.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/08-$host.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options customElement=\"my-stepper\" />\n\n<script>\n\tfunction dispatch(type) {\n\t\t$host().dispatchEvent(new CustomEvent(type));\n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\n----------------------------------------\n\nTITLE: Animating Keyed List Reordering with Built-In flip Animation - Svelte - Svelte\nDESCRIPTION: Demonstrates how to use the built-in flip animation by applying the animate:flip directive to list items inside a keyed {#each} block in Svelte. No external dependencies are required, but the directive must target an immediate child of a keyed {#each} block. When the order of the data changes, Svelte triggers an animation for affected items. Expects a list variable in the component's state; input is the reordered list of items and output is an animated reordering of elements. Animations only run for reorders, not for creation/removal.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- When `list` is reordered the animation will run -->\\n{#each list as item, index (item)}\\n\\t<li animate:flip>{item}</li>\\n{/each}\\n\n```\n\n----------------------------------------\n\nTITLE: Binding Component Properties (Props) - Svelte - Svelte\nDESCRIPTION: This snippet demonstrates binding the value property of a Keypad component to the pin variable using Svelte's bind:value={pin} syntax. This two-way binding allows changes inside Keypad to update the parent pin variable and vice versa. The Keypad component must support the value property for this binding to function correctly.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Keypad bind:value={pin} />\n```\n\n----------------------------------------\n\nTITLE: Using Expressions with Style Directive in Svelte\nDESCRIPTION: Shows how to use JavaScript expressions within the style: directive to dynamically set style values.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color={myColor}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Element Attributes in Svelte\nDESCRIPTION: Shows how standard HTML attributes work in Svelte components, including disabled buttons and class attributes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"foo\">\n\t<button disabled>can't touch this</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Window Scroll Position Binding in Svelte\nDESCRIPTION: Demonstrates how to bind the window's scroll position (scrollY) to a component variable.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:window bind:scrollY={y} />\n```\n\n----------------------------------------\n\nTITLE: Window Property Binding in Svelte\nDESCRIPTION: Shows how to bind window properties to component variables using the <svelte:window> element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:window bind:prop={value} />\n```\n\n----------------------------------------\n\nTITLE: Using Important Modifier with Style Directive in Svelte\nDESCRIPTION: Demonstrates how to mark a style as important using the |important modifier with the style: directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color|important=\"red\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Using Array for Class Attribute in Svelte\nDESCRIPTION: In this snippet, an array is used to dynamically compose class attributes. Composed classes depend on truthy evaluations of conditions and flattening using `clsx`. Requires `faded` and `large` state variables.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- if `faded` and `large` are both truthy, results in\\n     `class=\\\"saturate-0 opacity-50 scale-200\\\"` -->\\n<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Understanding Snippet Scope Rules in Svelte\nDESCRIPTION: Illustrates the lexical scoping rules for snippets. Snippets are visible to siblings and children of siblings in the same scope, but not accessible outside their declaring scope.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n\t{#snippet x()}\n\t\t{#snippet y()}...{/snippet}\n\n\t\t<!-- this is fine -->\n\t\t{@render y()}\n\t{/snippet}\n\n\t<!-- this will error, as `y` is not in scope -->\n\t{@render y()}\n</div>\n\n<!-- this will also error, as `x` is not in scope -->\n{@render x()}\n```\n\n----------------------------------------\n\nTITLE: Using Mixed Classes in Svelte Component\nDESCRIPTION: Demonstrates composing multiple class types in a component. Combines embedded styles with prop-based styles using objects and arrays, demonstrating flexibility with props.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Button.svelte --->\\n<script>\\n\\tlet props = $props();\\n</script>\\n\\n<button {...props} class={['cool-button', props.class]}>\\n\\t{@render props.children?.()}\\n</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\\n<script>\\n\\timport Button from './Button.svelte';\\n\\tlet useTailwind = $state(false);\\n</script>\\n\\n<Button\\n\\tonclick={() => useTailwind = true}\\n\\tclass={{ 'bg-blue-700 sm:w-1/2': useTailwind }}\\n>\\n\\tAccept the inevitability of Tailwind\\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Typing Svelte Props with a TypeScript Interface\nDESCRIPTION: Illustrates defining a separate TypeScript `interface` (named `Props`) to describe the shape of the component's props and then using that interface to type the destructured `$props()` result. This improves organization for components with multiple props.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tinterface Props {\n\t\tadjective: string;\n\t}\n\n\tlet { adjective }: Props = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Reactive Window Dimensions Using Svelte (Svelte, Svelte)\nDESCRIPTION: This code demonstrates importing the reactive window properties 'innerWidth' and 'innerHeight' from the 'svelte/reactivity/window' module and displaying their current values in a Svelte component. No additional dependencies are required beyond Svelte itself. The properties automatically update in response to window size changes, and can be used in templates and reactive expressions. Inputs are the reactive window properties; output is a rendered paragraph displaying the dynamic window dimensions. This approach eliminates the need for manual event listeners or window bindings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/21-svelte-reactivity-window.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n\\timport { innerWidth, innerHeight } from 'svelte/reactivity/window';\\n</script>\\n\\n<p>{innerWidth.current}x{innerHeight.current}</p>\n```\n\n----------------------------------------\n\nTITLE: State Management with Runes\nDESCRIPTION: Shows how to manage shared state using Svelte 5's runes feature as an alternative to stores.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// file: state.svelte.js\nexport const userState = $state({\n\tname: 'name',\n\t/* ... */\n});\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\timport { userState } from './state.svelte.js';\n</script>\n\n<p>User name: {userState.name}</p>\n<button onclick={() => {\n\tuserState.name = 'new name';\n}>\n\tchange name\n</button>\n```\n\n----------------------------------------\n\nTITLE: Style Directive Precedence in Svelte\nDESCRIPTION: Shows how style: directives take precedence over traditional style attributes when both are used on the same element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<div style=\"color: blue;\" style:color=\"red\">This will be red</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Snippets as Explicit Props\nDESCRIPTION: Shows how to pass snippets as props to components, providing custom content for different parts of the component's structure. Here, table header and row snippets are passed.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport Table from './Table.svelte';\n\n\tconst fruits = [\n\t\t{ name: 'apples', qty: 5, price: 2 },\n\t\t{ name: 'bananas', qty: 10, price: 1 },\n\t\t{ name: 'cherries', qty: 20, price: 0.5 }\n\t];\n</script>\n\n{#snippet header()}\n\t<th>fruit</th>\n\t<th>qty</th>\n\t<th>price</th>\n\t<th>total</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n\t<td>{d.price}</td>\n\t<td>{d.qty * d.price}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\n----------------------------------------\n\nTITLE: Binding contenteditable innerHTML - Svelte - Svelte\nDESCRIPTION: This snippet demonstrates how to bind the innerHTML property of a contenteditable div to a Svelte variable named html. This enables real-time synchronization of the element's HTML contents with the component's state, leveraging Svelte's bind: syntax. No extra dependencies are required, and the html variable acts as both input and output for the editable content.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<div contenteditable=\\\"true\\\" bind:innerHTML={html}></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Snippet Rendering in Svelte\nDESCRIPTION: Demonstrates how to define and render a reusable snippet multiple times with different parameters. The example shows a sum calculation snippet being rendered with different number pairs.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet sum(a, b)}\n\t<p>{a} + {b} = {a + b}</p>\n{/snippet}\n\n{@render sum(1, 2)}\n{@render sum(3, 4)}\n{@render sum(5, 6)}\n```\n\n----------------------------------------\n\nTITLE: Await Block Without Catch in Svelte\nDESCRIPTION: Shows the syntax for an await block without a catch clause, useful when error handling is not needed.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#await expression}...{:then name}...{/await}\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions in Svelte #if Block\nDESCRIPTION: Shows how to use multiple conditions in a Svelte #if block, including else if and else clauses. This example checks the temperature of porridge.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Chat Window with Autoscroll using $effect.pre in Svelte 5\nDESCRIPTION: Demonstrates upgrading from Svelte 4's beforeUpdate to Svelte 5's $effect.pre for implementing an autoscrolling chat window. The example shows how runes provide more granular control over reactivity compared to the deprecated lifecycle hooks.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { tick } from 'svelte';\n\n\tlet theme = $state('dark');\n\tlet messages = $state([]);\n\n\tlet viewport;\n\n\t$effect.pre(() => {\n\t\tmessages;\n\t\tconst autoscroll = viewport && viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;\n\n\t\tif (autoscroll) {\n\t\t\ttick().then(() => {\n\t\t\t\tviewport.scrollTo(0, viewport.scrollHeight);\n\t\t\t});\n\t\t}\n\n\t});\n\n\tfunction handleKeydown(event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tconst text = event.target.value;\n\t\t\tif (!text) return;\n\n\t\t\tmessages = [...messages, text];\n\t\t\tevent.target.value = '';\n\t\t}\n\t}\n\n\tfunction toggle() {\n\t\ttheme = theme === 'dark' ? 'light' : 'dark';\n\t}\n</script>\n\n<div class:dark={theme === 'dark'}>\n\t<div bind:this={viewport}>\n\t\t{#each messages as message}\n\t\t\t<p>{message}</p>\n\t\t{/each}\n\t</div>\n\n\t<input onkeydown={handleKeydown} />\n\n\t<button onclick={toggle}> Toggle dark mode </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using a Svelte Custom Element in the DOM - JavaScript\nDESCRIPTION: Shows how to instantiate a custom element as regular HTML by setting document.body.innerHTML. Includes custom content within the element using slotting. No dependencies other than the custom element registered as 'my-element'. Expected input: HTML markup with the custom tag used in the DOM. Output: The element gets rendered with slotted content. Limitations: assumes the element class is already defined with customElements.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndocument.body.innerHTML = `\\n\\t<my-element>\\n\\t\\t<p>This is some slotted content</p>\\n\\t</my-element>\\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Snippet Props in Svelte Components\nDESCRIPTION: Demonstrates how snippets declared inside a component's tags implicitly become props on the component, providing a more concise authoring experience.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- this is semantically the same as the above -->\n<Table data={fruits}>\n\t{#snippet header()}\n\t\t<th>fruit</th>\n\t\t<th>qty</th>\n\t\t<th>price</th>\n\t\t<th>total</th>\n\t{/snippet}\n\n\t{#snippet row(d)}\n\t\t<td>{d.name}</td>\n\t\t<td>{d.qty}</td>\n\t\t<td>{d.price}</td>\n\t\t<td>{d.qty * d.price}</td>\n\t{/snippet}\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for the {#key} Block in Svelte\nDESCRIPTION: This snippet illustrates the fundamental syntax of the Svelte `{#key}` block. It takes an `expression` as its key; when the value of this expression changes, the content enclosed within the block is destroyed and recreated.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/04-key.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#key expression}...{/key}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with a 'failed' Snippet\nDESCRIPTION: Demonstrates the use of a 'failed' snippet within a Svelte boundary to handle and recover from component errors. It includes a reset function to restore the component state. This feature requires Svelte version 5.3.0 or later.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:boundary>\n\t<FlakyComponent />\n\n\t{#snippet failed(error, reset)}\n\t\t<button onclick={reset}>oops! try again</button>\n\t{/snippet}\n</svelte:boundary>\n```\n\n----------------------------------------\n\nTITLE: Handling Void Element Errors with svelte:element (Svelte)\nDESCRIPTION: This snippet shows an attempt to render children inside a void element, such as an hr tag, using the <svelte:element> in Svelte. It defines a reactive 'tag' variable, then dynamically creates the element while providing children. In development mode, Svelte will throw a runtime error if a void element receives children. Requires no external dependencies and demonstrates a limitation of svelte:element regarding void tags and valid HTML structure.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/06-svelte-element.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet tag = $state('hr');\n</script>\n\n<svelte:element this={tag}>\n\tThis text cannot appear inside an hr element\n</svelte:element>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transition Function in JavaScript\nDESCRIPTION: This JavaScript code sets a template for a custom transition function in Svelte. It describes the structure of a transition function, including parameters and options for customizing the transition behavior.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\\n\\tdelay?: number,\\n\\tduration?: number,\\n\\teasing?: (t: number) => number,\\n\\tcss?: (t: number, u: number) => string,\\n\\ttick?: (t: number, u: number) => void\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Namespace with svelte:element (Svelte)\nDESCRIPTION: This example demonstrates explicitly setting an XML namespace when rendering an element dynamically with <svelte:element> in Svelte, ensuring the correct namespace (such as for SVG) is used. The tag for the dynamic element is supplied via a 'tag' variable, and the 'xmlns' attribute is set to the SVG namespace URI. This is necessary when Svelte cannot infer the correct namespace from context. No external dependencies required.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/06-svelte-element.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:element this={tag} xmlns=\"http://www.w3.org/2000/svg\" />\n```\n\n----------------------------------------\n\nTITLE: Correcting State Updates with Derived Values in Svelte 5\nDESCRIPTION: This snippet demonstrates the correct way to handle derived values in Svelte 5, avoiding the 'state_unsafe_mutation' error. It uses $derived for both 'even' and 'odd' values based on the 'count' state.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-errors/errors.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet count = 0;\n// ---cut---\nlet even = $derived(count % 2 === 0);\nlet odd = $derived(!even);\n```\n\n----------------------------------------\n\nTITLE: Using the Implicit Children Snippet in Svelte\nDESCRIPTION: Shows how content inside component tags that is not a snippet declaration implicitly becomes part of the 'children' snippet, which can be accessed in the component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<Button>click me</Button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Button.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<!-- result will be <button>click me</button> -->\n<button>{@render children()}</button>\n```\n\n----------------------------------------\n\nTITLE: Exporting Imperative Methods from a Svelte Component - Svelte - Svelte\nDESCRIPTION: This code from ShoppingCart.svelte showcases the export of an imperative method (empty) from a Svelte component. By using the export function syntax, the method becomes accessible on the component's instance for parent components via bind:this. This enables declarative-to-imperative communication between components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\t// All instance exports are available on the instance object\n\texport function empty() {\n\t\t// ...\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Snippet Props in Svelte\nDESCRIPTION: Demonstrates techniques for handling optional snippet props in Svelte components, including using optional chaining or conditional rendering with fallback content.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let { children } = $props();\n</script>\n\n{@render children?.()}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let { children } = $props();\n</script>\n\n{#if children}\n    {@render children()}\n{:else}\n    fallback content\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Properties to Svelte Component\nDESCRIPTION: Example showing how to pass both static and dynamic CSS custom properties to a Slider component. Demonstrates binding value and setting min/max properties along with custom CSS variables.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Slider\n\tbind:value\n\tmin={0}\n\tmax={100}\n\t--track-color=\"black\"\n\t--thumb-color=\"rgb({r} {g} {b})\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Svelte Custom Element Props - JavaScript\nDESCRIPTION: Demonstrates direct interaction with a custom Svelte web component via the DOM. Selects the custom element and reads or updates a prop (property) attached to the element, which triggers reactive updates (e.g., shadow DOM rerender). Requires a registered custom element instance present in the DOM and accessible via querySelector. Inputs: setting/getting props on the element. Output: reflects changes to the internal component. Limitation: only works for props explicitly listed in Svelte options.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// @noErrors\\nconst el = document.querySelector('my-element');\\n\\n// get the current value of the 'name' prop\\nconsole.log(el.name);\\n\\n// set a new value, updating the shadow DOM\\nel.name = 'everybody';\n```\n\n----------------------------------------\n\nTITLE: Event Handlers with Spread Props in Svelte 5\nDESCRIPTION: Demonstrates how to handle event spreading in Svelte 5, ensuring local event handlers aren't overwritten by spread properties.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n\t{...props}\n\tonclick={(e) => {\n\t\tdoStuff(e);\n\t\tprops.onclick?.(e);\n\t}}\n>\n\t...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Typing $props Object in Svelte Components - svelte - svelte\nDESCRIPTION: Demonstrates how to define and destructure a Props interface with TypeScript and apply it to $props within a Svelte component. Includes typing regular, optional, and generic callback properties, plus proper event handling and dynamic rendering. Dependencies are Svelte and TypeScript, especially for the Snippet type. Inputs are expected as component props; the output is type-safe usage within the Svelte component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\trequiredProperty: number;\n\t\toptionalProperty?: boolean;\n\t\tsnippetWithStringArgument: Snippet<[string]>;\n\t\teventHandler: (arg: string) => void;\n\t\t[key: string]: unknown;\n\t}\n\n\tlet {\n\t\trequiredProperty,\n\t\toptionalProperty,\n\t\tsnippetWithStringArgument,\n\t\teventHandler,\n\t\t...everythingElse\n\t}: Props = $props();\n</script>\n\n<button onclick={() => eventHandler('clicked button')}>\n\t{@render snippetWithStringArgument('hello')}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Animation Function Using css for Transform Effects - Svelte - Svelte/JS\nDESCRIPTION: Implements a custom Svelte animation (whizz) that animates elements by translating and rotating them based on reordering position changes in a keyed list. Animation parameters (dx, dy, d) are computed based on changes in position; the returned object sets delay, duration, easing (using the imported cubicOut), and a css function for transforms. Requires Svelte, Svelte's cubicOut easing, and a DOMRect-enabled browser. Expects the animate:whizz directive attached to immediate children of a keyed {#each} block; input is the reordered list, output is an animated transform and rotation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\\n<script>\\n\\timport { cubicOut } from 'svelte/easing';\\n\\n\\t/**\\n\\t * @param {HTMLElement} node\\n\\t * @param {{ from: DOMRect; to: DOMRect }} states\\n\\t * @param {any} params\\n\\t */\\n\\tfunction whizz(node, { from, to }, params) {\\n\\t\\tconst dx = from.left - to.left;\\n\\t\\tconst dy = from.top - to.top;\\n\\n\\t\\tconst d = Math.sqrt(dx * dx + dy * dy);\\n\\n\\t\\treturn {\\n\\t\\t\\tdelay: 0,\\n\\t\\t\\tduration: Math.sqrt(d) * 120,\\n\\t\\t\\teasing: cubicOut,\\n\\t\\t\\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\\n\\t\\t};\\n\\t}\\n</script>\\n\\n{#each list as item, index (item)}\\n\\t<div animate:whizz>{item}</div>\\n{/each}\\n\n```\n\n----------------------------------------\n\nTITLE: Generic TypeScript Typing for Svelte Snippets\nDESCRIPTION: Demonstrates using TypeScript generics to create more strongly-typed snippet props, ensuring that data and snippet parameters are of the same type.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"T\">\n\timport type { Snippet } from 'svelte';\n\n\tlet {\n\t\tdata,\n\t\tchildren,\n\t\trow\n\t}: {\n\t\tdata: T[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[T]>;\n\t} = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Typing Svelte Props Inline with TypeScript\nDESCRIPTION: Demonstrates adding type safety to Svelte component props using TypeScript. The type annotation `{ adjective: string }` is applied directly during the destructuring assignment of `$props()`.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { adjective }: { adjective: string } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Component Instance IDs using $props.id() (Svelte)\nDESCRIPTION: Demonstrates using the `$props.id()` rune (added in Svelte 5.20.0) to generate a unique ID specific to the current component instance. This ID is stable across server-side rendering and client-side hydration, making it useful for linking HTML elements using attributes like `for` and `aria-labelledby`.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tconst uid = $props.id();\n</script>\n\n<form>\n\t<label for=\"{uid}-firstname\">First Name: </label>\n\t<input id=\"{uid}-firstname\" type=\"text\" />\n\n\t<label for=\"{uid}-lastname\">Last Name: </label>\n\t<input id=\"{uid}-lastname\" type=\"text\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining the Svelte Store Interface in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the interface contract for a Svelte store. It requires a `subscribe` method that accepts a callback function (to receive value updates) and returns an unsubscribe function. An optional `set` method can be included for writable stores, which accepts a new value for the store. This contract allows developers to create custom store implementations compatible with Svelte's reactivity.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors\nstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Snippets with Basic Syntax\nDESCRIPTION: Shows the syntax for creating snippets in Svelte with and without parameters. Snippets are a way to create reusable chunks of markup inside components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet name()}...{/snippet}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet name(param1, param2, paramN)}...{/snippet}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Vite\nDESCRIPTION: Adjusts the Vite configuration to accommodate Vitest by specifying the 'browser' entry points in package.json files. This ensures compatibility for running browser-oriented tests on node environments.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\t// ...\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Snippets in Svelte\nDESCRIPTION: This snippet demonstrates how to declare and export snippets at the top level of a `.svelte` file using a `<script module>`. This functionality is available in Svelte version 5.5.0 and newer. It allows the reuse of snippet code across different components as long as there are no dependencies on non-module script declarations.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\\n\\texport { add };\\n<\\/script>\\n\\n{#snippet add(a, b)}\\n\\t{a} + {b} = {a + b}\\n{\\/snippet}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typewriter Transition Effect in Svelte\nDESCRIPTION: This Svelte snippet implements a typewriter transition effect, animating the text content display progressively. It validates node content and calculates duration based on text length and speed.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\\n<script>\\n\\texport let visible = false;\\n\\n\\t/**\\n\\t * @param {HTMLElement} node\\n\\t * @param {{ speed?: number }} params\\n\\t */\\n\\tfunction typewriter(node, { speed = 1 }) {\\n\\t\\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\\n\\n\\t\\tif (!valid) {\\n\\t\\t\\tthrow new Error(`This transition only works on elements with a single text node child`);\\n\\t\\t}\\n\\n\\t\\tconst text = node.textContent;\\n\\t\\tconst duration = text.length / (speed * 0.01);\\n\\n\\t\\treturn {\\n\\t\\t\\tduration,\\n\\t\\t\\ttick: (t) => {\\n\\t\\t\\t\\tconst i = ~~(text.length * t);\\n\\t\\t\\t\\tnode.textContent = text.slice(0, i);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n</script>\\n\\n{#if visible}\\n\\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Simplified Await Block with Catch in Svelte\nDESCRIPTION: Shows a simplified await block syntax focusing only on the rejected state of a Promise.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n{#await expression catch name}...{/await}\n```\n\n----------------------------------------\n\nTITLE: Custom Inspection Callback with $inspect.with\nDESCRIPTION: Shows how to use $inspect.with to provide a custom callback for handling state changes. Includes example of using debugger statement for updates.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/07-$inspect.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tdebugger; // or `console.trace`, or whatever you want\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\n----------------------------------------\n\nTITLE: Type Assertion for $state Variables in Svelte Classes - typescript\nDESCRIPTION: Shows the recommended way to assert types for $state in class properties where the initial value is assigned after instance creation. Uses 'as' type assertion to override the possibly-undefined type before assignment in the constructor. Inputs are class initializers and constructors; output is a strongly-typed $state-bound property inside the class.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Counter {\n\tcount = $state() as number;\n\tconstructor(initial: number) {\n\t\tthis.count = initial;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Context in Svelte Child Component\nDESCRIPTION: Shows how to retrieve context in a child Svelte component using getContext function and display it.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst message = getContext('my-context');\n</script>\n\n<h1>{message}, inside Child.svelte</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Runes in Vitest Test Files\nDESCRIPTION: Illustrates the use of runes in test files handled by Vitest, leveraging the state management and testing capabilities within Svelte applications.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet count = $state(0);\n\tlet double = multiplier(() => count, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tcount = 5;\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Using aria-activedescendant without tabindex in Svelte\nDESCRIPTION: Shows an incorrect implementation where an element with aria-activedescendant is missing a tabindex attribute, which is required for proper accessibility.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->\n<div aria-activedescendant=\"some-id\"></div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Snippet Rendering in Svelte\nDESCRIPTION: Shows how to conditionally render snippets using a ternary expression to choose between two different snippets based on a condition.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{@render (cool ? coolSnippet : lameSnippet)()}\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Snippet Scope\nDESCRIPTION: Shows how snippets can reference values declared outside themselves, such as in script tags or parent blocks. Snippets have access to their surrounding lexical scope.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { message = `it's great to see you!` } = $props();\n</script>\n\n{#snippet hello(name)}\n\t<p>hello {name}! {message}!</p>\n{/snippet}\n\n{@render hello('alice')}\n{@render hello('bob')}\n```\n\n----------------------------------------\n\nTITLE: Function Tracing with $inspect.trace\nDESCRIPTION: Shows how to use $inspect.trace to track reactive state changes within effects. Added in Svelte 5.14 for development debugging.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/07-$inspect.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { doSomeWork } from './elsewhere';\n\n\t$effect(() => {\n\t\t+++$inspect.trace();+++\n\t\tdoSomeWork();\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Class Attribute Usage in Svelte\nDESCRIPTION: This snippet shows how to use the `ClassValue` type for type-safe class names in Svelte with TypeScript. It relies on importing the `ClassValue` type and setting props with dynamic class values.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\\\"ts\\\">\\n\\timport type { ClassValue } from 'svelte/elements';\\n\\n\\tconst props: { class: ClassValue } = $props();\\n</script>\\n\\n<div class={['original', props.class]}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Using :global(...) Modifier for Individual Selectors in Svelte\nDESCRIPTION: Demonstrates how to apply global styles to specific selectors using the :global(...) modifier. Shows examples for targeting body elements, nested elements, and class-based selectors.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/02-global-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\t:global(body) {\n\t\t/* applies to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* applies to all <strong> elements, in any component,\n\t\t   that are inside <div> elements belonging\n\t\t   to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.big.red) {\n\t\t/* applies to all <p> elements belonging to this component\n\t\t   with `class=\"big red\"`, even if it is applied\n\t\t   programmatically (for example by a library) */\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Parent Passing a Non-Reactive Object Prop (Svelte)\nDESCRIPTION: Parent component (`App.svelte`) passing a regular (non-reactive) JavaScript object as a prop to the `Child` component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n</script>\n\n<Child object={{ count: 0 }} />\n```\n\n----------------------------------------\n\nTITLE: Avoiding accesskey attribute in Svelte\nDESCRIPTION: Demonstrates the incorrect usage of the accesskey attribute, which should be avoided to prevent accessibility complications.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Avoid using accesskey -->\n<div accesskey=\"z\"></div>\n```\n\n----------------------------------------\n\nTITLE: Optional Snippet Rendering with Optional Chaining\nDESCRIPTION: Demonstrates using optional chaining to safely render snippets that might be undefined, particularly useful when working with prop-based snippets.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Scoped Style Example\nDESCRIPTION: Shows how CSS styles in a Svelte component are scoped to that component only. The styling will only affect elements within this component and not elsewhere in the application.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/03-svelte-files.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Shorthand Attribute Syntax in Svelte\nDESCRIPTION: Shows the shorthand syntax for attributes where the name and value are the same.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<button {disabled}>...</button>\n<!-- equivalent to\n<button disabled={disabled}>...</button>\n-->\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency Tracking within $effect (TypeScript)\nDESCRIPTION: Illustrates how conditional logic affects `$effect` dependencies using an example with `canvas-confetti`. If the `if (condition)` block runs, both `$state` variables `condition` and `color` (read inside the block) become dependencies. If the `else` block runs, only `condition` is tracked as a dependency for that run, as `color` isn't accessed. Dependencies are determined by the values read during the *last* execution.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ambient.d.ts\ndeclare module 'canvas-confetti' {\n\tinterface ConfettiOptions {\n\t\tcolors: string[];\n\t}\n\n\tfunction confetti(opts?: ConfettiOptions): void;\n\texport default confetti;\n}\n\n// @filename: index.js\n// ---cut---\nimport confetti from 'canvas-confetti';\n\nlet condition = $state(true);\nlet color = $state('#ff3e00');\n\n$effect(() => {\n\tif (condition) {\n\t\tconfetti({ colors: [color] });\n\t} else {\n\t\tconfetti();\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Component Documentation Comments in Svelte\nDESCRIPTION: Illustrates how to add special @component comments for component documentation that appears on hover.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<!--\n@component\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```html\n  <Main name=\"Arethra\">\n  ```\n-->\n<script>\n\tlet { name } = $props();\n</script>\n\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Handling src and @html Hydration Mismatches\nDESCRIPTION: A pattern for handling hydration mismatches with src attributes and @html content in Svelte 5. This approach temporarily unsets and then resets values to force an update after mounting, which is necessary since Svelte 5 no longer automatically repairs these mismatches.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_31\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { markup, src } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the values...\n\t\tconst initial = { markup, src };\n\n\t\t// unset them...\n\t\tmarkup = src = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tmarkup = initial.markup;\n\t\t\tsrc = initial.src;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n<img {src} />\n```\n\n----------------------------------------\n\nTITLE: Managing Errors Outside Svelte Boundary\nDESCRIPTION: This snippet provides an example of error and reset management outside of a Svelte boundary using a 'onerror' function. The code requires a Svelte environment and involves conditional rendering based on the error state.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet error = $state(null);\n\tlet reset = $state(() => {});\n\n\tfunction onerror(e, r) {\n\t\terror = e;\n\t\treset = r;\n\t}\n</script>\n\n<svelte:boundary {onerror}>\n\t<FlakyComponent />\n</svelte:boundary>\n\n{#if error}\n\t<button onclick={() => {\n\t\terror = null;\n\t\treset();\n\t}}>\n\t\toops! try again\n\t</button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Missing Contenteditable Attribute\nDESCRIPTION: Indicates the requirement of the 'contenteditable' attribute for certain two-way bindings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n> 'contenteditable' attribute is required for textContent, innerHTML and innerText two-way bindings\n```\n\n----------------------------------------\n\nTITLE: Styling Raw HTML in Svelte Using Global Styles\nDESCRIPTION: This snippet shows how to apply global styles to raw HTML content in a Svelte component using the `:global` CSS modifier, given that scoped styles won't automatically apply to raw HTML.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/08-@html.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\tarticle :global {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Nesting Child Component in Parent Component\nDESCRIPTION: Illustrates how to nest a Child component within a Parent component in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Parent>\n\t<Child />\n</Parent>\n```\n\n----------------------------------------\n\nTITLE: Simple Conditional Rendering in Svelte\nDESCRIPTION: Demonstrates a basic example of conditional rendering using a Svelte #if block. It checks if the 'answer' variable is equal to 42.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Updating Event Dispatcher Typing in Svelte 4 (TypeScript)\nDESCRIPTION: Illustrates the stricter type checking for `createEventDispatcher` in Svelte 4. Payloads must now be explicitly defined as optional, required, or non-existent (using `null`), and TypeScript will enforce these types at the dispatch call site, preventing omissions or unexpected arguments that were allowed in Svelte 3.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2554 2345\nimport { createEventDispatcher } from 'svelte';\n\nconst dispatch = createEventDispatcher<{\n\toptional: number | null;\n\trequired: string;\n\tnoArgument: null;\n}>();\n\n// Svelte version 3:\ndispatch('optional');\ndispatch('required'); // I can still omit the detail argument\ndispatch('noArgument', 'surprise'); // I can still add a detail argument\n\n// Svelte version 4 using TypeScript strict mode:\ndispatch('optional');\ndispatch('required'); // error, missing argument\ndispatch('noArgument', 'surprise'); // error, cannot pass an argument\n```\n\n----------------------------------------\n\nTITLE: Handling Svelte State Proxies in Console Logging\nDESCRIPTION: Suggests using $inspect or $state.snapshot for logging Svelte state proxies to avoid confusion with browser devtools displaying the proxy itself rather than its value.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Passive Touch and Wheel Events in Svelte 5\nDESCRIPTION: Explains how touch and wheel events are now passive by default in Svelte 5, improving responsiveness.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<Component prop=\"this{is}valid\" />\n```\n\n----------------------------------------\n\nTITLE: Const Tag Usage\nDESCRIPTION: Example of using the @const tag within if blocks\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n{@const}\n```\n\n----------------------------------------\n\nTITLE: Basic {@debug} Usage with Object in Svelte\nDESCRIPTION: Demonstrates basic usage of the {@debug} tag with a user object, showing how to debug specific variable changes. The example creates a user object with firstname and lastname properties and debugs the entire object.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/10-@debug.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring flip Animation Parameters with animate:flip - Svelte - Svelte\nDESCRIPTION: Shows how to specify configuration parameters for the animate:flip directive, such as delay, using an object literal inside an expression tag. To customize animations, pass a parameters object to animate:flip on a keyed {#each} child. The snippet expects a list input and parameters like delay, which controls when the animation starts. Output is a delayed animation during reordered list transitions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#each list as item, index (item)}\\n\\t<li animate:flip={{ delay: 500 }}>{item}</li>\\n{/each}\\n\n```\n\n----------------------------------------\n\nTITLE: Using console.trace with $inspect\nDESCRIPTION: Demonstrates using console.trace as a callback for $inspect.with to track state change origins.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/07-$inspect.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$inspect(stuff).with(console.trace);\n```\n\n----------------------------------------\n\nTITLE: Basic E2E Test using Playwright\nDESCRIPTION: Illustrates an E2E test using Playwright, validating that a home page has the expected h1 text visible. This approach emphasizes UI-driven testing without dependencies on Svelte specifics.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { expect, test } from '@playwright/test';\n\ntest('home page has expected h1', async ({ page }) => {\n\tawait page.goto('/');\n\tawait expect(page.locator('h1')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing New SvelteKit Project with NPM\nDESCRIPTION: Commands to create, install dependencies, and start a new SvelteKit project. This sets up a development environment using the official Svelte application framework.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/02-getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create myapp\ncd myapp\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Fixing Stale Assignment in Svelte State Management\nDESCRIPTION: Demonstrates how to correctly update a state proxy array to avoid discarding pushed values. The fix involves separating the null coalescing assignment and array push into two statements.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet object = $state({ array: null });\n\n\tfunction add() {\n\t\t(object.array ??= []).push(object.array.length);\n\t}\n</script>\n\n<button onclick={add}>add</button>\n<p>items: {JSON.stringify(object.items)}</p>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet object = { array: [0] };\n// ---cut---\nfunction add() {\n\tobject.array ??= [];\n\tobject.array.push(object.array.length);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multiplier Function in Svelte\nDESCRIPTION: Defines a multiplier function in JavaScript for use in Svelte applications, with an initial state and a set method for updating the multiplier value. Dependencies include a state management tool like $state.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param {number} initial\n * @param {number} k\n */\nexport function multiplier(initial, k) {\n\tlet count = $state(initial);\n\n\treturn {\n\t\tget value() {\n\t\t\treturn count * k;\n\t\t},\n\t\t/** @param {number} c */\n\t\tset: (c) => {\n\t\t\tcount = c;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Invalid Attribute Name\nDESCRIPTION: Indicates that a specific attribute name is not valid.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n> '%name%' is not a valid attribute name\n```\n\n----------------------------------------\n\nTITLE: Reactive Dimension Bindings with Chart Component - Svelte - Svelte\nDESCRIPTION: This snippet binds the offsetWidth and offsetHeight properties of a div to Svelte variables width and height, which are then passed as props to a nested Chart component. It utilizes Svelte's readonly bindings, internally relying on a ResizeObserver to update the bound variables. The width and height parameters represent the current dimensions of the container, dynamically adjusting the child Chart’s rendering.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Animation Function Signature - Svelte Animations - JavaScript\nDESCRIPTION: Defines the expected signature and return type for a custom Svelte animation function. The function receives a DOM node, state objects containing from and to DOMRects, and an optional params object. It can return properties controlling delay, duration, easing, and must provide at least one of css or tick for animation. This snippet is for authors implementing custom animate: directives and describes required interface details—no executable logic. Dependencies: DOMRect from the DOM API.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/// copy: false\\n// @noErrors\\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {\\n\\tdelay?: number,\\n\\tduration?: number,\\n\\teasing?: (t: number) => number,\\n\\tcss?: (t: number, u: number) => string,\\n\\ttick?: (t: number, u: number) => void\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Binding to Document Properties in Svelte\nDESCRIPTION: This example shows how to bind to properties of the document object using the <svelte:document> element in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/03-svelte-document.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:document bind:prop={value} />\n```\n\n----------------------------------------\n\nTITLE: Using Actions and Event Listeners on Document in Svelte\nDESCRIPTION: This snippet illustrates how to use actions and add specific event listeners (like visibilitychange) to the document object using the <svelte:document> element in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/03-svelte-document.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />\n```\n\n----------------------------------------\n\nTITLE: Resolving Hydration Mismatch for HTML Blocks in Svelte\nDESCRIPTION: Demonstrates how to handle {@html ...} block value changes between server and client renders, ensuring proper hydration and updates.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { markup } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the value...\n\t\tconst initial = markup;\n\n\t\t// unset it...\n\t\tmarkup = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tmarkup = initial;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n```\n\n----------------------------------------\n\nTITLE: SVG Implementation with Custom Properties\nDESCRIPTION: Demonstrates how custom properties are handled within SVG elements, using a g element instead of the standard wrapper.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<g style=\"--track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</g>\n```\n\n----------------------------------------\n\nTITLE: Loop Guard Timeout\nDESCRIPTION: Code protection feature added in version 3.14.0 to prevent infinite loops.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nloopGuardTimeout\n```\n\n----------------------------------------\n\nTITLE: Declaring Bindable Properties with $bindable Rune - Svelte - Svelte\nDESCRIPTION: This script demonstrates two ways to declare a bindable component property using Svelte's experimental $bindable rune. The first uses $bindable() for a property bindableProperty, signalling that it can be bound by a parent component. The second assigns a fallback value with $bindable('fallback value'), which serves only if the property is not bound. If bound without a value, a runtime error is thrown. This technique enables controlled two-way prop binding.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\tlet { readonlyProperty, bindableProperty = $bindable() } = $props();\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\tlet { bindableProperty = $bindable('fallback value') } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Style Directive Usage in Svelte\nDESCRIPTION: Demonstrates the equivalence between using the style: directive and the traditional style attribute for setting a single style property.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Props in Svelte Component Scripts - svelte - svelte\nDESCRIPTION: Shows how to declare a generic relationship on component props using the generics attribute in Svelte with TypeScript. The example demonstrates a list component exposing props and callback functions that share a generic type. Inputs include generic parameterized props; output is a typed component where generics enforce relationships between properties.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\" generics=\\\"Item extends { text: string }\\\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect(item: Item): void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n\n{#each items as item}\n\t<button onclick={() => select(item)}>\n\t\t{item.text}\n\t</button>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest in Vite Projects\nDESCRIPTION: Installs the Vitest testing framework, which is recommended for Svelte projects using Vite. This installation is necessary for running unit and integration tests.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D vitest\n```\n\n----------------------------------------\n\nTITLE: Await Block Without Catch Clause in Svelte\nDESCRIPTION: Demonstrates an await block without a catch clause, useful when error handling is not needed or no error is possible.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled -->\n\t<p>The value is {value}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Refactored Multiplier Function Using Runes\nDESCRIPTION: Refactors the multiplier function to leverage a getter function for dynamic state access. This approach simplifies state interaction within Svelte applications.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param {() => number} getCount\n * @param {number} k\n */\nexport function multiplier(getCount, k) {\n\treturn {\n\t\tget value() {\n\t\t\treturn getCount() * k;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for jsdom Environment\nDESCRIPTION: Details the addition of jsdom configuration in vite.config.js for simulating DOM environments necessary for component testing with Vitest.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\tplugins: [\n\t\t/* ... */\n\t],\n\ttest: {\n\t\tenvironment: 'jsdom'\n\t},\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Scope Change for Default Slot Bindings in Svelte 4\nDESCRIPTION: Demonstrates that in Svelte 4, variables bound using `let:` on the default slot are no longer implicitly available within named slots (like `slot=\"bar\"`) of the same component instance, and vice-versa. This change enforces more consistent and predictable scoping for slot bindings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n```\n\n----------------------------------------\n\nTITLE: Using a Svelte Custom Element with Event Listeners\nDESCRIPTION: This snippet shows how to import and use a custom element in a Svelte component. It demonstrates setting up event listeners for the custom events dispatched by the my-stepper element and maintaining a count state that updates in response to these events.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/08-$host.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport './Stepper.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1}\n\tonincrement={() => count += 1}\n></my-stepper>\n\n<p>count: {count}</p>\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Preprocessing to Svelte Project Configuration - Vite/SvelteKit - typescript\nDESCRIPTION: Configures preprocessing for Svelte to use TypeScript features outside of type-only syntax by using vitePreprocess within svelte.config.js. Dependencies include '@sveltejs/vite-plugin-svelte' and a supporting build tool (e.g. Vite or SvelteKit). The key parameter is the preprocess setting which enables comprehensive TypeScript support including transpilation. No direct input/output, but this config is required for correct project behavior.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\t// Note the additional `{ script: true }`\n\tpreprocess: vitePreprocess({ script: true })\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests Using Vitest\nDESCRIPTION: Demonstrates how to write unit tests for a Svelte module with Vitest. It includes dependency imports and a test case verifying the functionality of a multiplier function.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet double = multiplier(0, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tdouble.set(5);\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Await Block with Catch in Svelte\nDESCRIPTION: Illustrates a simplified await block that only handles the rejected state, useful for error-only scenarios.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Fallback Content for Optional Snippets\nDESCRIPTION: Shows how to handle undefined snippets using an if-else block to provide fallback content when the snippet is not available.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>fallback content</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Augmenting Svelte Elements Module in TypeScript\nDESCRIPTION: Augments the type definitions of the Svelte 'svelte/elements' module to add support for specific custom HTML elements and experimental attributes. The snippet shows how to import existing attribute interfaces, extend them for custom elements, and export an empty object to prevent undesired module augmentation. Inputs are additional element or attribute definitions; outputs are refined types for Svelte component elements. Dependencies include TypeScript and the 'svelte/elements' package.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n/// file: additional-svelte-typings.d.ts\\nimport { HTMLButtonAttributes } from 'svelte/elements';\\n\\ndeclare module 'svelte/elements' {\\n\\texport interface SvelteHTMLElements {\\n\\t\\t'custom-button': HTMLButtonAttributes;\\n\\t}\\n\\n\\t// allows for more granular control over what element to add the typings to\\n\\texport interface HTMLButtonAttributes {\\n\\t\\tveryexperimentalattribute?: string;\\n\\t}\\n}\\n\\nexport {}; // ensure this is not an ambient module, else types will be overridden instead of augmented\n```\n\n----------------------------------------\n\nTITLE: Svelte Changelog Entry Format\nDESCRIPTION: Standard format for documenting patch changes in Svelte framework versions, including PR references and fix descriptions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- fix: ensure non-matching elements are scoped for `:not(...)` selector ([#13999](https://github.com/sveltejs/svelte/pull/13999))\n\n- fix: ensure video elements autoplay in safari ([#14095](https://github.com/sveltejs/svelte/pull/14095))\n```\n\n----------------------------------------\n\nTITLE: Event Handler Updates in Svelte 5\nDESCRIPTION: Demonstrates the new way of handling events in Svelte 5 without the on: directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\tfunction onclick() {\n\t\tcount++;\n\t}\n</script>\n\n<button {onclick}>\n\tclicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Lazy Component Loading with Await in Svelte\nDESCRIPTION: Demonstrates using an await block with dynamic import for lazy loading of components in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n{#await import('./Component.svelte') then { default: Component }}\n\t<Component />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Declaring Svelte Custom Elements with <svelte:options> - Svelte\nDESCRIPTION: Defines a Svelte component as a custom element (web component) by using the <svelte:options> element with the customElement attribute set to a string (the desired custom tag name). The script section initializes props from $props with a fallback for 'name'. The component outputs a greeting that can be slotted with additional content. Requires Svelte with compiler set to customElement mode, and consumers need to use the defined tag name in HTML or JS. 'name' can be set as attribute or property. Expected input: 'name' prop set via DOM property or attribute. Output: custom HTML element rendering slotted and dynamic content.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options customElement=\\\"my-element\\\" />\\n\\n<script>\\n\\tlet { name = 'world' } = $props();\\n</script>\\n\\n<h1>Hello {name}!</h1>\\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Simplified Await Block with Then in Svelte\nDESCRIPTION: Shows a simplified await block that only handles the fulfilled state, omitting the pending state handling.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Documenting Svelte Components with Comments\nDESCRIPTION: This Svelte code demonstrates how to add documentation to components using comment syntax recognized by the Svelte Language Server. JSDoc comments (`/** ... */`) are used within the `<script>` tag to document exported props like `name`. A special HTML comment (`<!-- @component ... -->`) provides component-level documentation, supporting markdown and code blocks, which is surfaced by tools like VS Code hover information. The `@component` directive is required for the component-level HTML comment documentation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/99-faq.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this component.\nIt will show up on hover.\n\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```svelte\n  <main name=\"Arethra\">\n  ```\n-->\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n```\n```\n\n----------------------------------------\n\nTITLE: Scoping :is() and :where() Selectors in Svelte 5 CSS\nDESCRIPTION: Shows how to use :global() to scope :is() and :where() selectors in Svelte 5 CSS, particularly when using Tailwind's @apply directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\nmain :global {\n\t@apply bg-blue-100 dark:bg-blue-900;\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Local Transitions in Svelte 4\nDESCRIPTION: Explains that Svelte 4 transitions are local by default. This means a transition (like `in:slide`) inside a nested block (`#if success`) will only play when its immediate parent block is toggled, not when a higher-level parent block (`#if show`) is toggled. To revert to the Svelte 3 behavior (global transitions), use the `|global` modifier. The migration script adds this modifier automatically.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n{#if show}\n\t...\n\t{#if success}\n\t\t<p in:slide>Success</p>\n\t{/each}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid State Update in Svelte 5\nDESCRIPTION: This snippet shows an incorrect attempt to update state inside a derived value, which is forbidden in Svelte 5. It demonstrates the 'state_unsafe_mutation' error and explains why it occurs.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-errors/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\tlet even = $state(true);\n\n\tlet odd = $derived.by(() => {\n\t\teven = count % 2 === 0;\n\t\treturn !even;\n\t});\n</script>\n\n<button onclick={() => count++}>{count}</button>\n\n<p>{count} is even: {even}</p>\n<p>{count} is odd: {odd}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Element Options and Extending Lifecycle - Svelte\nDESCRIPTION: Shows configuration of advanced custom element options for a Svelte component. Uses the customElement object in <svelte:options> to specify tag name, disables shadow DOM, configures prop reflection, type coercion and attribute name, and uses the 'extend' function to augment lifecycle with ElementInternals for form association. Dependencies: Svelte v4+, DOM support for customElements and ElementInternals API. Inputs: custom options object. Outputs: HTML element with special behavior for forms, exposed props and functions. Limitations: custom features only work in supporting browsers.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options\\n\\tcustomElement={{\\n\\t\ttag: 'custom-element',\\n\\t\tshadow: 'none',\\n\\t\tprops: {\\n\\t\\t\\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\\n\\t\\t},\\n\\t\\textend: (customElementConstructor) => {\\n\\t\\t\\t// Extend the class so we can let it participate in HTML forms\\n\\t\\t\\treturn class extends customElementConstructor {\\n\\t\\t\\t\\tstatic formAssociated = true;\\n\\n\\t\\t\\t\\tconstructor() {\\n\\t\\t\\t\\t\\tsuper();\\n\\t\\t\\t\\t\\tthis.attachedInternals = this.attachInternals();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Add the function here, not below in the component so that\\n\\t\\t\\t\\t// it's always available, not just when the inner Svelte component\\n\\t\\t\\t\\t// is mounted\\n\\t\\t\\t\\trandomIndex() {\\n\\t\\t\\t\\t\\tthis.elementIndex = Math.random();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}}\\n/>\\n\\n<script>\\n\\tlet { elementIndex, attachedInternals } = $props();\\n\\t// ...\\n\\tfunction check() {\\n\\t\\tattachedInternals.checkValidity();\\n\\t}\\n</script>\\n\\n...\n```\n\n----------------------------------------\n\nTITLE: Expecting Component Constructor or Instance Types in Svelte with TypeScript - svelte - svelte\nDESCRIPTION: Shows how to specify types for both Svelte component constructor and instance variables in a Svelte+TypeScript context. Utilizes typeof for the constructor and the imported SvelteComponent class for the instance. Inputs are assignments of Svelte components; outputs are strongly-typed variables for runtime and template use.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\n\timport MyComponent from './MyComponent.svelte';\n\n\tlet componentConstructor: typeof MyComponent = MyComponent;\n\tlet componentInstance: MyComponent;\n</script>\n\n<MyComponent bind:this={componentInstance} />\n```\n\n----------------------------------------\n\nTITLE: Migrating Named Slots to Component Props with Render Tags\nDESCRIPTION: Demonstrates how to replace named slots in Svelte 4 with component props and render tags in Svelte 5 for multiple content placeholders.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t+++let { header, main, footer } = $props();+++\n</script>\n\n<header>\n\t---<slot name=\"header\" />---\n\t+++{@render header()}+++\n</header>\n\n<main>\n\t---<slot name=\"main\" />---\n\t+++{@render main()}+++\n</main>\n\n<footer>\n\t---<slot name=\"footer\" />---\n\t+++{@render footer()}+++\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Properties in Svelte 4\nDESCRIPTION: Demonstrates how to make component properties accessible on the component instance using the 'accessors' option in Svelte 4.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options accessors={true} />\n\n<script>\n\t// available via componentInstance.name\n\texport let name;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Svelte Await Block Syntax\nDESCRIPTION: Example of the {#await} block catch shorthand syntax supported in version 3.21.0.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise catch error}\n  <p>{error.message}</p>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Implementing Each Block Reassignment and Binding in Svelte Runes Mode\nDESCRIPTION: This snippet demonstrates the correct way to reassign and bind to array elements in Svelte's runes mode, using the index to modify the array directly.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/script.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet array = $state([1, 2, 3]);\n</script>\n\n{#each array as entry, i}\n\t<!-- reassignment -->\n\t<button onclick={() => array[i] = 4}>change</button>\n\n\t<!-- binding -->\n\t<input bind:value={array[i]}>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Missing captions for video elements in Svelte\nDESCRIPTION: Illustrates the correct and incorrect ways to provide captions for video elements, which are essential for accessibility.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<video><track kind=\"captions\" /></video>\n\n<audio muted></audio>\n\n<!-- A11y: Media elements must have a <track kind=\"captions\"> -->\n<video></video>\n\n<!-- A11y: Media elements must have a <track kind=\"captions\"> -->\n<video><track /></video>\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Prop Extraction and Component Use in TypeScript - typescript\nDESCRIPTION: Demonstrates how to use the Component and ComponentProps types in TypeScript to type functions that operate on Svelte components and their props. This pattern is crucial for writing helpers that accept generic Svelte components and safely extract their prop types. Inputs are a component and a prop object; if the prop types do not match, a compile-time error occurs.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component, ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nfunction withProps<TComponent extends Component<any>>(\n\tcomponent: TComponent,\n\tprops: ComponentProps<TComponent>\n) {}\n\n// Errors if the second argument is not the correct props expected\n// by the component in the first argument.\nwithProps(MyComponent, { foo: 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Low-Level Component Testing with Vitest\nDESCRIPTION: Provides an example of low-level component testing using Vitest, illustrating how to instantiate a component, perform UI interactions, and assert outcomes using jsdom to simulate a browser environment.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { flushSync, mount, unmount } from 'svelte';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', () => {\n\tconst component = mount(Component, {\n\t\ttarget: document.body,\n\t\tprops: { initial: 0 }\n\t});\n\n\texpect(document.body.innerHTML).toBe('<button>0</button>');\n\n\tdocument.body.querySelector('button').click();\n\tflushSync();\n\n\texpect(document.body.innerHTML).toBe('<button>1</button>');\n\n\tunmount(component);\n});\n```\n\n----------------------------------------\n\nTITLE: Default TypeScript Preprocessing for SvelteKit/Vite Projects - typescript\nDESCRIPTION: Showcases the typical svelte.config.js setup as generated by SvelteKit or Vite projects with TypeScript. vitePreprocess is used without extra options. This file ensures that the build system recognizes and processes TypeScript in Svelte files. Requires '@sveltejs/vite-plugin-svelte', input is the default config file, and output is TypeScript-enabled build processing.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Shorthand Form for Style Directive in Svelte\nDESCRIPTION: Demonstrates the shorthand form of the style: directive where the property name is used without an explicit value.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color>...</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Declaration\nDESCRIPTION: Example showing support for CSS @layer functionality\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer\n```\n\n----------------------------------------\n\nTITLE: Correct Global and Scoped Selector Implementation\nDESCRIPTION: Shows the correct way to separate :global and scoped selectors into distinct rules, fixing the invalid implementation from the previous example.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/style.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:global {\n    y {\n        color: red;\n    }\n}\n\nx y {\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Single Svelte Warning\nDESCRIPTION: Demonstrates how to ignore a specific Svelte compiler warning (`a11y_autofocus`) for a single element using a `<!-- svelte-ignore <code> -->` comment placed directly above the element. This is useful for bypassing warnings that are considered false positives in a specific context.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/30-compiler-warnings.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- svelte-ignore a11y_autofocus -->\n<input autofocus />\n```\n\n----------------------------------------\n\nTITLE: Hydrating Server-Rendered Svelte Content\nDESCRIPTION: Reuses existing server-rendered HTML to create an interactive component. Like mount, effects don't run automatically during hydration and may require flushSync() to execute immediately.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2322\nimport { hydrate } from 'svelte';\nimport App from './App.svelte';\n\nconst app = hydrate(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\n----------------------------------------\n\nTITLE: Redundant alt text for images in Svelte\nDESCRIPTION: Shows examples of correct and incorrect alt text for images, avoiding redundant words like 'image', 'photo', or 'picture'.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n\n<!-- aria-hidden, won't be announced by screen reader -->\n<img src=\"bar\" aria-hidden=\"true\" alt=\"Picture of me taking a photo of an image\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Picture of baz fixing a bug.\" />\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using $effect for State Synchronization\nDESCRIPTION: Example of an anti-pattern where $effect is used to synchronize state. This approach should be avoided in favor of using $derived for computed values.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet doubled = $state();\n\n\t// don't do this!\n\t$effect(() => {\n\t\tdoubled = count * 2;\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Component Event Dispatcher\nDESCRIPTION: Error handling example from version 3.13.0 showing event dispatcher initialization.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncreateEventDispatcher()\n```\n\n----------------------------------------\n\nTITLE: Documenting Missing 'customElement' Option in Svelte\nDESCRIPTION: This snippet reminds users that the 'customElement' option is required when generating a custom element, suggesting they might have forgotten to include 'customElement: true' in their compile options.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## options_missing_custom_element\n\n> The `customElement` option is used when generating a custom element. Did you forget the `customElement: true` compile option?\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Elements Missing Required Content in Svelte\nDESCRIPTION: Examples showing elements that require content for accessibility but are empty, triggering the a11y_missing_content rule, including empty anchor tags and headings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <a> element should have child content -->\n<a href=\"/foo\"></a>\n\n<!-- A11y: <h1> element should have child content -->\n<h1></h1>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Multiple Svelte Warnings with Explanation\nDESCRIPTION: Illustrates suppressing multiple Svelte compiler warnings (`a11y_click_events_have_key_events`, `a11y_no_static_element_interactions`) for an element using a single comma-separated `<!-- svelte-ignore ... -->` comment. It also shows how to include an optional explanatory note in parentheses within the comment for documentation purposes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/30-compiler-warnings.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->\n<div onclick>...</div>\n```\n\n----------------------------------------\n\nTITLE: Parent Passing a Reactive Object Prop (Svelte)\nDESCRIPTION: Parent component (`App.svelte`) using `$state` to create a reactive object which is passed as a prop to the `Child` component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet object = $state({count: 0});\n</script>\n\n<Child {object} />\n```\n\n----------------------------------------\n\nTITLE: Missing keyboard event handler for click events in Svelte\nDESCRIPTION: Shows a div element with an onclick event but no accompanying keyboard event handler, which is necessary for accessibility.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: visible, non-interactive elements with an onclick event must be accompanied by a keyboard event handler. -->\n<div onclick={() => {}}></div>\n```\n\n----------------------------------------\n\nTITLE: Correct State Reference in Parent Component\nDESCRIPTION: Fixed example showing proper way to pass reactive state to context using a function wrapper.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tlet count = $state(0);\n\tsetContext('count', () => count);\n</script>\n\n<button onclick={() => count++}>\n\tincrement\n</button>\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Reference in Parent Component\nDESCRIPTION: Example showing incorrect way of passing state to context in Svelte, where state updates won't be reflected.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tlet count = $state(0);\n\n\t// warning: state_referenced_locally\n\tsetContext('count', count);\n</script>\n\n<button onclick={() => count++}>\n\tincrement\n</button>\n```\n\n----------------------------------------\n\nTITLE: Converting $: to $effect in Svelte 5\nDESCRIPTION: Shows how to migrate side effects from Svelte 4's $: syntax to Svelte 5's $effect rune.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\t$effect(() => {\n\t\tif (count > 5) {\n\t\t\talert('Count is too high!');\n\t\t}\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting $: to $derived in Svelte 5\nDESCRIPTION: Demonstrates how to migrate a reactive declaration from Svelte 4's $: syntax to Svelte 5's $derived rune.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tconst double = $derived(count * 2);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Break Statement in Reactive Block\nDESCRIPTION: Example of using break$ to exit a reactive block early, added in version 3.13.0.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbreak $\n```\n\n----------------------------------------\n\nTITLE: Child Component with Stale Context\nDESCRIPTION: Example showing a child component receiving a stale value from context that won't update.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst count = getContext('count');\n</script>\n\n<!-- This will never update -->\n<p>The count is {count}</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Missing Animation Key\nDESCRIPTION: Reminds the user to add a key to the each block when using the 'animate:' directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> An element that uses the `animate:` directive must be the only child of a keyed `{#each ...}` block. Did you forget to add a key to your each block?\n```\n\n----------------------------------------\n\nTITLE: Svelte Directive and Component Changes\nDESCRIPTION: Collection of changes related to directives and component behavior, including ref directives preventing HTMLified content and store computed properties updating components immediately upon declaration.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- `ref` directives prevent HTMLified content\n- Store computed properties update components immediately upon declaration\n- Evaluate `each` key in child scope\n- Only update dynamic component props\n- Fix DOM event context\n```\n\n----------------------------------------\n\nTITLE: Child Component Receiving and Reassigning Prop (Svelte)\nDESCRIPTION: Child component (`Child.svelte`) receiving the `count` prop via `$props()` destructuring. It displays the prop value and allows locally reassigning the `count` variable upon button click. This local reassignment is temporary and doesn't affect the parent's state; the prop value will reset if the parent passes an updated value.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n\tlet { count } = $props();\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (child): {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Logger Function with Effects in Svelte\nDESCRIPTION: Implements a logger function that uses $effect to log updates as changes occur, facilitating tracking of state transformations in Svelte apps. Uses the $state API for reactive state management.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @param {() => any} getValue\n */\nexport function logger(getValue) {\n\t/** @type {any[]} */\n\tlet log = $state([]);\n\n\t$effect(() => {\n\t\tlog.push(getValue());\n\t});\n\n\treturn {\n\t\tget value() {\n\t\t\treturn log;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Effects in Vitest\nDESCRIPTION: Describes how to test Svelte functions that entail side effects using Vitest. The example involves utilizing $effect.root to manage effect-driven state changes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { logger } from './logger.svelte.js';\n\ntest('Effect', () => {\n\tconst cleanup = $effect.root(() => {\n\t\tlet count = $state(0);\n\t\tlet log = logger(() => count);\n\n\t\tflushSync();\n\t\texpect(log.value).toEqual([0]);\n\n\t\tcount = 1;\n\t\tflushSync();\n\n\t\texpect(log.value).toEqual([0, 1]);\n\t});\n\n\tcleanup();\n});\n```\n\n----------------------------------------\n\nTITLE: Style Properties Example\nDESCRIPTION: Example showing support for style properties on SVG components and svelte:component\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n--style-props\n```\n\n----------------------------------------\n\nTITLE: Script Context Migration Example\nDESCRIPTION: Shows the migration from deprecated context=\"module\" to the new module attribute syntax in Svelte components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script ---context=\"module\"--- +++module+++>\n\tlet foo = 'bar';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Animation Duplicate\nDESCRIPTION: Shows the error message when an element has more than one 'animate' directive.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> An element can only have one 'animate' directive\n```\n\n----------------------------------------\n\nTITLE: Registering a Svelte Custom Element with customElements.define - JavaScript\nDESCRIPTION: Imports a Svelte component that was compiled as a custom element, then registers it with the browser using customElements.define. Uses the static 'element' property provided when the component is compiled with the customElement option. Required dependencies: compiled Svelte custom element module, access to DOM Custom Elements API. Input: Svelte component module. Output: Defines a new tag usable in the DOM. Must be called before using custom tag in HTML.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// @noErrors\\nimport MyElement from './MyElement.svelte';\\n\\ncustomElements.define('my-element', MyElement.element);\n```\n\n----------------------------------------\n\nTITLE: Correctly Resetting Counter in Svelte Context\nDESCRIPTION: Shows the correct way to reset a counter stored in context to maintain reactivity.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick={() => counter.count = 0}>\n\treset\n</button>\n```\n\n----------------------------------------\n\nTITLE: Text Expressions in Svelte\nDESCRIPTION: Shows how to include JavaScript expressions as text in Svelte templates using curly braces.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<h1>Hello {name}!</h1>\n<p>{a} + {b} = {a + b}.</p>\n\n<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>\n```\n\n----------------------------------------\n\nTITLE: Documenting Removed 'hydratable' Option in Svelte\nDESCRIPTION: This snippet explains that the 'hydratable' option has been removed, as Svelte components are now always hydratable.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## options_removed_hydratable\n\n> The `hydratable` option has been removed. Svelte components are always hydratable now\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Unquoted Sequence in Attribute\nDESCRIPTION: Reminds to enclose attribute values containing expressions in quote marks.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n> Attribute values containing `{...}` must be enclosed in quote marks, unless the value only contains the expression\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Invalid Animation Placement\nDESCRIPTION: Explains the correct usage of the 'animate:' directive within a keyed each block.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> An element that uses the `animate:` directive must be the only child of a keyed `{#each ...}` block\n```\n\n----------------------------------------\n\nTITLE: Script Module Usage Example\nDESCRIPTION: Demonstrates using a module script to track component instantiations across the application. The module script runs once when the module first evaluates, while the regular script runs for each component instance.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/03-svelte-files.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n\tlet total = 0;\n</script>\n\n<script>\n\ttotal += 1;\n\tconsole.log(`instantiated ${total} times`);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Animation Function Using tick for Imperative Effects - Svelte - Svelte/JS\nDESCRIPTION: Creates a custom Svelte animation (whizz) that uses the tick callback to imperatively change the color of animated elements during a reorder in a keyed each block. The tick function, invoked with time parameters, sets the node's style color based on progress. This approach is useful for non-CSS-based effects but may be less performant than css-based animations. Depends on Svelte, cubicOut from svelte/easing, and DOMRect. Input is a reordered list; output is animated color transitions on nodes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: App.svelte --->\\n<script>\\n\\timport { cubicOut } from 'svelte/easing';\\n\\n\\t/**\\n\\t * @param {HTMLElement} node\\n\\t * @param {{ from: DOMRect; to: DOMRect }} states\\n\\t * @param {any} params\\n\\t */\\n\\tfunction whizz(node, { from, to }, params) {\\n\\t\\tconst dx = from.left - to.left;\\n\\t\\tconst dy = from.top - to.top;\\n\\n\\t\\tconst d = Math.sqrt(dx * dx + dy * dy);\\n\\n\\t\\treturn {\\n\\t\\t\\tdelay: 0,\\n\\t\\t\\tduration: Math.sqrt(d) * 120,\\n\\t\\t\\teasing: cubicOut,\\n\\t\\t\\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\\n\\t\\t};\\n\\t}\\n</script>\\n\\n{#each list as item, index (item)}\\n\\t<div animate:whizz>{item}</div>\\n{/each}\\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated beforeUpdate and afterUpdate Hooks in Svelte 5\nDESCRIPTION: Shows the deprecated beforeUpdate and afterUpdate lifecycle hooks from Svelte 4. These are shimmed in Svelte 5 for backward compatibility but not available in components using runes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { beforeUpdate, afterUpdate } from 'svelte';\n\n\tbeforeUpdate(() => {\n\t\tconsole.log('the component is about to update');\n\t});\n\n\tafterUpdate(() => {\n\t\tconsole.log('the component just updated');\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Snippet Export in Svelte\nDESCRIPTION: This example shows an invalid snippet export where the snippet references a variable defined outside the module scope, which is not allowed in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/script.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n\texport { greeting };\n</script>\n\n<script>\n\tlet message = 'hello';\n</script>\n\n{#snippet greeting(name)}\n\t<p>{message} {name}!</p>\n{/snippet}\n```\n\n----------------------------------------\n\nTITLE: Documenting Renamed 'generate' Options in Svelte\nDESCRIPTION: This snippet informs that the 'generate' option values \"dom\" and \"ssr\" have been renamed to \"client\" and \"server\" respectively in Svelte compiler options.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## options_renamed_ssr_dom\n\n> `generate: \"dom\"` and `generate: \"ssr\"` options have been renamed to \"client\" and \"server\" respectively\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Dynamic Contenteditable Attribute\nDESCRIPTION: Warns about using a dynamic 'contenteditable' attribute with two-way binding.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> 'contenteditable' attribute cannot be dynamic if element uses two-way binding\n```\n\n----------------------------------------\n\nTITLE: Valid and Invalid {@debug} Syntax Examples in Svelte\nDESCRIPTION: Shows correct and incorrect ways to use the {@debug} tag. Demonstrates that it accepts comma-separated variable names but not expressions or complex object properties.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/10-@debug.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Compiles -->\n{@debug user}\n{@debug user1, user2, user3}\n\n<!-- WON'T compile -->\n{@debug user.firstname}\n{@debug myArray[0]}\n{@debug !isReady}\n{@debug typeof user === 'object'}\n```\n\n----------------------------------------\n\nTITLE: Unquoted Attribute Values in Svelte\nDESCRIPTION: Demonstrates that attribute values can be unquoted in Svelte, similar to HTML.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<input type=checkbox />\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Invalid Sequence Expression in Runes Mode\nDESCRIPTION: Explains the limitation of using sequence expressions as attribute/directive values in runes mode.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n> Sequence expressions are not allowed as attribute/directive values in runes mode, unless wrapped in parentheses\n```\n\n----------------------------------------\n\nTITLE: Defining Unknown Code Error Messages in Svelte\nDESCRIPTION: These snippets define error message templates for unknown code in Svelte. They inform the user that a code pattern is not recognized, with an optional suggestion for a similar valid code.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/misc.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n> `%code%` is not a recognised code\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n> `%code%` is not a recognised code (did you mean `%suggestion%`?)\n```\n\n----------------------------------------\n\nTITLE: Removed Option Error Message\nDESCRIPTION: Error message template shown when attempting to use a compiler option that has been removed\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/options.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## options_removed\n\n> Invalid compiler option: %details%\n```\n\n----------------------------------------\n\nTITLE: Using $effect.tracking in Svelte Components\nDESCRIPTION: Demonstrates how to use $effect.tracking to detect whether code is running inside a tracking context such as an effect or template. This is useful for implementing reactive abstractions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tconsole.log('in component setup:', $effect.tracking()); // false\n\n\t$effect(() => {\n\t\tconsole.log('in effect:', $effect.tracking()); // true\n\t});\n</script>\n\n<p>in template: {$effect.tracking()}</p> <!-- true -->\n```\n\n----------------------------------------\n\nTITLE: Converting Class Props and Rest Props in Svelte 5\nDESCRIPTION: Shows how to handle class renaming and rest props using the new $props syntax in Svelte 5.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { class: klass, ...rest } = $props();\n</script>\n<button class={klass} {...rest}>click me</button>\n```\n\n----------------------------------------\n\nTITLE: Mutating a Reactive Object Prop (Warning) (Svelte)\nDESCRIPTION: Child component (`Child.svelte`) receiving a reactive object prop created with `$state` in the parent. Mutating the object's property (`object.count`) from within the child component *will* update the value displayed, but it triggers a runtime warning (`ownership_invalid_mutation`) because the child is mutating state it doesn't own. This practice is discouraged.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => {\n\t// will cause the count below to update,\n\t// but with a warning. Don't mutate\n\t// objects you don't own!\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Playwright Configuration for E2E Testing\nDESCRIPTION: Sets up the configuration file for Playwright, specifying the web server command, port, test directory, and file patterns. This setup is essential for running end-to-end tests using Playwright.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst config = {\n\twebServer: {\n\t\tcommand: 'npm run build && npm run preview',\n\t\tport: 4173\n\t},\n\ttestDir: 'tests',\n\ttestMatch: /(.+\\.)?(test|spec)\\.[jt]s/\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Svelte-ignore Comments for Accessibility Warnings\nDESCRIPTION: Shows how to use svelte-ignore comments to disable specific warnings, such as accessibility warnings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- svelte-ignore a11y_autofocus -->\n<input bind:value={name} autofocus />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Keyboard Events for Mouse Events in Svelte\nDESCRIPTION: Examples showing mouse events without corresponding keyboard events, triggering the a11y_mouse_events_have_key_events rule. These examples lack the required focus/blur events to complement mouseover/mouseout.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: onmouseover must be accompanied by onfocus -->\n<div onmouseover={handleMouseover} />\n\n<!-- A11y: onmouseout must be accompanied by onblur -->\n<div onmouseout={handleMouseout} />\n```\n\n----------------------------------------\n\nTITLE: Passing Snippets to Components with Slots\nDESCRIPTION: Shows compatibility between Svelte 5 snippets and Svelte 4 slots, where a parent component using snippets can pass content to a child component using slots.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<slot />\n<hr />\n<slot name=\"foo\" message=\"hello\" />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Parent.svelte --->\n<script>\n\timport Child from './Child.svelte';\n</script>\n\n<Child>\n\tdefault child content\n\n\t{#snippet foo({ message })}\n\t\tmessage from child: {message}\n\t{/snippet}\n</Child>\n```\n\n----------------------------------------\n\nTITLE: Updating SvelteComponent Type Hint for Dynamic Components (Svelte)\nDESCRIPTION: Illustrates a fix for a potential type error when using `typeof SvelteComponent` as a type hint for dynamically assigned components in Svelte 4. The type hint should be changed to `typeof SvelteComponent<any>` to resolve the issue. The migration script can perform this adjustment.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport ComponentA from './ComponentA.svelte';\n\timport ComponentB from './ComponentB.svelte';\n\timport { SvelteComponent } from 'svelte';\n\n\tlet component: typeof SvelteComponent+++<any>+++;\n\n\tfunction choseRandomly() {\n\t\tcomponent = Math.random() > 0.5 ? ComponentA : ComponentB;\n\t}\n</script>\n\n<button on:click={choseRandomly}>random</button>\n<svelte:element this={component} />\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Properties Implementation Detail\nDESCRIPTION: Shows how Svelte internally handles custom properties by wrapping the component in a svelte-css-wrapper element with the appropriate styles.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte-css-wrapper style=\"display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</svelte-css-wrapper>\n```\n\n----------------------------------------\n\nTITLE: Misusing aria attributes on meta tags in Svelte\nDESCRIPTION: Illustrates the incorrect use of aria attributes on a meta tag, which is not visible and should not have such attributes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <meta> should not have aria-* attributes -->\n<meta aria-hidden=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-interactive Elements with Positive TabIndex in Svelte\nDESCRIPTION: Example showing a non-interactive element (div) with a positive tabindex value, triggering the a11y_no_noninteractive_tabindex rule, which can create confusing keyboard navigation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: noninteractive element cannot have nonnegative tabIndex value -->\n<div tabindex=\"0\"></div>\n```\n\n----------------------------------------\n\nTITLE: Migrating Default Slot Content to Children Props\nDESCRIPTION: Shows how to migrate from using default slots in Svelte 4 to using the children prop with render tags in Svelte 5.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t+++let { children } = $props();+++\n</script>\n\n---<slot />---\n+++{@render children?.()}+++\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated SvelteComponentTyped (JavaScript/TypeScript)\nDESCRIPTION: Shows how to replace the deprecated `SvelteComponentTyped` import and usage with `SvelteComponent`. The `SvelteComponent` type now incorporates the typing capabilities previously provided by `SvelteComponentTyped`. The migration script automates this change.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n---import { SvelteComponentTyped } from 'svelte';---\n+++import { SvelteComponent } from 'svelte';+++\n\n---export class Foo extends SvelteComponentTyped<{ aProp: string }> {}---\n+++export class Foo extends SvelteComponent<{ aProp: string }> {}+++\n```\n\n----------------------------------------\n\nTITLE: HTML Banner Implementation for Svelte Website\nDESCRIPTION: HTML code for responsive Svelte banner that adapts to light/dark mode preferences using the picture element with multiple sources.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://svelte.dev\">\n\t<picture>\n\t\t<source media=\"(prefers-color-scheme: dark)\" srcset=\"assets/banner_dark.png\">\n\t\t<img src=\"assets/banner.png\" alt=\"Svelte - web development for the rest of us\" />\n\t</picture>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Avoiding autofocus in Svelte\nDESCRIPTION: Demonstrates the incorrect use of the autofocus attribute, which should be avoided to prevent usability issues for both sighted and non-sighted users.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Avoid using autofocus -->\n<input autofocus />\n```\n\n----------------------------------------\n\nTITLE: Updating Global State in Svelte Component\nDESCRIPTION: Demonstrates how to update global state within a Svelte component, which can lead to issues in server-side rendering.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { myGlobalState } from 'svelte';\n\n\tlet { data } = $props();\n\n\tif (data.user) {\n\t\tmyGlobalState.user = data.user;\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Preprocessor Order for MDsveX in Svelte 4 (JavaScript/Configuration)\nDESCRIPTION: Provides a configuration example demonstrating the practical consequence of the Svelte 4 preprocessor order change. Preprocessors like MDsveX, which may transform script or style tags within markdown, should now typically be listed *before* other preprocessors (like `vitePreprocess`) that act on script or style content.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// @noErrors\npreprocess: [\n--- \tvitePreprocess(),\n\tmdsvex(mdsvexConfig)---\n+++ \tmdsvex(mdsvexConfig),\n\tvitePreprocess()+++ \n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Svelte Transition Documentation\nDESCRIPTION: Markdown frontmatter and module reference for the svelte/transition documentation\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/21-svelte-transition.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: svelte/transition\n---\n\n> MODULE: svelte/transition\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Invalid Multiple Attribute\nDESCRIPTION: Specifies that the 'multiple' attribute must be static when using two-way binding on a select element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n> 'multiple' attribute must be static if select uses two-way binding\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Migration Example\nDESCRIPTION: Demonstrates the migration from svelte:component to direct component usage in Svelte 5 with conditional rendering.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n{#each items as item}\n\t---<svelte:component this={item.condition ? Y : Z} />---\n\t+++{@const Component = item.condition ? Y : Z}+++\n\t+++<Component />+++\n{/each}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t// ...\n\tlet condition = $state(false);\n\t+++const Component = $derived(condition ? Y : Z);+++\n</script>\n\n---<svelte:component this={condition ? Y : Z} />---\n+++<Component />+++\n```\n\n----------------------------------------\n\nTITLE: Updating component instantiation in Svelte 5\nDESCRIPTION: This snippet shows how to update the main.js file to use the new mount function from Svelte 5 instead of the class-based instantiation used in Svelte 4. It demonstrates the new way to create and mount a Svelte component.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });---\n+++const app = mount(App, { target: document.getElementById(\"app\") });+++\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suite in Svelte\nDESCRIPTION: Command for running a specific test suite by name, using the validator example.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test validator\n```\n\n----------------------------------------\n\nTITLE: Invalid Option Value Error Message\nDESCRIPTION: Error message template displayed when a compiler option has an invalid value\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## options_invalid_value\n\n> Invalid compiler option: %details%\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Invalid Event Handler Attribute\nDESCRIPTION: Explains that event attributes must be JavaScript expressions, not strings.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n> Event attribute must be a JavaScript expression, not a string\n```\n\n----------------------------------------\n\nTITLE: Updating event handling for component instances in Svelte 5\nDESCRIPTION: This example demonstrates how to update event handling when instantiating a component in Svelte 5. Instead of using the $on method, events are now passed via the events property in the options argument of the mount function.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });\napp.$on('event', callback);---\n+++const app = mount(App, { target: document.getElementById(\"app\"), events: { event: callback } });+++\n```\n\n----------------------------------------\n\nTITLE: Alternative Test Filtering Using Environment Variable\nDESCRIPTION: Command for filtering tests using the FILTER environment variable, which removes other tests rather than skipping them for faster results.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFILTER=<test-name> pnpm test <suite-name>\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Within a Test Suite\nDESCRIPTION: Command for filtering tests within a specific test suite using the -t flag to target a specific test.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm test validator -- -t a11y-alt-text\n```\n\n----------------------------------------\n\nTITLE: Inserting Unscoped Style Tags in Svelte\nDESCRIPTION: This snippet demonstrates how to include a <style> tag within a <div> in a Svelte component. The styles declared will directly affect matching elements in the entire DOM, as there is no scoping or processing done by Svelte on the nested <style> tag. The main dependency is a Svelte environment capable of rendering DOM structures.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/04-nested-style-elements.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\\n\\t<style>\\n\\t\\t/* this style tag will be inserted as-is */\\n\\t\\tdiv {\\n\\t\\t\\t/* this will apply to all `<div>` elements in the DOM */\\n\\t\\t\\tcolor: red;\\n\\t\\t}\\n\\t</style>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unknown ARIA Attributes in Svelte\nDESCRIPTION: Example showing an element with an unknown or misspelled ARIA attribute, triggering the a11y_unknown_aria_attribute rule that suggests the correct attribute name.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Unknown aria attribute 'aria-labeledby' (did you mean 'labelledby'?) -->\n<input type=\"image\" aria-labeledby=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Using Literal Element Names with svelte:element\nDESCRIPTION: Example of how to use a literal element name with svelte:element in Svelte 5. While Svelte 4 allowed string literals directly, Svelte 5 requires the string to be wrapped in an expression.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_30\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:element this={\"div\"}>\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte PR in Another Project for Testing\nDESCRIPTION: Command for installing a specific Svelte pull request in another pnpm project for manual testing, targeting a specific branch.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D \"github:sveltejs/svelte#path:packages/svelte&branch-name\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic Test Suite in Svelte\nDESCRIPTION: Command for running the entire test suite for the Svelte project using pnpm.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Updating Test Snapshots in Svelte\nDESCRIPTION: Command for updating test snapshots using the UPDATE_SNAPSHOTS environment variable, used for test suites like snapshot and parser.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUPDATE_SNAPSHOTS=true pnpm test\n```\n\n----------------------------------------\n\nTITLE: Unmounting a Svelte Component from the DOM\nDESCRIPTION: Removes a previously mounted component from the DOM. The outro option allows transitions to play before removal, and the function returns a Promise that resolves after transitions complete.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later\nunmount(app, { outro: true });\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Element Definition in Svelte 4\nDESCRIPTION: Demonstrates the deprecation of the `tag` option in `<svelte:options>` for defining custom elements. It should be replaced with the new `customElement` option, which offers more configurability. The migration script handles this replacement automatically.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n---<svelte:options tag=\"my-component\" />---\n+++<svelte:options customElement=\"my-component\" />+++\n```\n\n----------------------------------------\n\nTITLE: Error Message for Unavailable Lifecycle Function in Svelte\nDESCRIPTION: This code snippet represents an error message template used when a lifecycle function is called in a server context where it's not available. It uses a placeholder %name% for the specific function name.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/server-errors/lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> `%name%(...)` is not available on the server\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Accessibility Attributes in Svelte\nDESCRIPTION: Examples of elements missing required accessibility attributes that would trigger the a11y_missing_attribute rule, including input elements without alt text, html without lang attribute, and anchor tags without href.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <input type=\\\"image\\\"> element should have an alt, aria-label or aria-labelledby attribute -->\n<input type=\"image\" />\n\n<!-- A11y: <html> element should have a lang attribute -->\n<html></html>\n\n<!-- A11y: <a> element should have an href attribute -->\n<a>text</a>\n```\n\n----------------------------------------\n\nTITLE: Understanding Preprocessor Execution Order Change in Svelte 4 (JavaScript)\nDESCRIPTION: Illustrates the change in the execution order of Svelte preprocessors. In Svelte 3, all markup preprocessors ran first, then all script, then all style. In Svelte 4, preprocessors run sequentially, and within each preprocessor object, the order is markup -> script -> style. This difference is shown via console log outputs.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2304\nimport { preprocess } from 'svelte/compiler';\n\nconst { code } = await preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-2');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-2');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-2');\n\t\t\t}\n\t\t}\n\t],\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\n// Svelte 3 logs:\n// markup-1\n// markup-2\n// script-1\n// script-2\n// style-1\n// style-2\n\n// Svelte 4 logs:\n// markup-1\n// script-1\n// style-1\n// markup-2\n// script-2\n// style-2\n```\n\n----------------------------------------\n\nTITLE: Replacing event modifiers with inline event handling in Svelte 5\nDESCRIPTION: This example shows how to replace the preventDefault event modifier from svelte/legacy with inline event handling in Svelte 5. The new approach calls event.preventDefault() directly in the event handler.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t---import { preventDefault } from 'svelte/legacy';---\n</script>\n\n<button\n\tonclick={---preventDefault---((event) => {\n\t\t+++event.preventDefault();+++\n\t\t// ...\n\t})}\n>\n\tclick me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Uncloneable State Snapshot in Svelte\nDESCRIPTION: Shows how $state.snapshot handles cloneable and uncloneable properties. While primitive values can be cloned, DOM elements like 'window' cannot be cloned and are returned as original references.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-warnings/warnings.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = $state({ property: 'this is cloneable', window })\nconst snapshot = $state.snapshot(object);\n```\n\n----------------------------------------\n\nTITLE: Child Component with Reactive Context\nDESCRIPTION: Fixed example showing a child component correctly accessing reactive state from context.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst count = getContext('count');\n</script>\n\n<!-- This will update -->\n<p>The count is {count()}</p>\n```\n\n----------------------------------------\n\nTITLE: Using createClassComponent for backwards compatibility in Svelte 5\nDESCRIPTION: This snippet shows how to use the createClassComponent function from svelte/legacy to maintain the Svelte 4 class-based component API in Svelte 5 as a stopgap solution.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n+++import { createClassComponent } from 'svelte/legacy';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });---\n+++const app = createClassComponent({ component: App, target: document.getElementById(\"app\") });+++\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Modifying Emitted CSS for Ancient Browser Support\nDESCRIPTION: Demonstrates how to modify emitted CSS to support ancient browsers that don't implement :where, at the cost of unpredictable specificity changes.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ncss = css.replace(/:where\\((.+?)\\)/, '$1');\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Elements with svelte:element (Svelte)\nDESCRIPTION: This snippet demonstrates rendering a dynamic element in Svelte using the <svelte:element> special tag, where the 'this' property determines the resulting DOM element at runtime. The only supported binding is bind:this, and properties or listeners will be applied to the dynamic tag. Inputs include the 'expression' variable specifying the element type; if this is nullish, nothing will be rendered. Outputs a corresponding DOM node, or nothing for invalid tag values. No external dependencies are required.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/06-svelte-element.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:element this={expression} />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-interactive Elements with Interactive Roles in Svelte\nDESCRIPTION: Example showing a non-interactive element (h3) incorrectly assigned an interactive ARIA role (searchbox), triggering the a11y_no_noninteractive_element_to_interactive_role rule.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->\n<h3 role=\"searchbox\">Button</h3>\n```\n\n----------------------------------------\n\nTITLE: Using String Event Handlers (No Longer Supported)\nDESCRIPTION: Example of using string event handlers in Svelte 4, which is no longer supported in Svelte 5. Instead, Svelte 5 uses oneventname properties as the mechanism for adding event handlers.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclick=\"alert('hello')\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Linking Values with Effects\nDESCRIPTION: Example of an anti-pattern where effects are used to link two inputs together. This approach can cause infinite loops and is unnecessarily complex.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet total = 100;\n\tlet spent = $state(0);\n\tlet left = $state(total);\n\n\t$effect(() => {\n\t\tleft = total - spent;\n\t});\n\n\t$effect(() => {\n\t\tspent = total - left;\n\t});\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={left} max={total} />\n\t{left}/{total} left\n</label>\n```\n\n----------------------------------------\n\nTITLE: Modifying Action Typing for Parameters in Svelte 4 (TypeScript)\nDESCRIPTION: Shows the required change for typing Svelte Actions that accept parameters in Svelte 4. The `Action` and `ActionReturn` types now default the parameter type to `undefined`. If an action uses parameters, the generic must be explicitly typed (e.g., `Action<HTMLElement, string>`) to avoid type errors. The provided migration script can automate this update.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\n---const action: Action = (node, params) => { ... } // this is now an error if you use params in any way---\n+++const action: Action<HTMLElement, string> = (node, params) => { ... } // params is of type string+++\n```\n\n----------------------------------------\n\nTITLE: Invalid HTML Example in Svelte\nDESCRIPTION: This snippet provides an example of invalid HTML usage with the `{@html ...}` tag, illustrating that non-standalone HTML like unclosed tags will not function correctly.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/08-@html.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{@html '<div>'}content{@html '</div>'}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Interactive Elements with Non-interactive Roles in Svelte\nDESCRIPTION: Example showing an interactive element (textarea) incorrectly assigned a non-interactive ARIA role (listitem), triggering the a11y_no_interactive_element_to_noninteractive_role rule.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <textarea> cannot have role 'listitem' -->\n<textarea role=\"listitem\"></textarea>\n```\n\n----------------------------------------\n\nTITLE: Installing jsdom for Component Testing\nDESCRIPTION: Illustrates how to install jsdom for simulating browser environments in component tests, a common requirement when using Vitest with client-side components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D jsdom\n```\n\n----------------------------------------\n\nTITLE: Svelte Changelog Entry Block\nDESCRIPTION: A markdown block containing version information and patch changes for Svelte releases. Includes version numbers, fix descriptions, and links to related pull requests.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- fix: better ownership mutation validation ([#10673](https://github.com/sveltejs/svelte/pull/10673))\n\n- fix: handle TypeScript's optional parameter syntax in snippets ([#10671](https://github.com/sveltejs/svelte/pull/10671))\n\n- fix: deduplicate generated props and action arg names ([#10669](https://github.com/sveltejs/svelte/pull/10669))\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Svelte Project\nDESCRIPTION: Markdown frontmatter block that defines the title of the Svelte project documentation\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Svelte\n---\n```\n\n----------------------------------------\n\nTITLE: Preserving CSS Selectors with :global in Svelte\nDESCRIPTION: This snippet shows how to use the :global modifier in Svelte to preserve CSS selectors that might be flagged as unused. It's particularly useful for styling elements within {@html ...} tags or when overriding styles in child components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/style.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"post\">{@html content}</div>\n\n<style>\n  .post :global {\n    p {...}\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-interactive Elements with Event Listeners in Svelte\nDESCRIPTION: Examples of non-interactive elements with mouse or keyboard event listeners, triggering the a11y_no_noninteractive_element_interactions rule, including list items and div elements with onclick handlers.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->\n<li onclick={() => {}}></li>\n\n<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->\n<div role=\"listitem\" onclick={() => {}}></div>\n```\n\n----------------------------------------\n\nTITLE: Svelte Each Block Binding Example\nDESCRIPTION: Example of contextual bind:this inside an {#each} block, which was fixed to properly handle bindings in version 3.24.0.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n{#each items as item}\n  <div bind:this={item.ref}></div>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Reactive Updates in Svelte\nDESCRIPTION: Example showing the difference between reactive ($state) and non-reactive variable updates in Svelte components.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet reactive = $state('reactive');\n\tlet stale = 'stale';\n</script>\n\n<p>This value updates: {reactive}</p>\n<p>This value does not update: {stale}</p>\n\n<button onclick={() => {\n\tstale = 'updated';\n\treactive = 'updated';\n}}>update</button>\n```\n\n----------------------------------------\n\nTITLE: Svelte Dynamic Component Binding Example\nDESCRIPTION: Example of a dynamic component using {#if} block within a <slot>. This was fixed in version 3.21.0.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<slot>\n  <svelte:component this={component}/>\n</slot>\n```\n\n----------------------------------------\n\nTITLE: HTML Self-Closing Tags Example\nDESCRIPTION: Demonstrates the incorrect and correct parsing of self-closing tags in HTML, showing how browsers interpret self-closing span tags differently than expected.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<span class=\"icon\" /> some text!\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<span class=\"icon\"> some text! </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Element Component\nDESCRIPTION: Syntax for using dynamic elements with svelte:element\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:element>\n```\n\n----------------------------------------\n\nTITLE: Unassociated form label in Svelte\nDESCRIPTION: Shows examples of correct and incorrect ways to associate a label with a form control for accessibility.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<label for=\"id\">B</label>\n\n<label>C <input type=\"text\" /></label>\n\n<!-- A11y: A form label must be associated with a control. -->\n<label>A</label>\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated 'immutable' Option in Svelte\nDESCRIPTION: This snippet explains that the 'immutable' option has been deprecated and will not have any effect when using runes mode in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## options_deprecated_immutable\n\n> The `immutable` option has been deprecated. It will have no effect in runes mode\n```\n\n----------------------------------------\n\nTITLE: Using $state.raw for Non-Deeply Reactive State in Svelte\nDESCRIPTION: This example demonstrates the use of $state.raw to create state that is not deeply reactive. It shows that direct property mutations don't work, and the entire object must be reassigned to update the state.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet person = $state.raw({\n\tname: 'Heraclitus',\n\tage: 49\n});\n\n// this will have no effect\nperson.age += 1;\n\n// this will work, because we're creating a new person\nperson = {\n\tname: 'Heraclitus',\n\tage: 50\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Redundant ARIA Roles in Svelte\nDESCRIPTION: Examples showing elements with redundant ARIA roles that match their default implicit roles, triggering the a11y_no_redundant_roles rule. This includes button and img elements with their default roles explicitly defined.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Redundant role 'button' -->\n<button role=\"button\">...</button>\n\n<!-- A11y: Redundant role 'img' -->\n<img role=\"img\" src=\"foo.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Svelte\nDESCRIPTION: Renders a component on the server, returning an object with HTML content for both body and head sections. This function is only available when compiling with the server option.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2724 2305 2307\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst result = render(App, {\n\tprops: { some: 'property' }\n});\nresult.body; // HTML for somewhere in this <body> tag\nresult.head; // HTML for somewhere in this <head> tag\n```\n\n----------------------------------------\n\nTITLE: Resolving Hydration Attribute Mismatch in Svelte\nDESCRIPTION: Provides a solution for handling attribute value changes between server and client renders, specifically for attributes like 'src' on <img> elements that may cause refetching.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { src } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the value...\n\t\tconst initial = src;\n\n\t\t// unset it...\n\t\tsrc = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tsrc = initial;\n\t\t});\n\t}\n</script>\n\n<img {src} />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Static Elements with Interactions Missing ARIA Roles in Svelte\nDESCRIPTION: Example showing a div element with a click handler but without an ARIA role, triggering the a11y_no_static_element_interactions rule, which requires roles for interactive behavior.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <div> with click handler must have an ARIA role -->\n<div onclick={() => ''}></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Code Error Message in Svelte\nDESCRIPTION: This snippet defines the error message template for legacy code in Svelte. It informs the user that a certain code pattern is no longer valid and suggests an alternative.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/misc.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> `%code%` is no longer valid — please use `%suggestion%` instead\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Elements with ARIA Roles Missing Required Attributes in Svelte\nDESCRIPTION: Example showing an element with the ARIA role 'checkbox' but missing the required aria-checked attribute, triggering the a11y_role_has_required_aria_props rule.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: A11y: Elements with the ARIA role \"checkbox\" must have the following attributes defined: \"aria-checked\" -->\n<span role=\"checkbox\" aria-labelledby=\"foo\" tabindex=\"0\"></span>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Elements with Unsupported ARIA Attributes for Roles in Svelte\nDESCRIPTION: Examples showing elements with ARIA attributes not supported by their roles, triggering the a11y_role_supports_aria_props and a11y_role_supports_aria_props_implicit rules.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_27\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->\n<div role=\"link\" aria-multiline></div>\n\n<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->\n<li aria-required></li>\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated 'accessors' Option in Svelte\nDESCRIPTION: This snippet informs that the 'accessors' option has been deprecated and will not have any effect when using runes mode in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## options_deprecated_accessors\n\n> The `accessors` option has been deprecated. It will have no effect in runes mode\n```\n\n----------------------------------------\n\nTITLE: Misuse of scope attribute in Svelte\nDESCRIPTION: Demonstrates the incorrect use of the scope attribute on a div element, which should only be used with th elements.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: The scope attribute should only be used with <th> elements -->\n<div scope=\"row\" />\n```\n\n----------------------------------------\n\nTITLE: Updating component type declarations in Svelte 5\nDESCRIPTION: This snippet shows how to update component type declarations in TypeScript for Svelte 5. It replaces the SvelteComponent type with the new Component type for defining component shapes and props.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentA, ComponentB } from 'component-library';\n---import type { SvelteComponent } from 'svelte';---\n+++import type { Component } from 'svelte';+++\n\n---let C: typeof SvelteComponent<{ foo: string }> = $state(---\n+++let C: Component<{ foo: string }> = $state(+++\n\tMath.random() ? ComponentA : ComponentB\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Each Block Reassignment and Binding in Svelte\nDESCRIPTION: This snippet shows the legacy way of reassigning and binding to each block arguments, which is now considered buggy and unpredictable, especially with derived values.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/script.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet array = [1, 2, 3];\n</script>\n\n{#each array as entry}\n\t<!-- reassignment -->\n\t<button on:click={() => entry = 4}>change</button>\n\n\t<!-- binding -->\n\t<input bind:value={entry}>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Incorrect placement of figcaption in Svelte\nDESCRIPTION: Shows the incorrect placement of a figcaption element, which should be an immediate child of a figure element for proper accessibility.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <figcaption> must be an immediate child of <figure> -->\n<div>\n\t<figcaption>Image caption</figcaption>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding SEO Elements with <svelte:head> in Svelte\nDESCRIPTION: Shows how to use <svelte:head> to add SEO-related elements like title and meta description to the document head. This is crucial for improving a site's search engine optimization.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/05-svelte-head.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:head>\n\t<title>Hello world!</title>\n\t<meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of <svelte:body> Component with Multiple Events and Actions in Svelte\nDESCRIPTION: Shows how to use the <svelte:body> component with multiple event listeners (mouseenter and mouseleave) and an action. This component must be used at the top level of the component and not inside blocks or elements.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/04-svelte-body.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />\n```\n\n----------------------------------------\n\nTITLE: Hiding important heading elements in Svelte\nDESCRIPTION: Demonstrates the incorrect use of aria-hidden on a heading element, which should not be hidden from screen readers.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <h2> element should not be hidden -->\n<h2 aria-hidden=\"true\">invisible header</h2>\n```\n\n----------------------------------------\n\nTITLE: Documenting Removed 'enableSourcemap' Option in Svelte\nDESCRIPTION: This snippet informs that the 'enableSourcemap' option has been removed. Source maps are now always generated, and tooling can choose to ignore them if desired.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## options_removed_enable_sourcemap\n\n> The `enableSourcemap` option has been removed. Source maps are always generated now, and tooling can choose to ignore them\n```\n\n----------------------------------------\n\nTITLE: Misplaced role attribute on meta tag in Svelte\nDESCRIPTION: Shows the incorrect use of a role attribute on a meta tag, which should not have ARIA roles.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: <meta> should not have role attribute -->\n<meta role=\"tooltip\" />\n```\n\n----------------------------------------\n\nTITLE: Invalid href attribute in Svelte\nDESCRIPTION: Demonstrates an invalid (empty) href attribute on an anchor tag, which should have a valid value for accessibility.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: '' is not a valid href attribute -->\n<a href=\"\">invalid</a>\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw HTML with Svelte\nDESCRIPTION: This code snippet demonstrates how to use the `{@html ...}` tag to inject raw HTML into a Svelte component. The snippet warns about the necessity to escape the content to prevent XSS attacks.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/08-@html.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<article>\n\t{@html content}\n</article>\n```\n\n----------------------------------------\n\nTITLE: Using distracting marquee element in Svelte\nDESCRIPTION: Illustrates the use of a marquee element, which should be avoided as it can be visually distracting and cause accessibility issues.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Avoid <marquee> elements -->\n<marquee></marquee>\n```\n\n----------------------------------------\n\nTITLE: Documenting Removed 'loopGuardTimeout' Option in Svelte\nDESCRIPTION: This snippet simply states that the 'loopGuardTimeout' option has been removed from Svelte compiler options.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## options_removed_loop_guard_timeout\n\n> The `loopGuardTimeout` option has been removed\n```\n\n----------------------------------------\n\nTITLE: Test Configuration Changes\nDESCRIPTION: Code snippets showing regex and configuration adjustments needed for the new test environment\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `compiler` options are different currently, a wrapper function in `helpers.js` was added and call sites rerouted to that\n- regex in the loader was adjusted, a `$` was added to the `import * as ..` regex (because the new runtime does `import * as $ from ..` for the runtime)\n- `vitest.config.js` was altered: `resolve-svelte` plugin also aliases `svelte` (the current runtime import) and `test.dir` was adjusted because the monorepo structure is different\n```\n\n----------------------------------------\n\nTITLE: Missing tabindex for interactive role in Svelte\nDESCRIPTION: Shows an element with an interactive role (button) that lacks a tabindex value, which is necessary for keyboard navigation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->\n<div role=\"button\" onkeypress={() => {}} />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Elements with Positive TabIndex Values in Svelte\nDESCRIPTION: Example showing an element with a positive tabindex value, triggering the a11y_positive_tabindex rule, which warns against breaking normal tab order and creating confusing keyboard navigation.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: avoid tabindex values above zero -->\n<div tabindex=\"1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Invalid Default Snippet Usage Example in Svelte Components\nDESCRIPTION: Demonstrates the incorrect usage scenario where a parent component uses let: directives while a child component attempts to use {@render children(...)}. This combination of APIs is incompatible and will throw an error.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-errors/errors.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Parent.svelte --->\n<List {items} let:entry>\n    <span>{entry}</span>\n</List>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: List.svelte --->\n<script>\n    let { items, children } = $props();\n</script>\n\n<ul>\n    {#each items as item}\n        <li>{@render children(item)}</li>\n    {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Incorrect aria-hidden value in Svelte\nDESCRIPTION: Illustrates the incorrect use of a non-boolean value for the aria-hidden attribute, which should only be 'true' or 'false'.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->\n<div aria-hidden=\"yes\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Properties in Component Styles\nDESCRIPTION: Shows how to use the custom properties within a component's style block, including fallback values using the var() function.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\t.track {\n\t\tbackground: var(--track-color, #aaa);\n\t}\n\n\t.thumb {\n\t\tbackground: var(--thumb-color, blue);\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter in Svelte Documentation\nDESCRIPTION: Simple markdown frontmatter that defines the title of a reference page in the Svelte documentation. This YAML-style metadata block appears at the top of the markdown file and sets the page title to 'Reference'.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Reference\n---\n```\n\n----------------------------------------\n\nTITLE: Using Context with Reactive State in Svelte\nDESCRIPTION: Demonstrates how to use context with reactive state in a Svelte component, including incrementing a counter.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { setContext } from 'svelte';\n\timport Child from './Child.svelte';\n\n\tlet counter = $state({\n\t\tcount: 0\n\t});\n\n\tsetContext('counter', counter);\n</script>\n\n<button onclick={() => counter.count += 1}>\n\tincrement\n</button>\n\n<Child />\n<Child />\n<Child />\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte 4 Component Instantiation to Svelte 5\nDESCRIPTION: Demonstrates how to update Svelte 4 component instantiation code to work with Svelte 5's runes mode in JavaScript files.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'svelte';\nimport App from './App.svelte'\n\nconst props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Handlers in Svelte 4 vs 5\nDESCRIPTION: Shows how to migrate from Svelte 4's multiple event handlers on a single element to Svelte 5's approach using a single handler that calls multiple functions.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<button on:click={one} on:click={two}>...</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n\tonclick={(e) => {\n\t\tone(e);\n\t\ttwo(e);\n\t}}\n>\n\t...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Capture Event Modifier in Svelte 5\nDESCRIPTION: Demonstrates how to use the 'capture' event modifier in Svelte 5 by adding it directly to the event name attribute.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<button onclickcapture={...}>...</button>\n```\n\n----------------------------------------\n\nTITLE: Invalid Global Selector List Example\nDESCRIPTION: Demonstrates an invalid CSS implementation where :global selector is mixed with scoped selectors in the same selector list. Shows why combining :global with scoped selectors x and y is problematic.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/style.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:global, x {\n    y {\n        color: red;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Component Properties in Svelte 5 Runes Mode\nDESCRIPTION: Shows how to expose component properties using exports in Svelte 5 runes mode, as an alternative to the 'accessors' option.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { name } = $props();\n\t// available via componentInstance.getName()\n\texport const getName = () => name;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Method Usage in Svelte Components\nDESCRIPTION: Illustrates the correct and incorrect use of lifecycle methods in Svelte components. Lifecycle methods like onMount can only be called during component initialization at the top level of the instance script.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-errors/errors.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    import { onMount } from 'svelte';\n\n    function handleClick() {\n        // This is wrong\n        onMount(() => {})\n    }\n\n    // This is correct\n    onMount(() => {})\n</script>\n\n<button onclick={handleClick}>click me</button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Empty Attribute Shorthand\nDESCRIPTION: Warns against using empty attribute shorthand syntax.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n> Attribute shorthand cannot be empty\n```\n\n----------------------------------------\n\nTITLE: Missing @render Tag for Snippets in Svelte\nDESCRIPTION: Shows examples of attempting to render snippets without the required {@render} block, which causes the snippet code to be stringified instead of being rendered to the DOM.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-errors/errors.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let { children } = $props();\n</script>\n\n{children}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Parent.svelte --->\n<ChildComponent>\n  {#snippet label()}\n    <span>Hi!</span>\n  {/snippet}\n</ChildComponent>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: Child.svelte --->\n<script>\n  let { label } = $props();\n</script>\n\n<!-- This component doesn't expect a snippet, but the parent provided one -->\n<p>{label}</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Invalid Type Attribute\nDESCRIPTION: Specifies that the 'type' attribute must be static when using two-way binding on an input element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n> 'type' attribute must be a static text value if input uses two-way binding\n```\n\n----------------------------------------\n\nTITLE: Aria Hidden Attribute\nDESCRIPTION: Example of accessibility improvement made in version 3.15.0 for resize-listener objects.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\naria-hidden=\"true\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expressions as Attribute Values in Svelte\nDESCRIPTION: Illustrates how to use JavaScript expressions directly as attribute values in Svelte.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<button disabled={!clickable}>...</button>\n```\n\n----------------------------------------\n\nTITLE: Handling Transition Events in Svelte\nDESCRIPTION: This example demonstrates how to handle transition events with Svelte elements. The code listens and responds to introductory and outroductory transition events with custom behavior.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n{#if visible}\\n\\t<p\\n\\t\\ttransition:fly={{ y: 200, duration: 2000 }}\\n\\t\\tonintrostart={() => (status = 'intro started')}\\n\\t\\tonoutrostart={() => (status = 'outro started')}\\n\\t\\tonintroend={() => (status = 'intro ended')}\\n\\t\\tonoutroend={() => (status = 'outro ended')}\\n\\t>\\n\\t\\tFlies in and out\\n\\t</p>\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Self-Closing Tags Migration Command\nDESCRIPTION: Command to automatically migrate self-closing tags in Svelte applications to explicit closing tags.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv migrate self-closing-tags\n```\n\n----------------------------------------\n\nTITLE: Displaying Svelte Error Message for Duplicate Attributes\nDESCRIPTION: Reminds that attributes must be unique within an element.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n> Attributes need to be unique\n```\n\n----------------------------------------\n\nTITLE: Unrecognized Option Error Message\nDESCRIPTION: Error message template displayed when an unrecognized compiler option is specified\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/options.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## options_unrecognised\n\n> Unrecognised compiler option %keypath%\n```\n\n----------------------------------------\n\nTITLE: Referencing a Component Instance with bind:this - Svelte - Svelte\nDESCRIPTION: This highlights how to use bind:this to obtain a reference to a Svelte component instance. The ShoppingCart component exposes an empty() method, which is invoked programmatically on a button click through the bound cart variable. This enables imperative interaction with child component instances. The component must export relevant methods (such as empty) for them to be accessible via the instance.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<ShoppingCart bind:this={cart} />\n\n<button onclick={() => cart.empty()}> Empty shopping cart </button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Action Interface\nDESCRIPTION: TypeScript interface definitions for Svelte actions\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nComponentEvents\nSveltePreprocessor\nComponentType\nComponentProps\nCompileOptions\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Values for Svelte Props\nDESCRIPTION: Demonstrates how to provide a default (fallback) value for a prop using JavaScript destructuring syntax. If the parent component doesn't pass the `adjective` prop or passes `undefined`, the value 'happy' will be used instead. Note that fallback values are not reactive state proxies.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nlet { adjective = 'happy' } = $props();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Elements with Unknown ARIA Roles in Svelte\nDESCRIPTION: Example showing an element with an unknown or misspelled ARIA role, triggering the a11y_unknown_role rule that suggests the correct role name.\nSOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- A11y: Unknown role 'toooltip' (did you mean 'tooltip'?) -->\n<div role=\"toooltip\"></div>\n```"
  }
]