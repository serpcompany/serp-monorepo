[
  {
    "owner": "dexie",
    "repo": "dexie.js",
    "content": "TITLE: Supported Operations in Dexie.js\nDESCRIPTION: A comprehensive list of available operations in Dexie.js API, showing methods from WhereClause, Table, and Collection classes. These methods enable querying, filtering, modifying, and managing data in the IndexedDB database.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nabove(key): Collection;\naboveOrEqual(key): Collection;\nadd(item, key?): Promise;\nand(filter: (x) => boolean): Collection;\nanyOf(keys[]): Collection;\nanyOfIgnoreCase(keys: string[]): Collection;\nbelow(key): Collection;\nbelowOrEqual(key): Collection;\nbetween(lower, upper, includeLower?, includeUpper?): Collection;\nbulkAdd(items: Array): Promise;\nbulkDelete(keys: Array): Promise;\nbulkPut(items: Array): Promise;\nclear(): Promise;\ncount(): Promise;\ndelete(key): Promise;\ndistinct(): Collection;\neach(callback: (obj) => any): Promise;\neachKey(callback: (key) => any): Promise;\neachPrimaryKey(callback: (key) => any): Promise;\neachUniqueKey(callback: (key) => any): Promise;\nequals(key): Collection;\nequalsIgnoreCase(key): Collection;\nfilter(fn: (obj) => boolean): Collection;\nfirst(): Promise;\nget(key): Promise;\ninAnyRange(ranges): Collection;\nkeys(): Promise;\nlast(): Promise;\nlimit(n: number): Collection;\nmodify(changeCallback: (obj: T, ctx:{value: T}) => void): Promise;\nmodify(changes: { [keyPath: string]: any } ): Promise;\nnoneOf(keys: Array): Collection;\nnotEqual(key): Collection;\noffset(n: number): Collection;\nor(indexOrPrimayKey: string): WhereClause;\norderBy(index: string): Collection;\nprimaryKeys(): Promise;\nput(item: T, key?: Key): Promise;\nreverse(): Collection;\nsortBy(keyPath: string): Promise;\nstartsWith(key: string): Collection;\nstartsWithAnyOf(prefixes: string[]): Collection;\nstartsWithAnyOfIgnoreCase(prefixes: string[]): Collection;\nstartsWithIgnoreCase(key: string): Collection;\ntoArray(): Promise;\ntoCollection(): Collection;\nuniqueKeys(): Promise;\nuntil(filter: (value) => boolean, includeStopEntry?: boolean): Collection;\nupdate(key: Key, changes: { [keyPath: string]: any }): Promise;\n```\n\n----------------------------------------\n\nTITLE: Using Dexie.js with ES Modules and Top-Level Await\nDESCRIPTION: Modern browser example using ES modules and top-level await with Dexie.js. This example shows how to initialize a database, add data, and query it using modern JavaScript features instead of Promise chains.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\">\n      // Import Dexie\n      import { Dexie } from 'https://unpkg.com/dexie/dist/modern/dexie.mjs';\n\n      //\n      // Declare Database\n      //\n      const db = new Dexie('FriendDatabase');\n      db.version(1).stores({\n        friends: '++id, age'\n      });\n\n      //\n      // Play with it\n      //\n      try {\n        await db.friends.add({ name: 'Alice', age: 21 });\n\n        const youngFriends = await db.friends\n            .where('age')\n            .below(30)\n            .toArray();\n\n        alert(`My young friends: ${JSON.stringify(youngFriends)}`);\n      } catch (e) {\n        alert(`Oops: ${e}`);\n      }\n    </script>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Dexie.js in HTML Example\nDESCRIPTION: Basic example showing how to initialize a Dexie database, define a schema, add data, and query it in a vanilla HTML page using script tags. Demonstrates database creation, schema versioning, and basic CRUD operations.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"https://unpkg.com/dexie/dist/dexie.js\"></script>\n    <script>\n\n      //\n      // Declare Database\n      //\n      const db = new Dexie('FriendDatabase');\n      db.version(1).stores({\n        friends: '++id, age'\n      });\n\n      //\n      // Play with it\n      //\n      db.friends.add({ name: 'Alice', age: 21 }).then(() => {\n        return db.friends\n          .where('age')\n          .below(30)\n          .toArray();\n      }).then(youngFriends => {\n        alert (`My young friends: ${JSON.stringify(youngFriends)}`);\n      }).catch (e => {\n        alert(`Oops: ${e}`);\n      });\n\n    </script>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dexie.js with React and TypeScript\nDESCRIPTION: Example showing how to use Dexie.js in a React component with TypeScript. Demonstrates type definitions for database entities, database setup, and using the useLiveQuery hook for reactive data querying.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Dexie, type EntityTable } from 'dexie';\nimport { useLiveQuery } from 'dexie-react-hooks';\n\n// Typing for your entities (hint is to move this to its own module)\nexport interface Friend {\n  id: number;\n  name: string;\n  age: number;\n}\n\n// Database declaration (move this to its own module also)\nexport const db = new Dexie('FriendDatabase') as Dexie & {\n  friends: EntityTable<Friend, 'id'>;\n};\ndb.version(1).stores({\n  friends: '++id, age',\n});\n\n// Component:\nexport function MyDexieReactComponent() {\n  const youngFriends = useLiveQuery(() =>\n    db.friends\n      .where('age')\n      .below(30)\n      .toArray()\n  );\n\n  return (\n    <>\n      <h3>My young friends</h3>\n      <ul>\n        {youngFriends?.map((f) => (\n          <li key={f.id}>\n            Name: {f.name}, Age: {f.age}\n          </li>\n        ))}\n      </ul>\n      <button\n        onClick={() => {\n          db.friends.add({ name: 'Alice', age: 21 });\n        }}\n      >\n        Add another friend\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dexie Export-Import Functions\nDESCRIPTION: Shows how to import and use the dexie-export-import extension with examples of exporting to a blob, importing from a blob to a new Dexie instance, and importing to an existing instance.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dexie from \"dexie\";\nimport \"dexie-export-import\";\n\n//\n// Import from Blob or File to Dexie instance:\n//\nconst db = await Dexie.import(blob, [options]);\n\n//\n// Export to Blob\n//\nconst blob = await db.export([options]);\n\n//\n// Import from Blob or File to existing Dexie instance\n//\nawait db.import(blob, [options]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dexie with Cloud Addon in TypeScript\nDESCRIPTION: TypeScript code snippet demonstrating how to import Dexie and the cloud addon, create a database instance, define a schema version, and configure the cloud connection with a database URL.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-cloud/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Dexie from 'dexie';\nimport dexieCloud from 'dexie-cloud-addon';\n\nconst db = new Dexie('dbname', { addons: [dexieCloud]});\n\ndb.version(1).stores({\n    yourTable: '@primKeyProp, indexedProp1, indexedProp2, ...'\n});\n\ndb.cloud.configure({\n  databaseUrl: 'https://<yourdb>.dexie.cloud'\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Observable Implementation Example\nDESCRIPTION: Full HTML example demonstrating Dexie Observable usage including creating, updating, and deleting records with change event handling\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/README.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n    <script src=\"dexie.min.js\"></script>\n    <script src=\"dexie-observable.min.js\"></script> <!-- Enable DB observation -->\n    <script>\n        var db = new Dexie(\"ObservableTest\");\n        db.version(1).stores({\n            friends: \"$$uuid,name\"\n        });\n        db.on('changes', function (changes) {\n            changes.forEach(function (change) {\n                switch (change.type) {\n                    case 1: // CREATED\n                        console.log('An object was created: ' + JSON.stringify(change.obj));\n                        break;\n                    case 2: // UPDATED\n                        console.log('An object with key ' + change.key + ' was updated with modifications: ' + JSON.stringify(change.mods));\n                        break;\n                    case 3: // DELETED\n                        console.log('An object was deleted: ' + JSON.stringify(change.oldObj));\n                        break;\n            });\n        });\n        db.open();\n        // Make an initial put() - will result in a CREATE-change:\n        db.friends.put({name: \"Kalle\"}).then(function(primKey) {\n            // Call put() with existing primary key - will result in an UPDATE-change:\n            db.friends.put({uuid: primKey, name: \"Olle\"}).then (function () {\n                // Call delete() will result in a DELETE-change:\n                db.friends.delete(primKey);\n            });\n        });\n    </script>\n    </head>\n    <body>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Import Function in JavaScript\nDESCRIPTION: This snippet demonstrates a simple import function for Dexie.js databases. It clears existing data and bulk adds new rows for each table in a transaction.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction import(data, db) {\n    return db.transaction('rw', db.tables, () => {\n        return Promise.all(data.map (t =>\n            db.table(t.table).clear()\n              .then(()=>db.table(t.table).bulkAdd(t.rows)));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Sync Server and Monitoring Status\nDESCRIPTION: Shows how to establish a connection to a synchronization server using a protocol implementation and how to monitor the sync status with event handlers.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// This example uses the WebSocketSyncProtocol included in earlier steps.\ndb.syncable.connect (\"websocket\", \"https://syncserver.com/sync\");\ndb.syncable.on('statusChanged', function (newStatus, url) {\n    console.log (\"Sync Status changed: \" + Dexie.Syncable.StatusTexts[newStatus]);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Non-Dexie IndexedDB Databases\nDESCRIPTION: Example of how to export an IndexedDB database that wasn't created with Dexie and import it back, leveraging Dexie's ability to dynamically open existing databases.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dexie from 'dexie';\nimport 'dexie-export-import';\n\nasync function exportDatabase(databaseName) {\n  const db = await new Dexie(databaseName).open();\n  const blob = await db.export();\n  return blob;\n}\n\nasync function importDatabase(file) {\n  const db = await Dexie.import(file);\n  return db.backendDB();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Database with Synchronization\nDESCRIPTION: Demonstrates normal database operations with Dexie.js when synchronization is enabled. Any changes will be automatically replicated to the server and from the server back to the client.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transaction('rw', db.friends, function (friends) {\n    friends.add({name: \"Arne\", shoeSize: 47});\n    friends.where('shoeSize').above(40).each(function (friend) {\n        console.log(\"Friend with shoeSize over 40: \" + friend.name);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Including Dexie.Syncable in HTML\nDESCRIPTION: Shows how to include Dexie.js and its addons in HTML, including a sample implementation of ISyncProtocol that's required for synchronization to work.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html><head>\n    <script src=\"dexie.min.js\"></script>\n    <script src=\"dexie-observable.min.js\"></script>\n    <script src=\"dexie-syncable.min.js\"></script>\n    <script src=\"WebSocketSyncProtocol.js\"></script> <!-- Example implementation of ISyncProtocol -->\n    ...\n</head><body>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with UUID Primary Keys\nDESCRIPTION: Demonstrates how to define database schema using the double-dollar ($$) prefix for primary keys, which generates UUIDs instead of auto-incremented values to enable offline-capable synchronization.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar db = new Dexie(\"MySyncedDB\");\ndb.version(1).stores({\n    friends: \"$$oid,name,shoeSize\",\n    pets: \"$$oid,name,kind\"\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Export Format Interface\nDESCRIPTION: TypeScript interface describing the structured JSON format used for exporting and importing database data, with support for streaming generation and consumption.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DexieExportJsonStructure {\n  formatName: 'dexie';\n  formatVersion: 1;\n  data: {\n    databaseName: string;\n    databaseVersion: number;\n    tables: Array<{\n      name: string;\n      schema: string; // '++id,name,age'\n      rowCount: number;\n    }>;\n    data: Array<{ // This property must be last (for streaming purpose)\n      tableName: string;\n      inbound: boolean;\n      rows: any[]; // This property must be last (for streaming purpose)\n    }>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ExportOptions Interface Definition\nDESCRIPTION: TypeScript interface for options controlling export behavior, including transaction settings, chunk size, JSON formatting, filtering, and progress tracking.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExportOptions {\n  noTransaction?: boolean;\n  numRowsPerChunk?: number;\n  prettyJson?: boolean;\n  filter?: (table: string, value: any, key?: any) => boolean;\n  progressCallback?: (progress: ExportProgress) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Import Options Interface Definitions\nDESCRIPTION: TypeScript interfaces for the import options used with Dexie.import() and db.import() methods, controlling transaction behavior, chunk size, filtering, and progress callbacks.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StaticImportOptions {\n  noTransaction?: boolean;\n  chunkSizeBytes?: number; // Default: DEFAULT_KILOBYTES_PER_CHUNK ( 1MB )\n  filter?: (table: string, value: any, key?: any) => boolean;\n  progressCallback?: (progress: ImportProgress) => boolean;\n  name?: string;\n}\n\nexport interface ImportOptions extends StaticImportOptions {\n  acceptMissingTables?: boolean;\n  acceptVersionDiff?: boolean;\n  acceptNameDiff?: boolean;\n  acceptChangedPrimaryKey?: boolean;\n  overwriteValues?: boolean;\n  clearTablesBeforeImport?: boolean;\n  noTransaction?: boolean;\n  chunkSizeBytes?: number; // Default: DEFAULT_KILOBYTES_PER_CHUNK ( 1MB )\n  filter?: (table: string, value: any, key?: any) => boolean;\n  progressCallback?: (progress: ImportProgress) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Export Function in JavaScript\nDESCRIPTION: This snippet shows a simple implementation of an export function for Dexie.js databases. It exports all tables and their rows in a transaction.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction export(db) {\n    return db.transaction('r', db.tables, ()=>{\n        return Promise.all(\n            db.tables.map(table => table.toArray()\n                .then(rows => ({table: table.name, rows: rows})));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie.js via npm\nDESCRIPTION: Command to install Dexie.js using npm package manager. This is the recommended way to add Dexie.js to a project.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install dexie\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie and Dexie Cloud Addon using npm\nDESCRIPTION: Commands to install the latest versions of Dexie and the Dexie Cloud addon using npm package manager.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-cloud/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie@latest\nnpm install dexie-cloud-addon@latest\n```\n\n----------------------------------------\n\nTITLE: Basic Dexie Observable Usage\nDESCRIPTION: Basic setup for using Dexie with Observable addon\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dexie from 'dexie';\nimport 'dexie-observable';\n\n// Use Dexie as normally - but you can also subscribe to db.on('changes').\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie.Syncable with npm\nDESCRIPTION: Shows how to install Dexie.js, Dexie-Observable, and Dexie-Syncable packages using npm, which are required for database synchronization functionality.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie --save\nnpm install dexie-observable --save\nnpm install dexie-syncable --save\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie and Export-Import Extension\nDESCRIPTION: Commands to install Dexie.js and the export-import extension using npm.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie\nnpm install dexie-export-import\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie Observable via npm\nDESCRIPTION: Command to install the dexie-observable addon using npm package manager. This will add the dependency to your package.json file.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/dist/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie-observable --save\n```\n\n----------------------------------------\n\nTITLE: Building Dexie.js from Source\nDESCRIPTION: Commands to build Dexie.js from source code after cloning the repository. Uses pnpm for package management and dependency installation.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting up Dexie.js Development Environment with Git and Package Manager\nDESCRIPTION: Commands for cloning the Dexie.js repository, installing dependencies, building the project, and creating symbolic links for local development.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/Dexie.js.git dexie\ncd dexie\npnpm install\npnpm run build\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Building Dexie.js from Source\nDESCRIPTION: Steps to build Dexie.js from source code. This shows how to navigate to the package directory, install dependencies, and run the build process.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/dist/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie Observable\nDESCRIPTION: NPM installation commands for Dexie and its Observable addon\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie --save\nnpm install dexie-observable --save\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Database for Observable\nDESCRIPTION: Schema upgrade process for enabling Dexie.Observable on existing databases\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dexie from 'dexie';\nimport 'dexie-observable';\n\nvar db = new Dexie('myExistingDb');\ndb.version(1).stores(... existing schema ...);\n\n// Now, add another version, just to trigger an upgrade for Dexie.Observable\ndb.version(2).stores({}); // No need to add / remove tables. This is just to allow the addon to install its tables.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dexie.Syncable in JavaScript\nDESCRIPTION: Demonstrates how to import and use Dexie with the Syncable addon. The import statement will automatically include dexie-observable as well, allowing access to synchronization APIs.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dexie from 'dexie';\nimport 'dexie-syncable'; // will import dexie-observable as well.\n\n// Use Dexie as normally - but you can also register your sync protocols though\n// Dexie.Syncable.registerSyncProtocol() api as well as using the db.syncable api\n// as documented here.\n```\n\n----------------------------------------\n\nTITLE: Using Dexie.Syncable with Existing Database\nDESCRIPTION: Shows how to integrate Dexie.Syncable with an existing database by adding an additional version upgrade. This allows the addon to install its required tables without changing existing schema.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dexie from 'dexie';\nimport 'dexie-observable';\nimport 'dexie-syncable';\nimport 'your-sync-protocol-implementation';\n\nvar db = new Dexie('myExistingDb');\ndb.version(1).stores(... existing schema ...);\n\n// Now, add another version, just to trigger an upgrade for Dexie.Syncable\ndb.version(2).stores({}); // No need to add / remove tables. This is just to allow the addon to install its tables.\n```\n\n----------------------------------------\n\nTITLE: Reading Blob Chunks in TypeScript\nDESCRIPTION: This snippet shows how to read a portion of a Blob as text using FileReader in TypeScript. It demonstrates slicing a Blob and reading it asynchronously.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstPart = blob.slice(0,100);\n\nconst first100Chars = await readBlob(firstPart);\n\nfunction readBlob(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onabort = ev => reject(new Error(\"file read aborted\"));\n    reader.onerror = ev => reject((ev.target as any).error);\n    reader.onload = ev => resolve((ev.target as any).result);\n    reader.readAsText(blob);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Extensions for Dexie\nDESCRIPTION: Shows how the module extends Dexie's TypeScript interfaces with new export and import methods on both the Dexie class and instances.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//\n// Extend Dexie interface (typescript-wise)\n//\ndeclare module 'dexie' {\n  // Extend methods on db\n  interface Dexie {\n    export(options?: ExportOptions): Promise<Blob>;\n    import(blob: Blob, options?: ImportOptions): Promise<void>;\n  }\n  interface DexieConstructor {\n    import(blob: Blob, options?: StaticImportOptions): Promise<Dexie>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dexie Cloud Database using CLI\nDESCRIPTION: Command to create a new Dexie Cloud database using the npx command-line tool. This generates a database URL for configuration.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-cloud/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx dexie-cloud create\n```\n\n----------------------------------------\n\nTITLE: Setup and Configuration Commands for Dexie Cloud ToDo App\nDESCRIPTION: Series of commands to create a Dexie Cloud database, install dependencies, configure the app with demo users, and start the application in development mode.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/samples/dexie-cloud-todo-app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx dexie-cloud create\nnpm install\n./configure-app.sh\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building Dexie Observable from Source\nDESCRIPTION: Commands to clone, setup, and build the Dexie Observable addon from source code. This requires forking the Dexie.js repository first.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/dist/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/Dexie.js.git\ncd Dexie.js\nnpm install\ncd addons/Dexie.Observable\nnpm run build       # or npm run watch\n```\n\n----------------------------------------\n\nTITLE: Running Dexie.js Tests\nDESCRIPTION: Command to run the test suite for Dexie.js. Used by contributors to verify that code changes don't break existing functionality.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Dexie.js Tests\nDESCRIPTION: Command for executing the test suite for Dexie.js project.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting Dexie.js Watch Mode\nDESCRIPTION: Command for running Dexie.js in watch mode for development, which automatically rebuilds on file changes.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Watch Mode for Dexie.js Development\nDESCRIPTION: Command to start watch mode during development, which automatically rebuilds the project when source files change.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Example JSON Export File\nDESCRIPTION: Example of an exported JSON file from the dexie-export-import module, showing the structure with database metadata, table schemas, and rows with type information.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatName\": \"dexie\",\n  \"formatVersion\": 1,\n  \"data\": {\n    \"databaseName\": \"dexie-export-import-basic-tests\",\n    \"databaseVersion\": 1,\n    \"tables\": [\n      {\n        \"name\": \"outbound\",\n        \"schema\": \"\",\n        \"rowCount\": 2\n      },\n      {\n        \"name\": \"inbound\",\n        \"schema\": \"++id\",\n        \"rowCount\": 3\n      }\n    ],\n    \"data\": [{\n      \"tableName\": \"outbound\",\n      \"inbound\": false,\n      \"rows\": [\n        [\n          1,\n          {\n            \"foo\": \"bar\"\n          }\n        ],\n        [\n          2,\n          {\n            \"bar\": \"foo\"\n          }\n        ]\n      ]\n    },{\n      \"tableName\": \"inbound\",\n      \"inbound\": true,\n      \"rows\": [\n        {\n          \"id\": 1,\n          \"date\": 1,\n          \"fullBlob\": {\n            \"type\": \"\",\n            \"data\": \"AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\"\n          },\n          \"binary\": {\n            \"buffer\": \"AQID\",\n            \"byteOffset\": 0,\n            \"length\": 3\n          },\n          \"text\": \"foo\",\n          \"bool\": false,\n          \"$types\": {\n            \"date\": \"date\",\n            \"fullBlob\": \"blob2\",\n            \"binary\": \"uint8array2\",\n            \"binary.buffer\": \"arraybuffer\"\n          }\n        },\n        {\n          \"id\": 2,\n          \"foo\": \"bar\"\n        },\n        {\n          \"id\": 3,\n          \"bar\": \"foo\"\n        }\n      ]\n    }]\n  }\n\n```\n\n----------------------------------------\n\nTITLE: ExportProgress Interface Definition\nDESCRIPTION: TypeScript interface for the progress object passed to the progressCallback during export operations, tracking completed tables, rows, and overall completion.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExportProgress {\n  totalTables: number;\n  completedTables: number;\n  totalRows: number;\n  completedRows: number;\n  done: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying and Whitelisting Dexie Cloud App\nDESCRIPTION: Commands for deploying the app to GitHub Pages and whitelisting the deployed URL in Dexie Cloud to enable the service worker functionality.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/samples/dexie-cloud-todo-app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\nnpx dexie-cloud whitelist https://your-github-username.github.io\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie.js via NPM\nDESCRIPTION: Command to install Dexie.js package using NPM package manager. This installs the Dexie.js library as a dependency in your project.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/dist/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie.Syncable via npm\nDESCRIPTION: Command to install the Dexie.Syncable add-on using npm package manager. This will add the package to your project's dependencies.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/dist/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dexie-syncable --save\n```\n\n----------------------------------------\n\nTITLE: ImportProgress Interface Definition\nDESCRIPTION: TypeScript interface for the progress object passed to the progressCallback during import operations, tracking completed tables, rows, and overall completion.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImportProgress {\n  totalTables: number;\n  completedTables: number;\n  totalRows: number;\n  completedRows: number;\n  done: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie with Syncable add-on via Bower\nDESCRIPTION: Commands to install Dexie using Bower, which includes the Syncable add-on, and then list the contents of the add-on's dist directory.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/dist/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bower install dexie --save\n$ ls bower_components/dexie/addons/Dexie.Syncable/dist\ndexie-syncable.js  dexie-syncable.js.map  dexie-syncable.min.js  dexie-syncable.min.js.map\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all required project dependencies before running the application.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/samples/vue/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server using npm. The server will run on port 1123 with hot-reload functionality.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/samples/vue/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to create a production build of the application. Build output will be stored in the build directory.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/samples/vue/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Linking Dexie.js to Local Application\nDESCRIPTION: Command to create a symbolic link between the local Dexie.js development copy and an application's node_modules directory.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm link dexie\n```\n\n----------------------------------------\n\nTITLE: Default Chunk Size Constants\nDESCRIPTION: Default constants defining the chunk sizes used for importing and exporting when not specified in the options.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_KILOBYTES_PER_CHUNK = 1024; // When importing blob\nconst DEFAULT_ROWS_PER_CHUNK = 2000; // When exporting db\n```\n\n----------------------------------------\n\nTITLE: Binary Tree Visualization with ASCII Art\nDESCRIPTION: An ASCII representation of a binary tree showing the insertion of a new node [90-92], subsequent rotation, and final rebalancing of the tree structure.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/test/rebalance.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTree:\n        [63-71]\n    (null)  [99-102]\n\nInsert [90-92]:\n\n        [63-71]\n  (null)      [99-102]\n          [90-92]    (null)\n\nRotation:\n       [99-102]\n  [63-72]       (null)\n(null)   [90-92]\n\nRebalance root (as it SHOULD be):\n\n          [90-92]\n  [63-71]        [99-102]\n(null) (null)  (null)  (null)\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Nodes in JavaScript\nDESCRIPTION: This code defines tree nodes with 'from' and 'to' properties, representing ranges. Comments describe the tree structure and relationships between nodes.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/test/rebalance.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  { from: 63, to: 71 },  // 0. Tree: [63-71]\n  { from: 99, to: 102 }, // 1. Tree: [63-71]\n                         //      (null)  [99-102]\n  { from: 90, to: 92 },  // 2. Tree: [99-102]\n                         //       [63-71]  (null)\n                         //    [90-92] [90-92]\n                         // WOW: Here both left and right leafs are the same node!\n```\n\n----------------------------------------\n\nTITLE: Dexie Syncable Module Definition\nDESCRIPTION: Module header documentation defining the dexie-syncable addon. Identifies the authors David Fahlander and Nikolas Poniros and specifies the Apache License Version 2.0 licensing terms.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/tools/build-configs/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* ========================================================================== \n *                           dexie-syncable.js\n * ==========================================================================\n *\n * Dexie addon for syncing indexedDB with remote endpoints.\n *\n * By David Fahlander, david.fahlander@gmail.com,\n *    Nikolas Poniros, https://github.com/nponiros\n *\n * ==========================================================================\n *\n * Version {version}, {date}\n *\n * https://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n * \n */\n```\n\n----------------------------------------\n\nTITLE: Building Dexie.js Project\nDESCRIPTION: Commands for installing dependencies and building the Dexie.js project using pnpm package manager.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Dexie Cloud Addon Header Documentation\nDESCRIPTION: File header documentation block that describes the purpose of the Dexie Cloud addon, which provides synchronization between IndexedDB and Dexie Cloud. Created by David Fahlander and licensed under Apache License Version 2.0.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-cloud/tools/build-configs/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* ========================================================================== \n *                           dexie-cloud-addom.js\n * ==========================================================================\n *\n * Dexie addon that syncs IndexedDB with Dexie Cloud.\n *\n * By David Fahlander, david@dexie.org\n *\n * ==========================================================================\n *\n * Version {version}, {date}\n *\n * https://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n * \n */\n```\n\n----------------------------------------\n\nTITLE: Dexie.js Header Comment Block\nDESCRIPTION: Main documentation header for Dexie.js library that provides version information, authorship, and Apache License details. This comment block serves as the primary documentation for the library's purpose and licensing.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/tools/build-configs/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * Dexie.js - a minimalistic wrapper for IndexedDB\n * ===============================================\n *\n * By David Fahlander, david.fahlander@gmail.com\n *\n * Version {version}, {date}\n *\n * https://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing Dexie Export-Import Module in JavaScript\nDESCRIPTION: This code snippet defines the header for the Dexie export-import addon. It includes version information, author details, and licensing information. The module is designed to extend Dexie's functionality for exporting and importing databases using Blobs.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/dexie-export-import/tools/build-configs/banner.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* ========================================================================== \n *                           dexie-export-import.js\n * ==========================================================================\n *\n * Dexie addon for exporting and importing databases to / from Blobs.\n *\n * By David Fahlander, david.fahlander@gmail.com,\n *\n * ==========================================================================\n *\n * Version {version}, {date}\n *\n * https://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n * \n */\n```\n\n----------------------------------------\n\nTITLE: Development Mode for Contributing to Dexie.js\nDESCRIPTION: Commands for contributors to Dexie.js. The watch command starts a development build that updates as files change, while the test command runs the test suite.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/dist/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building Dexie.Syncable from Source\nDESCRIPTION: Steps to clone the Dexie.js repository, install dependencies, and build the Syncable add-on from source. This is useful for development or customization purposes.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Syncable/dist/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/Dexie.js.git\ncd Dexie.js\nnpm install\ncd addons/Dexie.Syncable\nnpm run build       # or npm run watch\n```\n\n----------------------------------------\n\nTITLE: Installing Dexie Observable via Bower\nDESCRIPTION: Commands to install Dexie via bower and locate the Observable addon files. Since Dexie v1.3.4, addons are included in the main Dexie bower package.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/addons/Dexie.Observable/dist/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bower install dexie --save\n$ ls bower_components/dexie/addons/Dexie.Observable/dist\ndexie-observable.js  dexie-observable.js.map  dexie-observable.min.js  dexie-observable.min.js.map\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Full Access\nDESCRIPTION: This snippet configures the robots.txt file to allow all user agents full access to the website. It specifies no restrictions for web crawlers.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/samples/dexie-cloud-todo-app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Banner for Hackathon\nDESCRIPTION: ASCII art banner for Dexie Global Hackathon 25, displaying event information and dates. This is used for promotional purposes in the README.\nSOURCE: https://github.com/dexie/Dexie.js/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n /$$   /$$                     /$$                   /$$     /$$                          \n| $$  | $$                    | $$                  | $$    | $$                          \n| $$  | $$  /$$$$$$   /$$$$$$$| $$   /$$  /$$$$$$  /$$$$$$  | $$$$$$$   /$$$$$$  /$$$$$$$ \n| $$$$$$$$ |____  $$ /$$_____/| $$  /$$/ |____  $$|_  $$_/  | $$__  $$ /$$__  $$| $$__  $$\n| $$__  $$  /$$$$$$$| $$      | $$$$$$/   /$$$$$$$  | $$    | $$  \\ $$| $$  \\ $$| $$  \\ $$\n| $$  | $$ /$$__  $$| $$      | $$_  $$  /$$__  $$  | $$ /$$| $$  | $$| $$  | $$| $$  | $$\n| $$  | $$|  $$$$$$$|  $$$$$$$| $$ \\  $$|  $$$$$$$  |  $$$$/| $$  | $$|  $$$$$$/| $$  | $$\n|__/  |__/ \\_______/ \\_______/|__/  \\__/ \\_______/   \\___/  |__/  |__/ \\______/ |__/  |__/\n                                                    \n🌟 Welcome to Dexie Global Hackathon 25! 🌟\n📅 Date: February 14 --> April 13, 2025\n🕒 Start coding with Dexie Cloud and win prices!\n\nFor more information: dexie.org/hackathon \n\nGood luck! 🚀\n```"
  }
]