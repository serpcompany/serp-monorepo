[
  {
    "owner": "w-okada",
    "repo": "voice-changer",
    "content": "TITLE: Python Dependencies for Voice Changer (Requirements.txt)\nDESCRIPTION: List of Python package dependencies with specific version requirements for a voice changer application. Includes packages for web servers (uvicorn, fastapi), machine learning (torch, onnxruntime-gpu), audio processing (torchaudio, librosa), and various utilities.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/server/requirements.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nuvicorn==0.21.1\npyOpenSSL==23.1.1\nnumpy==1.23.5\ntorch==2.0.1\ntorchaudio==2.0.2\nresampy==0.4.2\npython-socketio==5.8.0\nfastapi==0.95.1\npython-multipart==0.0.6\nonnxruntime-gpu==1.13.1\nscipy==1.10.1\nmatplotlib==3.7.1\nwebsockets==11.0.2\nfaiss-cpu==1.7.3\ntorchcrepe==0.0.18\nlibrosa==0.9.1\ngin==0.1.6\ngin_config==0.5.0\neinops==0.6.0\nlocal_attention==1.8.5\nwebsockets==11.0.2\nsounddevice==0.4.6\ndataclasses_json==0.5.7\nonnxsim==0.4.28\ntorchfcpe==0.0.3\n```\n\n----------------------------------------\n\nTITLE: Installing with Docker on GPU\nDESCRIPTION: Command to run the voice changer application using Docker with GPU support. This includes GPU device mappings and appropriate image selection for NVIDIA GPU acceleration.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --gpus all -p 18888:18888 -p 7860:7860 -v \"$(pwd)\"/server_data:/app/server_data voicevox/vcbin:gpu\n```\n\n----------------------------------------\n\nTITLE: Cloning Voice Changer Repository and Installing Dependencies in Python\nDESCRIPTION: This script clones the voice-changer repository and installs all required dependencies. It uses colorama for colored console output and installs several packages including libportaudio2, faiss-gpu, fairseq, pyngrok, and pyworld.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# @title Clone repository and install dependencies\n# @markdown This first step will download the latest version of Voice Changer and install the dependencies. **It can take some time to complete.**\n%cd /content/\n\n!pip install colorama --quiet\nfrom colorama import Fore, Style\nimport os\n\nprint(f\"{Fore.CYAN}> Cloning the repository...{Style.RESET_ALL}\")\n!git clone https://github.com/w-okada/voice-changer.git --quiet\nprint(f\"{Fore.GREEN}> Successfully cloned the repository!{Style.RESET_ALL}\")\n%cd voice-changer/server/\n\nprint(f\"{Fore.CYAN}> Installing libportaudio2...{Style.RESET_ALL}\")\n!apt-get -y install libportaudio2 -qq\n\nprint(f\"{Fore.CYAN}> Installing pre-dependencies...{Style.RESET_ALL}\")\n# Install dependencies that are missing from requirements.txt and pyngrok\n!pip install faiss-gpu fairseq pyngrok --quiet\n!pip install pyworld --no-build-isolation --quiet\nprint(f\"{Fore.CYAN}> Installing dependencies from requirements.txt...{Style.RESET_ALL}\")\n!pip install -r requirements.txt --quiet\n\nprint(f\"{Fore.GREEN}> Successfully installed all packages!{Style.RESET_ALL}\")\n```\n\n----------------------------------------\n\nTITLE: Installing with Docker on CPU\nDESCRIPTION: Command to run the voice changer application using Docker on CPU. This command pulls the latest Docker image and runs it with necessary port mappings and volume mounts.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 18888:18888 -p 7860:7860 -v \"$(pwd)\"/server_data:/app/server_data voicevox/vcbin:cpu\n```\n\n----------------------------------------\n\nTITLE: Running Voice Changer in Docker with GPU Support\nDESCRIPTION: Command to run the voice changer Docker container with GPU support, mapping ports and directories for persistent data storage.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --gpus all -p 18888:18888 -p 7860:7860 -v $PWD/work_dir:/app/server/voice-changer/assets wokada/voice-changer:latest\n```\n\n----------------------------------------\n\nTITLE: Running Voice Changer in Docker with CPU-Only Mode\nDESCRIPTION: Command to run the voice changer Docker container in CPU-only mode, suitable for systems without a GPU or with NVIDIA GPUs that aren't compatible.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 18888:18888 -p 7860:7860 -v $PWD/work_dir:/app/server/voice-changer/assets wokada/voice-changer:cpu-latest\n```\n\n----------------------------------------\n\nTITLE: Windows Installation Commands\nDESCRIPTION: PowerShell commands for setting up the voice changer application on Windows. This includes creating Python virtual environment, installing dependencies, and configuring the application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n./venv/bin/activate  # or Scripts\\activate\npip install -r requirements.txt\npip install -r requirements_win.txt\npython -m demo.demosample\n```\n\n----------------------------------------\n\nTITLE: Running the Voice Changer Server with Model Configuration\nDESCRIPTION: Command to start the MMVC server with various model paths and configuration options, including content vectors, HuBERT models, and pitch estimation models.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 MMVCServerSIO.py -p 18888 --https true \\\n    --content_vec_500 pretrain/checkpoint_best_legacy_500.pt  \\\n    --content_vec_500_onnx pretrain/content_vec_500.onnx \\\n    --content_vec_500_onnx_on true \\\n    --hubert_base pretrain/hubert_base.pt \\\n    --hubert_base_jp pretrain/rinna_hubert_base_jp.pt \\\n    --hubert_soft pretrain/hubert/hubert-soft-0d54a1f4.pt \\\n    --nsf_hifigan pretrain/nsf_hifigan/model \\\n    --crepe_onnx_full pretrain/crepe_onnx_full.onnx \\\n    --crepe_onnx_tiny pretrain/crepe_onnx_tiny.onnx \\\n    --rmvpe pretrain/rmvpe.pt \\\n    --model_dir model_dir \\\n    --samples samples.json\n```\n\n----------------------------------------\n\nTITLE: Checking PyTorch CUDA Availability in Python\nDESCRIPTION: Python code to check if PyTorch can detect and use CUDA for GPU acceleration, which is important for voice changer performance.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npython3 -c \"import torch; print(torch.cuda.is_available())\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Installing Dependencies for Voice Changer (Python)\nDESCRIPTION: This snippet clones the voice changer repository, installs required system and Python packages, and sets up the environment. It also includes an optional step to connect to Google Drive for storing models.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#=================Updated=================\n# @title **[1]** Clone repository and install dependencies\n# @markdown This first step will download the latest version of Voice Changer and install the dependencies. **It can take some time to complete.**\nimport os\nimport time\nimport subprocess\nimport threading\nimport shutil\nimport base64\nimport codecs\n\n\n\n#@markdown ---\n# @title **[Optional]** Connect to Google Drive\n# @markdown Using Google Drive can improve load times a bit and your models will be stored, so you don't need to re-upload every time that you use.\n\nUse_Drive=False #@param {type:\"boolean\"}\n\nfrom google.colab import drive\n\nif Use_Drive==True:\n  if not os.path.exists('/content/drive'):\n    drive.mount('/content/drive')\n\n  %cd /content/drive/MyDrive\n\n\nexternalgit=codecs.decode('uggcf://tvguho.pbz/j-bxnqn/ibvpr-punatre.tvg','rot_13')\nrvctimer=codecs.decode('uggcf://tvguho.pbz/uvanoy/eipgvzre.tvg','rot_13')\npathloc=codecs.decode('ibvpr-punatre','rot_13')\n\nfrom IPython.display import clear_output, Javascript\n\ndef update_timer_and_print():\n    global timer\n    while True:\n        hours, remainder = divmod(timer, 3600)\n        minutes, seconds = divmod(remainder, 60)\n        timer_str = f'{hours:02}:{minutes:02}:{seconds:02}'\n        print(f'\\rTimer: {timer_str}', end='', flush=True)  # Print without a newline\n        time.sleep(1)\n        timer += 1\ntimer = 0\nthreading.Thread(target=update_timer_and_print, daemon=True).start()\n\n!pip install colorama --quiet\nfrom colorama import Fore, Style\n\nprint(f\"{Fore.CYAN}> Cloning the repository...{Style.RESET_ALL}\")\n!git clone --depth 1 $externalgit &> /dev/null\nprint(f\"{Fore.GREEN}> Successfully cloned the repository!{Style.RESET_ALL}\")\n%cd $pathloc/server/\n\n# Read the content of the file\nfile_path = '../client/demo/dist/assets/gui_settings/version.txt'\n\nwith open(file_path, 'r') as file:\n    file_content = file.read()\n\n# Replace the specific text\ntext_to_replace = \"-.-.-.-\"\nnew_text = \"Google.Colab\"  # New text to replace the specific text\n\nmodified_content = file_content.replace(text_to_replace, new_text)\n\n# Write the modified content back to the file\nwith open(file_path, 'w') as file:\n    file.write(modified_content)\n\nprint(f\"Text '{text_to_replace}' has been replaced with '{new_text}' in the file.\")\n\nprint(f\"{Fore.CYAN}> Installing libportaudio2...{Style.RESET_ALL}\")\n!apt-get -y install libportaudio2 -qq\n\n!sed -i '/torch==/d' requirements.txt\n!sed -i '/torchaudio==/d' requirements.txt\n!sed -i '/numpy==/d' requirements.txt\n\n\nprint(f\"{Fore.CYAN}> Installing pre-dependencies...{Style.RESET_ALL}\")\n# Install dependencies that are missing from requirements.txt and pyngrok\n!pip install faiss-gpu fairseq pyngrok --quiet\n!pip install pyworld --no-build-isolation --quiet\n# Install webstuff\nimport asyncio\nimport re\n!pip install playwright\n!playwright install\n!playwright install-deps\n!pip install nest_asyncio\nfrom playwright.async_api import async_playwright\nprint(f\"{Fore.CYAN}> Installing dependencies from requirements.txt...{Style.RESET_ALL}\")\n!pip install -r requirements.txt --quiet\nclear_output()\nprint(f\"{Fore.GREEN}> Successfully installed all packages!{Style.RESET_ALL}\")\n```\n\n----------------------------------------\n\nTITLE: View Available CUDA Devices\nDESCRIPTION: Command to list available CUDA devices using the NVIDIA System Management Interface, useful for choosing which GPU to use for the voice changer.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Voice Changer in Python\nDESCRIPTION: This code snippet clones the voice-changer repository, installs necessary system and Python packages, and downloads default settings. It uses colorama for colored console output.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Kaggle_RealtimeVoiceChanger.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%cd /kaggle/working/\n\n!pip install colorama --quiet\nfrom colorama import Fore, Style\nimport os\n\nprint(f\"{Fore.CYAN}> Cloning the repository...{Style.RESET_ALL}\")\n!git clone https://github.com/w-okada/voice-changer.git --quiet\nprint(f\"{Fore.GREEN}> Successfully cloned the repository!{Style.RESET_ALL}\")\n%cd voice-changer/server/\n\nprint(f\"{Fore.CYAN}> Installing libportaudio2...{Style.RESET_ALL}\")\n!apt-get -y install libportaudio2 -qq\n\nprint(f\"{Fore.CYAN}> Installing pre-dependencies...{Style.RESET_ALL}\")\n!pip install faiss-gpu fairseq pyngrok --quiet \n!pip install pyworld --no-build-isolation --quiet\nprint(f\"{Fore.CYAN}> Installing dependencies from requirements.txt...{Style.RESET_ALL}\")\n!pip install -r requirements.txt --quiet\n\nif not os.path.exists(\"/kaggle/working/voice-changer/server/stored_setting.json\"):\n    !wget -q https://gist.githubusercontent.com/Rafacasari/d820d945497a01112e1a9ba331cbad4f/raw/8e0a426c22688b05dd9c541648bceab27e422dd6/kaggle_setting.json -O /kaggle/working/voice-changer/server/stored_setting.json\nprint(f\"{Fore.GREEN}> Successfully installed all packages!{Style.RESET_ALL}\")\n\nprint(f\"{Fore.GREEN}> You can safely ignore the dependency conflict errors, it's a error from Kaggle and don't interfer on Voice Changer!{Style.RESET_ALL}\")\n```\n\n----------------------------------------\n\nTITLE: Example Docker Command with MMVC Models\nDESCRIPTION: Docker command for running the voice changer application with pre-downloaded MMVC models. This mounts a specific directory to access MMVC model files inside the container.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 18888:18888 -p 7860:7860 -v \"$(pwd)\"/server_data:/app/server_data -v \"$(pwd)\"/<MMVC_MODEL_DIR>:/app/MMVC_Trainer/logs voicevox/vcbin:cpu\n```\n\n----------------------------------------\n\nTITLE: Installing Voice Changer Dependencies in Kaggle Environment\nDESCRIPTION: This code snippet clones the voice-changer repository, modifies configuration files, and installs all necessary dependencies including libportaudio2, faiss-gpu, fairseq, pyngrok and other requirements for running the voice changer server on Kaggle.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Mod_Kaggle_Real_Time_Voice_Changer.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This will make that we're on the right folder before installing\n%cd /kaggle/working/\n\n!pip install colorama --quiet\nfrom colorama import Fore, Style\nimport os\n\n!mkdir Hmod\n%cd Hmod\n!git clone https://github.com/w-okada/voice-changer.git --depth=1 --quiet .\nprint(f\"{Fore.GREEN}> Successfully cloned the repository!{Style.RESET_ALL}\")\n%cd server\n!sed -i \"s/-.-.-.-/Kaggle.Mod/\" '../client/demo/dist/assets/gui_settings/version.txt'\n!mv MMVCServerSIO.py Hmod.py\n!sed -i \"s/MMVCServerSIO/Hmod/\" Hmod.py\n\nprint(f\"{Fore.CYAN}> Installing libportaudio2...{Style.RESET_ALL}\")\n!apt-get -y install libportaudio2 -qq\n\nprint(f\"{Fore.CYAN}> Installing pre-dependencies...{Style.RESET_ALL}\")\n# Install dependencies that are missing from requirements.txt and pyngrok\n!pip install faiss-gpu fairseq pyngrok --quiet \n!pip install pyworld --no-build-isolation\nprint(f\"{Fore.CYAN}> Installing dependencies from requirements.txt...{Style.RESET_ALL}\")\n!pip install -r requirements.txt --quiet\n\n# Download the default settings ^-^\nif not os.path.exists(\"/kaggle/working/Hmod/server/stored_setting.json\"):\n    !wget -q https://gist.githubusercontent.com/Rafacasari/d820d945497a01112e1a9ba331cbad4f/raw/8e0a426c22688b05dd9c541648bceab27e422dd6/kaggle_setting.json -O /kaggle/working/24apuiBokE3TjZwc6tuqqv39SwP_2LRouVj3M9oZZCbzgntuG /server/stored_setting.json\nprint(f\"{Fore.GREEN}> Successfully installed all packages!{Style.RESET_ALL}\")\n\nprint(f\"{Fore.GREEN}> You can safely ignore the dependency conflict errors, it's a error from Kaggle and don't interfer on Voice Changer!{Style.RESET_ALL}\")\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Voice Changer\nDESCRIPTION: Executes the Docker container for the Voice Changer Client from the root folder of the repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Linux/Mac Installation Commands\nDESCRIPTION: Shell commands for installing the voice changer application on Linux or Mac systems. Creates a Python virtual environment and installs the necessary dependencies from requirements files.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\npip install -r requirements_mac.txt # for Mac\npip install -r requirements_linux.txt # for Linux\npython -m demo.demosample\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Voice Changer Client\nDESCRIPTION: Builds the Docker image for the Voice Changer Client from the root folder of the repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:docker:vcclient\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with GPU Support\nDESCRIPTION: Command to run the Docker container with GPU support. Uses the --gpus all flag to expose all available NVIDIA GPUs to the container for accelerated processing.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --gpus all -p 18888:18888 -p 7860:7860 -v \"$(pwd)\"/server_data:/app/server_data voicevox/vcbin:gpu\n```\n\n----------------------------------------\n\nTITLE: Starting the Voice Changer Server\nDESCRIPTION: Command to run the voice changer server using the MMVCServerSIO.py script, which will download required models and start the web UI.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command for GPU Support\nDESCRIPTION: Command to build a Docker image with GPU support. Uses a specialized Dockerfile.gpu that includes CUDA support for NVIDIA GPUs.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t voicevox/vcbin:gpu -f docker/Dockerfile.gpu .\n```\n\n----------------------------------------\n\nTITLE: Installing Voice Changer Dependencies\nDESCRIPTION: Commands to navigate to the server directory and install all required dependencies listed in the requirements.txt file.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Documents/voicechanger/voice-changer/server\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up LLVC Server with GPU Configuration\nDESCRIPTION: Command to start the LLVC voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=LLVC HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch and TorchVision in the Conda Environment\nDESCRIPTION: Command to install the previously downloaded PyTorch and TorchVision wheel files using pip with force-reinstall option.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --force-reinstall torch-2.0.1+rocm5.7-cp310-cp310-linux_x86_64.whl torchvision-0.15.2+rocm5.7-cp310-cp310-linux_x86_64.whl \n```\n\n----------------------------------------\n\nTITLE: Setting Up MMVCv13 Server with GPU Configuration\nDESCRIPTION: Command to start the MMVCv13 voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=MMVCv13 HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Downloading PyTorch and TorchVision for ROCm\nDESCRIPTION: Commands to download specific PyTorch and TorchVision wheel files compatible with ROCm 5.7 and Python 3.10.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# The versions of the Wheels can vary based on your GPU and the current ROCm release\nwget https://repo.radeon.com/rocm/manylinux/rocm-rel-5.7/torch-2.0.1%2Brocm5.7-cp310-cp310-linux_x86_64.whl\nwget https://repo.radeon.com/rocm/manylinux/rocm-rel-5.7/torchvision-0.15.2%2Brocm5.7-cp310-cp310-linux_x86_64.whl\n```\n\n----------------------------------------\n\nTITLE: Running Voice Changer Docker Client\nDESCRIPTION: Command to start the Docker container for the Voice Changer client. This should be executed from the root folder of the repository. After running, the client can be accessed via a web browser (Chrome only).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up MMVCv15 Server with GPU Configuration\nDESCRIPTION: Command to start the MMVCv15 voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=MMVCv15 HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Running Voice Changer Docker Client without GPU\nDESCRIPTION: Command to start the Docker container for the Voice Changer client without using GPU acceleration.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUSE_GPU=off bash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up DDSP-SVC Server with GPU Configuration\nDESCRIPTION: Command to start the DDSP-SVC voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=DDSP HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Starting Voice Changer in Client-Only Mode\nDESCRIPTION: Command to start the voice changer application in client-only mode with a specified voice changer type and connecting to a server at localhost.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=RVC HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 API_IP=localhost API_PORT=18888 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up So-VITS-SVC Server with GPU Configuration\nDESCRIPTION: Command to start the So-VITS-SVC voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=SoVitsSvc HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Starting Voice Changer Server with ngrok (Python)\nDESCRIPTION: This snippet sets up and starts the voice changer server using ngrok for remote access. It requires a ngrok account and auth token, and allows configuration of region and other options.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\n#=======================Updated=========================\n\n# @title Start Server **using ngrok**\n# @markdown This cell will start the server, the first time that you run it will download the models, so it can take a while (~1-2 minutes)\n\n# @markdown ---\n# @markdown You'll need a ngrok account, but <font color=green>**it's free**</font> and easy to create!\n# @markdown ---\n# @markdown **1** - Create a <font color=green>**free**</font> account at [ngrok](https://dashboard.ngrok.com/signup) or **login with Google/Github account**\\\n# @markdown **2** - If you didn't logged in with Google/Github, you will need to **verify your e-mail**!\\\n# @markdown **3** - Click [this link](https://dashboard.ngrok.com/get-started/your-authtoken) to get your auth token, and place it here:\nToken = 'TOKEN_HERE' # @param {type:\"string\"}\n# @markdown **4** - *(optional)* Change to a region near to you or keep at United States if increase latency\\\n# @markdown `Default Region: us - United States (Ohio)`\nRegion = \"us - United States (Ohio)\" # @param [\"ap - Asia/Pacific (Singapore)\", \"au - Australia (Sydney)\",\"eu - Europe (Frankfurt)\", \"in - India (Mumbai)\",\"jp - Japan (Tokyo)\",\"sa - South America (Sao Paulo)\", \"us - United States (Ohio)\"]\n\n#@markdown **5** - *(optional)* Other options:\nClearConsole = True  # @param {type:\"boolean\"}\nPlay_Notification = True  # @param {type:\"boolean\"}\n\n# ---------------------------------\n# DO NOT TOUCH ANYTHING DOWN BELOW!\n```\n\n----------------------------------------\n\nTITLE: Setting Up DiffusionSVC Server with GPU Configuration\nDESCRIPTION: Command to start the DiffusionSVC voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=Diffusion HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Starting Voice Changer Server with Ngrok in Python\nDESCRIPTION: This script starts the voice changer server and creates a public URL using ngrok. It requires a ngrok auth token for setup and allows selection of the server region. The script also monitors when the server is ready and displays the public URL for access.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# @title Start Server **using ngrok**\n# @markdown This cell will start the server, the first time that you run it will download the models, so it can take a while (~1-2 minutes)\n\n# @markdown ---\n# @markdown You'll need a ngrok account, but <font color=green>**it's free**</font> and easy to create!\n# @markdown ---\n# @markdown **1** - Create a <font color=green>**free**</font> account at [ngrok](https://dashboard.ngrok.com/signup) or **login with Google/Github account**\\\n# @markdown **2** - If you didn't logged in with Google/Github, you will need to **verify your e-mail**!\\\n# @markdown **3** - Click [this link](https://dashboard.ngrok.com/get-started/your-authtoken) to get your auth token, and place it here:\nToken = '' # @param {type:\"string\"}\n# @markdown **4** - *(optional)* Change to a region near to you or keep at United States if increase latency\\\n# @markdown `Default Region: us - United States (Ohio)`\nRegion = \"us - United States (Ohio)\" # @param [\"ap - Asia/Pacific (Singapore)\", \"au - Australia (Sydney)\",\"eu - Europe (Frankfurt)\", \"in - India (Mumbai)\",\"jp - Japan (Tokyo)\",\"sa - South America (Sao Paulo)\", \"us - United States (Ohio)\"]\n\n#@markdown **5** - *(optional)* Other options:\nClearConsole = True  # @param {type:\"boolean\"}\n\n# ---------------------------------\n# DO NOT TOUCH ANYTHING DOWN BELOW!\n# ---------------------------------\n\n%cd /content/voice-changer/server\n\nfrom pyngrok import conf, ngrok\nMyConfig = conf.PyngrokConfig()\nMyConfig.auth_token = Token\nMyConfig.region = Region[0:2]\n#conf.get_default().authtoken = Token\n#conf.get_default().region = Region\nconf.set_default(MyConfig);\n\nimport subprocess, threading, time, socket, urllib.request\nPORT = 8000\n\nfrom pyngrok import ngrok\nngrokConnection = ngrok.connect(PORT)\npublic_url = ngrokConnection.public_url\n\nfrom IPython.display import clear_output\n\ndef wait_for_server():\n    while True:\n        time.sleep(0.5)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        result = sock.connect_ex(('127.0.0.1', PORT))\n        if result == 0:\n            break\n        sock.close()\n    if ClearConsole:\n        clear_output()\n    print(\"--------- SERVER READY! ---------\")\n    print(\"Your server is available at:\")\n    print(public_url)\n    print(\"---------------------------------\")\n\nthreading.Thread(target=wait_for_server, daemon=True).start()\n\n!python3 MMVCServerSIO.py \\\n  -p {PORT} \\\n  --https False \\\n  --content_vec_500 pretrain/checkpoint_best_legacy_500.pt \\\n  --content_vec_500_onnx pretrain/content_vec_500.onnx \\\n  --content_vec_500_onnx_on true \\\n  --hubert_base pretrain/hubert_base.pt \\\n  --hubert_base_jp pretrain/rinna_hubert_base_jp.pt \\\n  --hubert_soft pretrain/hubert/hubert-soft-0d54a1f4.pt \\\n  --nsf_hifigan pretrain/nsf_hifigan/model \\\n  --crepe_onnx_full pretrain/crepe_onnx_full.onnx \\\n  --crepe_onnx_tiny pretrain/crepe_onnx_tiny.onnx \\\n  --rmvpe pretrain/rmvpe.pt \\\n  --model_dir model_dir \\\n  --samples samples.json\n\nngrok.disconnect(ngrokConnection.public_url)\n```\n\n----------------------------------------\n\nTITLE: Setting Up RVC Server with GPU Configuration\nDESCRIPTION: Command to start the RVC voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=RVC HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Starting Voice Changer Server with ngrok in Python\nDESCRIPTION: This code snippet sets up and starts the Voice Changer server using ngrok for public access. It configures ngrok settings, waits for the server to start, and then runs the MMVCServerSIO.py script with various parameters.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Kaggle_RealtimeVoiceChanger.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%cd /kaggle/working/voice-changer/server\n    \nfrom pyngrok import conf, ngrok\nMyConfig = conf.PyngrokConfig()\nMyConfig.auth_token = Token\nMyConfig.region = Region\nconf.set_default(MyConfig);\n\nimport subprocess, threading, time, socket, urllib.request\nPORT = 8000\n\nfrom pyngrok import ngrok\nngrokConnection = ngrok.connect(PORT)\npublic_url = ngrokConnection.public_url\n\nfrom IPython.display import clear_output\n\ndef wait_for_server():\n    while True:\n        time.sleep(0.5)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        result = sock.connect_ex(('127.0.0.1', PORT))\n        if result == 0:\n            break\n        sock.close()\n    if ClearConsole:\n        clear_output()\n    print(\"--------- SERVER READY! ---------\")\n    print(\"Your server is available at:\")\n    print(public_url)\n    print(\"---------------------------------\")\n\nthreading.Thread(target=wait_for_server, daemon=True).start()\n\n!python3 MMVCServerSIO.py \\\n  -p {PORT} \\\n  --https False \\\n  --content_vec_500 pretrain/checkpoint_best_legacy_500.pt \\\n  --content_vec_500_onnx pretrain/content_vec_500.onnx \\\n  --content_vec_500_onnx_on true \\\n  --hubert_base pretrain/hubert_base.pt \\\n  --hubert_base_jp pretrain/rinna_hubert_base_jp.pt \\\n  --hubert_soft pretrain/hubert/hubert-soft-0d54a1f4.pt \\\n  --nsf_hifigan pretrain/nsf_hifigan/model \\\n  --crepe_onnx_full pretrain/crepe_onnx_full.onnx \\\n  --crepe_onnx_tiny pretrain/crepe_onnx_tiny.onnx \\\n  --rmvpe pretrain/rmvpe.pt \\\n  --model_dir model_dir \\\n  --samples samples.json\n\nngrok.disconnect(ngrokConnection.public_url)\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies for Voice Changer\nDESCRIPTION: Commands to navigate to the server directory and install the required Python dependencies using pip.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd voice-changer/server\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Deploying Voice Changer Server with Ngrok for Public Access\nDESCRIPTION: This code starts the voice changer server and exposes it to the internet using ngrok. It requires an ngrok authentication token and lets you select a regional server. The script waits for the local server to start, then displays the public URL for accessing the voice changer.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Mod_Kaggle_Real_Time_Voice_Changer.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nToken = 'Token_Here'\nRegion = \"ap\" # Read the instructions below\n\n# You can change the region for a better latency, use only the abbreviation\n# Choose between this options: \n# us -> United States (Ohio)\n# ap -> Asia/Pacific (Singapore)\n# au -> Australia (Sydney)\n# eu -> Europe (Frankfurt)\n# in -> India (Mumbai)\n# jp -> Japan (Tokyo)\n# sa -> South America (Sao Paulo)\n\n# ---------------------------------\n# DO NOT TOUCH ANYTHING DOWN BELOW!\n\n%cd /kaggle/working/Hmod/server\n    \nfrom pyngrok import conf, ngrok\nMyConfig = conf.PyngrokConfig()\nMyConfig.auth_token = Token\nMyConfig.region = Region\nconf.get_default().authtoken = Token\nconf.get_default().region = Region\nconf.set_default(MyConfig);\n\nimport subprocess, threading, time, socket, urllib.request\nPORT = 8000\n\nfrom pyngrok import ngrok\nngrokConnection = ngrok.connect(PORT)\npublic_url = ngrokConnection.public_url\n\ndef wait_for_server():\n    while True:\n        time.sleep(0.5)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        result = sock.connect_ex(('127.0.0.1', PORT))\n        if result == 0:\n            break\n        sock.close()\n    print(\"--------- SERVER READY! ---------\")\n    print(\"Your server is available at:\")\n    print(public_url)\n    print(\"---------------------------------\")\n\nthreading.Thread(target=wait_for_server, daemon=True).start()\n\n!python3 Hmod.py \\\n  -p {PORT} \\\n  --https False \\\n  --content_vec_500 pretrain/checkpoint_best_legacy_500.pt \\\n  --content_vec_500_onnx pretrain/content_vec_500.onnx \\\n  --content_vec_500_onnx_on true \\\n  --hubert_base pretrain/hubert_base.pt \\\n  --hubert_base_jp pretrain/rinna_hubert_base_jp.pt \\\n  --hubert_soft pretrain/hubert/hubert-soft-0d54a1f4.pt \\\n  --nsf_hifigan pretrain/nsf_hifigan/model \\\n  --crepe_onnx_full pretrain/crepe_onnx_full.onnx \\\n  --crepe_onnx_tiny pretrain/crepe_onnx_tiny.onnx \\\n  --rmvpe pretrain/rmvpe.pt \\\n  --model_dir model_dir \\\n  --samples samples.json\n\nngrok.disconnect(ngrokConnection.public_url)\n```\n\n----------------------------------------\n\nTITLE: Setting up the Voice Changer Directory and Cloning Repository\nDESCRIPTION: Commands to create a directory and clone the voice-changer repository from GitHub.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/Documents/voicechanger\ncd ~/Documents/voicechanger\ngit clone https://github.com/w-okada/voice-changer.git\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Local Development\nDESCRIPTION: Command to run a locally built Docker image for development. This command maps ports and mounts volumes to make server data persistent between container runs.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 18888:18888 -p 7860:7860 -v \"$(pwd)\"/server_data:/app/server_data voicevox/vcbin:cpu\n```\n\n----------------------------------------\n\nTITLE: Activating the Conda Environment\nDESCRIPTION: Command to activate the previously created conda environment to install dependencies within it.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda activate voicechanger\n```\n\n----------------------------------------\n\nTITLE: Sample Docker-Compose Configuration for Voice Changer\nDESCRIPTION: A Docker Compose YAML configuration for deploying the voice changer service with container name, port mappings, volume mounts, and restart policy.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  vc:\n    container_name: vc\n    image: wokada/voice-changer:cpu-latest\n    restart: always\n    # network_mode: host  # <= uncomment this if needed\n    ports:\n      - \"18888:18888\"\n      - \"7860:7860\"\n    volumes:\n      - ./workdir:/app/server/voice-changer/assets\n```\n\n----------------------------------------\n\nTITLE: Creating a Conda Environment for Voice Changer\nDESCRIPTION: Command to create a new conda environment named 'voicechanger' with Python 3.10.9, which is compatible with ROCm 7.2.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create --name voicechanger python=3.10.9\n```\n\n----------------------------------------\n\nTITLE: Running Voice Changer Docker Client with Local Image\nDESCRIPTION: Command to start the Docker container for the Voice Changer client using a local Docker image instead of pulling from a repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUSE_LOCAL=on bash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Anaconda on Linux\nDESCRIPTION: Commands to download and execute the Anaconda installer script, making it executable before running.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Downloads\nchmod u+x Anaconda3-xxx-Linux-x86_64.sh\n./Anaconda3-xxx-Linux-x86_64.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Docker using Get-Docker Script\nDESCRIPTION: Command to install Docker using the get-docker.sh script, which is a common method for installing Docker on Linux systems.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Local Image\nDESCRIPTION: Executes the Voice Changer Docker container using a local Docker image instead of pulling from a remote repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUSE_LOCAL=on bash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Visual C++ Redistributable Packages\nDESCRIPTION: Command to install Microsoft Visual C++ Redistributable Packages using winget, which are required dependencies for the voice changer application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/edition.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwinget install Microsoft.VCRedist.2015+.x64\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Custom Port\nDESCRIPTION: Launches the Voice Changer Docker container while specifying a custom port number using the EX_PORT environment variable.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nEX_PORT=<port> bash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA CUDA Toolkit with winget\nDESCRIPTION: Command to install NVIDIA CUDA Toolkit using winget, which is necessary for GPU acceleration in the voice changer application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/edition.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwinget install Nvidia.CUDA\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container Without GPU\nDESCRIPTION: Launches the Voice Changer Docker container without GPU acceleration by setting the USE_GPU environment variable to 'off'.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUSE_GPU=off bash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command for Local Development\nDESCRIPTION: Command to build a Docker image locally for development purposes. This builds from the current directory using the Dockerfile and tags it as voicevox/vcbin:cpu.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t voicevox/vcbin:cpu -f docker/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Model Weights\nDESCRIPTION: Shows the expected directory structure for the model weights folder which is required for the Voice Changer application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tree docker_vcclient/weights/\ndocker_vcclient/weights/\n├── checkpoint_best_legacy_500.onnx\n├── checkpoint_best_legacy_500.pt\n├── hubert-soft-0d54a1f4.pt\n├── hubert_base.pt\n└── nsf_hifigan\n    ├── NOTICE.txt\n    ├── NOTICE.zh-CN.txt\n    ├── config.json\n    └── model\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration for Docker Image Build\nDESCRIPTION: GitHub Actions workflow configuration that builds and pushes Docker images for both CPU and GPU versions of the application. It includes steps for QEMU setup, Docker buildx, and image pushing to Docker Hub.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/assets/gui_settings/edition.txt#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Create and publish a Docker image\n\non:\n  push:\n    branches: [\"master\"]\n  workflow_dispatch:\n\nenv:\n  REGISTRY: voicevox\n  IMAGE_NAME: vcbin\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        tag_name:\n          - cpu\n          - gpu\n\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - if: matrix.tag_name == 'cpu'\n        run: echo \"DOCKERFILE=docker/Dockerfile\" >> $GITHUB_ENV\n\n      - if: matrix.tag_name == 'gpu'\n        run: echo \"DOCKERFILE=docker/Dockerfile.gpu\" >> $GITHUB_ENV\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          file: ${{ env.DOCKERFILE }}\n          push: true\n          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag_name }}\n          # platforms: linux/amd64,linux/arm64\n          platforms: linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Setting Up Beatrice Server with GPU Configuration\nDESCRIPTION: Command to start the Beatrice voice changer server with specific GPU device assignments for different components (Hubert, MMD, and Node).\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nVOICE_CHANGER_TYPE=Beatrice HUBERT_CUDA_DEVICE=0 MMD_CUDA_DEVICE=0 NODE_CUDA_DEVICE=0 python3 MMVCServerSIO.py\n```\n\n----------------------------------------\n\nTITLE: Building the Voice Changer Client\nDESCRIPTION: Commands to navigate to the client directories, install dependencies, and build the client components for development purposes.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd client\ncd lib\nnpm install\nnpm run build:dev\ncd ../demo\nnpm install\nnpm run build:dev\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group for Non-Root Access\nDESCRIPTION: Command to add the current user to the Docker group, allowing Docker to be used without root privileges after logging out and back in.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Cloning the Voice Changer Repository\nDESCRIPTION: Git command to clone the voice-changer project repository from GitHub.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/w-okada/voice-changer.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for F0 Extractor Options\nDESCRIPTION: A markdown table describing the different F0 extractor algorithms available in the voice changer, including their processing type and characteristics.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_latest.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| F0 Extractor | type  | description                |\n| ------------ | ----- | -------------------------- |\n| dio          | cpu   | 軽量                       |\n| harvest      | cpu   | 高精度                     |\n| crepe        | torch | GPU を使用する高速、高精度 |\n| crepe full   | onnx  | GPU を使用する高速、高精度 |\n| crepe tiny   | onnx  | GPU を使用する高速、軽量版 |\n| rnvpe        | torch | GPU を使用する高速、高精度 |\n```\n\n----------------------------------------\n\nTITLE: Cloning Voice Changer Repository from GitHub\nDESCRIPTION: Git command to clone the voice-changer repository from GitHub using SSH, which requires proper SSH key setup.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:w-okada/voice-changer.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Icon Links\nDESCRIPTION: A markdown table defining the icons in the title area and their corresponding links, including GitHub repository, manual, tools, and donation links.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_latest.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| アイコン                                                                                                                                     | リンク                           |\n| :------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------- |\n| <img src=\"https://github.com/w-okada/rvc-trainer-docker/assets/48346627/97c18ca5-eee5-4be2-92a7-8092fff960f2\" width=\"32\"> Octocat            | github のリポジトリへのリンク    |\n| <img src=\"https://github.com/w-okada/rvc-trainer-docker/assets/48346627/751164e4-7b7d-4d7e-b49c-1ad660bf7439\" width=\"32\"> クエスションマーク | マニュアル へのリンク            |\n| <img src=\"https://github.com/w-okada/rvc-trainer-docker/assets/48346627/7bc188db-3aae-43eb-98a1-34aacc16173d\" width=\"32\"> スパナ             | 各種便利ツールへのリンク         |\n| <img src=\"https://github.com/w-okada/rvc-trainer-docker/assets/48346627/5db16acc-e901-40d2-8fc2-1fb9fd67f59c\" width=\"32\"> コーヒー           | 開発者へ**寄付**するためのリンク |\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Keys to GitHub Authentication\nDESCRIPTION: Commands to generate an SSH key and add it to the SSH agent for authentication with GitHub, necessary for cloning repositories.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/public/assets/gui_settings/version.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519 -C \"your_email@example.com\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n```\n\n----------------------------------------\n\nTITLE: Starting the Voice Changer Application on Mac\nDESCRIPTION: Steps for launching the voice changer on Mac by running both MMVCServerSIO and startHTTP.command files in sequence.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_1_5_3_7.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMMVCServerSIO\nstartHTTP.command\n```\n\n----------------------------------------\n\nTITLE: Creating Anaconda Virtual Environment for Voice Changer Development\nDESCRIPTION: Commands to create and activate a Python 3.10 Anaconda virtual environment for voice-changer development.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ conda create -n vcclient-dev python=3.10\n$ conda activate vcclient-dev\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Server on Windows\nDESCRIPTION: Instructions for starting the voice changer application on Windows by running the start_http.bat file after extraction.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_1_5_3_7.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstart_http.bat\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch with CUDA Support for Windows Anaconda\nDESCRIPTION: Conda command to install PyTorch with CUDA 11.8 support for Windows environments, followed by additional Python package installations.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nconda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Server on Mac\nDESCRIPTION: Instructions for starting the HTTP server on Mac by executing a command file after extracting the downloaded file.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_1_5_3_3.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstartHttp.command\n```\n\n----------------------------------------\n\nTITLE: Setting CUDA Library Path for WSL in Voice Changer\nDESCRIPTION: Command to set the LD_LIBRARY_PATH environment variable for CUDA libraries when using WSL, which fixes CUDA-related errors.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=/usr/lib/wsl/lib:$LD_LIBRARY_PATH\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Server on Windows\nDESCRIPTION: Instructions for starting the HTTP server on Windows by executing a batch file after extracting the downloaded ZIP file.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_1_5_3_3.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nstart_http.bat\n```\n\n----------------------------------------\n\nTITLE: Installing PortAudio Dependencies for Voice Changer\nDESCRIPTION: Commands to install the required system libraries for PortAudio, which is needed for audio processing in the voice-changer application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install libportaudio2\n$ sudo apt-get install libasound-dev\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Server on Mac\nDESCRIPTION: Command to start the HTTP server on Mac systems. Users need to execute this command file after extracting the downloaded archive to launch the voice changer application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_1_5_3_1.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstartHttp.command\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Python Packages for Windows\nDESCRIPTION: Commands to install additional Python packages (chardet and a specific version of numpy) required for Windows environments.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/README_dev_en.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install chardet\npip install numpy==1.24.0\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Server on Windows\nDESCRIPTION: Command to start the HTTP server on Windows systems. Users need to execute this batch file after extracting the downloaded ZIP archive to launch the voice changer application.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_ja_1_5_3_1.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nstart_http.bat\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Server on Mac\nDESCRIPTION: Command to execute the HTTP server startup script for the voice changer application on macOS.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_en_1_5_2_4.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstartHttp.command\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Server on Windows\nDESCRIPTION: Batch command to start the HTTP server for the voice changer application on Windows.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_en_1_5_2_4.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nstart_http.bat\n```\n\n----------------------------------------\n\nTITLE: Running the Main Application Script\nDESCRIPTION: This snippet executes a main Python script with several parameters defined for machine learning models. It runs the script with Python 3, passing model paths and additional options as command-line arguments.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n!python3 $mainpy \\\n  -p {PORT} \\\n  --https False \\\n  --content_vec_500 pretrain/checkpoint_best_legacy_500.pt \\\n  --content_vec_500_onnx pretrain/content_vec_500.onnx \\\n  --content_vec_500_onnx_on true \\\n  --hubert_base pretrain/hubert_base.pt \\\n  --hubert_base_jp pretrain/rinna_hubert_base_jp.pt \\\n  --hubert_soft pretrain/hubert/hubert-soft-0d54a1f4.pt \\\n  --nsf_hifigan pretrain/nsf_hifigan/model \\\n  --crepe_onnx_full pretrain/crepe_onnx_full.onnx \\\n  --crepe_onnx_tiny pretrain/crepe_onnx_tiny.onnx \\\n  --rmvpe pretrain/rmvpe.pt \\\n  --model_dir model_dir \\\n  --samples samples.json\n```\n\n----------------------------------------\n\nTITLE: Pushing Voice Changer Docker Client to Repository\nDESCRIPTION: Command for developers to push the built Docker image to a repository. This should only be used by developers with appropriate permissions.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run push:docker:vcclient\n```\n\n----------------------------------------\n\nTITLE: Uploading Voice Model for Voice Changer (Python)\nDESCRIPTION: This snippet provides functionality to upload a voice model to a specified slot. It supports downloading models from weights.gg or Hugging Face, and optionally adds an icon to the model.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#@title **[Optional]** Upload a voice model (Run this before running the Voice Changer)\nimport os\nimport json\nfrom IPython.display import Image\nimport requests\n\nmodel_slot = \"0\" #@paramn\n!rm -rf model_dir/$model_slot\n#@markdown **[Optional]** Add an icon to the model\nicon_link = \"https://cdn.donmai.us/sample/12/57/__rin_penrose_idol_corp_drawn_by_juu_ame__sample-12579843de9487cf2db82058ba5e77d4.jpg\" #@param {type:\"string\"}\nicon_link = '\"'+icon_link+'\"'\n!mkdir model_dir\n!mkdir model_dir/$model_slot\n#@markdown Put your model's download link here `(must be a zip file)` only supports **weights.gg** & **huggingface.co**\nmodel_link = \"https://huggingface.co/HinaBl/Rin-Penrose/resolve/main/RinPenrose600.zip?download=true\"  #@param {type:\"string\"}\n\nif model_link.startswith(\"https://www.weights.gg\") or model_link.startswith(\"https://weights.gg\"):\n  weights_code = requests.get(\"https://pastebin.com/raw/ytHLr8h0\").text\n  exec(weights_code)\nelse:\n  model_link = model_link\n\nmodel_link = '\"'+model_link+'\"'\n!curl -L $model_link > model.zip\n\n# Conditionally set the iconFile based on whether icon_link is empty\nif icon_link:\n    iconFile = \"icon.png\"\n    !curl -L $icon_link > model_dir/$model_slot/icon.png\nelse:\n    iconFile = \"\"\n    print(\"icon_link is empty, so no icon file will be downloaded.\")\n\n!unzip model.zip -d model_dir/$model_slot\n\n!mv model_dir/$model_slot/*/* model_dir/$model_slot/\n!rm -rf model_dir/$model_slot/*/\n#@markdown **Model Voice Convertion Setting**\nTune = 12 #@param {type:\"slider\",min:-50,max:50,step:1}\nIndex = 0 #@param {type:\"slider\",min:0,max:1,step:0.1}\n\nparam_link = \"\"\nif param_link == \"\":\n  paramset = requests.get(\"https://pastebin.com/raw/SAKwUCt1\").text\n  exec(paramset)\n\nclear_output()\nprint(\"\\033[93mModel with the name of \"+model_name+\" has been Imported to slot \"+model_slot)\n```\n\n----------------------------------------\n\nTITLE: Running Voice Changer Docker Client with Custom Port\nDESCRIPTION: Command to start the Docker container for the Voice Changer client with a custom port number. Replace <port> with the desired port number.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nEX_PORT=<port> bash start_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Ngrok\nDESCRIPTION: This snippet configures Ngrok settings such as the authentication token and region. It prepares Ngrok to create a tunnel for the specified server port.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyngrok import conf, ngrok\nMyConfig = conf.PyngrokConfig()\nMyConfig.auth_token = Token\nMyConfig.region = Region[0:2]\n#conf.get_default().authtoken = Token\n#conf.get_default().region = Region\nconf.set_default(MyConfig);\n```\n\n----------------------------------------\n\nTITLE: Building Voice Changer Docker Client\nDESCRIPTION: Command to build the Docker image for the Voice Changer client. This should be run from the root folder of the repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:docker:vcclient\n```\n\n----------------------------------------\n\nTITLE: Waiting for Server to be Ready\nDESCRIPTION: This function continuously checks if the server is up and running by attempting to connect to the specified local port. Once the server is ready, it prints the public URL from Ngrok and optionally plays a notification sound.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef wait_for_server():\n    while True:\n        time.sleep(0.5)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        result = sock.connect_ex(('127.0.0.1', PORT))\n        if result == 0:\n            break\n        sock.close()\n    if ClearConsole:\n        clear_output()\n    print(\"--------- SERVER READY! ---------\")\n    print(\"Your server is available at:\")\n    print(public_url)\n    print(\"---------------------------------\")\n    if Play_Notification==True:\n      play_notification_sound()\n```\n\n----------------------------------------\n\nTITLE: Tsukuyomi-chan Voice Data Usage Notice in Japanese\nDESCRIPTION: A notice about using voice data from the free character 'Tsukuyomi-chan' in the software's voice synthesis. It provides attribution and links to the corpus used.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docs_i18n/README_la.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  本ソフトウェアの音声合成には、フリー素材キャラクター「つくよみちゃん」が無料公開している音声データを使用しています。\n  ■つくよみちゃんコーパス（CV.夢前黎）\n  https://tyc.rei-yumesaki.net/material/corpus/\n  © Rei Yumesaki\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Ngrok\nDESCRIPTION: This snippet gracefully disconnects the Ngrok tunnel using the public URL provided at the beginning.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nngrok.disconnect(ngrokConnection.public_url)\n```\n\n----------------------------------------\n\nTITLE: Displaying Tsukuyomi-chan Usage Terms in Japanese\nDESCRIPTION: This code snippet shows the terms of use for the Tsukuyomi-chan voice corpus in Japanese, prohibiting certain uses of the converted voice.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docs_i18n/README_en.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n■人を批判・攻撃すること。（「批判・攻撃」の定義は、つくよみちゃんキャラクターライセンスに準じます）\n\n■特定の政治的立場・宗教・思想への賛同または反対を呼びかけること。\n\n■刺激の強い表現をゾーニングなしで公開すること。\n\n■他者に対して二次利用（素材としての利用）を許可する形で公開すること。\n※鑑賞用の作品として配布・販売していただくことは問題ございません。\n```\n\n----------------------------------------\n\nTITLE: Playing Notification Sound\nDESCRIPTION: This function plays a notification sound when the server is ready by utilizing IPython's display capabilities.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef play_notification_sound():\n    display(Audio(url='https://raw.githubusercontent.com/hinabl/rmvpe-ai-kaggle/main/custom/audios/notif.mp3', autoplay=True))\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Contents\nDESCRIPTION: Command to list the directory contents to verify the downloaded wheel files and cloned repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_anaconda_amd_rocm.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ls\ntorch-2.0.1+rocm5.7-cp310-cp310-linux_x86_64.whl\ntorchvision-0.15.2+rocm5.7-cp310-cp310-linux_x86_64.whl\nvoice-changer\n```\n\n----------------------------------------\n\nTITLE: F0 Extractor Features Table in Markdown\nDESCRIPTION: A table showing various F0 extraction algorithms available in the Voice Changer application, their types (CPU/GPU), and descriptions of their characteristics.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/tutorials/tutorial_rvc_en_latest.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| F0 Extractor | type  | description                 |\n| ------------ | ----- | --------------------------- |\n| dio          | cpu   | lightweight                 |\n| harvest      | cpu   | High-precision              |\n| crepe        | torch | GPU-enabled、high-precision |\n| crepe full   | onnx  | GPU-enabled、high-precision |\n| crepe tiny   | onnx  | GPU-enabled、lightweight    |\n| rnvpe        | torch | GPU-enabled、high-precision |\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies with APT (Bash)\nDESCRIPTION: Commented bash commands showing how to install essential system packages including Emacs, locate tools, wget, git, curl, gcc, g++, make, and unzip. These are likely prerequisites for the voice changer project.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/server/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# apt-get update\n# apt-get install -y emacs mlocate wget git curl gcc g++ make unzip\n# wget https://repo.anaconda.com/archive/Anaconda3-2022.10-Linux-x86_64.sh\n# bash Anaconda3-2022.10-Linux-x86_64.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok Connection\nDESCRIPTION: This snippet establishes a Ngrok connection on a specified port and retrieves the public URL to access the server from the internet.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/Hina_Modified_Realtime_Voice_Changer_on_Colab.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nngrokConnection = ngrok.connect(PORT)\npublic_url = ngrokConnection.public_url\n```\n\n----------------------------------------\n\nTITLE: Displaying Amitaro Usage Terms in Japanese\nDESCRIPTION: This code snippet shows the terms of use for Amitaro's Voice Material Workshop in Japanese, allowing voice conversion with specific conditions.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docs_i18n/README_en.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nあみたろの声素材やコーパス読み上げ音声を使って音声モデルを作ったり、ボイスチェンジャーや声質変換などを使用して、自分の声をあみたろの声に変換して使うのもOKです。\n\nただしその場合は絶対に、あみたろ（もしくは小春音アミ）の声に声質変換していることを明記し、あみたろ（および小春音アミ）が話しているわけではないことが誰でもわかるようにしてください。\nまた、あみたろの声で話す内容は声素材の利用規約の範囲内のみとし、センシティブな発言などはしないでください。\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Repository\nDESCRIPTION: Command for developers to push the Voice Changer Client Docker image to a repository.\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/docker_vcclient/README_en.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run push:docker:vcclient\n```\n\n----------------------------------------\n\nTITLE: Regenerator Runtime License Header\nDESCRIPTION: Copyright notice and license reference for Facebook's regenerator-runtime package under MIT license\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/index.js.LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n```\n\n----------------------------------------\n\nTITLE: React DOM Production License Header\nDESCRIPTION: License and copyright notice for the minified production version of react-dom package\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/index.js.LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: React Core Production License Header\nDESCRIPTION: License and copyright notice for the minified production version of core React package\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/index.js.LICENSE.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n----------------------------------------\n\nTITLE: React Scheduler Production License Header\nDESCRIPTION: License and copyright notice for the minified production version of React's scheduler package\nSOURCE: https://github.com/w-okada/voice-changer/blob/master/client/demo/dist/index.js.LICENSE.txt#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```"
  }
]