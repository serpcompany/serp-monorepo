[
  {
    "owner": "ibm",
    "repo": "qradar-sample-apps",
    "content": "TITLE: Creating QRadar Application with SDK\nDESCRIPTION: Commands to create and run a QRadar application using the QRadar App SDK v2. This generates a Flask application that can be deployed to QRadar.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp create\n```\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App Commands\nDESCRIPTION: Bash commands for packaging and deploying the QRadar app to a QRadar console.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Using QJSLib Functions\nDESCRIPTION: Example of calling a QJSLib function to retrieve the current user information.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibNPM/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQRadar.getCurrentUser()\n```\n\n----------------------------------------\n\nTITLE: Using QJSLib API\nDESCRIPTION: Example of calling a QJSLib function to get the current user\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibBrowser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQRadar.getCurrentUser()\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App to Console\nDESCRIPTION: Deploys the packaged QRadar app to a specified QRadar console using the qapp CLI tool with authentication credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/RESTMethod/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing SQLite Database in Python\nDESCRIPTION: This code checks if the SQLite database exists, and if not, creates it and executes the schema SQL script. It ensures the database is properly set up with the required schema on app startup.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    # create db if it doesnt exist and load schema\n    if not db_exists(db_name):\n        schema_file_path = qpylib.get_root_path(\"container/conf/db/schema.sql\")\n        create_db(db_name)\n        execute_schema_sql(db_name, schema_file_path)\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Area Component\nDESCRIPTION: JSON configuration for defining a tab in the main QRadar UI called 'MultiComponent App' that displays a simple HTML page.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"areas\": [\n    {\n        \"id\": \"QMultiComponentApp\",\n        \"text\": \"MultiComponent App\",\n        \"description\": \"An example of creating many GUI components from one app.\",\n        \"url\": \"index\",\n        \"required_capabilities\": []\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar Sample App\nDESCRIPTION: Deploys the packaged app to a QRadar console. Requires specifying the QRadar console IP address and a user with appropriate permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Ariel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Item in QRadar App Manifest (JSON)\nDESCRIPTION: Configures a dashboard item in the app manifest, specifying its text, description, associated REST method, and required capabilities for access.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/DashboardWithImage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dashboard_items\": [\n    {\n        \"text\": \"Example Item\",\n        \"description\": \"Another Example dashboard item that is going to show some html with an image\",\n        \"rest_method\": \"getExampleDashboardItem\",\n        \"required_capabilities\": [\n            \"ADMIN\"\n        ]\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON Content in QRadar Custom Columns (JavaScript)\nDESCRIPTION: JavaScript function signature for the renderJsonContent function used to render data in custom columns. This function processes JSON data and updates the HTML output element in the custom column.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffenses/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrenderJsonContent(<JSON element ID>, <Custom column output element ID>)\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App (Bash)\nDESCRIPTION: This bash command deploys the packaged QRadar app to a QRadar console. It uses the 'qapp deploy' command, specifying the package file, QRadar console IP, and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffensesGlobalized/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Carbon Button Component in React\nDESCRIPTION: This snippet shows how to import the Carbon Button component and integrate it into a React component. It includes the necessary import statement and adds the Button to the existing JSX structure.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from  '@carbon/ibm-security';\nimport  logo  from  './logo.svg';\nimport  './App.scss';\n\nfunction  App() {\n\treturn (\n\t\t<div  className=\"App\">\n\t\t\t<header  className=\"App-header\">\n\t\t\t\t<img  src={logo}  className=\"App-logo\"  alt=\"logo\"  />\n\t\t\t\t<p>\n\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\n\t\t\t\t</p>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tLearn React\n\t\t\t\t</a>\n\t\t\t\t<Button>Click me</Button>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication in QRadar Manifest (JSON)\nDESCRIPTION: JSON configuration for setting up OAuth2 authentication in the app manifest. This uses the CLIENT_CREDENTIALS flow and requests ADMIN capabilities to ensure the uninstall hook has sufficient permissions to delete reference data.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/UninstallHooks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"authentication\": {\n  \"oauth2\": {\n    \"authorisation_flow\": \"CLIENT_CREDENTIALS\",\n    \"requested_capabilities\": [\n      \"ADMIN\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App to Console\nDESCRIPTION: Bash command for deploying the packaged QRadar app to a QRadar console. Requires specifying the QRadar console IP address and a user with deployment permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsAssets/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Defining Named Service for Alternative HTTP Server in QRadar App Manifest (JSON)\nDESCRIPTION: This JSON configuration in the app manifest defines a named service to replace Flask. It specifies the command to start the Python HTTP server, the directory to run in, port number, and other settings.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AlternativeHTTPServer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"services\": [\n    {\n        \"command\": \"python3 -m http.server 5000\",\n        \"directory\": \"/opt/app-root/app/\",\n        \"endpoints\": [],\n        \"name\": \"pythonhttpserver\",\n        \"path\": \"/\",\n        \"port\": 5000,\n        \"version\": \"1\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Parsing QRadar API Version Response\nDESCRIPTION: Sample JSON response from the `/api/help/versions` endpoint showing available API versions with their deprecated and removed status flags.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/APIVersion/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  ...\n  {\n    \"version\": \"15.1\",\n    \"deprecated\": false,\n    \"removed\": false,\n    \"root_resource_ids\": [...],\n    \"id\": 28,\n  },\n  {\n    \"version\": \"16.0\",\n    \"deprecated\": false,\n    \"removed\": false,\n    \"root_resource_ids\": [...],\n    \"id\": 29,\n  },\n  {\n    \"version\": \"17.0\",\n    \"deprecated\": false,\n    \"removed\": false,\n    \"root_resource_ids\": [...],\n    \"id\": 30,\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Packaged QRadar App (Bash)\nDESCRIPTION: This Bash command deploys the packaged QRadar app to a specified QRadar console. It requires the package file, QRadar console IP, and a user with appropriate permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AlternativeHTTPServer/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in QRadar App Manifest\nDESCRIPTION: JSON configuration for the app manifest that defines three environment variables (ONE, TWO, THREE) with their respective values. These variables will be injected into the app environment when deployed.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/EnvironmentVariables/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"environment_variables\": [\n    {\n        \"name\": \"ONE\",\n        \"value\": \"1\"\n    },\n    {\n        \"name\": \"TWO\",\n        \"value\": \"2\"\n    },\n    {\n        \"name\": \"THREE\",\n        \"value\": \"3\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Encryption in QRadar Python App\nDESCRIPTION: Sets up an Encryption instance for handling a specific secret for a user. Creates a dedicated encryption handler for the secret 'mytoken' associated with user 'myuser'.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Encryption/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nenc = Encryption({'name': 'mytoken', 'user': 'myuser'})\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Configuration for QRadar\nDESCRIPTION: JavaScript code snippets showing updates to the Webpack configuration to ensure proper file paths and naming for QRadar deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfilename: isEnvProduction\n\t? 'js/[name].[contenthash:8].js'\n\t: isEnvDevelopment && 'js/bundle.js',\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew HtmlWebpackPlugin(\n\tObject.assign(\n\t\t{},\n\t\t{\n\t\t\tinject: true,\n\t\t\ttemplate: paths.appHtml,\n\t\t\tfilename: \"../../templates/index.html\",\n\t\t},\n\t\t/* some additional code that doesn't need updated */\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying a QRadar App to a Console\nDESCRIPTION: Bash command to deploy a packaged QRadar app to a QRadar console, requiring the console IP address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/OAuth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Settings in JSON\nDESCRIPTION: This JSON configuration file sets debug mode to false and specifies the database name for the SQLite database. It's used to configure Flask and provide runtime settings for the app.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DEBUG\": false,\n  \"DB_NAME\": \"mystore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar Sample App\nDESCRIPTION: Command to deploy the packaged QRadar application to a QRadar console. Requires specifying the packaged zip file, QRadar console IP address, and a user with deployment permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/EnvironmentVariables/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Column in QRadar App Manifest\nDESCRIPTION: JSON configuration in the app manifest that defines a custom column named 'Asset Type' for the assets page. It specifies the column label, the REST endpoint to query for data, and the page ID where the column should appear.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsAssets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"custom_columns\": [\n    {\n        \"label\": \"Asset Type\",\n        \"rest_endpoint\": \"get_custom_column\",\n        \"page_id\": \"AssetList\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Columns in QRadar App Manifest (JSON)\nDESCRIPTION: JSON configuration for defining a custom column in the QRadar app manifest. This specifies the column label, REST endpoint for data retrieval, and the target page ID where the column should appear.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffenses/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"custom_columns\": [\n    {\n        \"label\": \"custom col custom javascript\",\n        \"rest_endpoint\": \"custom_column_method\",\n        \"page_id\": \"OffenseList\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Column Label in QRadar Manifest (JSON)\nDESCRIPTION: This snippet shows how to specify a globalized label for a custom column in the QRadar app manifest. It uses a key that will be looked up in the appropriate language's resource bundle.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffensesGlobalized/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"label\": \"customcolumn.label\",\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged app to a QRadar console, requiring the console IP address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibNPM/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Custom Column Data\nDESCRIPTION: Example JSON structure that must be returned by the custom column endpoint. The HTML content to be displayed in the custom column must be wrapped in a JSON object with an 'html' property.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsAssets/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"html\": \"<div>HTML to inject into the custom column</div>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar app to a QRadar console with specified credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Encryption/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Updating Flask Views to Serve React App\nDESCRIPTION: Python code to update the Flask views.py file to serve the React application's index.html file as the main route.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Blueprint, render_template\n\n# pylint: disable=invalid-name\nviewsbp = Blueprint('viewsbp', __name__, url_prefix='/')\n\n@viewsbp.route('/')\n@viewsbp.route('/index')\ndef index():\n\treturn render_template('index.html')\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar application to a QRadar console, requiring the console IP address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/ConfigPageLocations/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Dashboard Item\nDESCRIPTION: JSON configuration for creating a dashboard item that users can add to their QRadar dashboards. Includes both the dashboard item definition and the associated REST method configuration.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dashboard_items\": [\n    {\n        \"text\": \"MultiComponentApp Item\",\n        \"description\": \"Another Sample dashboard item that is going to show some HTML\",\n        \"rest_method\": \"sampleDashboardItem\",\n        \"required_capabilities\": []\n    }\n],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"rest_methods\": [\n    {\n        \"name\": \"sampleDashboardItem\",\n        \"url\": \"/sampleDashboardItem\",\n        \"method\": \"GET\",\n        \"argument_names\": [],\n        \"required_capabilities\": []\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Downloading Python Dependencies with pip for QRadar App\nDESCRIPTION: This command downloads the required pip dependencies for the app, including Flask_Session, cachelib, Flask-WTF, and WTForms. It ensures compatibility with the manylinux1_x86_64 platform and stores the packages in the container/pip directory.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomProxy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip download                     \\\n    --only-binary=:all:          \\\n    --platform manylinux1_x86_64 \\\n    --dest container/pip         \\\n    --no-deps                    \\\n    Flask_Session==0.4.0 cachelib==0.6.0 Flask-WTF==0.14.3 WTForms==2.3.3\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar app to a specific QRadar console.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/APIVersion/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Metadata Provider in QRadar App Manifest\nDESCRIPTION: JSON configuration for the metadata provider that enables IP address hover functionality. Specifies the REST method and metadata type for IP addresses.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/IPHoverOverMetaData/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"metadata_providers\": [\n    {\n        \"rest_method\": \"getIPMetadata\",\n        \"metadata_type\": \"ip\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App for Deployment\nDESCRIPTION: This bash script builds the React app and creates a zip package containing only the essential files for deploying the QRadar app. It ensures a slim package for better performance and deployment times.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd react-ui && yarn build\ncd ..\nzip app.zip -r app container manifest.json\n```\n\n----------------------------------------\n\nTITLE: Downloading QJSLib for QRadar QuickScan App\nDESCRIPTION: Downloads QJSLib version 1.1.1 from GitHub releases and extracts the JavaScript library to the app's static directory. This step is required before building the app.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QuickScan/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LJ https://github.com/IBM/qjslib/releases/download/1.1.1/qjslib-1.1.1.tgz \\\n    | tar -xvzO package/lib/qappfw.min.js > ./app/static/qjslib/qappfw.min.js\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar Sample App\nDESCRIPTION: Command to deploy the packaged ReadOnlyLogSources app to a QRadar console. Requires specifying the QRadar console IP address and a user with appropriate permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/ReadOnlyLogSources/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Globalization\nDESCRIPTION: Docker command to download required Python dependencies for globalization support including pytz, Babel, Flask-Babel, and speaklater.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorldGlobalized/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run                                    \\\n    -v $(pwd)/container/pip:/pip              \\\n    registry.access.redhat.com/ubi8/python-36 \\\n    pip download --no-deps --dest /pip pytz==2022.1 Babel==2.10.1 Flask-Babel==1.0.0 speaklater==1.3\n```\n\n----------------------------------------\n\nTITLE: Packaging and Deploying QRadar App (Bash)\nDESCRIPTION: Bash commands for packaging a QRadar app into a zip file and deploying it to a QRadar console. These commands use the QRadar App Framework CLI tools.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffenses/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory in QRadar App Manifest (JSON)\nDESCRIPTION: This snippet shows how to specify the memory requirement for a QRadar app in the manifest file. It sets the memory allocation to 300MB.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Memory/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"resources\": {\n    \"memory\": 300\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Uninstall Hooks in QRadar Manifest (JSON)\nDESCRIPTION: JSON configuration for defining uninstall hooks in the app manifest. This specifies which REST method to call on uninstall and configures the hook to only run when the last instance is uninstalled in multi-tenanted environments.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/UninstallHooks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"uninstall_hooks\": [\n  {\n    \"description\": \"Delete app reference data\",\n    \"rest_method\": \"uninstall_delete_reference_data\",\n    \"last_instance_only\": \"true\"\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Building the Sample App\nDESCRIPTION: Command to install dependencies and build the application, which will transpile and bundle the code from the src directory.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibNPM/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar application into a deployable zip file\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AppWithoutUserRole/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Command to create a production build of the React application, which will be served by the Flask backend in QRadar.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar app into a zip file for deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/APIVersion/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Toolbar Button\nDESCRIPTION: JSON configuration for adding a toolbar button that executes JavaScript and calls a REST method when clicked.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"gui_actions\": [\n    {\n        \"id\": \"sampleToolbarButton\",\n        \"text\": \"Sample Toolbar Button\",\n        \"description\": \"Sample toolbar button that calls a REST method, passing an offense ID along\",\n        \"icon\": null,\n        \"rest_method\": \"sampleToolbarMethod\",\n        \"javascript\": \"alert('hello new button!')\",\n        \"groups\": [\n            \"OffenseListToolbar\"\n        ],\n        \"required_capabilities\": []\n    }\n],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"rest_methods\": [\n    {\n        \"name\": \"sampleToolbarMethod\",\n        \"url\": \"/sampleToolbarButton\",\n        \"method\": \"GET\",\n        \"argument_names\": [\n            \"context\"\n        ],\n        \"required_capabilities\": []\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Compiling Locale Files for QRadar App\nDESCRIPTION: Command to compile translation files from .po format to .mo binary files using pybabel.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorldGlobalized/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npybabel compile -d app/translations\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App (Bash)\nDESCRIPTION: This command shows how to package the QRadar app into a zip file for deployment using the 'qapp' command-line tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Memory/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Fixed Versions\nDESCRIPTION: Defines exact versions of Python packages required for the project, including pytz for timezone handling, Babel for internationalization, speaklater for lazy string evaluation, and Flask-Babel for Flask framework internationalization support.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorldGlobalized/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytz==2022.1\nBabel==2.10.1\nspeaklater==1.3\nFlask-Babel==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App for Deployment\nDESCRIPTION: This command packages the QRadar app into a zip file named app.zip, preparing it for deployment to a QRadar console.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomProxy/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Resource Bundle Configuration in QRadar Manifest\nDESCRIPTION: JSON configuration that defines the resource bundles for different locales, mapping locale codes to their respective property files for translations.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorldGlobalized/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resource_bundles\": [\n    {\n        \"locale\": \"en_US\",\n        \"bundle\": \"resources/hello_en_US.properties\"\n    },\n    {\n        \"locale\": \"es\",\n        \"bundle\": \"resources/hello_es.properties\"\n    },\n    {\n        \"locale\": \"fr\",\n        \"bundle\": \"resources/hello_fr.properties\"\n    },\n    {\n        \"locale\": \"en\",\n        \"bundle\": \"resources/hello_en.properties\"\n    },\n    {\n        \"locale\": \"ja\",\n        \"bundle\": \"resources/hello_ja.properties\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Method in QRadar App Manifest (JSON)\nDESCRIPTION: Defines a REST method in the app manifest to expose an endpoint for the dashboard item. It specifies the method name, URL, HTTP method, and required capabilities.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/DashboardWithImage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"rest_methods\": [\n    {\n        \"name\": \"getExampleDashboardItem\",\n        \"url\": \"/getExampleDashboardItem\",\n        \"method\": \"GET\",\n        \"argument_names\": [],\n        \"required_capabilities\": [\n            \"ADMIN\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting a QRadar App as an Extension (Bash)\nDESCRIPTION: Bash command using the QRadar content management tool to export an installed app as an extension. This process generates an extension zip file that can be installed through the Extensions Management UI.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/UninstallHooks/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/opt/qradar/bin/contentManagement.pl -a export -c installed_application -i <app id from the install>\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar app into a zip file\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibBrowser/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Creating RPM Installation Order File\nDESCRIPTION: This command generates an ordering.txt file in the container/rpm directory, listing the RPMs to be installed, excluding the ordering.txt file itself.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls container/rpm/ | grep -v \"ordering.txt\" > container/rpm/ordering.txt\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar Sample App\nDESCRIPTION: Command to package the ReadOnlyLogSources app into a zip file for deployment. This creates an app.zip file in the current directory.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/ReadOnlyLogSources/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Right-Click Action\nDESCRIPTION: JSON configuration for adding a custom right-click action for IP addresses that searches Google for the selected IP.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"gui_actions\": [\n    {\n        \"id\": \"sampleRightClick\",\n        \"text\": \"Sample Right Click\",\n        \"description\": \"Sample IP right click action that searches Google.\",\n        \"icon\": null,\n        \"javascript\": \"window.open('http://www.google.com?q='+context.innerText)\",\n        \"groups\": [\n            \"ipPopup\"\n        ],\n        \"required_capabilities\": []\n    },\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon SCSS in React\nDESCRIPTION: This SCSS import statement brings in the Carbon Design System styles. It should be added to the top of the index.scss file to apply Carbon styling to the components.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n@import  '@carbon/ibm-security/css/index.min.css';\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary OpenSSL RPM\nDESCRIPTION: This command removes the downloaded OpenSSL RPM, which is not needed for the NGINX setup in this sample app.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm container/rpm/openssl*-1.*.rpm\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App for Deployment\nDESCRIPTION: Creates a zip package of the QRadar sample app for deployment using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/RESTMethod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally with QRadar App SDK\nDESCRIPTION: This command runs the QRadar app locally using the QRadar App SDK. It utilizes the environment variables specified in the qenv.ini file to set up the local app container.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomProxy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App (Bash)\nDESCRIPTION: Command to package the QRadar app into a zip file using the 'qapp' CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/DashboardWithImage/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Page Script\nDESCRIPTION: JSON configuration for loading custom JavaScript into specific QRadar pages.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"page_scripts\": [\n    {\n        \"app_name\": \"SEM\",\n        \"page_id\": \"OffenseList\",\n        \"scripts\": [\n            \"static/js/sampleScriptInclude.js\"\n        ]\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: This bash command downloads the required Python dependencies (flask-wtf and WTForms) using pip. It specifies platform requirements and stores the packages in the container/pip directory.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip download                     \\\n    --only-binary=:all:          \\\n    --platform manylinux1_x86_64 \\\n    --dest container/pip         \\\n    --no-deps                    \\\n    Flask-WTF==0.14.3 WTForms==2.3.3\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar Multitenancy App\nDESCRIPTION: Command to package the multitenancy application into a ZIP file using the QRadar SDK.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Multitenancy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p multitenancy.zip\n```\n\n----------------------------------------\n\nTITLE: Running QRadar HelloWorld App Locally\nDESCRIPTION: This command runs the HelloWorld app locally using the 'qapp' tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally (Bash)\nDESCRIPTION: This Bash command runs the QRadar app locally using the 'qapp' CLI tool. It's useful for testing and development purposes.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AlternativeHTTPServer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Listing QRadar Security Profiles\nDESCRIPTION: API request to retrieve the list of security profiles from QRadar, necessary for tenant configuration.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Multitenancy/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET                            \\\n    -u <qradar user>:<qradar password> \\\n    https://<qradar console>/api/config/access/security_profiles\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/react-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally\nDESCRIPTION: Command to run the QRadar application in local development environment\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AppWithoutUserRole/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally\nDESCRIPTION: Command to run the QRadar app locally using QRadar App SDK v2.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/APIVersion/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally (Bash)\nDESCRIPTION: This command demonstrates how to run the QRadar app locally using the 'qapp' command-line tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Memory/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally\nDESCRIPTION: Command to run the QRadar application locally for testing purposes using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/ConfigPageLocations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Copying Sudoers Configuration File in QRadar App Container (Bash)\nDESCRIPTION: This script copies a sudoers configuration file from /opt/app-root/container/sudoers to /etc/sudoers.d/qradar. It sets the correct permissions on the copied file to ensure proper security. The script is likely part of the QRadar app container setup process.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AsRoot/container/run/ordering.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\nif [ -f /opt/app-root/container/sudoers ]; then\n    cp /opt/app-root/container/sudoers /etc/sudoers.d/qradar\n    chmod 0440 /etc/sudoers.d/qradar\nfi\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Runs the React application in development mode on localhost:3000 with hot reloading enabled.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/react-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running the QRadar App Locally\nDESCRIPTION: This command runs the QRadar app locally using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Metadata Providers\nDESCRIPTION: JSON configuration for adding hover-over metadata providers for usernames, IP addresses, and URL fields.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"metadata_providers\": [\n    {\n        \"rest_method\": \"sampleIPInformation\",\n        \"metadata_type\": \"ip\"\n    },\n    {\n        \"rest_method\": \"sampleUserInformation\",\n        \"metadata_type\": \"userName\"\n    },\n    {\n        \"rest_method\": \"sampleURLInformation\",\n        \"metadata_type\": \"ariel:URL\"\n    }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"rest_methods\": [\n    {\n        \"name\": \"sampleIPInformation\",\n        \"url\": \"/sampleIpInformation\",\n        \"method\": \"GET\",\n        \"argument_names\": [\n            \"metaDataContext\"\n        ],\n        \"required_capabilities\": []\n    },\n    {\n        \"name\": \"sampleUserInformation\",\n        \"url\": \"/sampleUserInformation\",\n        \"method\": \"GET\",\n        \"argument_names\": [\n            \"metaDataContext\"\n        ],\n        \"required_capabilities\": []\n    },\n    {\n        \"name\": \"sampleURLInformation\",\n        \"url\": \"/sampleURLInformation\",\n        \"method\": \"GET\",\n        \"argument_names\": [\n            \"metaDataContext\"\n        ],\n        \"required_capabilities\": []\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Setting React App Homepage in package.json\nDESCRIPTION: JSON snippet to set the homepage field in package.json, ensuring the React app is built with the correct base path for QRadar deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"homepage\": \"./static/react\",\n```\n\n----------------------------------------\n\nTITLE: Running and Deploying QRadar App Commands\nDESCRIPTION: Commands for running the app locally, packaging it into a zip file, and deploying it to a QRadar console.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorldGlobalized/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring QRadar Configuration Page\nDESCRIPTION: JSON configuration for adding a configuration page accessible from the Admin page, requiring admin capabilities.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MultiComponents/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"configuration_pages\": [\n    {\n        \"text\": \"Open IBM.com\",\n        \"description\": \"Loading IBM.com in a new window\",\n        \"icon\": null,\n        \"url\": \"admin_screen\",\n        \"required_capabilities\": [\n            \"ADMIN\"\n        ]\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth in manifest.json for QRadar App\nDESCRIPTION: JSON configuration for the manifest.json file that defines OAuth authentication for a QRadar app. It specifies the CLIENT_CREDENTIALS authorization flow and requests the SEM capability.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/OAuth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"authentication\": {\n    \"oauth2\": {\n        \"authorisation_flow\": \"CLIENT_CREDENTIALS\",\n        \"requested_capabilities\": [\n            \"SEM\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeJS Service in QRadar App Manifest\nDESCRIPTION: JSON configuration for defining a named NodeJS service in the QRadar app manifest. Specifies the command to run, working directory, endpoints, port, and log file locations for the NodeJS Express server.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NodeJS/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"services\": [\n    {\n        \"command\": \"node /opt/app-root/app/server.js\",\n        \"directory\": \"/opt/app-root/app\",\n        \"endpoints\": [\n            {\n            \"name\": \"appindexpage\",\n            \"path\": \"/index\",\n            \"http_method\": \"GET\"\n            }\n        ],\n        \"name\": \"nodeservice\",\n        \"path\": \"/index\",\n        \"port\": 5000,\n        \"version\": \"1\",\n        \"stdout_logfile\": \"/opt/app-root/store/log/node_out.log\",\n        \"stderr_logfile\": \"/opt/app-root/store/log/node_err.log\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying the QRadar App\nDESCRIPTION: This command deploys the packaged QRadar app (app.zip) to a specified QRadar console using the qapp CLI tool. It requires the QRadar console IP and a valid user for authentication.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Updating React Import Statements for SCSS\nDESCRIPTION: JavaScript code snippets showing how to update import statements in React components to use SCSS files instead of CSS.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* in App.js */\nimport './App.scss'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/* in index.js */\nimport './index.scss'\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar application into a deployable zip file using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AsRoot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Disabling in QRadar App Manifest (JSON)\nDESCRIPTION: This JSON snippet from the app manifest disables Flask from starting in the QRadar app. It's a crucial configuration for using an alternative HTTP server.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AlternativeHTTPServer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"load_flask\": \"false\",\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar Sample App\nDESCRIPTION: Packages the QRadar sample app into a zip file for deployment. This command must be executed in the app's directory.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Ariel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Methods for Uninstall Hook in QRadar Manifest (JSON)\nDESCRIPTION: JSON configuration for defining a REST method in the app manifest that will be called during the uninstall process. The endpoint must return a success HTTP code (200-299) and valid JSON response.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/UninstallHooks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"rest_methods\": [\n  {\n    \"name\": \"uninstall_delete_reference_data\",\n    \"url\": \"/uninstall_delete_reference_data\",\n    \"method\": \"POST\"\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar application to a QRadar console, requiring the console IP address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AsRoot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values with QPyLib\nDESCRIPTION: Shows how to decrypt previously encrypted values using the Encryption instance. Returns the decrypted value referenced by the name property.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Encryption/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndecrypted = enc.decrypt()\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar application into a deployable zip file using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/ConfigPageLocations/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Bundles in QRadar Manifest (JSON)\nDESCRIPTION: This JSON snippet shows how to configure resource bundles for different locales in the QRadar app manifest. It specifies the locale and the corresponding resource bundle file path for multiple languages.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffensesGlobalized/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"resource_bundles\": [\n    {\n        \"locale\": \"en_US\",\n        \"bundle\": \"resources/en_US.properties\"\n    },\n    {\n        \"locale\": \"es\",\n        \"bundle\": \"resources/es.properties\"\n    },\n    {\n        \"locale\": \"fr\",\n        \"bundle\": \"resources/fr.properties\"\n    },\n    {\n        \"locale\": \"en\",\n        \"bundle\": \"resources/en.properties\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Packaging the QRadar App\nDESCRIPTION: This command packages the QRadar app into a zip file named app.zip using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Disabling Flask in QRadar App Manifest\nDESCRIPTION: JSON configuration snippet from the app manifest that disables the default Flask webserver. This is necessary when using NodeJS instead of Flask for the app's web service.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NodeJS/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"load_flask\": \"false\",\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar HelloWorld App\nDESCRIPTION: This command deploys the packaged HelloWorld app to a QRadar console. It requires the QRadar console IP and a user with appropriate permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Local App Execution\nDESCRIPTION: This INI file configuration sets the QRADAR_APP_UUID environment variable, which is required by the encdec Encryption module when running the app locally using the QRadar App SDK.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[app]\nQRADAR_APP_UUID=e3260a5b-8c47-4c07-8a5a-8fcc535f60dd\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar app into a zip file for deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibNPM/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Protection in Flask App\nDESCRIPTION: This Python code initializes CSRF protection for the Flask app using the flask-wtf library. It ensures that appropriate endpoints are protected against CSRF attacks.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    # Create a Flask instance.\n    qflask = Flask(__name__)\n\n    csrf = CSRFProtect()\n    csrf.init_app(qflask)\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar QuickScan App\nDESCRIPTION: Creates a deployable zip package of the QuickScan app for QRadar using the qapp command-line tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QuickScan/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Initializing Secret Key for CSRF Protection in Python\nDESCRIPTION: This code snippet demonstrates how to securely store and retrieve a secret key for CSRF protection using QPyLib's encryption module. It generates a new random secret key if one doesn't exist, or uses the existing one if available.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    secret_key = \"\"\n    try:\n        # Read in secret key\n        secret_key_store = Encryption({'name': 'secret_key', 'user': 'shared'})\n        secret_key = secret_key_store.decrypt()\n    except EncryptionError:\n        # If secret key file doesn't exist/fail to decrypt it,\n        # generate a new random password for it and encrypt it\n        secret_key = secrets.token_urlsafe(64)\n        secret_key_store = Encryption({'name': 'secret_key', 'user': 'shared'})\n        secret_key_store.encrypt(secret_key)\n\n    qflask.config[\"SECRET_KEY\"] = secret_key\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App for Deployment (Bash)\nDESCRIPTION: This Bash command packages the QRadar app into a zip file for deployment. It uses the 'qapp' CLI tool to create the package.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AlternativeHTTPServer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring React Build Path\nDESCRIPTION: JavaScript code snippet to update the build path in the React configuration to ensure the production build is placed in the correct directory for QRadar deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst buildPath = '../app/static/react';\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App (Bash)\nDESCRIPTION: This bash command packages the QRadar app into a zip file named 'app.zip'. It uses the 'qapp package' command to create the package.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffensesGlobalized/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration in Python Flask App\nDESCRIPTION: This Python code loads the JSON configuration file and updates the Flask app's configuration. It allows for easy access to configuration settings throughout the app.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    # Initialize database settings and flask configuration options via json file\n    with open(qpylib.get_root_path(\n            \"container/conf/config.json\")) as config_json_file:\n        config_json = json.load(config_json_file)\n\n    qflask.config.update(config_json)\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App for Deployment\nDESCRIPTION: Bash command for packaging the QRadar app into a deployable ZIP file using the qapp command-line tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsAssets/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Building React App and Running QRadar App\nDESCRIPTION: This bash script builds the React app, cleans the QRadar app, and runs it. It demonstrates the process of creating a fresh production build of the React app for the Flask app to serve.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd react-ui && yarn build\ncd ..\nqapp clean -i\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Packaging the QRadar app for deployment\nDESCRIPTION: Script command to package the QRadar app into a deployable zip file after configuring the necessary environment variables.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n. store/scripts/package.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing QJSLib in JavaScript\nDESCRIPTION: JavaScript code to initialize the QRadar object from the QJSLib library\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibBrowser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst QRadar = window.qappfw.QRadar;\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar application to a QRadar console, requiring the console IP address and user credentials\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AppWithoutUserRole/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Components and Dependencies\nDESCRIPTION: Commands to install Carbon components, IBM Security extension, and Sass for styling the React application.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add carbon-components-react @carbon/ibm-security @carbon/colors\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sass\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar app to a QRadar console\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibBrowser/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Name in QRadar Manifest\nDESCRIPTION: Example of using a globalized key in the manifest.json file to define the application name that will be looked up from resource bundles.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorldGlobalized/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"hellog11n.app.name\",\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar HelloWorld App\nDESCRIPTION: This command packages the HelloWorld app into a zip file for deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/HelloWorld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Importing QJSLib in JavaScript\nDESCRIPTION: Code to import the QRadar object from the QJSLib library in a JavaScript file.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibNPM/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QRadar } from \"qjslib\";\n```\n\n----------------------------------------\n\nTITLE: QRadar App Deployment Command\nDESCRIPTION: Bash command to deploy the packaged app to a QRadar console, requiring the console IP and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/IPHoverOverMetaData/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Defining Spanish Translation for Custom Column Label (Properties)\nDESCRIPTION: This snippet demonstrates how to define the Spanish translation for the custom column label in a resource bundle file. It sets the 'customcolumn.label' key to 'Gravedad'.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffensesGlobalized/README.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncustomcolumn.label=Gravedad\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App (Bash)\nDESCRIPTION: This command illustrates how to deploy the packaged QRadar app to a QRadar console using the 'qapp' command-line tool. It requires specifying the QRadar console IP and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Memory/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Downloading QJSLib for QRadar Sample App\nDESCRIPTION: Downloads QJSLib v1.1.1 from GitHub releases and extracts the qappfw.min.js file to the app's static directory. This is a prerequisite before packaging and deploying the application.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Ariel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LJ https://github.com/IBM/qjslib/releases/download/1.1.1/qjslib-1.1.1.tgz \\\n    | tar -xvzO package/lib/qappfw.min.js > ./app/static/qjslib/qappfw.min.js\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally\nDESCRIPTION: Command to run the QRadar app locally using the QRadar App SDK.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Certificates/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Installing React dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for the React app from within the react-ui directory using yarn package manager.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Bypass with Query Parameters in QRadar App\nDESCRIPTION: Example of how the app bypasses browser caching by appending a timestamp as a query parameter to JavaScript file requests. This ensures fresh content is loaded after app upgrades.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CacheControl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncachecontrol.js?nocache=1597076610305\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar Multitenancy App\nDESCRIPTION: Command to deploy the packaged multitenancy application to a QRadar console.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Multitenancy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p multitenancy.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Creating React Application\nDESCRIPTION: Command to generate a new React application using Create React App. This will serve as the front-end of the QRadar application.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app react-ui\n```\n\n----------------------------------------\n\nTITLE: Running the QRadar app locally\nDESCRIPTION: Script command to clean and run the QRadar app locally after configuring the necessary environment variables in qenv.ini.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n. store/scripts/clean-and-run.sh\n```\n\n----------------------------------------\n\nTITLE: Including QJSLib in HTML\nDESCRIPTION: HTML script tag to import the QJSLib library into the web page\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibBrowser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./static/qjslib/qappfw.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Downloading Required NodeJS RPM Dependencies with Docker\nDESCRIPTION: Command to download NodeJS and NPM RPMs using a Docker container with RedHat UBI 8 image. The RPMs are stored in the container/rpm directory for installation during app build time.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NodeJS/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run                                                    \\\n    -v $(pwd)/container/rpm:/rpm                              \\\n    registry.access.redhat.com/ubi8/ubi                       \\\n    yum download nodejs npm --downloaddir=/rpm\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Express\nDESCRIPTION: Command to install the required NPM packages defined in package.json using a clean install approach. This must be executed in the app/ directory before packaging the app.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NodeJS/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally\nDESCRIPTION: Command to run the QRadar application in local development environment using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/AsRoot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Running Updated QRadar App\nDESCRIPTION: Commands to clean up existing Docker containers and images, then run the updated QRadar application with the integrated React front-end.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nqapp clean -i\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Installing QJSLib as NPM Package\nDESCRIPTION: Command to install the QJSLib library as an NPM package dependency in the project.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibNPM/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install qjslib\n```\n\n----------------------------------------\n\nTITLE: Running QRadar Sample App in Container\nDESCRIPTION: A startup script that runs a QRadar sample application in a container environment. The script uses /bin/bash as its interpreter and is likely executed automatically when the container starts.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/PostgreSQL/container/run/ordering.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Startup script for QRadar sample apps in container\n\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: Command to download required Python pip dependencies (Flask-WTF and WTForms) for the certificate management app. The dependencies are downloaded to the container/pip directory with specific platform requirements.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Certificates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip download                     \\\n    --only-binary=:all:          \\\n    --platform manylinux1_x86_64 \\\n    --dest container/pip         \\\n    --no-deps                    \\\n    Flask-WTF==0.14.3 WTForms==2.3.3\n```\n\n----------------------------------------\n\nTITLE: Running a QRadar App Locally\nDESCRIPTION: Command to run the QRadar app locally for development and testing purposes using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CacheControl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Downloading NGINX RPMs using Docker\nDESCRIPTION: This command uses Docker to download the required NGINX RPMs into the container/rpm directory. It utilizes a Red Hat Universal Base Image (UBI) to ensure compatibility.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run                                                    \\\n    -v $(pwd)/container/rpm:/rpm                              \\\n    registry.access.redhat.com/ubi8/ubi                       \\\n    yum download --resolve nginx --downloaddir=/rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for QRadar App (qenv.ini)\nDESCRIPTION: This INI file configuration sets up environment variables required for running the QRadar app locally. It includes the QRADAR_APP_UUID used by the encdec Encryption module and the QRADAR_FLASK_SECRET_KEY for Flask.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomProxy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[app]\nQRADAR_APP_UUID=e7b57727-75e0-42f0-9e28-c4100a8e456c\nQRADAR_FLASK_SECRET_KEY=f3dcaacc-8548-411b-aa99-83c7a52f0392\n```\n\n----------------------------------------\n\nTITLE: Building QRadar Sample Apps with Shell Script\nDESCRIPTION: This shell script is responsible for building QRadar sample applications. It is located in the build directory and likely contains commands for compiling, packaging, and preparing the apps for deployment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/NGINX/container/build/ordering.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\n# Build script for QRadar sample apps\n# Add your build commands here\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for QRadar Sample App Development\nDESCRIPTION: Command to install the required Python dependencies for developing QRadar sample apps. Uses pip to install all dependencies listed in the requirements.txt file.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Command to start the React development server for local testing and development.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Method in QRadar App Manifest\nDESCRIPTION: JSON configuration defining the REST endpoint that provides IP metadata. Specifies the endpoint URL, HTTP method, and required arguments.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/IPHoverOverMetaData/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"rest_methods\": [\n    {\n        \"name\": \"getIPMetadata\",\n        \"url\": \"/ip_metadata_provider\",\n        \"method\": \"GET\",\n        \"argument_names\": [\n            \"context\"\n        ]\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: QRadar Container Certificate Import Path\nDESCRIPTION: File path reference to a shell script responsible for importing SSL certificates in a QRadar app container environment. Located in the app-root container directory structure.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Certificates/container/run/ordering.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/opt/app-root/container/run/import_certs.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Maintainers in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a bulleted list of maintainers for the QRadar sample apps project. Each entry includes the maintainer's name and a link to their GitHub profile.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/MAINTAINERS.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* Stephen Kelly ([smokeykappa](https://github.com/smokeykappa))\n* Michael Benson ([mbengit](https://github.com/mbengit))\n* Jamie Thompson ([jthomperoo](https://github.com/jthomperoo))\n* Jennifer Boyle ([jenboyleibm](https://github.com/jenboyleibm))\n```\n\n----------------------------------------\n\nTITLE: Provisioning QRadar App Instance\nDESCRIPTION: API request to create a new dedicated app instance for a tenant using their security profile ID.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Multitenancy/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST                           \\\n    -u <qradar user>:<qradar password> \\\n    https://<qradar console>/api/gui_app_framework/applications?application_definition_id=<app definition id>&security_profile_id=<security profile id>\n```\n\n----------------------------------------\n\nTITLE: Initializing QRadar Sample Apps Startup Script in Bash\nDESCRIPTION: This shell script is responsible for starting up QRadar sample applications. It is located in a specific directory within a containerized environment, suggesting it's part of an orchestrated deployment process.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/SQLite/container/run/ordering.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/opt/app-root/container/run/startup.sh\n```\n\n----------------------------------------\n\nTITLE: Packaging a QRadar App with QPyLib\nDESCRIPTION: Bash command to package a QRadar app into a deployable zip file using the QRadar App Framework SDK.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/OAuth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App (Bash)\nDESCRIPTION: Command to deploy the packaged QRadar app to a QRadar console using the 'qapp' CLI tool. Requires specifying the QRadar console IP and user.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/DashboardWithImage/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Scripts in QRadar App Manifest (JSON)\nDESCRIPTION: JSON configuration for loading custom JavaScript files on specific QRadar pages. This defines which script files should be loaded and on which pages they should be available.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomColumnsOffenses/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"page_scripts\": [\n    {\n        \"app_name\": \"SEM\",\n        \"page_id\": \"OffenseList\",\n        \"scripts\": [\n            \"static/js/custom_offense.js\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Downloading QJSLib for QRadar Sample App\nDESCRIPTION: Command to download QJSLib v1.1.1 from GitHub releases and extract the qappfw.min.js file to the app's static directory. This is a prerequisite for running the ReadOnlyLogSources app.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/ReadOnlyLogSources/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LJ https://github.com/IBM/qjslib/releases/download/1.1.1/qjslib-1.1.1.tgz \\\n    | tar -xvzO package/lib/qappfw.min.js > ./app/static/qjslib/qappfw.min.js\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally (Bash)\nDESCRIPTION: Command to run the QRadar app locally using the 'qapp' CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/DashboardWithImage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Downloading QJSLib with curl\nDESCRIPTION: Command to download QJSLib v1.1.1 from GitHub releases and extract it to the app's static directory\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QJSLibBrowser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LJ https://github.com/IBM/qjslib/releases/download/1.1.1/qjslib-1.1.1.tgz \\\n    | tar -xvzO package/lib/qappfw.min.js > ./app/static/qjslib/qappfw.min.js\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Lists required Python packages and their specific versions for development tools. Includes pylint for code linting and yapf for code formatting.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npylint==2.5.3\nyapf==0.30.0\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar app into a deployable zip file.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Certificates/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App to Console\nDESCRIPTION: This command deploys the packaged QRadar app to a QRadar console. It requires specifying the package file, QRadar console IP, and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/tutorial/tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Deploying a QRadar App (Bash)\nDESCRIPTION: Bash command for deploying a packaged QRadar app to a QRadar console. This requires specifying the QRadar console IP address and a user with sufficient permissions to deploy apps.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/UninstallHooks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Packaging a QRadar App (Bash)\nDESCRIPTION: Bash command for packaging a QRadar app into a deployable zip file using the qapp tool. This is the first step in deploying the sample app to a QRadar environment.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/UninstallHooks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robots.txt Access Rules\nDESCRIPTION: This snippet defines the default access rules for web crawlers. It allows all user agents (*) to access the entire website, as no paths are disallowed.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/react-ui/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar Proxy Sample App\nDESCRIPTION: Commands to package and deploy the proxy sample app to a QRadar Console using the QRadar App SDK. Requires specifying the target QRadar Console address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Proxy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p proxy.zip && qapp deploy -p proxy.zip -q <QRadar Console> -u <QRadar user>\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values with QPyLib\nDESCRIPTION: Demonstrates how to encrypt a value using the configured Encryption instance. The encrypted value is both returned and saved to the encryption file.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Encryption/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue = \"value to be encrypted\"\nencrypted = enc.encrypt(value)\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar QuickScan App\nDESCRIPTION: Deploys the packaged QuickScan app to a QRadar console using the qapp command-line tool, requiring the QRadar console IP address and a valid user for authentication.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/QuickScan/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App\nDESCRIPTION: Command to deploy the packaged QRadar app to a QRadar console, requiring the console IP address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Certificates/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Deploying a QRadar App to a Console\nDESCRIPTION: Command to deploy the packaged QRadar app to a QRadar console using the qapp CLI tool, specifying the console IP address and user credentials.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CacheControl/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Packaging a QRadar App for Deployment\nDESCRIPTION: Command to package the QRadar app into a zip file that can be deployed to a QRadar instance using the qapp CLI tool.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CacheControl/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Running React Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/react-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar App\nDESCRIPTION: Command to package the QRadar app into a deployable zip file.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Encryption/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: QRadar App Packaging Command\nDESCRIPTION: Bash command to package the QRadar app into a deployable zip file.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/IPHoverOverMetaData/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: Running QRadar App Locally\nDESCRIPTION: Command to run the QRadar app locally using the QRadar App SDK.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Encryption/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp run\n```\n\n----------------------------------------\n\nTITLE: Packaging QRadar Sample App\nDESCRIPTION: Command to package the QRadar sample application into a zip file for deployment. This is executed in the app's directory to create app.zip.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/EnvironmentVariables/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqapp package -p app.zip\n```\n\n----------------------------------------\n\nTITLE: QRadar Environment Configuration\nDESCRIPTION: Sample qenv.ini configuration file that sets up environment variables for local app development. Defines the QRADAR_APP_UUID used by the encryption module.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Certificates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[app]\nQRADAR_APP_UUID=e7b57727-75e0-42f0-9e28-c4100a8e456c\n```\n\n----------------------------------------\n\nTITLE: Retrieving QRadar Application Definitions\nDESCRIPTION: API request to get the list of installed application definitions, used to find the Multitenancy app ID.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/Multitenancy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET                            \\\n    -u <qradar user>:<qradar password> \\\n    https://<qradar console>/api/gui_app_framework/application_definitions\n```\n\n----------------------------------------\n\nTITLE: Deploying the QRadar app to a console\nDESCRIPTION: Command to deploy the packaged QRadar app to a QRadar console, requiring the console IP address and a QRadar user with deployment permissions.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Deploying QRadar App to QRadar Console\nDESCRIPTION: This command deploys the packaged QRadar app (app.zip) to a specified QRadar console. It requires the QRadar console IP address and a valid QRadar user for authentication.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CustomProxy/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nqapp deploy -p app.zip -q <qradar console ip> -u <qradar user>\n```\n\n----------------------------------------\n\nTITLE: Ejecting Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies into the project for full control. This is a one-way operation.\nSOURCE: https://github.com/ibm/qradar-sample-apps/blob/master/CarbonComponents/react-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```"
  }
]