[
  {
    "owner": "nomicfoundation",
    "repo": "hardhat",
    "content": "TITLE: Running Hardhat CLI Commands\nDESCRIPTION: Core Hardhat CLI commands for project management, including help documentation, test execution, local node deployment, and contract deployment using Hardhat Ignition.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/sample-projects/javascript-esm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat help\nnpx hardhat test\nREPORT_GAS=true npx hardhat test\nnpx hardhat node\nnpx hardhat ignition deploy ./ignition/modules/Lock.js\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Ignition Packages in Bash\nDESCRIPTION: Commands for installing Hardhat Ignition packages via npm, with options for both ethers and viem users.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ethers users\nnpm install --save-dev @nomicfoundation/hardhat-ignition-ethers\n\n# viem users\nnpm install --save-dev @nomicfoundation/hardhat-ignition-viem\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat via npm\nDESCRIPTION: This command installs Hardhat as a development dependency in an npm project. It should be run in an empty folder after initializing an npm project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Deploying ENS Contracts with Test Registrar on Local Hardhat Node\nDESCRIPTION: These commands start a local Hardhat node and then deploy the ENS contracts with a test registrar. The deployment uses the test-registrar.js module and targets the localhost network.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/ens/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat node\n# In another terminal\nnpx hardhat ignition deploy ./ignition/modules/test-registrar.js --network localhost\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hardhat project\nDESCRIPTION: This command starts the Hardhat initialization process. It should be run after installing Hardhat, and it will provide interactive instructions for setting up a new Hardhat project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Deploying ENS Contracts with Hardhat Ignition on Ephemeral Network\nDESCRIPTION: This command deploys the ENS system of contracts using Hardhat Ignition on the ephemeral Hardhat network. It uses the ENS.js module located in the ignition/modules directory.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/ens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/ENS.js\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hardhat Project\nDESCRIPTION: Command to initialize a new Hardhat project after installation. This interactive command will guide you through setting up your Hardhat configuration.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Running Common Hardhat CLI Commands in Shell\nDESCRIPTION: A set of common Hardhat CLI commands for project management, testing, development, and deployment. Includes commands for viewing help, running tests with optional gas reporting, starting a local node, and deploying contracts using Hardhat Ignition.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/sample-projects/typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat help\nnpx hardhat test\nREPORT_GAS=true npx hardhat test\nnpx hardhat node\nnpx hardhat ignition deploy ./ignition/modules/Lock.ts\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts with Hardhat Ignition\nDESCRIPTION: Command to deploy smart contracts using Hardhat Ignition to the ephemeral Hardhat network. Targets the LockModule deployment module.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/ts-sample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/LockModule\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat with npm\nDESCRIPTION: Command to install Hardhat as a development dependency in an npm project. This should be run after initializing a new npm project in an empty folder.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Commands for Development and Deployment in Shell\nDESCRIPTION: These commands demonstrate the basic Hardhat CLI operations including viewing help, running tests, starting a local node, and deploying contracts using Hardhat Ignition. The REPORT_GAS option enables gas usage reporting during test execution.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/sample-projects/typescript-viem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat help\nnpx hardhat test\nREPORT_GAS=true npx hardhat test\nnpx hardhat node\nnpx hardhat ignition deploy ./ignition/modules/Lock.ts\n```\n\n----------------------------------------\n\nTITLE: Deploying Hardhat Ignition Module to Ephemeral Network\nDESCRIPTION: This command deploys the CompleteModule.js Ignition module to the ephemeral Hardhat network using the Hardhat CLI.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/complete/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/CompleteModule.js\n```\n\n----------------------------------------\n\nTITLE: Running the Verify Task from Command Line\nDESCRIPTION: Command to verify a deployed contract using the Hardhat verify task, specifying the network, contract address, and constructor arguments.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat verify --network mainnet DEPLOYED_CONTRACT_ADDRESS \"Constructor argument 1\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Proxy Contract with Hardhat Ignition\nDESCRIPTION: Command to deploy an upgrade to an existing proxy contract on the Hardhat network using Ignition. Uses the UpgradeModule.js deployment module.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/upgradeable/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/UpgradeModule.js\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Client for Transactions\nDESCRIPTION: Example of using the Wallet Client to perform transactions between accounts\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst [fromWalletClient, toWalletClient] = await hre.viem.getWalletClients();\n\nconst hash = await fromWalletClient.sendTransaction({\n  to: toWalletClient.account.address,\n  value: parseEther(\"0.0001\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Hardhat Network Helpers to Mine Blocks in JavaScript\nDESCRIPTION: A Hardhat script example demonstrating how to use the Hardhat Network Helpers library to mine blocks and get the latest block number. It imports the helpers module, mines 100 blocks, and then logs the current block number.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-network-helpers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst helpers = require(\"@nomicfoundation/hardhat-network-helpers\");\n\nasync function main() {\n  // mine 100 blocks\n  await helpers.mine(100);\n\n  console.log(\"The current block number is\", await helpers.time.latestBlock());\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Proxy Contract with Hardhat Ignition\nDESCRIPTION: Command to deploy a proxy contract to the Hardhat network using Ignition. Uses the ProxyModule.js deployment module.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/upgradeable/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/ProxyModule.js\n```\n\n----------------------------------------\n\nTITLE: Running Common Hardhat CLI Commands\nDESCRIPTION: A set of essential Hardhat commands for working with the sample project. Includes commands for getting help, running tests (with optional gas reporting), starting a local node, and deploying the sample Lock contract using Hardhat Ignition.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/sample-projects/javascript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat help\nnpx hardhat test\nREPORT_GAS=true npx hardhat test\nnpx hardhat node\nnpx hardhat ignition deploy ./ignition/modules/Lock.js\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat-Ethers Plugin\nDESCRIPTION: Commands to install the hardhat-ethers plugin and its dependencies using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ethers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts\nDESCRIPTION: Examples of deploying smart contracts using different configurations and parameters\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst contract = await hre.viem.deployContract(\"contractName\", [\n  \"arg1\",\n  50,\n  \"arg3\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Hardhat Chai Matchers in Tests\nDESCRIPTION: Sample JavaScript code demonstrating common testing patterns with Hardhat Chai Matchers, including checking values, testing reverts, and verifying events.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-chai-matchers/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(await token.totalSupply()).to.equal(1_000_000);\n\nawait expect(token.transfer(token, 1000)).to.be.revertedWith(\n  \"Cannot transfer to the contract itself\"\n);\n\nawait expect(token.transfer(recipient, 1000))\n  .to.emit(token, \"Transfer\")\n  .withArgs(owner, recipient, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using Ethers in Hardhat Tasks\nDESCRIPTION: Example of using ethers.js within a Hardhat task to get the current block number.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ethers/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-ethers\");\n\n// task action function receives the Hardhat Runtime Environment as second argument\ntask(\n  \"blockNumber\",\n  \"Prints the current block number\",\n  async (_, { ethers }) => {\n    const blockNumber = await ethers.provider.getBlockNumber();\n    console.log(\"Current block number: \" + blockNumber);\n  }\n);\n\nmodule.exports = {};\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Custom Options\nDESCRIPTION: Example of deploying contracts with custom wallet client and additional parameters\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst [_, secondWalletClient] = await hre.viem.getWalletClients();\n\nconst contractA = await hre.viem.deployContract(\n  \"contractName\",\n  [\"arg1\", 50, \"arg3\"],\n  {\n    client: { wallet: secondWalletClient }\n    gas: 1000000,\n    value: parseEther(\"0.0001\"),\n    confirmations: 5, // 1 by default\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Etherscan and Sourcify in Hardhat\nDESCRIPTION: Configuration example for setting up Etherscan API key and enabling Sourcify verification in the Hardhat config file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  networks: {\n    mainnet: { ... }\n  },\n  etherscan: {\n    // Your API key for Etherscan\n    // Obtain one at https://etherscan.io/\n    apiKey: \"YOUR_ETHERSCAN_API_KEY\"\n  },\n  sourcify: {\n    // Disabled by default\n    // Doesn't need an API key\n    enabled: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Programmatically Verifying Contracts with Complex Arguments\nDESCRIPTION: JavaScript code showing how to programmatically verify a contract with complex constructor arguments using the verify:verify subtask within a Hardhat script or task.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait hre.run(\"verify:verify\", {\n  address: contractAddress,\n  constructorArguments: [\n    50,\n    \"a string argument\",\n    {\n      x: 10,\n      y: 5,\n    },\n    \"0xabcdef\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in Contract Factory\nDESCRIPTION: Example of linking a library when creating a contract factory using the getContractFactory function.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ethers/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst contractFactory = await this.env.ethers.getContractFactory(\"Example\", {\n  libraries: {\n    ExampleLib: \"0x...\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Test Client for Mining Blocks\nDESCRIPTION: Example of using the Test Client to perform test-specific actions like mining blocks\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst testClient = await hre.viem.getTestClient();\n\nawait testClient.mine({\n  blocks: 1000000,\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts with Hardhat Ignition\nDESCRIPTION: This command deploys the LockModule using Hardhat Ignition on the ephemeral Hardhat network. It utilizes the npx package runner to execute the Hardhat CLI with the Ignition plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/viem-sample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/LockModule.js\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Client for Message Signing\nDESCRIPTION: Example of using the Wallet Client to sign messages\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst walletClient = await hre.viem.getWalletClient(\n  \"0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\"\n);\n\nconst signature = await walletClient.signMessage({\n  account,\n  message: \"hello world\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Public Client in Viem\nDESCRIPTION: Example of using the Public Client to interact with blockchain data through public JSON-RPC API methods\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst publicClient = await hre.viem.getPublicClient();\n\nconst blockNumber = await publicClient.getBlockNumber();\n\nconst balance = await publicClient.getBalance({\n  address: \"0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Ignition in JavaScript\nDESCRIPTION: Code example showing how to import the Hardhat Ignition plugin in a JavaScript-based Hardhat configuration file, with options for both ethers and viem users.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ethers users\nrequire(\"@nomicfoundation/hardhat-ignition-ethers\");\n\n// viem users\nrequire(\"@nomicfoundation/hardhat-ignition-viem\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Hardhat Project\nDESCRIPTION: This gitignore configuration excludes node modules, environment files, Hardhat-generated files, TypeChain outputs, coverage reports, and Hardhat Ignition deployment files from version control. It ensures that only necessary project files are tracked while ignoring build artifacts and sensitive information.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/recommended-gitignore.txt#2025-04-21_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\nnode_modules\n.env\n\n# Hardhat files\n/cache\n/artifacts\n\n# TypeChain files\n/typechain\n/typechain-types\n\n# solidity-coverage files\n/coverage\n/coverage.json\n\n# Hardhat Ignition default folder for deployments against a local node\nignition/deployments/chain-31337\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hardhat Task Using Web3.js\nDESCRIPTION: Example of creating a custom Hardhat task that uses the Web3.js instance to retrieve Ethereum accounts. The task demonstrates how to access the web3 object from the Hardhat Runtime Environment.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3-v4/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-web3-v4\");\n\n// task action function receives the Hardhat Runtime Environment as second argument\ntask(\"accounts\", \"Prints accounts\", async (_, { web3 }) => {\n  console.log(await web3.eth.getAccounts());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Ignition in TypeScript\nDESCRIPTION: Code example showing how to import the Hardhat Ignition plugin in a TypeScript-based Hardhat configuration file, with options for both ethers and viem users.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ethers users\nimport \"@nomicfoundation/hardhat-ignition-ethers\";\n\n// viem users\nimport \"@nomicfoundation/hardhat-ignition-viem\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hardhat Task Using Web3\nDESCRIPTION: Example of creating a custom Hardhat task that uses Web3.js to retrieve and print Ethereum accounts. This demonstrates accessing the web3 instance from the Hardhat Runtime Environment.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-web3\");\n\n// task action function receives the Hardhat Runtime Environment as second argument\ntask(\"accounts\", \"Prints accounts\", async (_, { web3 }) => {\n  console.log(await web3.eth.getAccounts());\n});\n\nmodule.exports = {};\n```\n\n----------------------------------------\n\nTITLE: Using the Sourcify Class Directly in a Script\nDESCRIPTION: Advanced usage example showing how to use the Sourcify class directly for contract verification from another plugin or script.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sourcify } from \"@nomicfoundation/hardhat-verify/sourcify\";\n\nconst instance = new Sourcify(\n  1,\n  \"https://sourcify.dev/server\",\n  \"https://repo.sourcify.dev\"\n); // Set chainId\n\nif (!instance.isVerified(\"0x123abc...\")) {\n  const sourcifyResponse = await instance.verify(\"0x123abc...\", {\n    \"metadata.json\": \"{...}\",\n    \"otherFile.sol\": \"...\",\n  });\n  if (sourcifyResponse.isOk()) {\n    const contractURL = instance.getContractUrl(\n      \"0x123abc...\",\n      sourcifyResponse.status\n    );\n    console.log(`Successfully verified contract on Sourcify: ${contractURL}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LedgerProvider to sign a message in a Hardhat task\nDESCRIPTION: Example task demonstrating how to use the LedgerProvider to sign a message with a Ledger account. It shows how to request a personal signature using the extended provider.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntask(\"sign\", \"Signs a message\", async (_, hre) => {\n  const message =\n    \"0x5417aa2a18a44da0675524453ff108c545382f0d7e26605c56bba47c21b5e979\";\n  const account = \"0xa809931e3b38059adae9bc5455bc567d0509ab92\";\n\n  const signature = await hre.network.provider.request({\n    method: \"personal_sign\",\n    params: [\n      \"0x5417aa2a18a44da0675524453ff108c545382f0d7e26605c56bba47c21b5e979\",\n      account,\n    ],\n  });\n\n  console.log(\n    \"Signed message\",\n    message,\n    \"for Ledger account\",\n    account,\n    \"and got\",\n    signature\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the Hardhat Verify Plugin via NPM\nDESCRIPTION: Command to install the @nomicfoundation/hardhat-verify package as a development dependency.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-verify\n```\n\n----------------------------------------\n\nTITLE: Using the Etherscan Class Directly in a Script\nDESCRIPTION: Advanced usage example showing how to use the Etherscan class directly for contract verification from another plugin or script.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Etherscan } from \"@nomicfoundation/hardhat-verify/etherscan\";\n\nconst instance = new Etherscan(\n  \"abc123def123\", // Etherscan API key\n  \"https://api.etherscan.io/api\", // Etherscan API URL\n  \"https://etherscan.io\" // Etherscan browser URL\n);\n\nif (!instance.isVerified(\"0x123abc...\")) {\n  const { message: guid } = await instance.verify(\n    // Contract address\n    \"0x123abc...\",\n    // Contract source code\n    '{\"language\":\"Solidity\",\"sources\":{\"contracts/Sample.sol\":{\"content\":\"// SPDX-Lic...\"}},\"settings\":{ ... }}',\n    // Contract name\n    \"contracts/Sample.sol:MyContract\",\n    // Compiler version\n    \"v0.8.19+commit.7dd6d404\",\n    // Encoded constructor arguments\n    \"0000000000000000000000000000000000000000000000000000000000000032\"\n  );\n\n  await sleep(1000);\n  const verificationStatus = await instance.getVerificationStatus(guid);\n\n  if (verificationStatus.isSuccess()) {\n    const contractURL = instance.getContractUrl(\"0x123abc...\");\n    console.log(\n      `Successfully verified contract \"MyContract\" on Etherscan: ${contractURL}`\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Contract with Structured Constructor Arguments\nDESCRIPTION: Example Solidity contract with a complex constructor that accepts various types including a struct, which requires special handling during verification.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Point {\n  uint x;\n  uint y;\n}\n\ncontract Foo {\n  constructor (uint x, string s, Point memory point, bytes b) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Verifying Contracts with Libraries\nDESCRIPTION: JavaScript code demonstrating how to programmatically verify a contract with library dependencies using the verify:verify subtask.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nhre.run(\"verify:verify\", {\n  // other args\n  libraries: {\n    SomeLibrary: \"0x...\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Verify Plugin in JavaScript Configuration\nDESCRIPTION: Code snippet showing how to import the hardhat-verify plugin in a JavaScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-verify\");\n```\n\n----------------------------------------\n\nTITLE: Defining Ethers Helper Functions\nDESCRIPTION: TypeScript interface definitions for helper functions added to the ethers object in the Hardhat Runtime Environment.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ethers/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Libraries {\n  [libraryName: string]: string;\n}\n\ninterface FactoryOptions {\n  signer?: ethers.Signer;\n  libraries?: Libraries;\n}\n\nfunction deployContract(name: string, constructorArgs?: any[], signer?: ethers.Signer): Promise<ethers.Contract>;\n\nfunction getContractFactory(name: string, signer?: ethers.Signer): Promise<ethers.ContractFactory>;\n\nfunction getContractFactory(name: string, factoryOptions: FactoryOptions): Promise<ethers.ContractFactory>;\n\nfunction getContractFactory(abi: any[], bytecode: ethers.utils.BytesLike, signer?: ethers.Signer): Promise<ethers.ContractFactory>;\n\nfunction getContractAt(name: string, address: string, signer?: ethers.Signer): Promise<ethers.Contract>;\n\nfunction getContractAt(abi: any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;\n\nfunction getSigners() => Promise<ethers.Signer[]>;\n\nfunction getSigner(address: string) => Promise<ethers.Signer>;\n\nfunction getImpersonatedSigner(address: string) => Promise<ethers.Signer>;\n\nfunction getContractFactoryFromArtifact(artifact: Artifact, signer?: ethers.Signer): Promise<ethers.ContractFactory>;\n\nfunction getContractFactoryFromArtifact(artifact: Artifact, factoryOptions: FactoryOptions): Promise<ethers.ContractFactory>;\n\nfunction getContractAtFromArtifact(artifact: Artifact, address: string, signer?: ethers.Signer): Promise<ethers.Contract>;\n```\n\n----------------------------------------\n\nTITLE: Configuring custom derivation path for Ledger accounts\nDESCRIPTION: Example of configuring a custom derivation path function for Ledger accounts, allowing the use of legacy or non-standard addresses with the plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    hardhat: {\n      ledgerAccounts: [...],\n      ledgerOptions: {\n        derivationFunction: (x) => `m/44'/60'/0'/${x}` // legacy derivation path\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Module for Complex Constructor Arguments\nDESCRIPTION: Example of an arguments.js file that exports a properly formatted array of constructor arguments for contract verification, including structured types.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  50,\n  \"a string argument\",\n  {\n    x: 10,\n    y: 5,\n  },\n  // bytes have to be 0x-prefixed\n  \"0xabcdef\",\n];\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with Ignition\nDESCRIPTION: This command runs the Hardhat tests using Ignition. It uses npm to execute the test script defined in the project's package.json file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/viem-sample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat Ignition\nDESCRIPTION: Command to deploy contracts using Hardhat Ignition to the ephemeral Hardhat network. Specifically deploys the LockModule contract defined in the ignition/modules directory.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/sample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat ignition deploy ./ignition/modules/LockModule.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Keys for Different Networks\nDESCRIPTION: Configuration example showing how to set up multiple Etherscan API keys for different networks in the Hardhat config file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  networks: {\n    mainnet: { ... },\n    testnet: { ... }\n  },\n  etherscan: {\n    apiKey: {\n        mainnet: \"YOUR_ETHERSCAN_API_KEY\",\n        optimisticEthereum: \"YOUR_OPTIMISTIC_ETHERSCAN_API_KEY\",\n        arbitrumOne: \"YOUR_ARBISCAN_API_KEY\",\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with Ignition\nDESCRIPTION: Command to execute the test suite using npm run command for Hardhat tests with Ignition integration.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/ts-sample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Dynamic Imports in JavaScript\nDESCRIPTION: An example of correct code that complies with the rule by using dynamic imports. The slow module is only loaded when the function is called, which improves performance of the Hardhat CLI.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/docs/rules/no-top-level-external-import.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function bar() {\n  const { foo } = await import(\"slow-module\");\n  foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sourcify Verification from Command Line\nDESCRIPTION: Command to verify a contract using Sourcify, specifying only the network and contract address.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat verify --network mainnet DEPLOYED_CONTRACT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat-Viem in JavaScript\nDESCRIPTION: JavaScript configuration for adding the hardhat-viem plugin to hardhat.config.js\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-viem\");\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat tasks\nDESCRIPTION: Examples of running Hardhat tasks, including compiling contracts, running tests, and starting the Hardhat console.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle5/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\nnpx hardhat test\nnpx hardhat console\n```\n\n----------------------------------------\n\nTITLE: Disabling Sourcify Verification\nDESCRIPTION: Configuration snippet to explicitly disable Sourcify verification in the Hardhat config file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsourcify: {\n  enabled: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat-Viem in TypeScript\nDESCRIPTION: TypeScript configuration for adding the hardhat-viem plugin to hardhat.config.ts\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-viem\";\n```\n\n----------------------------------------\n\nTITLE: Using Web3 with Truffle and Hardhat\nDESCRIPTION: Example of accessing the Web3.js instance that's made available by the Hardhat Truffle plugin. This shows how to use both Truffle contracts and Web3 in the same test.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyContract = artifacts.require(\"MyContract\");\n\nit(\"Should get accounts from web3\", async function() {\n  const accounts = await web3.eth.getAccounts();\n  console.log(accounts);\n  \n  const myContract = await MyContract.new();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Custom Networks in Hardhat Config\nDESCRIPTION: Configuration example demonstrating how to add support for a custom network (using Goerli as an example) by specifying chain ID and API URLs.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\netherscan: {\n  apiKey: {\n    goerli: \"<goerli-api-key>\"\n  },\n  customChains: [\n    {\n      network: \"goerli\",\n      chainId: 5,\n      urls: {\n        apiURL: \"https://api-goerli.etherscan.io/api\",\n        browserURL: \"https://goerli.etherscan.io\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Truffle Contracts in Hardhat\nDESCRIPTION: Code showing how to deploy a contract using Truffle's contract abstraction within Hardhat. This example also shows how to access contract instances after deployment.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyContract = artifacts.require(\"MyContract\");\n\n// In a Hardhat test\nit(\"Should deploy MyContract\", async function() {\n  const myContract = await MyContract.new();\n  \n  assert.notEqual(myContract.address, undefined);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat-Ethers in JavaScript\nDESCRIPTION: Adding the hardhat-ethers plugin to a JavaScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ethers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-ethers\");\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Module for Library Addresses\nDESCRIPTION: Example of a libraries.js file that exports a dictionary mapping library names to their deployed addresses.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  SomeLibrary: \"0x...\",\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing Contract Instances\nDESCRIPTION: Example demonstrating how to connect to an already deployed contract using Truffle's .at() method within Hardhat. This is useful for interacting with contracts that are already on the blockchain.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myContract = await MyContract.at(\"0xabc...\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Ignition Plugin in JavaScript\nDESCRIPTION: JavaScript configuration to import the Hardhat Ignition plugin in hardhat.config.js file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-ethers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-ignition-ethers\");\n```\n\n----------------------------------------\n\nTITLE: Verifying with Complex Constructor Arguments\nDESCRIPTION: Command to verify a contract using the constructor arguments defined in a separate JavaScript module file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat verify --constructor-args arguments.js DEPLOYED_CONTRACT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Truffle4 Plugin in JavaScript\nDESCRIPTION: JavaScript configuration code to include the Hardhat Truffle4 plugin in the project's hardhat.config.js file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-truffle4\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Ignition Plugin in TypeScript\nDESCRIPTION: TypeScript configuration to import the Hardhat Ignition plugin in hardhat.config.ts file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-ethers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-ignition-ethers\";\n```\n\n----------------------------------------\n\nTITLE: Verifying with Custom Libraries\nDESCRIPTION: Command to verify a contract with libraries whose addresses cannot be automatically detected, using a custom libraries file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhardhat verify --libraries libraries.js OTHER_ARGS\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat-Truffle5 Plugin with Dependencies\nDESCRIPTION: Command to install the hardhat-truffle5 plugin along with its required dependencies hardhat-web3 and web3.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle5/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-truffle5 @nomiclabs/hardhat-web3 'web3@^1.0.0-beta.36'\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Vyper Plugin in TypeScript Configuration\nDESCRIPTION: TypeScript code to import the hardhat-vyper plugin in a Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomiclabs/hardhat-vyper\";\n```\n\n----------------------------------------\n\nTITLE: Hardhat Chai Matchers Workaround for Async Matchers Limitation\nDESCRIPTION: Example showing how to work around the limitation of not being able to chain async matchers by creating separate assertions.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-chai-matchers/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = contract.f(...);\nawait expect(tx).to.changeEtherBalance(...)\nawait expect(tx).to.changeTokenBalance(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Options\nDESCRIPTION: Example of customizing client behavior by passing options to the client initialization methods\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport hre from \"hardhat\";\n\nconst publicClient = await hre.viem.getPublicClient({\n  pollingInterval: 1000,\n  cacheTime: 2000,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Solhint Plugin via npm\nDESCRIPTION: Command to install the @nomiclabs/hardhat-solhint package as a development dependency in your project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-solhint/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-solhint\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Vyper Plugin in JavaScript Configuration\nDESCRIPTION: JavaScript code to include the hardhat-vyper plugin in a Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-vyper\");\n```\n\n----------------------------------------\n\nTITLE: Importing Truffle Contracts in Test Scripts\nDESCRIPTION: Example of importing and using Truffle's contract abstractions in a Hardhat test file. The code demonstrates how to access the built-in artifacts object to get Truffle-compatible contract abstractions.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyContract = artifacts.require(\"MyContract\");\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Chai Matchers with npm 7+\nDESCRIPTION: Command to install the Hardhat Chai Matchers plugin using npm version 7 or later.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-chai-matchers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-chai-matchers\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Web3 v4 Plugin in TypeScript\nDESCRIPTION: Configuration snippet to include the hardhat-web3-v4 plugin in a TypeScript-based Hardhat project by importing it in the hardhat.config.ts file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3-v4/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-web3-v4\";\n```\n\n----------------------------------------\n\nTITLE: Example Foundry Directory Structure with Remappings\nDESCRIPTION: Demonstrates a typical library structure in Foundry with remappings configuration. The example shows how a project might organize files in directories and define remappings to simplify imports between files.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-foundry/DESIGN.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDirectory structure:\n\n  lib/foo/src/bar/Bar.sol\n  lib/foo/src/qux/Qux.sol\n\nWith remappings:\n\n  foo=lib/foo/src\n  bar=lib/foo/src/bar\n  qux=lib/foo/src/qux\n```\n\n----------------------------------------\n\nTITLE: Importing hardhat-ledger plugin in JavaScript\nDESCRIPTION: Code snippet to import the hardhat-ledger plugin in a JavaScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-ledger\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Web3 v4 Plugin in JavaScript\nDESCRIPTION: Configuration snippet to include the hardhat-web3-v4 plugin in a JavaScript-based Hardhat project by adding it to the hardhat.config.js file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3-v4/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-web3-v4\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Solhint Plugin in JavaScript\nDESCRIPTION: JavaScript code to include the hardhat-solhint plugin in your Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-solhint/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-solhint\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Ledger accounts in Hardhat config\nDESCRIPTION: Example configuration for setting up Ledger accounts in the Hardhat configuration file. It demonstrates how to specify Ledger account addresses for use with the plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-ledger\");\n\nmodule.exports = {\n  networks: {\n    hardhat: {\n      ledgerAccounts: [\n        \"0xa809931e3b38059adae9bc5455bc567d0509ab92\",\n        \"0xda6a52afdae5ff66aa786da68754a227331f56e3\",\n        \"0xbc307688a80ec5ed0edc1279c44c1b34f7746bda\",\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Including Hardhat Web3 Plugin in TypeScript Configuration\nDESCRIPTION: Code snippet showing how to import the hardhat-web3 plugin in a TypeScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomiclabs/hardhat-web3\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Verify Plugin in TypeScript Configuration\nDESCRIPTION: Code snippet showing how to import the hardhat-verify plugin in a TypeScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-verify\";\n```\n\n----------------------------------------\n\nTITLE: Handling Ledger plugin errors in TypeScript\nDESCRIPTION: Example of how to catch and check for specific errors thrown by the hardhat-ledger plugin using the static error checking methods.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  //(...)\n} catch (error) {\n  if (DerivationPathError.isDerivationPathError(error)) {\n    // error is a DerivationPathError\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Hardhat Web3 Plugin in JavaScript Configuration\nDESCRIPTION: Code snippet showing how to require the hardhat-web3 plugin in a JavaScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-web3\");\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Ignition Plugin in TypeScript Config\nDESCRIPTION: Code snippet demonstrating how to import the Hardhat Ignition plugin in a TypeScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-viem/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-ignition-viem\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Vyper Version in Hardhat Config\nDESCRIPTION: JavaScript configuration to specify the Vyper compiler version in the Hardhat config file. This sets a single Vyper version for the project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  vyper: {\n    version: \"0.3.0\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat-Ethers in TypeScript\nDESCRIPTION: Adding the hardhat-ethers plugin to a TypeScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ethers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing hardhat-ledger plugin in TypeScript\nDESCRIPTION: Code snippet to import the hardhat-ledger plugin in a TypeScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@nomicfoundation/hardhat-ledger\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Solhint Plugin in TypeScript\nDESCRIPTION: TypeScript code to import the hardhat-solhint plugin in your Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-solhint/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomiclabs/hardhat-solhint\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Vyper Versions and Compiler Settings\nDESCRIPTION: Advanced JavaScript configuration for specifying multiple Vyper compiler versions and their respective settings in the Hardhat config file. This allows for different Vyper versions and compiler options within the same project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  vyper: {\n    compilers: [\n      {\n        version: \"0.2.1\",\n      },\n      {\n        version: \"0.3.10\",\n        settings: {\n          evmVersion: \"paris\",\n          optimize: \"gas\",\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Hardhat Chai Matchers to Hardhat config\nDESCRIPTION: JavaScript code to require the Hardhat Chai Matchers plugin in the Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-chai-matchers/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-chai-matchers\");\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Solpp Plugin in JavaScript Configuration\nDESCRIPTION: Code snippet to import the hardhat-solpp plugin in a JavaScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-solpp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-solpp\");\n```\n\n----------------------------------------\n\nTITLE: Importing Network Helpers in Hardhat Toolbox\nDESCRIPTION: Example showing how to import Network Helpers from the Hardhat Toolbox package to avoid peer dependency issues when using npm 7 or later.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-toolbox/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport helpers from \"@nomicfoundation/hardhat-toolbox/network-helpers\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Sourcify Verification Settings\nDESCRIPTION: Configuration example showing how to enable and configure Sourcify verification with optional custom server and repository URLs.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-verify/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsourcify: {\n  enabled: true,\n  // Optional: specify a different Sourcify server\n  apiUrl: \"https://sourcify.dev/server\",\n  // Optional: specify a different Sourcify repository\n  browserUrl: \"https://repo.sourcify.dev\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Solpp Plugin in TypeScript Configuration\nDESCRIPTION: Code snippet to import the hardhat-solpp plugin in a TypeScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-solpp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomiclabs/hardhat-solpp\";\n```\n\n----------------------------------------\n\nTITLE: Importing Network Helpers from Hardhat Toolbox in TypeScript\nDESCRIPTION: Example of importing the Network Helpers re-exported by the Hardhat Toolbox. This approach resolves potential issues when peer dependencies aren't listed in package.json, which can cause problems with certain tools or IDEs.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-toolbox-viem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport helpers from \"@nomicfoundation/hardhat-toolbox/network-helpers\";\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration with slow-imports\nDESCRIPTION: JSON configuration to extend the ESLint configuration with the recommended settings for the slow-imports plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:slow-imports/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hardhat-Truffle5 Plugin to JavaScript Config\nDESCRIPTION: JavaScript code snippet showing how to require the hardhat-truffle5 plugin in a Hardhat JavaScript configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle5/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-truffle5\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Truffle5 Plugin\nDESCRIPTION: Configuration example showing how to require the Hardhat Truffle5 plugin in the hardhat.config.js file. This is necessary to enable Truffle features in a Hardhat project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-truffle5\");\n```\n\n----------------------------------------\n\nTITLE: Enabling ES Module Support in TypeScript Config\nDESCRIPTION: The `resolveJsonModule` compiler option is now enabled by default in the sample tsconfig to support ES modules.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"resolveJsonModule\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hardhat-Truffle5 Plugin to TypeScript Config\nDESCRIPTION: TypeScript code snippet showing how to import the hardhat-truffle5 plugin in a Hardhat TypeScript configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle5/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@nomiclabs/hardhat-truffle5\";\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat-Viem Dependencies\nDESCRIPTION: Command to install the hardhat-viem plugin and its dependencies using npm\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-viem viem\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with Ignition\nDESCRIPTION: This command runs the Hardhat tests that use Ignition for contract deployment and interaction. It executes the test script defined in the project's package.json.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/ens/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Installation Check in Hardhat\nDESCRIPTION: Added an experimental environment variable flag to disable the local installation check in Hardhat.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nHARDHAT_DISABLE_LOCAL_INSTALLATION_CHECK=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Truffle4 Plugin in TypeScript\nDESCRIPTION: TypeScript configuration code to include the Hardhat Truffle4 plugin in the project's hardhat.config.ts file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@nomiclabs/hardhat-truffle4\";\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Ignition Tests\nDESCRIPTION: Command to execute the test suite for Hardhat Ignition deployments using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/upgradeable/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable Telemetry Prompt\nDESCRIPTION: Added a HARDHAT_DISABLE_TELEMETRY_PROMPT environment variable that can be set to `true` to prevent Hardhat from showing the telemetry consent prompt.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nHARDHAT_DISABLE_TELEMETRY_PROMPT=true\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Chai Matchers with yarn\nDESCRIPTION: Command to install the Hardhat Chai Matchers plugin and its dependencies using yarn package manager.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-chai-matchers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @nomicfoundation/hardhat-chai-matchers chai@4 @nomicfoundation/hardhat-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Executing Hardhat Initialization Tests\nDESCRIPTION: Command to run the Hardhat initialization test suite that verifies the 'hardhat init' functionality.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./test-project-initialization.sh\n```\n\n----------------------------------------\n\nTITLE: Linking Hardhat Package for Local Development\nDESCRIPTION: Commands to link a local Hardhat package for testing in a Hardhat project using npm link.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm link\nnpm link hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with Ignition\nDESCRIPTION: This command executes the Hardhat tests using Ignition via the npm run script.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/complete/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Specific Hardhat Fixture Tests\nDESCRIPTION: Command to run tests for a specific fixture project by providing the project folder name as a parameter. Example shows running tests from the 'vars' folder.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/e2e/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./run-fixture-projects.sh vars\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the Entire Hardhat Project\nDESCRIPTION: Command to run all tests across the entire Hardhat monorepo from the root folder using pnpm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with Ignition\nDESCRIPTION: Command to execute the test suite using NPM scripts, which runs Hardhat tests with Ignition integration.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-examples/sample/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Plugins in .eslintrc\nDESCRIPTION: JSON configuration to add the slow-imports plugin to the ESLint configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"slow-imports\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Hardhat Fixture Tests\nDESCRIPTION: Command to execute all Hardhat fixture-based scenario tests.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./run-fixture-projects.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Ignition Ethers Plugin\nDESCRIPTION: Command to install the Hardhat Ignition plugin with Ethers support using npm package manager.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-ethers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-ignition-ethers\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Ignition Plugin in JavaScript Config\nDESCRIPTION: Code snippet showing how to import the Hardhat Ignition plugin in a JavaScript-based Hardhat configuration file.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-viem/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomicfoundation/hardhat-ignition-viem\");\n```\n\n----------------------------------------\n\nTITLE: Configuring slow-imports Rule in .eslintrc\nDESCRIPTION: JSON configuration to set up the no-top-level-external-import rule from the slow-imports plugin, including options for ignoring specific modules.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"slow-imports/no-top-level-external-import\": [\n      \"error\",\n      {\n        \"ignoreModules\": []\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Web3 Plugin with npm\nDESCRIPTION: Command to install the hardhat-web3 plugin and Web3.js as development dependencies using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-web3 'web3@^1.0.0-beta.36'\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Ignition with Viem Plugin\nDESCRIPTION: Command to install the Hardhat Ignition plugin with Viem integration as a development dependency using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition-viem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-ignition-viem\n```\n\n----------------------------------------\n\nTITLE: Correct Code Example for only-hardhat-error Rule in JavaScript\nDESCRIPTION: A placeholder for examples of code that properly follows the @nomicfoundation/hardhat-internal-rules/only-hardhat-error rule. This section should be filled with examples showing proper HardhatError usage.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-hardhat-internal-rules/docs/rules/only-hardhat-error.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// fill me in\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Web3 v4 Plugin with npm\nDESCRIPTION: Command to install the @nomicfoundation/hardhat-web3-v4 plugin and Web3.js version 4 as development dependencies in a Hardhat project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-web3-v4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-web3-v4 'web3@4'\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Network Helpers with npm\nDESCRIPTION: Command to install the Hardhat Network Helpers package as a development dependency using npm. The recommendation is to use npm 7 or later for installation.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-network-helpers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-network-helpers\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Vyper Plugin via npm\nDESCRIPTION: Command to install the hardhat-vyper plugin as a development dependency in a Node.js project.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-vyper\n```\n\n----------------------------------------\n\nTITLE: Installing hardhat-ledger plugin via npm\nDESCRIPTION: Command to install the hardhat-ledger plugin as a development dependency using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-ledger\n```\n\n----------------------------------------\n\nTITLE: Installing slow-imports ESLint Plugin with npm\nDESCRIPTION: Command to install the @nomicfoundation/eslint-plugin-slow-imports as a dev dependency using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @nomicfoundation/eslint-plugin-slow-imports --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Solpp Plugin via npm\nDESCRIPTION: Command to install the hardhat-solpp plugin as a development dependency using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-solpp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-solpp\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Chai Matchers with older npm versions\nDESCRIPTION: Command to install the Hardhat Chai Matchers plugin and its dependencies for older npm versions.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-chai-matchers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-chai-matchers chai@4 @nomicfoundation/hardhat-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Shorthand Globally with NPM\nDESCRIPTION: Command to install the hardhat-shorthand package globally using NPM to make the 'hh' command available system-wide.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-shorthand/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global hardhat-shorthand\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.8\nDESCRIPTION: Documents a patch fix for corrupted Hardhat peer dependency version from pnpm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.8\n\n### Patch Changes\n\n- efa905d: Fix for corrupted Hardhat peer dependency version from pnpm.\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Truffle4 Plugin Dependencies\nDESCRIPTION: Command to install the required npm packages for using Truffle 4 contracts with Hardhat, including the main plugin, web3 legacy support, and web3 version 0.20.7.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-truffle4 @nomiclabs/hardhat-web3-legacy web3@^0.20.7\n```\n\n----------------------------------------\n\nTITLE: Version 3.0.0 Changelog Entry\nDESCRIPTION: Major version update documentation showing the addition of Hardhat Ignition support and upgrade to viem@2.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-toolbox-viem/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.0\n\n### Major Changes\n\n- 92d140f: Include Hardhat Ignition in the toolboxes.\n- cfec932: Upgraded hardhat-toolbox-viem and project creation to support viem@2\n\n### Patch Changes\n\n- Updated dependencies [92d140f]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.6\nDESCRIPTION: Notes the addition of support for Vyper settings 'evmVersion' and 'optimize'.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.6\n\n### Patch Changes\n\n- f0e6389: Added support for vyper settings 'evmVersion' and 'optimize'\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Truffle5 Plugin via npm\nDESCRIPTION: Command to install the @nomiclabs/hardhat-truffle5 plugin with npm. This plugin enables Truffle compatibility in Hardhat projects.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-truffle5 @nomiclabs/hardhat-web3 web3\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Changes in Markdown\nDESCRIPTION: This snippet shows how version changes are documented in the changelog using Markdown formatting. It includes version numbers, dates, and categorized lists of changes.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ignition/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.15.11\n\n### Patch Changes\n\n- 23280b8: Resolve all dependencies when using submodules in `after`\n\n## 0.15.10\n\n### Patch Changes\n\n- d96c003: Fix for bug when we fail to save transaction hash\n\n## 0.15.9 - 2024-12-18\n\n### Added\n\n- Standard Ignition UI can now be enabled when deploying via Hardhat scripts by setting `displayUi: true` in the `deploy` function options, @zoeyTM ([#843](https://github.com/NomicFoundation/hardhat-ignition/pull/843))\n- Ignition modules can now be set as a dependency in the `after` option of futures, @zoeyTM ([#828](https://github.com/NomicFoundation/hardhat-ignition/pull/828))\n- The `ignition transactions` command output will now include a link to view each transaction on the configured block explorer, @zoeyTM ([#849](https://github.com/NomicFoundation/hardhat-ignition/pull/849))\n- Module parameters can now be directly imported from a JSON file when deploying via Hardhat scripts by passing an absolute path to the file to the `parameters` option, @zoeyTM ([#850](https://github.com/NomicFoundation/hardhat-ignition/pull/850))\n\n### Fixed\n\n- Properly handle errors when verifying deployments that use external artifacts, @zoeyTM ([#848](https://github.com/NomicFoundation/hardhat-ignition/pull/848))\n- Fix issue with `ignition status` command not working with deployments that use external artifacts, @zoeyTM ([#846](https://github.com/NomicFoundation/hardhat-ignition/pull/846))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.7\nDESCRIPTION: Records support addition for Vyper 0.4.0's new output identifiers.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.7\n\n### Patch Changes\n\n- 1f9f8e0: Support Vyper 0.4.0's new output identifiers (Thanks, @kiriyaga-txfusion!)\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint with npm\nDESCRIPTION: Command to install ESLint as a dev dependency using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i eslint --save-dev\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Documents version history from 1.1.0 to 1.0.1, including feature additions, bug fixes, and dependency updates for the Hardhat Ledger plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-ledger/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @nomicfoundation/hardhat-ledger\n\n## 1.1.0\n\n### Minor Changes\n\n- aa09462: Add support for the Prague hardfork\n\n## 1.0.3\n\n### Patch Changes\n\n- 4912563: Internal restructuing to better support cli UI updates from other Hardhat plugins\n- e038de7: Added an option to set the derivation path (thanks @area!).\n\n## 1.0.2\n\n### Patch Changes\n\n- f60cc9e: Fixed a problem that made `hardhat-ledger` unusable in the Hardhat console (thanks @area!).\n\n## 1.0.1\n\n### Patch Changes\n\n- d8793639e: Pinned version of @ledgerhq/hw-app-eth because the latest version has breaking changes\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Changelog\nDESCRIPTION: Changelog entries documenting version updates from 2.0.6 down to 1.0.1, including major version changes, patches, and feature additions.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-viem/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @nomicfoundation/hardhat-viem\n\n## 2.0.6\n\n### Patch Changes\n\n- 90bcfda: Remove unnecessary peerDependency\n\n## 2.0.5\n\n### Patch Changes\n\n- 6010386: Moved types to `HardhatViemHelpers` and initialized `ContractTypesMap` as empty for better extensibility. Improved performance by disabling retries in dev nets (thanks @TateB!)\n\n## 2.0.4\n\n### Patch Changes\n\n- efa905d: Fix for corrupted Hardhat peer dependency version from pnpm.\n\n## 2.0.3\n\n### Patch Changes\n\n- a8a6038: Added `ContractTypesMap` to simplify contract type imports (thanks @beepidibop!)\n\n## 2.0.2\n\n### Patch Changes\n\n- ccb0ace: Added support for library linking (thanks @Chlebamaticon!)\n\n## 2.0.1\n\n### Patch Changes\n\n- a181462: Fix to add guard for updated `TransactionReceipt` type in `viem`\n\n## 2.0.0\n\n### Major Changes\n\n- e4b1c07b7: Upgraded hardhat-viem to support viem@2\n\n## 1.0.4\n\n### Patch Changes\n\n- 29516eb: Fixed broken link in network error message (thanks @sunsetlover36!).\n\n## 1.0.3\n\n### Patch Changes\n\n- ffb301f14: Improved loading performance\n\n## 1.0.2\n\n### Patch Changes\n\n- b521c2a05: Add configurable public client to getContractAt, deployContract and sendDeploymentTransaction\n\n## 1.0.1\n\n### Patch Changes\n\n- 4943519d0: Fixed an issue with development networks using custom chain ids\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Top-Level External Imports in JavaScript\nDESCRIPTION: An example of incorrect code that violates the rule by using a top-level import of a slow external module. This pattern causes the slow module to be loaded during initialization, which can slow down the Hardhat CLI.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-slow-imports/docs/rules/no-top-level-external-import.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo } from \"slow-module\";\n\nfunction bar() {\n  foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries documenting version updates from 2.0.1 to 2.0.6, including performance improvements, dependency updates, and bug fixes for the Hardhat Truffle4 plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle4/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @nomiclabs/hardhat-truffle4\n\n## 2.0.6\n\n### Patch Changes\n\n- 2922b15f5: Improve the compilation performance by not using the `glob` library whenever we can avoid it.\n\n## 2.0.5\n\n### Patch Changes\n\n- b9f997cb: Upgraded ethereumjs dependencies (thanks @LogvinovLeon!).\n\n## 2.0.4\n\n### Patch Changes\n\n- 01d675df: Add support for artifacts type extensibility\n\n## 2.0.3\n\n### Patch Changes\n\n- d867073c: Support `arrowGlacier` hardfork\n\n## 2.0.2\n\n### Patch Changes\n\n- c9e99d4f: Fix a bug that prevented the plugin to work with custom Hardhat Network accounts (Thanks @swaylock!)\n\n## 2.0.1\n\n### Patch Changes\n\n- e92c0b56: Make contract.skip and contract.only work in both truffle plugins (Thanks @frangio!)\n- Updated dependencies [b62ddf32]\n  - hardhat@2.6.4\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.5\nDESCRIPTION: Documents a fix for issues with the Vyper compilers downloader.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.5\n\n### Patch Changes\n\n- 2f73386b1: Fixed a problem with the Vyper compilers downloader\n```\n\n----------------------------------------\n\nTITLE: Running Linting Commands for Hardhat Packages\nDESCRIPTION: Commands to check and fix linting issues within Hardhat packages using pnpm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm lint\npnpm lint:fix\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.4\nDESCRIPTION: Details the addition of validation for unsupported Brownie test mode directives.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.4\n\n### Patch Changes\n\n- 03745576c: Added a check to validate that the Brownie code does not contain the directive `#@ if mode == \"test\":` because we do not support this feature.\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing Local Hardhat Package with pnpm pack\nDESCRIPTION: Commands to create a tarball of a local Hardhat package and install it in a project for testing.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm pack\nnpm install /path/to/hardhat/packages/hardhat-core/hardhat-x.y.z.tgz\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy for Hardhat Requests\nDESCRIPTION: Added support for the `http_proxy` environment variable to send Hardhat requests through a proxy. Also supports `no_proxy` to exclude hosts from proxying.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-core/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport http_proxy=\"http://proxy.example.com:8080\"\nexport no_proxy=\"localhost,127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Version 2.0.0 Changelog Entry\nDESCRIPTION: Major version update documentation noting the upgrade of hardhat-verify dependency.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-toolbox-viem/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0\n\n### Major Changes\n\n- 23665f399: Upgraded hardhat-verify dependency\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of HardhatPluginError Rule\nDESCRIPTION: Placeholder for examples demonstrating proper error handling patterns that comply with the HardhatPluginError rule.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-hardhat-internal-rules/docs/rules/only-hardhat-plugin-error.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// fill me in\n```\n\n----------------------------------------\n\nTITLE: Unsupported Vyper Test Directive Example\nDESCRIPTION: An example of a Vyper test directive that is not supported by the hardhat-vyper plugin. This code snippet demonstrates a feature used in Brownie for including test-only code, which will cause an error if found during compilation with this plugin.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-vyper/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#@ if mode == \"test\":\n@external\ndef _mint_for_testing(_to: address, _token_id: uint256):\n    self._mint(_to, _token_id)\n#@ endif\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example for only-hardhat-error Rule in JavaScript\nDESCRIPTION: A placeholder for examples of code that would violate the @nomicfoundation/hardhat-internal-rules/only-hardhat-error rule. This section should be filled with examples showing improper error throwing.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-hardhat-internal-rules/docs/rules/only-hardhat-error.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// fill me in\n```\n\n----------------------------------------\n\nTITLE: Checking Dependencies Consistency in Hardhat\nDESCRIPTION: Command to verify that all projects in the Hardhat monorepo specify the same versions of each dependency.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode scripts/check-dependencies.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of HardhatPluginError Rule\nDESCRIPTION: Placeholder for examples demonstrating incorrect error handling patterns that violate the HardhatPluginError rule.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/eslint-plugin-hardhat-internal-rules/docs/rules/only-hardhat-plugin-error.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// fill me in\n```\n\n----------------------------------------\n\nTITLE: Publishing Hardhat Package Locally with Yalc\nDESCRIPTION: Commands to publish and add a local Hardhat package to a project using yalc as an alternative to linking.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyalc publish\nyalc add hardhat\n```\n\n----------------------------------------\n\nTITLE: Debugging Hardhat with ndb\nDESCRIPTION: Command to debug Hardhat using ndb, which allows setting breakpoints with debugger statements.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nndb npx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Creating a Hardhat project\nDESCRIPTION: Command to create a new Hardhat project, which will prompt for project configuration options.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle5/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Package in Hardhat\nDESCRIPTION: Command to run tests for an individual package within the Hardhat monorepo using pnpm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat via npm\nDESCRIPTION: Command to install Hardhat as a development dependency in a Node.js project using npm.\nSOURCE: https://github.com/nomicfoundation/hardhat/blob/main/packages/hardhat-truffle5/test/fixture-projects/hardhat-project-with-test-contracts/test/shouldBeIgnored.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hardhat\n```"
  }
]