[
  {
    "owner": "pestphp",
    "repo": "docs",
    "content": "TITLE: Requiring Pest as a dev dependency with Composer\nDESCRIPTION: These commands remove PHPUnit and install Pest PHP as a development dependency with all required dependencies. This is the first step in setting up Pest for your project.\nSOURCE: https://github.com/pestphp/docs/blob/master/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer remove phpunit/phpunit\ncomposer require pestphp/pest --dev --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Basic Test Function Example in Pest PHP\nDESCRIPTION: Demonstrates how to write a simple test using the test() function to verify a sum operation.\nSOURCE: https://github.com/pestphp/docs/blob/master/writing-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntest('sum', function () {\n   $result = sum(1, 2);\n\n   expect($result)->toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Pest in a PHP project\nDESCRIPTION: This command initializes Pest in your project by creating a Pest.php configuration file at the root of your test suite. This enables you to customize your test suite settings.\nSOURCE: https://github.com/pestphp/docs/blob/master/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --init\n```\n\n----------------------------------------\n\nTITLE: Using it() Function for More Readable Tests\nDESCRIPTION: Shows how to use the it() function to create more descriptive test cases with natural language.\nSOURCE: https://github.com/pestphp/docs/blob/master/writing-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('performs sums', function () {\n   $result = sum(1, 2);\n\n   expect($result)->toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Pest PHP Tests\nDESCRIPTION: Shows the default directory structure created after installing Pest, including test folders and configuration files.\nSOURCE: https://github.com/pestphp/docs/blob/master/writing-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nâ”œâ”€â”€ ðŸ“‚ tests\nâ”‚   â”œâ”€â”€ ðŸ“‚ Unit\nâ”‚   â”‚   â””â”€â”€ ExampleTest.php\nâ”‚   â””â”€â”€ ðŸ“‚ Feature\nâ”‚   â”‚   â””â”€â”€ ExampleTest.php\nâ”‚   â””â”€â”€ TestCase.php\nâ”‚   â””â”€â”€ Pest.php\nâ”œâ”€â”€ phpunit.xml\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Tests with describe()\nDESCRIPTION: Illustrates how to group related tests using the describe() function for better organization.\nSOURCE: https://github.com/pestphp/docs/blob/master/writing-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndescribe('sum', function () {\n   it('may sum integers', function () {\n       $result = sum(1, 2);\n\n       expect($result)->toBe(3);\n    });\n   \n    it('may sum floats', function () {\n       $result = sum(1.5, 2.5);\n\n       expect($result)->toBe(4.0);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: toBe() Expectation in Pest PHP\nDESCRIPTION: Demonstrates the usage of the toBe() expectation to compare values and types in Pest PHP.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nexpect(1)->toBe(1);\nexpect('1')->not->toBe(1);\nexpect(new StdClass())->not->toBe(new StdClass());\n```\n\n----------------------------------------\n\nTITLE: Defining Architectural Rules with Pest PHP\nDESCRIPTION: Example of defining architectural rules using Pest PHP's arch() function. It includes rules for strict types, class extensions, usage restrictions, and trait definitions.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narch()\n    ->expect('App')\n    ->toUseStrictTypes()\n    ->not->toUse(['die', 'dd', 'dump']);\n\narch()\n    ->expect('App\\Models')\n    ->toBeClasses()\n    ->toExtend('Illuminate\\Database\\Eloquent\\Model')\n    ->toOnlyBeUsedIn('App\\Repositories')\n    ->ignoring('App\\Models\\User');\n\narch()\n    ->expect('App\\Http')\n    ->toOnlyBeUsedIn('App\\Http');\n    \narch()\n    ->expect('App\\*\\Traits')\n    ->toBeTraits();\n\narch()->preset()->php();\narch()->preset()->security()->ignoring('md5');\n```\n\n----------------------------------------\n\nTITLE: Using the 'not' Modifier in Pest PHP Expectations\nDESCRIPTION: Illustrates how to use the 'not' modifier to negate expectations in Pest PHP.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nexpect($value)\n    ->toBeInt()\n    ->toBe(3)\n    ->not->toBeString() // Not to be string...\n    ->not->toBe(4); // Not to be 4...\n```\n\n----------------------------------------\n\nTITLE: Profiling Tests in Pest PHP\nDESCRIPTION: Identify slow-running tests in your test suite using the --profile flag. This command collects execution duration for each test and highlights the slowest tests to help with optimization.\nSOURCE: https://github.com/pestphp/docs/blob/master/optimizing-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --profile\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Pest Test Syntax with a Sum Function\nDESCRIPTION: This example shows Pest's elegant testing syntax by defining a simple sum function and testing it with Pest's expect syntax. The code demonstrates how Pest tests are readable and closely resemble natural language.\nSOURCE: https://github.com/pestphp/docs/blob/master/why-pest.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction sum($a, $b) {\n    return $a + $b;\n}\n\ntest('sum', function () {\n  $result = sum(1, 2);\n\n  expect($result)->toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Expectations in Pest PHP\nDESCRIPTION: Shows how to chain multiple expectations for a single value in Pest PHP.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nexpect($value)\n    ->toBeInt()\n    ->toBe(3);\n```\n\n----------------------------------------\n\nTITLE: Specifying Process Count for Parallel Testing in Pest PHP\nDESCRIPTION: Run tests in parallel with a specific number of processes by using the --processes option. This example sets up 10 parallel processes for test execution.\nSOURCE: https://github.com/pestphp/docs/blob/master/optimizing-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --parallel --processes=10\n```\n\n----------------------------------------\n\nTITLE: Sharing Properties with beforeEach Hook in Pest PHP\nDESCRIPTION: This example shows how to initialize properties with the beforeEach hook that will be shared across all tests within the current file, making them available via the $this object.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(function () {\n    $this->userRepository = new UserRepository();\n});\n\nit('may be created', function () {\n    $user = $this->userRepository->create();\n\n    expect($user)->toBeInstanceOf(User::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Pest Expectation Usage in PHP\nDESCRIPTION: Demonstrates how to use the expect() function to test a value in a Pest PHP test.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntest('sum', function () {\n    $value = sum(1, 2);\n\n    expect($value)->toBe(3); // Assert that the value is 3...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with toThrow() Expectation in PHP\nDESCRIPTION: This snippet shows how to use the expectation API with toThrow() method to verify a closure throws an exception. It uses a different syntax that wraps the exception-throwing code in a closure.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nit('throws exception', function () {\n    expect(fn() => throw new Exception('Something happened.'))->toThrow(Exception::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Using PHPUnit's Assertion API\nDESCRIPTION: Shows how to use PHPUnit's traditional assertion API within Pest tests as an alternative to the expectation API.\nSOURCE: https://github.com/pestphp/docs/blob/master/writing-tests.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntest('sum', function () {\n   $result = sum(1, 2);\n\n   $this->assertSame(3, $result); // Same as expect($result)->toBe(3)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Test-Specific Helper Functions in Pest PHP\nDESCRIPTION: Demonstrates how to create a helper function (asAdmin) within a specific test file that returns the test instance via the test() function. This approach is useful for test-specific helper methods.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-helpers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Tests\\TestCase;\n\nfunction asAdmin(): TestCase\n{\n    $user = User::factory()->create([\n        'admin' => true,\n    ]);\n\n    return test()->actingAs($user);\n}\n\nit('can manage users', function () {\n    asAdmin()->get('/users')->assertOk();\n})\n```\n\n----------------------------------------\n\nTITLE: toBeBetween() Expectation in Pest PHP\nDESCRIPTION: Shows how to use the toBeBetween() expectation to check if a value is within a range in Pest PHP.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nexpect(2)->toBeBetween(1, 3);\nexpect(1.5)->toBeBetween(1, 2);\n\n$expectationDate = new DateTime('2023-09-22');\n$oldestDate = new DateTime('2023-09-21');\n$latestDate = new DateTime('2023-09-23');\n\nexpect($expectationDate)->toBeBetween($oldestDate, $latestDate);\n```\n\n----------------------------------------\n\nTITLE: Configuring Compact Printer in Pest PHP\nDESCRIPTION: Configure Pest to always use the compact printer to display only failing tests, reducing noise and slightly improving test speed by minimizing I/O operations. This configuration is added to the tests/Pest.php file.\nSOURCE: https://github.com/pestphp/docs/blob/master/optimizing-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// tests/Pest.php\npest()->printer()->compact();\n\n//\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests in Pest PHP\nDESCRIPTION: CLI options for selecting specific tests or test suites to run, including filtering, grouping, and listing available tests.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--bail\n--ci\n--todos\n--notes\n--issue\n--pr\n--pull-request\n--retry\n--list-suites\n--testsuite <name>\n--exclude-testsuite <name>\n--list-groups\n--group <name>\n--exclude-group <name>\n--covers <name>\n--uses <name>\n--requires-php-extension <name>\n--list-test-files\n--list-tests\n--list-tests-xml <file>\n--filter <pattern>\n--exclude-filter <pattern>\n--test-suffix <suffixes>\n```\n\n----------------------------------------\n\nTITLE: Nesting Hooks within Describe Blocks in Pest PHP\nDESCRIPTION: This example demonstrates how to use hooks within nested describe blocks to scope setup code to specific test groups. The beforeEach hook can be defined at different levels to provide progressive setup specificity.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(function () {\n    //\n});\n\ndescribe('something', function () {\n    beforeEach(function () {\n        //\n    });\n\n    //\n\n    describe('something else', function () {\n        beforeEach(function () {\n            //\n        });\n\n        //\n    });\n});\n\ntest('something', function () {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions from Mocked Methods in PHP\nDESCRIPTION: Demonstrates how to configure a mocked method to throw an exception when called.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')->andThrow(new Exception);\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions workflow for Pest PHP tests\nDESCRIPTION: A GitHub Actions workflow configuration that sets up PHP 8.2 with Composer, installs dependencies, and runs Pest tests with the CI flag. This workflow runs on both push events and pull requests.\nSOURCE: https://github.com/pestphp/docs/blob/master/continuous-integration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Tests\n\non: ['push', 'pull_request']\n\njobs:\n  ci:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: 8.2\n          tools: composer:v2\n          coverage: xdebug\n\n      - name: Install Dependencies\n        run: composer install --no-interaction --prefer-dist --optimize-autoloader\n\n      - name: Tests\n        run: ./vendor/bin/pest --ci\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Hooks for All Tests in Pest PHP\nDESCRIPTION: This snippet demonstrates how to define global hooks that will run before each test across the entire test suite, regardless of folder or group. This approach is useful for common setup tasks.\nSOURCE: https://github.com/pestphp/docs/blob/master/global-hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npest()->beforeEach(function () {\n    // Interact with your database...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete Test Lifecycle Hooks in Pest PHP\nDESCRIPTION: This example shows how to define a complete set of lifecycle hooks (beforeAll, beforeEach, afterEach, afterAll) for tests in a specific group and directory. These hooks allow for comprehensive setup and teardown operations.\nSOURCE: https://github.com/pestphp/docs/blob/master/global-hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npest()->extend(TestCase::class)->beforeAll(function () {\n    // Runs before each file...\n})->beforeEach(function () {\n    // Runs before each test...\n})->afterEach(function () {\n    // Runs after each test...\n})->afterAll(function () {\n    // Runs after each file...\n})->group('integration')->in('Feature');\n```\n\n----------------------------------------\n\nTITLE: Creating Global Helper Functions in Pest PHP\nDESCRIPTION: Shows how to define global helper functions in central files (tests/Pest.php or tests/Helpers.php) for use throughout the test suite. This example creates a mockPayments() function that's accessible from any test.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-helpers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Clients\\PaymentClient;\nuse Mockery;\n\n// tests/Pest.php or tests/Helpers.php\nfunction mockPayments(): object\n{\n    $client = Mockery::mock(PaymentClient::class);\n\n    //\n\n    return $client;\n}\n\n// tests/Feature/PaymentsTest.php\nit('may buy a book', function () {\n    $client = mockPayments();\n\n    //\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Argument Expectations in PHP Mocks\nDESCRIPTION: Demonstrates how to specify expected arguments for mocked method calls using the with() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')\n    ->with($firstArgument, $secondArgument);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Expectation in PHP for Pest\nDESCRIPTION: Demonstrates how to create a custom 'toBeWithinRange' expectation for checking if a number falls within a specified range.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-expectations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nexpect()->extend('toBeWithinRange', function (int $min, int $max) {\n    return $this->toBeGreaterThanOrEqual($min)\n                ->toBeLessThanOrEqual($max);\n});\n\ntest('numeric ranges', function () {\n    expect(100)->toBeWithinRange(90, 110);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Argument Matchers in PHP Mocks\nDESCRIPTION: Shows how to use Mockery's built-in matchers like Mockery::any() to provide more flexible argument matching in mocked method calls.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')\n    ->with($firstArgument, Mockery::any());\n```\n\n----------------------------------------\n\nTITLE: Setting Method Call Count Expectations in PHP Mocks\nDESCRIPTION: Shows how to specify expectations for how many times a method should be called using once(), twice(), and times() methods.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$mock->shouldReceive('post')->once();\n$mock->shouldReceive('put')->twice();\n$mock->shouldReceive('delete')->times(3);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Method Mocking Example in PHP\nDESCRIPTION: Demonstrates how to create a mock object using Mockery and set expectations for method calls. This example mocks a payment client to prevent actual API calls during testing.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Repositories\\BookRepository;\nuse Mockery;\n\nit('may buy a book', function () {\n    $client = Mockery::mock(PaymentClient::class);\n    $client->shouldReceive('post');\n\n    $books = new BookRepository($client);\n    $books->buy(); // The API is not actually invoked since `$client->post()` has been mocked...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using Closure-Based Argument Matching in PHP Mocks\nDESCRIPTION: Demonstrates how to use the withArgs() method with a closure to perform custom argument validation logic in mocked method calls.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')->withArgs(function ($arg) {\n    return $arg === 1;\n});\n\n$client->post(1); // passes, matches the expectation\n$client->post(2); // fails, throws a `NoMatchingExpectationException`\n```\n\n----------------------------------------\n\nTITLE: Extending Base Test Class with Protected Methods in Pest PHP\nDESCRIPTION: Demonstrates defining protected helper methods in the base test class and accessing them in test cases using $this. This approach maintains the class-based testing style within Pest's functional structure.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-helpers.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Clients\\PaymentClient;\nuse PHPUnit\\Framework\\TestCase as BaseTestCase;\nuse Mockery;\n\n// tests/TestCase.php\nclass TestCase extends BaseTestCase\n{\n    protected function mockPayments(): void\n    {\n        $client = Mockery::mock(PaymentClient::class);\n\n        //\n\n        return $client;\n    }\n}\n\n// tests/Pest.php\npest()->extend(TestCase::class)->in('Feature');\n\n// tests/Feature/PaymentsTest.php\nit('may buy a book', function () {\n    $client = $this->mockPayments();\n\n    //\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Test Case Methods in Pest PHP Tests\nDESCRIPTION: This snippet shows how to access public or protected methods from a custom test case class within a Pest PHP test closure after configuring the test to use that class.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase as BaseTestCase;\n\n// tests/TestCase.php\nclass TestCase extends BaseTestCase\n{\n    public function performThis(): void\n    {\n        //\n    }\n}\n\n// tests/Pest.php\npest()->extend(TestCase::class)->in('Feature');\n\n// tests/Feature/ExampleTest.php\nit('has home', function () {\n    $this->performThis();\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Multiple Method Calls in PHP\nDESCRIPTION: Shows how to set expectations for multiple different method calls on the same mock object.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post');\n$client->shouldReceive('delete');\n```\n\n----------------------------------------\n\nTITLE: Basic Test Dependency in Pest PHP\nDESCRIPTION: Demonstrates basic test dependency where the child test depends on the parent test. The child test is executed only after the parent test passes successfully.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-dependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntest('parent', function () {\n    expect(true)->toBeTrue();\n});\n\ntest('child', function () {\n    expect(false)->toBeFalse();\n})->depends('parent');\n```\n\n----------------------------------------\n\nTITLE: Basic Dataset Usage in Pest PHP\nDESCRIPTION: Demonstrates how to use a simple dataset with a test function in Pest PHP. The test will run for each email address provided in the dataset.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('has emails', function (string $email) {\n    expect($email)->not->toBeEmpty();\n})->with(['enunomaduro@gmail.com', 'other@example.com']);\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tests in Pest PHP\nDESCRIPTION: Execute tests concurrently across multiple processes to significantly decrease test execution time. This command runs tests in parallel using all available CPU cores.\nSOURCE: https://github.com/pestphp/docs/blob/master/optimizing-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --parallel\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with throws() Method in PHP\nDESCRIPTION: This snippet demonstrates how to create a test that expects an exception to be thrown using the throws() method. It checks that an Exception is thrown without verifying the exception message.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('throws exception', function () {\n    throw new Exception('Something happened.');\n})->throws(Exception::class);\n```\n\n----------------------------------------\n\nTITLE: Delta Comparison in Pest PHP\nDESCRIPTION: Shows how to use toEqualWithDelta() to compare numeric values within a specified tolerance.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nexpect($durationInMinutes)->toEqualWithDelta(10, 5); //duration of 10 minutes with 5 minutes tolerance\n\nexpect(14)->toEqualWithDelta(10, 5);    // Pass\nexpect(14)->toEqualWithDelta(10, 0.1); // Fail\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication with Laravel Pest Plugin\nDESCRIPTION: Example of testing authenticated routes using the actingAs function from the Laravel Pest plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse function Pest\\Laravel\\{actingAs};\n\ntest('authenticated user can access the dashboard', function () {\n    $user = User::factory()->create();\n\n    actingAs($user)->get('/dashboard')\n        ->assertStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Using PHP Preset for Architecture Testing in Pest PHP\nDESCRIPTION: Applies predefined PHP best practices expectations to your project, including prevention of dangerous functions like die() and var_dump().\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_44\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->php();\n```\n\n----------------------------------------\n\nTITLE: Using afterEach Hook in Pest PHP\nDESCRIPTION: The afterEach hook executes the provided closure after every test within the current file, allowing cleanup of resources or state that may have been modified during testing.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nafterEach(function () {\n    // Clear testing data after each test run...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Messages without Type Checking in PHP\nDESCRIPTION: This snippet demonstrates how to test for an exception message without specifying the exception type. It's useful when you only care about the error message and not the specific exception class.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('throws exception', function () {\n    throw new Exception('Something happened.');\n})->throws('Something happened.');\n```\n\n----------------------------------------\n\nTITLE: Conditional Exception Testing with throwsIf() in PHP\nDESCRIPTION: This snippet shows how to conditionally verify an exception is thrown only if a condition is true using the throwsIf() method. It checks for an exception only when the database driver is MySQL.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nit('throws exception', function () {\n    //\n})->throwsIf(fn() => DB::getDriverName() === 'mysql', Exception::class, 'MySQL is not supported.');\n```\n\n----------------------------------------\n\nTITLE: Array Matching in Pest PHP\nDESCRIPTION: Demonstrates how to use toMatchArray() to verify that an array contains specific key-value pairs as a subset.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'id'    => 1,\n    'name'  => 'Nuno',\n    'email' => 'enunomaduro@gmail.com',\n    'is_active' => true,\n];\n\nexpect($user)->toMatchArray([\n    'email' => 'enunomaduro@gmail.com',\n    'name' => 'Nuno'\n]);\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Reporting in Pest PHP\nDESCRIPTION: CLI options for generating and customizing code coverage reports, including various output formats and filtering options.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--coverage\n--coverage --min=<value>\n--coverage-clover <file>\n--coverage-cobertura <file>\n--coverage-crap4j <file>\n--coverage-html <dir>\n--coverage-php <file>\n--coverage-text=<file>\n--only-summary-for-coverage-text\n--show-uncovered-for-coverage-text\n--coverage-xml <dir>\n--warm-coverage-cache\n--coverage-filter <dir>\n--path-coverage\n--disable-coverage-ignore\n--no-coverage\n```\n\n----------------------------------------\n\nTITLE: Cleaning Resources with afterEach Hook in Pest PHP\nDESCRIPTION: This example demonstrates using the afterEach hook to reset a repository after each test, ensuring that tests don't interfere with each other by sharing state.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nafterEach(function () {\n    $this->userRepository->reset();\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing Datasets in Pest PHP\nDESCRIPTION: Demonstrates how to share datasets in Pest PHP by storing them separately in the tests/Datasets folder. This helps distinguish them from test code and keeps main test files clean.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// tests/Unit/ExampleTest.php...\nit('has emails', function (string $email) {\n    expect($email)->not->toBeEmpty();\n})->with('emails');\n\n// tests/Datasets/Emails.php...\ndataset('emails', [\n    'enunomaduro@gmail.com',\n    'other@example.com'\n]);\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Configuration API in Pest 3 PHP\nDESCRIPTION: Shows the difference between Pest 1/2's uses() function and Pest 3's new pest() configuration API with examples of extending test cases, using traits, and configuring printer options.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n-uses(TestCase::class)->in(__DIR__);\n+pest()->extends(TestCase::class);\n\n-uses(TestCase::class, RefreshDatabase::class)->in('Features');\n+pest()->extends(TestCase::class)->use(RefreshDatabase::class)->in('Features');\n\n-uses()->compact();\n+pest()->printer()->compact();\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Message Validation in PHP\nDESCRIPTION: This snippet shows how to test that an exception is thrown with a specific message by providing a second argument to the throws() method. It verifies both the exception type and message.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nit('throws exception', function () {\n    throw new Exception('Something happened.');\n})->throws(Exception::class, 'Something happened.');\n```\n\n----------------------------------------\n\nTITLE: Verifying No Exceptions with throwsNoExceptions() in PHP\nDESCRIPTION: This snippet demonstrates how to assert that no exceptions are thrown during the execution of a test using the throwsNoExceptions() method. It explicitly verifies the absence of exceptions.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nit('throws no exceptions', function () {\n    $result = 1 + 1;\n})->throwsNoExceptions();\n```\n\n----------------------------------------\n\nTITLE: Object Matching in Pest PHP\nDESCRIPTION: Shows how to use toMatchObject() to verify that an object contains specific properties and values.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = new stdClass();\n$user->id = 1;\n$user->email = 'enunomaduro@gmail.com';\n$user->name = 'Nuno';\n\nexpect($user)->toMatchObject([\n    'email' => 'enunomaduro@gmail.com',\n    'name' => 'Nuno'\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Testing in Pest\nDESCRIPTION: Demonstrates how to use Pest's new built-in snapshot testing feature to verify that a web page response remains unchanged.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    $response = $this->get('/contact');\n\n    expect($response)->toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Basic Code Coverage with Pest PHP\nDESCRIPTION: Command to run Pest tests with code coverage reporting. This displays a list of project files and their corresponding coverage results.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-coverage.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --coverage\n```\n\n----------------------------------------\n\nTITLE: Using Nested Describe Blocks in Pest 3 PHP\nDESCRIPTION: Demonstrates how to organize tests using nested describe blocks, allowing for more effective grouping and organization of tests. Includes examples of hooks and test definitions within nested contexts.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndescribe('home', function () {\n    beforeEach(function () {\n        //\n    });\n\n    it('can be visited', function () {\n        //\n    });\n\n    describe('footer', function () {\n        it('contains a link to the contact page', function () {\n            //\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Existing Expectations in PHP for Pest\nDESCRIPTION: Demonstrates how to override an existing expectation (toBe) for a specific type (Eloquent Model) to compare IDs instead of object instances.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-expectations.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse App\\Models\\User;\n\nexpect()->intercept('toBe', Model::class, function(Model $expected) {\n    expect($this->value->id)->toBe($expected->id);\n});\n\ntest('models', function () {\n    $userA = User::find(1);\n    $userB = User::find(1);\n\n    expect($userA)->toBe($userB);\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with Pest PHP CLI\nDESCRIPTION: Command-line options for controlling test execution, including parallel running, snapshot updates, and various stop conditions.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--parallel\n--update-snapshots\n--globals-backup\n--static-backup\n--strict-coverage\n--strict-global-state\n--disallow-test-output\n--enforce-time-limit\n--default-time-limit <sec>\n--dont-report-useless-tests\n--stop-on-defect\n--stop-on-error\n--stop-on-failure\n--stop-on-warning\n--stop-on-risky\n--stop-on-deprecation\n--stop-on-notice\n--stop-on-skipped\n--stop-on-incomplete\n--fail-on-empty-test-suite\n--fail-on-warning\n--fail-on-risky\n--fail-on-deprecation\n--fail-on-phpunit-deprecation\n--fail-on-notice\n--fail-on-skipped\n--fail-on-incomplete\n--cache-result\n--do-not-cache-result\n--order-by <order>\n--random-order-seed <N>\n```\n\n----------------------------------------\n\nTITLE: Passing Values Between Dependent Tests in Pest PHP\nDESCRIPTION: Shows how parent tests can provide return values that can be accessed as arguments in the child test, enabling data sharing between tests.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-dependencies.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ntest('parent', function () {\n    expect(true)->toBeTrue();\n\n    return 'from parent';\n});\n\ntest('child', function ($parentValue) {\n    var_dump($parentValue); // from parent\n\n    expect($parentValue)->toBe('from parent');\n})->depends('parent');\n```\n\n----------------------------------------\n\nTITLE: Value Equality Testing in Pest PHP\nDESCRIPTION: Examples of using toEqual() to compare values for equality, including primitive types and objects.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nexpect($title)->toEqual('Hello World');\nexpect('1')->toEqual(1);\nexpect(new StdClass())->toEqual(new StdClass());\n```\n\n----------------------------------------\n\nTITLE: Complex Configuration with Multiple Classes and Traits in Pest PHP\nDESCRIPTION: This example shows a more complex configuration that applies a custom test case class and trait to multiple directories across different modules using glob patterns.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// tests/Pest.php\npest()\n    ->extend(DuskTestCase::class)\n    ->use(DatabaseMigrations::class)\n    ->in('../Modules/*/Tests/Browser');\n\n// This will apply the DuskTestCase class and the DatabaseMigrations trait to all test files within any module's \"Browser\" directory.\n```\n\n----------------------------------------\n\nTITLE: Applying Traits to Tests in Pest PHP\nDESCRIPTION: This example demonstrates how to apply traits like RefreshDatabase to tests or folders using the pest()->use() method in the configuration file.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\npest()->extend(TestCase::class)->use(RefreshDatabase::class)->in('Feature');\n```\n\n----------------------------------------\n\nTITLE: Higher Order Testing Basic Implementation in Pest PHP\nDESCRIPTION: Converting a traditional test to a higher order test by removing the closure and directly chaining methods.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nit('works')\n    ->get('/')\n    ->assertStatus(200);\n```\n\n----------------------------------------\n\nTITLE: Combining Datasets in Pest PHP\nDESCRIPTION: Shows how to combine both inline and shared datasets in Pest PHP using a cartesian product approach. This example tests if businesses are closed on specific days of the week.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndataset('days_of_the_week', [\n    'Saturday',\n    'Sunday',\n]);\n\ntest('business is closed on day', function(string $business, string $day) {\n    expect(new $business)->isClosed($day)->toBeTrue();\n})->with([\n    Office::class,\n    Bank::class,\n    School::class\n])->with('days_of_the_week');\n```\n\n----------------------------------------\n\nTITLE: Using Describe Blocks for Test Organization in Pest\nDESCRIPTION: Demonstrates how to use Pest's new describe blocks feature to group related tests and share setup/teardown logic between them.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(fn () => $this->user = User::factory()->create());\n\ndescribe('auth', function () {\n    beforeEach(fn () => $this->actingAs($this->user));\n\n    test('cannot login when already logged in', function () {\n        // ...\n    });\n\n    test('can logout', function () {\n        // ...\n    });\n})->skip(/* Skip the entire describe block */);\n\ndescribe('guest', function () {\n    test('can login', function () {\n        // ...\n    });\n    \n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Repeating Tests in Pest PHP\nDESCRIPTION: Demonstrates how to repeat a test multiple times in Pest PHP using the repeat() method. This is useful for debugging or ensuring test stability.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nit('can repeat a test', function () {\n    $result = /** Some code that may be unstable */;\n\n    expect($result)->toBeTrue();\n})->repeat(100); // Repeat the test 100 times\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Call Count Expectations in PHP Mocks\nDESCRIPTION: Demonstrates how to use atLeast() to specify a minimum number of times a method should be called.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$mock->shouldReceive('delete')->atLeast()->times(3);\n```\n\n----------------------------------------\n\nTITLE: Test Dependencies with it() Function in Pest PHP\nDESCRIPTION: Demonstrates how to reference a test created with it() function in the depends() method, including the 'it' prefix in the test name.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-dependencies.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('is the parent', function () {\n    expect(true)->toBeTrue();\n});\n\ntest('child', function () {\n    expect(false)->toBeFalse();\n})->depends('it is the parent');\n```\n\n----------------------------------------\n\nTITLE: Defining Sequential Return Values in PHP Mocks\nDESCRIPTION: Demonstrates how to set up a sequence of different return values for consecutive calls to the same mocked method.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')->andReturn(1, 2);\n\n$client->post(); // int(1)\n$client->post(); // int(2)\n```\n\n----------------------------------------\n\nTITLE: Higher Order Expectations with Arrays in Pest PHP\nDESCRIPTION: Using higher order expectations to access and test array keys and values.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nexpect(['name' => 'Nuno', 'projects' => ['Pest', 'OpenAI', 'Laravel Zero']])\n    ->name->toBe('Nuno')\n    ->projects->toHaveCount(3)\n    ->each->toBeString();\n   \nexpect(['Dan', 'Luke', 'Nuno'])\n    ->{0}->toBe('Dan');\n```\n\n----------------------------------------\n\nTITLE: Array Key Case Validation in PHP Tests\nDESCRIPTION: Methods for validating array keys in different case formats (snake_case, kebab-case, camelCase, StudlyCase).\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nexpect(['snake_case' => 'abc123'])->toHaveSnakeCaseKeys();\nexpect(['kebab-case' => 'abc123'])->toHaveKebabCaseKeys();\nexpect(['camelCase' => 'abc123'])->toHaveCamelCaseKeys();\nexpect(['StudlyCase' => 'abc123'])->toHaveStudlyCaseKeys();\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach Hook in Pest PHP\nDESCRIPTION: The beforeEach hook executes the provided closure before every test within the current file, ensuring any necessary setup is completed before each test runs.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(function () {\n    // Prepare something before each test run...\n});\n```\n\n----------------------------------------\n\nTITLE: Higher Order Testing with Datasets in Pest PHP\nDESCRIPTION: Implementing higher order testing with datasets using expect and defer closures.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nit('validates emails')\n    ->with(['taylor@laravel.com', 'enunomaduro@gmail.com'])\n    ->expect(fn (string $email) => Validator::isValid($email))\n    ->toBeTrue();\n```\n\n----------------------------------------\n\nTITLE: Setting Return Values for Mocked Methods in PHP\nDESCRIPTION: Shows how to define return values for mocked methods using the andReturn() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')->andReturn('post response');\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with Arrays in Pest\nDESCRIPTION: Shows how to use Pest's snapshot testing with array data types instead of HTTP responses.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$array = /** Fetch array somewhere */;\n\nexpect($array)->toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Size and Value Type Validation in PHP Tests\nDESCRIPTION: Methods for comparing collection sizes and validating URLs and UUIDs.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nexpect(['foo', 'bar'])->toHaveSameSize(['baz', 'bazz']);\nexpect('https://pestphp.com/')->toBeUrl();\nexpect('ca0a8228-cdf6-41db-b34b-c2f31485796c')->toBeUuid();\n```\n\n----------------------------------------\n\nTITLE: Advanced Higher Order Expectations with Closures in Pest PHP\nDESCRIPTION: Using sequence method with closures for more complex higher order expectations.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nexpect(['name' => 'Nuno', 'projects' => ['Pest', 'OpenAI', 'Laravel Zero']])\n    ->name->toBe('Nuno')\n    ->projects->toHaveCount(3)\n    ->sequence(\n        fn ($project) => $project->toBe('Pest'),\n        fn ($project) => $project->toBe('OpenAI'),\n        fn ($project) => $project->toBe('Laravel Zero'),\n    );\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Testing of API Response in PHP with Pest\nDESCRIPTION: This snippet demonstrates how to test an HTTP response against a snapshot using Pest. The first run creates a snapshot file, and subsequent runs compare the response against the stored snapshot.\nSOURCE: https://github.com/pestphp/docs/blob/master/snapshot-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    $response = $this->get('/contact');\n\n    expect($response)->toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll Hook in Pest PHP\nDESCRIPTION: The beforeAll hook executes once before any tests run within the current file, allowing for one-time setup or initialization that applies to all tests. Note that $this is not available.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nbeforeAll(function () {\n    // Prepare something once before any of this file's tests run...\n});\n```\n\n----------------------------------------\n\nTITLE: Test Flow Control and Debugging in PHP Tests\nDESCRIPTION: Methods for chaining expectations, debugging values, and conditional execution in tests.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nexpect($id)->toBe(14)\n    ->and($name)->toBe('Nuno');\n\nexpect(14)->dd();\nexpect([1, 2])->sequence(\n    fn ($number) => $number->toBe(1),\n    fn ($number) => $number->dd()\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Mockery via Composer\nDESCRIPTION: Command to install Mockery as a development dependency using Composer package manager.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require mockery/mockery --dev\n```\n\n----------------------------------------\n\nTITLE: Using Profiling CLI Option in Pest PHP\nDESCRIPTION: Shows the command-line option for profiling test performance in Pest PHP. This option outputs the top ten slowest tests to help identify performance bottlenecks in the test suite.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n--profile\n```\n\n----------------------------------------\n\nTITLE: Using the Implementing Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Shows the implementing() modifier which restricts architecture expectations to only classes that implement a specific interface. This example ensures classes implementing ShouldQueue also use the Dispatchable trait.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_60\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->implementing(ShouldQueue::class)\n    ->toUseTrait(Dispatchable::class);\n```\n\n----------------------------------------\n\nTITLE: Calculating Return Values Dynamically in PHP Mocks\nDESCRIPTION: Shows how to use closures with andReturnUsing() to dynamically calculate return values for mocked method calls.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$mock->shouldReceive('post')\n    ->andReturnUsing(\n        fn () => 1,\n        fn () => 2,\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Pest PHP CLI Options\nDESCRIPTION: Command-line options for configuring Pest PHP, including initialization, bootstrap files, XML configuration, and PHP settings.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--init\n--bootstrap <file>\n-c|--configuration <file>\n--no-configuration\n--extension <class>\n--no-extensions\n--include-path <path(s)>\n-d <key[=value]>\n--cache-directory <dir>\n--generate-configuration\n--migrate-configuration\n--generate-baseline <file>\n--use-baseline <file>\n--ignore-baseline\n--test-directory\n```\n\n----------------------------------------\n\nTITLE: Using Strict Preset for Architecture Testing in Pest PHP\nDESCRIPTION: Applies a strict set of architectural expectations including strict types and final classes to enforce rigorous coding standards.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_47\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->strict();\n```\n\n----------------------------------------\n\nTITLE: String Case Validation in PHP Tests\nDESCRIPTION: Examples of validating different string case formats (camelCase, StudlyCase) using Pest PHP expectations.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nexpect('camelCase')->toBeCamelCase();\nexpect('StudlyCase')->toBeStudlyCase();\n```\n\n----------------------------------------\n\nTITLE: Verifying Test Failures with fails() Method in PHP\nDESCRIPTION: This snippet shows how to use the fails() method to verify that a test fails. This is useful for meta-testing where you want to ensure a test fails under certain conditions.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nit('fails', function () {\n    throw new Exception('Something happened.');\n})->fails();\n```\n\n----------------------------------------\n\nTITLE: Failing Parent Test with Dependencies in Pest PHP\nDESCRIPTION: Shows what happens when a parent test fails. The child test is skipped and an informative message is displayed in the test results.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-dependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntest('parent', function () {\n    expect(true)->toBeFalse();\n});\n\ntest('child', function () {\n    expect(false)->toBeFalse();\n})->depends('parent');\n```\n\n----------------------------------------\n\nTITLE: Scoped Higher Order Expectations in Pest PHP\nDESCRIPTION: Using the scoped method to lock expectations to a certain level in the chain, useful for nested relations.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n    expect($user)\n    ->name->toBe('Nuno')\n    ->email->toBe('enunomaduro@gmail.com')\n    ->address()->scoped(fn ($address) => $address\n        ->line1->toBe('1 Pest Street')\n        ->city->toBe('Lisbon')\n        ->country->toBe('Portugal')\n    );\n```\n\n----------------------------------------\n\nTITLE: Running Pest tests\nDESCRIPTION: This command executes the Pest test runner to run all your tests. This is how you'll run your test suite after it's set up.\nSOURCE: https://github.com/pestphp/docs/blob/master/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Case Class in Pest PHP Tests\nDESCRIPTION: This snippet demonstrates how to access the default PHPUnit\\Framework\\TestCase class within a Pest PHP test closure. It shows the use of $this variable and how it's bound to the test case class.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    echo get_class($this); // \\PHPUnit\\Framework\\TestCase\n\n    $this->assertTrue(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Architectural Testing in Pest\nDESCRIPTION: Shows how to use Pest's improved architectural testing expectations to validate codebase structure, naming conventions, and inheritance patterns.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntest('controllers')\n    ->expect('App\\Http\\Controllers')\n    ->toUseStrictTypes()\n    ->toHaveSuffix('Controller') // or toHavePreffix, ...\n    ->toBeReadonly() \n    ->toBeClasses() // or toBeInterfaces, toBeTraits, ...\n    ->classes->not->toBeFinal() // ðŸŒ¶\n    ->classes->toExtendNothing() // or toExtend(Controller::class),\n    ->classes->toImplementNothing() // or toImplement(ShouldQueue::class),\n```\n\n----------------------------------------\n\nTITLE: Collection Testing Methods in PHP\nDESCRIPTION: Methods for testing collections including each(), sequence(), and JSON handling.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nexpect([1, 2, 3])->each->toBeInt();\nexpect([1, 2, 3])->sequence(\n    fn ($number) => $number->toBe(1),\n    fn ($number) => $number->toBe(2),\n    fn ($number) => $number->toBe(3)\n);\nexpect('{\"name\":\"Nuno\",\"credit\":1000.00}')\n    ->json()\n    ->toHaveCount(2);\n```\n\n----------------------------------------\n\nTITLE: Marking Tests as Failed with Custom Message in PHP\nDESCRIPTION: This snippet demonstrates how to mark a test as failed with a custom error message using the fail() method. The message provides context for why the test failed.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nit('fail', function () {\n    $this->fail('Something went wrong.');\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Untested Mutation Output\nDESCRIPTION: Shows how Pest displays untested mutations with code diff highlighting the changes.\nSOURCE: https://github.com/pestphp/docs/blob/master/mutation-testing.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nclass TodoController {\n    public function index(): array\n    {\n         // pest detected that this code is untested because\n         // the test is not covering the return value\n-        return Todo::all()->toArray();\n+        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Using Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Demonstrates the using() modifier which restricts architecture expectations to only classes that use a specific trait. This example ensures classes using HasFactory also extend the Model class.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_61\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->using(HasFactory::class)\n    ->toExtend(Model::class);\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Skipping in Pest PHP\nDESCRIPTION: Illustrates how to skip a test based on a condition using the skip() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->skip($condition == true, 'temporarily unavailable');\n```\n\n----------------------------------------\n\nTITLE: Running Pest Drift to Convert PHPUnit Tests\nDESCRIPTION: Command to run Pest with the --drift option, which automatically converts PHPUnit tests to Pest syntax.\nSOURCE: https://github.com/pestphp/docs/blob/master/migrating-from-phpunit-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --drift\n```\n\n----------------------------------------\n\nTITLE: Array Canonical Comparison in Pest PHP\nDESCRIPTION: Demonstrates using toEqualCanonicalizing() to compare arrays regardless of element order.\nSOURCE: https://github.com/pestphp/docs/blob/master/expectations.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$usersAsc = ['Dan', 'Fabio', 'Nuno'];\n$usersDesc = ['Nuno', 'Fabio', 'Dan'];\n\nexpect($usersAsc)->toEqualCanonicalizing($usersDesc);\nexpect($usersAsc)->not->toEqual($usersDesc);\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Traits with toUseTraits in PHP\nDESCRIPTION: Ensures classes use a specific set of traits, enforcing consistent behavior patterns across related classes in the application.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_41\n\nLANGUAGE: php\nCODE:\n```\narch('models')\n    ->expect('App\\Models')\n    ->toUseTraits(['Illuminate\\Database\\Eloquent\\SoftDeletes', 'App\\Concerns\\CustomTrait']);\n```\n\n----------------------------------------\n\nTITLE: Conditional Exception Testing with throwsUnless() in PHP\nDESCRIPTION: This snippet demonstrates the throwsUnless() method, which verifies an exception is thrown when a condition is false. It checks for an exception when the database driver is not MySQL.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nit('throws exception', function () {\n    //\n})->throwsUnless(fn() => DB::getDriverName() === 'mysql', Exception::class, 'Only MySQL is supported.');\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Pest PHP tests\nDESCRIPTION: A Bitbucket Pipelines configuration that uses Composer to install dependencies and run Pest tests. The pipeline includes caching for composer dependencies to speed up builds.\nSOURCE: https://github.com/pestphp/docs/blob/master/continuous-integration.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: composer:2\n\npipelines:\n  default:\n  - parallel:\n      - step:\n          name: Test\n          script:\n            - composer install --no-interaction --prefer-dist --optimize-autoloader\n            - ./vendor/bin/pest\n          caches:\n            - composer\n```\n\n----------------------------------------\n\nTITLE: Using Pipe Expectations in PHP for Pest\nDESCRIPTION: Demonstrates how to use the pipe() method to customize the behavior of a built-in expectation (toBe) for a specific type (Eloquent Model) while falling back to the original behavior for other types.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-expectations.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse App\\Models\\User;\n\nexpect()->pipe('toBe', function (Closure $next, mixed $expected) {\n    if ($this->value instanceof Model) {\n        return expect($this->value->id)->toBe($expected->id);\n    }\n\n    return $next(); // Run to the original, built-in expectation...\n});\n```\n\n----------------------------------------\n\nTITLE: PHP Version-Specific Test Skipping in Pest PHP\nDESCRIPTION: Demonstrates how to skip tests based on PHP version using the skipOnPhp() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->skipOnPhp('>=8.0.0');\n```\n\n----------------------------------------\n\nTITLE: Using Pest Faker to Generate Random Data\nDESCRIPTION: Example of using the Pest Faker plugin to generate a random name in a test.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Faker\\fake;\n\nit('generates a name', function () {\n    $name = fake()->name; // random name...\n\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage in phpunit.xml for Pest PHP\nDESCRIPTION: XML configuration to specify which directories should be included in the code coverage analysis. This example includes all PHP files in the './app' directory.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-coverage.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    ...\n    <source>\n        <include>\n            <directory suffix=\".php\">./app</directory>\n        </include>\n    </source>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using toBeEnums() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeEnums() method to ensure all files within a given namespace are enums.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Enums')\n    ->toBeEnums();\n```\n\n----------------------------------------\n\nTITLE: Bound Datasets in Pest PHP\nDESCRIPTION: Shows how to use bound datasets in Pest PHP, which are resolved after the beforeEach() method. This is useful for creating model instances in Laravel applications.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nit('can generate the full name of a user', function (User $user) {\n    expect($user->full_name)->toBe(\"{$user->first_name} {$user->last_name}\");\n})->with([\n    fn() => User::factory()->create(['first_name' => 'Nuno', 'last_name' => 'Maduro']),\n    fn() => User::factory()->create(['first_name' => 'Luke', 'last_name' => 'Downing']),\n    fn() => User::factory()->create(['first_name' => 'Freek', 'last_name' => 'Van Der Herten']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Pest PHP Architecture Testing\nDESCRIPTION: Demonstrates how to use wildcards in the expect() method to match code in multiple namespaces, introduced in Pest 3.8. This allows for more flexible architecture rules.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_52\n\nLANGUAGE: php\nCODE:\n```\narch()\n    ->expect('App\\*\\Traits') // All code within any App\\*\\Traits namespace, e.g. App\\Models\\Traits, etc.\n    ->toBeTraits();\n\narch()\n    ->expect('App\\*\\*\\Traits') // All code within any App\\*\\*\\Traits namespace, e.g. App\\A\\B\\Traits, App\\C\\D\\Traits, etc.\n    ->toBeTraits();\n```\n\n----------------------------------------\n\nTITLE: Running Tests by Group in Pest PHP\nDESCRIPTION: Demonstrates how to run tests belonging to specific groups using the --group option.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --group=integration,browser\n```\n\n----------------------------------------\n\nTITLE: Grouping a Describe Block in Pest PHP\nDESCRIPTION: This example demonstrates how to assign an entire describe block and all of its tests to a specific group by chaining the group() method to the describe function.\nSOURCE: https://github.com/pestphp/docs/blob/master/grouping-tests.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndescribe('home', function () {\n    test('main page', function () {\n        //\n    });\n})->group('feature');\n```\n\n----------------------------------------\n\nTITLE: Marking Tests as Failed with fail() Method in PHP\nDESCRIPTION: This snippet shows how to explicitly mark a test as failed using the fail() method. This is useful when you need to manually trigger a test failure.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nit('fail', function () {\n    $this->fail();\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Datasets with Closures in Pest PHP\nDESCRIPTION: Demonstrates the use of complex datasets including closures in Pest PHP. It's important to declare argument types in the closure passed to the test function.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nit('can sum', function (int $a, int $b, int $result) {\n    expect(sum($a, $b))->toBe($result);\n})->with([\n    'positive numbers' => [1, 2, 3],\n    'negative numbers' => [-1, -2, -3],\n    'using closure' => [fn () => 1, 2, 3],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using toExtend() Expectation in Pest PHP\nDESCRIPTION: Example of using the toExtend() method to ensure all classes within a given namespace extend a specific class.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Models')\n    ->toExtend('Illuminate\\Database\\Eloquent\\Model');\n```\n\n----------------------------------------\n\nTITLE: Skipping a Test with Reason in Pest PHP\nDESCRIPTION: Shows how to skip a test using the skip() method while providing a reason for skipping.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->skip('temporarily unavailable');\n```\n\n----------------------------------------\n\nTITLE: Restricting Class Usage with toOnlyBeUsedIn in PHP\nDESCRIPTION: Limits where specific classes can be used, enforcing architectural layers and preventing improper dependencies across the application.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\narch('models')\n    ->expect('App\\Models')\n    ->toOnlyBeUsedIn('App\\Repositories');\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test File in Pest PHP\nDESCRIPTION: Example of running a specific test file using Pest PHP's CLI command.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest tests/Unit/TestExample.php\n```\n\n----------------------------------------\n\nTITLE: Assigning a Whole File to a Group in Pest PHP\nDESCRIPTION: This snippet shows how to assign all tests in a file to a specific group using the pest()->group() method at the top of the file.\nSOURCE: https://github.com/pestphp/docs/blob/master/grouping-tests.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npest()->group('feature');\n\nit('has home', function () {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Using after Method for Test-Specific Cleanup in Pest PHP\nDESCRIPTION: The after method allows for performing cleanup tasks specific to a single test, rather than applying to all tests in the file. It's chained to an individual test.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nit('may be created', function () {\n    $this->userRepository->create();\n\n    expect($user)->toBeInstanceOf(User::class);\n})->after(function () {\n    $this->userRepository->reset();\n});\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing of Array Data in PHP with Pest\nDESCRIPTION: An example showing how to create snapshots for array data structures. This demonstrates that snapshots can be used with any data type, not just HTTP responses.\nSOURCE: https://github.com/pestphp/docs/blob/master/snapshot-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$array = /** Fetch array somewhere */;\n\nexpect($array)->toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Verifying Method Existence with toHaveMethod in PHP\nDESCRIPTION: Tests that a specific class has a required method, ensuring the expected API is maintained and preventing accidental method removal.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Http\\Controllers\\HomeController')\n    ->toHaveMethod('index');\n```\n\n----------------------------------------\n\nTITLE: Assigning an Individual Test to a Group in Pest PHP\nDESCRIPTION: This example demonstrates how to assign a single test to a specific group by chaining the group() method to the test function.\nSOURCE: https://github.com/pestphp/docs/blob/master/grouping-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->group('feature');\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Preset for Architecture Testing in Pest PHP\nDESCRIPTION: Applies predefined Laravel-specific architectural expectations to ensure adherence to Laravel conventions and best practices.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_46\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->laravel();\n```\n\n----------------------------------------\n\nTITLE: Using toBeFinal() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeFinal() method to ensure all classes within a given namespace are final.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\ValueObjects')\n    ->toBeFinal();\n```\n\n----------------------------------------\n\nTITLE: Running Tests from a Specific Group with Pest PHP\nDESCRIPTION: This bash command shows how to execute tests that belong to a specific group (in this case, 'feature') using the --group option.\nSOURCE: https://github.com/pestphp/docs/blob/master/grouping-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --group=feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Case for Specific Folder in Pest PHP\nDESCRIPTION: This snippet shows how to associate a specific folder with a custom test case class using the pest()->extend() method and in() method in the Pest.php configuration file.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// tests/Pest.php\npest()->extend(Tests\\TestCase::class)->in('Feature');\n\n// tests/Feature/ExampleTest.php\nit('has home', function () {\n    echo get_class($this); // \\Tests\\TestCase\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Custom Expectations in PHP for Pest\nDESCRIPTION: Illustrates how to enable chaining of custom expectations by returning $this at the end of the expectation function.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-expectations.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nexpect()->extend('toBeWithinRange', function (int $min, int $max) {\n    // Assertions based on `$this->value` and the given arguments...\n\n    return $this; // Return this, so another expectations can chain this one...\n});\n\ntest('numeric ranges', function () {\n    expect(100)\n        ->toBeInt()\n        ->toBeWithinRange(90, 110)\n        ->to...;\n});\n```\n\n----------------------------------------\n\nTITLE: Enforcing Naming Conventions with toHaveSuffix in PHP\nDESCRIPTION: Ensures that all files within a namespace follow a specific naming suffix convention, such as controllers ending with 'Controller'.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_31\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Http\\Controllers')\n    ->toHaveSuffix('Controller');\n```\n\n----------------------------------------\n\nTITLE: Assigning a Test to Multiple Groups in Pest PHP\nDESCRIPTION: This snippet shows how to assign a test to multiple groups by passing multiple arguments to the group() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/grouping-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->group('feature', 'browser');\n```\n\n----------------------------------------\n\nTITLE: Using Security Preset for Architecture Testing in Pest PHP\nDESCRIPTION: Applies predefined security expectations to your project, preventing the use of functions that could lead to security vulnerabilities.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_45\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->security();\n```\n\n----------------------------------------\n\nTITLE: Traditional Multiple Expectations in Pest PHP\nDESCRIPTION: Multiple separate expectations for testing different properties and methods.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nexpect($user->name)->toBe('Nuno');\nexpect($user->surname)->toBe('Maduro');\nexpect($user->addTitle('Mr.'))->toBe('Mr. Nuno Maduro');\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Test Files with Custom Test Cases in Pest PHP\nDESCRIPTION: This snippet shows how to associate a specific test file with a custom test case class using pest()->extend() without the in() method, applying the configuration only to that file.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npest()->extend(Tests\\MySpecificTestCase::class);\n\nit('has home', function () {\n    echo get_class($this); // \\Tests\\MySpecificTestCase\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Data in Snapshots with Expectation Pipes in PHP\nDESCRIPTION: This example shows how to create a custom pipe to handle dynamic data in snapshots. It uses regex to replace a CSRF token value with a static value before comparing with the snapshot.\nSOURCE: https://github.com/pestphp/docs/blob/master/snapshot-testing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nexpect()->pipe('toMatchSnapshot', function (Closure $next) {\n    if (is_string($this->value)) {\n        $this->value = preg_replace(\n            '/name=\"_token\" value=\".*\"/',\n            'name=\"_token\" value=\"my_test\"',\n            $this->value\n        );\n    }\n\n    return $next();\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting Public Methods with toHavePublicMethodsBesides in PHP\nDESCRIPTION: Ensures a class doesn't have any public methods besides the specified ones, helping maintain a controlled and intentional public API.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Services\\PaymentService')\n    ->not->toHavePublicMethodsBesides(['charge', 'refund']);\n```\n\n----------------------------------------\n\nTITLE: Restricting Interface Implementations with toOnlyImplement in PHP\nDESCRIPTION: Ensures classes only implement specific interfaces, preventing unintended interface implementations that could violate architectural boundaries.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Responses')\n    ->toOnlyImplement('Illuminate\\Contracts\\Support\\Responsable');\n```\n\n----------------------------------------\n\nTITLE: Assigning Tests Folder to a Group in Pest PHP Configuration\nDESCRIPTION: This snippet demonstrates how to assign all tests in the tests/Feature folder to a group named 'feature' within the Pest.php configuration file.\nSOURCE: https://github.com/pestphp/docs/blob/master/grouping-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npest()->extend(TestCase::class)\n    ->group('feature')\n    ->in('Feature');\n```\n\n----------------------------------------\n\nTITLE: Verifying Trait Usage with toUseTrait in PHP\nDESCRIPTION: Tests that all classes within a namespace use a specific trait, ensuring consistent behavior across related classes.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_40\n\nLANGUAGE: php\nCODE:\n```\narch('models')\n    ->expect('App\\Models')\n    ->toUseTrait('Illuminate\\Database\\Eloquent\\SoftDeletes');\n```\n\n----------------------------------------\n\nTITLE: Enforcing Naming Conventions with toHavePrefix in PHP\nDESCRIPTION: Ensures that all files within a namespace follow a specific naming prefix convention, maintaining consistent naming standards.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Helpers')\n    ->not->toHavePrefix('Helper');\n```\n\n----------------------------------------\n\nTITLE: Using Closure for Interception Condition in PHP for Pest\nDESCRIPTION: Shows how to use a closure as the condition for intercepting an expectation, allowing for more complex logic in determining when to override the core expectation.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-expectations.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nexpect()->intercept('toBe', fn (mixed $value) => is_string($value), function (string $expected, bool $ignoreCase = false) {\n    if ($ignoreCase) {\n        assertEqualsIgnoringCase($expected, $this->value);\n    } else {\n        assertSame($expected, $this->value);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Trait in Pest Autoload File\nDESCRIPTION: This code demonstrates how to register a custom trait with Pest in the Autoload.php file. This makes the trait's methods available in test closures.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse YourGitHubUsername\\PestPluginName\\MyPluginTrait;\n\nPest\\Plugin::uses(MyPluginTrait::class);\n```\n\n----------------------------------------\n\nTITLE: Higher Order Testing with Expectation API in Pest PHP\nDESCRIPTION: Converting a traditional expectation test to a higher order test using a closure for lazy evaluation.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nit('has a name')\n    ->expect(fn () => User::create(['name' => 'Nuno Maduro'])->name)\n    ->toBe('Nuno Maduro');\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Coverage Threshold in Pest PHP\nDESCRIPTION: Command to run Pest tests with an exact coverage threshold of 99.3%. The test run will fail if the coverage doesn't match this exact value.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-coverage.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --coverage --exactly=99.3\n```\n\n----------------------------------------\n\nTITLE: Using afterAll Hook in Pest PHP\nDESCRIPTION: The afterAll hook executes once after all tests have completed within the current file, allowing for final cleanup tasks. Like beforeAll, the $this variable is not available.\nSOURCE: https://github.com/pestphp/docs/blob/master/hooks.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nafterAll(function () {\n    // Clean testing data after all tests run...\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving DNS Lookup Duration Metrics in PHP\nDESCRIPTION: Shows how to retrieve DNS lookup duration metrics in milliseconds from a stress test result. Includes options for median, minimum, maximum, 90th percentile, and 95th percentile values.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->dnsLookup()->duration()->med();\n                                         // ->min();\n                                         // ->max();\n                                         // ->p90();\n                                         // ->p95();\n```\n\n----------------------------------------\n\nTITLE: Running Compact Type Coverage Analysis\nDESCRIPTION: Command to generate a compact type coverage report that only shows files without 100% type coverage.\nSOURCE: https://github.com/pestphp/docs/blob/master/type-coverage.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --type-coverage --compact\n```\n\n----------------------------------------\n\nTITLE: Multiple Test Dependencies in Pest PHP\nDESCRIPTION: Demonstrates how to add multiple dependencies to a test, where all parent tests must pass. The values returned by each test are available as function parameters in the order of dependencies.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-dependencies.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntest('a', function () {\n    expect(true)->toBeTrue();\n\n    return 'a';\n});\n\ntest('b', function () {\n    expect(true)->toBeTrue();\n\n    return 'b';\n});\n\ntest('c', function () {\n    expect(true)->toBeTrue();\n\n    return 'c';\n});\n\ntest('d', function ($testA, $testC, $testB) {\n    var_dump($testA); // a\n    var_dump($testB); // b\n    var_dump($testC); // c\n})->depends('a', 'b', 'c');\n```\n\n----------------------------------------\n\nTITLE: Named Datasets in Pest PHP\nDESCRIPTION: Illustrates how to use named datasets in Pest PHP. Each dataset value is assigned a key, which Pest uses when generating the test description.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('has emails', function (string $email) {\n    expect($email)->not->toBeEmpty();\n})->with([\n    'james' => 'james@laravel.com',\n    'taylor' => 'taylor@laravel.com',\n]);\n```\n\n----------------------------------------\n\nTITLE: Higher Order Expectations in Pest PHP\nDESCRIPTION: Chaining properties and methods directly to the expect function for cleaner test code.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nexpect($user)\n    ->name->toBe('Nuno')\n    ->surname->toBe('Maduro')\n    ->addTitle('Mr.')->toBe('Mr. Nuno Maduro');\n```\n\n----------------------------------------\n\nTITLE: Ignoring Code Sections from Coverage Analysis in PHP\nDESCRIPTION: Using special PHPDoc annotations to exclude specific code sections from coverage analysis. This is useful for code that cannot be tested.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-coverage.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// @codeCoverageIgnoreStart\nfunction getUsers() {\n    //\n}\n// @codeCoverageIgnoreEnd\n```\n\n----------------------------------------\n\nTITLE: Accessing Expectation Value in Custom PHP Expectation for Pest\nDESCRIPTION: Shows how to access the expectation value directly using $this->value within a custom expectation.\nSOURCE: https://github.com/pestphp/docs/blob/master/custom-expectations.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nexpect()->extend('toBeWithinRange', function (int $min, int $max) {\n    echo $this->value; // 100\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Classes Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Demonstrates the classes() modifier which restricts architecture expectations to only apply to classes, ignoring interfaces, traits, and other code structures.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_55\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->classes()\n    ->toBeFinal();\n```\n\n----------------------------------------\n\nTITLE: Excluding Test Groups in Pest PHP\nDESCRIPTION: Shows how to exclude specific test groups from execution using the --exclude-group option.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --exclude-group=integration,browser\n```\n\n----------------------------------------\n\nTITLE: Defining Hooks for Specific Test Groups in Pest PHP\nDESCRIPTION: This example shows how to define hooks that run before each test within a specific folder ('Feature') and group ('integration'). The hook extends TestCase class and includes database interaction logic.\nSOURCE: https://github.com/pestphp/docs/blob/master/global-hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npest()->extend(TestCase::class)->beforeEach(function () {\n    // Interact with your database...\n})->group('integration')->in('Feature');\n```\n\n----------------------------------------\n\nTITLE: Using only() Method for Specific Test Execution in Pest PHP\nDESCRIPTION: Demonstrates how to use the only() method to run a specific test programmatically.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntest('sum', function () {\n  $result = sum(1, 2);\n\n  expect($result)->toBe(3);\n})->only();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Stress Test Results in PHP\nDESCRIPTION: Examples of methods available to analyze stress test results, including request duration, count, rate, and failure statistics.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->duration()->med();\n```\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->count();\n```\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->failed()->rate();\n```\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->ttfb()->duration()->med();\n```\n\n----------------------------------------\n\nTITLE: Writing Programmatic Stress Tests in Pest PHP\nDESCRIPTION: Example of writing a stress test in PHP using Pest's testing framework with Stressless. The test verifies zero failed requests and checks median response time is under 100ms.\nSOURCE: https://github.com/pestphp/docs/blob/master/announcing-stressless.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('black friday', function () {\n    $result = stress('example.com')\n        ->concurrently(5)\n        ->for(10)->seconds();\n\n    $requests = $result->requests;\n\n    expect($requests->failed->count)\n        ->toBe(0);\n\n    expect($requests->duration->med)\n        ->toBeLessThan(100.0); // 100ms\n});\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Types with toUseStrictTypes in PHP\nDESCRIPTION: Verifies that all files within a namespace use strict type declarations, which helps catch type-related errors during compilation.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_43\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->toUseStrictTypes();\n```\n\n----------------------------------------\n\nTITLE: Using Strict Arch Preset in Pest\nDESCRIPTION: Shows how to use the Strict Arch Preset which enforces strict type declarations and final classes throughout your codebase for more robust code.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->strict();\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests in Pest PHP\nDESCRIPTION: Example of using the --retry option to prioritize and rerun previously failed tests.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --retry\n```\n\n----------------------------------------\n\nTITLE: Example Pest Test After Conversion\nDESCRIPTION: The same test case after being converted to Pest syntax using the Drift plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/migrating-from-phpunit-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ntest('true is true', function () {\n    expect(true)->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Higher Order Testing with Defer Method in Pest PHP\nDESCRIPTION: Using the defer method for lazy evaluation at runtime in higher order testing.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nit('creates admins')\n    ->defer(fn () => $this->artisan('user:create --admin'))\n    ->assertDatabaseHas('users', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Call Count Expectations in PHP Mocks\nDESCRIPTION: Shows how to use atMost() to specify the maximum number of times a method can be called.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$mock->shouldReceive('delete')->atMost()->times(3);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Run Concurrency in PHP\nDESCRIPTION: Shows how to retrieve the number of concurrent requests made during a stress test, which corresponds to the value set using the --concurrency option or the concurrently method.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$result->testRun()->concurrency();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Equality with toUseStrictEquality in PHP\nDESCRIPTION: Verifies that all files within a namespace use strict equality comparisons (===) rather than loose equality (==), preventing subtle bugs.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\narch('models')\n    ->expect('App')\n    ->toUseStrictEquality();\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Architecture Testing Preset in Pest PHP\nDESCRIPTION: Shows how to apply a previously defined custom preset by chaining the preset() method with the name of the custom preset.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_51\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->silex();\n```\n\n----------------------------------------\n\nTITLE: Using toBeInterfaces() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeInterfaces() method to ensure all files within a given namespace are interfaces.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Contracts')\n    ->toBeInterfaces();\n```\n\n----------------------------------------\n\nTITLE: Using Pest Stress Function in PHP Tests\nDESCRIPTION: Example of using the stress() function in a PHP test to verify response time.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Pest\\Stressless\\stress;\n\nit('has a fast response time', function () {\n    $result = stress('example.com');\n\n    expect($result->requests()->duration()->med())->toBeLessThan(100); // < 100.00ms\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Components with Pest\nDESCRIPTION: Example of testing Livewire component functionality using the Pest Livewire plugin's namespaced function.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can be incremented', function () {\n    livewire(Counter::class)\n        ->call('increment')\n        ->assertSee(1);\n});\n\nit('can be decremented', function () {\n    livewire(Counter::class)\n        ->call('decrement')\n        ->assertSee(-1);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Arguments in Pest PHP Datasets\nDESCRIPTION: Shows how to use datasets with multiple arguments in Pest PHP. Each test iteration receives a name and an email address.\nSOURCE: https://github.com/pestphp/docs/blob/master/datasets.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nit('has emails', function (string $name, string $email) {\n    expect($email)->not->toBeEmpty();\n})->with([\n    ['Nuno', 'enunomaduro@gmail.com'],\n    ['Other', 'other@example.com']\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Run Duration in PHP\nDESCRIPTION: Shows how to retrieve the duration of a stress test, which corresponds to the value set using the --duration option or the for()->seconds() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$result->testRun()->duration();\n```\n\n----------------------------------------\n\nTITLE: Preventing All Public Methods with toHavePublicMethods in PHP\nDESCRIPTION: Tests that a class doesn't have any public methods, which can be useful for enforcing certain patterns like DTOs or value objects.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Services\\PaymentService')\n    ->not->toHavePublicMethods();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Rules in Arch Presets\nDESCRIPTION: Shows how to ignore specific rules or classes when using Arch Presets, allowing for exceptions to the predefined architectural rules.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->security()->ignoring('md5');\n\narch()->preset()->laravel()->ignoring(User::class);\n```\n\n----------------------------------------\n\nTITLE: Using the Ignoring Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Shows how to use the ignoring() method to exclude certain namespaces or classes from architecture rules. This is useful for excluding code that would otherwise be included in rule definitions.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_53\n\nLANGUAGE: php\nCODE:\n```\narch()\n    ->preset()\n    ->php()\n    ->ignoring('die');\n\narch()\n    ->expect('Illuminate\\Support\\Facades')\n    ->not->toBeUsed()\n    ->ignoring('App\\Providers');\n```\n\n----------------------------------------\n\nTITLE: Skipping Entire Test File in Pest PHP\nDESCRIPTION: Shows how to skip an entire test file by using the skip() method in the beforeEach() hook.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(function () {\n    //\n})->skip();\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Pest Plugin\nDESCRIPTION: This JSON snippet shows how to configure the composer.json file to autoload the plugin's source code and Autoload.php file.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"YourGitHubUsername\\\\PestPluginName\\\\\": \"src/\"\n    },\n    \"files\": [\"src/Autoload.php\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Architecture Testing Preset in Pest PHP\nDESCRIPTION: Shows how to define a custom preset named 'ddd' with specific expectations for architecture testing. This approach is useful for frequently used expectations or for plugin authors.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_49\n\nLANGUAGE: php\nCODE:\n```\npest()->presets()->custom('ddd', function () {\n    return [\n        expect('Infrastructure')->toOnlyBeUsedIn('Application'),\n        expect('Domain')->toOnlyBeUsedIn('Application'),\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD pipeline for Pest PHP tests\nDESCRIPTION: A GitLab CI/CD pipeline configuration that builds dependencies in one stage and runs Pest tests in another stage. This setup includes caching for composer dependencies and runs on both merge requests and pushes.\nSOURCE: https://github.com/pestphp/docs/blob/master/continuous-integration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - build\n  - test\n  \nbuild:vendors:\n  stage: build\n  only:\n    refs:\n      - merge_requests\n      - push\n  cache:\n    key:\n      files:\n        - composer.lock\n    policy: pull-push\n  image: composer:2\n  script:\n    - composer install --no-interaction --prefer-dist --optimize-autoloader\n      \ntests:\n  stage: test\n  only:\n    refs:\n      - merge_requests\n      - push\n  cache:\n    key:\n      files:\n        - composer.lock\n    policy: pull\n  image: php:8.2\n  script:\n    - ./vendor/bin/pest --ci\n```\n\n----------------------------------------\n\nTITLE: Using toHaveFileSystemPermissions() Expectation in Pest PHP\nDESCRIPTION: Example of using the toHaveFileSystemPermissions() method to ensure all files within a given namespace have specific file system permissions.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->not->toHaveFileSystemPermissions('0777');\n```\n\n----------------------------------------\n\nTITLE: Restricting Protected Methods with toHaveProtectedMethodsBesides in PHP\nDESCRIPTION: Ensures a class doesn't have any protected methods besides the specified ones, maintaining a controlled inheritance structure.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Services\\PaymentService')\n    ->not->toHaveProtectedMethodsBesides(['doPayment']);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function for Pest Plugin\nDESCRIPTION: This code defines a custom namespaced function for a Pest plugin. Such functions are typically declared in the plugin's Autoload.php file.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourGitHubUsername\\PestPluginName;\n\nfunction myPluginFunction(): void\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using --dirty Option in Pest PHP\nDESCRIPTION: Shows how to run only tests with uncommitted changes using the --dirty option.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --dirty\n```\n\n----------------------------------------\n\nTITLE: Using Different HTTP Methods with Pest Stress Function\nDESCRIPTION: Examples of using various HTTP methods with the stress() function, including optional payloads.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$result = stress('example.com/articles/1')->delete();\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = stress('example.com/articles')->options([\"name\" => \"Nuno\"]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = stress('example.com/articles')->post([\"name\" => \"Nuno\"]);\n```\n\n----------------------------------------\n\nTITLE: Using the After Method for Test-Specific Teardown in Pest 3 PHP\nDESCRIPTION: Shows how to use the new after() method to run a specific teardown callback after a particular test, allowing for more targeted cleanup operations for individual tests.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nit('may list todos', function () {\n    //\n})->after(function () {\n    // This will run after this test only...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chipper CI for Pest PHP tests\nDESCRIPTION: A Chipper CI configuration that sets up a PHP 8.2 environment, installs dependencies, compiles assets with NPM, and runs Pest tests. This pipeline includes setup steps for Laravel applications with automatic handling of paths.\nSOURCE: https://github.com/pestphp/docs/blob/master/continuous-integration.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\n\nenvironment:\n  php: 8.2\n  node: 16\n\n# Optional services\nservices:\n#  - mysql: 8\n#  - redis:\n\n# Build all commits\non:\n   push:\n      branches: .*\n\npipeline:\n  - name: Setup\n    cmd: |\n      cp -v .env.example .env\n      composer install --no-interaction --prefer-dist --optimize-autoloader\n      php artisan key:generate\n\n  - name: Compile Assets\n    cmd: |\n      npm ci --no-audit\n      npm run build\n\n  - name: Test\n    cmd: pest\n```\n\n----------------------------------------\n\nTITLE: Using toBeReadonly() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeReadonly() method to ensure certain classes are immutable and cannot be modified at runtime.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\ValueObjects')\n    ->toBeReadonly();\n```\n\n----------------------------------------\n\nTITLE: Filtering Todos in Pest 3 CLI\nDESCRIPTION: Shows how to view and filter todos using command-line options, including --todos to view all todos, --assignee to filter by team member, and --issue to filter by specific issue number.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --todos --assignee=taylor # or --issue=123\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugin Function in Pest Test\nDESCRIPTION: This example demonstrates how to use a custom plugin function within a Pest test after the plugin has been installed and the function imported.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse function YourGitHubUsername\\PestPluginName\\{myPluginFunction};\n\ntest('plugin example', function () {\n    myPluginFunction();\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Test Coverage for Mutation Testing\nDESCRIPTION: Shows how to improve a test to properly cover the return value by adding assertions that check the actual content returned by the endpoint.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ncovers(TodoController::class);\n\nit('list todos', function () {\n+    Todo::factory()->create(['name' => 'Buy milk']);\n\n-    $this->getJson('/todos')->assertStatus(200);\n+    $this->getJson('/todos')->assertStatus(200)->assertJson([['name' => 'Buy milk']]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Pest Stress Command for Quick URL Testing\nDESCRIPTION: Examples of using the 'stress' command to quickly test a URL with various options like duration and concurrency.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com\n```\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com --duration=5\n```\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com --concurrency=5\n```\n\n----------------------------------------\n\nTITLE: Deferred Conditional Test Skipping in Pest PHP\nDESCRIPTION: Demonstrates how to skip a test using a closure for deferred condition evaluation.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->skip(fn () => DB::getDriverName() !== 'mysql', 'db driver not supported');\n```\n\n----------------------------------------\n\nTITLE: Reporting Options for Pest PHP Tests\nDESCRIPTION: CLI options for customizing test result reporting, including output formatting, color usage, and display of specific test statuses.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--colors <flag>\n--columns <n>\n--columns max\n--stderr\n--no-progress\n--no-results\n--no-output\n--display-incomplete\n--display-skipped\n--display-deprecations\n--display-phpunit-deprecations\n--display-errors\n--display-notices\n--display-warnings\n--reverse-list\n--teamcity\n--testdox\n--testdox-summary\n--debug\n--compact\n```\n\n----------------------------------------\n\nTITLE: Verifying Constructor Existence with toHaveConstructor in PHP\nDESCRIPTION: Tests that all classes within a namespace have a constructor method, which can be important for value objects and other patterns.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\ValueObjects')\n    ->toHaveConstructor();\n```\n\n----------------------------------------\n\nTITLE: Filtering Todos by Pull Request\nDESCRIPTION: Shows how to filter todos by pull request number using CLI command\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --todos --pr=123\n```\n\n----------------------------------------\n\nTITLE: Retrieving TLS Handshaking Duration Metrics in PHP\nDESCRIPTION: Shows how to retrieve TLS handshaking duration metrics in milliseconds from a stress test result. Includes options for median, minimum, maximum, 90th percentile, and 95th percentile values.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->tlsHandshaking()->duration()->med();\n                                              // ->min();\n                                              // ->max();\n                                              // ->p90();\n                                              // ->p95();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Trait for Pest Plugin in PHP\nDESCRIPTION: This snippet shows how to create a custom trait for a Pest plugin. The trait defines a method that will be available in test closures via the $this variable.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourGitHubUsername\\PestPluginName;\n\ntrait MyPluginTrait\n{\n    public function myPluginMethod()\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Test Coverage Example\nDESCRIPTION: Demonstrates how to improve test coverage by adding assertions to detect mutations.\nSOURCE: https://github.com/pestphp/docs/blob/master/mutation-testing.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ncovers(TodoController::class);\n\nit('list todos', function () {\n+    Todo::factory()->create(['name' => 'Buy milk']);\n\n-    $this->getJson('/todos')->assertStatus(200);\n+    $this->getJson('/todos')->assertStatus(200)->assertJson([['name' => 'Buy milk']]);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Namespaces in Custom Arch Preset\nDESCRIPTION: This snippet demonstrates how to access the application's PSR-4 namespaces when defining a custom Arch preset in a Pest plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npest()->preset('silex', function (array $userNamespaces) {\n    dump($userNamespaces); // ['App\\']\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Test Results with Pest PHP\nDESCRIPTION: Command-line options for logging test results in various formats, including JUnit XML, TeamCity, and TestDox.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--log-junit <file>\n--log-teamcity <file>\n--testdox-html <file>\n--testdox-text <file>\n--log-events-text <file>\n--log-events-verbose-text <file>\n--no-logging\n```\n\n----------------------------------------\n\nTITLE: Using toImplementNothing() Expectation in Pest PHP\nDESCRIPTION: Example of using the toImplementNothing() method to ensure all classes within a given namespace do not implement any interface.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\ValueObjects')\n    ->toImplementNothing();\n```\n\n----------------------------------------\n\nTITLE: Verifying Destructor Existence with toHaveDestructor in PHP\nDESCRIPTION: Tests that all classes within a namespace have a destructor method, which may be required for resource management patterns.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\ValueObjects')\n    ->toHaveDestructor();\n```\n\n----------------------------------------\n\nTITLE: Using Localized Faker Data in Pest Tests\nDESCRIPTION: Example of using Pest Faker to generate locale-specific data by providing the desired locale to the fake function.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Faker\\fake;\n\nit('generates a portuguese name', function () {\n    $name = fake('pt_PT')->name; // Nuno Maduro\n\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Methods with toHaveMethods in PHP\nDESCRIPTION: Verifies that a class has a specific set of methods, ensuring the class maintains its expected interface and functionality.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Http\\Controllers\\HomeController')\n    ->toHaveMethods(['index', 'show']);\n```\n\n----------------------------------------\n\nTITLE: Customizing Stress Test Duration and Concurrency in PHP\nDESCRIPTION: Examples of customizing stress test duration and concurrency using the stress() function.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$result = stress('example.com')->for(5)->seconds();\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = stress('example.com')->concurrently(requests: 2)->for(5)->seconds();\n```\n\n----------------------------------------\n\nTITLE: Operating System-Specific Test Skipping in Pest PHP\nDESCRIPTION: Shows how to skip tests on specific operating systems using dedicated methods.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->skipOnWindows(); // or skipOnMac() or skipOnLinux() ...\n```\n\n----------------------------------------\n\nTITLE: Generating Unit Test with Laravel Pest Plugin\nDESCRIPTION: Artisan command to generate a new unit test in the tests/Unit directory using the Pest Laravel plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan pest:test UsersTest --unit\n```\n\n----------------------------------------\n\nTITLE: Limiting Dependencies with toOnlyUse in PHP\nDESCRIPTION: Restricts classes to only use specific namespaces or classes, ensuring clean architectural boundaries and preventing inappropriate dependencies.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\narch('models')\n    ->expect('App\\Models')\n    ->toOnlyUse('Illuminate\\Database');\n```\n\n----------------------------------------\n\nTITLE: Preventing Strict Equality with toUseStrictEquality and not in PHP\nDESCRIPTION: Ensures files don't use strict equality, which might be needed in specific cases where loose type comparisons are preferred.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\narch('models')\n    ->expect('App')\n    ->not->toUseStrictEquality();\n```\n\n----------------------------------------\n\nTITLE: Higher Order Testing with Hooks in Pest PHP\nDESCRIPTION: Converting a traditional hook to a higher order implementation by removing the closure.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach()->withoutMiddleware();\n```\n\n----------------------------------------\n\nTITLE: Marking Todos as Work in Progress or Done in Pest 3 PHP\nDESCRIPTION: Shows how to change the status of a todo to work in progress using the wip() method or mark it as completed using the done() method, with optional assignee and issue parameters.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->wip(assignee: 'taylor@laravel.com', issue: 123); // or ->done()\n```\n\n----------------------------------------\n\nTITLE: Running Pest in Watch Mode\nDESCRIPTION: Command to run Pest tests in watch mode, which will automatically re-run tests when files in the watched directories change.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npest --watch\n```\n\n----------------------------------------\n\nTITLE: Using Relaxed Arch Preset in Pest\nDESCRIPTION: Shows how to use the Relaxed Arch Preset which is the opposite of the strict preset, allowing for more flexible coding patterns.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->relaxed();\n```\n\n----------------------------------------\n\nTITLE: Generating Feature Test with Laravel Pest Plugin\nDESCRIPTION: Artisan command to generate a new feature test in the tests/Feature directory using the Pest Laravel plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan pest:test UsersTest\n```\n\n----------------------------------------\n\nTITLE: Using toBeUsed() Expectation with 'not' Modifier in Pest PHP\nDESCRIPTION: Example of using the toBeUsed() method with 'not' modifier to verify that certain classes or functions are not being utilized by the application.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\narch('globals')\n    ->expect(['dd', 'dump'])\n    ->not->toBeUsed();\n\narch('facades')\n    ->expect('Illuminate\\Support\\Facades')\n    ->not->toBeUsed();\n```\n\n----------------------------------------\n\nTITLE: Using Pest Stress Command with Different HTTP Methods\nDESCRIPTION: Examples of using the 'stress' command with various HTTP methods and optional payloads.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com/articles --get\n```\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com/articles --options='{\"name\": \"Nuno\"}'\n```\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com/articles --post='{\"name\": \"Nuno\"}'\n```\n\n----------------------------------------\n\nTITLE: Using toImplement() Expectation in Pest PHP\nDESCRIPTION: Example of using the toImplement() method to ensure all classes within a given namespace implement a specific interface.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Jobs')\n    ->toImplement('Illuminate\\Contracts\\Queue\\ShouldQueue');\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns with in() Method in Pest PHP\nDESCRIPTION: This snippet demonstrates how to use glob patterns with the in() method to specify multiple directories or files with a single pattern for custom test case configuration.\nSOURCE: https://github.com/pestphp/docs/blob/master/configuring-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// tests/Pest.php\npest()->extend(Tests\\TestCase::class)->in('Feature/*Job*.php');\n\n// This will apply the Tests\\TestCase to all test files in the \"Feature\" directory that contains \"Job\" in their filename.\n```\n\n----------------------------------------\n\nTITLE: Basic Test Example in Pest PHP\nDESCRIPTION: A simple test example using a traditional closure approach in Pest PHP.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('works', function () {\n    $this->get('/')\n        ->assertStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Assertions with Namespaced Functions\nDESCRIPTION: Example of using Laravel's test assertions with Pest's namespaced functions instead of the $this variable.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Laravel\\{get};\n\nit('has a welcome page', function () {\n    get('/')->assertStatus(200);\n    // same as $this->get('/')...\n});\n```\n\n----------------------------------------\n\nTITLE: Using toBeClasses() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeClasses() method to ensure all files within a given namespace are classes.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Models')\n    ->toBeClasses();\n```\n\n----------------------------------------\n\nTITLE: Using toExtendNothing() Expectation in Pest PHP\nDESCRIPTION: Example of using the toExtendNothing() method to ensure all classes within a given namespace do not extend any class.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\ValueObjects')\n    ->toExtendNothing();\n```\n\n----------------------------------------\n\nTITLE: Using toHaveMethodsDocumented() Expectation in Pest PHP\nDESCRIPTION: Example of using the toHaveMethodsDocumented() method to ensure all methods within a given namespace are documented.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->toHaveMethodsDocumented();\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Pattern in Pest PHP\nDESCRIPTION: Example of using the --filter option to run tests matching a specific pattern.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --filter \"test description\"\n```\n\n----------------------------------------\n\nTITLE: Traditional Expectation API Example in Pest PHP\nDESCRIPTION: A test using the traditional expectation API approach with a closure to verify a user was created correctly.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nit('has a name', function () {\n    $user = User::create([\n        'name' => 'Nuno Maduro',\n    ]);\n\n    expect($user->name)->toBe('Nuno Maduro');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugin Method in Pest Test\nDESCRIPTION: This example shows how to use a custom plugin method within a Pest test closure after the plugin has been installed.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ntest('plugin example', function () {\n    $this->myPluginMethod();\n\n    //\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing PSR-4 Namespaces in Custom Presets in Pest PHP\nDESCRIPTION: Demonstrates how to access the application's PSR-4 namespaces when creating a custom preset. The namespaces are provided as the first argument to the callback function.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_50\n\nLANGUAGE: php\nCODE:\n```\npest()->presets()->custom('silex', function (array $userNamespaces) {\n    var_dump($userNamespaces); // array(1) { [0]=> string(3) \"App\" }\n    return [\n        expect($userNamespaces)->toBeArray(),\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing All Private Methods with toHavePrivateMethods in PHP\nDESCRIPTION: Tests that a class doesn't have any private methods, which can be useful for enforcing specific architectural patterns where private methods are discouraged.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Services\\PaymentService')\n    ->not->toHavePrivateMethods();\n```\n\n----------------------------------------\n\nTITLE: Using toHaveAttribute() Expectation in Pest PHP\nDESCRIPTION: Example of using the toHaveAttribute() method to ensure a certain class has a specific attribute.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Console\\Commands')\n    ->toHaveAttribute('Symfony\\Component\\Console\\Attribute\\AsCommand');\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots Using Pest CLI Command\nDESCRIPTION: This command demonstrates how to update all snapshots using the Pest CLI. This is useful when you intentionally change the output and need to update the baseline snapshots.\nSOURCE: https://github.com/pestphp/docs/blob/master/snapshot-testing.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Preventing All Dependencies with toUseNothing in PHP\nDESCRIPTION: Ensures classes don't have any dependencies, which can be useful for value objects and other simple data structures that should be self-contained.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_42\n\nLANGUAGE: php\nCODE:\n```\narch('value objects')\n    ->expect('App\\ValueObjects')\n    ->toUseNothing();\n```\n\n----------------------------------------\n\nTITLE: Accessing TestCase in Custom Plugin Function\nDESCRIPTION: This snippet shows how to access the current TestCase instance within a custom plugin function, which is equivalent to the $this variable in test closures.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourGitHubUsername\\PestPluginName;\n\nuse PHPUnit\\Framework\\TestCase;\n\nfunction myPluginFunction(): TestCase\n{\n    return test(); // Same as `return $this;`\n}\n```\n\n----------------------------------------\n\nTITLE: Using toBeAbstract() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeAbstract() method to ensure all classes within a given namespace are abstract.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Models')\n    ->toBeAbstract();\n```\n\n----------------------------------------\n\nTITLE: Configuring Project URL for Team Management in Pest 3 PHP\nDESCRIPTION: Specifies the project's GitHub URL in the Pest.php configuration file to enable team management features. This URL links todos to the corresponding project management system.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npest()->project()->github('my-organization/my-repository');\n```\n\n----------------------------------------\n\nTITLE: Testing Line Count Constraints with toHaveLineCountLessThan in PHP\nDESCRIPTION: Ensures that all files within a given namespace have a line count less than a specified value, which helps maintain code readability and prevents excessive file sizes.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Models')\n    ->toHaveLineCountLessThan(100);\n```\n\n----------------------------------------\n\nTITLE: Example of Untested Mutation Diff in Pest\nDESCRIPTION: Shows a diff output of an untested mutation detected by Pest, where a method's return value was changed but the test still passed, indicating insufficient test coverage.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nUNTESTED  app/Http/TodoController.php  > Line 44: ReturnValue - ID: 76d17ad63bb7c307\n\nclass TodoController {\n    public function index(): array\n    {\n         // pest detected that this code is untested because\n         // the test is not covering the return value\n-        return Todo::all()->toArray();\n+        return [];\n    }\n}\n\n  Mutations: 1 untested\n  Score:     33.44%\n```\n\n----------------------------------------\n\nTITLE: Using toBeIntBackedEnums() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeIntBackedEnums() method to ensure all enums within a specified namespace are int-backed.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Enums')\n    ->toBeIntBackedEnums();\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Coverage with Pest PHP\nDESCRIPTION: Shows how to specify which part of your code is covered by a test using the covers() function. This allows Pest to track test coverage for mutation testing.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncovers(TodoController::class);\n\nit('list todos', function () {\n    $this->getJson('/todos')->assertStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting Private Methods with toHavePrivateMethodsBesides in PHP\nDESCRIPTION: Ensures a class doesn't have any private methods besides the specified ones, helping maintain a clean and consistent API design.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Services\\PaymentService')\n    ->not->toHavePrivateMethodsBesides(['doPayment']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo with Assignee and Issue in Pest 3 PHP\nDESCRIPTION: Creates a todo for a test case using the todo() method with optional assignee and issue arguments to track and assign work to team members and link to issues in your project management system.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo(assignee: 'taylor@laravel.com', issue: 123);\n```\n\n----------------------------------------\n\nTITLE: Using toBeStringBackedEnums() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeStringBackedEnums() method to ensure all enums within a specified namespace are string-backed.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Enums')\n    ->toBeStringBackedEnums();\n```\n\n----------------------------------------\n\nTITLE: Updating Global Assertions to Use $this or Expectations\nDESCRIPTION: Demonstrates how to update code that used global assertions to either use $this or the Expectation API in Pest 2, after removing the Global Assertions Plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\ntest('sum', function () {\n    $result = sum(1, 2);\n\n-   assertSame(3, $result);\n+   $this->assertSame(3, $result); // or expect($result)->toBe(3)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Todo Test in Pest\nDESCRIPTION: Demonstrates how to create a basic todo test using the todo() method\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo();\n```\n\n----------------------------------------\n\nTITLE: Using the After Hook for Specific Tests in Pest 3 PHP\nDESCRIPTION: Demonstrates how to use the new after() method to run a specific teardown callback after a particular test, allowing for more granular cleanup compared to the global afterEach() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nafterEach(function () {\n    // This will run after each test...\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Extending Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Demonstrates the extending() modifier which restricts architecture expectations to only classes or interfaces that extend a specific class. This example checks if Model classes use the HasFactory trait.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_59\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->extending(Model::class)\n    ->toUseTrait(HasFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Arch Preset in Pest\nDESCRIPTION: Shows how to use the Laravel Arch Preset which ensures your project structure follows Laravel conventions regarding controller naming, method signatures, etc.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->laravel();\n```\n\n----------------------------------------\n\nTITLE: Preventing Specific Dependencies with toUse and not in PHP\nDESCRIPTION: Ensures classes don't use specific functions or namespaces, which can help prevent architectural violations like using global helper functions.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_37\n\nLANGUAGE: php\nCODE:\n```\narch('globals')\n    ->expect('App\\Domain')\n    ->not->toUse('request');\n\narch('globals')\n    ->expect('App\\Domain')\n    ->not->toUse('Illuminate\\Http');\n```\n\n----------------------------------------\n\nTITLE: Using --bail Option in Pest PHP\nDESCRIPTION: Demonstrates how to use the --bail option to stop test execution on the first failure or error.\nSOURCE: https://github.com/pestphp/docs/blob/master/filtering-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --bail\n```\n\n----------------------------------------\n\nTITLE: Using toBeTraits() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeTraits() method to ensure all files within a given namespace are traits.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Concerns')\n    ->toBeTraits();\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Type Coverage Plugin via Composer\nDESCRIPTION: Command to install the Pest Type Coverage plugin as a development dependency using Composer.\nSOURCE: https://github.com/pestphp/docs/blob/master/type-coverage.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-type-coverage --dev\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Assertions with $this in Pest\nDESCRIPTION: Example of using Laravel's built-in test assertions with the $this variable in a Pest test.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nit('has a welcome page', function () {\n    $this->get('/')->assertStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Default Watch Directories in Pest Watch Plugin\nDESCRIPTION: The default directories that are monitored by the Pest Watch plugin for file changes.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_14\n\nLANGUAGE: plain\nCODE:\n```\ntests/\napp/\nsrc/\n```\n\n----------------------------------------\n\nTITLE: Using the Relaxed Preset in Pest PHP Architecture Testing\nDESCRIPTION: Demonstrates how to apply the 'relaxed' preset, which ensures files don't use strict types and classes aren't final. This preset is not coupled with any framework or library.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_48\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->relaxed();\n```\n\n----------------------------------------\n\nTITLE: Example PHPUnit Test Before Conversion\nDESCRIPTION: An example of a typical PHPUnit test case before conversion to Pest syntax.\nSOURCE: https://github.com/pestphp/docs/blob/master/migrating-from-phpunit-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Unit;\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_that_true_is_true(): void\n    {\n        $this->assertTrue(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Hook Example in Pest PHP\nDESCRIPTION: A typical beforeEach hook implementation using a closure.\nSOURCE: https://github.com/pestphp/docs/blob/master/higher-order-testing.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nbeforeEach(function () {\n    $this->withoutMiddleware();\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Type Errors with Pest Annotations\nDESCRIPTION: Example of using the @pest-ignore-type annotation to exclude specific code from type coverage analysis.\nSOURCE: https://github.com/pestphp/docs/blob/master/type-coverage.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    protected $except = [ // @pest-ignore-type\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Watch Plugin via Composer\nDESCRIPTION: Command to install the Pest Watch plugin which provides automatic test re-running when files change.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-watch --dev\n```\n\n----------------------------------------\n\nTITLE: Assigning Todo to Team Member\nDESCRIPTION: Shows how to assign a todo to a specific team member using the assignee parameter\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo(assignee: 'nunomaduro');\n```\n\n----------------------------------------\n\nTITLE: Using the Enums Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Shows the enums() modifier which restricts architecture expectations to only apply to enums, excluding other code structures like classes and interfaces.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_56\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Models')\n    ->enums()\n    ->toOnlyBeUsedIn('App\\Models');\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Testing CLI Options in Pest PHP\nDESCRIPTION: Lists various command-line options for running mutation testing with Pest PHP. These options allow developers to customize how mutation testing is executed, including running tests in parallel, setting minimum scores, filtering classes, and controlling execution flow.\nSOURCE: https://github.com/pestphp/docs/blob/master/cli-api-reference.md#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--mutate\n--mutate --parallel\n--mutate --min\n--mutate --id\n--mutate --covered-only\n--mutate --bail\n--mutate --class\n--mutate --ignore\n--mutate --clear-cache\n--mutate --no-cache\n--mutate --ignore-min-score-on-zero-mutations\n--mutate --covered-only\n--mutate --everything\n--mutate --profile\n--mutate --retry\n--mutate --stop-on-uncovered\n--mutate --stop-on-untested\n```\n\n----------------------------------------\n\nTITLE: Handling Argument Mismatches in PHP Mocks\nDESCRIPTION: Illustrates what happens when a mocked method is called with arguments that don't match the expectations, resulting in a NoMatchingExpectationException.\nSOURCE: https://github.com/pestphp/docs/blob/master/mocking.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$client->shouldReceive('post')->with(1);\n\n$client->post(2); // fails, throws a `NoMatchingExpectationException`\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Type Coverage Report\nDESCRIPTION: Command to run type coverage analysis with a minimum threshold requirement and output the results to a JSON file.\nSOURCE: https://github.com/pestphp/docs/blob/master/type-coverage.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --type-coverage --min=100 --type-coverage-json=my-report.json\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Laravel Plugin via Composer\nDESCRIPTION: Command to install the Pest Laravel plugin which provides Laravel-specific testing utilities and commands.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-laravel --dev\n```\n\n----------------------------------------\n\nTITLE: Adding Notes to Todo\nDESCRIPTION: Shows how to add detailed notes to a todo using heredoc syntax\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo(note: <<<NOTE\n    Given I am a user\n    When I visit the contact page\n    Then I should see a contact form\nNOTE);\n```\n\n----------------------------------------\n\nTITLE: Using Security Arch Preset in Pest\nDESCRIPTION: Shows how to use the Security Arch Preset which enforces security best practices by preventing usage of functions that could lead to security vulnerabilities.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->security();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Pest Stress Function\nDESCRIPTION: Example of setting custom headers for the stress test using the headers() method.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = stress('example.com/articles')->headers([\n    'Authorization' => 'Bearer SecretToken',\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum Type Coverage in Pest\nDESCRIPTION: Demonstrates how to enforce a minimum type coverage percentage when running the type coverage command.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n  ...\n  app/Models\\User.php .......................................................... 100%\n  app/Repositories/UserRepository.php .................................. pa8, rt8 33%\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n                                                                        Total: 91.6 %\n   ERROR  Type coverage below expected: 91.6%. Minimum: 100.0% \n```\n\n----------------------------------------\n\nTITLE: Running Mutation Tests with Pest CLI\nDESCRIPTION: Command line instructions for running mutation tests, including parallel execution option.\nSOURCE: https://github.com/pestphp/docs/blob/master/mutation-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --mutate\n# or in parallel...\n./vendor/bin/pest --mutate --parallel\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset with Laravel Pest Plugin\nDESCRIPTION: Artisan command to create a new dataset file in the tests/Datasets directory for use in Pest tests.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan pest:dataset Emails\n```\n\n----------------------------------------\n\nTITLE: Skipping a Test in Pest PHP\nDESCRIPTION: Demonstrates how to skip a test using the skip() method without providing a reason.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function () {\n    //\n})->skip();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Arch Preset in Pest Plugin\nDESCRIPTION: This code shows how to define a custom Arch preset within a Pest plugin's Autoload.php file. It sets up expectations for a Domain-Driven Design (DDD) architecture.\nSOURCE: https://github.com/pestphp/docs/blob/master/creating-plugins.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npest()->preset('ddd', function () {\n    return [\n        expect('Infrastructure')->toOnlyBeUsedIn('Application'),\n        expect('Domain')->toOnlyBeUsedIn('Application'),\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Ignores in Pest PHP Architecture Testing\nDESCRIPTION: Shows how to configure global ignores for architecture testing by using beforeEach in the Pest.php file. This example excludes Laravel's Illuminate namespace and global functions.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n// tests/Pest.php\npest()->beforeEach(function () {\n    $this->arch()->ignore([\n        'Illuminate',\n    ])->ignoreGlobalFunctions();\n});\n```\n\n----------------------------------------\n\nTITLE: Using toHavePropertiesDocumented() Expectation in Pest PHP\nDESCRIPTION: Example of using the toHavePropertiesDocumented() method to ensure all properties within a given namespace are documented.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->toHavePropertiesDocumented();\n```\n\n----------------------------------------\n\nTITLE: Updating Collision Dependency for Laravel Projects\nDESCRIPTION: Shows how to update the Collision dependency from version 7.0 to 8.0 when upgrading to Pest 3 in Laravel projects. Note that Laravel 11 is required for this version.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-    \"nunomaduro/collision\": \"^7.0\",\n+    \"nunomaduro/collision\": \"^8.0\",\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum Type Coverage Threshold\nDESCRIPTION: Command to run type coverage analysis with a minimum threshold requirement of 100%, causing a failure if not met.\nSOURCE: https://github.com/pestphp/docs/blob/master/type-coverage.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --type-coverage --min=100\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Faker Plugin via Composer\nDESCRIPTION: Command to install the Pest Faker plugin which allows generating fake test data.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-faker --dev\n```\n\n----------------------------------------\n\nTITLE: Running Type Coverage Analysis in Pest\nDESCRIPTION: Command to generate a type coverage report for your PHP codebase using the Pest Type Coverage plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/type-coverage.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --type-coverage\n```\n\n----------------------------------------\n\nTITLE: Updating Pest Laravel Plugin for Pest 2\nDESCRIPTION: Shows how to update the Pest Laravel plugin dependency from version 1.4 to 2.0 when upgrading to Pest 2.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-    \"pestphp/pest-plugin-laravel\": \"^1.4\",\n+    \"pestphp/pest-plugin-laravel\": \"^2.0\",\n```\n\n----------------------------------------\n\nTITLE: Running Type Coverage in Pest\nDESCRIPTION: Example of the output produced when running the type coverage command, showing which files lack proper type declarations.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n...\napp/Models\\User.php .......................................... 100%\napp/Repositories/UserRepository.php .................. pa8, rt8 33%\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nTotal: 91.6 %\n```\n\n----------------------------------------\n\nTITLE: Updating Collision Dependency for Laravel Projects (Pest 2)\nDESCRIPTION: Demonstrates how to update the Collision dependency for Laravel projects when upgrading to Pest 2. Laravel 10 is required for this version.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-    \"nunomaduro/collision\": \"^6.0\",\n+    \"nunomaduro/collision\": \"^7.0\",\n```\n\n----------------------------------------\n\nTITLE: Executing Pest PHP Mutation Testing with Stop on Untested Flag\nDESCRIPTION: Command to run Pest PHP mutation testing that will stop execution when it encounters the first untested mutation. This is useful for quickly identifying gaps in test coverage without running the entire mutation testing suite.\nSOURCE: https://github.com/pestphp/docs/blob/master/mutation-testing.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --mutate --stop-on-untested\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Livewire Plugin via Composer\nDESCRIPTION: Command to install the Pest Livewire plugin which provides utilities for testing Livewire components.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-livewire --dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Download Duration Metrics in PHP\nDESCRIPTION: Shows how to retrieve request download duration metrics in milliseconds from a stress test result. Includes options for median, minimum, maximum, 90th percentile, and 95th percentile values.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->download()->duration()->med();\n                                        // ->min();\n                                        // ->max();\n                                        // ->p90();\n                                        // ->p95();\n```\n\n----------------------------------------\n\nTITLE: Removing PHPUnit Dependency for Pest 2\nDESCRIPTION: Shows how to remove the direct PHPUnit dependency from composer.json when upgrading to Pest 2, as PHPUnit is now included with Pest.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-    \"phpunit/phpunit\": \"^9.5.10\",\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed Notes to a Todo in Pest 3 PHP\nDESCRIPTION: Adds additional context to a todo using the note argument of the todo() method. This provides more detailed information about what needs to be done in a Gherkin-like format.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo(note: <<<NOTE\n    Given I am a user\n    When I visit the contact page\n    Then I should see a contact form\nNOTE);\n```\n\n----------------------------------------\n\nTITLE: Updating Bound Datasets with Type Hints\nDESCRIPTION: Demonstrates how to update code using bound datasets in Pest 2, which now requires type hinting for the corresponding test parameter when binding a single dataset argument.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-it('can generate the full name of a user', function ($user, $fullName) {\n+it('can generate the full name of a user', function (User $user, $fullName) {\n    expect($user->full_name)->toBe($fullName);\n})->with([\n    [fn() => User::factory()->create(['first_name' => 'Nuno', 'last_name' => 'Maduro']), 'Nuno Maduro'],\n    [fn() => User::factory()->create(['first_name' => 'Luke', 'last_name' => 'Downing']), 'Luke Downing'],\n    [fn() => User::factory()->create(['first_name' => 'Freek', 'last_name' => 'Van Der Herten']), 'Freek Van Der Herten'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using PHP Arch Preset in Pest\nDESCRIPTION: Shows how to use the PHP Arch Preset which provides predefined architecture testing rules for PHP projects, checking for problematic functions like die and var_dump.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\narch()->preset()->php();\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Coverage Threshold in Pest PHP\nDESCRIPTION: Command to run Pest tests with a minimum coverage threshold of 90%. If the coverage is below this value, the test run will fail.\nSOURCE: https://github.com/pestphp/docs/blob/master/test-coverage.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --coverage --min=90\n```\n\n----------------------------------------\n\nTITLE: Retrieving Download Data Count in PHP\nDESCRIPTION: Shows how to retrieve the total amount of downloaded data in bytes from a stress test result.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->download()->data()->count();\n```\n\n----------------------------------------\n\nTITLE: Removing Parallel Plugin Dependencies\nDESCRIPTION: Shows how to remove the Parallel Plugin and Paratest dependencies when upgrading to Pest 2, as parallel testing functionality is now included in Pest by default.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-    \"brianium/paratest\": \"^6.8.1\",\n-    \"pestphp/pest-plugin-parallel\": \"^1.2.1\",\n```\n\n----------------------------------------\n\nTITLE: Using the Interfaces Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Demonstrates the interfaces() modifier which restricts architecture expectations to only apply to interfaces, excluding classes, traits, and other code structures.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_57\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->interfaces()\n    ->toExtend('App\\Contracts\\Contract');\n```\n\n----------------------------------------\n\nTITLE: Example of Untyped Repository Method\nDESCRIPTION: An example of a method missing type declarations that would be flagged by Pest's type coverage plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function find($id)\n{\n    return User::find($id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Drift Plugin with Composer\nDESCRIPTION: Command to install the pestphp/pest-plugin-drift package as a dev dependency using Composer.\nSOURCE: https://github.com/pestphp/docs/blob/master/migrating-from-phpunit-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-drift --dev\n```\n\n----------------------------------------\n\nTITLE: Replacing tap() with defer() for High Order Testing\nDESCRIPTION: Shows how to replace the deprecated tap() method with the newer defer() method in high-order testing when upgrading from Pest 1 to Pest 2.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nit('creates admins')\n-    ->tap(fn () => $this->artisan('user:create --admin'))\n+    ->defer(fn () => $this->artisan('user:create --admin'))\n     ->assertDatabaseHas('users', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upload Duration Metrics in PHP\nDESCRIPTION: Shows how to retrieve request upload duration metrics in milliseconds from a stress test result. Includes options for median, minimum, maximum, 90th percentile, and 95th percentile values.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->upload()->duration()->med();\n                                      // ->min();\n                                      // ->max();\n                                      // ->p90();\n                                      // ->p95();\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Todo Features\nDESCRIPTION: Shows how to combine various todo features including assignees, issues, and PRs in a test group\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndescribe('contacts', function () {\n    it('has a contact page', function () {\n        //\n    }))->issue(123); // or ->pr(123) etc\n    \n    it('has a contact form', function () {\n        //\n    })->done(pr: 567);\n})->wip(assignee: 'nunomaduro');\n```\n\n----------------------------------------\n\nTITLE: Using the Traits Modifier in Pest PHP Architecture Testing\nDESCRIPTION: Shows the traits() modifier which restricts architecture expectations to only apply to traits, excluding classes, interfaces, and other code structures.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_58\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App')\n    ->traits()\n    ->toExtend('App\\Traits\\Trait');\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots in Pest Testing\nDESCRIPTION: Command to rebuild all snapshots when intentional changes have been made to the expected output.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Converted Pest Test After Using Drift Plugin\nDESCRIPTION: Shows how the PHPUnit test is automatically converted to Pest format after running the Drift command.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ntest('true is true', function () {\n    expect(true)->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Faker Plugin Function Name\nDESCRIPTION: Shows how to update code that uses the Faker Plugin when upgrading to Pest 2, as the faker() function has been renamed to fake().\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- use function Pest\\Faker\\faker;\n+ use function Pest\\Faker\\fake;\n\ntest('faker', function () {\n-   expect(faker()->name())->toBeString();\n+   expect(fake()->name())->toBeString();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upload Data Count in PHP\nDESCRIPTION: Shows how to retrieve the total amount of uploaded data in bytes from a stress test result.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->upload()->data()->count();\n```\n\n----------------------------------------\n\nTITLE: Configuring Project URL in Pest PHP\nDESCRIPTION: Sets up the project URL in Pest.php configuration file to link todos with project management system\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npest()->project()->github('my-organization/my-repository');\n```\n\n----------------------------------------\n\nTITLE: Using toBeInvokable() Expectation in Pest PHP\nDESCRIPTION: Example of using the toBeInvokable() method to ensure all files within a given namespace are invokable.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Actions')\n    ->toBeInvokable();\n```\n\n----------------------------------------\n\nTITLE: Linking Todo to Pull Request\nDESCRIPTION: Demonstrates how to link a todo to a specific pull request\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo(pr: 123);\n```\n\n----------------------------------------\n\nTITLE: Original PHPUnit Test Example\nDESCRIPTION: An example of a traditional PHPUnit test that can be converted to Pest format using the Drift plugin.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest-spicy-summer-release.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Unit;\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_that_true_is_true(): void\n    {\n        $this->assertTrue(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pest Laravel Plugin Dependency\nDESCRIPTION: Demonstrates how to update the Pest Laravel plugin dependency in composer.json from version 2.0 to 3.0 when upgrading to Pest 3.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-    \"pestphp/pest-plugin-laravel\": \"^2.0\",\n+    \"pestphp/pest-plugin-laravel\": \"^3.0\",\n```\n\n----------------------------------------\n\nTITLE: Linking Todo to Issue\nDESCRIPTION: Shows how to link a todo to a specific issue number\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->todo(issue: 123);\n```\n\n----------------------------------------\n\nTITLE: Marking Todo as Work in Progress\nDESCRIPTION: Demonstrates how to mark a todo as work in progress while maintaining context\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->wip(assignee: 'nunomaduro', issue: 123);\n```\n\n----------------------------------------\n\nTITLE: Using toBeUsedIn() Expectation with 'not' Modifier in Pest PHP\nDESCRIPTION: Example of using the toBeUsedIn() method with 'not' modifier to restrict specific classes and functions from being used within a given namespace.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\narch('globals')\n    ->expect('request')\n    ->not->toBeUsedIn('App\\Domain');\n\narch('globals')\n    ->expect('Illuminate\\Http')\n    ->not->toBeUsedIn('App\\Domain');\n```\n\n----------------------------------------\n\nTITLE: Listing Todos Command in Pest\nDESCRIPTION: Shows how to list all todos using Pest CLI command\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --todos\n```\n\n----------------------------------------\n\nTITLE: Running Mutation Testing with Pest CLI\nDESCRIPTION: Commands for running mutation testing with Pest, including the option to run tests in parallel for better performance.\nSOURCE: https://github.com/pestphp/docs/blob/master/pest3-now-available.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --mutate\n# or in parallel...\n./vendor/bin/pest --mutate --parallel\n```\n\n----------------------------------------\n\nTITLE: Updating toHaveMethod Expectation for Architectural Testing\nDESCRIPTION: Shows how to update the toHaveMethod expectation in Pest 3, which now requires a class name instead of an object instance for architectural testing.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-expect($object)->toHaveMethod('method');\n+expect($object::class)->toHaveMethod('method');\n```\n\n----------------------------------------\n\nTITLE: Marking Todo as Done\nDESCRIPTION: Shows how to mark a todo as completed while maintaining context\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nit('has a contact page', function () {\n    //\n})->done(assignee: 'nunomaduro', issue: 123);\n```\n\n----------------------------------------\n\nTITLE: Filtering Todos by Assignee\nDESCRIPTION: Demonstrates filtering todos by assignee using CLI command\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --todos --assignee=nunomaduro\n```\n\n----------------------------------------\n\nTITLE: Retrieving Download Data Rate in PHP\nDESCRIPTION: Shows how to retrieve the download data rate in bytes per second from a stress test result.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->download()->data()->rate();\n```\n\n----------------------------------------\n\nTITLE: Running Command-Line Stress Test with Stressless\nDESCRIPTION: Example of using Stressless from the command line to stress test a website with specified concurrency and duration parameters.\nSOURCE: https://github.com/pestphp/docs/blob/master/announcing-stressless.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest stress example.com --concurrency=5 --duration=10\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated tap() Method with defer()\nDESCRIPTION: Shows how to replace the deprecated tap() method with the newer defer() method in high-order testing when upgrading from Pest 2 to Pest 3.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nit('creates admins')\n-    ->tap(fn () => $this->artisan('user:create --admin'))\n+    ->defer(fn () => $this->artisan('user:create --admin'))\n     ->assertDatabaseHas('users', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Updating Pest Dependency from 2.0 to 3.0\nDESCRIPTION: Demonstrates how to update the core Pest PHP dependency in composer.json from version 2.0 to 3.0, which is required when upgrading to Pest 3.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-    \"pestphp/pest\": \"^2.0\",\n+    \"pestphp/pest\": \"^3.0\",\n```\n\n----------------------------------------\n\nTITLE: Filtering Todos by Issue\nDESCRIPTION: Shows how to filter todos by issue number using CLI command\nSOURCE: https://github.com/pestphp/docs/blob/master/team-management.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pest --todos --issue=123\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upload Data Rate in PHP\nDESCRIPTION: Shows how to retrieve the upload data rate in bytes per second from a stress test result.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$result->requests()->upload()->data()->rate();\n```\n\n----------------------------------------\n\nTITLE: Updating Pest Dependency from 1.x to 2.0\nDESCRIPTION: Shows how to update the core Pest PHP dependency in composer.json from version 1.22 to 2.0 when upgrading from Pest 1 to Pest 2.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-    \"pestphp/pest\": \"^1.22\",\n+    \"pestphp/pest\": \"^2.0\",\n```\n\n----------------------------------------\n\nTITLE: Removing Global Assertions Plugin\nDESCRIPTION: Shows how to remove the deprecated Global Assertions Plugin from dependencies when upgrading to Pest 2, as it has been archived.\nSOURCE: https://github.com/pestphp/docs/blob/master/upgrade-guide.md#2025-04-20_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-    \"pestphp/pest-plugin-global-assertions\": \"^1.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Documentation navigation structure written in Markdown format, organizing Pest PHP documentation into major sections including Press, Getting Started, Digging Deeper, Advanced Topics, and More.\nSOURCE: https://github.com/pestphp/docs/blob/master/documentation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- ## Press\n  - [Pest v3 Now Available](/docs/pest3-now-available)\n  - [Announcing Stressless](/docs/announcing-stressless)\n  - [Pest's Spicy Summer Release](/docs/pest-spicy-summer-release)\n  - [Announcing Pest 2.0](/docs/announcing-pest2)\n  - [Why Pest](/docs/why-pest)\n\n- ## Getting Started\n  - [Installation](/docs/installation)\n  - [Editor Setup](/docs/editor-setup)\n  - [Writing Tests](/docs/writing-tests)\n  - [Expectations](/docs/expectations)\n  - [Hooks](/docs/hooks)\n  - [Datasets](/docs/datasets)\n  - [Exceptions](/docs/exceptions)\n  - [Filtering Tests](/docs/filtering-tests)\n  - [Skipping Tests](/docs/skipping-tests)\n  - [Optimizing Tests](/docs/optimizing-tests)\n  - [Continuous Integration](/docs/continuous-integration)\n\n- ## Digging Deeper\n  - [Configuring Tests](/docs/configuring-tests)\n  - [Grouping Tests](/docs/grouping-tests)\n  - [Global Hooks](/docs/global-hooks)\n  - [Mocking](/docs/mocking)\n  - [Plugins](/docs/plugins)\n  - [Team Management](/docs/team-management)\n  - [Architecture Testing](/docs/arch-testing)\n  - [Stress Testing](/docs/stress-testing)\n  - [Test Coverage](/docs/test-coverage)\n  - [Type Coverage](/docs/type-coverage)\n  - [Mutation Testing](/docs/mutation-testing)\n  - [Snapshot Testing](/docs/snapshot-testing)\n  - [Custom Helpers](/docs/custom-helpers)\n  - [Custom Expectations](/docs/custom-expectations)\n\n- ## Advanced Topics\n  - [CLI API Reference](/docs/cli-api-reference)\n  - [Test Dependencies](/docs/test-dependencies)\n  - [Creating Plugins](/docs/creating-plugins)\n  - [Higher Order Testing](/docs/higher-order-testing)\n\n- ## More\n  - [Video Resources](/docs/video-resources)\n  - [Support Policy](/docs/support-policy)\n  - [Upgrade Guide](/docs/upgrade-guide)\n  - [Migration From PHPUnit Guide](/docs/migrating-from-phpunit-guide)\n  - [Community Guide](/docs/community-guide)\n```\n\n----------------------------------------\n\nTITLE: Exclusive Operating System Test Execution in Pest PHP\nDESCRIPTION: Illustrates how to run tests only on specific operating systems using dedicated methods.\nSOURCE: https://github.com/pestphp/docs/blob/master/skipping-tests.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nit('has home', function() {\n    //\n})->onlyOnWindows(); // or onlyOnMac() or onlyOnLinux() ...\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit Tests for Specific Folder\nDESCRIPTION: Command to run Pest Drift for converting PHPUnit tests in a specific folder (tests/Helpers in this example).\nSOURCE: https://github.com/pestphp/docs/blob/master/migrating-from-phpunit-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/vendor/bin/pest --drift tests/Helpers\n```\n\n----------------------------------------\n\nTITLE: Preventing All Protected Methods with toHaveProtectedMethods in PHP\nDESCRIPTION: Tests that a class doesn't have any protected methods, which can be useful for enforcing composition over inheritance principles.\nSOURCE: https://github.com/pestphp/docs/blob/master/arch-testing.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\narch('app')\n    ->expect('App\\Services\\PaymentService')\n    ->not->toHaveProtectedMethods();\n```\n\n----------------------------------------\n\nTITLE: Installing Pest Stressless Plugin via Composer\nDESCRIPTION: Command to install the Pest Stressless plugin using Composer package manager.\nSOURCE: https://github.com/pestphp/docs/blob/master/stress-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pestphp/pest-plugin-stressless --dev\n```\n\n----------------------------------------\n\nTITLE: Customizing Watch Directories in Pest Watch Plugin\nDESCRIPTION: Command to customize which directories are monitored by the Pest Watch plugin for file changes.\nSOURCE: https://github.com/pestphp/docs/blob/master/plugins.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npest --watch=app,routes,tests\n```\n\n----------------------------------------\n\nTITLE: Verifying Test Failures with Custom Message in PHP\nDESCRIPTION: This snippet demonstrates how to use the fails() method with a custom message to verify a test fails and provide additional context. It combines failure verification with custom messaging.\nSOURCE: https://github.com/pestphp/docs/blob/master/exceptions.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nit('fails', function () {\n    throw new Exception('Something happened.');\n})->fails('Something went wrong.');\n```\n\n----------------------------------------\n\nTITLE: Initializing Mutation Testing in Pest PHP\nDESCRIPTION: Example showing how to set up mutation testing for a TodoController using the covers() or mutates() function.\nSOURCE: https://github.com/pestphp/docs/blob/master/mutation-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncovers(TodoController::class); // or mutates(TodoController::class);\n\nit('list todos', function () {\n    $this->getJson('/todos')->assertStatus(200);\n});\n```"
  }
]