[
  {
    "owner": "shopify",
    "repo": "cli",
    "content": "TITLE: Command Implementation with Service Delegation in TypeScript\nDESCRIPTION: Example of a command implementation following the Model-Command-Service pattern, where the command parses inputs and delegates business logic to a service.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// commands/serve.ts\nimport { devService } from \"../services/dev\"\n\nexport default class Dev extends Command {\n  static description = 'Dev the app'\n\n  async run(): Promise<void> {\n    const {args, flags} = await this.parse(Dev)\n    const directory = flags.path ? path.resolve(flags.path) : path.cwd()\n    const app = loadApp(directory)\n    await devService({app, port: flags.port})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using shopify theme push Command in Shopify CLI\nDESCRIPTION: Command used to upload local theme files to a Shopify store. Supports options for publishing, creating new themes, and selective file uploading. It can return JSON-formatted output with theme information.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme push\n  $ shopify theme push --unpublished --json\n\nFLAGS\n  -a, --allow-live              Allow push to a live theme.\n  -d, --development             Push theme files from your remote development theme.\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -j, --json                    Output the result as JSON.\n  -l, --live                    Push theme files from your remote live theme.\n  -n, --nodelete                Prevent deleting remote files that don't exist locally.\n  -o, --only=<value>...         Push only the specified files (Multiple flags allowed).\n  -p, --publish                 Publish as the live theme after uploading.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n  -u, --unpublished             Create a new unpublished theme and push to it.\n  -x, --ignore=<value>...       Skip uploading the specified files (Multiple flags allowed).\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --path=<value>            The path to your theme directory.\n      --strict                  Require theme check to pass without errors before pushing. Warnings are allowed.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Using the shopify app dev Command\nDESCRIPTION: Command for running a Shopify app in development mode. It builds the app and enables preview on a development store or Plus sandbox store. Includes various options for configuration, store selection, tunnel customization, and extension settings.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify app dev [--checkout-cart-url <value>] [--client-id <value> | -c <value>] [--no-color]\n    [--no-update] [--notify <value>] [--path <value>] [--reset | ] [--skip-dependencies-installation] [-s <value>]\n    [--subscription-product-url <value>] [-t <value>] [--theme-app-extension-port <value>] [--tunnel-url <value> | ]\n    [--verbose]\n\nFLAGS\n  -c, --config=<value>                    The name of the app configuration.\n  -s, --store=<value>                     Store URL. Must be an existing development or Shopify Plus sandbox store.\n  -t, --theme=<value>                     Theme ID or name of the theme app extension host theme.\n      --checkout-cart-url=<value>         Resource URL for checkout UI extension. Format:\n                                          \"/cart/{productVariantID}:{productQuantity}\"\n      --client-id=<value>                 The Client ID of your app.\n      --no-color                          Disable color output.\n      --no-update                         Skips the Partners Dashboard URL update step.\n      --notify=<value>                    The file path or URL. The file path is to a file that you want updated on\n                                          idle. The URL path is where you want a webhook posted to report on file\n                                          changes.\n      --path=<value>                      The path to your app directory.\n      --reset                             Reset all your settings.\n      --skip-dependencies-installation    Skips the installation of dependencies. Deprecated, use workspaces instead.\n      --subscription-product-url=<value>  Resource URL for subscription UI extension. Format: \"/products/{productId}\"\n      --theme-app-extension-port=<value>  Local port of the theme app extension development server.\n      --tunnel-url=<value>                Use a custom tunnel, it must be running before executing dev. Format:\n                                          \"https://my-tunnel-url:port\".\n      --verbose                           Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Deploying Shopify App in CLI\nDESCRIPTION: This command deploys the Shopify app by building it, then deploying the app configuration and extensions. It creates an app version and can optionally release it to users.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshopify app deploy [--client-id <value> | -c <value>] [-f] [--message <value>] [--no-color] [--no-release] [--path <value>] [--reset | ] [--source-control-url <value>] [--verbose] [--version <value>]\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Shopify App Project in Shell\nDESCRIPTION: Start a new app project with the `shopify app init` command, specifying app details through flags like name, package manager, and templates. This command facilitates the initial setup by linking projects to existing apps and managing config settings.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nshopify app init [--client-id <value> | ] [--flavor <value>] [-n <value>] [--no-color] [-d npm|yarn|pnpm|bun] [-p <value>] [--template <value>] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Using Result Type for Error Handling in TypeScript\nDESCRIPTION: This snippet demonstrates using the Result utility from @shopify/cli-kit to communicate success or failure of operations. It shows how to create and handle both ok and error results, with methods like isErr(), valueOrBug(), and mapError().\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/errors.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FatalError } from \"@shopify/cli-kit/node/error\"\nimport {err, ok, Result} from '@shopify/cli-kit/node/result'\n\nclass ActionError extends FatalError {}\n\nfunction action({success}: {success: boolean}): Result<string, ActionError> {\n  if (success) {\n    return ok(\"ok\")\n  } else {\n    return err(new ActionError(\"err\"))\n  }\n}\n\n// OK result\nlet result = action({success: true})\nresult.isErr() // false\nresult.valueOrBug() // ok\nresult.mapError((error) => new FatalError(\"other error\"))\n\n// Error result\nlet result = action({success: false})\nresult.isErr() // true\nresult.valueOrBug() // throws!\nresult.mapError((error) => new FatalError(\"other error\"))\n```\n\n----------------------------------------\n\nTITLE: Streaming Shopify App Logs in Shell\nDESCRIPTION: Stream app logs in real-time with `shopify app logs`, filtering by source and status to troubleshoot issues effectively. Optional flags modify log details and output format, enhancing analysis efforts for developers.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nshopify app logs [--client-id <value> | -c <value>] [-j] [--no-color] [--path <value>] [--reset | ] [--source <value>] [--status success|failure] [-s <value>] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Generating New App Extension in Shell\nDESCRIPTION: Create a new app extension with the `shopify app generate extension` command. The generated extension resides in the `extensions` directory, using specified templates and flavors. The command supports customization through various flags including client ID and extension name. This ensures proper structure and compatibility with Shopify's app extensions framework.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nshopify app generate extension [--client-id <value> | -c <value>] [--flavor vanilla-js|react|typescript|typescript-react|wasm|rust] [-n <value>] [--no-color] [--path <value>] [--reset | ] [-t <value>] [-t <value>] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Packaging a Theme for Upload\nDESCRIPTION: Packages your local theme files into a ZIP file that can be uploaded to Shopify. Only includes folders that match the default Shopify theme folder structure.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme package [--no-color] [--path <value>] [--verbose]\n\nFLAGS\n  --no-color      Disable color output.\n  --path=<value>  The path to your theme directory.\n  --verbose       Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify CLI for App Development using pnpm\nDESCRIPTION: Initializes a new Shopify app project using pnpm as the package manager. This installs all required dependencies for app development.\nSOURCE: https://github.com/shopify/cli/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm create @shopify/create-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify CLI for App Development using npm\nDESCRIPTION: Initializes a new Shopify app project using npm. This command installs all required dependencies including Shopify CLI itself.\nSOURCE: https://github.com/shopify/cli/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init @shopify/app@latest\n```\n\n----------------------------------------\n\nTITLE: Using Shopify App Build Command in CLI\nDESCRIPTION: This command builds the app, including extensions. It executes the build script specified in the element's TOML file and can run Theme Check for theme app extensions.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopify app build [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--skip-dependencies-installation] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Using Named Exports over Default Exports in TypeScript\nDESCRIPTION: Demonstrates why named exports with clear domain-specific names are preferred over default exports, which can lead to inconsistent naming across imports.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from \"node:path\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Shopify CLI Commands\nDESCRIPTION: This command lists all available Shopify CLI commands with options to filter and format the output.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify commands [-c id|plugin|summary|type | --tree] [--deprecated] [-x | ] [--hidden] [--json] [--no-truncate | ] [--sort id|plugin|summary|type | ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Customer Account Push in Shopify Hydrogen\nDESCRIPTION: Command to push customer account configuration to Shopify admin. Includes options for development origin, logout URI, redirect URI, and storefront ID configuration.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nshopify hydrogen customer-account-push --dev-origin <value> [--path <value>] [--relative-logout-uri <value>] [--relative-redirect-uri <value>] [--storefront-id <value>]\n```\n\n----------------------------------------\n\nTITLE: Listing App Versions with Shopify CLI\nDESCRIPTION: This command lists deployed versions of a Shopify app. It allows various options for configuration, output format, and verbosity.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify app versions list [--client-id <value> | -c <value>] [-j] [--no-color] [--path <value>] [--reset | ] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Fetching GraphQL Schema for Shopify App Function in Shell\nDESCRIPTION: Fetch the latest GraphQL schema for a function using the `shopify app function schema` command in the CLI. This command requires your function's API type and version defined in the extension TOML file and outputs the schema to a `schema.graphql` file. Mainly used from the function directory, optional flags control the client ID, verbosity, output to stdout, and color display.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nshopify app function schema [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--stdout] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Types for JS Function in Shell\nDESCRIPTION: Generate GraphQL types based on an input query for a JavaScript function using the `shopify app function typegen` command. Optional flags support specifying the client ID, verbosity, and more. Intended for use in JavaScript projects to define GraphQL types consistently.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nshopify app function typegen [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Linking Local Project to Hydrogen Storefront\nDESCRIPTION: This command links a local project to one of your shop's Hydrogen storefronts. It allows specifying the project path and storefront name.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen link [-f] [--path <value>] [--storefront <value>]\n```\n\n----------------------------------------\n\nTITLE: Using shopify theme rename Command in Shopify CLI\nDESCRIPTION: Command used to rename an existing Shopify theme. It allows specifying which theme to rename (development, live, or by ID/name) and the new name to apply.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme rename [-d] [-e <value>] [-l] [-n <value>] [--no-color] [--password <value>] [-s <value>] [-t\n    <value>] [--verbose]\n\nFLAGS\n  -d, --development             Rename your development theme.\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -l, --live                    Rename your remote live theme.\n  -n, --name=<value>            The new name for the theme.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Using shopify theme pull Command in Shopify CLI\nDESCRIPTION: Command used to download remote theme files to a local environment. It supports various options including development mode, filtering files, and connecting to specific theme environments.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme pull [-d] [-e <value>] [-x <value>] [-l] [--no-color] [-n] [-o <value>] [--password <value>]\n    [--path <value>] [-s <value>] [-t <value>] [--verbose]\n\nFLAGS\n  -d, --development             Pull theme files from your remote development theme.\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -l, --live                    Pull theme files from your remote live theme.\n  -n, --nodelete                Prevent deleting local files that don't exist remotely.\n  -o, --only=<value>...         Download only the specified files (Multiple flags allowed).\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n  -x, --ignore=<value>...       Skip downloading the specified files (Multiple flags allowed).\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --path=<value>            The path to your theme directory.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Using Shopify Theme Dev Command\nDESCRIPTION: Command for uploading the current theme as a development theme to the connected store, providing real-time theme editing capabilities. It supports various options like hot reloading, error handling, and synchronization with the Theme Editor.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme dev [-e <value>] [--error-overlay silent|default] [--host <value>] [-x <value>]\n    [--live-reload hot-reload|full-page|off] [--no-color] [-n] [--notify <value>] [-o <value>] [--open] [--password\n    <value>] [--path <value>] [--port <value>] [-s <value>] [--store-password <value>] [-t <value>]\n    [--theme-editor-sync] [--verbose]\n\nFLAGS\n  -e, --environment=<value>...\n      The environment to apply to the current command.\n\n  -n, --nodelete\n      Prevents files from being deleted in the remote theme when a file has been deleted locally. This applies to files\n      that are deleted while the command is running, and files that have been deleted locally before the command is run.\n\n  -o, --only=<value>...\n      Hot reload only files that match the specified pattern.\n\n  -s, --store=<value>\n      Store URL. It can be the store prefix (example) or the full myshopify.com URL (example.myshopify.com,\n      https://example.myshopify.com).\n\n  -t, --theme=<value>\n      Theme ID or name of the remote theme.\n\n  -x, --ignore=<value>...\n      Skip hot reloading any files that match the specified pattern.\n\n  --error-overlay=<option>\n      [default: default] Controls the visibility of the error overlay when an theme asset upload fails:\n      - silent Prevents the error overlay from appearing.\n      - default Displays the error overlay.\n\n      <options: silent|default>\n\n  --host=<value>\n      Set which network interface the web server listens on. The default value is 127.0.0.1.\n\n  --live-reload=<option>\n      [default: hot-reload] The live reload mode switches the server behavior when a file is modified:\n      - hot-reload Hot reloads local changes to CSS and sections (default)\n      - full-page  Always refreshes the entire page\n      - off        Deactivate live reload\n      <options: hot-reload|full-page|off>\n\n  --no-color\n      Disable color output.\n\n  --notify=<value>\n      The file path or URL. The file path is to a file that you want updated on idle. The URL path is where you want a\n      webhook posted to report on file changes.\n\n  --open\n      Automatically launch the theme preview in your default web browser.\n\n  --password=<value>\n      Password generated from the Theme Access app.\n\n  --path=<value>\n      The path to your theme directory.\n\n  --port=<value>\n      Local port to serve theme preview from.\n\n  --store-password=<value>\n      The password for storefronts with password protection.\n\n  --theme-editor-sync\n      Synchronize Theme Editor updates in the local theme files.\n\n  --verbose\n      Increase the verbosity of the output.\n\nDESCRIPTION\n  Uploads the current theme as a development theme to the connected store, then prints theme editor and preview URLs to\n  your terminal. While running, changes will push to the store in real time.\n\n\n  Uploads the current theme as the specified theme, or a \"development theme\"\n  (https://shopify.dev/docs/themes/tools/cli#development-themes), to a store so you can preview it.\n\n  This command returns the following information:\n\n  - A link to your development theme at http://127.0.0.1:9292. This URL can hot reload local changes to CSS and\n  sections, or refresh the entire page when a file changes, enabling you to preview changes in real time using the\n  store's data.\n\n  You can specify a different network interface and port using `--host` and `--port`.\n\n  - A link to the \"editor\" (https://shopify.dev/docs/themes/tools/online-editor) for the theme in the Shopify admin.\n\n  - A \"preview link\"\n  (https://help.shopify.com/manual/online-store/themes/adding-themes#share-a-theme-preview-with-others) that you can\n  share with other developers.\n\n  If you already have a development theme for your current environment, then this command replaces the development theme\n  with your local theme. You can override this using the `--theme-editor-sync` flag.\n\n  > Note: You can't preview checkout customizations using http://127.0.0.1:9292.\n\n  Development themes are deleted when you run `shopify auth logout`. If you need a preview link that can be used after\n  you log out, then you should \"share\" (https://shopify.dev/docs/api/shopify-cli/theme/theme-share) your theme or \"push\"\n  (https://shopify.dev/docs/api/shopify-cli/theme/theme-push) to an unpublished theme on your store.\n\n  You can run this command only in a directory that matches the \"default Shopify theme folder structure\"\n  (https://shopify.dev/docs/themes/tools/cli#directory-structure).\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for Tasks in Shopify CLI\nDESCRIPTION: Example of using the renderTasks function with retry logic. The task will retry up to 3 times before failing, and the errors from all attempts can be accessed in the task.errors property when handling the rejection.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/ui-kit/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst task = {\n  title: 'test',\n  retry: 3,\n  task: async (_ctx, task) => {\n    if (task.retryCount <= task.retry) {\n      throw new Error(`something went wrong${task.retryCount}`)\n    }\n  },\n}\n\ntry {\n  await renderTasks([task])\n} catch {\n  console.log(task.errors.map(e => e.message).join('\\n'))\n  // something went wrong0\n  // something went wrong1\n  // something went wrong2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy with Authentication in Shopify CLI\nDESCRIPTION: Shows how to set up an HTTP proxy with basic authentication using environment variables for Shopify CLI. The example demonstrates the correct format for including username and password credentials in the proxy URL.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.78.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSHOPIFY_HTTP_PROXY=http://user:pass@yourproxy.com:PORT\n```\n\n----------------------------------------\n\nTITLE: Using Shopify Theme Info Command\nDESCRIPTION: Command for displaying information about your theme environment, including the current store and specific theme details. It can retrieve information about development themes or other specified themes and output in JSON format.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme info [-d] [-e <value>] [-j] [--no-color] [--password <value>] [-s <value>] [-t <value>]\n    [--verbose]\n\nFLAGS\n  -d, --development             Retrieve info from your development theme.\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -j, --json                    Output the result as JSON.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --verbose                 Increase the verbosity of the output.\n\nDESCRIPTION\n  Displays information about your theme environment, including your current store. Can also retrieve information about a\n  specific theme.\n```\n\n----------------------------------------\n\nTITLE: Pulling Metafields Definitions from Shopify\nDESCRIPTION: Downloads metafields definitions from your Shopify store into a local file. If the metafields file already exists, it will be overwritten.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme metafields pull [-e <value>] [--no-color] [--password <value>] [--path <value>] [-s <value>]\n  [--verbose]\n\nFLAGS\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --path=<value>            The path to your theme directory.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Shopify App CLI Updates\nDESCRIPTION: List of new features and bug fixes for the Shopify App CLI component, including GraphiQL hotkey, function locales support, dev store preview mode, environment variable support for Javascript functions, and various bug fixes.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.50.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# App\n\n- Feature: Add a `g` hotkey to dev to open GraphiQL in your browser, using the same credentials as your app.\n- Feature: Add support to test locales with functions in Dev mode.\n- Feature: Allow enabling and disabling dev store preview mode with dashboard managed extensions.\n- Feature: Javascript functions/extensions now support environment variable sustitution.\n- Feature: Add Typescript template for Remix.\n- Fix: Preserve proxy url subpath when running dev.\n- Fix: javy is now only installed if there are js functions in your project.\n- Fix: Running config commands outside the app root folder.\n- Fix: Issue when creating an app with old templates (node, ruby...)\n```\n\n----------------------------------------\n\nTITLE: Listing Log Sources for Shopify App in Shell\nDESCRIPTION: Retrieve a list of log sources applicable to the `shopify app logs` command, using `shopify app logs sources`. Mainly supports function extensions as sources, helping users manage logs effectively.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nshopify app logs sources [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Building Hydrogen Storefront with Shopify CLI\nDESCRIPTION: This command builds a Hydrogen storefront for production with various options for bundle statistics, code generation, and source mapping.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen build [--bundle-stats] [--codegen-config-path <value> --codegen] [--disable-route-warning] [--entry <value>] [--force-client-sourcemap] [--lockfile-check] [--path <value>] [--sourcemap] [--watch]\n```\n\n----------------------------------------\n\nTITLE: Generating Standard Shopify Route\nDESCRIPTION: This command generates a standard Shopify route for various pages like home, cart, products, etc. It supports TypeScript generation and allows customization of the Remix adapter and locale parameter.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen generate route ROUTENAME [--adapter <value>] [-f] [--locale-param <value>] [--path <value>] [--typescript]\n```\n\n----------------------------------------\n\nTITLE: Using the shopify app function run Command\nDESCRIPTION: Command for running a Shopify function locally for testing and debugging. Executes the function in the current directory with specified input and export options, allowing developers to test function behavior before deployment.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify app function run [--client-id <value> | -c <value>] [-e <value>] [-i <value>] [-j] [--no-color] [--path\n    <value>] [--reset | ] [--verbose]\n\nFLAGS\n  -c, --config=<value>     The name of the app configuration.\n  -e, --export=<value>     Name of the WebAssembly export to invoke.\n  -i, --input=<value>      The input JSON to pass to the function. If omitted, standard input is used.\n  -j, --json               Output the result as JSON.\n      --client-id=<value>  The Client ID of your app.\n      --no-color           Disable color output.\n      --path=<value>       The path to your function directory.\n      --reset              Reset all your settings.\n      --verbose            Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Printing Shopify App Info in Shell\nDESCRIPTION: Display basic information about your Shopify app and extensions using the `shopify app info` command. Output includes project structure, access scopes, and system info, with optional JSON formatting. Customize display settings and verbosity as needed.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nshopify app info [--client-id <value> | -c <value>] [-j] [--no-color] [--path <value>] [--reset | ] [--verbose] [--web-env]\n```\n\n----------------------------------------\n\nTITLE: Generating All Supported Shopify Routes\nDESCRIPTION: This command generates all supported standard Shopify routes. It offers options for TypeScript generation, custom Remix adapter, and locale parameter customization.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen generate routes [--adapter <value>] [-f] [--locale-param <value>] [--path <value>] [--typescript]\n```\n\n----------------------------------------\n\nTITLE: Pulling Environment Variables in Hydrogen\nDESCRIPTION: Command to fetch and populate environment variables from a Hydrogen storefront into a local .env file with options for environment selection and file handling.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nshopify hydrogen env pull [--env <value> | --env-branch <value>] [--env-file <value>] [-f] [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify CLI for App Development using yarn\nDESCRIPTION: Initializes a new Shopify app project using yarn as the package manager. This command sets up the development environment with all required dependencies.\nSOURCE: https://github.com/shopify/cli/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn create @shopify/app\n```\n\n----------------------------------------\n\nTITLE: Activating Shopify App Configuration in CLI\nDESCRIPTION: This command activates an app configuration, setting the default for app-related CLI commands. It allows specifying a configuration file or choosing from existing ones in the project.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshopify app config use [config] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the shopify app env pull Command\nDESCRIPTION: Command for pulling app and extension environment variables. Creates or updates .env files with necessary environment variables for the app and its extensions, preserving existing variables and comments while displaying changes in terminal output.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify app env pull [--client-id <value> | -c <value>] [--env-file <value>] [--no-color] [--path <value>]\n    [--reset | ] [--verbose]\n\nFLAGS\n  -c, --config=<value>     The name of the app configuration.\n      --client-id=<value>  The Client ID of your app.\n      --env-file=<value>   Specify an environment file to update if the update flag is set\n      --no-color           Disable color output.\n      --path=<value>       The path to your app directory.\n      --reset              Reset all your settings.\n      --verbose            Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify CLI for Theme Development using Homebrew\nDESCRIPTION: Installs Shopify CLI using Homebrew package manager on macOS. This command adds the Shopify tap and installs the CLI tool.\nSOURCE: https://github.com/shopify/cli/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap shopify/shopify && brew install shopify-cli\n```\n\n----------------------------------------\n\nTITLE: Profiling Liquid Rendering Performance\nDESCRIPTION: Profiles the Liquid rendering performance of a theme page. Opens a web page with the Speedscope profiler showing execution time details for Liquid on the specified page.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme profile\n  $ shopify theme profile --url /products/classic-leather-jacket\n\nFLAGS\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -j, --json                    Output the result as JSON.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --store-password=<value>  The password for storefronts with password protection.\n      --url=<value>             [default: /] The url to be used as context\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboard-Managed Extensions into Shopify App in Shell\nDESCRIPTION: Use the `shopify app import-extensions` command to import extensions managed via Shopify's dashboard. This command simplifies the integration of extensions by specifying configurations like the client ID and paths. Optional flags modify verbosity and color settings.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nshopify app import-extensions [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Initializing New Hydrogen Storefront\nDESCRIPTION: This command creates a new Hydrogen storefront project. It offers extensive customization options including language selection, market structure, styling strategy, and template choice.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen init [-f] [--git] [--install-deps] [--language <value>] [--markets <value>] [--mock-shop] [--path <value>] [--quickstart] [--routes] [--shortcut] [--styling <value>] [--template <value>]\n```\n\n----------------------------------------\n\nTITLE: Deploying Hydrogen Storefront to Oxygen\nDESCRIPTION: Command for building and deploying Hydrogen storefront to Oxygen with extensive configuration options including authentication, environment settings, and deployment metadata.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nshopify hydrogen deploy [--auth-bypass-token-duration <value> --auth-bypass-token] [--build-command <value>] [--entry <value>] [--env <value> | --env-branch <value>] [--env-file <value>] [-f] [--json-output] [--lockfile-check] [--metadata-description <value>] [--metadata-user <value>] [--no-verify] [--path <value>] [--preview] [-s <value>] [-t <value>]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Example\nDESCRIPTION: Example of a dynamic import pattern that lazily loads modules when needed, reducing initial load time. This approach makes the containing function asynchronous.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022-12-21-dynamically-importing-lodash-using-commonjs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = await import(\"bar\") // Lazily-imported\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Market Support\nDESCRIPTION: Command to configure multiple markets support using different URL structure strategies including subfolders, domains, and subdomains.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen setup markets [STRATEGY] [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Using Shopify Theme Console Command\nDESCRIPTION: Command for starting Shopify Liquid REPL (read-eval-print loop) tool that provides an interactive terminal interface for evaluating Liquid code and exploring objects, filters, and tags using real store data.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme console\n  $ shopify theme console --url /products/classic-leather-jacket\n\nFLAGS\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --store-password=<value>  The password for storefronts with password protection.\n      --url=<value>             [default: /] The url to be used as context\n      --verbose                 Increase the verbosity of the output.\n\nDESCRIPTION\n  Shopify Liquid REPL (read-eval-print loop) tool\n\n  Starts the Shopify Liquid REPL (read-eval-print loop) tool. This tool provides an interactive terminal interface for\n  evaluating Liquid code and exploring Liquid objects, filters, and tags using real store data.\n\n  You can also provide context to the console using a URL, as some Liquid objects are context-specific\n```\n\n----------------------------------------\n\nTITLE: Triggering Webhook Delivery with Shopify CLI\nDESCRIPTION: This command triggers the delivery of a sample webhook topic payload to a specified address. It supports various delivery methods and configuration options.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify app webhook trigger [--address <value>] [--api-version <value>] [--client-id <value> | -c <value>] [--client-secret <value>] [--delivery-method http|google-pub-sub|event-bridge] [--help] [--path <value>] [--reset | ] [--shared-secret <value>] [--topic <value>]\n```\n\n----------------------------------------\n\nTITLE: Running Hydrogen Storefront in Production Mode\nDESCRIPTION: This command runs a Hydrogen storefront in an Oxygen worker for production. It offers various options for environment selection, debugging, and code generation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen preview [--codegen-config-path <value> [--codegen --build]] [--debug] [--entry <value> ] [--env <value> | --env-branch <value>] [--env-file <value>] [--inspector-port <value>] [--legacy-runtime] [--path <value>] [--port <value>] [--verbose] [--watch ]\n```\n\n----------------------------------------\n\nTITLE: Using the shopify app function build Command\nDESCRIPTION: Command for compiling a Shopify app function to WebAssembly (WASM) for testing purposes. Takes a function from the current directory and converts it to WASM format that can be executed in the Shopify Functions runtime.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify app function build [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--verbose]\n\nFLAGS\n  -c, --config=<value>     The name of the app configuration.\n      --client-id=<value>  The Client ID of your app.\n      --no-color           Disable color output.\n      --path=<value>       The path to your function directory.\n      --reset              Reset all your settings.\n      --verbose            Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Rendering Info with Command Token in JavaScript\nDESCRIPTION: Demonstrates how to use the renderInfo function with a command token to display a message with a highlighted command.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/ui-kit/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbody: ['Run', {command: 'npm run shopify upgrade'}, {char: '.'}]\n```\n\n----------------------------------------\n\nTITLE: Listing Themes in a Shopify Store\nDESCRIPTION: Lists all themes in your Shopify store along with their IDs and statuses. Can be filtered by ID, name, or role (live/unpublished/development).\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme list [-e <value>] [--id <value>] [-j] [--name <value>] [--no-color] [--password <value>]\n    [--role live|unpublished|development] [-s <value>] [--verbose]\n\nFLAGS\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -j, --json                    Output the result as JSON.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n      --id=<value>              Only list theme with the given ID.\n      --name=<value>            Only list themes that contain the given name.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --role=<option>           Only list themes with the given role.\n                                <options: live|unpublished|development>\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Strategy in Hydrogen\nDESCRIPTION: Command to setup CSS strategies in a Hydrogen project. Supports Tailwind, Vanilla Extract, CSS Modules, and PostCSS with options for force installation and dependency management.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen setup css [STRATEGY] [-f] [--install-deps] [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Using the shopify app env show Command\nDESCRIPTION: Command for displaying app and extension environment variables. Shows all environment variables that can be used for deploying apps and app extensions without modifying any files.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify app env show [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--verbose]\n\nFLAGS\n  -c, --config=<value>     The name of the app configuration.\n      --client-id=<value>  The Client ID of your app.\n      --no-color           Disable color output.\n      --path=<value>       The path to your app directory.\n      --reset              Reset all your settings.\n      --verbose            Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Routes and Core Functionality\nDESCRIPTION: This command scaffolds routes and core functionality for a Hydrogen project. It allows customization of market structure and offers options for dependency installation and shortcut creation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen setup [-f] [--install-deps] [--markets <value>] [--path <value>] [--shortcut]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Theme Information with Shopify CLI\nDESCRIPTION: This command allows users to retrieve information about a specific theme using the Shopify CLI. It supports various flags for specifying the theme, store, environment, and output format.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.58.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nshopify theme info --theme <themeNameOrID> --store --environment --development --json\n```\n\n----------------------------------------\n\nTITLE: Using shopify theme share Command in Shopify CLI\nDESCRIPTION: Command used to create a shareable, unpublished theme with a randomized name. Useful for sharing theme previews with others without affecting the live store.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme share [-e <value>] [--no-color] [--password <value>] [--path <value>] [-s <value>] [--verbose]\n\nFLAGS\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --path=<value>            The path to your theme directory.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remix and Hydrogen\nDESCRIPTION: Command to upgrade Remix and Hydrogen npm dependencies with options for force upgrade and version targeting.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen upgrade [-f] [--path <value>] [-v <value>]\n```\n\n----------------------------------------\n\nTITLE: Starting a Theme Language Server\nDESCRIPTION: Starts a Language Server Protocol server for Shopify themes. This provides enhanced development capabilities like code completion and error detection.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme language-server [--no-color] [--verbose]\n\nFLAGS\n  --no-color  Disable color output.\n  --verbose   Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Using the shopify app function replay Command\nDESCRIPTION: Command for replaying a function run from an app log for testing and debugging. Allows developers to rerun function executions using logged data, with an option to watch for code changes and automatically rerun the function.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify app function replay [--client-id <value> | -c <value>] [-j] [-l <value>] [--no-color] [--path <value>]\n    [--reset | ] [--verbose] [-w]\n\nFLAGS\n  -c, --config=<value>     The name of the app configuration.\n  -j, --json               Output the result as JSON.\n  -l, --log=<value>        Specifies a log identifier to replay instead of selecting from a list. The identifier is\n                           provided in the output of `shopify app dev` and is the suffix of the log file name.\n  -w, --[no-]watch         Re-run the function when the source code changes.\n      --client-id=<value>  The Client ID of your app.\n      --no-color           Disable color output.\n      --path=<value>       The path to your function directory.\n      --reset              Reset all your settings.\n      --verbose            Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy Environment Variables for Shopify CLI\nDESCRIPTION: Demonstrates how to set environment variables for HTTP proxy support in Shopify CLI, including basic authentication.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSHOPIFY_HTTP_PROXY=http://user:pass@yourproxy.com:PORT\n```\n\n----------------------------------------\n\nTITLE: Theme Check Command with Dev Preview Flag\nDESCRIPTION: Example of using the theme check command with the dev-preview flag for Theme Check 2.0 introduced in version 3.50.0.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme check --dev-preview\n```\n\n----------------------------------------\n\nTITLE: Running Shopify CLI Package Scripts\nDESCRIPTION: Commands to build and run the Shopify CLI and create-app CLI locally for development purposes.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm shopify\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm shopify app build --path /path/to/project\n```\n\n----------------------------------------\n\nTITLE: Running Shopify CLI in Debug Mode\nDESCRIPTION: Commands for running Shopify CLI with VS Code's debugger attached. The first command builds and runs the CLI, while the second command only runs without rebuilding.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run shopify\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm run shopify:run\n```\n\n----------------------------------------\n\nTITLE: Linking Shopify App Configuration in CLI\nDESCRIPTION: This command fetches app configuration from the Partner Dashboard, creating or overwriting a configuration file. It can be used to start with a default configuration file for a new app.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopify app config link [--client-id <value> | -c <value>] [--no-color] [--path <value>] [--reset | ] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Running Hydrogen Development Server\nDESCRIPTION: Command to run Hydrogen storefront in development mode with options for code generation, debugging, optimization, and environment configuration.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nshopify hydrogen dev [--codegen-config-path <value> --codegen] [--debug] [--disable-deps-optimizer] [--disable-version-check] [--disable-virtual-routes] [--entry <value>] [--env <value> | --env-branch <value>] [--env-file <value>] [--host] [--inspector-port <value>] [--legacy-runtime] [--path <value>] [--port <value>] [--sourcemap] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Listing Available Hydrogen Storefronts\nDESCRIPTION: This command returns a list of Hydrogen storefronts available on a given shop. It allows specifying the project path.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen list [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Theme Dev Command with Theme Name Parameter\nDESCRIPTION: Example of using the theme dev command with a theme name parameter, which was fixed in version 3.47.0 to show valid URLs.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme dev --theme \"My Theme Name\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Interacting with Test Apps\nDESCRIPTION: Commands to create test apps and interact with them using the CLI scripts in the package.json.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/get-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-app.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-app.js -e ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-app.js -e theme\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-app.js -e function\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-app.js --deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-app.js --cleanup\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm shopify\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm generate\n```\n\n----------------------------------------\n\nTITLE: Running the Shopify Theme Console Command\nDESCRIPTION: Command to launch the Liquid REPL (Read-Eval-Print Loop) experience in your browser, allowing interactive testing of Liquid code.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.49.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme console\n```\n\n----------------------------------------\n\nTITLE: Using Shopify Theme Delete Command\nDESCRIPTION: Command for deleting remote themes from the connected Shopify store. Supports deleting multiple themes by ID and includes confirmation prompts that can be bypassed with the --force flag.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme delete [-d] [-e <value>] [-f] [--no-color] [--password <value>] [-a] [-s <value>] [-t <value>]\n    [--verbose]\n\nFLAGS\n  -a, --show-all                Include others development themes in theme list.\n  -d, --development             Delete your development theme.\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -f, --force                   Skip confirmation.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>...        Theme ID or name of the remote theme.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --verbose                 Increase the verbosity of the output.\n\nDESCRIPTION\n  Delete remote themes from the connected store. This command can't be undone.\n\n  Deletes a theme from your store.\n\n  You can specify multiple themes by ID. If no theme is specified, then you're prompted to select the theme that you\n  want to delete from the list of themes in your store.\n\n  You're asked to confirm that you want to delete the specified themes before they are deleted. You can skip this\n  confirmation using the `--force` flag.\n```\n\n----------------------------------------\n\nTITLE: Creating Test Themes with Shopify CLI\nDESCRIPTION: Commands to create and manage test themes for Shopify stores using the CLI.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/get-started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-theme.js -s YOUR_STORE\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/create-test-theme.js -s YOUR_STORE --cleanup\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify CLI globally for Theme Development using npm\nDESCRIPTION: Installs Shopify CLI and the theme extension globally using npm. This is required for working with Shopify themes.\nSOURCE: https://github.com/shopify/cli/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @shopify/cli @shopify/theme\n```\n\n----------------------------------------\n\nTITLE: Testing App Creation with CLI\nDESCRIPTION: Command to test the CLI by creating a test app with UI extensions, which helps verify cross-platform functionality.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/cross-os-compatibility.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode bin/create-test-app.js -e ui\n```\n\n----------------------------------------\n\nTITLE: Theme Info Command with Theme Filter\nDESCRIPTION: Command for retrieving information about a specific theme using the new functionality that supports retrieving single theme information.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme info --theme <themeNameOrID> --store --environment --development --json\n```\n\n----------------------------------------\n\nTITLE: Pushing Environment Variables to Hydrogen Storefront\nDESCRIPTION: This command pushes environment variables from a local .env file to a linked Hydrogen storefront. It allows specifying the environment, custom env file path, and project path.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen env push [--env <value> | ] [--env-file <value>] [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Using Shopify Theme Init Command\nDESCRIPTION: Clones a Git repository to use as a starting point for building a new theme. By default, it creates a copy of Dawn, Shopify's example theme, but can clone any specified Git repository.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme init [name] [flags]\n\nARGUMENTS\n  NAME  Name of the new theme\n\nFLAGS\n  -l, --latest             Downloads the latest release of the `clone-url`\n  -u, --clone-url=<value>  [default: https://github.com/Shopify/dawn.git] The Git URL to clone from. Defaults to\n                           Shopify's example theme, Dawn: https://github.com/Shopify/dawn.git\n      --no-color           Disable color output.\n      --path=<value>       The path to your theme directory.\n      --verbose            Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Theme List Command with JSON Output\nDESCRIPTION: Example of using the theme list command with the JSON flag for structured output, added in version 3.51.0.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme list --json\n```\n\n----------------------------------------\n\nTITLE: Shopify Theme CLI Updates\nDESCRIPTION: List of improvements and fixes for the Shopify Theme CLI component, including language server preview flag, Liquid Console versioning, command flag clarifications, and enhanced development command banner.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.50.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Theme\n\n- Add --dev-preview flag for shopify theme language-server. This flag will run the language-server that uses the new typescript implementation of theme-check.\n- Add versioning to Liquid Console remote theme, allowing users to try different versions of Liquid Console in the same store without facing compatibility issues\n- Fix ambiguity between --editor and --environment flags in the shopify theme open command\n- Enhance the shopify theme dev command banner by adding the preview URL next to the preview link, for easy copy/pasting in terminal emulators that support hyperlinks\n- The shopify theme delete command no longer fails when some flags (-f, -d, etc.) are passed without the -t flag\n```\n\n----------------------------------------\n\nTITLE: Running Node with CPU Profiling for Shopify CLI\nDESCRIPTION: Command to run the Shopify CLI with Node's CPU profiling flag enabled, which generates a .cpuprofile file in the working directory that can be analyzed with tools like speedscope.app.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/performance.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --cpu-prof packages/cli/bin/dev.js\n```\n\n----------------------------------------\n\nTITLE: Theme Dev Command with Open Flag\nDESCRIPTION: Example of using the theme dev command with the open flag to explicitly request a browser window, introduced in version 3.47.0.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme dev --open\n```\n\n----------------------------------------\n\nTITLE: Theme Validation\nDESCRIPTION: Command to validate Shopify themes using Theme Check, with support for automatic corrections and custom configurations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify theme check [-a] [-C <value>] [-e <value>] [--fail-level crash|error|suggestion|style|warning|info] [--init] [--list] [--no-color] [-o text|json] [--path <value>] [--print] [--verbose] [-v]\n```\n\n----------------------------------------\n\nTITLE: Executing Theme Info Command with Multiple Environments\nDESCRIPTION: Demonstrates how to use the updated 'theme info' command to support multiple environments in the Shopify CLI.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.77.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntheme info -e env1 -e env2\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Process Roles in shopify.web.toml\nDESCRIPTION: New configuration format allowing multiple roles instead of a single type, supporting background web processes without frontend/backend properties.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.47.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nroles = [\"web\", \"background\"]\n```\n\n----------------------------------------\n\nTITLE: Optimized Concurrent Async Function Using Promise.all in JavaScript\nDESCRIPTION: Improved implementation using Promise.all to run independent asynchronous functions concurrently, which significantly improves performance by executing operations in parallel.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/performance.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function slowFunction() {\n    await Promise.all([\n        firstSlowFunction(),\n        secondSlowFunction()\n    ])\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Shopify CLI Repository\nDESCRIPTION: Commands to clone the Shopify CLI repository and install its dependencies using PNPM.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Shopify/cli.git\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Logging into Shopify Account\nDESCRIPTION: This command facilitates logging into a Shopify account. It allows specifying the shop URL and project path.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen login [--path <value>] [-s <value>]\n```\n\n----------------------------------------\n\nTITLE: Emitting and Handling Navigation Events\nDESCRIPTION: Example demonstrating how to emit and handle navigation events between the Dev Console and Admin components using the client's emit and on methods.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-server-kit/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DevConsole() {\n  const {client, extensions: [extension]} = useExtensionServerContext();\n\n  const navigateToExtension = useCallback(() => {\n    client.emit('navigate', {url: extension.development.resource.url});\n  },[extension]);\n\n  return <button onClick={navigateToExtension}>Navigate to the extension</button>\n}\n\nfunction AdminLocalExensionsComponent() {\n  const {client} = useExtensionServerContext();\n\n   useEffect(() => {\n    return client.on('navigate', ({url}) => {\n      if (!url) {\n        return;\n      }\n      // Navigate to the url\n      window.location.assign(url);\n    });\n  }, [client]);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Acceptance Testing with Cucumber in Gherkin Syntax\nDESCRIPTION: Demonstrates how to write an acceptance test using Cucumber's Gherkin syntax. The example shows a scenario for creating a new app with a specific dependency manager, written in a user-story format.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/testing-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: I create a new app with pnpm\n  Given I have a working directory\n  When I create an app named MyApp with pnpm as dependency manager\n  Then I have an app named MyApp with pnpm as dependency manager\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Config on Deploy in TOML\nDESCRIPTION: Configuration flag in TOML file to control whether app configuration should be included during deployment. This setting enables or disables the inclusion of app configuration when using the deploy command.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.55.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ninclude_config_on_deploy = true\n```\n\n----------------------------------------\n\nTITLE: Recommended Vitest Module Mocking Solution\nDESCRIPTION: Shows the recommended approach for mocking module functions in Vitest that allows both custom implementations and spying capabilities. Includes examples of different return value mocking methods including promises and direct values.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst import {functionA} from 'my-module'\n\n// This will mock all functions with vi.fn() by default\nvi.mock('my-module')\n\n// Then we can specify our custom mock implementation\nvi.mocked(functionA).mockImplementation(() => {foo: \"bar\"})\n\n// OR:\n// When the function returns a promise, we can also mock the resolved value\nvi.mocked(functionA).mockResolvedValue({foo: \"bar\"})\n\n// When the function doesn't return a promise we can just set a return value\nvi.mocked(functionA).mockReturnValue({foo: \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Installing UI Extensions Server Kit with npm\nDESCRIPTION: Command to install the UI Extensions Server Kit package using npm.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-server-kit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @shopify/ui-extensions-server-kit\n```\n\n----------------------------------------\n\nTITLE: Generating Types for Storefront API Queries with Shopify CLI\nDESCRIPTION: This command generates TypeScript types for Storefront API queries found in a Hydrogen project.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen codegen [--codegen-config-path <value>] [--path <value>] [--watch]\n```\n\n----------------------------------------\n\nTITLE: Theme Push Command with JSON Output Format\nDESCRIPTION: Example of the theme push command with JSON output, which was fixed to include a 'theme' key in the root node of JSON output.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme push --json\n```\n\n----------------------------------------\n\nTITLE: Common Vitest Module Mocking Approaches\nDESCRIPTION: Demonstrates different ways to mock module functions in Vitest, including basic mocking, custom implementation mocking, and mixed approach mocking. Each approach has different implications for spying and implementation capabilities.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Option 1, all exported functions are mocked to vi.fn()\nvi.mock('my-module')\n\n// Option 2, customize the mocks for each module function\nvi.mock('my-module', () => {\n  functionA: vi.fn(),\n  functionB: () => \"foo\",\n  functionC: vi.fn(() => \"foo\")\n})\n```\n\n----------------------------------------\n\nTITLE: Throwing AbortError with Formatted Messages in TypeScript\nDESCRIPTION: This snippet demonstrates how to throw an AbortError with a formatted message and optional tryMessage parameter. AbortError is used to terminate CLI execution and display a helpful error message to the user.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AbortError,\n  AbortSilentError,\n  BugError,\n} from \"@shopify/cli-kit/node/error\"\n\nthrow new AbortError(\n  \"The project doesn't exist\",\n  [\"Make sure the command\", {command: \"npm install\"}, \"is executed from a project's directory\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Persisting Data Updates to the Dev Server\nDESCRIPTION: Example showing how to use the client's persist method to update app title and development resource URL on the Dev Server.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-server-kit/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LocalExensionsComponent() {\n  const {client} = useExtensionServerContext();\n\n  // Call this function to persist data changes to the Dev Server\n  const updateExtensions = useCallback(() => {\n    client.persist('update', {\n      // Update the app title\n      app: {title: 'My app'},\n      // Update the development resource url\n      extensions: [{development: {resource: {url: '/admin/product/1'}}}],\n    });\n  }, [client]);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Remote Theme as Live\nDESCRIPTION: Sets a remote theme as the live theme for your Shopify store. If no theme ID is specified, prompts you to select a theme. Requires confirmation unless the --force flag is used.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme publish [-e <value>] [-f] [--no-color] [--password <value>] [-s <value>] [-t <value>] [--verbose]\n\nFLAGS\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -f, --force                   Skip confirmation.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Throwing AbortError with Next Steps in TypeScript\nDESCRIPTION: This snippet shows how to throw an AbortError with next steps to help the user recover from the error. The next steps are displayed after the error message to guide the user.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/errors.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new AbortError(\n  \"The project doesn't exist\",\n  undefined,\n  [\n    \"Make sure the command is executed from a project's directory\",\n    \"Run the command again\",\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Dev Console Setup Commands for Terminal 2\nDESCRIPTION: Commands to navigate to the UI extensions dev console directory and start the development server with a connection URL\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-dev-console/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndev cd cli\\ncd packages/ui-extensions-dev-console\\nVITE_CONNECTION_URL=[SHOPIFY_EXTENSION_DEV_CONSOLE_URL] pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Function Design Pattern: Avoiding Input Mutation in TypeScript\nDESCRIPTION: Demonstrates the pattern of returning new objects rather than mutating input arguments, which leads to more predictable behavior and fewer side effects.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Bad pattern\noptimize(app)\n\n// Better pattern\nconst optimizedApp = optimize(app)\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Paths Support in Windows\nDESCRIPTION: PowerShell command to enable long paths support in Windows, which is required for PNPM to work correctly with the Shopify CLI project.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/cross-os-compatibility.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" `\n-Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n```\n\n----------------------------------------\n\nTITLE: Listing Hydrogen Environments\nDESCRIPTION: Command to list all available environments for a linked Hydrogen storefront.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nshopify hydrogen env list [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Public Module Import Pattern for CLI Kit\nDESCRIPTION: Shows how consumers should import from the CLI kit package, demonstrating the directory structure that separates modules by runtime compatibility (node, browser, common).\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getArrayHasDuplicates } from \"@shopify/cli-kit/common/array\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in React/TSX\nDESCRIPTION: Demonstrates usage of a new Tooltip component that can wrap any element or text to display tooltip content. The component accepts a text prop for tooltip content and a single child element or string.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-dev-console/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tooltip} from '@components/Tooltip'\n\n// Add a tooltip to a component\n\n<Tooltip text=\"This is a tooltip!\">\n  <IconButton icon={SomeIcon} />\n</Tooltip>\n\n// Add a tooltip to an a string\n\n<Tooltip text=\"This is a tooltip!\">\n  This string will have a dotted underline.\n</Tooltip>\n\n// Since Tooltip is wrapped an inline-block div, it may be used\n// in a block of text\n\n<p>\n  Only <Tooltip text=\"This right here!\">this section</Tooltip> will be underlined and trigger a tooltip.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Recommended Named Export Pattern in TypeScript\nDESCRIPTION: Shows a better naming convention for function imports that makes the purpose clearer by including the domain in the function name.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { joinPath } from \"node:path\"\n```\n\n----------------------------------------\n\nTITLE: Checking Hydrogen Storefront Resources with Shopify CLI\nDESCRIPTION: This command returns diagnostic information about a specific resource in a Hydrogen storefront.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen check RESOURCE [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Opening a Theme Preview in Browser\nDESCRIPTION: Opens the preview of a remote theme in your browser. Provides links to the theme editor and a shareable preview link. If no theme is specified, prompts you to select one.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify theme open [-d] [-E] [-e <value>] [-l] [--no-color] [--password <value>] [-s <value>] [-t <value>]\n    [--verbose]\n\nFLAGS\n  -E, --editor                  Open the theme editor for the specified theme in the browser.\n  -d, --development             Open your development theme.\n  -e, --environment=<value>...  The environment to apply to the current command.\n  -l, --live                    Open your live (published) theme.\n  -s, --store=<value>           Store URL. It can be the store prefix (example) or the full myshopify.com URL\n                                (example.myshopify.com, https://example.myshopify.com).\n  -t, --theme=<value>           Theme ID or name of the remote theme.\n      --no-color                Disable color output.\n      --password=<value>        Password generated from the Theme Access app.\n      --verbose                 Increase the verbosity of the output.\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Dev Server Events in React\nDESCRIPTION: Example demonstrating how to subscribe to 'connected' and 'update' events from the Dev Server using the client provided by useExtensionServerContext.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-server-kit/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LocalExensionsComponent() {\n  const {client} = useExtensionServerContext();\n\n  useEffect(() => {\n    return client.on(\n      'connected',\n      async ({app, extensions}) => {\n         // Dispatched once when the connection to the Dev Server is established\n      },\n    );\n  }, [client]);\n\n  useEffect(() => {\n    return client.on(\n      'update',\n      async ({app, extensions}) => {\n         /**\n         * Dispatched everytime an extension has been updated. Update events can happen as a result of the following:\n         * - extension script has changed\n         * - localization JSON has changed\n         * - clicking on the show/hide button in the Dev Console\n         */\n      },\n    );\n    return unsubscribeUpdate;\n  }, [client]);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Module-Level State in TypeScript\nDESCRIPTION: Shows an anti-pattern where a module stores mutable state, which can lead to unexpected behavior due to Node.js module resolution potentially creating multiple instances.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n\nconst isInitialized = false;\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with Vitest in TypeScript\nDESCRIPTION: Demonstrates how to write a basic unit test using Vitest for testing app loading functionality. The example shows the basic test structure with the describe, test, and expect functions.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/testing-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app.test.ts\nimport { describe, test, expect } from \"vitest\"\nimport {load} from \"./app\"\n\ntest(\"loads the app\", async () => {\n  // Given/When\n  const got = await load()\n\n  // Then\n  expect(app.name).toEqual(\"my-app\")\n})\n```\n\n----------------------------------------\n\nTITLE: Build Commands for Production\nDESCRIPTION: Commands to build the dev console for production use with Shopify web\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-dev-console/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndev cd cli\\ncd packages/ui-extensions-dev-console\\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Logging out of Local Session\nDESCRIPTION: This command logs out of the local session. It allows specifying the project path.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen logout [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Handling Filesystem Operations in Tests with Temporary Directories\nDESCRIPTION: Shows how to test filesystem operations by using temporary directories. This approach avoids stubbing filesystem behavior and ensures tests are isolated and don't interfere with each other.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/testing-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {file, path} from \"@shopify/cli-kit\"\n\ntest(\"writes\", async () => {\n    await file.inTemporaryDirectory(async (tmpDir: string) => {\n    // Given\n    const outputPath = path.join(tmpDir, \"output\")\n\n    // When\n    await file.write(outputPath, \"content\")\n\n    // Then\n    const exists = await file.exists(outputPath)\n    expect(exists).toBe(true)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Avoiding Side Effects in Module Imports with TypeScript\nDESCRIPTION: Demonstrates an anti-pattern where a module performs side effects (file system operations) at the root level when imported, which can cause performance issues and testing difficulties.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/conventions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// some-module.ts\n\nimport { fs } from \"fs\"\n\nconst content = fs.readSync(\"./package.json\")\n```\n\n----------------------------------------\n\nTITLE: Setting up ExtensionServerProvider with React\nDESCRIPTION: Example showing how to set up the ExtensionServerProvider component and use the useExtensionServerContext hook to connect to the Dev Server and access extension data.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-server-kit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ExtensionServerProvider, useExtensionServerContext} from '@shopify/ui-extensions-server-kit';\n\nfunction LocalExensionsComponent() {\n  const {state: {extensions}} = useExtensionServerContext();\n\n  // TODO: Something with the extensions\n  return null;\n}\n\nfunction App() {\n  const connectionOptions = useMemo(() => {\n    /**\n     * The Dev Server url is usually passed as a search param and then saved\n     * in local/session storage. You can also leave this blank if you don't have access to the socket url when the ExtensionServerProvider is mounted.\n     */\n     return {\n      connection: {\n        url: 'wss://dev-server-socket-url',\n        automaticConnect: false, // Set this to false if you don't want to connect immediately.\n      },\n      surface: 'Admin', // Optionally filter for extensions in a specific surface\n     }\n  }, []);\n\n  return (<ExtensionServerProvider options={connectionOptions}>\n            <LocalExensionsComponent/>\n          </ExtensionServerProvider>);\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Plugins\nDESCRIPTION: Command to display installation properties of a Shopify plugin.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify plugins inspect PLUGIN...\n```\n\n----------------------------------------\n\nTITLE: Using TokenizedText with custom attributes in components\nDESCRIPTION: Example of how to use TokenizedText to render complex attributes in components. This shows how to pass a link token as a POJO (Plain Old JavaScript Object) to a render function.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/ui-kit/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderExample({\n  attribute: {\n    link: {\n      label: 'Shopify',\n      url: 'https://shopify.com'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Development Automation Scripts\nDESCRIPTION: Commands for common development tasks like testing, linting, and type-checking across all packages in the Shopify CLI repository.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/get-started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint:fix\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm type-check\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocorrect in Shopify CLI\nDESCRIPTION: These commands enable, disable, or check the status of the autocorrect feature in Shopify CLI.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify config autocorrect off\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify config autocorrect on\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify config autocorrect status\n```\n\n----------------------------------------\n\nTITLE: App Schema Generation Output\nDESCRIPTION: Schema generation output format for GraphQL schemas, defaulting to schema.graphql file or stdout with flag.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.47.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Command Structure for Package-Installed CLI in Markdown\nDESCRIPTION: This snippet shows the structure of a Shopify CLI command when installed via an app package, including package manager, CLI, topic, command, argument, and flags.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/command-guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| package manager | CLI (always Shopify) | Topic | Command | Argument | Flags (with or without options) |\n| :------------- | :------------- | :------------- | :------------- |:------------- |:------------- |\n| yarn | Shopify | app | generate | extension | --type checkout_ui\n```\n\n----------------------------------------\n\nTITLE: Installing UI Extensions Server Kit with yarn\nDESCRIPTION: Command to install the UI Extensions Server Kit package using yarn.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-server-kit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @shopify/ui-extensions-server-kit\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Benefits in Markdown\nDESCRIPTION: This markdown snippet highlights the key benefits of introducing Nx to the Shopify CLI project, including incremental builds and the 'affected' command for selective task execution.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022_02-Incremental-builds-with-Nx.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# February 2022 - Incremental builds with Nx\n\nUp to this point,\nthe execution of the CLIs in development required doing clean builds of the CLIs and its dependencies through [Rollup](https://rollupjs.org/).\nThe consequence of that was **longer development cycles**,\nwhich is intimately connected to the experience contributing to the project.\n\nTo improve the experience,\nwe introduced a build system,\n[Nx](https://nx.dev/),\nwhich provides **incremental builds** by leveraging the dependency graph and the file changes.\nMoreover,\nthe provides an [affected](https://nx.dev/using-nx/affected) command to run a certain script only for the packages that are affected by the changes.\nThe same idea can also be leveraged in [continuous integration](https://nx.dev/ci/monorepo-ci-github-actions) to only build, test, and lint the packages that are affected by the changes.\nBy doing so we also shorten the CI cycles.\n```\n\n----------------------------------------\n\nTITLE: JSON Output Example from shopify theme push\nDESCRIPTION: Sample JSON output returned when using the --json flag with the theme push command, showing theme information including ID, name, role, and URLs for editor and preview.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theme\": {\n  \"id\": 108267175958,\n  \"name\": \"MyTheme\",\n  \"role\": \"unpublished\",\n  \"shop\": \"mystore.myshopify.com\",\n  \"editor_url\": \"https://mystore.myshopify.com/admin/themes/108267175958/editor\",\n  \"preview_url\": \"https://mystore.myshopify.com/?preview_theme_id=108267175958\"\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI-Kit Network Retry\nDESCRIPTION: Enables automatic retry for network errors in CLI-Kit, which can be disabled using an environment variable.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.77.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSHOPIFY_CLI_SKIP_NETWORK_LEVEL_RETRY\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Commands for Terminal 1\nDESCRIPTION: Commands to initialize the development environment and create a test app with UI extensions\nSOURCE: https://github.com/shopify/cli/blob/main/packages/ui-extensions-dev-console/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndev cd cli\\nbin/create-test-app.js -e ui\n```\n\n----------------------------------------\n\nTITLE: Releasing Shopify App Version in Shell\nDESCRIPTION: Use `shopify app release` to publish a chosen app version, marking it as active. Requires specifying the version using the `--version` flag, with an optional force release parameter to bypass confirmations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nshopify app release --version <version>\n```\n\n----------------------------------------\n\nTITLE: Referencing Shopify Configuration Parameters\nDESCRIPTION: Configuration file paths and parameters mentioned in changes, including dev_store_url located under ./shopify directory\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.75.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndev_store_url\n./shopify\nshopify theme push -x\n```\n\n----------------------------------------\n\nTITLE: Using shopify upgrade Command in Shopify CLI\nDESCRIPTION: A simple command that provides information on how to upgrade the Shopify CLI to the latest version.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify upgrade\n```\n\n----------------------------------------\n\nTITLE: Package Reference - Shopify CLI\nDESCRIPTION: Reference to the unified npm package for Shopify CLI, which is now defaulted as a global CLI tool.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.59.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@shopify/cli\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Command Structure for Globally Installed CLI in Markdown\nDESCRIPTION: This snippet illustrates the structure of a Shopify CLI command when installed globally, showing CLI, topic, command, argument, and flags.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/command-guidelines.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|CLI (always Shopify) | Topic | Command | Argument | Flags (with or without options) |\n| :------------- | :------------- | :------------- | :------------- | :------------- |\n| shopify | hydrogen | add | eslint | _no flag_ |\n```\n\n----------------------------------------\n\nTITLE: Defining a Success Render Function with Token Constraints in TypeScript\nDESCRIPTION: Shows the type definition for a renderSuccess function that accepts only inline tokens for the nextSteps parameter.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/ui-kit/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrenderSuccess({nextSteps: TokenItem<InlineToken>[]}) {\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Patch Changes in Markdown Changelog\nDESCRIPTION: Markdown snippet showing how to document patch changes in the changelog, including dependency updates and specific fixes.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/plugin-cloudflare/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 516893d44: Unify Cloudflare errors\n- Updated dependencies [4bb8fff29]\n- Updated dependencies [3f36e9463]\n- Updated dependencies [cf5bbff61]\n- Updated dependencies [46a72a6b4]\n- Updated dependencies [3ed6ae88e]\n- Updated dependencies [d6b02afcf]\n- Updated dependencies [e0cd881e1]\n- Updated dependencies [20d667246]\n  - @shopify/cli-kit@3.50.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Poor Flag Usage in Markdown\nDESCRIPTION: This snippet illustrates an example of a poor, overly terse flag usage that can lead to ambiguity.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/command-guidelines.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|  ❌ | Don't: | rsync --owner | Because it's unnecessarily terse, it's ambiguous whether this flag means \"preserve the current owner\" or \"assign ownership\".|\n```\n\n----------------------------------------\n\nTITLE: Using Theme Dev Command with Theme Editor Sync Flag\nDESCRIPTION: Example of using the theme dev command with the theme-editor-sync flag which was fixed to avoid loops, as mentioned in the patch changes.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme dev --theme-editor-sync\n```\n\n----------------------------------------\n\nTITLE: Adding Shopify Plugins\nDESCRIPTION: Command to install plugins into Shopify CLI with support for npm registry, GitHub URLs, and GitHub slugs.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify plugins add PLUGIN... [-f] [-h] [--json] [-s | -v]\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.53.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.53.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Command Structure for Generic Commands in Markdown\nDESCRIPTION: This snippet shows the structure of generic Shopify CLI commands that don't have topics, such as help, version, upgrade, and logs.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/command-guidelines.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| package manager | CLI (always Shopify) | Topic | Command | Argument | Flags (with or without options) |\n| :------------- | :------------- | :------------- | :------------- | :------------- | :------------- |\n| npm run | shopify | _no topic_ | help | extension | _no flag_ |\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for CLI Theme Compatibility\nDESCRIPTION: An environment variable that should not be used but has been fixed for compatibility. This references the bundled theme CLI environment variable mentioned in version 3.51.0.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSHOPIFY_CLI_BUNDLED_THEME_CLI\n```\n\n----------------------------------------\n\nTITLE: Using Command Flags vs Environment Variables in Shopify CLI\nDESCRIPTION: This snippet demonstrates the two equivalent ways to pass flags to the Shopify CLI - either directly as command arguments or through environment variables. This pattern is enforced by the 'command-flags-with-env' rule.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/eslint-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopify app generate extension --type product_subscription\n\n# vs\n\nSHOPIFY_FLAG_EXTENSION_TYPE=product_subscription shopify app generate extension\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.54.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.54.0\n```\n\n----------------------------------------\n\nTITLE: NextJS Peer Dependencies Example\nDESCRIPTION: Illustrates how peer dependencies might be implemented in the future, using NextJS's approach with React as an example.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022_01-unified-dependency-graph.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"next\": \"12.0.1\",\n    \"react\": \"17.0.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Update Commands\nDESCRIPTION: Examples of the theme update commands introduced in versions 3.47.0 and 3.48.0 for managing theme updates.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme update init\nshopify theme update check\nshopify theme update run\n```\n\n----------------------------------------\n\nTITLE: Debugging CPU Performance in Hydrogen App\nDESCRIPTION: Command to build and profile server startup time performance. Allows specification of entry file, output profile location, and project path.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nshopify hydrogen debug cpu [--entry <value>] [--output <value>] [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 3.47.0\nDESCRIPTION: Changelog entry for versioned app config support addition\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.47.0\n\n### Minor Changes\n\n- 0896e62b1: Versioned app config support\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all the necessary dependencies for the Shopify CLI project using PNPM package manager.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/cross-os-compatibility.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Specifying dependency version in Markdown\nDESCRIPTION: Lists a dependency update for the @shopify/cli-kit package.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- @shopify/cli-kit@3.78.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Flag Usage in Markdown\nDESCRIPTION: This snippet shows an example of a good, semantically meaningful flag usage in a command.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/command-guidelines.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| ✅ | Do:  | pnpm add <package> --ignore-workspace-root-check | This flag is long, but it accurately describes the choice the developer is making. |\n```\n\n----------------------------------------\n\nTITLE: Version Header - ESLint Plugin CLI\nDESCRIPTION: Package name header for the ESLint plugin changelog\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @shopify/eslint-plugin-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify CLI for App Development using bun (experimental)\nDESCRIPTION: Initializes a new Shopify app project using bun as the package manager. This is marked as experimental and may not have full stability or feature parity.\nSOURCE: https://github.com/shopify/cli/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun create @shopify/app@latest\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.66.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.66.0\n```\n\n----------------------------------------\n\nTITLE: Logging Out of Shopify Account with CLI\nDESCRIPTION: This command logs the user out of their Shopify account or Partner account and store.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify auth logout\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.64.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.64.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Minor Changes in Markdown Changelog\nDESCRIPTION: Markdown snippet demonstrating how to document minor changes in the changelog, including increased Node version requirement and new feature support.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/plugin-cloudflare/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- 1d6fe3475: Increase minimum Node version to 18\n- 0896e62b1: Versioned app config support\n```\n\n----------------------------------------\n\nTITLE: Reserved Flags Environment Variable Naming in TypeScript\nDESCRIPTION: This snippet illustrates how reserved flags must use consistent environment variable names. The 'command-reserved-flags' rule ensures that specific flags always use their designated environment variable names.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/eslint-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Dev extends Command {\n  static flags = {\n    path: Flags.string({\n      hidden: true,\n      env: 'SHOPIFY_FLAG_APP_PATH', // Incorrect: It must be SHOPIFY_FLAG_PATH\n    }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.62.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.62.0\n```\n\n----------------------------------------\n\nTITLE: Updating Cloudflare Plugin Version in Markdown\nDESCRIPTION: Markdown snippet showing a version update for the @shopify/plugin-cloudflare package, including patch changes and dependency updates.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/plugin-cloudflare/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.78.0\n\n### Patch Changes\n\n- @shopify/cli-kit@3.78.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Example Page Command in Markdown\nDESCRIPTION: This snippet shows how to run the kitchen-sink command to view more examples in the CLI example page. It uses a placeholder for the package manager command.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/ui-kit/guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<PACKAGEMANAGER> shopify kitchen-sink all\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 3.45.0\nDESCRIPTION: Changelog entry for initial release of eslint rules package\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.45.0\n\n### Minor Changes\n\n- e27d6a874: First version of the eslint rules package\n```\n\n----------------------------------------\n\nTITLE: Discussing Alternatives to Nx in Markdown\nDESCRIPTION: This markdown snippet outlines the alternatives considered to Nx, explaining why implementing incremental builds manually was not chosen and highlighting the advantages of using Nx.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022_02-Incremental-builds-with-Nx.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Alernatives considered\n\nInstead of using Nx,\nwe could have implemented incremental builds and selective task execution ourselves by parsing and extracting information from the graph,\nbut that'd have come with additional complexity and ongoing maintenance cost.\nThe Nx setup is very simple,\nthe tool is well maintained and documented with an active community,\nand the tests that we did yielded very promising results.\n```\n\n----------------------------------------\n\nTITLE: Defining Item Interface for Select Prompts in TypeScript\nDESCRIPTION: Defines the Item interface used in renderSelectPrompt for creating choices with labels, values, optional keys, and groups.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli-kit/ui-kit/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Item<T> {\n  label: string\n  value: T\n  key?: string\n  group?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 3.47.2\nDESCRIPTION: Changelog entry documenting patch for rate limiting handling in large projects\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.47.2\n\n### Patch Changes\n\n- 40a7b1229a: CLI now better handles 429 rate limiting for large projects\n```\n\n----------------------------------------\n\nTITLE: Legacy Block-Scoped Dependencies in Shopify CLI\nDESCRIPTION: Shows the old approach where each block managed its own dependencies, leading to potential duplication and version conflicts.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022_01-unified-dependency-graph.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n     \"@shopify/checkout-ui-extensions-run\": \"0.7.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Shopify CLI\nDESCRIPTION: This command displays help information for Shopify CLI or a specific command.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify help [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Java Execution Path in Vert.x HTTP Server with Netty and Mozilla JavaScript Runtime\nDESCRIPTION: These stack traces show the execution flow of HTTP requests in a Vert.x application, from Netty's NIO event processing through to JavaScript execution in Mozilla Rhino. The traces capture various operations including JavaScript method calls, HTTP header operations, and channel write operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_80\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/ScriptRuntime:.setObjectElem_[j];org/mozilla/javascript/ScriptRuntime:.indexFromString_[j] 2\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j] 2\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];io/netty/handler/codec/http/DefaultHttpHeaders:.set_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j] 3\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Event Processing with TCP Options Evaluation\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's NIO event loop processing to kernel-level TCP write operations. This trace includes TCP established options evaluation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_35\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];tcp_send_mss_[k];tcp_current_mss_[k];tcp_established_options_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Static ESM Import Example - Lodash\nDESCRIPTION: Example of a problematic static ESM import that loads the entire Lodash library even when only one utility is needed.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022-12-21-dynamically-importing-lodash-using-commonjs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { groupBy } from 'lodash-es'\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace for Vert.x HTTP Request Processing\nDESCRIPTION: This stack trace shows the execution path of a Vert.x application handling an HTTP request, starting from the Java thread creation to the Netty event loop, HTTP server, and JavaScript execution via Mozilla Rhino.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_58\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.getPropFunctionAndThis_[j]\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace: Netty and Vert.x with JavaScript Parent Scope Access\nDESCRIPTION: This stack trace shows the execution path leading to accessing the parent scope of a JavaScript object. It illustrates the deep integration between Netty, Vert.x, and the Mozilla Rhino JavaScript engine in handling HTTP requests and executing JavaScript code.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_75\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptableObject:.getParentScope_[j]\n```\n\n----------------------------------------\n\nTITLE: Experimental Vite Setup\nDESCRIPTION: Command to upgrade a Hydrogen project to use Vite build tool.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen setup vite [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Processing HTTP Request in Netty-based Vert.x Server (Java)\nDESCRIPTION: This stack trace shows the execution flow of processing an HTTP request in a Netty-based Vert.x server. It includes Netty's event loop, channel reading, HTTP decoding, and JavaScript execution via Rhino.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_82\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/handler/codec/MessageToMessageEncoder:.write_[j];io/netty/handler/codec/http/HttpObjectEncoder:.encode_[j];java/util/ArrayList:.add_[j]\n```\n\n----------------------------------------\n\nTITLE: Garbage Collection Task Processing\nDESCRIPTION: Stack trace showing garbage collection operations including class scanning and promotion management\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGCTaskThread::run;\nScavengeRootsTask::do_it;\nClassLoaderDataGraph::oops_do;\nClassLoaderData::oops_do;\nPSScavengeKlassClosure::do_klass\n```\n\n----------------------------------------\n\nTITLE: Using shopify version Command in Shopify CLI\nDESCRIPTION: A simple command that displays the currently installed version of the Shopify CLI.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ shopify version\n```\n\n----------------------------------------\n\nTITLE: Netty HTTP Request Processing Stack Trace\nDESCRIPTION: Java stack trace showing the processing of an HTTP request through Netty's NIO event loop, channel handlers, and Vertx server components. Includes the full call chain from thread start to message encoding.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_81\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/handler/codec/MessageToMessageEncoder:.write_[j];io/netty/handler/codec/http/HttpObjectEncoder:.encode_[j];io/netty/buffer/AbstractByteBufAllocator:.directBuffer_[j];io/netty/util/concurrent/FastThreadLocal:.get_[j]\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace for JavaScript Attribute Setting in Vert.x\nDESCRIPTION: This stack trace demonstrates the process of setting JavaScript attributes within a Vert.x application, utilizing Mozilla Rhino for JavaScript execution and Netty for event processing and HTTP request handling.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_62\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/IdScriptableObject:.setAttributes_[j]\n```\n\n----------------------------------------\n\nTITLE: Stack Trace - Object Creation and Slot Management\nDESCRIPTION: Stack trace showing the flow from Netty NIO event processing through Vert.x server handling to Mozilla JavaScript runtime object creation and slot management.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_72\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.setObjectProp_[j];org/mozilla/javascript/IdScriptableObject:.put_[j];org/mozilla/javascript/ScriptableObject:.getSlot_[j];org/mozilla/javascript/ScriptableObject:.createSlot_[j]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Shopify CLI Repository\nDESCRIPTION: Command to clone the Shopify CLI repository from GitHub. This is the first step in setting up a local development environment for testing cross-OS compatibility.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/cross-os-compatibility.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Shopify/cli.git\n```\n\n----------------------------------------\n\nTITLE: Netty HTTP Request Processing Stack Trace\nDESCRIPTION: Thread stack trace showing the flow of HTTP request processing in Netty, starting from NioEventLoop down through HTTP header decoding and JavaScript handling via Mozilla Rhino runtime.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_88\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/handler/codec/http/DefaultHttpHeaders:.set_[j]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace with dev_queue_xmit_nit\nDESCRIPTION: This stack trace shows the flow of a network I/O operation from Java application layer using Netty framework down to the kernel's network stack, ending with dev_queue_xmit_nit.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];dev_hard_start_xmit_[k];dev_queue_xmit_nit_[k]\n```\n\n----------------------------------------\n\nTITLE: Inefficient Sequential Async Function Example in JavaScript\nDESCRIPTION: Example of inefficient sequential execution of asynchronous functions where operations that don't depend on each other are awaited one after another.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/performance.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function slowFunction() {\n    await firstSlowFunction()\n    await secondSlowFunction()\n}\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace - Netty NIO Event Processing with Vert.x\nDESCRIPTION: Stack trace showing the complete call hierarchy from thread start through Netty NIO event processing to JavaScript execution in Vert.x. Demonstrates the integration between Netty's event loop, Vert.x HTTP server, and Mozilla Rhino JavaScript engine.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_67\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.setObjectProp_[j];org/mozilla/javascript/IdScriptableObject:.findInstanceIdInfo_[j]\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Message Processing in Vertx\nDESCRIPTION: Stack trace showing HTTP request handling in Vert.x through DefaultHttpServer's ServerHandler.doMessageReceived method. This demonstrates the processing of HTTP messages in Vert.x's HTTP server implementation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_54\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j] 3\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop Read Operation Stack Trace\nDESCRIPTION: Detailed stack trace of a Netty NIO Event Loop processing a read operation, from high-level Netty abstractions down to low-level system calls. It shows the flow through various Netty classes, Java NIO, and into the Linux kernel.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_89\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/socket/nio/NioSocketChannel:.doReadBytes_[j];sun/nio/ch/SocketChannelImpl:.read_[j];sun/nio/ch/FileDispatcherImpl:.read0_[j];read;system_call_fastpath_[k];sys_read_[k];vfs_read_[k];do_sync_read_[k];sock_aio_read_[k];sock_aio_read.part.13_[k];do_sock_read.isra.12_[k];inet_recvmsg_[k];tcp_recvmsg_[k];skb_copy_datagram_iovec_[k]\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Headers in Netty-based Vert.x Server (Java)\nDESCRIPTION: This stack trace illustrates the process of adding HTTP headers in a Netty-based Vert.x server, showing the flow from JavaScript execution through Netty's channel writing to the final header addition.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_87\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/handler/codec/http/DefaultHttpHeaders:.add0_[j]\n```\n\n----------------------------------------\n\nTITLE: Creating CLI Shortcut\nDESCRIPTION: Command to create a global 'h2' shortcut for the Hydrogen CLI.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen shortcut\n```\n\n----------------------------------------\n\nTITLE: Vertx Handler Channel Read Stack Trace\nDESCRIPTION: Stack trace showing how decoded messages are passed to the Vert.x handler in the Netty pipeline. This represents the handoff point from Netty's protocol handling to Vert.x's application-level message processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_51\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Socket Channel Read Operation Stack Trace\nDESCRIPTION: Stack trace showing the call path from Netty NIO event loop through to kernel TCP read operations. Shows interaction between Java networking code and kernel networking stack.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_90\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/socket/nio/NioSocketChannel:.doReadBytes_[j];sun/nio/ch/SocketChannelImpl:.read_[j];sun/nio/ch/FileDispatcherImpl:.read0_[j];read;system_call_fastpath_[k];sys_read_[k];vfs_read_[k];do_sync_read_[k];sock_aio_read_[k];sock_aio_read.part.13_[k];do_sock_read.isra.12_[k];inet_recvmsg_[k];tcp_recvmsg_[k];skb_copy_datagram_iovec_[k];copy_user_enhanced_fast_string_[k]\n```\n\n----------------------------------------\n\nTITLE: Early Return Pattern for Profiling Module Loading in TypeScript\nDESCRIPTION: Example of adding an early return to a command class to profile only the static ESM module graph loading without executing the command's actual functionality.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/performance.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Build extends Command {\n    async run(): Promise<void> {\n        // Early return\n        return;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vert.x HTTP Handler Writing in Netty Channel (Java)\nDESCRIPTION: This stack trace focuses on the writing process in the Vert.x HTTP handler within the Netty channel, showing the flow from JavaScript execution to the actual write operation in the Netty pipeline.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_86\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j]\n```\n\n----------------------------------------\n\nTITLE: Netty Event Loop Processing Stack Trace with Recycler Operation\nDESCRIPTION: A Java stack trace showing the execution flow from the Netty NIO event loop through channel read and flush operations, ending with a recycler operation. This demonstrates the full lifecycle of a network request processing through Netty's pipeline architecture.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_46\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/util/Recycler:.recycle_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Kernel Fastpath System Call\nDESCRIPTION: Stack trace showing Netty's execution path through to the kernel system call fastpath mechanism. This trace includes the system_call_fastpath kernel function and file handling operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];fget_light_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty/Vert.x Stack Trace with JavaScript Property Checking\nDESCRIPTION: This stack trace shows the process flow that includes checking for the existence of JavaScript properties via IdScriptableObject.has. It demonstrates how Vert.x's JavaScript bridge determines whether properties exist before attempting access.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_70\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.setObjectProp_[j];org/mozilla/javascript/IdScriptableObject:.has_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Unlinking Hydrogen Project\nDESCRIPTION: Command to unlink a local project from a Hydrogen storefront.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/cli/README.md#2025-04-22_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\n$ shopify hydrogen unlink [--path <value>]\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Event Processing with SRCU Read Lock\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's NIO event loop processing to kernel-level SRCU read locking. This trace includes the __srcu_read_lock kernel function.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_39\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];fsnotify_[k];__srcu_read_lock_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Processing HTTP Request in Vert.x Server with Netty and Mozilla Rhino (Java)\nDESCRIPTION: This stack trace shows the execution path of a Java thread handling an HTTP request in a Vert.x server. It includes Netty's NIO event loop, HTTP request processing, and JavaScript execution using Mozilla Rhino. The trace demonstrates the flow from low-level network operations to high-level application logic.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_65\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.createFunctionActivation_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j]\n```\n\n----------------------------------------\n\nTITLE: Netty/Vert.x Stack Trace with IdScriptableObject.get\nDESCRIPTION: This stack trace extends the previous one to include JavaScript property access via IdScriptableObject.get. It shows how JavaScript objects are accessed in the context of Vert.x HTTP request processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_69\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.createFunctionActivation_[j];org/mozilla/javascript/IdScriptableObject:.get_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Event Processing with TCP xmit_size_goal Calculation\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's NIO event loop processing to kernel-level TCP write operations. Another execution path leading to tcp_xmit_size_goal.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_37\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];tcp_xmit_size_goal_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty/Vert.x Stack Trace with JavaScript Property Setting\nDESCRIPTION: This stack trace extends to JavaScript property setting operations via IdScriptableObject.put. It shows the complete flow from HTTP request handling to modifying JavaScript objects during Vert.x processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_71\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.setObjectProp_[j];org/mozilla/javascript/IdScriptableObject:.put_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Processing with JavaScript Handler\nDESCRIPTION: Stack trace showing the flow of request processing from Netty's NIO event loop through Vertx handlers and into Mozilla's JavaScript runtime. This trace captures method calls for channel reading and event handling.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_64\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j]\n```\n\n----------------------------------------\n\nTITLE: Using the Shopify CLI Doc Search Command\nDESCRIPTION: Command for quick access to shopify.dev documentation. Running this command opens your browser with the specified search query on shopify.dev.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.49.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshopify search <QUERY>\n```\n\n----------------------------------------\n\nTITLE: Netty NIO IP Packet Delivery Stack Trace\nDESCRIPTION: Stack trace showing Netty's NIO event processing through kernel network stack with focus on IP packet delivery. This trace highlights the path from Java application code down to IP local delivery completion in the kernel.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_28\n\nLANGUAGE: stack-trace\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_finish_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace for JavaScript Method Invocation in Vert.x\nDESCRIPTION: This stack trace illustrates the process of invoking JavaScript methods within a Vert.x application, using Mozilla Rhino for JavaScript execution and Netty for event handling and HTTP request processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_63\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/MemberBox:.invoke_[j]\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace for JavaScript Property Access in Vert.x\nDESCRIPTION: This stack trace demonstrates the process of accessing JavaScript properties within a Vert.x application, including the use of Mozilla Rhino for JavaScript execution and Netty for event handling.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_59\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/IdScriptableObject:.findInstanceIdInfo_[j]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace with dev_hard_start_xmit\nDESCRIPTION: This stack trace shows the flow of a network I/O operation from Java application layer using Netty framework down to the kernel's network stack, ending with dev_hard_start_xmit.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_hard_start_xmit_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty Channel Write Operations\nDESCRIPTION: Write operation processing including buffer management and native socket operations\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nio/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];\nio/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];\nsun/nio/ch/SocketChannelImpl:.write_[j];\nsun/nio/ch/FileDispatcherImpl:.write0_[j]\n```\n\n----------------------------------------\n\nTITLE: Java-JavaScript Object Wrapping in HTTP Server\nDESCRIPTION: Stack trace showing JavaScript-Java object integration through WrapFactory.wrapAsJavaObject during HTTP message processing. This demonstrates how Java objects are exposed to JavaScript code in the Vert.x environment.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_56\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/WrapFactory:.wrapAsJavaObject_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Unified Dependency Graph in Shopify CLI 3.0\nDESCRIPTION: Demonstrates the new centralized dependency management approach where all dependencies are managed through a single package.json at the app level.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022_01-unified-dependency-graph.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@shopify/cli\": \"3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Netty TCP Packet Cloning in Java and Kernel\nDESCRIPTION: This stack trace focuses on the TCP packet cloning process in the kernel. It shows how the kernel creates copies of network packets (skb_clone) as part of the TCP transmission process, which is crucial for efficient packet handling and retransmission.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];skb_clone_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty TCP Packet Transmission in Java and Kernel\nDESCRIPTION: This stack trace shows the final steps of TCP packet transmission in the kernel. It includes the tcp_transmit_skb function, which is responsible for actually sending the TCP packet to the network interface for transmission.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty Channel Read Complete with ChannelDuplexHandler\nDESCRIPTION: Stack trace showing the execution path for channel read completion in Netty's pipeline, ending at the ChannelDuplexHandler flush operation. This represents the event propagation through the Netty channel pipeline after a complete message has been read.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_47\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j] 2\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop Processing and TCP Write in Java and Kernel\nDESCRIPTION: This stack trace shows the execution path from Netty's NIO event loop processing through channel read, flush, and write operations, down to the kernel-level TCP packet transmission. It demonstrates the flow from high-level Java networking code to low-level system calls.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];__tcp_push_pending_frames_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop Stack Trace with Basic System Write Call\nDESCRIPTION: Stack trace showing Netty's execution path down to the basic system write call. This trace shows the transition from Java code to the native write system call.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write 1\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Event Processing with TCP Transmission Size Calculation\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's NIO event loop processing to kernel-level TCP write operations. This trace includes TCP transmission size goal calculation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_36\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];tcp_send_mss_[k];tcp_xmit_size_goal_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table of Reserved Commands and Flags in Shopify CLI\nDESCRIPTION: This markdown table presents a comprehensive list of reserved commands and flags for the Shopify CLI. It includes the command/flag name, short form(s) if applicable, and a brief description of the action performed by each command or flag.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/naming-conventions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCommand/Flag    | Short form(s)     | Action\n---             | ---               | ---\n`help`          | `--help`, `-h`    | Display detailed help text for a given command.\n`init`          |                   | Create a new project type (app, storefront, etc).\n`version`       | `--version`, `-v` | Display the CLI version.\n`--dry-run`     | `-n`              | For create, update, or delete actions, return and display what would happen when running this command, but don't modify any local or remote files.\n`--quiet`       | `-q`              | Run the command without additional output to the terminal. If the command returns some value, output it to the terminal with no additional text.\n`--verbose`     |                   | Print additional contextual information to the terminal during output.\n`--debug`       | `-d`              | Print debug information to the terminal during output.\n`--ci`          |                   | Run the command with CI-compatible output.\n`--path`        |                   | Run the command in this directory context.\n`--port <n>`    | `-p`              | When running a server, expose the specified port _n_.\n`--json`        |                   | Return command output as JSON.\n`--no-color`    |                   | Deactivate all color in the terminal output.\n`--store`       | `-s`              | Store URL (Development or Shopify Plus sandbox)\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop Stack Trace with Native Method Call\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's channel pipeline to the JNI native method call for writing data. This trace includes the Java_sun_nio_ch_FileDispatcherImpl_write0 native method call.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];Java_sun_nio_ch_FileDispatcherImpl_write0 1\n```\n\n----------------------------------------\n\nTITLE: Netty TCP Socket Write Operation Stack Trace\nDESCRIPTION: Stack trace showing the complete call path from Netty NioEventLoop through channel handlers to system-level socket write operations. The trace reveals how data flows through Netty's pipeline architecture, buffer management, and eventually to kernel socket operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_33\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];sk_stream_alloc_skb_[k];__alloc_skb_[k];__kmalloc_node_track_caller_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop TCP Communication Flow with bictcp_acked\nDESCRIPTION: Stack trace showing the complete flow of TCP communication from Netty's NIO event loop through the kernel networking stack, ending with TCP acknowledgment processing in the bictcp congestion control algorithm.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_[k];ip_local_deliver_finish_[k];tcp_v4_rcv_[k];tcp_v4_do_rcv_[k];tcp_rcv_established_[k];tcp_ack_[k];tcp_clean_rtx_queue_[k];bictcp_acked_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Theme Language Server with Dev Preview\nDESCRIPTION: Example of using the theme language-server command with the dev-preview flag added in version 3.50.0.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme language-server --dev-preview\n```\n\n----------------------------------------\n\nTITLE: Theme Console Command\nDESCRIPTION: Example of the new theme console command introduced in version 3.49.0 for evaluating Liquid templates.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme console\n```\n\n----------------------------------------\n\nTITLE: Theme Dev Command with No Delete Flag\nDESCRIPTION: Example of using the theme dev command with the new nodelete flag introduced in version 3.53.0.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme dev --nodelete\n```\n\n----------------------------------------\n\nTITLE: Theme Pull Command with Beta Flag\nDESCRIPTION: Command syntax showing the legacy theme pull implementation with optional beta flag for accessing the new implementation. The default behavior uses the legacy version.\nSOURCE: https://github.com/shopify/cli/blob/main/RELEASE_NOTES/3.55.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshopify theme pull --beta\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.59.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.59.0\n```\n\n----------------------------------------\n\nTITLE: Defining Build Scripts with Implicit Dependencies in package.json\nDESCRIPTION: This snippet demonstrates how build dependencies were implicitly defined in package.json scripts. The 'build' script depends on 'clean' being executed first, which is not explicitly stated but implied by the script's structure.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/decision-record/2022_08-automation-via-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"pnpm clean && tsc\",\n    \"clean\": \"rm -rf dist/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.61.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.61.0\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Network I/O Operations Through Java and Linux Kernel\nDESCRIPTION: This call stack trace shows the execution path of Netty's NIO event loop processing network I/O, from Java through JNI into the Linux kernel. It illustrates how Netty handles socket operations with its event-driven architecture, using ByteToMessageDecoder for processing incoming data and the channel pipeline for outbound data.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_32\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ktime_get_real_[k];getnstimeofday_[k];xen_clocksource_get_cycles_[k];pvclock_clocksource_read_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 3.46.0\nDESCRIPTION: Changelog entry for addition of DangerousConfirmationPrompt component\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.46.0\n\n### Minor Changes\n\n- edabd59a6: Add DangerousConfirmationPrompt component to call developer attention to dangerous yes/no decisions\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace: Netty, Vert.x, and JavaScript Name Resolution\nDESCRIPTION: This stack trace shows the complete path from Java thread start to JavaScript name resolution. It demonstrates the intricate process of handling HTTP requests in Netty and Vert.x, followed by JavaScript execution and name resolution in the Mozilla Rhino engine.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_78\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j];org/mozilla/javascript/ScriptRuntime:.name_[j];org/mozilla/javascript/ScriptRuntime:.nameOrFunction_[j];vtable chunks_[j]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Netty/Vert.x Event Processing Stack Trace with JavaScript Handling\nDESCRIPTION: This stack trace shows the complete execution path from thread creation through Netty event processing to JavaScript function execution via Mozilla Rhino. It illustrates how HTTP requests are processed through the NIO event loop and handed off to JavaScript handlers in Vert.x.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_68\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j];org/mozilla/javascript/ScriptRuntime:.createFunctionActivation_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Analyzing Netty NIO Event Loop Stack Trace with System Write Call\nDESCRIPTION: Java stack trace showing the execution path from Netty's NIO event loop through channel handlers to a system write call. The trace shows how data flows from the Java application through Netty's pipeline architecture to the underlying system calls.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_40\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];rw_verify_area_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace: Netty and Vert.x with JavaScript Prototype Access\nDESCRIPTION: This stack trace follows a similar path to the previous one but ends with accessing the prototype of a JavaScript object. It demonstrates the interaction between Netty, Vert.x, and the Mozilla Rhino JavaScript engine.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_74\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptableObject:.getPrototype_[j]\n```\n\n----------------------------------------\n\nTITLE: Command Flag Environment Variable Naming Convention in TypeScript\nDESCRIPTION: This example shows the proper naming convention for environment variables associated with command flags. The 'command-conventional-flag-env' rule enforces that environment variable names follow the 'SHOPIFY_FLAG_*' pattern.\nSOURCE: https://github.com/shopify/cli/blob/main/docs/cli/eslint-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Dev extends Command {\n  static flags = {\n    path: Flags.string({\n      hidden: true,\n      env: 'SHOPIFY_FLAG_PATH', // Correct\n    }),\n    force: Flags.string({\n      hidden: true,\n      env: 'FORCE', // Error\n    }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace for JavaScript Property Checking in Vert.x\nDESCRIPTION: This stack trace illustrates the process of checking for the existence of JavaScript properties within a Vert.x application, utilizing Mozilla Rhino for JavaScript execution and Netty for event processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_60\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/IdScriptableObject:.has_[j];org/mozilla/javascript/ScriptableObject:.getSlot_[j]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace in Java and Linux Kernel\nDESCRIPTION: This stack trace shows the flow of a network I/O operation from a Java application using Netty framework, through JNI calls, into Linux kernel system calls, and back up through the network stack. It covers both write and read operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_21\n\nLANGUAGE: txt\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];dev_hard_start_xmit_[k];loopback_xmit_[k];netif_rx_[k];netif_rx.part.82_[k];xen_restore_fl_direct_end_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty TCP Frame Transmission with Timing in Java and Kernel\nDESCRIPTION: This stack trace shows the complete process of TCP frame transmission, including timing operations. It demonstrates how the kernel prepares and sends TCP frames, including getting the current time for timestamping packets.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];ktime_get_real_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop TCP Communication Flow with RTT Estimation\nDESCRIPTION: Stack trace showing the complete flow of TCP communication from Netty's NIO event loop through the kernel networking stack, ending with round-trip time estimation in the TCP stack.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_26\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_[k];ip_local_deliver_finish_[k];tcp_v4_rcv_[k];tcp_v4_do_rcv_[k];tcp_rcv_established_[k];tcp_ack_[k];tcp_clean_rtx_queue_[k];tcp_rtt_estimator_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop Stack Trace with File Operations\nDESCRIPTION: Complete stack trace showing the execution path from Java thread initialization through Netty's NIO event processing to file dispatcher write operations. The trace illustrates how data flows through Netty's channel pipeline components for network I/O operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];  3\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Kernel System Write Call\nDESCRIPTION: Stack trace showing the complete path from Netty through to the kernel sys_write call. This trace shows the transition from Java code through JNI to kernel system calls.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;sys_write_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop TCP Communication Flow with getnstimeofday\nDESCRIPTION: Stack trace showing the complete flow of TCP communication from Netty's NIO event loop through the kernel networking stack, ending with timestamp retrieval via getnstimeofday.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_[k];ip_local_deliver_finish_[k];tcp_v4_rcv_[k];tcp_v4_do_rcv_[k];tcp_rcv_established_[k];tcp_ack_[k];tcp_clean_rtx_queue_[k];ktime_get_real_[k];getnstimeofday_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Kernel VFS Write Operations\nDESCRIPTION: Complete stack trace showing Netty's channel pipeline through to the kernel virtual file system (VFS) write operations. This trace includes the SRCU read lock operation used by the kernel during file system operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];__srcu_read_lock_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty TCP Send Message Processing in Java and Kernel\nDESCRIPTION: This stack trace extends the previous one, showing additional kernel-level processing for TCP message sending. It includes the tcp_sendmsg function, which is responsible for preparing and sending TCP segments.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace - Established Connection Lookup\nDESCRIPTION: Stack trace showing path from Netty NIO event loop through network layers to TCP established connection lookup\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_22\n\nLANGUAGE: stacktrace\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_[k];ip_local_deliver_finish_[k];tcp_v4_rcv_[k];__inet_lookup_established_[k]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace with dev_pick_tx\nDESCRIPTION: This stack trace shows the flow of a network I/O operation from Java application layer using Netty framework down to the kernel's network stack, ending with dev_pick_tx.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_pick_tx_[k]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace with xen_restore_fl_direct\nDESCRIPTION: This stack trace shows the flow of a network I/O operation from Java application layer using Netty framework down to the kernel's network stack, ending with xen_restore_fl_direct.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_20\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];dev_hard_start_xmit_[k];loopback_xmit_[k];netif_rx_[k];netif_rx.part.82_[k];xen_restore_fl_direct_[k]\n```\n\n----------------------------------------\n\nTITLE: Network I/O Stack Trace with loopback_xmit\nDESCRIPTION: This stack trace shows the flow of a network I/O operation from Java application layer using Netty framework down to the kernel's network stack, ending with loopback_xmit.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];dev_hard_start_xmit_[k];loopback_xmit_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop TCP Communication Flow with Xen Clock Source\nDESCRIPTION: Stack trace showing the complete flow of TCP communication from Netty's NIO event loop through the kernel networking stack, ending with timestamp retrieval via Xen clock source functions.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_[k];ip_local_deliver_finish_[k];tcp_v4_rcv_[k];tcp_v4_do_rcv_[k];tcp_rcv_established_[k];tcp_ack_[k];tcp_clean_rtx_queue_[k];ktime_get_real_[k];getnstimeofday_[k];xen_clocksource_get_cycles_[k];xen_clocksource_read_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO Event Loop TCP/IP Processing Stack Trace\nDESCRIPTION: Full stack trace showing the Netty NIO event loop handling channel operations through the Java and kernel networking stacks, from event processing to TCP RTT estimation. This trace reveals the complete path from Java application code through to kernel-level TCP/IP processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_27\n\nLANGUAGE: stack-trace\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];__do_softirq_[k];net_rx_action_[k];process_backlog_[k];__netif_receive_skb_[k];ip_rcv_[k];ip_rcv_finish_[k];ip_local_deliver_[k];ip_local_deliver_finish_[k];tcp_v4_rcv_[k];tcp_v4_do_rcv_[k];tcp_rcv_established_[k];tcp_ack_[k];tcp_clean_rtx_queue_[k];tcp_valid_rtt_meas_[k];tcp_rtt_estimator_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty TCP Segmentation Offload (TSO) in Java and Kernel\nDESCRIPTION: This stack trace illustrates the TCP Segmentation Offload (TSO) process in the kernel. It shows how the kernel prepares large TCP packets for transmission, potentially offloading the segmentation to the network hardware for improved performance.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_set_skb_tso_segs_[k]\n```\n\n----------------------------------------\n\nTITLE: Netty NIO RCU Bottom-Half Processing Stack Trace\nDESCRIPTION: Stack trace showing Netty NIO event processing to kernel RCU (Read-Copy-Update) bottom-half processing. This trace shows the path from Java application code through the kernel networking stack with focus on RCU quiescent state handling.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_29\n\nLANGUAGE: stack-trace\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];local_bh_enable_[k];do_softirq_[k];call_softirq_[k];rcu_bh_qs_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO SKB Features Processing Stack Trace\nDESCRIPTION: Stack trace showing Netty NIO event processing through to kernel network interface SKB (Socket Buffer) features handling. This trace reveals the path from Java application code down to network device queue handling in the kernel.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_30\n\nLANGUAGE: stack-trace\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_local_out_[k];ip_output_[k];ip_finish_output_[k];dev_queue_xmit_[k];netif_skb_features_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Direct Writer Cleanup\nDESCRIPTION: Stack trace ending with SocketChannelImpl's writerCleanup method, showing resource cleanup after write operations. This trace demonstrates how Netty ensures proper resource management after network I/O operations are completed.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_45\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.writerCleanup_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Event Processing with TCP MTU Calculation via ipv4_mtu\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's NIO event loop processing to kernel-level TCP write operations. This trace includes network packet processing down to the ipv4_mtu kernel function.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_34\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];tcp_send_mss_[k];tcp_current_mss_[k];ipv4_mtu_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Tracing Netty NIO Event Processing with Filesystem Notification\nDESCRIPTION: Stack trace showing the execution path from Java thread initialization through Netty's NIO event loop processing to kernel-level file system notification. This trace includes fsnotify kernel function.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_38\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];fsnotify_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Parallel GC Failed Allocation Stack Trace\nDESCRIPTION: Stack trace showing garbage collection operations triggered by memory allocation failure in the Parallel Scavenge garbage collector.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_91\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;VMThread::run;VMThread::loop;VMThread::evaluate_operation;VM_Operation::evaluate;VM_ParallelGCFailedAllocation::doit;ParallelScavengeHeap::failed_mem_allocate;PSScavenge::invoke;PSScavenge::invoke_no_policy;PSIsAliveClosure::do_object_b\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with AppArmor Permission Check\nDESCRIPTION: Stack trace showing Netty I/O operations with AppArmor security permissions being checked during the write operation. This trace demonstrates how system security frameworks interact with Java networking operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_41\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];rw_verify_area_[k];apparmor_file_permission_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Java Stacktrace for HTTP Request Processing in Netty/Vert.x\nDESCRIPTION: Java stacktraces showing the call hierarchy during HTTP request processing in a Netty/Vert.x application. The traces illustrate the flow from NIO event handling through channel processing to JavaScript execution via Mozilla Rhino.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_57\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/WrapFactory:.wrapAsJavaObject_[j];java/util/HashMap:.get_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/WrapFactory:.wrap_[j];java/util/HashMap:.get_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.getObjectProp_[j] 2\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.getObjectProp_[j];org/mozilla/javascript/ScriptableObject$RelinkedSlot:.getValue_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.getObjectProp_[j];vtable chunks_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.nameOrFunction_[j];org/mozilla/javascript/ScriptableObject$Slot:.getValue_[j] 1\n```\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.name_[j];org/mozilla/javascript/IdScriptableObject:.get_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Socket AIO Write Operation\nDESCRIPTION: Stack trace showing Netty's NIO event processing with an asynchronous socket write operation. This trace shows how Netty handles non-blocking I/O through the Java NIO API down to the operating system's socket implementation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_43\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];sock_aio_write_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Updating package version in Markdown\nDESCRIPTION: Defines the version number for a new release of the @shopify/theme package.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.78.0\n```\n\n----------------------------------------\n\nTITLE: Netty ByteBuf Release During Channel Read\nDESCRIPTION: Stack trace showing memory management in Netty with reference counting, ending at AbstractReferenceCountedByteBuf's release method. This demonstrates Netty's memory management for network buffers through reference counting.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_50\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/buffer/AbstractReferenceCountedByteBuf:.release_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace: Netty, Vert.x, and Mozilla Rhino Execution Path\nDESCRIPTION: This stack trace shows the execution path from Java thread start through Netty's NioEventLoop, Vert.x HTTP server handling, and JavaScript execution via Mozilla Rhino. It includes steps for processing selected keys, channel reading, and JavaScript property manipulation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_73\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.setObjectProp_[j];org/mozilla/javascript/IdScriptableObject:.put_[j];org/mozilla/javascript/ScriptableObject:.getSlot_[j];org/mozilla/javascript/ScriptableObject:.createSlot_[j]\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace for JavaScript Property Setting in Vert.x\nDESCRIPTION: This stack trace shows the process of setting JavaScript properties within a Vert.x application, using Mozilla Rhino for JavaScript execution and Netty for event handling and HTTP request processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_61\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/IdScriptableObject:.put_[j];org/mozilla/javascript/ScriptableObject:.getSlot_[j]\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.60.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.60.0\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace: Netty and Vert.x with JavaScript Function Call\nDESCRIPTION: This stack trace illustrates the process of a JavaScript function call within the Netty and Vert.x environment. It shows the integration between the Java-based server components and the JavaScript execution engine, focusing on the OptRuntime's call2 method.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_77\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/optimizer/OptRuntime:.call2_[j]\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace: Netty and Vert.x with JavaScript Built-in Prototype Access\nDESCRIPTION: This stack trace demonstrates the process of accessing a built-in prototype in the JavaScript environment. It showcases the interaction between Netty's event processing, Vert.x HTTP handling, and Mozilla Rhino's JavaScript execution, particularly focusing on prototype-related operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_76\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/TopLevel:.getBuiltinPrototype_[j]\n```\n\n----------------------------------------\n\nTITLE: Netty Channel Writing and RecyclableArrayList Instantiation (Java)\nDESCRIPTION: This stack trace shows the process of writing to a Netty channel, including the use of RecyclableArrayList and FastThreadLocal for performance optimization in a Vert.x server environment.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_83\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/handler/codec/MessageToMessageEncoder:.write_[j];io/netty/util/internal/RecyclableArrayList:.newInstance_[j];io/netty/util/concurrent/FastThreadLocal:.get_[j]\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.56.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.56.0\n```\n\n----------------------------------------\n\nTITLE: Netty Channel Read Operations\nDESCRIPTION: Channel read processing including buffer allocation and read completion handling\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nio/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];\nio/netty/buffer/AbstractByteBufAllocator:.directBuffer_[j];\nio/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j]\n```\n\n----------------------------------------\n\nTITLE: Java Thread Execution in Netty-based Vert.x Server with JavaScript Processing\nDESCRIPTION: This stack trace shows the execution path of a Java thread in a Netty-based server using Vert.x and Mozilla Rhino for JavaScript processing. It includes NIO event handling, HTTP request processing, and JavaScript object manipulation.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_66\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/ScriptRuntime:.newObject_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/IdScriptableObject:.has_[j]\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.55.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.55.0\n```\n\n----------------------------------------\n\nTITLE: Java Stack Trace - Netty HTTP Request Processing with JavaScript Runtime\nDESCRIPTION: Stack trace showing the execution path from Java thread startup through Netty NIO event processing to Vert.x HTTP server handling and Mozilla JavaScript runtime calls.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_79\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/ScriptRuntime:.indexFromString_[j]\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.65.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.65.0\n```\n\n----------------------------------------\n\nTITLE: Netty Event Processing Core Operations\nDESCRIPTION: Core event loop processing stack showing the main execution path through Netty's NIO event loop, including key selection and processing\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nio/netty/channel/nio/NioEventLoop:.run_[j];\nio/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];\nio/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.63.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.63.0\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.58.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.58.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 3.45.0-pre.1\nDESCRIPTION: Pre-release changelog entry for initial version of eslint rules package\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.45.0-pre.1\n\n### Minor Changes\n\n- e27d6a874: First version of the eslint rules package\n```\n\n----------------------------------------\n\nTITLE: Mozilla JavaScript Integration with Vertx\nDESCRIPTION: Stack trace showing JavaScript integration in Vert.x through Mozilla Rhino's Context.getWrapFactory method. This demonstrates how Vert.x integrates with the Mozilla Rhino JavaScript engine for script execution.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_53\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/mozilla/javascript/Context:.getWrapFactory_[j] 2\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Header 3.57.0\nDESCRIPTION: Version header showing major, minor and patch version\nSOURCE: https://github.com/shopify/cli/blob/main/packages/app/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.57.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 3.47.1\nDESCRIPTION: Changelog entry noting updates to nx and eslint rules\nSOURCE: https://github.com/shopify/cli/blob/main/packages/eslint-plugin-cli/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.47.1\n\n### Patch Changes\n\n- 9d3a6bade: Updated nx and eslint rules\n```\n\n----------------------------------------\n\nTITLE: JavaScript Scope Resolution in HTTP Server Handler\nDESCRIPTION: Stack trace showing JavaScript scope resolution during HTTP request handling through ScriptableObject.getParentScope. This demonstrates JavaScript variable scope management during HTTP request processing in Vert.x.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_55\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/ScriptableObject:.getParentScope_[j] 1\n```\n\n----------------------------------------\n\nTITLE: ConcurrentHashMap Access in Vertx Handler\nDESCRIPTION: Stack trace showing concurrent data structure access during Vert.x message handling via ConcurrentHashMap's get method. This demonstrates how Vert.x manages concurrent access to shared data structures during event processing.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_52\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];java/util/concurrent/ConcurrentHashMap:.get_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty ByteToMessageDecoder Channel Read Stack Trace\nDESCRIPTION: Stack trace showing the execution path for ByteToMessageDecoder's channelRead method in the Netty pipeline. This represents the decoding of raw bytes into structured messages in Netty's processing pipeline.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_49\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Channel Read Completion Stack Trace\nDESCRIPTION: A simplified stack trace showing the channel read completion flow in Netty's NIO event loop, ending at the Vertx handler's channelReadComplete method. This demonstrates how Vert.x integrates with Netty's event-driven architecture.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_48\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Socket Channel Write Cleanup\nDESCRIPTION: Stack trace showing Netty's NIO processing path with SocketChannelImpl's writerCleanup method. This trace demonstrates the cleanup process after a socket write operation, highlighting how Netty manages resources after I/O operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_44\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/SocketChannelImpl:.writerCleanup_[j] 1\n```\n\n----------------------------------------\n\nTITLE: Netty Stack Trace with Comprehensive Security Checks\nDESCRIPTION: Stack trace showing Netty I/O pipeline with multiple security checks including AppArmor and common file permissions. This demonstrates the layered security approach when Java networking code interacts with the operating system.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_42\n\nLANGUAGE: java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];rw_verify_area_[k];security_file_permission_[k];apparmor_file_permission_[k];common_file_perm_[k] 1\n```\n\n----------------------------------------\n\nTITLE: Netty NIO IP Output Stack Trace\nDESCRIPTION: Stack trace showing Netty NIO event processing through the IP output processing path in the kernel. This trace demonstrates the path from Java application code through socket I/O down to IP packet output processing in the kernel.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_31\n\nLANGUAGE: stack-trace\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelReadComplete_[j];org/vertx/java/core/net/impl/VertxHandler:.channelReadComplete_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelDuplexHandler:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/ChannelOutboundHandlerAdapter:.flush_[j];io/netty/channel/AbstractChannelHandlerContext:.flush_[j];io/netty/channel/DefaultChannelPipeline$HeadContext:.flush_[j];io/netty/channel/AbstractChannel$AbstractUnsafe:.flush0_[j];io/netty/channel/nio/AbstractNioByteChannel:.doWrite_[j];io/netty/buffer/PooledUnsafeDirectByteBuf:.readBytes_[j];sun/nio/ch/SocketChannelImpl:.write_[j];sun/nio/ch/FileDispatcherImpl:.write0_[j];write;system_call_fastpath_[k];sys_write_[k];vfs_write_[k];do_sync_write_[k];sock_aio_write_[k];do_sock_write.isra.10_[k];inet_sendmsg_[k];tcp_sendmsg_[k];__tcp_push_pending_frames_[k];tcp_write_xmit_[k];tcp_transmit_skb_[k];ip_queue_xmit_[k];ip_output_[k] 2\n```\n\n----------------------------------------\n\nTITLE: ArrayList Capacity Ensuring in Netty Channel Writing (Java)\nDESCRIPTION: This stack trace demonstrates the process of ensuring capacity in an ArrayList during Netty channel writing operations in a Vert.x server, likely part of preparing a response buffer.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_84\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/handler/codec/MessageToMessageEncoder:.write_[j];java/util/ArrayList:.ensureExplicitCapacity_[j]\n```\n\n----------------------------------------\n\nTITLE: Vtable Chunks Access in Netty Channel Writing (Java)\nDESCRIPTION: This stack trace shows the access of vtable chunks during Netty channel writing operations in a Vert.x server, likely related to method dispatch or memory management optimizations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_85\n\nLANGUAGE: Java\nCODE:\n```\njava;start_thread;java_start;JavaThread::run;JavaThread::thread_main_inner;thread_entry;JavaCalls::call_virtual;JavaCalls::call_virtual;JavaCalls::call_helper;call_stub_[j];Interpreter_[j];Interpreter_[j];io/netty/channel/nio/NioEventLoop:.run_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeys_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKeysOptimized_[j];io/netty/channel/nio/NioEventLoop:.processSelectedKey_[j];io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe:.read_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];io/netty/handler/codec/ByteToMessageDecoder:.channelRead_[j];io/netty/channel/AbstractChannelHandlerContext:.fireChannelRead_[j];org/vertx/java/core/net/impl/VertxHandler:.channelRead_[j];org/vertx/java/core/http/impl/DefaultHttpServer$ServerHandler:.doMessageReceived_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vhello_js_1:.call_[j];org/mozilla/javascript/gen/file__home_bgregg_testtest_vert_x_2_1_4_sys_mods_io_vertx_lang_js_1_1_0_[j];org/mozilla/javascript/NativeJavaMethod:.call_[j];org/mozilla/javascript/MemberBox:.invoke_[j];sun/reflect/DelegatingMethodAccessorImpl:.invoke_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];org/vertx/java/core/http/impl/VertxHttpHandler:.write_[j];io/netty/channel/AbstractChannelHandlerContext:.write_[j];io/netty/handler/codec/MessageToMessageEncoder:.write_[j];vtable chunks_[j]\n```\n\n----------------------------------------\n\nTITLE: Kernel Event Check Stack Trace\nDESCRIPTION: Short stack trace showing kernel-level event checking and hypercall operations.\nSOURCE: https://github.com/shopify/cli/blob/main/packages/theme/assets/speedscope/perf-vertx-stacks-01-collapsed-all.2681da68.txt#2025-04-22_snippet_92\n\nLANGUAGE: kernel\nCODE:\n```\njava;write;check_events_[k];hypercall_page_[k]\n```"
  }
]